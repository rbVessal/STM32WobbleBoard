
STM32WobbleBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b344  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006eb  0801b580  0801b580  0002b580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bc6c  0801bc6c  0002bc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bc74  0801bc74  0002bc74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801bc78  0801bc78  0002bc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000114  20000000  0801bc7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000028ad  20000118  0801bd90  00030118  2**3
                  ALLOC
  8 ._user_heap_stack 00000603  200029c5  0801bd90  000329c5  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 10 .debug_info   00060d8d  00000000  00000000  0003014a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007886  00000000  00000000  00090ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003048  00000000  00000000  00098760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002df0  00000000  00000000  0009b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a138  00000000  00000000  0009e598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034cd0  00000000  00000000  000d86d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e3b4  00000000  00000000  0010d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0026b754  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000da3c  00000000  00000000  0026b7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000118 	.word	0x20000118
 8000254:	00000000 	.word	0x00000000
 8000258:	0801b564 	.word	0x0801b564

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000011c 	.word	0x2000011c
 8000274:	0801b564 	.word	0x0801b564

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b980 	b.w	8000f18 <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c36:	4604      	mov	r4, r0
 8000c38:	4688      	mov	r8, r1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 8084 	bne.w	8000d48 <__udivmoddi4+0x118>
 8000c40:	428a      	cmp	r2, r1
 8000c42:	4617      	mov	r7, r2
 8000c44:	d943      	bls.n	8000cce <__udivmoddi4+0x9e>
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	b142      	cbz	r2, 8000c5e <__udivmoddi4+0x2e>
 8000c4c:	f1c2 0020 	rsb	r0, r2, #32
 8000c50:	4091      	lsls	r1, r2
 8000c52:	4097      	lsls	r7, r2
 8000c54:	fa24 f000 	lsr.w	r0, r4, r0
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea40 0801 	orr.w	r8, r0, r1
 8000c5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c62:	0c23      	lsrs	r3, r4, #16
 8000c64:	fa1f fe87 	uxth.w	lr, r7
 8000c68:	fbb8 f6fc 	udiv	r6, r8, ip
 8000c6c:	fb0c 8116 	mls	r1, ip, r6, r8
 8000c70:	fb06 f00e 	mul.w	r0, r6, lr
 8000c74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c78:	4298      	cmp	r0, r3
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x5c>
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	f106 31ff 	add.w	r1, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x5a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 8131 	bhi.w	8000eec <__udivmoddi4+0x2bc>
 8000c8a:	460e      	mov	r6, r1
 8000c8c:	1a19      	subs	r1, r3, r0
 8000c8e:	b2a3      	uxth	r3, r4
 8000c90:	fbb1 f0fc 	udiv	r0, r1, ip
 8000c94:	fb0c 1110 	mls	r1, ip, r0, r1
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0x84>
 8000ca4:	193c      	adds	r4, r7, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x82>
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	f200 811a 	bhi.w	8000ee6 <__udivmoddi4+0x2b6>
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0x98>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xa2>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d152      	bne.n	8000d80 <__udivmoddi4+0x150>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	0c21      	lsrs	r1, r4, #16
 8000ce8:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cec:	fb0e 301c 	mls	r0, lr, ip, r3
 8000cf0:	fb08 f90c 	mul.w	r9, r8, ip
 8000cf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf8:	4589      	cmp	r9, r1
 8000cfa:	d90b      	bls.n	8000d14 <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000d02:	bf2c      	ite	cs
 8000d04:	2001      	movcs	r0, #1
 8000d06:	2000      	movcc	r0, #0
 8000d08:	4589      	cmp	r9, r1
 8000d0a:	d902      	bls.n	8000d12 <__udivmoddi4+0xe2>
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	f000 80f0 	beq.w	8000ef2 <__udivmoddi4+0x2c2>
 8000d12:	469c      	mov	ip, r3
 8000d14:	eba1 0109 	sub.w	r1, r1, r9
 8000d18:	b2a3      	uxth	r3, r4
 8000d1a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d22:	fb08 f800 	mul.w	r8, r8, r0
 8000d26:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2a:	45a0      	cmp	r8, r4
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x10e>
 8000d2e:	193c      	adds	r4, r7, r4
 8000d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x10c>
 8000d36:	45a0      	cmp	r8, r4
 8000d38:	f200 80d2 	bhi.w	8000ee0 <__udivmoddi4+0x2b0>
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	eba4 0408 	sub.w	r4, r4, r8
 8000d42:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d46:	e7ba      	b.n	8000cbe <__udivmoddi4+0x8e>
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x130>
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	f000 80be 	beq.w	8000ece <__udivmoddi4+0x29e>
 8000d52:	2600      	movs	r6, #0
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	4630      	mov	r0, r6
 8000d5a:	4631      	mov	r1, r6
 8000d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d60:	fab3 f683 	clz	r6, r3
 8000d64:	2e00      	cmp	r6, #0
 8000d66:	d14d      	bne.n	8000e04 <__udivmoddi4+0x1d4>
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	f0c0 80b3 	bcc.w	8000ed4 <__udivmoddi4+0x2a4>
 8000d6e:	4282      	cmp	r2, r0
 8000d70:	f240 80b0 	bls.w	8000ed4 <__udivmoddi4+0x2a4>
 8000d74:	4630      	mov	r0, r6
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0a6      	beq.n	8000cc8 <__udivmoddi4+0x98>
 8000d7a:	e9c5 4800 	strd	r4, r8, [r5]
 8000d7e:	e7a3      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000d80:	4097      	lsls	r7, r2
 8000d82:	f1c2 0320 	rsb	r3, r2, #32
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	fa24 f303 	lsr.w	r3, r4, r3
 8000d94:	fa1f f887 	uxth.w	r8, r7
 8000d98:	4094      	lsls	r4, r2
 8000d9a:	4303      	orrs	r3, r0
 8000d9c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da0:	0c1e      	lsrs	r6, r3, #16
 8000da2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da6:	fb00 fc08 	mul.w	ip, r0, r8
 8000daa:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000dae:	458c      	cmp	ip, r1
 8000db0:	d90e      	bls.n	8000dd0 <__udivmoddi4+0x1a0>
 8000db2:	1879      	adds	r1, r7, r1
 8000db4:	f100 36ff 	add.w	r6, r0, #4294967295
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0901 	movcs.w	r9, #1
 8000dbe:	f04f 0900 	movcc.w	r9, #0
 8000dc2:	458c      	cmp	ip, r1
 8000dc4:	d903      	bls.n	8000dce <__udivmoddi4+0x19e>
 8000dc6:	f1b9 0f00 	cmp.w	r9, #0
 8000dca:	f000 8096 	beq.w	8000efa <__udivmoddi4+0x2ca>
 8000dce:	4630      	mov	r0, r6
 8000dd0:	eba1 010c 	sub.w	r1, r1, ip
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dda:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dde:	fb06 fc08 	mul.w	ip, r6, r8
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	458c      	cmp	ip, r1
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1ca>
 8000dea:	1879      	adds	r1, r7, r1
 8000dec:	f106 33ff 	add.w	r3, r6, #4294967295
 8000df0:	d202      	bcs.n	8000df8 <__udivmoddi4+0x1c8>
 8000df2:	458c      	cmp	ip, r1
 8000df4:	f200 8088 	bhi.w	8000f08 <__udivmoddi4+0x2d8>
 8000df8:	461e      	mov	r6, r3
 8000dfa:	eba1 030c 	sub.w	r3, r1, ip
 8000dfe:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e02:	e770      	b.n	8000ce6 <__udivmoddi4+0xb6>
 8000e04:	f1c6 0720 	rsb	r7, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa02 fc06 	lsl.w	ip, r2, r6
 8000e10:	fa01 fe06 	lsl.w	lr, r1, r6
 8000e14:	40fa      	lsrs	r2, r7
 8000e16:	fa20 f807 	lsr.w	r8, r0, r7
 8000e1a:	40f9      	lsrs	r1, r7
 8000e1c:	fa00 f306 	lsl.w	r3, r0, r6
 8000e20:	4322      	orrs	r2, r4
 8000e22:	ea48 040e 	orr.w	r4, r8, lr
 8000e26:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000e2a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e2e:	fa1f f982 	uxth.w	r9, r2
 8000e32:	fbb1 faf8 	udiv	sl, r1, r8
 8000e36:	fb08 111a 	mls	r1, r8, sl, r1
 8000e3a:	fb0a f009 	mul.w	r0, sl, r9
 8000e3e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8000e42:	4570      	cmp	r0, lr
 8000e44:	d90e      	bls.n	8000e64 <__udivmoddi4+0x234>
 8000e46:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e4a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000e4e:	bf2c      	ite	cs
 8000e50:	f04f 0b01 	movcs.w	fp, #1
 8000e54:	f04f 0b00 	movcc.w	fp, #0
 8000e58:	4570      	cmp	r0, lr
 8000e5a:	d902      	bls.n	8000e62 <__udivmoddi4+0x232>
 8000e5c:	f1bb 0f00 	cmp.w	fp, #0
 8000e60:	d04e      	beq.n	8000f00 <__udivmoddi4+0x2d0>
 8000e62:	468a      	mov	sl, r1
 8000e64:	ebae 0e00 	sub.w	lr, lr, r0
 8000e68:	b2a4      	uxth	r4, r4
 8000e6a:	fbbe f0f8 	udiv	r0, lr, r8
 8000e6e:	fb08 ee10 	mls	lr, r8, r0, lr
 8000e72:	fb00 f909 	mul.w	r9, r0, r9
 8000e76:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8000e7a:	45f1      	cmp	r9, lr
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x25e>
 8000e7e:	eb12 0e0e 	adds.w	lr, r2, lr
 8000e82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e86:	d201      	bcs.n	8000e8c <__udivmoddi4+0x25c>
 8000e88:	45f1      	cmp	r9, lr
 8000e8a:	d840      	bhi.n	8000f0e <__udivmoddi4+0x2de>
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000e92:	ebae 0e09 	sub.w	lr, lr, r9
 8000e96:	fba0 890c 	umull	r8, r9, r0, ip
 8000e9a:	45ce      	cmp	lr, r9
 8000e9c:	4641      	mov	r1, r8
 8000e9e:	464c      	mov	r4, r9
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0x278>
 8000ea2:	d106      	bne.n	8000eb2 <__udivmoddi4+0x282>
 8000ea4:	4543      	cmp	r3, r8
 8000ea6:	d204      	bcs.n	8000eb2 <__udivmoddi4+0x282>
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	ebb8 010c 	subs.w	r1, r8, ip
 8000eae:	eb69 0402 	sbc.w	r4, r9, r2
 8000eb2:	b37d      	cbz	r5, 8000f14 <__udivmoddi4+0x2e4>
 8000eb4:	1a5a      	subs	r2, r3, r1
 8000eb6:	eb6e 0e04 	sbc.w	lr, lr, r4
 8000eba:	40f2      	lsrs	r2, r6
 8000ebc:	fa0e f707 	lsl.w	r7, lr, r7
 8000ec0:	fa2e f306 	lsr.w	r3, lr, r6
 8000ec4:	2600      	movs	r6, #0
 8000ec6:	4317      	orrs	r7, r2
 8000ec8:	e9c5 7300 	strd	r7, r3, [r5]
 8000ecc:	e6fc      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e6f9      	b.n	8000cc8 <__udivmoddi4+0x98>
 8000ed4:	1a84      	subs	r4, r0, r2
 8000ed6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eda:	2001      	movs	r0, #1
 8000edc:	4688      	mov	r8, r1
 8000ede:	e74a      	b.n	8000d76 <__udivmoddi4+0x146>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	e72b      	b.n	8000d3e <__udivmoddi4+0x10e>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	e6e3      	b.n	8000cb4 <__udivmoddi4+0x84>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	443b      	add	r3, r7
 8000ef0:	e6cc      	b.n	8000c8c <__udivmoddi4+0x5c>
 8000ef2:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	e70c      	b.n	8000d14 <__udivmoddi4+0xe4>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4439      	add	r1, r7
 8000efe:	e767      	b.n	8000dd0 <__udivmoddi4+0x1a0>
 8000f00:	f1aa 0a02 	sub.w	sl, sl, #2
 8000f04:	4496      	add	lr, r2
 8000f06:	e7ad      	b.n	8000e64 <__udivmoddi4+0x234>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	4439      	add	r1, r7
 8000f0c:	e775      	b.n	8000dfa <__udivmoddi4+0x1ca>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	4496      	add	lr, r2
 8000f12:	e7bc      	b.n	8000e8e <__udivmoddi4+0x25e>
 8000f14:	462e      	mov	r6, r5
 8000f16:	e6d7      	b.n	8000cc8 <__udivmoddi4+0x98>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 8000f20:	f000 f820 	bl	8000f64 <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_DataLogFusion_Process();
 8000f2c:	f000 f87a 	bl	8001024 <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d102      	bne.n	8000f4e <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	2000240c 	.word	0x2000240c
 8000f60:	20000588 	.word	0x20000588

08000f64 <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8000f6a:	f001 fc9b 	bl	80028a4 <MX_TIM15_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f000 fbec 	bl	800174c <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8000f74:	f000 f8e4 	bl	8001140 <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 8000f78:	f001 f90c 	bl	8002194 <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 8000f7c:	4924      	ldr	r1, [pc, #144]	; (8001010 <MX_DataLogFusion_Init+0xac>)
 8000f7e:	4825      	ldr	r0, [pc, #148]	; (8001014 <MX_DataLogFusion_Init+0xb0>)
 8000f80:	f001 f9b4 	bl	80022ec <MotionFX_manager_get_version>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f001 f9d0 	bl	800232a <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_MagCal_output_t mag_cal_test;
  MotionFX_MagCal_getParams(&mag_cal_test);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f017 ff5f 	bl	8018e50 <MotionFX_MagCal_getParams>

  /* If calibration data are available load HI coefficients */
  if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000f92:	7c3b      	ldrb	r3, [r7, #16]
 8000f94:	2b03      	cmp	r3, #3
 8000f96:	d132      	bne.n	8000ffe <MX_DataLogFusion_Init+0x9a>
  {
    ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001018 <MX_DataLogFusion_Init+0xb4>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 8000fa8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb0:	ee17 2a90 	vmov	r2, s15
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_DataLogFusion_Init+0xb8>)
 8000fb6:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fbc:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001018 <MX_DataLogFusion_Init+0xb4>
 8000fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 8000fc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd0:	ee17 2a90 	vmov	r2, s15
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_DataLogFusion_Init+0xb8>)
 8000fd6:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8000fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fdc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001018 <MX_DataLogFusion_Init+0xb4>
 8000fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe4:	edc7 7a05 	vstr	s15, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 8000fe8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff0:	ee17 2a90 	vmov	r2, s15
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_DataLogFusion_Init+0xb8>)
 8000ff6:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_DataLogFusion_Init+0xbc>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
  }

  DWT_Init();
 8000ffe:	f000 fbd9 	bl	80017b4 <DWT_Init>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 8001002:	f000 fcfb 	bl	80019fc <UART_StartReceiveMsg>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20002004 	.word	0x20002004
 8001014:	20001fe0 	.word	0x20001fe0
 8001018:	43fa0000 	.word	0x43fa0000
 800101c:	200005cc 	.word	0x200005cc
 8001020:	200005d8 	.word	0x200005d8

08001024 <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_DataLogFusion_Process(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8001028:	483b      	ldr	r0, [pc, #236]	; (8001118 <MX_DataLogFusion_Process+0xf4>)
 800102a:	f000 fc15 	bl	8001858 <UART_ReceivedMSG>
 800102e:	4603      	mov	r3, r0
 8001030:	2b01      	cmp	r3, #1
 8001032:	d106      	bne.n	8001042 <MX_DataLogFusion_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 8001034:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_DataLogFusion_Process+0xf4>)
 8001036:	791b      	ldrb	r3, [r3, #4]
 8001038:	2b32      	cmp	r3, #50	; 0x32
 800103a:	d102      	bne.n	8001042 <MX_DataLogFusion_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 800103c:	4836      	ldr	r0, [pc, #216]	; (8001118 <MX_DataLogFusion_Process+0xf4>)
 800103e:	f005 f87d 	bl	800613c <HandleMSG>
    }
  }

  if (MagCalRequest == 1U)
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <MX_DataLogFusion_Process+0xf8>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d120      	bne.n	800108e <MX_DataLogFusion_Process+0x6a>
  {
    /* Debouncing */
    HAL_Delay(50);
 800104c:	2032      	movs	r0, #50	; 0x32
 800104e:	f005 fc8d 	bl	800696c <HAL_Delay>

    /* Wait until the button is released */
    // TODO:  Figure out if #define BUTTON_KEY BUTTON USER is really needed
    while ((BSP_PB_GetState( BUTTON_USER ) == PushButtonState));
 8001052:	bf00      	nop
 8001054:	2000      	movs	r0, #0
 8001056:	f001 fd79 	bl	8002b4c <BSP_PB_GetState>
 800105a:	4602      	mov	r2, r0
 800105c:	4b30      	ldr	r3, [pc, #192]	; (8001120 <MX_DataLogFusion_Process+0xfc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d0f7      	beq.n	8001054 <MX_DataLogFusion_Process+0x30>

    /* Debouncing */
    HAL_Delay(50);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f005 fc81 	bl	800696c <HAL_Delay>

    MagCalRequest = 0;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <MX_DataLogFusion_Process+0xf8>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]

    /* Reset magnetometer calibration value*/
    MagCalStatus = 0;
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_DataLogFusion_Process+0x100>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
    MagOffset.x = 0;
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <MX_DataLogFusion_Process+0x104>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
    MagOffset.y = 0;
 800107c:	4b2a      	ldr	r3, [pc, #168]	; (8001128 <MX_DataLogFusion_Process+0x104>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
    MagOffset.z = 0;
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <MX_DataLogFusion_Process+0x104>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]

    /* Enable magnetometer calibration */
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8001088:	200a      	movs	r0, #10
 800108a:	f001 f94e 	bl	800232a <MotionFX_manager_MagCal_start>
  }

  if (SensorReadRequest == 1U)
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <MX_DataLogFusion_Process+0x108>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b01      	cmp	r3, #1
 8001096:	d13d      	bne.n	8001114 <MX_DataLogFusion_Process+0xf0>
  {
    SensorReadRequest = 0;
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <MX_DataLogFusion_Process+0x108>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800109e:	4824      	ldr	r0, [pc, #144]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010a0:	f000 f862 	bl	8001168 <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 80010a4:	4822      	ldr	r0, [pc, #136]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010a6:	f000 f9b3 	bl	8001410 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 80010aa:	4821      	ldr	r0, [pc, #132]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010ac:	f000 fa0a 	bl	80014c4 <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 80010b0:	481f      	ldr	r0, [pc, #124]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010b2:	f000 fa61 	bl	8001578 <Magneto_Sensor_Handler>

    /* Sensor Fusion specific part */
    FX_Data_Handler(&msg_dat);
 80010b6:	481e      	ldr	r0, [pc, #120]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010b8:	f000 f8ca 	bl	8001250 <FX_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 80010bc:	481c      	ldr	r0, [pc, #112]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010be:	f005 f823 	bl	8006108 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 80010c2:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 80010c4:	2277      	movs	r2, #119	; 0x77
 80010c6:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_DataLogFusion_Process+0x110>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d11e      	bne.n	800110e <MX_DataLogFusion_Process+0xea>
    {
      OfflineDataCount--;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	3b01      	subs	r3, #1
 80010d6:	4a18      	ldr	r2, [pc, #96]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 80010d8:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	da02      	bge.n	80010e8 <MX_DataLogFusion_Process+0xc4>
      {
        OfflineDataCount = 0;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_DataLogFusion_Process+0x118>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <MX_DataLogFusion_Process+0x118>)
 80010f0:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_DataLogFusion_Process+0x118>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	dd02      	ble.n	8001100 <MX_DataLogFusion_Process+0xdc>
      {
        OfflineDataReadIndex = 0;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_DataLogFusion_Process+0x118>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MX_DataLogFusion_Process+0x114>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	dd02      	ble.n	800110e <MX_DataLogFusion_Process+0xea>
      {
        SensorReadRequest = 1;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_DataLogFusion_Process+0x108>)
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <MX_DataLogFusion_Process+0x10c>)
 8001110:	f000 fc58 	bl	80019c4 <UART_SendMsg>
  }
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200005dc 	.word	0x200005dc
 800111c:	200005c8 	.word	0x200005c8
 8001120:	2000059c 	.word	0x2000059c
 8001124:	200005d8 	.word	0x200005d8
 8001128:	200005cc 	.word	0x200005cc
 800112c:	20000588 	.word	0x20000588
 8001130:	200006e0 	.word	0x200006e0
 8001134:	20000589 	.word	0x20000589
 8001138:	20000594 	.word	0x20000594
 800113c:	2000058c 	.word	0x2000058c

08001140 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 8001144:	f000 fe8e 	bl	8001e64 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 8001148:	f000 fe94 	bl	8001e74 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800114c:	f000 fe9a 	bl	8001e84 <BSP_SENSOR_MAG_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8001150:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001164 <Init_Sensors+0x24>
 8001154:	f000 fef5 	bl	8001f42 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8001158:	2004      	movs	r0, #4
 800115a:	f000 ff01 	bl	8001f60 <BSP_SENSOR_ACC_SetFullScale>
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	42c80000 	.word	0x42c80000

08001168 <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	; 0x30
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 8001176:	4b32      	ldr	r3, [pc, #200]	; (8001240 <RTC_Handler+0xd8>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <RTC_Handler+0xdc>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d12b      	bne.n	80011dc <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <RTC_Handler+0xe0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a30      	ldr	r2, [pc, #192]	; (800124c <RTC_Handler+0xe4>)
 800118a:	2134      	movs	r1, #52	; 0x34
 800118c:	fb01 f303 	mul.w	r3, r1, r3
 8001190:	4413      	add	r3, r2
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <RTC_Handler+0xe0>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a2b      	ldr	r2, [pc, #172]	; (800124c <RTC_Handler+0xe4>)
 800119e:	2134      	movs	r1, #52	; 0x34
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	3301      	adds	r3, #1
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 80011ae:	4b26      	ldr	r3, [pc, #152]	; (8001248 <RTC_Handler+0xe0>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a26      	ldr	r2, [pc, #152]	; (800124c <RTC_Handler+0xe4>)
 80011b4:	2134      	movs	r1, #52	; 0x34
 80011b6:	fb01 f303 	mul.w	r3, r1, r3
 80011ba:	4413      	add	r3, r2
 80011bc:	3302      	adds	r3, #2
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <RTC_Handler+0xe0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a20      	ldr	r2, [pc, #128]	; (800124c <RTC_Handler+0xe4>)
 80011ca:	2134      	movs	r1, #52	; 0x34
 80011cc:	fb01 f303 	mul.w	r3, r1, r3
 80011d0:	4413      	add	r3, r2
 80011d2:	3303      	adds	r3, #3
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 80011da:	e02d      	b.n	8001238 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 80011dc:	f107 0308 	add.w	r3, r7, #8
 80011e0:	2200      	movs	r2, #0
 80011e2:	4619      	mov	r1, r3
 80011e4:	4816      	ldr	r0, [pc, #88]	; (8001240 <RTC_Handler+0xd8>)
 80011e6:	f00b fc57 	bl	800ca98 <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	4813      	ldr	r0, [pc, #76]	; (8001240 <RTC_Handler+0xd8>)
 80011f4:	f00b fd38 	bl	800cc68 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2264      	movs	r2, #100	; 0x64
 8001200:	fb02 f303 	mul.w	r3, r2, r3
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 8001206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120a:	3301      	adds	r3, #1
 800120c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	b2db      	uxtb	r3, r3
 8001216:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800121e:	7a3a      	ldrb	r2, [r7, #8]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 8001224:	7a7a      	ldrb	r2, [r7, #9]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800122a:	7aba      	ldrb	r2, [r7, #10]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001236:	729a      	strb	r2, [r3, #10]
}
 8001238:	bf00      	nop
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200023dc 	.word	0x200023dc
 8001244:	20000589 	.word	0x20000589
 8001248:	2000058c 	.word	0x2000058c
 800124c:	20001e40 	.word	0x20001e40

08001250 <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler(TMsg *Msg)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b09e      	sub	sp, #120	; 0x78
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	677b      	str	r3, [r7, #116]	; 0x74
  MFX_input_t data_in;
  MFX_input_t *pdata_in = &data_in;
 800125c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001260:	673b      	str	r3, [r7, #112]	; 0x70
  MFX_output_t data_out;
  MFX_output_t *pdata_out = &data_out;
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	66fb      	str	r3, [r7, #108]	; 0x6c

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8001268:	4b62      	ldr	r3, [pc, #392]	; (80013f4 <FX_Data_Handler+0x1a4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b10      	cmp	r3, #16
 8001272:	f040 80ba 	bne.w	80013ea <FX_Data_Handler+0x19a>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <FX_Data_Handler+0x1a4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	2b20      	cmp	r3, #32
 8001280:	f040 80b3 	bne.w	80013ea <FX_Data_Handler+0x19a>
    {
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8001284:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <FX_Data_Handler+0x1a4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800128c:	2b40      	cmp	r3, #64	; 0x40
 800128e:	f040 80ac 	bne.w	80013ea <FX_Data_Handler+0x19a>
      {
        /* Convert angular velocity from [mdps] to [dps] */
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 8001292:	4b59      	ldr	r3, [pc, #356]	; (80013f8 <FX_Data_Handler+0x1a8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80013fc <FX_Data_Handler+0x1ac>
 80012a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 80012aa:	4b53      	ldr	r3, [pc, #332]	; (80013f8 <FX_Data_Handler+0x1a8>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80013fc <FX_Data_Handler+0x1ac>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012be:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 80012c2:	4b4d      	ldr	r3, [pc, #308]	; (80013f8 <FX_Data_Handler+0x1a8>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80013fc <FX_Data_Handler+0x1ac>
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

        /* Convert acceleration from [mg] to [g] */
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 80012da:	4b49      	ldr	r3, [pc, #292]	; (8001400 <FX_Data_Handler+0x1b0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80013fc <FX_Data_Handler+0x1ac>
 80012ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ee:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 80012f2:	4b43      	ldr	r3, [pc, #268]	; (8001400 <FX_Data_Handler+0x1b0>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80013fc <FX_Data_Handler+0x1ac>
 8001302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001306:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <FX_Data_Handler+0x1b0>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80013fc <FX_Data_Handler+0x1ac>
 800131a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

        /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <FX_Data_Handler+0x1b4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	ee07 3a90 	vmov	s15, r3
 800132a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001408 <FX_Data_Handler+0x1b8>
 8001332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001336:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800133a:	4b32      	ldr	r3, [pc, #200]	; (8001404 <FX_Data_Handler+0x1b4>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001346:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001408 <FX_Data_Handler+0x1b8>
 800134a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001352:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <FX_Data_Handler+0x1b4>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	ee07 3a90 	vmov	s15, r3
 800135a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800135e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001408 <FX_Data_Handler+0x1b8>
 8001362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001366:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

        /* Run Sensor Fusion algorithm */
        DWT_Start();
 800136a:	f000 fa3b 	bl	80017e4 <DWT_Start>
        MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800136e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800140c <FX_Data_Handler+0x1bc>
 8001372:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001374:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001376:	f000 ff65 	bl	8002244 <MotionFX_manager_run>
        elapsed_time_us = DWT_Stop();
 800137a:	f000 fa45 	bl	8001808 <DWT_Stop>
 800137e:	6778      	str	r0, [r7, #116]	; 0x74

        (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion, 4U * sizeof(float));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f103 003b 	add.w	r0, r3, #59	; 0x3b
 8001386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001388:	330c      	adds	r3, #12
 800138a:	2210      	movs	r2, #16
 800138c:	4619      	mov	r1, r3
 800138e:	f019 fc8f 	bl	801acb0 <memcpy>
        (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation, 3U * sizeof(float));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	334b      	adds	r3, #75	; 0x4b
 8001396:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001398:	220c      	movs	r2, #12
 800139a:	4618      	mov	r0, r3
 800139c:	f019 fc88 	bl	801acb0 <memcpy>
        (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity, 3U * sizeof(float));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f103 0057 	add.w	r0, r3, #87	; 0x57
 80013a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013a8:	331c      	adds	r3, #28
 80013aa:	220c      	movs	r2, #12
 80013ac:	4619      	mov	r1, r3
 80013ae:	f019 fc7f 	bl	801acb0 <memcpy>
        (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration, 3U * sizeof(float));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f103 0063 	add.w	r0, r3, #99	; 0x63
 80013b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013ba:	3328      	adds	r3, #40	; 0x28
 80013bc:	220c      	movs	r2, #12
 80013be:	4619      	mov	r1, r3
 80013c0:	f019 fc76 	bl	801acb0 <memcpy>

        (void)memcpy(&Msg->Data[107], (void *) & (pdata_out->heading), sizeof(float));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	336f      	adds	r3, #111	; 0x6f
 80013c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013ca:	3234      	adds	r2, #52	; 0x34
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	601a      	str	r2, [r3, #0]
        (void)memcpy(&Msg->Data[111], (void *) & (pdata_out->headingErr), sizeof(float));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3373      	adds	r3, #115	; 0x73
 80013d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80013d6:	3238      	adds	r2, #56	; 0x38
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	601a      	str	r2, [r3, #0]

        Serialize_s32(&Msg->Data[115], (int32_t)elapsed_time_us, 4);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3377      	adds	r3, #119	; 0x77
 80013e0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80013e2:	2204      	movs	r2, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 f975 	bl	80026d4 <Serialize_s32>
      }
    }
  }
}
 80013ea:	bf00      	nop
 80013ec:	3778      	adds	r7, #120	; 0x78
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000584 	.word	0x20000584
 80013f8:	200005ac 	.word	0x200005ac
 80013fc:	3a83126f 	.word	0x3a83126f
 8001400:	200005a0 	.word	0x200005a0
 8001404:	200005b8 	.word	0x200005b8
 8001408:	3b03126f 	.word	0x3b03126f
 800140c:	3c23d70a 	.word	0x3c23d70a

08001410 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <Accelero_Sensor_Handler+0xa0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	2b10      	cmp	r3, #16
 8001422:	d140      	bne.n	80014a6 <Accelero_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <Accelero_Sensor_Handler+0xa4>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d121      	bne.n	8001470 <Accelero_Sensor_Handler+0x60>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <Accelero_Sensor_Handler+0xa8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a22      	ldr	r2, [pc, #136]	; (80014bc <Accelero_Sensor_Handler+0xac>)
 8001432:	2134      	movs	r1, #52	; 0x34
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	4413      	add	r3, r2
 800143a:	3310      	adds	r3, #16
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a20      	ldr	r2, [pc, #128]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 8001440:	6013      	str	r3, [r2, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <Accelero_Sensor_Handler+0xa8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <Accelero_Sensor_Handler+0xac>)
 8001448:	2134      	movs	r1, #52	; 0x34
 800144a:	fb01 f303 	mul.w	r3, r1, r3
 800144e:	4413      	add	r3, r2
 8001450:	3314      	adds	r3, #20
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1a      	ldr	r2, [pc, #104]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 8001456:	6053      	str	r3, [r2, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <Accelero_Sensor_Handler+0xa8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a17      	ldr	r2, [pc, #92]	; (80014bc <Accelero_Sensor_Handler+0xac>)
 800145e:	2134      	movs	r1, #52	; 0x34
 8001460:	fb01 f303 	mul.w	r3, r1, r3
 8001464:	4413      	add	r3, r2
 8001466:	3318      	adds	r3, #24
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 800146c:	6093      	str	r3, [r2, #8]
 800146e:	e002      	b.n	8001476 <Accelero_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 8001472:	f000 fd3f 	bl	8001ef4 <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3317      	adds	r3, #23
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 800147c:	6811      	ldr	r1, [r2, #0]
 800147e:	2204      	movs	r2, #4
 8001480:	4618      	mov	r0, r3
 8001482:	f001 f927 	bl	80026d4 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	331b      	adds	r3, #27
 800148a:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 800148c:	6851      	ldr	r1, [r2, #4]
 800148e:	2204      	movs	r2, #4
 8001490:	4618      	mov	r0, r3
 8001492:	f001 f91f 	bl	80026d4 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	331f      	adds	r3, #31
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <Accelero_Sensor_Handler+0xb0>)
 800149c:	6891      	ldr	r1, [r2, #8]
 800149e:	2204      	movs	r2, #4
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 f917 	bl	80026d4 <Serialize_s32>
  }
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000584 	.word	0x20000584
 80014b4:	20000589 	.word	0x20000589
 80014b8:	2000058c 	.word	0x2000058c
 80014bc:	20001e40 	.word	0x20001e40
 80014c0:	200005a0 	.word	0x200005a0

080014c4 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <Gyro_Sensor_Handler+0xa0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0320 	and.w	r3, r3, #32
 80014d4:	2b20      	cmp	r3, #32
 80014d6:	d140      	bne.n	800155a <Gyro_Sensor_Handler+0x96>
  {
    if (UseOfflineData == 1)
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <Gyro_Sensor_Handler+0xa4>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d121      	bne.n	8001524 <Gyro_Sensor_Handler+0x60>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <Gyro_Sensor_Handler+0xa8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <Gyro_Sensor_Handler+0xac>)
 80014e6:	2134      	movs	r1, #52	; 0x34
 80014e8:	fb01 f303 	mul.w	r3, r1, r3
 80014ec:	4413      	add	r3, r2
 80014ee:	331c      	adds	r3, #28
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a20      	ldr	r2, [pc, #128]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 80014f4:	6013      	str	r3, [r2, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <Gyro_Sensor_Handler+0xa8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <Gyro_Sensor_Handler+0xac>)
 80014fc:	2134      	movs	r1, #52	; 0x34
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	3320      	adds	r3, #32
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 800150a:	6053      	str	r3, [r2, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <Gyro_Sensor_Handler+0xa8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <Gyro_Sensor_Handler+0xac>)
 8001512:	2134      	movs	r1, #52	; 0x34
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	3324      	adds	r3, #36	; 0x24
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a15      	ldr	r2, [pc, #84]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001520:	6093      	str	r3, [r2, #8]
 8001522:	e002      	b.n	800152a <Gyro_Sensor_Handler+0x66>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001526:	f000 fcf2 	bl	8001f0e <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3323      	adds	r3, #35	; 0x23
 800152e:	4a11      	ldr	r2, [pc, #68]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001530:	6811      	ldr	r1, [r2, #0]
 8001532:	2204      	movs	r2, #4
 8001534:	4618      	mov	r0, r3
 8001536:	f001 f8cd 	bl	80026d4 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3327      	adds	r3, #39	; 0x27
 800153e:	4a0d      	ldr	r2, [pc, #52]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001540:	6851      	ldr	r1, [r2, #4]
 8001542:	2204      	movs	r2, #4
 8001544:	4618      	mov	r0, r3
 8001546:	f001 f8c5 	bl	80026d4 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	332b      	adds	r3, #43	; 0x2b
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <Gyro_Sensor_Handler+0xb0>)
 8001550:	6891      	ldr	r1, [r2, #8]
 8001552:	2204      	movs	r2, #4
 8001554:	4618      	mov	r0, r3
 8001556:	f001 f8bd 	bl	80026d4 <Serialize_s32>
  }
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000584 	.word	0x20000584
 8001568:	20000589 	.word	0x20000589
 800156c:	2000058c 	.word	0x2000058c
 8001570:	20001e40 	.word	0x20001e40
 8001574:	200005ac 	.word	0x200005ac

08001578 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  float ans_float;
  MFX_MagCal_input_t mag_data_in;
  MFX_MagCal_output_t mag_data_out;

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8001580:	4b68      	ldr	r3, [pc, #416]	; (8001724 <Magneto_Sensor_Handler+0x1ac>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001588:	2b40      	cmp	r3, #64	; 0x40
 800158a:	f040 80c7 	bne.w	800171c <Magneto_Sensor_Handler+0x1a4>
  {
    if (UseOfflineData == 1)
 800158e:	4b66      	ldr	r3, [pc, #408]	; (8001728 <Magneto_Sensor_Handler+0x1b0>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d121      	bne.n	80015da <Magneto_Sensor_Handler+0x62>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 8001596:	4b65      	ldr	r3, [pc, #404]	; (800172c <Magneto_Sensor_Handler+0x1b4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a65      	ldr	r2, [pc, #404]	; (8001730 <Magneto_Sensor_Handler+0x1b8>)
 800159c:	2134      	movs	r1, #52	; 0x34
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	3328      	adds	r3, #40	; 0x28
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a62      	ldr	r2, [pc, #392]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015aa:	6013      	str	r3, [r2, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 80015ac:	4b5f      	ldr	r3, [pc, #380]	; (800172c <Magneto_Sensor_Handler+0x1b4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a5f      	ldr	r2, [pc, #380]	; (8001730 <Magneto_Sensor_Handler+0x1b8>)
 80015b2:	2134      	movs	r1, #52	; 0x34
 80015b4:	fb01 f303 	mul.w	r3, r1, r3
 80015b8:	4413      	add	r3, r2
 80015ba:	332c      	adds	r3, #44	; 0x2c
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a5d      	ldr	r2, [pc, #372]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015c0:	6053      	str	r3, [r2, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 80015c2:	4b5a      	ldr	r3, [pc, #360]	; (800172c <Magneto_Sensor_Handler+0x1b4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a5a      	ldr	r2, [pc, #360]	; (8001730 <Magneto_Sensor_Handler+0x1b8>)
 80015c8:	2134      	movs	r1, #52	; 0x34
 80015ca:	fb01 f303 	mul.w	r3, r1, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	3330      	adds	r3, #48	; 0x30
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a57      	ldr	r2, [pc, #348]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015d6:	6093      	str	r3, [r2, #8]
 80015d8:	e088      	b.n	80016ec <Magneto_Sensor_Handler+0x174>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 80015da:	4856      	ldr	r0, [pc, #344]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015dc:	f000 fca4 	bl	8001f28 <BSP_SENSOR_MAG_GetAxes>

      if (MagCalStatus == 0U)
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <Magneto_Sensor_Handler+0x1c0>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d16c      	bne.n	80016c2 <Magneto_Sensor_Handler+0x14a>
      {
        mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 80015e8:	4b52      	ldr	r3, [pc, #328]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f4:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800173c <Magneto_Sensor_Handler+0x1c4>
 80015f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015fc:	edc7 7a07 	vstr	s15, [r7, #28]
        mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001600:	4b4c      	ldr	r3, [pc, #304]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	ee07 3a90 	vmov	s15, r3
 8001608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800173c <Magneto_Sensor_Handler+0x1c4>
 8001610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001614:	edc7 7a08 	vstr	s15, [r7, #32]
        mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001618:	4b46      	ldr	r3, [pc, #280]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001624:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800173c <Magneto_Sensor_Handler+0x1c4>
 8001628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800162c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        mag_data_in.time_stamp = (int)TimeStamp;
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <Magneto_Sensor_Handler+0x1c8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	62bb      	str	r3, [r7, #40]	; 0x28
        TimeStamp += (uint32_t)ALGO_PERIOD;
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <Magneto_Sensor_Handler+0x1c8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	330a      	adds	r3, #10
 800163c:	4a40      	ldr	r2, [pc, #256]	; (8001740 <Magneto_Sensor_Handler+0x1c8>)
 800163e:	6013      	str	r3, [r2, #0]

        MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8001640:	f107 020c 	add.w	r2, r7, #12
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	4611      	mov	r1, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f000 fe5e 	bl	800230c <MotionFX_manager_MagCal_run>

        if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 8001650:	7e3b      	ldrb	r3, [r7, #24]
 8001652:	2b03      	cmp	r3, #3
 8001654:	d135      	bne.n	80016c2 <Magneto_Sensor_Handler+0x14a>
        {
          MagCalStatus = 1;
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <Magneto_Sensor_Handler+0x1c0>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]

          ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800165c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001660:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8001744 <Magneto_Sensor_Handler+0x1cc>
 8001664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001668:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.x = (int32_t)ans_float;
 800166c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001674:	ee17 2a90 	vmov	r2, s15
 8001678:	4b33      	ldr	r3, [pc, #204]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 800167a:	601a      	str	r2, [r3, #0]
          ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 800167c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001680:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001744 <Magneto_Sensor_Handler+0x1cc>
 8001684:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001688:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.y = (int32_t)ans_float;
 800168c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001694:	ee17 2a90 	vmov	r2, s15
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 800169a:	605a      	str	r2, [r3, #4]
          ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800169c:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001744 <Magneto_Sensor_Handler+0x1cc>
 80016a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
          MagOffset.z = (int32_t)ans_float;
 80016ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b4:	ee17 2a90 	vmov	r2, s15
 80016b8:	4b23      	ldr	r3, [pc, #140]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 80016ba:	609a      	str	r2, [r3, #8]

          /* Disable magnetometer calibration */
          MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 80016bc:	200a      	movs	r0, #10
 80016be:	f000 fe40 	bl	8002342 <MotionFX_manager_MagCal_stop>
        }
      }

      MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b20      	ldr	r3, [pc, #128]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016ce:	6013      	str	r3, [r2, #0]
      MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4a16      	ldr	r2, [pc, #88]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016dc:	6053      	str	r3, [r2, #4]
      MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <Magneto_Sensor_Handler+0x1d0>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016ea:	6093      	str	r3, [r2, #8]
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	332f      	adds	r3, #47	; 0x2f
 80016f0:	4a10      	ldr	r2, [pc, #64]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 80016f2:	6811      	ldr	r1, [r2, #0]
 80016f4:	2204      	movs	r2, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 ffec 	bl	80026d4 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3333      	adds	r3, #51	; 0x33
 8001700:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 8001702:	6851      	ldr	r1, [r2, #4]
 8001704:	2204      	movs	r2, #4
 8001706:	4618      	mov	r0, r3
 8001708:	f000 ffe4 	bl	80026d4 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3337      	adds	r3, #55	; 0x37
 8001710:	4a08      	ldr	r2, [pc, #32]	; (8001734 <Magneto_Sensor_Handler+0x1bc>)
 8001712:	6891      	ldr	r1, [r2, #8]
 8001714:	2204      	movs	r2, #4
 8001716:	4618      	mov	r0, r3
 8001718:	f000 ffdc 	bl	80026d4 <Serialize_s32>
  }
}
 800171c:	bf00      	nop
 800171e:	3730      	adds	r7, #48	; 0x30
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000584 	.word	0x20000584
 8001728:	20000589 	.word	0x20000589
 800172c:	2000058c 	.word	0x2000058c
 8001730:	20001e40 	.word	0x20001e40
 8001734:	200005b8 	.word	0x200005b8
 8001738:	200005d8 	.word	0x200005d8
 800173c:	3b03126f 	.word	0x3b03126f
 8001740:	200005c4 	.word	0x200005c4
 8001744:	43fa0000 	.word	0x43fa0000
 8001748:	200005cc 	.word	0x200005cc

0800174c <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 8001754:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001758:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800175a:	4b14      	ldr	r3, [pc, #80]	; (80017ac <TIM_Config+0x60>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	fbb2 f3f3 	udiv	r3, r2, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	3b01      	subs	r3, #1
 8001772:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8001774:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <TIM_Config+0x64>)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <TIM_Config+0x64>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <TIM_Config+0x64>)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <TIM_Config+0x64>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <TIM_Config+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8001792:	4807      	ldr	r0, [pc, #28]	; (80017b0 <TIM_Config+0x64>)
 8001794:	f00b fbb8 	bl	800cf08 <HAL_TIM_Base_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <TIM_Config+0x56>
  {
    Error_Handler();
 800179e:	f000 fcf3 	bl	8002188 <Error_Handler>
  }
}
 80017a2:	bf00      	nop
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000010 	.word	0x20000010
 80017b0:	2000240c 	.word	0x2000240c

080017b4 <DWT_Init>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
static void DWT_Init(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <DWT_Init+0x28>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a07      	ldr	r2, [pc, #28]	; (80017dc <DWT_Init+0x28>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <DWT_Init+0x2c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <DWT_Init+0x2c>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000edf0 	.word	0xe000edf0
 80017e0:	e0001000 	.word	0xe0001000

080017e4 <DWT_Start>:
 * @brief  Start counting clock cycles
 * @param  None
 * @retval None
 */
static void DWT_Start(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <DWT_Start+0x20>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <DWT_Start+0x20>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <DWT_Start+0x20>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e0001000 	.word	0xe0001000

08001808 <DWT_Stop>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
static uint32_t DWT_Stop(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <DWT_Stop+0x44>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0c      	ldr	r2, [pc, #48]	; (800184c <DWT_Stop+0x44>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <DWT_Stop+0x44>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <DWT_Stop+0x48>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a09      	ldr	r2, [pc, #36]	; (8001854 <DWT_Stop+0x4c>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	0c9b      	lsrs	r3, r3, #18
 8001834:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e0001000 	.word	0xe0001000
 8001850:	20000010 	.word	0x20000010
 8001854:	431bde83 	.word	0x431bde83

08001858 <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	; 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 8001860:	2300      	movs	r3, #0
 8001862:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  // TODO:  Set the COM1 and RESET pins
  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 8001864:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <UART_ReceivedMSG+0x160>)
 8001866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f8e1 	bl	8001a30 <Get_DMA_Flag_Status>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	f040 809c 	bne.w	80019ae <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 8001876:	4b50      	ldr	r3, [pc, #320]	; (80019b8 <UART_ReceivedMSG+0x160>)
 8001878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f8e8 	bl	8001a50 <Get_DMA_Counter>
 8001880:	4603      	mov	r3, r0
 8001882:	b29b      	uxth	r3, r3
 8001884:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001888:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 800188a:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <UART_ReceivedMSG+0x164>)
 800188c:	889b      	ldrh	r3, [r3, #4]
 800188e:	8bba      	ldrh	r2, [r7, #28]
 8001890:	429a      	cmp	r2, r3
 8001892:	d305      	bcc.n	80018a0 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8001894:	4b49      	ldr	r3, [pc, #292]	; (80019bc <UART_ReceivedMSG+0x164>)
 8001896:	889b      	ldrh	r3, [r3, #4]
 8001898:	8bba      	ldrh	r2, [r7, #28]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	843b      	strh	r3, [r7, #32]
 800189e:	e007      	b.n	80018b0 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 80018a0:	4b46      	ldr	r3, [pc, #280]	; (80019bc <UART_ReceivedMSG+0x164>)
 80018a2:	889b      	ldrh	r3, [r3, #4]
 80018a4:	8bba      	ldrh	r2, [r7, #28]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80018ae:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 80018b0:	4b42      	ldr	r3, [pc, #264]	; (80019bc <UART_ReceivedMSG+0x164>)
 80018b2:	889b      	ldrh	r3, [r3, #4]
 80018b4:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80018ba:	e06d      	b.n	8001998 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 80018bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018be:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <UART_ReceivedMSG+0x168>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	76fb      	strb	r3, [r7, #27]
      j++;
 80018c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018c6:	3301      	adds	r3, #1
 80018c8:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 80018ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018d0:	d301      	bcc.n	80018d6 <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 80018d6:	7efb      	ldrb	r3, [r7, #27]
 80018d8:	2bf0      	cmp	r3, #240	; 0xf0
 80018da:	d15a      	bne.n	8001992 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 80018dc:	4b37      	ldr	r3, [pc, #220]	; (80019bc <UART_ReceivedMSG+0x164>)
 80018de:	889b      	ldrh	r3, [r3, #4]
 80018e0:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 80018e2:	2300      	movs	r3, #0
 80018e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018e6:	e03a      	b.n	800195e <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 80018e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018ea:	3301      	adds	r3, #1
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f2:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 80018f4:	8bfb      	ldrh	r3, [r7, #30]
 80018f6:	2bff      	cmp	r3, #255	; 0xff
 80018f8:	d904      	bls.n	8001904 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 80018fa:	4a30      	ldr	r2, [pc, #192]	; (80019bc <UART_ReceivedMSG+0x164>)
 80018fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80018fe:	8093      	strh	r3, [r2, #4]
            return 0;
 8001900:	2300      	movs	r3, #0
 8001902:	e055      	b.n	80019b0 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 8001904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001906:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <UART_ReceivedMSG+0x168>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 800190c:	8b3b      	ldrh	r3, [r7, #24]
 800190e:	4a2c      	ldr	r2, [pc, #176]	; (80019c0 <UART_ReceivedMSG+0x168>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 8001914:	8bfb      	ldrh	r3, [r7, #30]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	3304      	adds	r3, #4
 800191c:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800191e:	7db9      	ldrb	r1, [r7, #22]
 8001920:	7dfb      	ldrb	r3, [r7, #23]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fe34 	bl	8002592 <ReverseByteStuffCopyByte2>
 800192a:	4603      	mov	r3, r0
 800192c:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d104      	bne.n	800193e <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8001934:	4a21      	ldr	r2, [pc, #132]	; (80019bc <UART_ReceivedMSG+0x164>)
 8001936:	8b3b      	ldrh	r3, [r7, #24]
 8001938:	8093      	strh	r3, [r2, #4]
            return 0;
 800193a:	2300      	movs	r3, #0
 800193c:	e038      	b.n	80019b0 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	b29a      	uxth	r2, r3
 8001942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001944:	4413      	add	r3, r2
 8001946:	b29b      	uxth	r3, r3
 8001948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800194c:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 800194e:	8bfb      	ldrh	r3, [r7, #30]
 8001950:	3301      	adds	r3, #1
 8001952:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	b29a      	uxth	r2, r3
 8001958:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800195a:	4413      	add	r3, r2
 800195c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800195e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001962:	429a      	cmp	r2, r3
 8001964:	d3c0      	bcc.n	80018e8 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 8001966:	8bfa      	ldrh	r2, [r7, #30]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800196c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800196e:	3301      	adds	r3, #1
 8001970:	b29b      	uxth	r3, r3
 8001972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001976:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 8001978:	4a10      	ldr	r2, [pc, #64]	; (80019bc <UART_ReceivedMSG+0x164>)
 800197a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800197c:	8093      	strh	r3, [r2, #4]

        if (CHK_CheckAndRemove(Msg) != 0) /* check message integrity */
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fe58 	bl	8002634 <CHK_CheckAndRemove>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <UART_ReceivedMSG+0x136>
        {
          return 1;
 800198a:	2301      	movs	r3, #1
 800198c:	e010      	b.n	80019b0 <UART_ReceivedMSG+0x158>
        }
        else
        {
          return 0;
 800198e:	2300      	movs	r3, #0
 8001990:	e00e      	b.n	80019b0 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8001992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001994:	3301      	adds	r3, #1
 8001996:	847b      	strh	r3, [r7, #34]	; 0x22
 8001998:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800199a:	8c3b      	ldrh	r3, [r7, #32]
 800199c:	429a      	cmp	r2, r3
 800199e:	d38d      	bcc.n	80018bc <UART_ReceivedMSG+0x64>
        }
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 80019a0:	8c3b      	ldrh	r3, [r7, #32]
 80019a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019a6:	d902      	bls.n	80019ae <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <UART_ReceivedMSG+0x164>)
 80019aa:	8bbb      	ldrh	r3, [r7, #28]
 80019ac:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3728      	adds	r7, #40	; 0x28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20002464 	.word	0x20002464
 80019bc:	20002208 	.word	0x20002208
 80019c0:	20002008 	.word	0x20002008

080019c4 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 fe07 	bl	80025e0 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4807      	ldr	r0, [pc, #28]	; (80019f4 <UART_SendMsg+0x30>)
 80019d6:	f000 fdae 	bl	8002536 <ByteStuffCopy>
 80019da:	4603      	mov	r3, r0
 80019dc:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 80019de:	89fa      	ldrh	r2, [r7, #14]
 80019e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80019e4:	4903      	ldr	r1, [pc, #12]	; (80019f4 <UART_SendMsg+0x30>)
 80019e6:	4804      	ldr	r0, [pc, #16]	; (80019f8 <UART_SendMsg+0x34>)
 80019e8:	f00c f94c 	bl	800dc84 <HAL_UART_Transmit>
}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200007e4 	.word	0x200007e4
 80019f8:	20002464 	.word	0x20002464

080019fc <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <UART_StartReceiveMsg+0x2c>)
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <UART_StartReceiveMsg+0x30>)
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <UART_StartReceiveMsg+0x2c>)
 8001a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <UART_StartReceiveMsg+0x2c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a1c:	4903      	ldr	r1, [pc, #12]	; (8001a2c <UART_StartReceiveMsg+0x30>)
 8001a1e:	4802      	ldr	r0, [pc, #8]	; (8001a28 <UART_StartReceiveMsg+0x2c>)
 8001a20:	f00c f9c6 	bl	800ddb0 <HAL_UART_Receive_DMA>
}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20002464 	.word	0x20002464
 8001a2c:	20002008 	.word	0x20002008

08001a30 <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, handle_dma->ErrorCode));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	4013      	ands	r3, r2
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5e:	b29b      	uxth	r3, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001a70:	4b0d      	ldr	r3, [pc, #52]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <MX_CRC_Init+0x40>)
 8001a74:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <MX_CRC_Init+0x3c>)
 8001a96:	f005 f89d 	bl	8006bd4 <HAL_CRC_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001aa0:	f000 fb72 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20002210 	.word	0x20002210
 8001aac:	40023000 	.word	0x40023000

08001ab0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0b      	ldr	r2, [pc, #44]	; (8001aec <HAL_CRC_MspInit+0x3c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d10e      	bne.n	8001ae0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_CRC_MspInit+0x40>)
 8001ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac8:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_CRC_MspInit+0x40>)
 8001aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ace:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_CRC_MspInit+0x40>)
 8001ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40023000 	.word	0x40023000
 8001af0:	46020c00 	.word	0x46020c00

08001af4 <MX_GPDMA1_Init>:
DMA_QListTypeDef List_GPDMA1_Channel5;
DMA_HandleTypeDef handle_GPDMA1_Channel5;

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b09c      	sub	sp, #112	; 0x70
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  DMA_NodeConfTypeDef NodeConfig = {0};
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	226c      	movs	r2, #108	; 0x6c
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f019 f8e2 	bl	801acca <memset>

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 8001b06:	2321      	movs	r3, #33	; 0x21
 8001b08:	607b      	str	r3, [r7, #4]
  NodeConfig.Init.Request = DMA_REQUEST_SW;
 8001b0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0e:	60bb      	str	r3, [r7, #8]
  NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  NodeConfig.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b18:	613b      	str	r3, [r7, #16]
  NodeConfig.Init.SrcInc = DMA_SINC_FIXED;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	623b      	str	r3, [r7, #32]
  NodeConfig.Init.SrcBurstLength = 1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  NodeConfig.Init.DestBurstLength = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	633b      	str	r3, [r7, #48]	; 0x30
  NodeConfig.Init.Mode = DMA_NORMAL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
  NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8001b42:	2300      	movs	r3, #0
 8001b44:	643b      	str	r3, [r7, #64]	; 0x40
  NodeConfig.SrcAddress = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	667b      	str	r3, [r7, #100]	; 0x64
  NodeConfig.DstAddress = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	66bb      	str	r3, [r7, #104]	; 0x68
  NodeConfig.DataSize = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel5) != HAL_OK)
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	4925      	ldr	r1, [pc, #148]	; (8001bec <MX_GPDMA1_Init+0xf8>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f005 fbaa 	bl	80072b0 <HAL_DMAEx_List_BuildNode>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_GPDMA1_Init+0x72>
  {
    Error_Handler();
 8001b62:	f000 fb11 	bl	8002188 <Error_Handler>
  }
  if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel5, NULL, &Node_GPDMA1_Channel5) != HAL_OK)
 8001b66:	4a21      	ldr	r2, [pc, #132]	; (8001bec <MX_GPDMA1_Init+0xf8>)
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4821      	ldr	r0, [pc, #132]	; (8001bf0 <MX_GPDMA1_Init+0xfc>)
 8001b6c:	f005 fbb6 	bl	80072dc <HAL_DMAEx_List_InsertNode>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_GPDMA1_Init+0x86>
  {
    Error_Handler();
 8001b76:	f000 fb07 	bl	8002188 <Error_Handler>
  }
  if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel5) != HAL_OK)
 8001b7a:	481d      	ldr	r0, [pc, #116]	; (8001bf0 <MX_GPDMA1_Init+0xfc>)
 8001b7c:	f005 fc77 	bl	800746e <HAL_DMAEx_List_SetCircularMode>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_GPDMA1_Init+0x96>
  {
    Error_Handler();
 8001b86:	f000 faff 	bl	8002188 <Error_Handler>
  }
  handle_GPDMA1_Channel5.Instance = GPDMA1_Channel5;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_GPDMA1_Init+0x100>)
 8001b8c:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <MX_GPDMA1_Init+0x104>)
 8001b8e:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel5.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <MX_GPDMA1_Init+0x100>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
  handle_GPDMA1_Channel5.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <MX_GPDMA1_Init+0x100>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  handle_GPDMA1_Channel5.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_GPDMA1_Init+0x100>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
  handle_GPDMA1_Channel5.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_GPDMA1_Init+0x100>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
  handle_GPDMA1_Channel5.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8001ba8:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <MX_GPDMA1_Init+0x100>)
 8001baa:	2281      	movs	r2, #129	; 0x81
 8001bac:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel5) != HAL_OK)
 8001bae:	4811      	ldr	r0, [pc, #68]	; (8001bf4 <MX_GPDMA1_Init+0x100>)
 8001bb0:	f005 f9bc 	bl	8006f2c <HAL_DMAEx_List_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_GPDMA1_Init+0xca>
  {
    Error_Handler();
 8001bba:	f000 fae5 	bl	8002188 <Error_Handler>
  }
  if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel5, &List_GPDMA1_Channel5) != HAL_OK)
 8001bbe:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <MX_GPDMA1_Init+0xfc>)
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <MX_GPDMA1_Init+0x100>)
 8001bc2:	f005 fcb5 	bl	8007530 <HAL_DMAEx_List_LinkQ>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_GPDMA1_Init+0xdc>
  {
    Error_Handler();
 8001bcc:	f000 fadc 	bl	8002188 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001bd0:	2110      	movs	r1, #16
 8001bd2:	4808      	ldr	r0, [pc, #32]	; (8001bf4 <MX_GPDMA1_Init+0x100>)
 8001bd4:	f005 f948 	bl	8006e68 <HAL_DMA_ConfigChannelAttributes>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_GPDMA1_Init+0xee>
  {
    Error_Handler();
 8001bde:	f000 fad3 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3770      	adds	r7, #112	; 0x70
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20002234 	.word	0x20002234
 8001bf0:	200022d0 	.word	0x200022d0
 8001bf4:	20002258 	.word	0x20002258
 8001bf8:	400202d0 	.word	0x400202d0

08001bfc <MX_GPIO_Init>:
     PC15-OSC32_OUT (PC15)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <MX_GPIO_Init+0xc8>)
 8001c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c18:	4a2a      	ldr	r2, [pc, #168]	; (8001cc4 <MX_GPIO_Init+0xc8>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <MX_GPIO_Init+0xc8>)
 8001c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <MX_GPIO_Init+0xc8>)
 8001c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c36:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <MX_GPIO_Init+0xc8>)
 8001c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c40:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <MX_GPIO_Init+0xc8>)
 8001c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <MX_GPIO_Init+0xc8>)
 8001c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <MX_GPIO_Init+0xc8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c5e:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <MX_GPIO_Init+0xc8>)
 8001c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <MX_GPIO_Init+0xcc>)
 8001c72:	f006 facb 	bl	800820c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButtonInterrupt_Pin;
 8001c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7c:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <MX_GPIO_Init+0xd0>)
 8001c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UserCalibrationButtonInterrupt_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4811      	ldr	r0, [pc, #68]	; (8001cd0 <MX_GPIO_Init+0xd4>)
 8001c8c:	f005 fff0 	bl	8007c70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationLED_Pin;
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UserCalibrationLED_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4808      	ldr	r0, [pc, #32]	; (8001cc8 <MX_GPIO_Init+0xcc>)
 8001ca8:	f005 ffe2 	bl	8007c70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 1, 0);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2101      	movs	r1, #1
 8001cb0:	2018      	movs	r0, #24
 8001cb2:	f004 ff5a 	bl	8006b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8001cb6:	2018      	movs	r0, #24
 8001cb8:	f004 ff71 	bl	8006b9e <HAL_NVIC_EnableIRQ>

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	46020c00 	.word	0x46020c00
 8001cc8:	42021c00 	.word	0x42021c00
 8001ccc:	10110000 	.word	0x10110000
 8001cd0:	42020800 	.word	0x42020800

08001cd4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <MX_I2C2_Init+0x78>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F07BFF;
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001ce0:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <MX_I2C2_Init+0x7c>)
 8001ce2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ce4:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d08:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d0e:	480e      	ldr	r0, [pc, #56]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d10:	f006 fac5 	bl	800829e <HAL_I2C_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d1a:	f000 fa35 	bl	8002188 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d1e:	2100      	movs	r1, #0
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d22:	f007 f829 	bl	8008d78 <HAL_I2CEx_ConfigAnalogFilter>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d2c:	f000 fa2c 	bl	8002188 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d30:	2100      	movs	r1, #0
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_I2C2_Init+0x74>)
 8001d34:	f007 f86b 	bl	8008e0e <HAL_I2CEx_ConfigDigitalFilter>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d3e:	f000 fa23 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20002300 	.word	0x20002300
 8001d4c:	40005800 	.word	0x40005800
 8001d50:	00f07bff 	.word	0x00f07bff

08001d54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0ba      	sub	sp, #232	; 0xe8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	22c0      	movs	r2, #192	; 0xc0
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f018 ffa8 	bl	801acca <memset>
  if(i2cHandle->Instance==I2C2)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a24      	ldr	r2, [pc, #144]	; (8001e10 <HAL_I2C_MspInit+0xbc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d140      	bne.n	8001e06 <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4618      	mov	r0, r3
 8001d92:	f008 fad1 	bl	800a338 <HAL_RCCEx_PeriphCLKConfig>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d9c:	f000 f9f4 	bl	8002188 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <HAL_I2C_MspInit+0xc0>)
 8001da2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_I2C_MspInit+0xc0>)
 8001da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <HAL_I2C_MspInit+0xc0>)
 8001db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = AccelGyroI2CClock_Pin|AccelGyroI2CData_Pin;
 8001dbe:	2330      	movs	r3, #48	; 0x30
 8001dc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc4:	2312      	movs	r3, #18
 8001dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ddc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001de0:	4619      	mov	r1, r3
 8001de2:	480d      	ldr	r0, [pc, #52]	; (8001e18 <HAL_I2C_MspInit+0xc4>)
 8001de4:	f005 ff44 	bl	8007c70 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_I2C_MspInit+0xc0>)
 8001dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dee:	4a09      	ldr	r2, [pc, #36]	; (8001e14 <HAL_I2C_MspInit+0xc0>)
 8001df0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001df4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_I2C_MspInit+0xc0>)
 8001dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e06:	bf00      	nop
 8001e08:	37e8      	adds	r7, #232	; 0xe8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40005800 	.word	0x40005800
 8001e14:	46020c00 	.word	0x46020c00
 8001e18:	42021c00 	.word	0x42021c00

08001e1c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_I2C_MspDeInit+0x3c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d10f      	bne.n	8001e4e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_I2C_MspDeInit+0x40>)
 8001e30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e34:	4a09      	ldr	r2, [pc, #36]	; (8001e5c <HAL_I2C_MspDeInit+0x40>)
 8001e36:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e3a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(AccelGyroI2CClock_GPIO_Port, AccelGyroI2CClock_Pin);
 8001e3e:	2110      	movs	r1, #16
 8001e40:	4807      	ldr	r0, [pc, #28]	; (8001e60 <HAL_I2C_MspDeInit+0x44>)
 8001e42:	f006 f8ed 	bl	8008020 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(AccelGyroI2CData_GPIO_Port, AccelGyroI2CData_Pin);
 8001e46:	2120      	movs	r1, #32
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <HAL_I2C_MspDeInit+0x44>)
 8001e4a:	f006 f8e9 	bl	8008020 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40005800 	.word	0x40005800
 8001e5c:	46020c00 	.word	0x46020c00
 8001e60:	42021c00 	.word	0x42021c00

08001e64 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	//
  (void)BSP_MOTION_SENSOR_Init(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO);
 8001e68:	2102      	movs	r1, #2
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f001 fa90 	bl	8003390 <BSP_MOTION_SENSOR_Init>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Init(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_GYRO);
 8001e78:	2101      	movs	r1, #1
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f001 fa88 	bl	8003390 <BSP_MOTION_SENSOR_Init>
}
 8001e80:	bf00      	nop
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Init(IIS2MDC_MAGNET_INSTANCE_ID, MOTION_MAGNETO);
 8001e88:	2104      	movs	r1, #4
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f001 fa80 	bl	8003390 <BSP_MOTION_SENSOR_Init>
}
 8001e90:	bf00      	nop
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Enable(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO);
 8001e98:	2102      	movs	r1, #2
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f001 fac8 	bl	8003430 <BSP_MOTION_SENSOR_Enable>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Enable(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_GYRO);
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f001 fac0 	bl	8003430 <BSP_MOTION_SENSOR_Enable>
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Enable(IIS2MDC_MAGNET_INSTANCE_ID, MOTION_MAGNETO);
 8001eb8:	2104      	movs	r1, #4
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f001 fab8 	bl	8003430 <BSP_MOTION_SENSOR_Enable>
}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Disable(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO);
 8001ec8:	2102      	movs	r1, #2
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f001 fb10 	bl	80034f0 <BSP_MOTION_SENSOR_Disable>
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Disable(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_GYRO);
 8001ed8:	2101      	movs	r1, #1
 8001eda:	2000      	movs	r0, #0
 8001edc:	f001 fb08 	bl	80034f0 <BSP_MOTION_SENSOR_Disable>
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  (void)BSP_MOTION_SENSOR_Disable(IIS2MDC_MAGNET_INSTANCE_ID, MOTION_MAGNETO);
 8001ee8:	2104      	movs	r1, #4
 8001eea:	2001      	movs	r0, #1
 8001eec:	f001 fb00 	bl	80034f0 <BSP_MOTION_SENSOR_Disable>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  (void)BSP_MOTION_SENSOR_GetAxes(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO, Axes);
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	2102      	movs	r1, #2
 8001f00:	2000      	movs	r0, #0
 8001f02:	f001 fb55 	bl	80035b0 <BSP_MOTION_SENSOR_GetAxes>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  (void)BSP_MOTION_SENSOR_GetAxes(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_GYRO, Axes);
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	2101      	movs	r1, #1
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	f001 fb48 	bl	80035b0 <BSP_MOTION_SENSOR_GetAxes>
}
 8001f20:	bf00      	nop
 8001f22:	3708      	adds	r7, #8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(BSP_MOTION_SENSOR_Axes_t *Axes)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  (void)BSP_MOTION_SENSOR_GetAxes(IIS2MDC_MAGNET_INSTANCE_ID, MOTION_MAGNETO, Axes);
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	2104      	movs	r1, #4
 8001f34:	2001      	movs	r0, #1
 8001f36:	f001 fb3b 	bl	80035b0 <BSP_MOTION_SENSOR_GetAxes>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)BSP_MOTION_SENSOR_SetOutputDataRate(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO, Odr);
 8001f4c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001f50:	2102      	movs	r1, #2
 8001f52:	2000      	movs	r0, #0
 8001f54:	f001 fb90 	bl	8003678 <BSP_MOTION_SENSOR_SetOutputDataRate>
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  (void)BSP_MOTION_SENSOR_SetFullScale(ISM330DLC_ACCELGRYO_INSTANCE_ID, MOTION_ACCELERO, Fullscale);
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f001 fbe7 	bl	8003740 <BSP_MOTION_SENSOR_SetFullScale>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	226e      	movs	r2, #110	; 0x6e
 8001f86:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	2277      	movs	r2, #119	; 0x77
 8001f8e:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3302      	adds	r3, #2
 8001f94:	2275      	movs	r2, #117	; 0x75
 8001f96:	701a      	strb	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	226e      	movs	r2, #110	; 0x6e
 8001fb0:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	2277      	movs	r2, #119	; 0x77
 8001fb8:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	2275      	movs	r2, #117	; 0x75
 8001fc0:	701a      	strb	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	226e      	movs	r2, #110	; 0x6e
 8001fda:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	2265      	movs	r2, #101	; 0x65
 8001fe2:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	2275      	movs	r2, #117	; 0x75
 8001fea:	701a      	strb	r2, [r3, #0]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ffc:	f004 fc32 	bl	8006864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002000:	f000 f814 	bl	800202c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002004:	f7ff fdfa 	bl	8001bfc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002008:	f000 fcc6 	bl	8002998 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800200c:	f7ff fe62 	bl	8001cd4 <MX_I2C2_Init>
  MX_TIM15_Init();
 8002010:	f000 fc48 	bl	80028a4 <MX_TIM15_Init>
  MX_RTC_Init();
 8002014:	f000 f9a2 	bl	800235c <MX_RTC_Init>
  MX_GPDMA1_Init();
 8002018:	f7ff fd6c 	bl	8001af4 <MX_GPDMA1_Init>
  MX_CRC_Init();
 800201c:	f7ff fd26 	bl	8001a6c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 8002020:	f7fe ff7c 	bl	8000f1c <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_MEMS_Process();
 8002024:	f7fe ff80 	bl	8000f28 <MX_MEMS_Process>
 8002028:	e7fc      	b.n	8002024 <main+0x2c>
	...

0800202c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b09e      	sub	sp, #120	; 0x78
 8002030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002032:	f107 0318 	add.w	r3, r7, #24
 8002036:	2260      	movs	r2, #96	; 0x60
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f018 fe45 	bl	801acca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002040:	463b      	mov	r3, r7
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002050:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8002054:	f006 ff28 	bl	8008ea8 <HAL_PWREx_ControlVoltageScaling>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800205e:	f000 f893 	bl	8002188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8002062:	2318      	movs	r3, #24
 8002064:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002066:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800206c:	2301      	movs	r3, #1
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002070:	2310      	movs	r3, #16
 8002072:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8002074:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800207e:	2302      	movs	r3, #2
 8002080:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002082:	2301      	movs	r3, #1
 8002084:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8002086:	2300      	movs	r3, #0
 8002088:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800208e:	2350      	movs	r3, #80	; 0x50
 8002090:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002092:	2302      	movs	r3, #2
 8002094:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002096:	2302      	movs	r3, #2
 8002098:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800209a:	2302      	movs	r3, #2
 800209c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 800209e:	2300      	movs	r3, #0
 80020a0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a6:	f107 0318 	add.w	r3, r7, #24
 80020aa:	4618      	mov	r0, r3
 80020ac:	f006 ff8e 	bl	8008fcc <HAL_RCC_OscConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80020b6:	f000 f867 	bl	8002188 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020ba:	231f      	movs	r3, #31
 80020bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020be:	2303      	movs	r3, #3
 80020c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80020d2:	463b      	mov	r3, r7
 80020d4:	2104      	movs	r1, #4
 80020d6:	4618      	mov	r0, r3
 80020d8:	f007 fde8 	bl	8009cac <HAL_RCC_ClockConfig>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80020e2:	f000 f851 	bl	8002188 <Error_Handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <SystemClock_Config+0xd4>)
 80020e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <SystemClock_Config+0xd4>)
 80020ee:	f023 0304 	bic.w	r3, r3, #4
 80020f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80020f6:	bf00      	nop
 80020f8:	3778      	adds	r7, #120	; 0x78
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	46020c00 	.word	0x46020c00

08002104 <HAL_GPIO_EXTI_Rising_Callback>:
// When the button's signal goes from a low to a high state
// which is what happens when you push a button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButtonInterrupt_Pin)
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002114:	d128      	bne.n	8002168 <HAL_GPIO_EXTI_Rising_Callback+0x64>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 8002118:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <HAL_GPIO_EXTI_Rising_Callback+0x2a>
		{
			iIsUserCalibrationLEDOn = 1;
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e004      	b.n	8002138 <HAL_GPIO_EXTI_Rising_Callback+0x34>
		}
		else
		{
			iIsUserCalibrationLEDOn = 0;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 8002136:	60fb      	str	r3, [r7, #12]
		}

		// Send the message via virtual COM port
		// It uses the UART1 of STLINK's virtual com port and we
		// are transmitting the serial data with this call
		uint16_t iMessageLength = (uint16_t)strlen(cMessage);
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f7fe f89d 	bl	8000278 <strlen>
 800213e:	4603      	mov	r3, r0
 8002140:	817b      	strh	r3, [r7, #10]
		if(HAL_UART_Transmit(&huart1, cMessage, iMessageLength, 100) != HAL_OK)
 8002142:	897a      	ldrh	r2, [r7, #10]
 8002144:	2364      	movs	r3, #100	; 0x64
 8002146:	68f9      	ldr	r1, [r7, #12]
 8002148:	480d      	ldr	r0, [pc, #52]	; (8002180 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 800214a:	f00b fd9b 	bl	800dc84 <HAL_UART_Transmit>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_GPIO_EXTI_Rising_Callback+0x54>
		{
			Error_Handler();
 8002154:	f000 f818 	bl	8002188 <Error_Handler>
		}

		HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, iIsUserCalibrationLEDOn);
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	4808      	ldr	r0, [pc, #32]	; (8002184 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8002164:	f006 f852 	bl	800820c <HAL_GPIO_WritePin>
	}
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	0801b580 	.word	0x0801b580
 8002174:	200009e4 	.word	0x200009e4
 8002178:	0801b584 	.word	0x0801b584
 800217c:	0801b5a4 	.word	0x0801b5a4
 8002180:	2000234c 	.word	0x2000234c
 8002184:	42021c00 	.word	0x42021c00

08002188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
}
 800218e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002190:	e7fe      	b.n	8002190 <Error_Handler+0x8>
	...

08002194 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8002198:	f016 f8d2 	bl	8018340 <MotionFX_GetStateSize>
 800219c:	4603      	mov	r3, r0
 800219e:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 80021a2:	d901      	bls.n	80021a8 <MotionFX_manager_init+0x14>
    Error_Handler();
 80021a4:	f7ff fff0 	bl	8002188 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 80021a8:	4821      	ldr	r0, [pc, #132]	; (8002230 <MotionFX_manager_init+0x9c>)
 80021aa:	f016 f8cd 	bl	8018348 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 80021ae:	4b21      	ldr	r3, [pc, #132]	; (8002234 <MotionFX_manager_init+0xa0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	481e      	ldr	r0, [pc, #120]	; (8002230 <MotionFX_manager_init+0x9c>)
 80021b6:	f016 f9af 	bl	8018518 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 80021ba:	4b1e      	ldr	r3, [pc, #120]	; (8002234 <MotionFX_manager_init+0xa0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	331d      	adds	r3, #29
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff feda 	bl	8001f7a <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 80021c6:	4b1b      	ldr	r3, [pc, #108]	; (8002234 <MotionFX_manager_init+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	3321      	adds	r3, #33	; 0x21
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fee9 	bl	8001fa4 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <MotionFX_manager_init+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3325      	adds	r3, #37	; 0x25
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fef8 	bl	8001fce <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 80021de:	4b15      	ldr	r3, [pc, #84]	; (8002234 <MotionFX_manager_init+0xa0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a15      	ldr	r2, [pc, #84]	; (8002238 <MotionFX_manager_init+0xa4>)
 80021e4:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 80021e6:	4b13      	ldr	r3, [pc, #76]	; (8002234 <MotionFX_manager_init+0xa0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a14      	ldr	r2, [pc, #80]	; (800223c <MotionFX_manager_init+0xa8>)
 80021ec:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 80021ee:	4b11      	ldr	r3, [pc, #68]	; (8002234 <MotionFX_manager_init+0xa0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a13      	ldr	r2, [pc, #76]	; (8002240 <MotionFX_manager_init+0xac>)
 80021f4:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 80021f6:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <MotionFX_manager_init+0xa0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <MotionFX_manager_init+0xa0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <MotionFX_manager_init+0xa0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2201      	movs	r2, #1
 800220e:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MotionFX_manager_init+0xa0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4619      	mov	r1, r3
 8002216:	4806      	ldr	r0, [pc, #24]	; (8002230 <MotionFX_manager_init+0x9c>)
 8002218:	f016 f932 	bl	8018480 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 800221c:	2100      	movs	r1, #0
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <MotionFX_manager_init+0x9c>)
 8002220:	f016 f9b6 	bl	8018590 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002224:	2100      	movs	r1, #0
 8002226:	4802      	ldr	r0, [pc, #8]	; (8002230 <MotionFX_manager_init+0x9c>)
 8002228:	f016 f9d2 	bl	80185d0 <MotionFX_enable_9X>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000a1c 	.word	0x20000a1c
 8002234:	20000008 	.word	0x20000008
 8002238:	3ac88a48 	.word	0x3ac88a48
 800223c:	3b83126f 	.word	0x3b83126f
 8002240:	3b449ba6 	.word	0x3b449ba6

08002244 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <MotionFX_manager_run+0x4c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <MotionFX_manager_run+0x50>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d10e      	bne.n	800227c <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <MotionFX_manager_run+0x54>)
 8002266:	f016 f9e3 	bl	8018630 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2200      	movs	r2, #0
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4808      	ldr	r0, [pc, #32]	; (8002298 <MotionFX_manager_run+0x54>)
 8002276:	f016 f9cb 	bl	8018610 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 800227a:	e004      	b.n	8002286 <MotionFX_manager_run+0x42>
    discardedCount++;
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <MotionFX_manager_run+0x4c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	3301      	adds	r3, #1
 8002282:	4a03      	ldr	r2, [pc, #12]	; (8002290 <MotionFX_manager_run+0x4c>)
 8002284:	6013      	str	r3, [r2, #0]
}
 8002286:	bf00      	nop
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000a18 	.word	0x20000a18
 8002294:	2000000c 	.word	0x2000000c
 8002298:	20000a1c 	.word	0x20000a1c

0800229c <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 80022a0:	2101      	movs	r1, #1
 80022a2:	4802      	ldr	r0, [pc, #8]	; (80022ac <MotionFX_manager_start_6X+0x10>)
 80022a4:	f016 f974 	bl	8018590 <MotionFX_enable_6X>
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000a1c 	.word	0x20000a1c

080022b0 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80022b4:	2100      	movs	r1, #0
 80022b6:	4802      	ldr	r0, [pc, #8]	; (80022c0 <MotionFX_manager_stop_6X+0x10>)
 80022b8:	f016 f96a 	bl	8018590 <MotionFX_enable_6X>
}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000a1c 	.word	0x20000a1c

080022c4 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80022c8:	2101      	movs	r1, #1
 80022ca:	4802      	ldr	r0, [pc, #8]	; (80022d4 <MotionFX_manager_start_9X+0x10>)
 80022cc:	f016 f980 	bl	80185d0 <MotionFX_enable_9X>
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000a1c 	.word	0x20000a1c

080022d8 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 80022dc:	2100      	movs	r1, #0
 80022de:	4802      	ldr	r0, [pc, #8]	; (80022e8 <MotionFX_manager_stop_9X+0x10>)
 80022e0:	f016 f976 	bl	80185d0 <MotionFX_enable_9X>
}
 80022e4:	bf00      	nop
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20000a1c 	.word	0x20000a1c

080022ec <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_GetLibVersion(version);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f016 fde6 	bl	8018ec8 <MotionFX_GetLibVersion>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f016 fb7c 	bl	8018a14 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 800231c:	6838      	ldr	r0, [r7, #0]
 800231e:	f016 fd97 	bl	8018e50 <MotionFX_MagCal_getParams>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 8002332:	2101      	movs	r1, #1
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f016 fad1 	bl	80188dc <MotionFX_MagCal_init>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b082      	sub	sp, #8
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 800234a:	2100      	movs	r1, #0
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f016 fac5 	bl	80188dc <MotionFX_MagCal_init>
}
 8002352:	bf00      	nop
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
	...

0800235c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08e      	sub	sp, #56	; 0x38
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
 8002370:	611a      	str	r2, [r3, #16]
 8002372:	615a      	str	r2, [r3, #20]
 8002374:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800238a:	4b33      	ldr	r3, [pc, #204]	; (8002458 <MX_RTC_Init+0xfc>)
 800238c:	4a33      	ldr	r2, [pc, #204]	; (800245c <MX_RTC_Init+0x100>)
 800238e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <MX_RTC_Init+0xfc>)
 8002392:	2200      	movs	r2, #0
 8002394:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002396:	4b30      	ldr	r3, [pc, #192]	; (8002458 <MX_RTC_Init+0xfc>)
 8002398:	227f      	movs	r2, #127	; 0x7f
 800239a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800239c:	4b2e      	ldr	r3, [pc, #184]	; (8002458 <MX_RTC_Init+0xfc>)
 800239e:	22ff      	movs	r2, #255	; 0xff
 80023a0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023a2:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <MX_RTC_Init+0xfc>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80023a8:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <MX_RTC_Init+0xfc>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <MX_RTC_Init+0xfc>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023b4:	4b28      	ldr	r3, [pc, #160]	; (8002458 <MX_RTC_Init+0xfc>)
 80023b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <MX_RTC_Init+0xfc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <MX_RTC_Init+0xfc>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023c8:	4823      	ldr	r0, [pc, #140]	; (8002458 <MX_RTC_Init+0xfc>)
 80023ca:	f00a fa4f 	bl	800c86c <HAL_RTC_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80023d4:	f7ff fed8 	bl	8002188 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80023dc:	2300      	movs	r3, #0
 80023de:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80023e8:	f107 031c 	add.w	r3, r7, #28
 80023ec:	4619      	mov	r1, r3
 80023ee:	481a      	ldr	r0, [pc, #104]	; (8002458 <MX_RTC_Init+0xfc>)
 80023f0:	f00a fd5c 	bl	800ceac <HAL_RTCEx_PrivilegeModeSet>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80023fa:	f7ff fec5 	bl	8002188 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80023fe:	2300      	movs	r3, #0
 8002400:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8002402:	2300      	movs	r3, #0
 8002404:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8002406:	2300      	movs	r3, #0
 8002408:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	2201      	movs	r2, #1
 8002418:	4619      	mov	r1, r3
 800241a:	480f      	ldr	r0, [pc, #60]	; (8002458 <MX_RTC_Init+0xfc>)
 800241c:	f00a faa0 	bl	800c960 <HAL_RTC_SetTime>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8002426:	f7ff feaf 	bl	8002188 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800242a:	2301      	movs	r3, #1
 800242c:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 800242e:	2301      	movs	r3, #1
 8002430:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8002432:	2301      	movs	r3, #1
 8002434:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8002436:	2300      	movs	r3, #0
 8002438:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800243a:	1d3b      	adds	r3, r7, #4
 800243c:	2201      	movs	r2, #1
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_RTC_Init+0xfc>)
 8002442:	f00a fb8b 	bl	800cb5c <HAL_RTC_SetDate>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 800244c:	f7ff fe9c 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002450:	bf00      	nop
 8002452:	3738      	adds	r7, #56	; 0x38
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	200023dc 	.word	0x200023dc
 800245c:	46007800 	.word	0x46007800

08002460 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0b4      	sub	sp, #208	; 0xd0
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	22c0      	movs	r2, #192	; 0xc0
 800246e:	2100      	movs	r1, #0
 8002470:	4618      	mov	r0, r3
 8002472:	f018 fc2a 	bl	801acca <memset>
  if(rtcHandle->Instance==RTC)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a17      	ldr	r2, [pc, #92]	; (80024d8 <HAL_RTC_MspInit+0x78>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d127      	bne.n	80024d0 <HAL_RTC_MspInit+0x70>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002480:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002484:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800248e:	f107 0310 	add.w	r3, r7, #16
 8002492:	4618      	mov	r0, r3
 8002494:	f007 ff50 	bl	800a338 <HAL_RCCEx_PeriphCLKConfig>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800249e:	f7ff fe73 	bl	8002188 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <HAL_RTC_MspInit+0x7c>)
 80024a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024a8:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_RTC_MspInit+0x7c>)
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_RTC_MspInit+0x7c>)
 80024b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024b8:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_RTC_MspInit+0x7c>)
 80024ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024be:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RTC_MspInit+0x7c>)
 80024c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80024d0:	bf00      	nop
 80024d2:	37d0      	adds	r7, #208	; 0xd0
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	46007800 	.word	0x46007800
 80024dc:	46020c00 	.word	0x46020c00

080024e0 <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 80024ec:	2302      	movs	r3, #2
 80024ee:	60fb      	str	r3, [r7, #12]

  switch (Source)
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	2bf0      	cmp	r3, #240	; 0xf0
 80024f4:	d002      	beq.n	80024fc <ByteStuffCopyByte+0x1c>
 80024f6:	2bf1      	cmp	r3, #241	; 0xf1
 80024f8:	d008      	beq.n	800250c <ByteStuffCopyByte+0x2c>
 80024fa:	e00f      	b.n	800251c <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	22f1      	movs	r2, #241	; 0xf1
 8002500:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3301      	adds	r3, #1
 8002506:	22f2      	movs	r2, #242	; 0xf2
 8002508:	701a      	strb	r2, [r3, #0]
      break;
 800250a:	e00d      	b.n	8002528 <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	22f1      	movs	r2, #241	; 0xf1
 8002510:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3301      	adds	r3, #1
 8002516:	22f1      	movs	r2, #241	; 0xf1
 8002518:	701a      	strb	r2, [r3, #0]
      break;
 800251a:	e005      	b.n	8002528 <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	701a      	strb	r2, [r3, #0]
      ret = 1;
 8002522:	2301      	movs	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
      break;
 8002526:	bf00      	nop
  }

  return ret;
 8002528:	68fb      	ldr	r3, [r7, #12]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	e011      	b.n	800256e <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	18d0      	adds	r0, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4413      	add	r3, r2
 8002556:	3304      	adds	r3, #4
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	f7ff ffc0 	bl	80024e0 <ByteStuffCopyByte>
 8002560:	4602      	mov	r2, r0
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4413      	add	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	3301      	adds	r3, #1
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	429a      	cmp	r2, r3
 8002576:	d3e8      	bcc.n	800254a <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	22f0      	movs	r2, #240	; 0xf0
 8002580:	701a      	strb	r2, [r3, #0]
  count++;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3301      	adds	r3, #1
 8002586:	60bb      	str	r3, [r7, #8]
  return count;
 8002588:	68bb      	ldr	r3, [r7, #8]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	603a      	str	r2, [r7, #0]
 800259c:	71fb      	strb	r3, [r7, #7]
 800259e:	460b      	mov	r3, r1
 80025a0:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2bf1      	cmp	r3, #241	; 0xf1
 80025a6:	d111      	bne.n	80025cc <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 80025a8:	79bb      	ldrb	r3, [r7, #6]
 80025aa:	2bf1      	cmp	r3, #241	; 0xf1
 80025ac:	d104      	bne.n	80025b8 <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	22f1      	movs	r2, #241	; 0xf1
 80025b2:	701a      	strb	r2, [r3, #0]
      return 2;
 80025b4:	2302      	movs	r3, #2
 80025b6:	e00d      	b.n	80025d4 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 80025b8:	79bb      	ldrb	r3, [r7, #6]
 80025ba:	2bf2      	cmp	r3, #242	; 0xf2
 80025bc:	d104      	bne.n	80025c8 <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	22f0      	movs	r2, #240	; 0xf0
 80025c2:	701a      	strb	r2, [r3, #0]
      return 2;
 80025c4:	2302      	movs	r3, #2
 80025c6:	e005      	b.n	80025d4 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 80025c8:	2300      	movs	r3, #0
 80025ca:	e003      	b.n	80025d4 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	79fa      	ldrb	r2, [r7, #7]
 80025d0:	701a      	strb	r2, [r3, #0]
    return 1;
 80025d2:	2301      	movs	r3, #1
  }
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	e00a      	b.n	8002608 <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4413      	add	r3, r2
 80025f8:	3304      	adds	r3, #4
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	7bfa      	ldrb	r2, [r7, #15]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	3301      	adds	r3, #1
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3ef      	bcc.n	80025f2 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4413      	add	r3, r2
 8002618:	3304      	adds	r3, #4
 800261a:	7bfa      	ldrb	r2, [r7, #15]
 800261c:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8002640:	2300      	movs	r3, #0
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	e00a      	b.n	800265c <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4413      	add	r3, r2
 800264c:	3304      	adds	r3, #4
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	4413      	add	r3, r2
 8002654:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3301      	adds	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	d3ef      	bcc.n	8002646 <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	1e5a      	subs	r2, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf0c      	ite	eq
 8002676:	2301      	moveq	r3, #1
 8002678:	2300      	movne	r3, #0
 800267a:	b2db      	uxtb	r3, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	3b01      	subs	r3, #1
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 80026a2:	e00d      	b.n	80026c0 <Deserialize+0x38>
  {
    app <<= 8;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	021b      	lsls	r3, r3, #8
 80026a8:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	4413      	add	r3, r2
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	4413      	add	r3, r2
 80026be:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1ee      	bne.n	80026a4 <Deserialize+0x1c>
  }

  return app;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b087      	sub	sp, #28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	e00f      	b.n	8002706 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	4413      	add	r3, r2
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	3301      	adds	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d3eb      	bcc.n	80026e6 <Serialize_s32+0x12>
  }
}
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_MspInit+0x30>)
 8002724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002728:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_MspInit+0x30>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_MspInit+0x30>)
 8002734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002740:	f006 fc34 	bl	8008fac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	46020c00 	.word	0x46020c00

08002750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <NMI_Handler+0x4>

08002756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800275a:	e7fe      	b.n	800275a <HardFault_Handler+0x4>

0800275c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002760:	e7fe      	b.n	8002760 <MemManage_Handler+0x4>

08002762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002766:	e7fe      	b.n	8002766 <BusFault_Handler+0x4>

08002768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800276c:	e7fe      	b.n	800276c <UsageFault_Handler+0x4>

0800276e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279c:	f004 f8c6 	bl	800692c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButtonInterrupt_Pin);
 80027a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027ac:	f005 fd46 	bl	800823c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80027b8:	4802      	ldr	r0, [pc, #8]	; (80027c4 <TIM15_IRQHandler+0x10>)
 80027ba:	f00a fccc 	bl	800d156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	2000240c 	.word	0x2000240c

080027c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027d0:	4a14      	ldr	r2, [pc, #80]	; (8002824 <_sbrk+0x5c>)
 80027d2:	4b15      	ldr	r3, [pc, #84]	; (8002828 <_sbrk+0x60>)
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027dc:	4b13      	ldr	r3, [pc, #76]	; (800282c <_sbrk+0x64>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027e4:	4b11      	ldr	r3, [pc, #68]	; (800282c <_sbrk+0x64>)
 80027e6:	4a12      	ldr	r2, [pc, #72]	; (8002830 <_sbrk+0x68>)
 80027e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ea:	4b10      	ldr	r3, [pc, #64]	; (800282c <_sbrk+0x64>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d207      	bcs.n	8002808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027f8:	f018 fa30 	bl	801ac5c <__errno>
 80027fc:	4603      	mov	r3, r0
 80027fe:	220c      	movs	r2, #12
 8002800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	e009      	b.n	800281c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <_sbrk+0x64>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800280e:	4b07      	ldr	r3, [pc, #28]	; (800282c <_sbrk+0x64>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4413      	add	r3, r2
 8002816:	4a05      	ldr	r2, [pc, #20]	; (800282c <_sbrk+0x64>)
 8002818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200c0000 	.word	0x200c0000
 8002828:	00000400 	.word	0x00000400
 800282c:	2000139c 	.word	0x2000139c
 8002830:	200029c8 	.word	0x200029c8

08002834 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002838:	4b18      	ldr	r3, [pc, #96]	; (800289c <SystemInit+0x68>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	4a17      	ldr	r2, [pc, #92]	; (800289c <SystemInit+0x68>)
 8002840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002848:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <SystemInit+0x6c>)
 800284a:	2201      	movs	r2, #1
 800284c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <SystemInit+0x6c>)
 8002850:	2200      	movs	r2, #0
 8002852:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002854:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <SystemInit+0x6c>)
 8002856:	2200      	movs	r2, #0
 8002858:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800285a:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <SystemInit+0x6c>)
 800285c:	2200      	movs	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <SystemInit+0x6c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a0e      	ldr	r2, [pc, #56]	; (80028a0 <SystemInit+0x6c>)
 8002866:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800286a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800286e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <SystemInit+0x6c>)
 8002872:	2200      	movs	r2, #0
 8002874:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <SystemInit+0x6c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <SystemInit+0x6c>)
 800287c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002880:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002882:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <SystemInit+0x6c>)
 8002884:	2200      	movs	r2, #0
 8002886:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <SystemInit+0x68>)
 800288a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800288e:	609a      	str	r2, [r3, #8]
  #endif
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	e000ed00 	.word	0xe000ed00
 80028a0:	46020c00 	.word	0x46020c00

080028a4 <MX_TIM15_Init>:

TIM_HandleTypeDef htim15;

/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028aa:	f107 0310 	add.w	r3, r7, #16
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <MX_TIM15_Init+0x9c>)
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <MX_TIM15_Init+0xa0>)
 80028c6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <MX_TIM15_Init+0x9c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <MX_TIM15_Init+0x9c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <MX_TIM15_Init+0x9c>)
 80028d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028da:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <MX_TIM15_Init+0x9c>)
 80028de:	2200      	movs	r2, #0
 80028e0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <MX_TIM15_Init+0x9c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e8:	4b15      	ldr	r3, [pc, #84]	; (8002940 <MX_TIM15_Init+0x9c>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80028ee:	4814      	ldr	r0, [pc, #80]	; (8002940 <MX_TIM15_Init+0x9c>)
 80028f0:	f00a fb0a 	bl	800cf08 <HAL_TIM_Base_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80028fa:	f7ff fc45 	bl	8002188 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	4619      	mov	r1, r3
 800290a:	480d      	ldr	r0, [pc, #52]	; (8002940 <MX_TIM15_Init+0x9c>)
 800290c:	f00a fda2 	bl	800d454 <HAL_TIM_ConfigClockSource>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002916:	f7ff fc37 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4806      	ldr	r0, [pc, #24]	; (8002940 <MX_TIM15_Init+0x9c>)
 8002928:	f00b f854 	bl	800d9d4 <HAL_TIMEx_MasterConfigSynchronization>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002932:	f7ff fc29 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000240c 	.word	0x2000240c
 8002944:	40014000 	.word	0x40014000

08002948 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0e      	ldr	r2, [pc, #56]	; (8002990 <HAL_TIM_Base_MspInit+0x48>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d116      	bne.n	8002988 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_TIM_Base_MspInit+0x4c>)
 800295c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002960:	4a0c      	ldr	r2, [pc, #48]	; (8002994 <HAL_TIM_Base_MspInit+0x4c>)
 8002962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002966:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800296a:	4b0a      	ldr	r3, [pc, #40]	; (8002994 <HAL_TIM_Base_MspInit+0x4c>)
 800296c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002978:	2200      	movs	r2, #0
 800297a:	2100      	movs	r1, #0
 800297c:	2045      	movs	r0, #69	; 0x45
 800297e:	f004 f8f4 	bl	8006b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8002982:	2045      	movs	r0, #69	; 0x45
 8002984:	f004 f90b 	bl	8006b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40014000 	.word	0x40014000
 8002994:	46020c00 	.word	0x46020c00

08002998 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800299c:	4b22      	ldr	r3, [pc, #136]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 800299e:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <MX_USART1_UART_Init+0x94>)
 80029a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029b0:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029bc:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029be:	220c      	movs	r2, #12
 80029c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c8:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029d4:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029dc:	2200      	movs	r2, #0
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029e0:	4811      	ldr	r0, [pc, #68]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029e2:	f00b f8ff 	bl	800dbe4 <HAL_UART_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80029ec:	f7ff fbcc 	bl	8002188 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029f0:	2100      	movs	r1, #0
 80029f2:	480d      	ldr	r0, [pc, #52]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 80029f4:	f00c f856 	bl	800eaa4 <HAL_UARTEx_SetTxFifoThreshold>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80029fe:	f7ff fbc3 	bl	8002188 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a02:	2100      	movs	r1, #0
 8002a04:	4808      	ldr	r0, [pc, #32]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 8002a06:	f00c f88b 	bl	800eb20 <HAL_UARTEx_SetRxFifoThreshold>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a10:	f7ff fbba 	bl	8002188 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a14:	4804      	ldr	r0, [pc, #16]	; (8002a28 <MX_USART1_UART_Init+0x90>)
 8002a16:	f00c f80c 	bl	800ea32 <HAL_UARTEx_DisableFifoMode>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a20:	f7ff fbb2 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2000234c 	.word	0x2000234c
 8002a2c:	40013800 	.word	0x40013800

08002a30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b0ba      	sub	sp, #232	; 0xe8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	22c0      	movs	r2, #192	; 0xc0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f018 f93a 	bl	801acca <memset>
  if(uartHandle->Instance==USART1)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a24      	ldr	r2, [pc, #144]	; (8002aec <HAL_UART_MspInit+0xbc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d141      	bne.n	8002ae4 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a64:	2300      	movs	r3, #0
 8002a66:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f007 fc63 	bl	800a338 <HAL_RCCEx_PeriphCLKConfig>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a78:	f7ff fb86 	bl	8002188 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_UART_MspInit+0xc0>)
 8002a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a82:	4a1b      	ldr	r2, [pc, #108]	; (8002af0 <HAL_UART_MspInit+0xc0>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a88:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_UART_MspInit+0xc0>)
 8002a8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_UART_MspInit+0xc0>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa0:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <HAL_UART_MspInit+0xc0>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002aaa:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_UART_MspInit+0xc0>)
 8002aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002ab8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ad2:	2307      	movs	r3, #7
 8002ad4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4805      	ldr	r0, [pc, #20]	; (8002af4 <HAL_UART_MspInit+0xc4>)
 8002ae0:	f005 f8c6 	bl	8007c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	37e8      	adds	r7, #232	; 0xe8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40013800 	.word	0x40013800
 8002af0:	46020c00 	.word	0x46020c00
 8002af4:	42020000 	.word	0x42020000

08002af8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002afc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002afe:	e003      	b.n	8002b08 <LoopCopyDataInit>

08002b00 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002b00:	4b0c      	ldr	r3, [pc, #48]	; (8002b34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002b02:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002b04:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002b06:	3104      	adds	r1, #4

08002b08 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002b08:	480b      	ldr	r0, [pc, #44]	; (8002b38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8002b0c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002b0e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002b10:	d3f6      	bcc.n	8002b00 <CopyDataInit>
	ldr	r2, =_sbss
 8002b12:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002b14:	e002      	b.n	8002b1c <LoopFillZerobss>

08002b16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002b16:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b18:	f842 3b04 	str.w	r3, [r2], #4

08002b1c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <LoopForever+0x16>)
	cmp	r2, r3
 8002b1e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b20:	d3f9      	bcc.n	8002b16 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b22:	f7ff fe87 	bl	8002834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b26:	f018 f89f 	bl	801ac68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b2a:	f7ff fa65 	bl	8001ff8 <main>

08002b2e <LoopForever>:

LoopForever:
    b LoopForever
 8002b2e:	e7fe      	b.n	8002b2e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002b30:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002b34:	0801bc7c 	.word	0x0801bc7c
	ldr	r0, =_sdata
 8002b38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b3c:	20000114 	.word	0x20000114
	ldr	r2, =_sbss
 8002b40:	20000118 	.word	0x20000118
	ldr	r3, = _ebss
 8002b44:	200029c5 	.word	0x200029c5

08002b48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b48:	e7fe      	b.n	8002b48 <ADC1_IRQHandler>
	...

08002b4c <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_USER: User Push Button
  * @retval The Button GPIO pin value
  */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	4a06      	ldr	r2, [pc, #24]	; (8002b74 <BSP_PB_GetState+0x28>)
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f005 fb39 	bl	80081dc <HAL_GPIO_ReadPin>
 8002b6a:	4603      	mov	r3, r0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	20000014 	.word	0x20000014

08002b78 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <BSP_I2C2_Init+0x64>)
 8002b84:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <BSP_I2C2_Init+0x68>)
 8002b86:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <BSP_I2C2_Init+0x6c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11f      	bne.n	8002bd0 <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 8002b90:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <BSP_I2C2_Init+0x6c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	4a13      	ldr	r2, [pc, #76]	; (8002be4 <BSP_I2C2_Init+0x6c>)
 8002b98:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8002b9a:	4810      	ldr	r0, [pc, #64]	; (8002bdc <BSP_I2C2_Init+0x64>)
 8002b9c:	f005 fe6c 	bl	8008878 <HAL_I2C_GetState>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d114      	bne.n	8002bd0 <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <BSP_I2C2_Init+0x64>)
 8002ba8:	f000 fb1e 	bl	80031e8 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8002bac:	f007 fb02 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	490d      	ldr	r1, [pc, #52]	; (8002be8 <BSP_I2C2_Init+0x70>)
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 f8a1 	bl	8002cfc <I2C_GetTiming>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4807      	ldr	r0, [pc, #28]	; (8002bdc <BSP_I2C2_Init+0x64>)
 8002bc0:	f7ff f888 	bl	8001cd4 <MX_I2C2_Init>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002bca:	f06f 0307 	mvn.w	r3, #7
 8002bce:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 8002bd0:	687b      	ldr	r3, [r7, #4]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200024f4 	.word	0x200024f4
 8002be0:	40005800 	.word	0x40005800
 8002be4:	200013a0 	.word	0x200013a0
 8002be8:	000186a0 	.word	0x000186a0

08002bec <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <BSP_I2C2_DeInit+0x40>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	4a0b      	ldr	r2, [pc, #44]	; (8002c2c <BSP_I2C2_DeInit+0x40>)
 8002bfe:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <BSP_I2C2_DeInit+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10b      	bne.n	8002c20 <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 8002c08:	4809      	ldr	r0, [pc, #36]	; (8002c30 <BSP_I2C2_DeInit+0x44>)
 8002c0a:	f000 fb53 	bl	80032b4 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 8002c0e:	4808      	ldr	r0, [pc, #32]	; (8002c30 <BSP_I2C2_DeInit+0x44>)
 8002c10:	f005 fbd4 	bl	80083bc <HAL_I2C_DeInit>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8002c1a:	f06f 0307 	mvn.w	r3, #7
 8002c1e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8002c20:	687b      	ldr	r3, [r7, #4]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200013a0 	.word	0x200013a0
 8002c30:	200024f4 	.word	0x200024f4

08002c34 <BSP_I2C2_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60ba      	str	r2, [r7, #8]
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	81fb      	strh	r3, [r7, #14]
 8002c42:	460b      	mov	r3, r1
 8002c44:	81bb      	strh	r3, [r7, #12]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002c4a:	89b9      	ldrh	r1, [r7, #12]
 8002c4c:	89f8      	ldrh	r0, [r7, #14]
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f000 fb4f 	bl	80032f8 <I2C2_WriteReg>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <BSP_I2C2_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	e00c      	b.n	8002c80 <BSP_I2C2_WriteReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8002c66:	4809      	ldr	r0, [pc, #36]	; (8002c8c <BSP_I2C2_WriteReg+0x58>)
 8002c68:	f005 fe14 	bl	8008894 <HAL_I2C_GetError>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d103      	bne.n	8002c7a <BSP_I2C2_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002c72:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e002      	b.n	8002c80 <BSP_I2C2_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002c7a:	f06f 0303 	mvn.w	r3, #3
 8002c7e:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8002c80:	697b      	ldr	r3, [r7, #20]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200024f4 	.word	0x200024f4

08002c90 <BSP_I2C2_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b088      	sub	sp, #32
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	60ba      	str	r2, [r7, #8]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	81fb      	strh	r3, [r7, #14]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	81bb      	strh	r3, [r7, #12]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 8002ca6:	89b9      	ldrh	r1, [r7, #12]
 8002ca8:	89f8      	ldrh	r0, [r7, #14]
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f000 fb47 	bl	8003344 <I2C2_ReadReg>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d102      	bne.n	8002cc2 <BSP_I2C2_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e00c      	b.n	8002cdc <BSP_I2C2_ReadReg+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8002cc2:	4809      	ldr	r0, [pc, #36]	; (8002ce8 <BSP_I2C2_ReadReg+0x58>)
 8002cc4:	f005 fde6 	bl	8008894 <HAL_I2C_GetError>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d103      	bne.n	8002cd6 <BSP_I2C2_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002cce:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	e002      	b.n	8002cdc <BSP_I2C2_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002cd6:	f06f 0303 	mvn.w	r3, #3
 8002cda:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 8002cdc:	697b      	ldr	r3, [r7, #20]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200024f4 	.word	0x200024f4

08002cec <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002cf0:	f003 fe30 	bl	8006954 <HAL_GetTick>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06b      	beq.n	8002de8 <I2C_GetTiming+0xec>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d068      	beq.n	8002de8 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	e060      	b.n	8002dde <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002d1c:	4a35      	ldr	r2, [pc, #212]	; (8002df4 <I2C_GetTiming+0xf8>)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3304      	adds	r3, #4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d352      	bcc.n	8002dd8 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002d32:	4a30      	ldr	r2, [pc, #192]	; (8002df4 <I2C_GetTiming+0xf8>)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3308      	adds	r3, #8
 8002d40:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d847      	bhi.n	8002dd8 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002d48:	6939      	ldr	r1, [r7, #16]
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f856 	bl	8002dfc <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8002d50:	6939      	ldr	r1, [r7, #16]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f940 	bl	8002fd8 <I2C_Compute_SCLL_SCLH>
 8002d58:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d5e:	d842      	bhi.n	8002de6 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8002d60:	4925      	ldr	r1, [pc, #148]	; (8002df8 <I2C_GetTiming+0xfc>)
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8002d72:	4821      	ldr	r0, [pc, #132]	; (8002df8 <I2C_GetTiming+0xfc>)
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4403      	add	r3, r0
 8002d80:	3304      	adds	r3, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	051b      	lsls	r3, r3, #20
 8002d86:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8002d8a:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8002d8c:	481a      	ldr	r0, [pc, #104]	; (8002df8 <I2C_GetTiming+0xfc>)
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4403      	add	r3, r0
 8002d9a:	3308      	adds	r3, #8
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	041b      	lsls	r3, r3, #16
 8002da0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 8002da4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 8002da6:	4814      	ldr	r0, [pc, #80]	; (8002df8 <I2C_GetTiming+0xfc>)
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4403      	add	r3, r0
 8002db4:	330c      	adds	r3, #12
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 8002dbc:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8002dbe:	480e      	ldr	r0, [pc, #56]	; (8002df8 <I2C_GetTiming+0xfc>)
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4413      	add	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4403      	add	r3, r0
 8002dcc:	3310      	adds	r3, #16
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8002dd2:	430b      	orrs	r3, r1
 8002dd4:	617b      	str	r3, [r7, #20]
        }
        break;
 8002dd6:	e006      	b.n	8002de6 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d99b      	bls.n	8002d1c <I2C_GetTiming+0x20>
 8002de4:	e000      	b.n	8002de8 <I2C_GetTiming+0xec>
        break;
 8002de6:	bf00      	nop
      }
    }
  }

  return ret;
 8002de8:	697b      	ldr	r3, [r7, #20]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	0801b690 	.word	0x0801b690
 8002df8:	200013a4 	.word	0x200013a4

08002dfc <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b08f      	sub	sp, #60	; 0x3c
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002e06:	2310      	movs	r3, #16
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	085a      	lsrs	r2, r3, #1
 8002e0e:	4b6e      	ldr	r3, [pc, #440]	; (8002fc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002e10:	4413      	add	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e18:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002e1a:	2332      	movs	r3, #50	; 0x32
 8002e1c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8002e1e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002e22:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002e24:	4a69      	ldr	r2, [pc, #420]	; (8002fcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	212c      	movs	r1, #44	; 0x2c
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3324      	adds	r3, #36	; 0x24
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	4a65      	ldr	r2, [pc, #404]	; (8002fcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	212c      	movs	r1, #44	; 0x2c
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	330c      	adds	r3, #12
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002e48:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002e4a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002e4c:	495f      	ldr	r1, [pc, #380]	; (8002fcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	202c      	movs	r0, #44	; 0x2c
 8002e52:	fb00 f303 	mul.w	r3, r0, r3
 8002e56:	440b      	add	r3, r1
 8002e58:	3328      	adds	r3, #40	; 0x28
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3303      	adds	r3, #3
 8002e5e:	69f9      	ldr	r1, [r7, #28]
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002e68:	4a58      	ldr	r2, [pc, #352]	; (8002fcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3310      	adds	r3, #16
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	4a54      	ldr	r2, [pc, #336]	; (8002fcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	212c      	movs	r1, #44	; 0x2c
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	4413      	add	r3, r2
 8002e86:	3320      	adds	r3, #32
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002e8c:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002e8e:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8002e90:	494e      	ldr	r1, [pc, #312]	; (8002fcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	202c      	movs	r0, #44	; 0x2c
 8002e96:	fb00 f303 	mul.w	r3, r0, r3
 8002e9a:	440b      	add	r3, r1
 8002e9c:	3328      	adds	r3, #40	; 0x28
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	69f9      	ldr	r1, [r7, #28]
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8002eac:	4a47      	ldr	r2, [pc, #284]	; (8002fcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3320      	adds	r3, #32
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	4a43      	ldr	r2, [pc, #268]	; (8002fcc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3314      	adds	r3, #20
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4403      	add	r3, r0
 8002ed0:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	dc01      	bgt.n	8002edc <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	dc01      	bgt.n	8002ee6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eea:	e062      	b.n	8002fb2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	e059      	b.n	8002fa6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ef8:	3201      	adds	r2, #1
 8002efa:	fb02 f203 	mul.w	r2, r2, r3
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
 8002f04:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d348      	bcc.n	8002fa0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	623b      	str	r3, [r7, #32]
 8002f12:	e042      	b.n	8002f9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f16:	3301      	adds	r3, #1
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	fb02 f203 	mul.w	r2, r2, r3
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d332      	bcc.n	8002f94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d82e      	bhi.n	8002f94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8002f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d02a      	beq.n	8002f94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8002f3e:	4b24      	ldr	r3, [pc, #144]	; (8002fd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	4924      	ldr	r1, [pc, #144]	; (8002fd4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f50:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8002f52:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	491f      	ldr	r1, [pc, #124]	; (8002fd4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	440b      	add	r3, r1
 8002f62:	3304      	adds	r3, #4
 8002f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f66:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8002f68:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4919      	ldr	r1, [pc, #100]	; (8002fd4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	3308      	adds	r3, #8
 8002f7a:	6a3a      	ldr	r2, [r7, #32]
 8002f7c:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f8a:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b7f      	cmp	r3, #127	; 0x7f
 8002f92:	d812      	bhi.n	8002fba <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	3301      	adds	r3, #1
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	2b0f      	cmp	r3, #15
 8002f9e:	d9b9      	bls.n	8002f14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	2b0f      	cmp	r3, #15
 8002faa:	d9a2      	bls.n	8002ef2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fae:	3301      	adds	r3, #1
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	2b0f      	cmp	r3, #15
 8002fb6:	d999      	bls.n	8002eec <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002fb8:	e000      	b.n	8002fbc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8002fba:	bf00      	nop
          }
        }
      }
    }
  }
}
 8002fbc:	373c      	adds	r7, #60	; 0x3c
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	3b9aca00 	.word	0x3b9aca00
 8002fcc:	0801b690 	.word	0x0801b690
 8002fd0:	20001da4 	.word	0x20001da4
 8002fd4:	200013a4 	.word	0x200013a4

08002fd8 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b093      	sub	sp, #76	; 0x4c
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8002fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe6:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	085a      	lsrs	r2, r3, #1
 8002fec:	4b7a      	ldr	r3, [pc, #488]	; (80031d8 <I2C_Compute_SCLL_SCLH+0x200>)
 8002fee:	4413      	add	r3, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8002ff8:	4a78      	ldr	r2, [pc, #480]	; (80031dc <I2C_Compute_SCLL_SCLH+0x204>)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	085a      	lsrs	r2, r3, #1
 8003008:	4b73      	ldr	r3, [pc, #460]	; (80031d8 <I2C_Compute_SCLL_SCLH+0x200>)
 800300a:	4413      	add	r3, r2
 800300c:	4973      	ldr	r1, [pc, #460]	; (80031dc <I2C_Compute_SCLL_SCLH+0x204>)
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	202c      	movs	r0, #44	; 0x2c
 8003012:	fb00 f202 	mul.w	r2, r0, r2
 8003016:	440a      	add	r2, r1
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	fbb3 f3f2 	udiv	r3, r3, r2
 800301e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003020:	2332      	movs	r3, #50	; 0x32
 8003022:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003024:	4a6d      	ldr	r2, [pc, #436]	; (80031dc <I2C_Compute_SCLL_SCLH+0x204>)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3328      	adds	r3, #40	; 0x28
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800303c:	4a67      	ldr	r2, [pc, #412]	; (80031dc <I2C_Compute_SCLL_SCLH+0x204>)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3304      	adds	r3, #4
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a62      	ldr	r2, [pc, #392]	; (80031d8 <I2C_Compute_SCLL_SCLH+0x200>)
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003054:	4a61      	ldr	r2, [pc, #388]	; (80031dc <I2C_Compute_SCLL_SCLH+0x204>)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3308      	adds	r3, #8
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a5c      	ldr	r2, [pc, #368]	; (80031d8 <I2C_Compute_SCLL_SCLH+0x200>)
 8003066:	fbb2 f3f3 	udiv	r3, r2, r3
 800306a:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003070:	2300      	movs	r3, #0
 8003072:	637b      	str	r3, [r7, #52]	; 0x34
 8003074:	e0a3      	b.n	80031be <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003076:	495a      	ldr	r1, [pc, #360]	; (80031e0 <I2C_Compute_SCLL_SCLH+0x208>)
 8003078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003090:	2300      	movs	r3, #0
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003094:	e08c      	b.n	80031b0 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	441a      	add	r2, r3
 800309c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309e:	3301      	adds	r3, #1
 80030a0:	6979      	ldr	r1, [r7, #20]
 80030a2:	fb01 f103 	mul.w	r1, r1, r3
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	440b      	add	r3, r1
 80030ac:	4413      	add	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80030b0:	4a4a      	ldr	r2, [pc, #296]	; (80031dc <I2C_Compute_SCLL_SCLH+0x204>)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3318      	adds	r3, #24
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d971      	bls.n	80031aa <I2C_Compute_SCLL_SCLH+0x1d2>
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	1ad2      	subs	r2, r2, r3
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d268      	bcs.n	80031aa <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80030d8:	2300      	movs	r3, #0
 80030da:	63bb      	str	r3, [r7, #56]	; 0x38
 80030dc:	e062      	b.n	80031a4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80030de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	441a      	add	r2, r3
 80030e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e6:	3301      	adds	r3, #1
 80030e8:	6979      	ldr	r1, [r7, #20]
 80030ea:	fb01 f103 	mul.w	r1, r1, r3
 80030ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	440b      	add	r3, r1
 80030f4:	4413      	add	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	441a      	add	r2, r3
 80030fe:	4937      	ldr	r1, [pc, #220]	; (80031dc <I2C_Compute_SCLL_SCLH+0x204>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	202c      	movs	r0, #44	; 0x2c
 8003104:	fb00 f303 	mul.w	r3, r0, r3
 8003108:	440b      	add	r3, r1
 800310a:	3320      	adds	r3, #32
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	441a      	add	r2, r3
 8003110:	4932      	ldr	r1, [pc, #200]	; (80031dc <I2C_Compute_SCLL_SCLH+0x204>)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	202c      	movs	r0, #44	; 0x2c
 8003116:	fb00 f303 	mul.w	r3, r0, r3
 800311a:	440b      	add	r3, r1
 800311c:	3324      	adds	r3, #36	; 0x24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4413      	add	r3, r2
 8003122:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	429a      	cmp	r2, r3
 800312a:	d338      	bcc.n	800319e <I2C_Compute_SCLL_SCLH+0x1c6>
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	429a      	cmp	r2, r3
 8003132:	d834      	bhi.n	800319e <I2C_Compute_SCLL_SCLH+0x1c6>
 8003134:	4a29      	ldr	r2, [pc, #164]	; (80031dc <I2C_Compute_SCLL_SCLH+0x204>)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	212c      	movs	r1, #44	; 0x2c
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	331c      	adds	r3, #28
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	429a      	cmp	r2, r3
 8003148:	d329      	bcc.n	800319e <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 800314a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	429a      	cmp	r2, r3
 8003150:	d225      	bcs.n	800319e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800315a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315c:	2b00      	cmp	r3, #0
 800315e:	da02      	bge.n	8003166 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	425b      	negs	r3, r3
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800316a:	429a      	cmp	r2, r3
 800316c:	d917      	bls.n	800319e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8003172:	491b      	ldr	r1, [pc, #108]	; (80031e0 <I2C_Compute_SCLL_SCLH+0x208>)
 8003174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3310      	adds	r3, #16
 8003182:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003184:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8003186:	4916      	ldr	r1, [pc, #88]	; (80031e0 <I2C_Compute_SCLL_SCLH+0x208>)
 8003188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	330c      	adds	r3, #12
 8003196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003198:	601a      	str	r2, [r3, #0]
              ret = count;
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	3301      	adds	r3, #1
 80031a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a6:	2bff      	cmp	r3, #255	; 0xff
 80031a8:	d999      	bls.n	80030de <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80031aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ac:	3301      	adds	r3, #1
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b2:	2bff      	cmp	r3, #255	; 0xff
 80031b4:	f67f af6f 	bls.w	8003096 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80031b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ba:	3301      	adds	r3, #1
 80031bc:	637b      	str	r3, [r7, #52]	; 0x34
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <I2C_Compute_SCLL_SCLH+0x20c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031c4:	429a      	cmp	r2, r3
 80031c6:	f4ff af56 	bcc.w	8003076 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80031ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	374c      	adds	r7, #76	; 0x4c
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	3b9aca00 	.word	0x3b9aca00
 80031dc:	0801b690 	.word	0x0801b690
 80031e0:	200013a4 	.word	0x200013a4
 80031e4:	20001da4 	.word	0x20001da4

080031e8 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hI2c)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 80031f0:	4b2e      	ldr	r3, [pc, #184]	; (80032ac <I2C2_MspInit+0xc4>)
 80031f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f6:	4a2d      	ldr	r2, [pc, #180]	; (80032ac <I2C2_MspInit+0xc4>)
 80031f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003200:	4b2a      	ldr	r3, [pc, #168]	; (80032ac <I2C2_MspInit+0xc4>)
 8003202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 800320e:	4b27      	ldr	r3, [pc, #156]	; (80032ac <I2C2_MspInit+0xc4>)
 8003210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <I2C2_MspInit+0xc4>)
 8003216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <I2C2_MspInit+0xc4>)
 8003220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 800322c:	2310      	movs	r3, #16
 800322e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8003230:	2312      	movs	r3, #18
 8003232:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8003234:	2301      	movs	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8003238:	2302      	movs	r3, #2
 800323a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 800323c:	2304      	movs	r3, #4
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8003240:	f107 0314 	add.w	r3, r7, #20
 8003244:	4619      	mov	r1, r3
 8003246:	481a      	ldr	r0, [pc, #104]	; (80032b0 <I2C2_MspInit+0xc8>)
 8003248:	f004 fd12 	bl	8007c70 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 800324c:	2320      	movs	r3, #32
 800324e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8003250:	2312      	movs	r3, #18
 8003252:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8003254:	2301      	movs	r3, #1
 8003256:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8003258:	2302      	movs	r3, #2
 800325a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 800325c:	2304      	movs	r3, #4
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	4619      	mov	r1, r3
 8003266:	4812      	ldr	r0, [pc, #72]	; (80032b0 <I2C2_MspInit+0xc8>)
 8003268:	f004 fd02 	bl	8007c70 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <I2C2_MspInit+0xc4>)
 800326e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003272:	4a0e      	ldr	r2, [pc, #56]	; (80032ac <I2C2_MspInit+0xc4>)
 8003274:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003278:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <I2C2_MspInit+0xc4>)
 800327e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003286:	60bb      	str	r3, [r7, #8]
 8003288:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <I2C2_MspInit+0xc4>)
 800328c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328e:	4a07      	ldr	r2, [pc, #28]	; (80032ac <I2C2_MspInit+0xc4>)
 8003290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003294:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <I2C2_MspInit+0xc4>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	4a04      	ldr	r2, [pc, #16]	; (80032ac <I2C2_MspInit+0xc4>)
 800329c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80032a0:	6753      	str	r3, [r2, #116]	; 0x74
}
 80032a2:	bf00      	nop
 80032a4:	3728      	adds	r7, #40	; 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	46020c00 	.word	0x46020c00
 80032b0:	42021c00 	.word	0x42021c00

080032b4 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 80032bc:	2310      	movs	r3, #16
 80032be:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4619      	mov	r1, r3
 80032c4:	480a      	ldr	r0, [pc, #40]	; (80032f0 <I2C2_MspDeInit+0x3c>)
 80032c6:	f004 feab 	bl	8008020 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 80032ca:	2320      	movs	r3, #32
 80032cc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4619      	mov	r1, r3
 80032d2:	4807      	ldr	r0, [pc, #28]	; (80032f0 <I2C2_MspDeInit+0x3c>)
 80032d4:	f004 fea4 	bl	8008020 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <I2C2_MspDeInit+0x40>)
 80032da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032de:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <I2C2_MspDeInit+0x40>)
 80032e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80032e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80032e8:	bf00      	nop
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	42021c00 	.word	0x42021c00
 80032f4:	46020c00 	.word	0x46020c00

080032f8 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af04      	add	r7, sp, #16
 80032fe:	607b      	str	r3, [r7, #4]
 8003300:	4603      	mov	r3, r0
 8003302:	81fb      	strh	r3, [r7, #14]
 8003304:	460b      	mov	r3, r1
 8003306:	81bb      	strh	r3, [r7, #12]
 8003308:	4613      	mov	r3, r2
 800330a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 800330c:	8978      	ldrh	r0, [r7, #10]
 800330e:	89ba      	ldrh	r2, [r7, #12]
 8003310:	89f9      	ldrh	r1, [r7, #14]
 8003312:	f242 7310 	movw	r3, #10000	; 0x2710
 8003316:	9302      	str	r3, [sp, #8]
 8003318:	8b3b      	ldrh	r3, [r7, #24]
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	4603      	mov	r3, r0
 8003322:	4807      	ldr	r0, [pc, #28]	; (8003340 <I2C2_WriteReg+0x48>)
 8003324:	f005 f87a 	bl	800841c <HAL_I2C_Mem_Write>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800332e:	2300      	movs	r3, #0
 8003330:	e001      	b.n	8003336 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003332:	f06f 0307 	mvn.w	r3, #7
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200024f4 	.word	0x200024f4

08003344 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af04      	add	r7, sp, #16
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	4603      	mov	r3, r0
 800334e:	81fb      	strh	r3, [r7, #14]
 8003350:	460b      	mov	r3, r1
 8003352:	81bb      	strh	r3, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 8003358:	8978      	ldrh	r0, [r7, #10]
 800335a:	89ba      	ldrh	r2, [r7, #12]
 800335c:	89f9      	ldrh	r1, [r7, #14]
 800335e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003362:	9302      	str	r3, [sp, #8]
 8003364:	8b3b      	ldrh	r3, [r7, #24]
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	4603      	mov	r3, r0
 800336e:	4807      	ldr	r0, [pc, #28]	; (800338c <I2C2_ReadReg+0x48>)
 8003370:	f005 f968 	bl	8008644 <HAL_I2C_Mem_Read>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800337a:	2300      	movs	r3, #0
 800337c:	e001      	b.n	8003382 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800337e:	f06f 0307 	mvn.w	r3, #7
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	200024f4 	.word	0x200024f4

08003390 <BSP_MOTION_SENSOR_Init>:
  *         - MOTION_GYRO and/or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d903      	bls.n	80033ac <BSP_MOTION_SENSOR_Init+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80033a4:	f06f 0301 	mvn.w	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	e03a      	b.n	8003422 <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 0U) && ((Functions & MOTION_MAGNETO) != 0U))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d108      	bne.n	80033c4 <BSP_MOTION_SENSOR_Init+0x34>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <BSP_MOTION_SENSOR_Init+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80033bc:	f06f 030a 	mvn.w	r3, #10
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e02e      	b.n	8003422 <BSP_MOTION_SENSOR_Init+0x92>
  }
  else if ((Instance == 1U) && ((Functions & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d108      	bne.n	80033dc <BSP_MOTION_SENSOR_Init+0x4c>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <BSP_MOTION_SENSOR_Init+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80033d4:	f06f 030a 	mvn.w	r3, #10
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	e022      	b.n	8003422 <BSP_MOTION_SENSOR_Init+0x92>
  }
  else
  {
    /* Probe the motion sensor */
    if (Instance == 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <BSP_MOTION_SENSOR_Init+0x66>
    {
      /* Probe the ISM330DHCX sensor */
      if (ISM330DHCX_Probe(Functions) != BSP_ERROR_NONE)
 80033e2:	6838      	ldr	r0, [r7, #0]
 80033e4:	f000 fa14 	bl	8003810 <ISM330DHCX_Probe>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80033ee:	f06f 0304 	mvn.w	r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e008      	b.n	8003408 <BSP_MOTION_SENSOR_Init+0x78>
      }
    }
    else /* Instance = 1 */
    {
      /* Probe the IIS2MDC sensor */
      if (IIS2MDC_Probe(Functions) != BSP_ERROR_NONE)
 80033f6:	6838      	ldr	r0, [r7, #0]
 80033f8:	f000 fa80 	bl	80038fc <IIS2MDC_Probe>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <BSP_MOTION_SENSOR_Init+0x78>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 8003402:	f06f 0304 	mvn.w	r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
      }
    }

    if (status == BSP_ERROR_NONE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <BSP_MOTION_SENSOR_Init+0x92>
    {
      /* Store current initialized functions */
      Motion_Sensor_Ctx[Instance].Functions |= Functions;
 800340e:	4a07      	ldr	r2, [pc, #28]	; (800342c <BSP_MOTION_SENSOR_Init+0x9c>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	431a      	orrs	r2, r3
 800341a:	4904      	ldr	r1, [pc, #16]	; (800342c <BSP_MOTION_SENSOR_Init+0x9c>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }
  return status;
 8003422:	68fb      	ldr	r3, [r7, #12]
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	20001da8 	.word	0x20001da8

08003430 <BSP_MOTION_SENSOR_Enable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 800343a:	2300      	movs	r3, #0
 800343c:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d903      	bls.n	800344c <BSP_MOTION_SENSOR_Enable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003444:	f06f 0301 	mvn.w	r3, #1
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e045      	b.n	80034d8 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d108      	bne.n	8003464 <BSP_MOTION_SENSOR_Enable+0x34>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <BSP_MOTION_SENSOR_Enable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800345c:	f06f 030a 	mvn.w	r3, #10
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e039      	b.n	80034d8 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d108      	bne.n	800347c <BSP_MOTION_SENSOR_Enable+0x4c>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <BSP_MOTION_SENSOR_Enable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003474:	f06f 030a 	mvn.w	r3, #10
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	e02d      	b.n	80034d8 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 800347c:	4a19      	ldr	r2, [pc, #100]	; (80034e4 <BSP_MOTION_SENSOR_Enable+0xb4>)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d103      	bne.n	8003494 <BSP_MOTION_SENSOR_Enable+0x64>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 800348c:	f04f 33ff 	mov.w	r3, #4294967295
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	e021      	b.n	80034d8 <BSP_MOTION_SENSOR_Enable+0xa8>
  }
  else
  {
    /* Enable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d006      	beq.n	80034a8 <BSP_MOTION_SENSOR_Enable+0x78>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d101      	bne.n	80034a4 <BSP_MOTION_SENSOR_Enable+0x74>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e002      	b.n	80034aa <BSP_MOTION_SENSOR_Enable+0x7a>
 80034a4:	2302      	movs	r3, #2
 80034a6:	e000      	b.n	80034aa <BSP_MOTION_SENSOR_Enable+0x7a>
 80034a8:	2300      	movs	r3, #0
 80034aa:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Enable(Motion_Sensor_CompObj[Instance]) < 0)
 80034ac:	7af9      	ldrb	r1, [r7, #11]
 80034ae:	480e      	ldr	r0, [pc, #56]	; (80034e8 <BSP_MOTION_SENSOR_Enable+0xb8>)
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	490a      	ldr	r1, [pc, #40]	; (80034ec <BSP_MOTION_SENSOR_Enable+0xbc>)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034c8:	4610      	mov	r0, r2
 80034ca:	4798      	blx	r3
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da02      	bge.n	80034d8 <BSP_MOTION_SENSOR_Enable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 80034d2:	f06f 0304 	mvn.w	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 80034d8:	68fb      	ldr	r3, [r7, #12]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20001da8 	.word	0x20001da8
 80034e8:	20001dc0 	.word	0x20001dc0
 80034ec:	20001db0 	.word	0x20001db0

080034f0 <BSP_MOTION_SENSOR_Disable>:
  *         - MOTION_GYRO or MOTION_ACCELERO for instance 0
  *         - MOTION_MAGNETO for instance 1
  * @retval BSP status
  */
int32_t BSP_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  int32_t status = BSP_ERROR_NONE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d903      	bls.n	800350c <BSP_MOTION_SENSOR_Disable+0x1c>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003504:	f06f 0301 	mvn.w	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	e045      	b.n	8003598 <BSP_MOTION_SENSOR_Disable+0xa8>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d108      	bne.n	8003524 <BSP_MOTION_SENSOR_Disable+0x34>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <BSP_MOTION_SENSOR_Disable+0x34>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800351c:	f06f 030a 	mvn.w	r3, #10
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	e039      	b.n	8003598 <BSP_MOTION_SENSOR_Disable+0xa8>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d108      	bne.n	800353c <BSP_MOTION_SENSOR_Disable+0x4c>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <BSP_MOTION_SENSOR_Disable+0x4c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003534:	f06f 030a 	mvn.w	r3, #10
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	e02d      	b.n	8003598 <BSP_MOTION_SENSOR_Disable+0xa8>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 800353c:	4a19      	ldr	r2, [pc, #100]	; (80035a4 <BSP_MOTION_SENSOR_Disable+0xb4>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d103      	bne.n	8003554 <BSP_MOTION_SENSOR_Disable+0x64>
  {
    /* Driver not initialized */
    status = BSP_ERROR_NO_INIT;
 800354c:	f04f 33ff 	mov.w	r3, #4294967295
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e021      	b.n	8003598 <BSP_MOTION_SENSOR_Disable+0xa8>
  }
  else
  {
    /* Disable the motion sensor function */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d006      	beq.n	8003568 <BSP_MOTION_SENSOR_Disable+0x78>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b02      	cmp	r3, #2
 800355e:	d101      	bne.n	8003564 <BSP_MOTION_SENSOR_Disable+0x74>
 8003560:	2301      	movs	r3, #1
 8003562:	e002      	b.n	800356a <BSP_MOTION_SENSOR_Disable+0x7a>
 8003564:	2302      	movs	r3, #2
 8003566:	e000      	b.n	800356a <BSP_MOTION_SENSOR_Disable+0x7a>
 8003568:	2300      	movs	r3, #0
 800356a:	72fb      	strb	r3, [r7, #11]
    if (Motion_Sensor_FuncDrv[Instance][index]->Disable(Motion_Sensor_CompObj[Instance]) < 0)
 800356c:	7af9      	ldrb	r1, [r7, #11]
 800356e:	480e      	ldr	r0, [pc, #56]	; (80035a8 <BSP_MOTION_SENSOR_Disable+0xb8>)
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	440b      	add	r3, r1
 800357a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	490a      	ldr	r1, [pc, #40]	; (80035ac <BSP_MOTION_SENSOR_Disable+0xbc>)
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003588:	4610      	mov	r0, r2
 800358a:	4798      	blx	r3
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	da02      	bge.n	8003598 <BSP_MOTION_SENSOR_Disable+0xa8>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003592:	f06f 0304 	mvn.w	r3, #4
 8003596:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
 8003598:	68fb      	ldr	r3, [r7, #12]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20001da8 	.word	0x20001da8
 80035a8:	20001dc0 	.word	0x20001dc0
 80035ac:	20001db0 	.word	0x20001db0

080035b0 <BSP_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Axes Pointer to motion sensor axes.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, BSP_MOTION_SENSOR_Axes_t *Axes)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if ((Instance >= MOTION_SENSOR_INSTANCES_NBR) || (Axes == NULL))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d802      	bhi.n	80035cc <BSP_MOTION_SENSOR_GetAxes+0x1c>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d103      	bne.n	80035d4 <BSP_MOTION_SENSOR_GetAxes+0x24>
  {
    status = BSP_ERROR_WRONG_PARAM;
 80035cc:	f06f 0301 	mvn.w	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	e046      	b.n	8003662 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d108      	bne.n	80035ec <BSP_MOTION_SENSOR_GetAxes+0x3c>
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <BSP_MOTION_SENSOR_GetAxes+0x3c>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80035e4:	f06f 030a 	mvn.w	r3, #10
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e03a      	b.n	8003662 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <BSP_MOTION_SENSOR_GetAxes+0x54>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <BSP_MOTION_SENSOR_GetAxes+0x54>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80035fc:	f06f 030a 	mvn.w	r3, #10
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	e02e      	b.n	8003662 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 8003604:	4a19      	ldr	r2, [pc, #100]	; (800366c <BSP_MOTION_SENSOR_GetAxes+0xbc>)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d103      	bne.n	800361c <BSP_MOTION_SENSOR_GetAxes+0x6c>
  {
    status = BSP_ERROR_NO_INIT;
 8003614:	f04f 33ff 	mov.w	r3, #4294967295
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e022      	b.n	8003662 <BSP_MOTION_SENSOR_GetAxes+0xb2>
  }
  else
  {
    /* Get the motion sensor axes */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d006      	beq.n	8003630 <BSP_MOTION_SENSOR_GetAxes+0x80>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b02      	cmp	r3, #2
 8003626:	d101      	bne.n	800362c <BSP_MOTION_SENSOR_GetAxes+0x7c>
 8003628:	2301      	movs	r3, #1
 800362a:	e002      	b.n	8003632 <BSP_MOTION_SENSOR_GetAxes+0x82>
 800362c:	2302      	movs	r3, #2
 800362e:	e000      	b.n	8003632 <BSP_MOTION_SENSOR_GetAxes+0x82>
 8003630:	2300      	movs	r3, #0
 8003632:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->GetAxes(Motion_Sensor_CompObj[Instance], Axes) < 0)
 8003634:	7cf9      	ldrb	r1, [r7, #19]
 8003636:	480e      	ldr	r0, [pc, #56]	; (8003670 <BSP_MOTION_SENSOR_GetAxes+0xc0>)
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	440b      	add	r3, r1
 8003642:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	490a      	ldr	r1, [pc, #40]	; (8003674 <BSP_MOTION_SENSOR_GetAxes+0xc4>)
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4610      	mov	r0, r2
 8003654:	4798      	blx	r3
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	da02      	bge.n	8003662 <BSP_MOTION_SENSOR_GetAxes+0xb2>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800365c:	f06f 0304 	mvn.w	r3, #4
 8003660:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8003662:	697b      	ldr	r3, [r7, #20]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20001da8 	.word	0x20001da8
 8003670:	20001dc0 	.word	0x20001dc0
 8003674:	20001db0 	.word	0x20001db0

08003678 <BSP_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Odr Output data rate.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d903      	bls.n	8003698 <BSP_MOTION_SENSOR_SetOutputDataRate+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003690:	f06f 0301 	mvn.w	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e047      	b.n	8003728 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d108      	bne.n	80036b0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x38>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80036a8:	f06f 030a 	mvn.w	r3, #10
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e03b      	b.n	8003728 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d108      	bne.n	80036c8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f003 0303 	and.w	r3, r3, #3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <BSP_MOTION_SENSOR_SetOutputDataRate+0x50>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80036c0:	f06f 030a 	mvn.w	r3, #10
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e02f      	b.n	8003728 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 80036c8:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <BSP_MOTION_SENSOR_SetOutputDataRate+0xbc>)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d103      	bne.n	80036e0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x68>
  {
    status = BSP_ERROR_NO_INIT;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	e023      	b.n	8003728 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
  }
  else
  {
    /* Set the motion sensor output data rate */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d006      	beq.n	80036f4 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7c>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d101      	bne.n	80036f0 <BSP_MOTION_SENSOR_SetOutputDataRate+0x78>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e002      	b.n	80036f6 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e000      	b.n	80036f6 <BSP_MOTION_SENSOR_SetOutputDataRate+0x7e>
 80036f4:	2300      	movs	r3, #0
 80036f6:	74fb      	strb	r3, [r7, #19]
    if (Motion_Sensor_FuncDrv[Instance][index]->SetOutputDataRate(Motion_Sensor_CompObj[Instance], Odr) < 0)
 80036f8:	7cf9      	ldrb	r1, [r7, #19]
 80036fa:	480f      	ldr	r0, [pc, #60]	; (8003738 <BSP_MOTION_SENSOR_SetOutputDataRate+0xc0>)
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	440b      	add	r3, r1
 8003706:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	490b      	ldr	r1, [pc, #44]	; (800373c <BSP_MOTION_SENSOR_SetOutputDataRate+0xc4>)
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003714:	ed97 0a01 	vldr	s0, [r7, #4]
 8003718:	4610      	mov	r0, r2
 800371a:	4798      	blx	r3
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	da02      	bge.n	8003728 <BSP_MOTION_SENSOR_SetOutputDataRate+0xb0>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003722:	f06f 0304 	mvn.w	r3, #4
 8003726:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8003728:	697b      	ldr	r3, [r7, #20]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20001da8 	.word	0x20001da8
 8003738:	20001dc0 	.word	0x20001dc0
 800373c:	20001db0 	.word	0x20001db0

08003740 <BSP_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 1
  * @param  Fullscale Full scale value.
  * @retval BSP status.
  */
int32_t BSP_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  int32_t status = BSP_ERROR_NONE;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  if (Instance >= MOTION_SENSOR_INSTANCES_NBR)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d903      	bls.n	800375e <BSP_MOTION_SENSOR_SetFullScale+0x1e>
  {
    status = BSP_ERROR_WRONG_PARAM;
 8003756:	f06f 0301 	mvn.w	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	e04d      	b.n	80037fa <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 0U) && ((Function & MOTION_MAGNETO) != 0U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d108      	bne.n	8003776 <BSP_MOTION_SENSOR_SetFullScale+0x36>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <BSP_MOTION_SENSOR_SetFullScale+0x36>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800376e:	f06f 030a 	mvn.w	r3, #10
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e041      	b.n	80037fa <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Instance == 1U) && ((Function & (MOTION_GYRO | MOTION_ACCELERO)) != 0U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d108      	bne.n	800378e <BSP_MOTION_SENSOR_SetFullScale+0x4e>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <BSP_MOTION_SENSOR_SetFullScale+0x4e>
  {
    status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8003786:	f06f 030a 	mvn.w	r3, #10
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	e035      	b.n	80037fa <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else if ((Motion_Sensor_Ctx[Instance].Functions & Function) == 0U)
 800378e:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <BSP_MOTION_SENSOR_SetFullScale+0xc4>)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d103      	bne.n	80037a6 <BSP_MOTION_SENSOR_SetFullScale+0x66>
  {
    status = BSP_ERROR_NO_INIT;
 800379e:	f04f 33ff 	mov.w	r3, #4294967295
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e029      	b.n	80037fa <BSP_MOTION_SENSOR_SetFullScale+0xba>
  }
  else
  {
    /* Set the motion sensor full scale */
    index = (Function == MOTION_GYRO) ? GYRO_ID : ((Function == MOTION_ACCELERO) ? ACCELERO_ID : MAGNETO_ID);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d006      	beq.n	80037ba <BSP_MOTION_SENSOR_SetFullScale+0x7a>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d101      	bne.n	80037b6 <BSP_MOTION_SENSOR_SetFullScale+0x76>
 80037b2:	2301      	movs	r3, #1
 80037b4:	e002      	b.n	80037bc <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e000      	b.n	80037bc <BSP_MOTION_SENSOR_SetFullScale+0x7c>
 80037ba:	2300      	movs	r3, #0
 80037bc:	74fb      	strb	r3, [r7, #19]
    if (index == MAGNETO_ID)
 80037be:	7cfb      	ldrb	r3, [r7, #19]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d103      	bne.n	80037cc <BSP_MOTION_SENSOR_SetFullScale+0x8c>
    {
      /* Feature not supported for Magneto */
      status = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80037c4:	f06f 030a 	mvn.w	r3, #10
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e016      	b.n	80037fa <BSP_MOTION_SENSOR_SetFullScale+0xba>
    }
    else
    {
      if (Motion_Sensor_FuncDrv[Instance][index]->SetFullScale(Motion_Sensor_CompObj[Instance], Fullscale) < 0)
 80037cc:	7cf9      	ldrb	r1, [r7, #19]
 80037ce:	480e      	ldr	r0, [pc, #56]	; (8003808 <BSP_MOTION_SENSOR_SetFullScale+0xc8>)
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4613      	mov	r3, r2
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	4413      	add	r3, r2
 80037d8:	440b      	add	r3, r1
 80037da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	490a      	ldr	r1, [pc, #40]	; (800380c <BSP_MOTION_SENSOR_SetFullScale+0xcc>)
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4610      	mov	r0, r2
 80037ec:	4798      	blx	r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	da02      	bge.n	80037fa <BSP_MOTION_SENSOR_SetFullScale+0xba>
      {
        status = BSP_ERROR_COMPONENT_FAILURE;
 80037f4:	f06f 0304 	mvn.w	r3, #4
 80037f8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return status;
 80037fa:	697b      	ldr	r3, [r7, #20]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20001da8 	.word	0x20001da8
 8003808:	20001dc0 	.word	0x20001dc0
 800380c:	20001db0 	.word	0x20001db0

08003810 <ISM330DHCX_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_GYRO and/or MOTION_ACCELERO
  * @retval BSP status.
  */
static int32_t ISM330DHCX_Probe(uint32_t Functions)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08c      	sub	sp, #48	; 0x30
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8003818:	2300      	movs	r3, #0
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ISM330DHCX_IO_t            IOCtx;
  uint8_t                 ism330dlc_id;
  static ISM330DHCX_Object_t ISM330DHCX_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = ISM330DHCX_I2C_BUS;
 800381c:	2300      	movs	r3, #0
 800381e:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = ISM330DHCX_I2C_ADD_H;
 8003820:	23d7      	movs	r3, #215	; 0xd7
 8003822:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8003824:	4b29      	ldr	r3, [pc, #164]	; (80038cc <ISM330DHCX_Probe+0xbc>)
 8003826:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8003828:	4b29      	ldr	r3, [pc, #164]	; (80038d0 <ISM330DHCX_Probe+0xc0>)
 800382a:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 800382c:	4b29      	ldr	r3, [pc, #164]	; (80038d4 <ISM330DHCX_Probe+0xc4>)
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 8003830:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <ISM330DHCX_Probe+0xc8>)
 8003832:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <ISM330DHCX_Probe+0xcc>)
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Register Component Bus IO operations */
  if (ISM330DHCX_RegisterBusIO(&ISM330DHCX_Obj, &IOCtx) != ISM330DHCX_OK)
 8003838:	f107 0310 	add.w	r3, r7, #16
 800383c:	4619      	mov	r1, r3
 800383e:	4828      	ldr	r0, [pc, #160]	; (80038e0 <ISM330DHCX_Probe+0xd0>)
 8003840:	f000 fd36 	bl	80042b0 <ISM330DHCX_RegisterBusIO>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <ISM330DHCX_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 800384a:	f06f 0307 	mvn.w	r3, #7
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003850:	e037      	b.n	80038c2 <ISM330DHCX_Probe+0xb2>
  }
  /* Read the sensor ID */
  else if (ISM330DHCX_ReadID(&ISM330DHCX_Obj, &ism330dlc_id) != ISM330DHCX_OK)
 8003852:	f107 030f 	add.w	r3, r7, #15
 8003856:	4619      	mov	r1, r3
 8003858:	4821      	ldr	r0, [pc, #132]	; (80038e0 <ISM330DHCX_Probe+0xd0>)
 800385a:	f000 fe37 	bl	80044cc <ISM330DHCX_ReadID>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <ISM330DHCX_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8003864:	f06f 0304 	mvn.w	r3, #4
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386a:	e02a      	b.n	80038c2 <ISM330DHCX_Probe+0xb2>
  }
  /* Check if the returned sensor ID is correct */
  else if (ism330dlc_id != ISM330DHCX_ID)
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	2b6b      	cmp	r3, #107	; 0x6b
 8003870:	d003      	beq.n	800387a <ISM330DHCX_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 8003872:	f06f 0306 	mvn.w	r3, #6
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003878:	e023      	b.n	80038c2 <ISM330DHCX_Probe+0xb2>
  }
  else
  {
    Motion_Sensor_CompObj[0] = &ISM330DHCX_Obj;
 800387a:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <ISM330DHCX_Probe+0xd4>)
 800387c:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <ISM330DHCX_Probe+0xd0>)
 800387e:	601a      	str	r2, [r3, #0]
    Motion_Sensor_Drv[0]     = (MOTION_SENSOR_CommonDrv_t *) &ISM330DHCX_COMMON_Driver;
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <ISM330DHCX_Probe+0xd8>)
 8003882:	4a1a      	ldr	r2, [pc, #104]	; (80038ec <ISM330DHCX_Probe+0xdc>)
 8003884:	601a      	str	r2, [r3, #0]
    /* Initialize the component */
    if (Motion_Sensor_Drv[0]->Init(Motion_Sensor_CompObj[0]) < 0)
 8003886:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <ISM330DHCX_Probe+0xd8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <ISM330DHCX_Probe+0xd4>)
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	4610      	mov	r0, r2
 8003892:	4798      	blx	r3
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	da03      	bge.n	80038a2 <ISM330DHCX_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 800389a:	f06f 0304 	mvn.w	r3, #4
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a0:	e00f      	b.n	80038c2 <ISM330DHCX_Probe+0xb2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_GYRO) != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <ISM330DHCX_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[0][GYRO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_GYRO_Driver;
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <ISM330DHCX_Probe+0xe0>)
 80038ae:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <ISM330DHCX_Probe+0xe4>)
 80038b0:	601a      	str	r2, [r3, #0]
      }
      if ((Functions & MOTION_ACCELERO) != 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <ISM330DHCX_Probe+0xb2>
      {
        Motion_Sensor_FuncDrv[0][ACCELERO_ID] = (MOTION_SENSOR_FuncDrv_t *) &ISM330DHCX_ACC_Driver;
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <ISM330DHCX_Probe+0xe0>)
 80038be:	4a0e      	ldr	r2, [pc, #56]	; (80038f8 <ISM330DHCX_Probe+0xe8>)
 80038c0:	605a      	str	r2, [r3, #4]
      }
    }
  }

  return status;
 80038c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3730      	adds	r7, #48	; 0x30
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	08002b79 	.word	0x08002b79
 80038d0:	08002bed 	.word	0x08002bed
 80038d4:	08002c91 	.word	0x08002c91
 80038d8:	08002c35 	.word	0x08002c35
 80038dc:	08002ced 	.word	0x08002ced
 80038e0:	20001dd8 	.word	0x20001dd8
 80038e4:	20001db0 	.word	0x20001db0
 80038e8:	20001db8 	.word	0x20001db8
 80038ec:	2000004c 	.word	0x2000004c
 80038f0:	20001dc0 	.word	0x20001dc0
 80038f4:	20000080 	.word	0x20000080
 80038f8:	2000005c 	.word	0x2000005c

080038fc <IIS2MDC_Probe>:
  * @param  Functions Motion sensor functions. Could be :
  *         - MOTION_MAGNETO
  * @retval BSP status.
  */
static int32_t IIS2MDC_Probe(uint32_t Functions)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	; 0x30
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  int32_t                 status = BSP_ERROR_NONE;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c
  IIS2MDC_IO_t            IOCtx;
  uint8_t                 iis2mdc_id;
  static IIS2MDC_Object_t IIS2MDC_Obj;

  /* Configure the motion sensor driver */
  IOCtx.BusType     = IIS2MDC_I2C_BUS;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
  IOCtx.Address     = IIS2MDC_I2C_ADD;
 800390c:	233d      	movs	r3, #61	; 0x3d
 800390e:	773b      	strb	r3, [r7, #28]
  IOCtx.Init        = BSP_I2C2_Init;
 8003910:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <IIS2MDC_Probe+0xac>)
 8003912:	613b      	str	r3, [r7, #16]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <IIS2MDC_Probe+0xb0>)
 8003916:	617b      	str	r3, [r7, #20]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg;
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <IIS2MDC_Probe+0xb4>)
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
  IOCtx.WriteReg    = BSP_I2C2_WriteReg;
 800391c:	4b25      	ldr	r3, [pc, #148]	; (80039b4 <IIS2MDC_Probe+0xb8>)
 800391e:	623b      	str	r3, [r7, #32]
  IOCtx.GetTick     = BSP_GetTick;
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <IIS2MDC_Probe+0xbc>)
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Register Component Bus IO operations */
  if (IIS2MDC_RegisterBusIO(&IIS2MDC_Obj, &IOCtx) != IIS2MDC_OK)
 8003924:	f107 0310 	add.w	r3, r7, #16
 8003928:	4619      	mov	r1, r3
 800392a:	4824      	ldr	r0, [pc, #144]	; (80039bc <IIS2MDC_Probe+0xc0>)
 800392c:	f000 f852 	bl	80039d4 <IIS2MDC_RegisterBusIO>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <IIS2MDC_Probe+0x42>
  {
    status = BSP_ERROR_BUS_FAILURE;
 8003936:	f06f 0307 	mvn.w	r3, #7
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800393c:	e02f      	b.n	800399e <IIS2MDC_Probe+0xa2>
  }
  /* Read the sensor ID */
  else if (IIS2MDC_ReadID(&IIS2MDC_Obj, &iis2mdc_id) != IIS2MDC_OK)
 800393e:	f107 030f 	add.w	r3, r7, #15
 8003942:	4619      	mov	r1, r3
 8003944:	481d      	ldr	r0, [pc, #116]	; (80039bc <IIS2MDC_Probe+0xc0>)
 8003946:	f000 f90e 	bl	8003b66 <IIS2MDC_ReadID>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <IIS2MDC_Probe+0x5c>
  {
    status = BSP_ERROR_COMPONENT_FAILURE;
 8003950:	f06f 0304 	mvn.w	r3, #4
 8003954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003956:	e022      	b.n	800399e <IIS2MDC_Probe+0xa2>
  }
  /* Check if the returned sensor ID is correct */
  else if (iis2mdc_id != IIS2MDC_ID)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d003      	beq.n	8003966 <IIS2MDC_Probe+0x6a>
  {
    status = BSP_ERROR_UNKNOWN_COMPONENT;
 800395e:	f06f 0306 	mvn.w	r3, #6
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003964:	e01b      	b.n	800399e <IIS2MDC_Probe+0xa2>
  }
  else
  {
    Motion_Sensor_CompObj[1] = &IIS2MDC_Obj;
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <IIS2MDC_Probe+0xc4>)
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <IIS2MDC_Probe+0xc0>)
 800396a:	605a      	str	r2, [r3, #4]
    Motion_Sensor_Drv[1]     = (MOTION_SENSOR_CommonDrv_t *) &IIS2MDC_COMMON_Driver;
 800396c:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <IIS2MDC_Probe+0xc8>)
 800396e:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <IIS2MDC_Probe+0xcc>)
 8003970:	605a      	str	r2, [r3, #4]
    /* Initialize the component */
    if (Motion_Sensor_Drv[1]->Init(Motion_Sensor_CompObj[1]) < 0)
 8003972:	4b14      	ldr	r3, [pc, #80]	; (80039c4 <IIS2MDC_Probe+0xc8>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <IIS2MDC_Probe+0xc4>)
 800397a:	6852      	ldr	r2, [r2, #4]
 800397c:	4610      	mov	r0, r2
 800397e:	4798      	blx	r3
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	da03      	bge.n	800398e <IIS2MDC_Probe+0x92>
    {
      status = BSP_ERROR_COMPONENT_FAILURE;
 8003986:	f06f 0304 	mvn.w	r3, #4
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800398c:	e007      	b.n	800399e <IIS2MDC_Probe+0xa2>
    }
    else
    {
      /* Link the MS driver with the component driver */
      if ((Functions & MOTION_MAGNETO) != 0U)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <IIS2MDC_Probe+0xa2>
      {
        Motion_Sensor_FuncDrv[1][MAGNETO_ID] = (MOTION_SENSOR_FuncDrv_t *) &IIS2MDC_MAG_Driver;
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <IIS2MDC_Probe+0xd0>)
 800399a:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <IIS2MDC_Probe+0xd4>)
 800399c:	615a      	str	r2, [r3, #20]
      }
    }
  }

  return status;
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3730      	adds	r7, #48	; 0x30
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	08002b79 	.word	0x08002b79
 80039ac:	08002bed 	.word	0x08002bed
 80039b0:	08002c91 	.word	0x08002c91
 80039b4:	08002c35 	.word	0x08002c35
 80039b8:	08002ced 	.word	0x08002ced
 80039bc:	20001e08 	.word	0x20001e08
 80039c0:	20001db0 	.word	0x20001db0
 80039c4:	20001db8 	.word	0x20001db8
 80039c8:	20000018 	.word	0x20000018
 80039cc:	20001dc0 	.word	0x20001dc0
 80039d0:	20000028 	.word	0x20000028

080039d4 <IIS2MDC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_RegisterBusIO(IIS2MDC_Object_t *pObj, IIS2MDC_IO_t *pIO)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <IIS2MDC_RegisterBusIO+0x1c>
  {
    ret = IIS2MDC_ERROR;
 80039e8:	f04f 33ff 	mov.w	r3, #4294967295
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	e05e      	b.n	8003aae <IIS2MDC_RegisterBusIO+0xda>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	7b1a      	ldrb	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	691a      	ldr	r2, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	695a      	ldr	r2, [r3, #20]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	699a      	ldr	r2, [r3, #24]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <IIS2MDC_RegisterBusIO+0xe4>)
 8003a2c:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a22      	ldr	r2, [pc, #136]	; (8003abc <IIS2MDC_RegisterBusIO+0xe8>)
 8003a32:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d103      	bne.n	8003a4a <IIS2MDC_RegisterBusIO+0x76>
    {
      ret = IIS2MDC_ERROR;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e031      	b.n	8003aae <IIS2MDC_RegisterBusIO+0xda>
    }
    else if (pObj->IO.Init() != IIS2MDC_OK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4798      	blx	r3
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <IIS2MDC_RegisterBusIO+0x8a>
    {
      ret = IIS2MDC_ERROR;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	e027      	b.n	8003aae <IIS2MDC_RegisterBusIO+0xda>
    }
    else
    {
      if (pObj->IO.BusType != IIS2MDC_I2C_BUS) /* If the bus type is not I2C */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d023      	beq.n	8003aae <IIS2MDC_RegisterBusIO+0xda>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d11e      	bne.n	8003aae <IIS2MDC_RegisterBusIO+0xda>
        {
          if (pObj->IO.BusType == IIS2MDC_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d10e      	bne.n	8003a96 <IIS2MDC_RegisterBusIO+0xc2>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003a78:	2334      	movs	r3, #52	; 0x34
 8003a7a:	72fb      	strb	r3, [r7, #11]

            if (IIS2MDC_Write_Reg(pObj, IIS2MDC_CFG_REG_C, data) != IIS2MDC_OK)
 8003a7c:	7afb      	ldrb	r3, [r7, #11]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2162      	movs	r1, #98	; 0x62
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fa15 	bl	8003eb2 <IIS2MDC_Write_Reg>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00f      	beq.n	8003aae <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	e00b      	b.n	8003aae <IIS2MDC_RegisterBusIO+0xda>
            }
          }
          else
          {
            /* Disable I2C interface on the component */
            if (iis2mdc_i2c_interface_set(&(pObj->Ctx), IIS2MDC_I2C_DISABLE) != IIS2MDC_OK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	331c      	adds	r3, #28
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fbe1 	bl	8004264 <iis2mdc_i2c_interface_set>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <IIS2MDC_RegisterBusIO+0xda>
            {
              ret = IIS2MDC_ERROR;
 8003aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aac:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003aae:	68fb      	ldr	r3, [r7, #12]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	08003ee9 	.word	0x08003ee9
 8003abc:	08003f4b 	.word	0x08003f4b

08003ac0 <IIS2MDC_Init>:
 * @brief  Initialize the IIS2MDC sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Init(IIS2MDC_Object_t *pObj)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (iis2mdc_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS2MDC_OK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	331c      	adds	r3, #28
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fb20 	bl	8004114 <iis2mdc_block_data_update_set>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <IIS2MDC_Init+0x20>
  {
    return IIS2MDC_ERROR;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	e028      	b.n	8003b32 <IIS2MDC_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	331c      	adds	r3, #28
 8003ae4:	2102      	movs	r1, #2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fa90 	bl	800400c <iis2mdc_operating_mode_set>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <IIS2MDC_Init+0x38>
  {
    return IIS2MDC_ERROR;
 8003af2:	f04f 33ff 	mov.w	r3, #4294967295
 8003af6:	e01c      	b.n	8003b32 <IIS2MDC_Init+0x72>
  }

  /* Output data rate selection */
  if (iis2mdc_data_rate_set(&(pObj->Ctx), IIS2MDC_ODR_100Hz) != IIS2MDC_OK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	331c      	adds	r3, #28
 8003afc:	2103      	movs	r1, #3
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 faaa 	bl	8004058 <iis2mdc_data_rate_set>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <IIS2MDC_Init+0x50>
  {
    return IIS2MDC_ERROR;
 8003b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0e:	e010      	b.n	8003b32 <IIS2MDC_Init+0x72>
  }

  /* Self Test disabled. */
  if (iis2mdc_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != IIS2MDC_OK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	331c      	adds	r3, #28
 8003b14:	2100      	movs	r1, #0
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fb7e 	bl	8004218 <iis2mdc_self_test_set>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <IIS2MDC_Init+0x68>
  {
    return IIS2MDC_ERROR;
 8003b22:	f04f 33ff 	mov.w	r3, #4294967295
 8003b26:	e004      	b.n	8003b32 <IIS2MDC_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <IIS2MDC_DeInit>:
 * @brief  Deinitialize the IIS2MDC magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_DeInit(IIS2MDC_Object_t *pObj)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (IIS2MDC_MAG_Disable(pObj) != IIS2MDC_OK)
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f874 	bl	8003c30 <IIS2MDC_MAG_Disable>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <IIS2MDC_DeInit+0x1a>
  {
    return IIS2MDC_ERROR;
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b52:	e004      	b.n	8003b5e <IIS2MDC_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return IIS2MDC_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <IIS2MDC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_ReadID(IIS2MDC_Object_t *pObj, uint8_t *Id)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  if (iis2mdc_device_id_get(&(pObj->Ctx), Id) != IIS2MDC_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	331c      	adds	r3, #28
 8003b74:	6839      	ldr	r1, [r7, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb3d 	bl	80041f6 <iis2mdc_device_id_get>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <IIS2MDC_ReadID+0x22>
  {
    return IIS2MDC_ERROR;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	e000      	b.n	8003b8a <IIS2MDC_ReadID+0x24>
  }

  return IIS2MDC_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <IIS2MDC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to IIS2MDC magnetometer sensor capabilities
 * @retval Component status
 */
int32_t IIS2MDC_GetCapabilities(IIS2MDC_Object_t *pObj, IIS2MDC_Capabilities_t *Capabilities)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2232      	movs	r2, #50	; 0x32
 8003bc6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4a04      	ldr	r2, [pc, #16]	; (8003bec <IIS2MDC_GetCapabilities+0x58>)
 8003bdc:	619a      	str	r2, [r3, #24]
  return IIS2MDC_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	42c80000 	.word	0x42c80000

08003bf0 <IIS2MDC_MAG_Enable>:
 * @brief Enable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Enable(IIS2MDC_Object_t *pObj)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <IIS2MDC_MAG_Enable+0x16>
  {
    return IIS2MDC_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	e010      	b.n	8003c28 <IIS2MDC_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_CONTINUOUS_MODE) != IIS2MDC_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	331c      	adds	r3, #28
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 f9fd 	bl	800400c <iis2mdc_operating_mode_set>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <IIS2MDC_MAG_Enable+0x2e>
  {
    return IIS2MDC_ERROR;
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	e004      	b.n	8003c28 <IIS2MDC_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <IIS2MDC_MAG_Disable>:
 * @brief Disable the IIS2MDC magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_Disable(IIS2MDC_Object_t *pObj)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <IIS2MDC_MAG_Disable+0x16>
  {
    return IIS2MDC_OK;
 8003c42:	2300      	movs	r3, #0
 8003c44:	e010      	b.n	8003c68 <IIS2MDC_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (iis2mdc_operating_mode_set(&(pObj->Ctx), IIS2MDC_POWER_DOWN) != IIS2MDC_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	331c      	adds	r3, #28
 8003c4a:	2102      	movs	r1, #2
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f9dd 	bl	800400c <iis2mdc_operating_mode_set>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <IIS2MDC_MAG_Disable+0x2e>
  {
    return IIS2MDC_ERROR;
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	e004      	b.n	8003c68 <IIS2MDC_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return IIS2MDC_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <IIS2MDC_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetSensitivity(IIS2MDC_Object_t *pObj, float *Sensitivity)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *Sensitivity = IIS2MDC_MAG_SENSITIVITY_FS_50GAUSS;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003c80:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <IIS2MDC_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetOutputDataRate(IIS2MDC_Object_t *pObj, float *Odr)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  int32_t ret = IIS2MDC_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
  iis2mdc_odr_t odr_low_level;

  /* Get current output data rate. */
  if (iis2mdc_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS2MDC_OK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	331c      	adds	r3, #28
 8003ca2:	f107 020b 	add.w	r2, r7, #11
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 f9fb 	bl	80040a4 <iis2mdc_data_rate_get>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <IIS2MDC_MAG_GetOutputDataRate+0x2a>
  {
    return IIS2MDC_ERROR;
 8003cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb8:	e023      	b.n	8003d02 <IIS2MDC_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 8003cba:	7afb      	ldrb	r3, [r7, #11]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d81b      	bhi.n	8003cf8 <IIS2MDC_MAG_GetOutputDataRate+0x68>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <IIS2MDC_MAG_GetOutputDataRate+0x38>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003cd9 	.word	0x08003cd9
 8003ccc:	08003ce1 	.word	0x08003ce1
 8003cd0:	08003ce9 	.word	0x08003ce9
 8003cd4:	08003cf1 	.word	0x08003cf1
  {
    case IIS2MDC_ODR_10Hz:
      *Odr = 10.0f;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <IIS2MDC_MAG_GetOutputDataRate+0x7c>)
 8003cdc:	601a      	str	r2, [r3, #0]
      break;
 8003cde:	e00f      	b.n	8003d00 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_20Hz:
      *Odr = 20.0f;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	4a0b      	ldr	r2, [pc, #44]	; (8003d10 <IIS2MDC_MAG_GetOutputDataRate+0x80>)
 8003ce4:	601a      	str	r2, [r3, #0]
      break;
 8003ce6:	e00b      	b.n	8003d00 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_50Hz:
      *Odr = 50.0f;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <IIS2MDC_MAG_GetOutputDataRate+0x84>)
 8003cec:	601a      	str	r2, [r3, #0]
      break;
 8003cee:	e007      	b.n	8003d00 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    case IIS2MDC_ODR_100Hz:
      *Odr = 100.0f;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <IIS2MDC_MAG_GetOutputDataRate+0x88>)
 8003cf4:	601a      	str	r2, [r3, #0]
      break;
 8003cf6:	e003      	b.n	8003d00 <IIS2MDC_MAG_GetOutputDataRate+0x70>

    default:
      ret = IIS2MDC_ERROR;
 8003cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfc:	60fb      	str	r3, [r7, #12]
      break;
 8003cfe:	bf00      	nop
  }

  return ret;
 8003d00:	68fb      	ldr	r3, [r7, #12]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	41200000 	.word	0x41200000
 8003d10:	41a00000 	.word	0x41a00000
 8003d14:	42480000 	.word	0x42480000
 8003d18:	42c80000 	.word	0x42c80000

08003d1c <IIS2MDC_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetOutputDataRate(IIS2MDC_Object_t *pObj, float Odr)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	ed87 0a00 	vstr	s0, [r7]
  iis2mdc_odr_t new_odr;

  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
            : (Odr <= 20.000f) ? IIS2MDC_ODR_20Hz
 8003d28:	edd7 7a00 	vldr	s15, [r7]
 8003d2c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d38:	d801      	bhi.n	8003d3e <IIS2MDC_MAG_SetOutputDataRate+0x22>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e016      	b.n	8003d6c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003d3e:	edd7 7a00 	vldr	s15, [r7]
 8003d42:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4e:	d801      	bhi.n	8003d54 <IIS2MDC_MAG_SetOutputDataRate+0x38>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e00b      	b.n	8003d6c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003d54:	edd7 7a00 	vldr	s15, [r7]
 8003d58:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003d94 <IIS2MDC_MAG_SetOutputDataRate+0x78>
 8003d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d64:	d801      	bhi.n	8003d6a <IIS2MDC_MAG_SetOutputDataRate+0x4e>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e000      	b.n	8003d6c <IIS2MDC_MAG_SetOutputDataRate+0x50>
 8003d6a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? IIS2MDC_ODR_10Hz
 8003d6c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? IIS2MDC_ODR_50Hz
            :                    IIS2MDC_ODR_100Hz;

  if (iis2mdc_data_rate_set(&(pObj->Ctx), new_odr) != IIS2MDC_OK)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	331c      	adds	r3, #28
 8003d72:	7bfa      	ldrb	r2, [r7, #15]
 8003d74:	4611      	mov	r1, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f96e 	bl	8004058 <iis2mdc_data_rate_set>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <IIS2MDC_MAG_SetOutputDataRate+0x6c>
  {
    return IIS2MDC_ERROR;
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295
 8003d86:	e000      	b.n	8003d8a <IIS2MDC_MAG_SetOutputDataRate+0x6e>
  }

  return IIS2MDC_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	42480000 	.word	0x42480000

08003d98 <IIS2MDC_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetFullScale(IIS2MDC_Object_t *pObj, int32_t *FullScale)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  *FullScale = 50;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2232      	movs	r2, #50	; 0x32
 8003da6:	601a      	str	r2, [r3, #0]

  return IIS2MDC_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <IIS2MDC_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_SetFullScale(IIS2MDC_Object_t *pObj, int32_t FullScale)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(FullScale);
  return IIS2MDC_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <IIS2MDC_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxesRaw(IIS2MDC_Object_t *pObj, IIS2MDC_AxesRaw_t *Value)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	331c      	adds	r3, #28
 8003ddc:	f107 0208 	add.w	r2, r7, #8
 8003de0:	4611      	mov	r1, r2
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 f9bc 	bl	8004160 <iis2mdc_magnetic_raw_get>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <IIS2MDC_MAG_GetAxesRaw+0x26>
  {
    return IIS2MDC_ERROR;
 8003dee:	f04f 33ff 	mov.w	r3, #4294967295
 8003df2:	e00c      	b.n	8003e0e <IIS2MDC_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003df4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8003dfc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003e04:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	809a      	strh	r2, [r3, #4]

  return IIS2MDC_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <IIS2MDC_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_MAG_GetAxes(IIS2MDC_Object_t *pObj, IIS2MDC_Axes_t *MagneticField)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	6039      	str	r1, [r7, #0]
  iis2mdc_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (iis2mdc_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS2MDC_OK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	331c      	adds	r3, #28
 8003e24:	f107 0210 	add.w	r2, r7, #16
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f998 	bl	8004160 <iis2mdc_magnetic_raw_get>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <IIS2MDC_MAG_GetAxes+0x26>
  {
    return IIS2MDC_ERROR;
 8003e36:	f04f 33ff 	mov.w	r3, #4294967295
 8003e3a:	e036      	b.n	8003eaa <IIS2MDC_MAG_GetAxes+0x94>
  }

  /* Get IIS2MDC actual sensitivity. */
  (void)IIS2MDC_MAG_GetSensitivity(pObj, &sensitivity);
 8003e3c:	f107 030c 	add.w	r3, r7, #12
 8003e40:	4619      	mov	r1, r3
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff ff14 	bl	8003c70 <IIS2MDC_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003e48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e4c:	ee07 3a90 	vmov	s15, r3
 8003e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e60:	ee17 2a90 	vmov	r2, s15
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003e68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e6c:	ee07 3a90 	vmov	s15, r3
 8003e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e80:	ee17 2a90 	vmov	r2, s15
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003e88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e94:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ea0:	ee17 2a90 	vmov	r2, s15
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	609a      	str	r2, [r3, #8]

  return IIS2MDC_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <IIS2MDC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t IIS2MDC_Write_Reg(IIS2MDC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	70fb      	strb	r3, [r7, #3]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	70bb      	strb	r3, [r7, #2]
  if (iis2mdc_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS2MDC_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f103 001c 	add.w	r0, r3, #28
 8003ec8:	1cba      	adds	r2, r7, #2
 8003eca:	78f9      	ldrb	r1, [r7, #3]
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f000 f885 	bl	8003fdc <iis2mdc_write_reg>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <IIS2MDC_Write_Reg+0x2c>
  {
    return IIS2MDC_ERROR;
 8003ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8003edc:	e000      	b.n	8003ee0 <IIS2MDC_Write_Reg+0x2e>
  }

  return IIS2MDC_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	607a      	str	r2, [r7, #4]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	72fb      	strb	r3, [r7, #11]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10e      	bne.n	8003f26 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	695c      	ldr	r4, [r3, #20]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	7b1b      	ldrb	r3, [r3, #12]
 8003f10:	b298      	uxth	r0, r3
 8003f12:	7afb      	ldrb	r3, [r7, #11]
 8003f14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	b299      	uxth	r1, r3
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	47a0      	blx	r4
 8003f22:	4603      	mov	r3, r0
 8003f24:	e00d      	b.n	8003f42 <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	695c      	ldr	r4, [r3, #20]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	7b1b      	ldrb	r3, [r3, #12]
 8003f2e:	b298      	uxth	r0, r3
 8003f30:	7afb      	ldrb	r3, [r7, #11]
 8003f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	b299      	uxth	r1, r3
 8003f3a:	893b      	ldrh	r3, [r7, #8]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	47a0      	blx	r4
 8003f40:	4603      	mov	r3, r0
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd90      	pop	{r4, r7, pc}

08003f4a <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003f4a:	b590      	push	{r4, r7, lr}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	461a      	mov	r2, r3
 8003f56:	460b      	mov	r3, r1
 8003f58:	72fb      	strb	r3, [r7, #11]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	813b      	strh	r3, [r7, #8]
  IIS2MDC_Object_t *pObj = (IIS2MDC_Object_t *)Handle;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == IIS2MDC_I2C_BUS) /* I2C */
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10e      	bne.n	8003f88 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	691c      	ldr	r4, [r3, #16]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	7b1b      	ldrb	r3, [r3, #12]
 8003f72:	b298      	uxth	r0, r3
 8003f74:	7afb      	ldrb	r3, [r7, #11]
 8003f76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	b299      	uxth	r1, r3
 8003f7e:	893b      	ldrh	r3, [r7, #8]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	47a0      	blx	r4
 8003f84:	4603      	mov	r3, r0
 8003f86:	e00d      	b.n	8003fa4 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	691c      	ldr	r4, [r3, #16]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	7b1b      	ldrb	r3, [r3, #12]
 8003f90:	b298      	uxth	r0, r3
 8003f92:	7afb      	ldrb	r3, [r7, #11]
 8003f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	b299      	uxth	r1, r3
 8003f9c:	893b      	ldrh	r3, [r7, #8]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	47a0      	blx	r4
 8003fa2:	4603      	mov	r3, r0
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd90      	pop	{r4, r7, pc}

08003fac <iis2mdc_read_reg>:
  *
  */
int32_t iis2mdc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8003fac:	b590      	push	{r4, r7, lr}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	607a      	str	r2, [r7, #4]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	460b      	mov	r3, r1
 8003fba:	72fb      	strb	r3, [r7, #11]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	685c      	ldr	r4, [r3, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6898      	ldr	r0, [r3, #8]
 8003fc8:	893b      	ldrh	r3, [r7, #8]
 8003fca:	7af9      	ldrb	r1, [r7, #11]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	47a0      	blx	r4
 8003fd0:	6178      	str	r0, [r7, #20]
  return ret;
 8003fd2:	697b      	ldr	r3, [r7, #20]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd90      	pop	{r4, r7, pc}

08003fdc <iis2mdc_write_reg>:
  *
  */
int32_t iis2mdc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	460b      	mov	r3, r1
 8003fea:	72fb      	strb	r3, [r7, #11]
 8003fec:	4613      	mov	r3, r2
 8003fee:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681c      	ldr	r4, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6898      	ldr	r0, [r3, #8]
 8003ff8:	893b      	ldrh	r3, [r7, #8]
 8003ffa:	7af9      	ldrb	r1, [r7, #11]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	47a0      	blx	r4
 8004000:	6178      	str	r0, [r7, #20]
  return ret;
 8004002:	697b      	ldr	r3, [r7, #20]
}
 8004004:	4618      	mov	r0, r3
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd90      	pop	{r4, r7, pc}

0800400c <iis2mdc_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_operating_mode_set(stmdev_ctx_t *ctx,
                                   iis2mdc_md_t val)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8004018:	f107 0208 	add.w	r2, r7, #8
 800401c:	2301      	movs	r3, #1
 800401e:	2160      	movs	r1, #96	; 0x60
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ffc3 	bl	8003fac <iis2mdc_read_reg>
 8004026:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <iis2mdc_operating_mode_set+0x42>
    reg.md = (uint8_t)val;
 800402e:	78fb      	ldrb	r3, [r7, #3]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	b2da      	uxtb	r2, r3
 8004036:	7a3b      	ldrb	r3, [r7, #8]
 8004038:	f362 0301 	bfi	r3, r2, #0, #2
 800403c:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800403e:	f107 0208 	add.w	r2, r7, #8
 8004042:	2301      	movs	r3, #1
 8004044:	2160      	movs	r1, #96	; 0x60
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff ffc8 	bl	8003fdc <iis2mdc_write_reg>
 800404c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800404e:	68fb      	ldr	r3, [r7, #12]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <iis2mdc_data_rate_set>:
  * @param  val      change the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_set(stmdev_ctx_t *ctx, iis2mdc_odr_t val)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 8004064:	f107 0208 	add.w	r2, r7, #8
 8004068:	2301      	movs	r3, #1
 800406a:	2160      	movs	r1, #96	; 0x60
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ff9d 	bl	8003fac <iis2mdc_read_reg>
 8004072:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10f      	bne.n	800409a <iis2mdc_data_rate_set+0x42>
    reg.odr = (uint8_t)val;
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	b2da      	uxtb	r2, r3
 8004082:	7a3b      	ldrb	r3, [r7, #8]
 8004084:	f362 0383 	bfi	r3, r2, #2, #2
 8004088:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 800408a:	f107 0208 	add.w	r2, r7, #8
 800408e:	2301      	movs	r3, #1
 8004090:	2160      	movs	r1, #96	; 0x60
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff ffa2 	bl	8003fdc <iis2mdc_write_reg>
 8004098:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800409a:	68fb      	ldr	r3, [r7, #12]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <iis2mdc_data_rate_get>:
  * @param  val      Get the values of odr in reg CFG_REG_A
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_data_rate_get(stmdev_ctx_t *ctx, iis2mdc_odr_t *val)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  iis2mdc_cfg_reg_a_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_A, (uint8_t *) &reg, 1);
 80040ae:	f107 0208 	add.w	r2, r7, #8
 80040b2:	2301      	movs	r3, #1
 80040b4:	2160      	movs	r1, #96	; 0x60
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff ff78 	bl	8003fac <iis2mdc_read_reg>
 80040bc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr) {
 80040be:	7a3b      	ldrb	r3, [r7, #8]
 80040c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d81a      	bhi.n	8004100 <iis2mdc_data_rate_get+0x5c>
 80040ca:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <iis2mdc_data_rate_get+0x2c>)
 80040cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d0:	080040e1 	.word	0x080040e1
 80040d4:	080040e9 	.word	0x080040e9
 80040d8:	080040f1 	.word	0x080040f1
 80040dc:	080040f9 	.word	0x080040f9
    case IIS2MDC_ODR_10Hz:
      *val = IIS2MDC_ODR_10Hz;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
      break;
 80040e6:	e00f      	b.n	8004108 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_20Hz:
      *val = IIS2MDC_ODR_20Hz;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
      break;
 80040ee:	e00b      	b.n	8004108 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_50Hz:
      *val = IIS2MDC_ODR_50Hz;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]
      break;
 80040f6:	e007      	b.n	8004108 <iis2mdc_data_rate_get+0x64>

    case IIS2MDC_ODR_100Hz:
      *val = IIS2MDC_ODR_100Hz;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2203      	movs	r2, #3
 80040fc:	701a      	strb	r2, [r3, #0]
      break;
 80040fe:	e003      	b.n	8004108 <iis2mdc_data_rate_get+0x64>

    default:
      *val = IIS2MDC_ODR_10Hz;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2200      	movs	r2, #0
 8004104:	701a      	strb	r2, [r3, #0]
      break;
 8004106:	bf00      	nop
  }

  return ret;
 8004108:	68fb      	ldr	r3, [r7, #12]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop

08004114 <iis2mdc_block_data_update_set>:
  * @param  val      change the values of bdu in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	460b      	mov	r3, r1
 800411e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8004120:	f107 0208 	add.w	r2, r7, #8
 8004124:	2301      	movs	r3, #1
 8004126:	2162      	movs	r1, #98	; 0x62
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff ff3f 	bl	8003fac <iis2mdc_read_reg>
 800412e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <iis2mdc_block_data_update_set+0x42>
    reg.bdu = val;
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	b2da      	uxtb	r2, r3
 800413e:	7a3b      	ldrb	r3, [r7, #8]
 8004140:	f362 1304 	bfi	r3, r2, #4, #1
 8004144:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8004146:	f107 0208 	add.w	r2, r7, #8
 800414a:	2301      	movs	r3, #1
 800414c:	2162      	movs	r1, #98	; 0x62
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7ff ff44 	bl	8003fdc <iis2mdc_write_reg>
 8004154:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004156:	68fb      	ldr	r3, [r7, #12]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <iis2mdc_magnetic_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_OUTX_L_REG, buff, 6);
 800416a:	f107 020c 	add.w	r2, r7, #12
 800416e:	2306      	movs	r3, #6
 8004170:	2168      	movs	r1, #104	; 0x68
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff1a 	bl	8003fac <iis2mdc_read_reg>
 8004178:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800417a:	7b7b      	ldrb	r3, [r7, #13]
 800417c:	b21a      	sxth	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) +  (int16_t)buff[0];
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004188:	b29b      	uxth	r3, r3
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	b29a      	uxth	r2, r3
 800418e:	7b3b      	ldrb	r3, [r7, #12]
 8004190:	b29b      	uxth	r3, r3
 8004192:	4413      	add	r3, r2
 8004194:	b29b      	uxth	r3, r3
 8004196:	b21a      	sxth	r2, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800419c:	7bfa      	ldrb	r2, [r7, #15]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	3302      	adds	r3, #2
 80041a2:	b212      	sxth	r2, r2
 80041a4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) +  (int16_t)buff[2];
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	3302      	adds	r3, #2
 80041aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	7bbb      	ldrb	r3, [r7, #14]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	4413      	add	r3, r2
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	3302      	adds	r3, #2
 80041c0:	b212      	sxth	r2, r2
 80041c2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80041c4:	7c7a      	ldrb	r2, [r7, #17]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	3304      	adds	r3, #4
 80041ca:	b212      	sxth	r2, r2
 80041cc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) +  (int16_t)buff[4];
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	3304      	adds	r3, #4
 80041d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	b29a      	uxth	r2, r3
 80041dc:	7c3b      	ldrb	r3, [r7, #16]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	4413      	add	r3, r2
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	3304      	adds	r3, #4
 80041e8:	b212      	sxth	r2, r2
 80041ea:	801a      	strh	r2, [r3, #0]
  return ret;
 80041ec:	697b      	ldr	r3, [r7, #20]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <iis2mdc_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
 80041fe:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret =  iis2mdc_read_reg(ctx, IIS2MDC_WHO_AM_I, buff, 1);
 8004200:	2301      	movs	r3, #1
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	214f      	movs	r1, #79	; 0x4f
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fed0 	bl	8003fac <iis2mdc_read_reg>
 800420c:	60f8      	str	r0, [r7, #12]
  return ret;
 800420e:	68fb      	ldr	r3, [r7, #12]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <iis2mdc_self_test_set>:
  * @param  val      change the values of self_test in reg CFG_REG_C
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8004224:	f107 0208 	add.w	r2, r7, #8
 8004228:	2301      	movs	r3, #1
 800422a:	2162      	movs	r1, #98	; 0x62
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff febd 	bl	8003fac <iis2mdc_read_reg>
 8004232:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10f      	bne.n	800425a <iis2mdc_self_test_set+0x42>
    reg.self_test = val;
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	b2da      	uxtb	r2, r3
 8004242:	7a3b      	ldrb	r3, [r7, #8]
 8004244:	f362 0341 	bfi	r3, r2, #1, #1
 8004248:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 800424a:	f107 0208 	add.w	r2, r7, #8
 800424e:	2301      	movs	r3, #1
 8004250:	2162      	movs	r1, #98	; 0x62
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7ff fec2 	bl	8003fdc <iis2mdc_write_reg>
 8004258:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800425a:	68fb      	ldr	r3, [r7, #12]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <iis2mdc_i2c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t iis2mdc_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis2mdc_i2c_dis_t val)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	70fb      	strb	r3, [r7, #3]
  iis2mdc_cfg_reg_c_t reg;
  int32_t ret;
  ret = iis2mdc_read_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8004270:	f107 0208 	add.w	r2, r7, #8
 8004274:	2301      	movs	r3, #1
 8004276:	2162      	movs	r1, #98	; 0x62
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff fe97 	bl	8003fac <iis2mdc_read_reg>
 800427e:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10f      	bne.n	80042a6 <iis2mdc_i2c_interface_set+0x42>
    reg.i2c_dis = (uint8_t)val;
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	b2da      	uxtb	r2, r3
 800428e:	7a3b      	ldrb	r3, [r7, #8]
 8004290:	f362 1345 	bfi	r3, r2, #5, #1
 8004294:	723b      	strb	r3, [r7, #8]
    ret = iis2mdc_write_reg(ctx, IIS2MDC_CFG_REG_C, (uint8_t *) &reg, 1);
 8004296:	f107 0208 	add.w	r2, r7, #8
 800429a:	2301      	movs	r3, #1
 800429c:	2162      	movs	r1, #98	; 0x62
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fe9c 	bl	8003fdc <iis2mdc_write_reg>
 80042a4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <ISM330DHCX_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_RegisterBusIO(ISM330DHCX_Object_t *pObj, ISM330DHCX_IO_t *pIO)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d103      	bne.n	80042cc <ISM330DHCX_RegisterBusIO+0x1c>
  {
    ret = ISM330DHCX_ERROR;
 80042c4:	f04f 33ff 	mov.w	r3, #4294967295
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	e04d      	b.n	8004368 <ISM330DHCX_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	7b1a      	ldrb	r2, [r3, #12]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a1b      	ldr	r2, [pc, #108]	; (8004374 <ISM330DHCX_RegisterBusIO+0xc4>)
 8004308:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <ISM330DHCX_RegisterBusIO+0xc8>)
 800430e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <ISM330DHCX_RegisterBusIO+0x76>
    {
      ret = ISM330DHCX_ERROR;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e020      	b.n	8004368 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != ISM330DHCX_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4798      	blx	r3
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <ISM330DHCX_RegisterBusIO+0x8a>
    {
      ret = ISM330DHCX_ERROR;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e016      	b.n	8004368 <ISM330DHCX_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == ISM330DHCX_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d112      	bne.n	8004368 <ISM330DHCX_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <ISM330DHCX_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800434c:	230c      	movs	r3, #12
 800434e:	72fb      	strb	r3, [r7, #11]

          if (ISM330DHCX_Write_Reg(pObj, ISM330DHCX_CTRL3_C, data) != ISM330DHCX_OK)
 8004350:	7afb      	ldrb	r3, [r7, #11]
 8004352:	461a      	mov	r2, r3
 8004354:	2112      	movs	r1, #18
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fd55 	bl	8004e06 <ISM330DHCX_Write_Reg>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <ISM330DHCX_RegisterBusIO+0xb8>
          {
            ret = ISM330DHCX_ERROR;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	08005275 	.word	0x08005275
 8004378:	080052ab 	.word	0x080052ab

0800437c <ISM330DHCX_Init>:
 * @brief  Initialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Init(ISM330DHCX_Object_t *pObj)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (ism330dhcx_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	331c      	adds	r3, #28
 8004388:	2101      	movs	r1, #1
 800438a:	4618      	mov	r0, r3
 800438c:	f001 fd71 	bl	8005e72 <ism330dhcx_auto_increment_set>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <ISM330DHCX_Init+0x20>
  {
    return ISM330DHCX_ERROR;
 8004396:	f04f 33ff 	mov.w	r3, #4294967295
 800439a:	e06c      	b.n	8004476 <ISM330DHCX_Init+0xfa>
  }

    /* SW reset */
  if ( ism330dhcx_reset_set( &(pObj->Ctx), PROPERTY_ENABLE)!= ISM330DHCX_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	331c      	adds	r3, #28
 80043a0:	2101      	movs	r1, #1
 80043a2:	4618      	mov	r0, r3
 80043a4:	f001 fd3f 	bl	8005e26 <ism330dhcx_reset_set>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <ISM330DHCX_Init+0x38>
  {
    return ISM330DHCX_ERROR;
 80043ae:	f04f 33ff 	mov.w	r3, #4294967295
 80043b2:	e060      	b.n	8004476 <ISM330DHCX_Init+0xfa>
  }

  /* Enable register address automatically incremented during a multiple byte
     access with a serial interface. */
  if ( ism330dhcx_auto_increment_set( &(pObj->Ctx), PROPERTY_ENABLE ) != ISM330DHCX_OK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	331c      	adds	r3, #28
 80043b8:	2101      	movs	r1, #1
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 fd59 	bl	8005e72 <ism330dhcx_auto_increment_set>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <ISM330DHCX_Init+0x50>
  {
    return ISM330DHCX_ERROR;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	e054      	b.n	8004476 <ISM330DHCX_Init+0xfa>
  }

  /* Enable BDU */
  if (ism330dhcx_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != ISM330DHCX_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	331c      	adds	r3, #28
 80043d0:	2101      	movs	r1, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 fc34 	bl	8005c40 <ism330dhcx_block_data_update_set>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d002      	beq.n	80043e4 <ISM330DHCX_Init+0x68>
  {
    return ISM330DHCX_ERROR;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	e048      	b.n	8004476 <ISM330DHCX_Init+0xfa>
  }

  /* FIFO mode selection */
  if (ism330dhcx_fifo_mode_set(&(pObj->Ctx), ISM330DHCX_BYPASS_MODE) != ISM330DHCX_OK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	331c      	adds	r3, #28
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 fd67 	bl	8005ebe <ism330dhcx_fifo_mode_set>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <ISM330DHCX_Init+0x80>
  {
    return ISM330DHCX_ERROR;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e03c      	b.n	8004476 <ISM330DHCX_Init+0xfa>
  }

  /* Select default output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_104Hz;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2204      	movs	r2, #4
 8004400:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	331c      	adds	r3, #28
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fff6 	bl	80053fc <ism330dhcx_xl_data_rate_set>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <ISM330DHCX_Init+0xa0>
  {
    return ISM330DHCX_ERROR;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	e02c      	b.n	8004476 <ISM330DHCX_Init+0xfa>
  }

  /* Full scale selection. */
  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), ISM330DHCX_2g) != ISM330DHCX_OK)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	331c      	adds	r3, #28
 8004420:	2100      	movs	r1, #0
 8004422:	4618      	mov	r0, r3
 8004424:	f000 ff8c 	bl	8005340 <ism330dhcx_xl_full_scale_set>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <ISM330DHCX_Init+0xb8>
  {
    return ISM330DHCX_ERROR;
 800442e:	f04f 33ff 	mov.w	r3, #4294967295
 8004432:	e020      	b.n	8004476 <ISM330DHCX_Init+0xfa>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = ISM330DHCX_GY_ODR_104Hz;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2204      	movs	r2, #4
 8004438:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	331c      	adds	r3, #28
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f001 fa2a 	bl	800589c <ism330dhcx_gy_data_rate_set>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <ISM330DHCX_Init+0xd8>
  {
    return ISM330DHCX_ERROR;
 800444e:	f04f 33ff 	mov.w	r3, #4294967295
 8004452:	e010      	b.n	8004476 <ISM330DHCX_Init+0xfa>
  }

  /* Full scale selection. */
  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), ISM330DHCX_2000dps) != ISM330DHCX_OK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	331c      	adds	r3, #28
 8004458:	210c      	movs	r1, #12
 800445a:	4618      	mov	r0, r3
 800445c:	f001 f9a6 	bl	80057ac <ism330dhcx_gy_full_scale_set>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <ISM330DHCX_Init+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	e004      	b.n	8004476 <ISM330DHCX_Init+0xfa>
  }

  pObj->is_initialized = 1;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <ISM330DHCX_DeInit>:
 * @brief  Deinitialize the ISM330DHCX sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_DeInit(ISM330DHCX_Object_t *pObj)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (ISM330DHCX_ACC_Disable(pObj) != ISM330DHCX_OK)
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f888 	bl	800459c <ISM330DHCX_ACC_Disable>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <ISM330DHCX_DeInit+0x1a>
  {
    return ISM330DHCX_ERROR;
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	e015      	b.n	80044c4 <ISM330DHCX_DeInit+0x46>
  }

  if (ISM330DHCX_GYRO_Disable(pObj) != ISM330DHCX_OK)
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fa92 	bl	80049c2 <ISM330DHCX_GYRO_Disable>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d002      	beq.n	80044aa <ISM330DHCX_DeInit+0x2c>
  {
    return ISM330DHCX_ERROR;
 80044a4:	f04f 33ff 	mov.w	r3, #4294967295
 80044a8:	e00c      	b.n	80044c4 <ISM330DHCX_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = ISM330DHCX_XL_ODR_OFF;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = ISM330DHCX_GY_ODR_OFF;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return ISM330DHCX_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <ISM330DHCX_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ReadID(ISM330DHCX_Object_t *pObj, uint8_t *Id)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  if (ism330dhcx_device_id_get(&(pObj->Ctx), Id) != ISM330DHCX_OK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	331c      	adds	r3, #28
 80044da:	6839      	ldr	r1, [r7, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f001 fc91 	bl	8005e04 <ism330dhcx_device_id_get>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <ISM330DHCX_ReadID+0x22>
  {
    return ISM330DHCX_ERROR;
 80044e8:	f04f 33ff 	mov.w	r3, #4294967295
 80044ec:	e000      	b.n	80044f0 <ISM330DHCX_ReadID+0x24>
  }

  return ISM330DHCX_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <ISM330DHCX_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to ISM330DHCX sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GetCapabilities(ISM330DHCX_Object_t *pObj, ISM330DHCX_Capabilities_t *Capabilities)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2201      	movs	r2, #1
 800450c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2200      	movs	r2, #0
 8004512:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004520:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2210      	movs	r2, #16
 8004526:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2200      	movs	r2, #0
 800452c:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6667.0f;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	4a07      	ldr	r2, [pc, #28]	; (8004550 <ISM330DHCX_GetCapabilities+0x58>)
 8004532:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6667.0f;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	4a06      	ldr	r2, [pc, #24]	; (8004550 <ISM330DHCX_GetCapabilities+0x58>)
 8004538:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	619a      	str	r2, [r3, #24]
  return ISM330DHCX_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	45d05800 	.word	0x45d05800

08004554 <ISM330DHCX_ACC_Enable>:
 * @brief  Enable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Enable(ISM330DHCX_Object_t *pObj)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <ISM330DHCX_ACC_Enable+0x16>
  {
    return ISM330DHCX_OK;
 8004566:	2300      	movs	r3, #0
 8004568:	e014      	b.n	8004594 <ISM330DHCX_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != ISM330DHCX_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f103 021c 	add.w	r2, r3, #28
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 ff3f 	bl	80053fc <ism330dhcx_xl_data_rate_set>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d002      	beq.n	800458a <ISM330DHCX_ACC_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 8004584:	f04f 33ff 	mov.w	r3, #4294967295
 8004588:	e004      	b.n	8004594 <ISM330DHCX_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <ISM330DHCX_ACC_Disable>:
 * @brief  Disable the ISM330DHCX accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_Disable(ISM330DHCX_Object_t *pObj)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <ISM330DHCX_ACC_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e01f      	b.n	80045f2 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != ISM330DHCX_OK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f103 021c 	add.w	r2, r3, #28
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	332b      	adds	r3, #43	; 0x2b
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f001 f88c 	bl	80056dc <ism330dhcx_xl_data_rate_get>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d002      	beq.n	80045d0 <ISM330DHCX_ACC_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80045ca:	f04f 33ff 	mov.w	r3, #4294967295
 80045ce:	e010      	b.n	80045f2 <ISM330DHCX_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), ISM330DHCX_XL_ODR_OFF) != ISM330DHCX_OK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	331c      	adds	r3, #28
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 ff10 	bl	80053fc <ism330dhcx_xl_data_rate_set>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <ISM330DHCX_ACC_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 80045e2:	f04f 33ff 	mov.w	r3, #4294967295
 80045e6:	e004      	b.n	80045f2 <ISM330DHCX_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return ISM330DHCX_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <ISM330DHCX_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	331c      	adds	r3, #28
 800460e:	f107 020b 	add.w	r2, r7, #11
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f000 feb9 	bl	800538c <ism330dhcx_xl_full_scale_get>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <ISM330DHCX_ACC_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004620:	f04f 33ff 	mov.w	r3, #4294967295
 8004624:	e023      	b.n	800466e <ISM330DHCX_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8004626:	7afb      	ldrb	r3, [r7, #11]
 8004628:	2b03      	cmp	r3, #3
 800462a:	d81b      	bhi.n	8004664 <ISM330DHCX_ACC_GetSensitivity+0x68>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <ISM330DHCX_ACC_GetSensitivity+0x38>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004645 	.word	0x08004645
 8004638:	0800465d 	.word	0x0800465d
 800463c:	0800464d 	.word	0x0800464d
 8004640:	08004655 	.word	0x08004655
  {
    case ISM330DHCX_2g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_2G;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	4a0c      	ldr	r2, [pc, #48]	; (8004678 <ISM330DHCX_ACC_GetSensitivity+0x7c>)
 8004648:	601a      	str	r2, [r3, #0]
      break;
 800464a:	e00f      	b.n	800466c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_4g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_4G;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4a0b      	ldr	r2, [pc, #44]	; (800467c <ISM330DHCX_ACC_GetSensitivity+0x80>)
 8004650:	601a      	str	r2, [r3, #0]
      break;
 8004652:	e00b      	b.n	800466c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_8g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_8G;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4a0a      	ldr	r2, [pc, #40]	; (8004680 <ISM330DHCX_ACC_GetSensitivity+0x84>)
 8004658:	601a      	str	r2, [r3, #0]
      break;
 800465a:	e007      	b.n	800466c <ISM330DHCX_ACC_GetSensitivity+0x70>

    case ISM330DHCX_16g:
      *Sensitivity = ISM330DHCX_ACC_SENSITIVITY_FS_16G;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <ISM330DHCX_ACC_GetSensitivity+0x88>)
 8004660:	601a      	str	r2, [r3, #0]
      break;
 8004662:	e003      	b.n	800466c <ISM330DHCX_ACC_GetSensitivity+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8004664:	f04f 33ff 	mov.w	r3, #4294967295
 8004668:	60fb      	str	r3, [r7, #12]
      break;
 800466a:	bf00      	nop
  }

  return ret;
 800466c:	68fb      	ldr	r3, [r7, #12]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	3d79db23 	.word	0x3d79db23
 800467c:	3df9db23 	.word	0x3df9db23
 8004680:	3e79db23 	.word	0x3e79db23
 8004684:	3ef9db23 	.word	0x3ef9db23

08004688 <ISM330DHCX_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	331c      	adds	r3, #28
 800469a:	f107 020b 	add.w	r2, r7, #11
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 f81b 	bl	80056dc <ism330dhcx_xl_data_rate_get>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <ISM330DHCX_ACC_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 80046ac:	f04f 33ff 	mov.w	r3, #4294967295
 80046b0:	e04e      	b.n	8004750 <ISM330DHCX_ACC_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80046b2:	7afb      	ldrb	r3, [r7, #11]
 80046b4:	2b0a      	cmp	r3, #10
 80046b6:	d846      	bhi.n	8004746 <ISM330DHCX_ACC_GetOutputDataRate+0xbe>
 80046b8:	a201      	add	r2, pc, #4	; (adr r2, 80046c0 <ISM330DHCX_ACC_GetOutputDataRate+0x38>)
 80046ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046be:	bf00      	nop
 80046c0:	080046ed 	.word	0x080046ed
 80046c4:	080046f7 	.word	0x080046f7
 80046c8:	080046ff 	.word	0x080046ff
 80046cc:	08004707 	.word	0x08004707
 80046d0:	0800470f 	.word	0x0800470f
 80046d4:	08004717 	.word	0x08004717
 80046d8:	0800471f 	.word	0x0800471f
 80046dc:	08004727 	.word	0x08004727
 80046e0:	0800472f 	.word	0x0800472f
 80046e4:	08004737 	.word	0x08004737
 80046e8:	0800473f 	.word	0x0800473f
  {
    case ISM330DHCX_XL_ODR_OFF:
      *Odr = 0.0f;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
      break;
 80046f4:	e02b      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	4a17      	ldr	r2, [pc, #92]	; (8004758 <ISM330DHCX_ACC_GetOutputDataRate+0xd0>)
 80046fa:	601a      	str	r2, [r3, #0]
      break;
 80046fc:	e027      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_26Hz:
      *Odr = 26.0f;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	4a16      	ldr	r2, [pc, #88]	; (800475c <ISM330DHCX_ACC_GetOutputDataRate+0xd4>)
 8004702:	601a      	str	r2, [r3, #0]
      break;
 8004704:	e023      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_52Hz:
      *Odr = 52.0f;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	4a15      	ldr	r2, [pc, #84]	; (8004760 <ISM330DHCX_ACC_GetOutputDataRate+0xd8>)
 800470a:	601a      	str	r2, [r3, #0]
      break;
 800470c:	e01f      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_104Hz:
      *Odr = 104.0f;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <ISM330DHCX_ACC_GetOutputDataRate+0xdc>)
 8004712:	601a      	str	r2, [r3, #0]
      break;
 8004714:	e01b      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_208Hz:
      *Odr = 208.0f;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <ISM330DHCX_ACC_GetOutputDataRate+0xe0>)
 800471a:	601a      	str	r2, [r3, #0]
      break;
 800471c:	e017      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_417Hz:
      *Odr = 417.0f;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	4a12      	ldr	r2, [pc, #72]	; (800476c <ISM330DHCX_ACC_GetOutputDataRate+0xe4>)
 8004722:	601a      	str	r2, [r3, #0]
      break;
 8004724:	e013      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_833Hz:
      *Odr = 833.0f;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	4a11      	ldr	r2, [pc, #68]	; (8004770 <ISM330DHCX_ACC_GetOutputDataRate+0xe8>)
 800472a:	601a      	str	r2, [r3, #0]
      break;
 800472c:	e00f      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	4a10      	ldr	r2, [pc, #64]	; (8004774 <ISM330DHCX_ACC_GetOutputDataRate+0xec>)
 8004732:	601a      	str	r2, [r3, #0]
      break;
 8004734:	e00b      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <ISM330DHCX_ACC_GetOutputDataRate+0xf0>)
 800473a:	601a      	str	r2, [r3, #0]
      break;
 800473c:	e007      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    case ISM330DHCX_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	4a0e      	ldr	r2, [pc, #56]	; (800477c <ISM330DHCX_ACC_GetOutputDataRate+0xf4>)
 8004742:	601a      	str	r2, [r3, #0]
      break;
 8004744:	e003      	b.n	800474e <ISM330DHCX_ACC_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
 800474a:	60fb      	str	r3, [r7, #12]
      break;
 800474c:	bf00      	nop
  }

  return ret;
 800474e:	68fb      	ldr	r3, [r7, #12]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	41480000 	.word	0x41480000
 800475c:	41d00000 	.word	0x41d00000
 8004760:	42500000 	.word	0x42500000
 8004764:	42d00000 	.word	0x42d00000
 8004768:	43500000 	.word	0x43500000
 800476c:	43d08000 	.word	0x43d08000
 8004770:	44504000 	.word	0x44504000
 8004774:	44d06000 	.word	0x44d06000
 8004778:	45505000 	.word	0x45505000
 800477c:	45d05800 	.word	0x45d05800

08004780 <ISM330DHCX_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004792:	2b01      	cmp	r3, #1
 8004794:	d106      	bne.n	80047a4 <ISM330DHCX_ACC_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004796:	ed97 0a00 	vldr	s0, [r7]
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fb4e 	bl	8004e3c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>
 80047a0:	4603      	mov	r3, r0
 80047a2:	e005      	b.n	80047b0 <ISM330DHCX_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80047a4:	ed97 0a00 	vldr	s0, [r7]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fbd3 	bl	8004f54 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>
 80047ae:	4603      	mov	r3, r0
  }
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <ISM330DHCX_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t *FullScale)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	331c      	adds	r3, #28
 80047ca:	f107 020b 	add.w	r2, r7, #11
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 fddb 	bl	800538c <ism330dhcx_xl_full_scale_get>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <ISM330DHCX_ACC_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 80047dc:	f04f 33ff 	mov.w	r3, #4294967295
 80047e0:	e023      	b.n	800482a <ISM330DHCX_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80047e2:	7afb      	ldrb	r3, [r7, #11]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d81b      	bhi.n	8004820 <ISM330DHCX_ACC_GetFullScale+0x68>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <ISM330DHCX_ACC_GetFullScale+0x38>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004819 	.word	0x08004819
 80047f8:	08004809 	.word	0x08004809
 80047fc:	08004811 	.word	0x08004811
  {
    case ISM330DHCX_2g:
      *FullScale =  2;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2202      	movs	r2, #2
 8004804:	601a      	str	r2, [r3, #0]
      break;
 8004806:	e00f      	b.n	8004828 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_4g:
      *FullScale =  4;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2204      	movs	r2, #4
 800480c:	601a      	str	r2, [r3, #0]
      break;
 800480e:	e00b      	b.n	8004828 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_8g:
      *FullScale =  8;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2208      	movs	r2, #8
 8004814:	601a      	str	r2, [r3, #0]
      break;
 8004816:	e007      	b.n	8004828 <ISM330DHCX_ACC_GetFullScale+0x70>

    case ISM330DHCX_16g:
      *FullScale = 16;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2210      	movs	r2, #16
 800481c:	601a      	str	r2, [r3, #0]
      break;
 800481e:	e003      	b.n	8004828 <ISM330DHCX_ACC_GetFullScale+0x70>

    default:
      ret = ISM330DHCX_ERROR;
 8004820:	f04f 33ff 	mov.w	r3, #4294967295
 8004824:	60fb      	str	r3, [r7, #12]
      break;
 8004826:	bf00      	nop
  }

  return ret;
 8004828:	68fb      	ldr	r3, [r7, #12]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop

08004834 <ISM330DHCX_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
           : (FullScale <= 4) ? ISM330DHCX_4g
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b02      	cmp	r3, #2
 8004842:	dd0b      	ble.n	800485c <ISM330DHCX_ACC_SetFullScale+0x28>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b04      	cmp	r3, #4
 8004848:	dd06      	ble.n	8004858 <ISM330DHCX_ACC_SetFullScale+0x24>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b08      	cmp	r3, #8
 800484e:	dc01      	bgt.n	8004854 <ISM330DHCX_ACC_SetFullScale+0x20>
 8004850:	2303      	movs	r3, #3
 8004852:	e004      	b.n	800485e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004854:	2301      	movs	r3, #1
 8004856:	e002      	b.n	800485e <ISM330DHCX_ACC_SetFullScale+0x2a>
 8004858:	2302      	movs	r3, #2
 800485a:	e000      	b.n	800485e <ISM330DHCX_ACC_SetFullScale+0x2a>
 800485c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? ISM330DHCX_2g
 800485e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? ISM330DHCX_8g
           :                    ISM330DHCX_16g;

  if (ism330dhcx_xl_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	331c      	adds	r3, #28
 8004864:	7bfa      	ldrb	r2, [r7, #15]
 8004866:	4611      	mov	r1, r2
 8004868:	4618      	mov	r0, r3
 800486a:	f000 fd69 	bl	8005340 <ism330dhcx_xl_full_scale_set>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <ISM330DHCX_ACC_SetFullScale+0x46>
  {
    return ISM330DHCX_ERROR;
 8004874:	f04f 33ff 	mov.w	r3, #4294967295
 8004878:	e000      	b.n	800487c <ISM330DHCX_ACC_SetFullScale+0x48>
  }

  return ISM330DHCX_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <ISM330DHCX_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	331c      	adds	r3, #28
 8004892:	f107 0208 	add.w	r2, r7, #8
 8004896:	4611      	mov	r1, r2
 8004898:	4618      	mov	r0, r3
 800489a:	f001 fa42 	bl	8005d22 <ism330dhcx_acceleration_raw_get>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <ISM330DHCX_ACC_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	e00c      	b.n	80048c4 <ISM330DHCX_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80048aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80048b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80048ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <ISM330DHCX_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_ACC_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *Acceleration)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (ism330dhcx_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	331c      	adds	r3, #28
 80048e0:	f107 0210 	add.w	r2, r7, #16
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 fa1b 	bl	8005d22 <ism330dhcx_acceleration_raw_get>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <ISM330DHCX_ACC_GetAxes+0x2c>
  {
    return ISM330DHCX_ERROR;
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295
 80048f6:	e03c      	b.n	8004972 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_ACC_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	4619      	mov	r1, r3
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff fe7c 	bl	80045fc <ISM330DHCX_ACC_GetSensitivity>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d002      	beq.n	8004910 <ISM330DHCX_ACC_GetAxes+0x44>
  {
    return ISM330DHCX_ERROR;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295
 800490e:	e030      	b.n	8004972 <ISM330DHCX_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004910:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004914:	ee07 3a90 	vmov	s15, r3
 8004918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800491c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004928:	ee17 2a90 	vmov	r2, s15
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004930:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004934:	ee07 3a90 	vmov	s15, r3
 8004938:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800493c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004948:	ee17 2a90 	vmov	r2, s15
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004950:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800495c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004964:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004968:	ee17 2a90 	vmov	r2, s15
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <ISM330DHCX_GYRO_Enable>:
 * @brief  Enable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Enable(ISM330DHCX_Object_t *pObj)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <ISM330DHCX_GYRO_Enable+0x16>
  {
    return ISM330DHCX_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e014      	b.n	80049ba <ISM330DHCX_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != ISM330DHCX_OK)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f103 021c 	add.w	r2, r3, #28
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f000 ff7c 	bl	800589c <ism330dhcx_gy_data_rate_set>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <ISM330DHCX_GYRO_Enable+0x36>
  {
    return ISM330DHCX_ERROR;
 80049aa:	f04f 33ff 	mov.w	r3, #4294967295
 80049ae:	e004      	b.n	80049ba <ISM330DHCX_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <ISM330DHCX_GYRO_Disable>:
 * @brief  Disable the ISM330DHCX gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_Disable(ISM330DHCX_Object_t *pObj)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b082      	sub	sp, #8
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <ISM330DHCX_GYRO_Disable+0x16>
  {
    return ISM330DHCX_OK;
 80049d4:	2300      	movs	r3, #0
 80049d6:	e01f      	b.n	8004a18 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != ISM330DHCX_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f103 021c 	add.w	r2, r3, #28
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	332c      	adds	r3, #44	; 0x2c
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f001 f8c9 	bl	8005b7c <ism330dhcx_gy_data_rate_get>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <ISM330DHCX_GYRO_Disable+0x34>
  {
    return ISM330DHCX_ERROR;
 80049f0:	f04f 33ff 	mov.w	r3, #4294967295
 80049f4:	e010      	b.n	8004a18 <ISM330DHCX_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), ISM330DHCX_GY_ODR_OFF) != ISM330DHCX_OK)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	331c      	adds	r3, #28
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 ff4d 	bl	800589c <ism330dhcx_gy_data_rate_set>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <ISM330DHCX_GYRO_Disable+0x4c>
  {
    return ISM330DHCX_ERROR;
 8004a08:	f04f 33ff 	mov.w	r3, #4294967295
 8004a0c:	e004      	b.n	8004a18 <ISM330DHCX_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return ISM330DHCX_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <ISM330DHCX_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetSensitivity(ISM330DHCX_Object_t *pObj, float *Sensitivity)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &full_scale) != ISM330DHCX_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	331c      	adds	r3, #28
 8004a32:	f107 020b 	add.w	r2, r7, #11
 8004a36:	4611      	mov	r1, r2
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 fedd 	bl	80057f8 <ism330dhcx_gy_full_scale_get>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <ISM330DHCX_GYRO_GetSensitivity+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004a44:	f04f 33ff 	mov.w	r3, #4294967295
 8004a48:	e039      	b.n	8004abe <ISM330DHCX_GYRO_GetSensitivity+0x9e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004a4a:	7afb      	ldrb	r3, [r7, #11]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	d831      	bhi.n	8004ab4 <ISM330DHCX_GYRO_GetSensitivity+0x94>
 8004a50:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <ISM330DHCX_GYRO_GetSensitivity+0x38>)
 8004a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a56:	bf00      	nop
 8004a58:	08004a95 	.word	0x08004a95
 8004a5c:	08004ab5 	.word	0x08004ab5
 8004a60:	08004a8d 	.word	0x08004a8d
 8004a64:	08004ab5 	.word	0x08004ab5
 8004a68:	08004a9d 	.word	0x08004a9d
 8004a6c:	08004ab5 	.word	0x08004ab5
 8004a70:	08004ab5 	.word	0x08004ab5
 8004a74:	08004ab5 	.word	0x08004ab5
 8004a78:	08004aa5 	.word	0x08004aa5
 8004a7c:	08004ab5 	.word	0x08004ab5
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004ab5 	.word	0x08004ab5
 8004a88:	08004aad 	.word	0x08004aad
  {
    case ISM330DHCX_125dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_125DPS;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	4a0e      	ldr	r2, [pc, #56]	; (8004ac8 <ISM330DHCX_GYRO_GetSensitivity+0xa8>)
 8004a90:	601a      	str	r2, [r3, #0]
      break;
 8004a92:	e013      	b.n	8004abc <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_250dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_250DPS;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <ISM330DHCX_GYRO_GetSensitivity+0xac>)
 8004a98:	601a      	str	r2, [r3, #0]
      break;
 8004a9a:	e00f      	b.n	8004abc <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_500dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_500DPS;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ad0 <ISM330DHCX_GYRO_GetSensitivity+0xb0>)
 8004aa0:	601a      	str	r2, [r3, #0]
      break;
 8004aa2:	e00b      	b.n	8004abc <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_1000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_1000DPS;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	4a0b      	ldr	r2, [pc, #44]	; (8004ad4 <ISM330DHCX_GYRO_GetSensitivity+0xb4>)
 8004aa8:	601a      	str	r2, [r3, #0]
      break;
 8004aaa:	e007      	b.n	8004abc <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    case ISM330DHCX_2000dps:
      *Sensitivity = ISM330DHCX_GYRO_SENSITIVITY_FS_2000DPS;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	4a0a      	ldr	r2, [pc, #40]	; (8004ad8 <ISM330DHCX_GYRO_GetSensitivity+0xb8>)
 8004ab0:	601a      	str	r2, [r3, #0]
      break;
 8004ab2:	e003      	b.n	8004abc <ISM330DHCX_GYRO_GetSensitivity+0x9c>

    default:
      ret = ISM330DHCX_ERROR;
 8004ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab8:	60fb      	str	r3, [r7, #12]
      break;
 8004aba:	bf00      	nop
  }

  return ret;
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	408c0000 	.word	0x408c0000
 8004acc:	410c0000 	.word	0x410c0000
 8004ad0:	418c0000 	.word	0x418c0000
 8004ad4:	420c0000 	.word	0x420c0000
 8004ad8:	428c0000 	.word	0x428c0000

08004adc <ISM330DHCX_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetOutputDataRate(ISM330DHCX_Object_t *pObj, float *Odr)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
  ism330dhcx_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (ism330dhcx_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != ISM330DHCX_OK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	331c      	adds	r3, #28
 8004aee:	f107 020b 	add.w	r2, r7, #11
 8004af2:	4611      	mov	r1, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 f841 	bl	8005b7c <ism330dhcx_gy_data_rate_get>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <ISM330DHCX_GYRO_GetOutputDataRate+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295
 8004b04:	e04e      	b.n	8004ba4 <ISM330DHCX_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004b06:	7afb      	ldrb	r3, [r7, #11]
 8004b08:	2b0a      	cmp	r3, #10
 8004b0a:	d846      	bhi.n	8004b9a <ISM330DHCX_GYRO_GetOutputDataRate+0xbe>
 8004b0c:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <ISM330DHCX_GYRO_GetOutputDataRate+0x38>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b41 	.word	0x08004b41
 8004b18:	08004b4b 	.word	0x08004b4b
 8004b1c:	08004b53 	.word	0x08004b53
 8004b20:	08004b5b 	.word	0x08004b5b
 8004b24:	08004b63 	.word	0x08004b63
 8004b28:	08004b6b 	.word	0x08004b6b
 8004b2c:	08004b73 	.word	0x08004b73
 8004b30:	08004b7b 	.word	0x08004b7b
 8004b34:	08004b83 	.word	0x08004b83
 8004b38:	08004b8b 	.word	0x08004b8b
 8004b3c:	08004b93 	.word	0x08004b93
  {
    case ISM330DHCX_GY_ODR_OFF:
      *Odr = 0.0f;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
      break;
 8004b48:	e02b      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	4a17      	ldr	r2, [pc, #92]	; (8004bac <ISM330DHCX_GYRO_GetOutputDataRate+0xd0>)
 8004b4e:	601a      	str	r2, [r3, #0]
      break;
 8004b50:	e027      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	4a16      	ldr	r2, [pc, #88]	; (8004bb0 <ISM330DHCX_GYRO_GetOutputDataRate+0xd4>)
 8004b56:	601a      	str	r2, [r3, #0]
      break;
 8004b58:	e023      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_52Hz:
      *Odr = 52.0f;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	; (8004bb4 <ISM330DHCX_GYRO_GetOutputDataRate+0xd8>)
 8004b5e:	601a      	str	r2, [r3, #0]
      break;
 8004b60:	e01f      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <ISM330DHCX_GYRO_GetOutputDataRate+0xdc>)
 8004b66:	601a      	str	r2, [r3, #0]
      break;
 8004b68:	e01b      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_208Hz:
      *Odr = 208.0f;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <ISM330DHCX_GYRO_GetOutputDataRate+0xe0>)
 8004b6e:	601a      	str	r2, [r3, #0]
      break;
 8004b70:	e017      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_417Hz:
      *Odr = 417.0f;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	4a12      	ldr	r2, [pc, #72]	; (8004bc0 <ISM330DHCX_GYRO_GetOutputDataRate+0xe4>)
 8004b76:	601a      	str	r2, [r3, #0]
      break;
 8004b78:	e013      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_833Hz:
      *Odr = 833.0f;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	4a11      	ldr	r2, [pc, #68]	; (8004bc4 <ISM330DHCX_GYRO_GetOutputDataRate+0xe8>)
 8004b7e:	601a      	str	r2, [r3, #0]
      break;
 8004b80:	e00f      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_1667Hz:
      *Odr =  1667.0f;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	4a10      	ldr	r2, [pc, #64]	; (8004bc8 <ISM330DHCX_GYRO_GetOutputDataRate+0xec>)
 8004b86:	601a      	str	r2, [r3, #0]
      break;
 8004b88:	e00b      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_3333Hz:
      *Odr =  3333.0f;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <ISM330DHCX_GYRO_GetOutputDataRate+0xf0>)
 8004b8e:	601a      	str	r2, [r3, #0]
      break;
 8004b90:	e007      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    case ISM330DHCX_GY_ODR_6667Hz:
      *Odr =  6667.0f;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	4a0e      	ldr	r2, [pc, #56]	; (8004bd0 <ISM330DHCX_GYRO_GetOutputDataRate+0xf4>)
 8004b96:	601a      	str	r2, [r3, #0]
      break;
 8004b98:	e003      	b.n	8004ba2 <ISM330DHCX_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = ISM330DHCX_ERROR;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	60fb      	str	r3, [r7, #12]
      break;
 8004ba0:	bf00      	nop
  }

  return ret;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	41480000 	.word	0x41480000
 8004bb0:	41d00000 	.word	0x41d00000
 8004bb4:	42500000 	.word	0x42500000
 8004bb8:	42d00000 	.word	0x42d00000
 8004bbc:	43500000 	.word	0x43500000
 8004bc0:	43d08000 	.word	0x43d08000
 8004bc4:	44504000 	.word	0x44504000
 8004bc8:	44d06000 	.word	0x44d06000
 8004bcc:	45505000 	.word	0x45505000
 8004bd0:	45d05800 	.word	0x45d05800

08004bd4 <ISM330DHCX_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetOutputDataRate(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d106      	bne.n	8004bf8 <ISM330DHCX_GYRO_SetOutputDataRate+0x24>
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004bea:	ed97 0a00 	vldr	s0, [r7]
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa32 	bl	8005058 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	e005      	b.n	8004c04 <ISM330DHCX_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004bf8:	ed97 0a00 	vldr	s0, [r7]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fab7 	bl	8005170 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>
 8004c02:	4603      	mov	r3, r0
  }
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <ISM330DHCX_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetFullScale(ISM330DHCX_Object_t *pObj, int32_t  *FullScale)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  int32_t ret = ISM330DHCX_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
  ism330dhcx_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (ism330dhcx_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != ISM330DHCX_OK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	331c      	adds	r3, #28
 8004c1e:	f107 020b 	add.w	r2, r7, #11
 8004c22:	4611      	mov	r1, r2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fde7 	bl	80057f8 <ism330dhcx_gy_full_scale_get>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <ISM330DHCX_GYRO_GetFullScale+0x2a>
  {
    return ISM330DHCX_ERROR;
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	e03c      	b.n	8004cb0 <ISM330DHCX_GYRO_GetFullScale+0xa4>
  }

  switch (fs_low_level)
 8004c36:	7afb      	ldrb	r3, [r7, #11]
 8004c38:	2b0c      	cmp	r3, #12
 8004c3a:	d834      	bhi.n	8004ca6 <ISM330DHCX_GYRO_GetFullScale+0x9a>
 8004c3c:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <ISM330DHCX_GYRO_GetFullScale+0x38>)
 8004c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c42:	bf00      	nop
 8004c44:	08004c81 	.word	0x08004c81
 8004c48:	08004ca7 	.word	0x08004ca7
 8004c4c:	08004c79 	.word	0x08004c79
 8004c50:	08004ca7 	.word	0x08004ca7
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004ca7 	.word	0x08004ca7
 8004c5c:	08004ca7 	.word	0x08004ca7
 8004c60:	08004ca7 	.word	0x08004ca7
 8004c64:	08004c93 	.word	0x08004c93
 8004c68:	08004ca7 	.word	0x08004ca7
 8004c6c:	08004ca7 	.word	0x08004ca7
 8004c70:	08004ca7 	.word	0x08004ca7
 8004c74:	08004c9d 	.word	0x08004c9d
  {
    case ISM330DHCX_125dps:
      *FullScale =  125;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	227d      	movs	r2, #125	; 0x7d
 8004c7c:	601a      	str	r2, [r3, #0]
      break;
 8004c7e:	e016      	b.n	8004cae <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_250dps:
      *FullScale =  250;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	22fa      	movs	r2, #250	; 0xfa
 8004c84:	601a      	str	r2, [r3, #0]
      break;
 8004c86:	e012      	b.n	8004cae <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_500dps:
      *FullScale =  500;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c8e:	601a      	str	r2, [r3, #0]
      break;
 8004c90:	e00d      	b.n	8004cae <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_1000dps:
      *FullScale = 1000;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c98:	601a      	str	r2, [r3, #0]
      break;
 8004c9a:	e008      	b.n	8004cae <ISM330DHCX_GYRO_GetFullScale+0xa2>

    case ISM330DHCX_2000dps:
      *FullScale = 2000;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ca2:	601a      	str	r2, [r3, #0]
      break;
 8004ca4:	e003      	b.n	8004cae <ISM330DHCX_GYRO_GetFullScale+0xa2>

    default:
      ret = ISM330DHCX_ERROR;
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8004caa:	60fb      	str	r3, [r7, #12]
      break;
 8004cac:	bf00      	nop
  }

  return ret;
 8004cae:	68fb      	ldr	r3, [r7, #12]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <ISM330DHCX_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_SetFullScale(ISM330DHCX_Object_t *pObj, int32_t FullScale)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  ism330dhcx_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
           : (FullScale <= 250)  ? ISM330DHCX_250dps
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b7d      	cmp	r3, #125	; 0x7d
 8004cc6:	dd12      	ble.n	8004cee <ISM330DHCX_GYRO_SetFullScale+0x36>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2bfa      	cmp	r3, #250	; 0xfa
 8004ccc:	dd0d      	ble.n	8004cea <ISM330DHCX_GYRO_SetFullScale+0x32>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cd4:	dd07      	ble.n	8004ce6 <ISM330DHCX_GYRO_SetFullScale+0x2e>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cdc:	dc01      	bgt.n	8004ce2 <ISM330DHCX_GYRO_SetFullScale+0x2a>
 8004cde:	2308      	movs	r3, #8
 8004ce0:	e006      	b.n	8004cf0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	e004      	b.n	8004cf0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	e002      	b.n	8004cf0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004cea:	2300      	movs	r3, #0
 8004cec:	e000      	b.n	8004cf0 <ISM330DHCX_GYRO_SetFullScale+0x38>
 8004cee:	2302      	movs	r3, #2
  new_fs = (FullScale <= 125)  ? ISM330DHCX_125dps
 8004cf0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? ISM330DHCX_500dps
           : (FullScale <= 1000) ? ISM330DHCX_1000dps
           :                       ISM330DHCX_2000dps;

  if (ism330dhcx_gy_full_scale_set(&(pObj->Ctx), new_fs) != ISM330DHCX_OK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	331c      	adds	r3, #28
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fd56 	bl	80057ac <ism330dhcx_gy_full_scale_set>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <ISM330DHCX_GYRO_SetFullScale+0x54>
  {
    return ISM330DHCX_ERROR;
 8004d06:	f04f 33ff 	mov.w	r3, #4294967295
 8004d0a:	e000      	b.n	8004d0e <ISM330DHCX_GYRO_SetFullScale+0x56>
  }

  return ISM330DHCX_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3710      	adds	r7, #16
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <ISM330DHCX_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxesRaw(ISM330DHCX_Object_t *pObj, ISM330DHCX_AxesRaw_t *Value)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b084      	sub	sp, #16
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	331c      	adds	r3, #28
 8004d24:	f107 0208 	add.w	r2, r7, #8
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 ffae 	bl	8005c8c <ism330dhcx_angular_rate_raw_get>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <ISM330DHCX_GYRO_GetAxesRaw+0x26>
  {
    return ISM330DHCX_ERROR;
 8004d36:	f04f 33ff 	mov.w	r3, #4294967295
 8004d3a:	e00c      	b.n	8004d56 <ISM330DHCX_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004d3c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004d44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004d4c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	809a      	strh	r2, [r3, #4]

  return ISM330DHCX_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <ISM330DHCX_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_GYRO_GetAxes(ISM330DHCX_Object_t *pObj, ISM330DHCX_Axes_t *AngularRate)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b086      	sub	sp, #24
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
  ism330dhcx_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (ism330dhcx_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != ISM330DHCX_OK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	331c      	adds	r3, #28
 8004d6c:	f107 0210 	add.w	r2, r7, #16
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 ff8a 	bl	8005c8c <ism330dhcx_angular_rate_raw_get>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <ISM330DHCX_GYRO_GetAxes+0x26>
  {
    return ISM330DHCX_ERROR;
 8004d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d82:	e03c      	b.n	8004dfe <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Get ISM330DHCX actual sensitivity. */
  if (ISM330DHCX_GYRO_GetSensitivity(pObj, &sensitivity) != ISM330DHCX_OK)
 8004d84:	f107 030c 	add.w	r3, r7, #12
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff fe48 	bl	8004a20 <ISM330DHCX_GYRO_GetSensitivity>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <ISM330DHCX_GYRO_GetAxes+0x3e>
  {
    return ISM330DHCX_ERROR;
 8004d96:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9a:	e030      	b.n	8004dfe <ISM330DHCX_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004d9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004da0:	ee07 3a90 	vmov	s15, r3
 8004da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004da8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db4:	ee17 2a90 	vmov	r2, s15
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004dbc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004dc0:	ee07 3a90 	vmov	s15, r3
 8004dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dd4:	ee17 2a90 	vmov	r2, s15
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004ddc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004df4:	ee17 2a90 	vmov	r2, s15
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	609a      	str	r2, [r3, #8]

  return ISM330DHCX_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3718      	adds	r7, #24
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}

08004e06 <ISM330DHCX_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t ISM330DHCX_Write_Reg(ISM330DHCX_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004e06:	b580      	push	{r7, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
 8004e12:	4613      	mov	r3, r2
 8004e14:	70bb      	strb	r3, [r7, #2]
  if (ism330dhcx_write_reg(&(pObj->Ctx), Reg, &Data, 1) != ISM330DHCX_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f103 001c 	add.w	r0, r3, #28
 8004e1c:	1cba      	adds	r2, r7, #2
 8004e1e:	78f9      	ldrb	r1, [r7, #3]
 8004e20:	2301      	movs	r3, #1
 8004e22:	f000 fa75 	bl	8005310 <ism330dhcx_write_reg>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <ISM330DHCX_Write_Reg+0x2c>
  {
    return ISM330DHCX_ERROR;
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e30:	e000      	b.n	8004e34 <ISM330DHCX_Write_Reg+0x2e>
  }

  return ISM330DHCX_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3708      	adds	r7, #8
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004e48:	edd7 7a00 	vldr	s15, [r7]
 8004e4c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e58:	d801      	bhi.n	8004e5e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e058      	b.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e5e:	edd7 7a00 	vldr	s15, [r7]
 8004e62:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e6e:	d801      	bhi.n	8004e74 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e04d      	b.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e74:	edd7 7a00 	vldr	s15, [r7]
 8004e78:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004f38 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004e7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e84:	d801      	bhi.n	8004e8a <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004e86:	2303      	movs	r3, #3
 8004e88:	e042      	b.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004e8a:	edd7 7a00 	vldr	s15, [r7]
 8004e8e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004f3c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004e92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e9a:	d801      	bhi.n	8004ea0 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	e037      	b.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ea0:	edd7 7a00 	vldr	s15, [r7]
 8004ea4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004f40 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004ea8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eb0:	d801      	bhi.n	8004eb6 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004eb2:	2305      	movs	r3, #5
 8004eb4:	e02c      	b.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004eb6:	edd7 7a00 	vldr	s15, [r7]
 8004eba:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004f44 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004ebe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec6:	d801      	bhi.n	8004ecc <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004ec8:	2306      	movs	r3, #6
 8004eca:	e021      	b.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ecc:	edd7 7a00 	vldr	s15, [r7]
 8004ed0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004f48 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004edc:	d801      	bhi.n	8004ee2 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004ede:	2307      	movs	r3, #7
 8004ee0:	e016      	b.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ee2:	edd7 7a00 	vldr	s15, [r7]
 8004ee6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004f4c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004eea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef2:	d801      	bhi.n	8004ef8 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	e00b      	b.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ef8:	edd7 7a00 	vldr	s15, [r7]
 8004efc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004f50 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f08:	d801      	bhi.n	8004f0e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004f0a:	2309      	movs	r3, #9
 8004f0c:	e000      	b.n	8004f10 <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004f0e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8004f10:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
          :                    ISM330DHCX_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_xl_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	331c      	adds	r3, #28
 8004f16:	7bfa      	ldrb	r2, [r7, #15]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f000 fa6e 	bl	80053fc <ism330dhcx_xl_data_rate_set>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2a:	e000      	b.n	8004f2e <ISM330DHCX_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	42500000 	.word	0x42500000
 8004f3c:	42d00000 	.word	0x42d00000
 8004f40:	43500000 	.word	0x43500000
 8004f44:	43d08000 	.word	0x43d08000
 8004f48:	44504000 	.word	0x44504000
 8004f4c:	44d06000 	.word	0x44d06000
 8004f50:	45505000 	.word	0x45505000

08004f54 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_ACC_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? ISM330DHCX_XL_ODR_26Hz
 8004f60:	edd7 7a00 	vldr	s15, [r7]
 8004f64:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	d801      	bhi.n	8004f76 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e058      	b.n	8005028 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f76:	edd7 7a00 	vldr	s15, [r7]
 8004f7a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f86:	d801      	bhi.n	8004f8c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e04d      	b.n	8005028 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004f8c:	edd7 7a00 	vldr	s15, [r7]
 8004f90:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800503c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004f94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9c:	d801      	bhi.n	8004fa2 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e042      	b.n	8005028 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004fa2:	edd7 7a00 	vldr	s15, [r7]
 8004fa6:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005040 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb2:	d801      	bhi.n	8004fb8 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	e037      	b.n	8005028 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004fb8:	edd7 7a00 	vldr	s15, [r7]
 8004fbc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005044 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc8:	d801      	bhi.n	8004fce <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004fca:	2305      	movs	r3, #5
 8004fcc:	e02c      	b.n	8005028 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004fce:	edd7 7a00 	vldr	s15, [r7]
 8004fd2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005048 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004fd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fde:	d801      	bhi.n	8004fe4 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004fe0:	2306      	movs	r3, #6
 8004fe2:	e021      	b.n	8005028 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004fe4:	edd7 7a00 	vldr	s15, [r7]
 8004fe8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800504c <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ff4:	d801      	bhi.n	8004ffa <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004ff6:	2307      	movs	r3, #7
 8004ff8:	e016      	b.n	8005028 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004ffa:	edd7 7a00 	vldr	s15, [r7]
 8004ffe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005050 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8005002:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800500a:	d801      	bhi.n	8005010 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xbc>
 800500c:	2308      	movs	r3, #8
 800500e:	e00b      	b.n	8005028 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005010:	edd7 7a00 	vldr	s15, [r7]
 8005014:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005054 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0x100>
 8005018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800501c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005020:	d801      	bhi.n	8005026 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8005022:	2309      	movs	r3, #9
 8005024:	e000      	b.n	8005028 <ISM330DHCX_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8005026:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? ISM330DHCX_XL_ODR_12Hz5
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? ISM330DHCX_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? ISM330DHCX_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? ISM330DHCX_XL_ODR_3333Hz
                :                    ISM330DHCX_XL_ODR_6667Hz;

  return ISM330DHCX_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	42500000 	.word	0x42500000
 8005040:	42d00000 	.word	0x42d00000
 8005044:	43500000 	.word	0x43500000
 8005048:	43d08000 	.word	0x43d08000
 800504c:	44504000 	.word	0x44504000
 8005050:	44d06000 	.word	0x44d06000
 8005054:	45505000 	.word	0x45505000

08005058 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	ed87 0a00 	vstr	s0, [r7]
  ism330dhcx_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 8005064:	edd7 7a00 	vldr	s15, [r7]
 8005068:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800506c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005074:	d801      	bhi.n	800507a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8005076:	2301      	movs	r3, #1
 8005078:	e058      	b.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800507a:	edd7 7a00 	vldr	s15, [r7]
 800507e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8005082:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508a:	d801      	bhi.n	8005090 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x38>
 800508c:	2302      	movs	r3, #2
 800508e:	e04d      	b.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005090:	edd7 7a00 	vldr	s15, [r7]
 8005094:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005154 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8005098:	eef4 7ac7 	vcmpe.f32	s15, s14
 800509c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a0:	d801      	bhi.n	80050a6 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80050a2:	2303      	movs	r3, #3
 80050a4:	e042      	b.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050a6:	edd7 7a00 	vldr	s15, [r7]
 80050aa:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005158 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80050ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b6:	d801      	bhi.n	80050bc <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80050b8:	2304      	movs	r3, #4
 80050ba:	e037      	b.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050bc:	edd7 7a00 	vldr	s15, [r7]
 80050c0:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800515c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80050c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050cc:	d801      	bhi.n	80050d2 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80050ce:	2305      	movs	r3, #5
 80050d0:	e02c      	b.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050d2:	edd7 7a00 	vldr	s15, [r7]
 80050d6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005160 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80050da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e2:	d801      	bhi.n	80050e8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80050e4:	2306      	movs	r3, #6
 80050e6:	e021      	b.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050e8:	edd7 7a00 	vldr	s15, [r7]
 80050ec:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005164 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80050f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050f8:	d801      	bhi.n	80050fe <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80050fa:	2307      	movs	r3, #7
 80050fc:	e016      	b.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80050fe:	edd7 7a00 	vldr	s15, [r7]
 8005102:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005168 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8005106:	eef4 7ac7 	vcmpe.f32	s15, s14
 800510a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800510e:	d801      	bhi.n	8005114 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8005110:	2308      	movs	r3, #8
 8005112:	e00b      	b.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8005114:	edd7 7a00 	vldr	s15, [r7]
 8005118:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800516c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0x114>
 800511c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005124:	d801      	bhi.n	800512a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8005126:	2309      	movs	r3, #9
 8005128:	e000      	b.n	800512c <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800512a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 800512c:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
          :                    ISM330DHCX_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (ism330dhcx_gy_data_rate_set(&(pObj->Ctx), new_odr) != ISM330DHCX_OK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	331c      	adds	r3, #28
 8005132:	7bfa      	ldrb	r2, [r7, #15]
 8005134:	4611      	mov	r1, r2
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fbb0 	bl	800589c <ism330dhcx_gy_data_rate_set>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return ISM330DHCX_ERROR;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
 8005146:	e000      	b.n	800514a <ISM330DHCX_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return ISM330DHCX_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	42500000 	.word	0x42500000
 8005158:	42d00000 	.word	0x42d00000
 800515c:	43500000 	.word	0x43500000
 8005160:	43d08000 	.word	0x43d08000
 8005164:	44504000 	.word	0x44504000
 8005168:	44d06000 	.word	0x44d06000
 800516c:	45505000 	.word	0x45505000

08005170 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled(ISM330DHCX_Object_t *pObj, float Odr)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? ISM330DHCX_GY_ODR_26Hz
 800517c:	edd7 7a00 	vldr	s15, [r7]
 8005180:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8005184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518c:	d801      	bhi.n	8005192 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x22>
 800518e:	2301      	movs	r3, #1
 8005190:	e058      	b.n	8005244 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005192:	edd7 7a00 	vldr	s15, [r7]
 8005196:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800519a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800519e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051a2:	d801      	bhi.n	80051a8 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e04d      	b.n	8005244 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051a8:	edd7 7a00 	vldr	s15, [r7]
 80051ac:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005258 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80051b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b8:	d801      	bhi.n	80051be <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80051ba:	2303      	movs	r3, #3
 80051bc:	e042      	b.n	8005244 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051be:	edd7 7a00 	vldr	s15, [r7]
 80051c2:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800525c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80051c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ce:	d801      	bhi.n	80051d4 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80051d0:	2304      	movs	r3, #4
 80051d2:	e037      	b.n	8005244 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051d4:	edd7 7a00 	vldr	s15, [r7]
 80051d8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005260 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80051dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e4:	d801      	bhi.n	80051ea <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80051e6:	2305      	movs	r3, #5
 80051e8:	e02c      	b.n	8005244 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80051ea:	edd7 7a00 	vldr	s15, [r7]
 80051ee:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005264 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80051f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051fa:	d801      	bhi.n	8005200 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80051fc:	2306      	movs	r3, #6
 80051fe:	e021      	b.n	8005244 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005200:	edd7 7a00 	vldr	s15, [r7]
 8005204:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005268 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800520c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005210:	d801      	bhi.n	8005216 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8005212:	2307      	movs	r3, #7
 8005214:	e016      	b.n	8005244 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005216:	edd7 7a00 	vldr	s15, [r7]
 800521a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800526c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 800521e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	d801      	bhi.n	800522c <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005228:	2308      	movs	r3, #8
 800522a:	e00b      	b.n	8005244 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800522c:	edd7 7a00 	vldr	s15, [r7]
 8005230:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005270 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8005234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	d801      	bhi.n	8005242 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800523e:	2309      	movs	r3, #9
 8005240:	e000      	b.n	8005244 <ISM330DHCX_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005242:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? ISM330DHCX_GY_ODR_12Hz5
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? ISM330DHCX_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? ISM330DHCX_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? ISM330DHCX_GY_ODR_3333Hz
                 :                    ISM330DHCX_GY_ODR_6667Hz;

  return ISM330DHCX_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	42500000 	.word	0x42500000
 800525c:	42d00000 	.word	0x42d00000
 8005260:	43500000 	.word	0x43500000
 8005264:	43d08000 	.word	0x43d08000
 8005268:	44504000 	.word	0x44504000
 800526c:	44d06000 	.word	0x44d06000
 8005270:	45505000 	.word	0x45505000

08005274 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	461a      	mov	r2, r3
 8005280:	460b      	mov	r3, r1
 8005282:	72fb      	strb	r3, [r7, #11]
 8005284:	4613      	mov	r3, r2
 8005286:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	695c      	ldr	r4, [r3, #20]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	7b1b      	ldrb	r3, [r3, #12]
 8005294:	b298      	uxth	r0, r3
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	b299      	uxth	r1, r3
 800529a:	893b      	ldrh	r3, [r7, #8]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	47a0      	blx	r4
 80052a0:	4603      	mov	r3, r0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd90      	pop	{r4, r7, pc}

080052aa <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80052aa:	b590      	push	{r4, r7, lr}
 80052ac:	b087      	sub	sp, #28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	461a      	mov	r2, r3
 80052b6:	460b      	mov	r3, r1
 80052b8:	72fb      	strb	r3, [r7, #11]
 80052ba:	4613      	mov	r3, r2
 80052bc:	813b      	strh	r3, [r7, #8]
  ISM330DHCX_Object_t *pObj = (ISM330DHCX_Object_t *)Handle;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	691c      	ldr	r4, [r3, #16]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	7b1b      	ldrb	r3, [r3, #12]
 80052ca:	b298      	uxth	r0, r3
 80052cc:	7afb      	ldrb	r3, [r7, #11]
 80052ce:	b299      	uxth	r1, r3
 80052d0:	893b      	ldrh	r3, [r7, #8]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	47a0      	blx	r4
 80052d6:	4603      	mov	r3, r0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd90      	pop	{r4, r7, pc}

080052e0 <ism330dhcx_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                            uint16_t len)
{
 80052e0:	b590      	push	{r4, r7, lr}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	461a      	mov	r2, r3
 80052ec:	460b      	mov	r3, r1
 80052ee:	72fb      	strb	r3, [r7, #11]
 80052f0:	4613      	mov	r3, r2
 80052f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685c      	ldr	r4, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6898      	ldr	r0, [r3, #8]
 80052fc:	893b      	ldrh	r3, [r7, #8]
 80052fe:	7af9      	ldrb	r1, [r7, #11]
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	47a0      	blx	r4
 8005304:	6178      	str	r0, [r7, #20]
  return ret;
 8005306:	697b      	ldr	r3, [r7, #20]
}
 8005308:	4618      	mov	r0, r3
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	bd90      	pop	{r4, r7, pc}

08005310 <ism330dhcx_write_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                             uint16_t len)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	461a      	mov	r2, r3
 800531c:	460b      	mov	r3, r1
 800531e:	72fb      	strb	r3, [r7, #11]
 8005320:	4613      	mov	r3, r2
 8005322:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681c      	ldr	r4, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6898      	ldr	r0, [r3, #8]
 800532c:	893b      	ldrh	r3, [r7, #8]
 800532e:	7af9      	ldrb	r1, [r7, #11]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	47a0      	blx	r4
 8005334:	6178      	str	r0, [r7, #20]
  return ret;
 8005336:	697b      	ldr	r3, [r7, #20]
}
 8005338:	4618      	mov	r0, r3
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	bd90      	pop	{r4, r7, pc}

08005340 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	460b      	mov	r3, r1
 800534a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 800534c:	f107 0208 	add.w	r2, r7, #8
 8005350:	2301      	movs	r3, #1
 8005352:	2110      	movs	r1, #16
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7ff ffc3 	bl	80052e0 <ism330dhcx_read_reg>
 800535a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10f      	bne.n	8005382 <ism330dhcx_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t)val;
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	b2da      	uxtb	r2, r3
 800536a:	7a3b      	ldrb	r3, [r7, #8]
 800536c:	f362 0383 	bfi	r3, r2, #2, #2
 8005370:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8005372:	f107 0208 	add.w	r2, r7, #8
 8005376:	2301      	movs	r3, #1
 8005378:	2110      	movs	r1, #16
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff ffc8 	bl	8005310 <ism330dhcx_write_reg>
 8005380:	60f8      	str	r0, [r7, #12]
                               (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 8005382:	68fb      	ldr	r3, [r7, #12]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <ism330dhcx_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t *val)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 8005396:	f107 0208 	add.w	r2, r7, #8
 800539a:	2301      	movs	r3, #1
 800539c:	2110      	movs	r1, #16
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff ff9e 	bl	80052e0 <ism330dhcx_read_reg>
 80053a4:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.fs_xl){
 80053a6:	7a3b      	ldrb	r3, [r7, #8]
 80053a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d81a      	bhi.n	80053e8 <ism330dhcx_xl_full_scale_get+0x5c>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <ism330dhcx_xl_full_scale_get+0x2c>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053c9 	.word	0x080053c9
 80053bc:	080053d1 	.word	0x080053d1
 80053c0:	080053d9 	.word	0x080053d9
 80053c4:	080053e1 	.word	0x080053e1
    case ISM330DHCX_2g:
      *val = ISM330DHCX_2g;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
      break;
 80053ce:	e00f      	b.n	80053f0 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_16g:
      *val = ISM330DHCX_16g;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2201      	movs	r2, #1
 80053d4:	701a      	strb	r2, [r3, #0]
      break;
 80053d6:	e00b      	b.n	80053f0 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_4g:
      *val = ISM330DHCX_4g;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2202      	movs	r2, #2
 80053dc:	701a      	strb	r2, [r3, #0]
      break;
 80053de:	e007      	b.n	80053f0 <ism330dhcx_xl_full_scale_get+0x64>
    case ISM330DHCX_8g:
      *val = ISM330DHCX_8g;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2203      	movs	r2, #3
 80053e4:	701a      	strb	r2, [r3, #0]
      break;
 80053e6:	e003      	b.n	80053f0 <ism330dhcx_xl_full_scale_get+0x64>
    default:
      *val = ISM330DHCX_2g;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
      break;
 80053ee:	bf00      	nop
  }
  return ret;
 80053f0:	68fb      	ldr	r3, [r7, #12]
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop

080053fc <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 800540c:	f107 030c 	add.w	r3, r7, #12
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fd79 	bl	8005f0a <ism330dhcx_fsm_enable_get>
 8005418:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 80c4 	bne.w	80055aa <ism330dhcx_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005422:	7b3b      	ldrb	r3, [r7, #12]
 8005424:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005428:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800542a:	7b3b      	ldrb	r3, [r7, #12]
 800542c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005430:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8005432:	4313      	orrs	r3, r2
 8005434:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8005436:	7b3b      	ldrb	r3, [r7, #12]
 8005438:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800543c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800543e:	4313      	orrs	r3, r2
 8005440:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005442:	7b3b      	ldrb	r3, [r7, #12]
 8005444:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005448:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800544a:	4313      	orrs	r3, r2
 800544c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800544e:	7b3b      	ldrb	r3, [r7, #12]
 8005450:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005454:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8005456:	4313      	orrs	r3, r2
 8005458:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800545a:	7b3b      	ldrb	r3, [r7, #12]
 800545c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005460:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005462:	4313      	orrs	r3, r2
 8005464:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005466:	7b3b      	ldrb	r3, [r7, #12]
 8005468:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800546c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800546e:	4313      	orrs	r3, r2
 8005470:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005472:	7b3b      	ldrb	r3, [r7, #12]
 8005474:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005478:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800547a:	4313      	orrs	r3, r2
 800547c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800547e:	7b7b      	ldrb	r3, [r7, #13]
 8005480:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005484:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005486:	4313      	orrs	r3, r2
 8005488:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800548a:	7b7b      	ldrb	r3, [r7, #13]
 800548c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005490:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005492:	4313      	orrs	r3, r2
 8005494:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8005496:	7b7b      	ldrb	r3, [r7, #13]
 8005498:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800549c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800549e:	4313      	orrs	r3, r2
 80054a0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80054a2:	7b7b      	ldrb	r3, [r7, #13]
 80054a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054a8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 80054aa:	4313      	orrs	r3, r2
 80054ac:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80054ae:	7b7b      	ldrb	r3, [r7, #13]
 80054b0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80054b4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 80054b6:	4313      	orrs	r3, r2
 80054b8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80054ba:	7b7b      	ldrb	r3, [r7, #13]
 80054bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054c0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 80054c2:	4313      	orrs	r3, r2
 80054c4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80054c6:	7b7b      	ldrb	r3, [r7, #13]
 80054c8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80054cc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 80054ce:	4313      	orrs	r3, r2
 80054d0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 80054d2:	7b7b      	ldrb	r3, [r7, #13]
 80054d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80054d8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80054da:	4313      	orrs	r3, r2
 80054dc:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d163      	bne.n	80055aa <ism330dhcx_xl_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 80054e2:	f107 030b 	add.w	r3, r7, #11
 80054e6:	4619      	mov	r1, r3
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fd3b 	bl	8005f64 <ism330dhcx_fsm_data_rate_get>
 80054ee:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d159      	bne.n	80055aa <ism330dhcx_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80054f6:	7afb      	ldrb	r3, [r7, #11]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d853      	bhi.n	80055a4 <ism330dhcx_xl_data_rate_set+0x1a8>
 80054fc:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <ism330dhcx_xl_data_rate_set+0x108>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005515 	.word	0x08005515
 8005508:	08005527 	.word	0x08005527
 800550c:	08005545 	.word	0x08005545
 8005510:	0800556f 	.word	0x0800556f
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF){
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <ism330dhcx_xl_data_rate_set+0x124>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800551a:	2301      	movs	r3, #1
 800551c:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 800551e:	e045      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	75fb      	strb	r3, [r7, #23]
            break;
 8005524:	e042      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_XL_ODR_OFF){
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <ism330dhcx_xl_data_rate_set+0x136>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800552c:	2302      	movs	r3, #2
 800552e:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 8005530:	e03c      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d102      	bne.n	800553e <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005538:	2302      	movs	r3, #2
 800553a:	75fb      	strb	r3, [r7, #23]
            break;
 800553c:	e036      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	75fb      	strb	r3, [r7, #23]
            break;
 8005542:	e033      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF){
 8005544:	78fb      	ldrb	r3, [r7, #3]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d102      	bne.n	8005550 <ism330dhcx_xl_data_rate_set+0x154>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800554a:	2303      	movs	r3, #3
 800554c:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 800554e:	e02d      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d102      	bne.n	800555c <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005556:	2303      	movs	r3, #3
 8005558:	75fb      	strb	r3, [r7, #23]
            break;
 800555a:	e027      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz){
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d102      	bne.n	8005568 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005562:	2303      	movs	r3, #3
 8005564:	75fb      	strb	r3, [r7, #23]
            break;
 8005566:	e021      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	75fb      	strb	r3, [r7, #23]
            break;
 800556c:	e01e      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_XL_ODR_OFF){
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <ism330dhcx_xl_data_rate_set+0x17e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005574:	2304      	movs	r3, #4
 8005576:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8005578:	e018      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d102      	bne.n	8005586 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005580:	2304      	movs	r3, #4
 8005582:	75fb      	strb	r3, [r7, #23]
            break;
 8005584:	e012      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_26Hz){
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d102      	bne.n	8005592 <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800558c:	2304      	movs	r3, #4
 800558e:	75fb      	strb	r3, [r7, #23]
            break;
 8005590:	e00c      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_XL_ODR_52Hz){
 8005592:	78fb      	ldrb	r3, [r7, #3]
 8005594:	2b03      	cmp	r3, #3
 8005596:	d102      	bne.n	800559e <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005598:	2304      	movs	r3, #4
 800559a:	75fb      	strb	r3, [r7, #23]
            break;
 800559c:	e006      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	75fb      	strb	r3, [r7, #23]
            break;
 80055a2:	e003      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	75fb      	strb	r3, [r7, #23]
            break;
 80055a8:	e000      	b.n	80055ac <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 80055aa:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d16d      	bne.n	8005692 <ism330dhcx_xl_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80055b6:	f107 030a 	add.w	r3, r7, #10
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fd19 	bl	8005ff4 <ism330dhcx_mlc_get>
 80055c2:	6138      	str	r0, [r7, #16]
    if ( mlc_enable == PROPERTY_ENABLE ){
 80055c4:	7abb      	ldrb	r3, [r7, #10]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d163      	bne.n	8005692 <ism330dhcx_xl_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80055ca:	f107 0309 	add.w	r3, r7, #9
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fd39 	bl	8006048 <ism330dhcx_mlc_data_rate_get>
 80055d6:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d159      	bne.n	8005692 <ism330dhcx_xl_data_rate_set+0x296>
        switch (mlc_odr) {
 80055de:	7a7b      	ldrb	r3, [r7, #9]
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d853      	bhi.n	800568c <ism330dhcx_xl_data_rate_set+0x290>
 80055e4:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <ism330dhcx_xl_data_rate_set+0x1f0>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	080055fd 	.word	0x080055fd
 80055f0:	0800560f 	.word	0x0800560f
 80055f4:	0800562d 	.word	0x0800562d
 80055f8:	08005657 	.word	0x08005657
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_XL_ODR_OFF){
 80055fc:	78fb      	ldrb	r3, [r7, #3]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <ism330dhcx_xl_data_rate_set+0x20c>
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 8005606:	e045      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	75fb      	strb	r3, [r7, #23]
            break;
 800560c:	e042      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF){
 800560e:	78fb      	ldrb	r3, [r7, #3]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <ism330dhcx_xl_data_rate_set+0x21e>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005614:	2302      	movs	r3, #2
 8005616:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 8005618:	e03c      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d102      	bne.n	8005626 <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8005620:	2302      	movs	r3, #2
 8005622:	75fb      	strb	r3, [r7, #23]
            break;
 8005624:	e036      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005626:	78fb      	ldrb	r3, [r7, #3]
 8005628:	75fb      	strb	r3, [r7, #23]
            break;
 800562a:	e033      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_XL_ODR_OFF){
 800562c:	78fb      	ldrb	r3, [r7, #3]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d102      	bne.n	8005638 <ism330dhcx_xl_data_rate_set+0x23c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8005632:	2303      	movs	r3, #3
 8005634:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 8005636:	e02d      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d102      	bne.n	8005644 <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800563e:	2303      	movs	r3, #3
 8005640:	75fb      	strb	r3, [r7, #23]
            break;
 8005642:	e027      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz){
 8005644:	78fb      	ldrb	r3, [r7, #3]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d102      	bne.n	8005650 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800564a:	2303      	movs	r3, #3
 800564c:	75fb      	strb	r3, [r7, #23]
            break;
 800564e:	e021      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	75fb      	strb	r3, [r7, #23]
            break;
 8005654:	e01e      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF){
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d102      	bne.n	8005662 <ism330dhcx_xl_data_rate_set+0x266>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800565c:	2304      	movs	r3, #4
 800565e:	75fb      	strb	r3, [r7, #23]
              odr_xl = ISM330DHCX_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8005660:	e018      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_12Hz5){
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d102      	bne.n	800566e <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005668:	2304      	movs	r3, #4
 800566a:	75fb      	strb	r3, [r7, #23]
            break;
 800566c:	e012      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_26Hz){
 800566e:	78fb      	ldrb	r3, [r7, #3]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d102      	bne.n	800567a <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005674:	2304      	movs	r3, #4
 8005676:	75fb      	strb	r3, [r7, #23]
            break;
 8005678:	e00c      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
            } else if (val == ISM330DHCX_XL_ODR_52Hz){
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d102      	bne.n	8005686 <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8005680:	2304      	movs	r3, #4
 8005682:	75fb      	strb	r3, [r7, #23]
            break;
 8005684:	e006      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	75fb      	strb	r3, [r7, #23]
            break;
 800568a:	e003      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
          default:
            odr_xl = val;
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	75fb      	strb	r3, [r7, #23]
            break;
 8005690:	e000      	b.n	8005694 <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 8005692:	bf00      	nop
    }
  }
  if(ret == 0){
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <ism330dhcx_xl_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 800569a:	f107 0208 	add.w	r2, r7, #8
 800569e:	2301      	movs	r3, #1
 80056a0:	2110      	movs	r1, #16
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff fe1c 	bl	80052e0 <ism330dhcx_read_reg>
 80056a8:	6138      	str	r0, [r7, #16]
                              (uint8_t*)&ctrl1_xl, 1);
  }
  if(ret == 0){
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10f      	bne.n	80056d0 <ism330dhcx_xl_data_rate_set+0x2d4>
    ctrl1_xl.odr_xl= (uint8_t)odr_xl;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	f003 030f 	and.w	r3, r3, #15
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	7a3b      	ldrb	r3, [r7, #8]
 80056ba:	f362 1307 	bfi	r3, r2, #4, #4
 80056be:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80056c0:	f107 0208 	add.w	r2, r7, #8
 80056c4:	2301      	movs	r3, #1
 80056c6:	2110      	movs	r1, #16
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff fe21 	bl	8005310 <ism330dhcx_write_reg>
 80056ce:	6138      	str	r0, [r7, #16]
                               (uint8_t*)&ctrl1_xl, 1);
  }
  return ret;
 80056d0:	693b      	ldr	r3, [r7, #16]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop

080056dc <ism330dhcx_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   ism330dhcx_odr_xl_t *val)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
 80056e6:	f107 0208 	add.w	r2, r7, #8
 80056ea:	2301      	movs	r3, #1
 80056ec:	2110      	movs	r1, #16
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fdf6 	bl	80052e0 <ism330dhcx_read_reg>
 80056f4:	60f8      	str	r0, [r7, #12]
  switch (ctrl1_xl.odr_xl){
 80056f6:	7a3b      	ldrb	r3, [r7, #8]
 80056f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b0b      	cmp	r3, #11
 8005700:	d84a      	bhi.n	8005798 <ism330dhcx_xl_data_rate_get+0xbc>
 8005702:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <ism330dhcx_xl_data_rate_get+0x2c>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	08005739 	.word	0x08005739
 800570c:	08005741 	.word	0x08005741
 8005710:	08005749 	.word	0x08005749
 8005714:	08005751 	.word	0x08005751
 8005718:	08005759 	.word	0x08005759
 800571c:	08005761 	.word	0x08005761
 8005720:	08005769 	.word	0x08005769
 8005724:	08005771 	.word	0x08005771
 8005728:	08005779 	.word	0x08005779
 800572c:	08005781 	.word	0x08005781
 8005730:	08005789 	.word	0x08005789
 8005734:	08005791 	.word	0x08005791
    case ISM330DHCX_XL_ODR_OFF:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2200      	movs	r2, #0
 800573c:	701a      	strb	r2, [r3, #0]
      break;
 800573e:	e02f      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_12Hz5:
      *val = ISM330DHCX_XL_ODR_12Hz5;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	701a      	strb	r2, [r3, #0]
      break;
 8005746:	e02b      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_26Hz:
      *val = ISM330DHCX_XL_ODR_26Hz;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2202      	movs	r2, #2
 800574c:	701a      	strb	r2, [r3, #0]
      break;
 800574e:	e027      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_52Hz:
      *val = ISM330DHCX_XL_ODR_52Hz;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2203      	movs	r2, #3
 8005754:	701a      	strb	r2, [r3, #0]
      break;
 8005756:	e023      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_104Hz:
      *val = ISM330DHCX_XL_ODR_104Hz;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2204      	movs	r2, #4
 800575c:	701a      	strb	r2, [r3, #0]
      break;
 800575e:	e01f      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_208Hz:
      *val = ISM330DHCX_XL_ODR_208Hz;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2205      	movs	r2, #5
 8005764:	701a      	strb	r2, [r3, #0]
      break;
 8005766:	e01b      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_417Hz:
      *val = ISM330DHCX_XL_ODR_417Hz;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2206      	movs	r2, #6
 800576c:	701a      	strb	r2, [r3, #0]
      break;
 800576e:	e017      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_833Hz:
      *val = ISM330DHCX_XL_ODR_833Hz;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2207      	movs	r2, #7
 8005774:	701a      	strb	r2, [r3, #0]
      break;
 8005776:	e013      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_1667Hz:
      *val = ISM330DHCX_XL_ODR_1667Hz;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2208      	movs	r2, #8
 800577c:	701a      	strb	r2, [r3, #0]
      break;
 800577e:	e00f      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_3333Hz:
      *val = ISM330DHCX_XL_ODR_3333Hz;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2209      	movs	r2, #9
 8005784:	701a      	strb	r2, [r3, #0]
      break;
 8005786:	e00b      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_6667Hz:
      *val = ISM330DHCX_XL_ODR_6667Hz;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	220a      	movs	r2, #10
 800578c:	701a      	strb	r2, [r3, #0]
      break;
 800578e:	e007      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    case ISM330DHCX_XL_ODR_6Hz5:
      *val = ISM330DHCX_XL_ODR_6Hz5;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	220b      	movs	r2, #11
 8005794:	701a      	strb	r2, [r3, #0]
      break;
 8005796:	e003      	b.n	80057a0 <ism330dhcx_xl_data_rate_get+0xc4>
    default:
      *val = ISM330DHCX_XL_ODR_OFF;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
      break;
 800579e:	bf00      	nop
  }
  return ret;
 80057a0:	68fb      	ldr	r3, [r7, #12]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop

080057ac <ism330dhcx_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t val)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	460b      	mov	r3, r1
 80057b6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80057b8:	f107 0208 	add.w	r2, r7, #8
 80057bc:	2301      	movs	r3, #1
 80057be:	2111      	movs	r1, #17
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fd8d 	bl	80052e0 <ism330dhcx_read_reg>
 80057c6:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10f      	bne.n	80057ee <ism330dhcx_gy_full_scale_set+0x42>
    ctrl2_g.fs_g= (uint8_t)val;
 80057ce:	78fb      	ldrb	r3, [r7, #3]
 80057d0:	f003 030f 	and.w	r3, r3, #15
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	7a3b      	ldrb	r3, [r7, #8]
 80057d8:	f362 0303 	bfi	r3, r2, #0, #4
 80057dc:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 80057de:	f107 0208 	add.w	r2, r7, #8
 80057e2:	2301      	movs	r3, #1
 80057e4:	2111      	movs	r1, #17
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fd92 	bl	8005310 <ism330dhcx_write_reg>
 80057ec:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80057ee:	68fb      	ldr	r3, [r7, #12]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <ism330dhcx_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_full_scale_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_g_t *val)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005802:	f107 0208 	add.w	r2, r7, #8
 8005806:	2301      	movs	r3, #1
 8005808:	2111      	movs	r1, #17
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff fd68 	bl	80052e0 <ism330dhcx_read_reg>
 8005810:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.fs_g){
 8005812:	7a3b      	ldrb	r3, [r7, #8]
 8005814:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d834      	bhi.n	8005888 <ism330dhcx_gy_full_scale_get+0x90>
 800581e:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <ism330dhcx_gy_full_scale_get+0x2c>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	08005861 	.word	0x08005861
 8005828:	08005881 	.word	0x08005881
 800582c:	08005859 	.word	0x08005859
 8005830:	08005889 	.word	0x08005889
 8005834:	08005869 	.word	0x08005869
 8005838:	08005889 	.word	0x08005889
 800583c:	08005889 	.word	0x08005889
 8005840:	08005889 	.word	0x08005889
 8005844:	08005871 	.word	0x08005871
 8005848:	08005889 	.word	0x08005889
 800584c:	08005889 	.word	0x08005889
 8005850:	08005889 	.word	0x08005889
 8005854:	08005879 	.word	0x08005879
    case ISM330DHCX_125dps:
      *val = ISM330DHCX_125dps;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2202      	movs	r2, #2
 800585c:	701a      	strb	r2, [r3, #0]
      break;
 800585e:	e017      	b.n	8005890 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_250dps:
      *val = ISM330DHCX_250dps;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2200      	movs	r2, #0
 8005864:	701a      	strb	r2, [r3, #0]
      break;
 8005866:	e013      	b.n	8005890 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_500dps:
      *val = ISM330DHCX_500dps;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2204      	movs	r2, #4
 800586c:	701a      	strb	r2, [r3, #0]
      break;
 800586e:	e00f      	b.n	8005890 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_1000dps:
      *val = ISM330DHCX_1000dps;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2208      	movs	r2, #8
 8005874:	701a      	strb	r2, [r3, #0]
      break;
 8005876:	e00b      	b.n	8005890 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_2000dps:
      *val = ISM330DHCX_2000dps;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	220c      	movs	r2, #12
 800587c:	701a      	strb	r2, [r3, #0]
      break;
 800587e:	e007      	b.n	8005890 <ism330dhcx_gy_full_scale_get+0x98>
    case ISM330DHCX_4000dps:
      *val = ISM330DHCX_4000dps;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2201      	movs	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
      break;
 8005886:	e003      	b.n	8005890 <ism330dhcx_gy_full_scale_get+0x98>
    default:
      *val = ISM330DHCX_125dps;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2202      	movs	r2, #2
 800588c:	701a      	strb	r2, [r3, #0]
      break;
 800588e:	bf00      	nop
  }
  return ret;
 8005890:	68fb      	ldr	r3, [r7, #12]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop

0800589c <ism330dhcx_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t val)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_g_t odr_gy =  val;
 80058a8:	78fb      	ldrb	r3, [r7, #3]
 80058aa:	75fb      	strb	r3, [r7, #23]
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 80058ac:	f107 030c 	add.w	r3, r7, #12
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fb29 	bl	8005f0a <ism330dhcx_fsm_enable_get>
 80058b8:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f040 80c4 	bne.w	8005a4a <ism330dhcx_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80058c2:	7b3b      	ldrb	r3, [r7, #12]
 80058c4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80058c8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80058ca:	7b3b      	ldrb	r3, [r7, #12]
 80058cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80058d0:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80058d6:	7b3b      	ldrb	r3, [r7, #12]
 80058d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80058dc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 80058de:	4313      	orrs	r3, r2
 80058e0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80058e2:	7b3b      	ldrb	r3, [r7, #12]
 80058e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058e8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 80058ea:	4313      	orrs	r3, r2
 80058ec:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 80058ee:	7b3b      	ldrb	r3, [r7, #12]
 80058f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058f4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 80058f6:	4313      	orrs	r3, r2
 80058f8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 80058fa:	7b3b      	ldrb	r3, [r7, #12]
 80058fc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005900:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8005902:	4313      	orrs	r3, r2
 8005904:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8005906:	7b3b      	ldrb	r3, [r7, #12]
 8005908:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800590c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800590e:	4313      	orrs	r3, r2
 8005910:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005912:	7b3b      	ldrb	r3, [r7, #12]
 8005914:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005918:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800591a:	4313      	orrs	r3, r2
 800591c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800591e:	7b7b      	ldrb	r3, [r7, #13]
 8005920:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005924:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8005926:	4313      	orrs	r3, r2
 8005928:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800592a:	7b7b      	ldrb	r3, [r7, #13]
 800592c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005930:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8005932:	4313      	orrs	r3, r2
 8005934:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8005936:	7b7b      	ldrb	r3, [r7, #13]
 8005938:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800593c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800593e:	4313      	orrs	r3, r2
 8005940:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005942:	7b7b      	ldrb	r3, [r7, #13]
 8005944:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005948:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800594a:	4313      	orrs	r3, r2
 800594c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800594e:	7b7b      	ldrb	r3, [r7, #13]
 8005950:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005954:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8005956:	4313      	orrs	r3, r2
 8005958:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800595a:	7b7b      	ldrb	r3, [r7, #13]
 800595c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005960:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8005962:	4313      	orrs	r3, r2
 8005964:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8005966:	7b7b      	ldrb	r3, [r7, #13]
 8005968:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800596c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800596e:	4313      	orrs	r3, r2
 8005970:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8005972:	7b7b      	ldrb	r3, [r7, #13]
 8005974:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005978:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 800597a:	4313      	orrs	r3, r2
 800597c:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 800597e:	2b01      	cmp	r3, #1
 8005980:	d163      	bne.n	8005a4a <ism330dhcx_gy_data_rate_set+0x1ae>

      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 8005982:	f107 030b 	add.w	r3, r7, #11
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 faeb 	bl	8005f64 <ism330dhcx_fsm_data_rate_get>
 800598e:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d159      	bne.n	8005a4a <ism330dhcx_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8005996:	7afb      	ldrb	r3, [r7, #11]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d853      	bhi.n	8005a44 <ism330dhcx_gy_data_rate_set+0x1a8>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <ism330dhcx_gy_data_rate_set+0x108>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059b5 	.word	0x080059b5
 80059a8:	080059c7 	.word	0x080059c7
 80059ac:	080059e5 	.word	0x080059e5
 80059b0:	08005a0f 	.word	0x08005a0f
          case ISM330DHCX_ODR_FSM_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF){
 80059b4:	78fb      	ldrb	r3, [r7, #3]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <ism330dhcx_gy_data_rate_set+0x124>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 80059be:	e045      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	75fb      	strb	r3, [r7, #23]
            break;
 80059c4:	e042      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 80059c6:	78fb      	ldrb	r3, [r7, #3]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <ism330dhcx_gy_data_rate_set+0x136>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80059cc:	2302      	movs	r3, #2
 80059ce:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 80059d0:	e03c      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d102      	bne.n	80059de <ism330dhcx_gy_data_rate_set+0x142>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 80059d8:	2302      	movs	r3, #2
 80059da:	75fb      	strb	r3, [r7, #23]
            break;
 80059dc:	e036      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80059de:	78fb      	ldrb	r3, [r7, #3]
 80059e0:	75fb      	strb	r3, [r7, #23]
            break;
 80059e2:	e033      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <ism330dhcx_gy_data_rate_set+0x154>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80059ea:	2303      	movs	r3, #3
 80059ec:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 80059ee:	e02d      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 80059f0:	78fb      	ldrb	r3, [r7, #3]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d102      	bne.n	80059fc <ism330dhcx_gy_data_rate_set+0x160>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 80059f6:	2303      	movs	r3, #3
 80059f8:	75fb      	strb	r3, [r7, #23]
            break;
 80059fa:	e027      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz){
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d102      	bne.n	8005a08 <ism330dhcx_gy_data_rate_set+0x16c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005a02:	2303      	movs	r3, #3
 8005a04:	75fb      	strb	r3, [r7, #23]
            break;
 8005a06:	e021      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	75fb      	strb	r3, [r7, #23]
            break;
 8005a0c:	e01e      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
          case ISM330DHCX_ODR_FSM_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <ism330dhcx_gy_data_rate_set+0x17e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005a14:	2304      	movs	r3, #4
 8005a16:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005a18:	e018      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 8005a1a:	78fb      	ldrb	r3, [r7, #3]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d102      	bne.n	8005a26 <ism330dhcx_gy_data_rate_set+0x18a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005a20:	2304      	movs	r3, #4
 8005a22:	75fb      	strb	r3, [r7, #23]
            break;
 8005a24:	e012      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_26Hz){
 8005a26:	78fb      	ldrb	r3, [r7, #3]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d102      	bne.n	8005a32 <ism330dhcx_gy_data_rate_set+0x196>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	75fb      	strb	r3, [r7, #23]
            break;
 8005a30:	e00c      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
            } else if (val == ISM330DHCX_GY_ODR_52Hz){
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d102      	bne.n	8005a3e <ism330dhcx_gy_data_rate_set+0x1a2>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005a38:	2304      	movs	r3, #4
 8005a3a:	75fb      	strb	r3, [r7, #23]
            break;
 8005a3c:	e006      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8005a3e:	78fb      	ldrb	r3, [r7, #3]
 8005a40:	75fb      	strb	r3, [r7, #23]
            break;
 8005a42:	e003      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	75fb      	strb	r3, [r7, #23]
            break;
 8005a48:	e000      	b.n	8005a4c <ism330dhcx_gy_data_rate_set+0x1b0>
        }
      }
 8005a4a:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	72bb      	strb	r3, [r7, #10]
  if (ret == 0) {
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d16d      	bne.n	8005b32 <ism330dhcx_gy_data_rate_set+0x296>
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8005a56:	f107 030a 	add.w	r3, r7, #10
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fac9 	bl	8005ff4 <ism330dhcx_mlc_get>
 8005a62:	6138      	str	r0, [r7, #16]
    if ( mlc_enable == PROPERTY_ENABLE ){
 8005a64:	7abb      	ldrb	r3, [r7, #10]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d163      	bne.n	8005b32 <ism330dhcx_gy_data_rate_set+0x296>

      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8005a6a:	f107 0309 	add.w	r3, r7, #9
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fae9 	bl	8006048 <ism330dhcx_mlc_data_rate_get>
 8005a76:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d159      	bne.n	8005b32 <ism330dhcx_gy_data_rate_set+0x296>
        switch (mlc_odr) {
 8005a7e:	7a7b      	ldrb	r3, [r7, #9]
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d853      	bhi.n	8005b2c <ism330dhcx_gy_data_rate_set+0x290>
 8005a84:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <ism330dhcx_gy_data_rate_set+0x1f0>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005aaf 	.word	0x08005aaf
 8005a94:	08005acd 	.word	0x08005acd
 8005a98:	08005af7 	.word	0x08005af7
          case ISM330DHCX_ODR_PRGS_12Hz5:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005a9c:	78fb      	ldrb	r3, [r7, #3]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <ism330dhcx_gy_data_rate_set+0x20c>
              odr_gy = ISM330DHCX_GY_ODR_12Hz5;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 8005aa6:	e045      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005aa8:	78fb      	ldrb	r3, [r7, #3]
 8005aaa:	75fb      	strb	r3, [r7, #23]
            break;
 8005aac:	e042      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_26Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005aae:	78fb      	ldrb	r3, [r7, #3]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d102      	bne.n	8005aba <ism330dhcx_gy_data_rate_set+0x21e>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005ab8:	e03c      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d102      	bne.n	8005ac6 <ism330dhcx_gy_data_rate_set+0x22a>
              odr_gy = ISM330DHCX_GY_ODR_26Hz;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ac4:	e036      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	75fb      	strb	r3, [r7, #23]
            break;
 8005aca:	e033      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_52Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d102      	bne.n	8005ad8 <ism330dhcx_gy_data_rate_set+0x23c>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005ad6:	e02d      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 8005ad8:	78fb      	ldrb	r3, [r7, #3]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d102      	bne.n	8005ae4 <ism330dhcx_gy_data_rate_set+0x248>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	75fb      	strb	r3, [r7, #23]
            break;
 8005ae2:	e027      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz){
 8005ae4:	78fb      	ldrb	r3, [r7, #3]
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d102      	bne.n	8005af0 <ism330dhcx_gy_data_rate_set+0x254>
              odr_gy = ISM330DHCX_GY_ODR_52Hz;
 8005aea:	2303      	movs	r3, #3
 8005aec:	75fb      	strb	r3, [r7, #23]
            break;
 8005aee:	e021      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005af0:	78fb      	ldrb	r3, [r7, #3]
 8005af2:	75fb      	strb	r3, [r7, #23]
            break;
 8005af4:	e01e      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
          case ISM330DHCX_ODR_PRGS_104Hz:

            if (val == ISM330DHCX_GY_ODR_OFF){
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <ism330dhcx_gy_data_rate_set+0x266>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005afc:	2304      	movs	r3, #4
 8005afe:	75fb      	strb	r3, [r7, #23]
              odr_gy = ISM330DHCX_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8005b00:	e018      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_12Hz5){
 8005b02:	78fb      	ldrb	r3, [r7, #3]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d102      	bne.n	8005b0e <ism330dhcx_gy_data_rate_set+0x272>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005b08:	2304      	movs	r3, #4
 8005b0a:	75fb      	strb	r3, [r7, #23]
            break;
 8005b0c:	e012      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_26Hz){
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d102      	bne.n	8005b1a <ism330dhcx_gy_data_rate_set+0x27e>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005b14:	2304      	movs	r3, #4
 8005b16:	75fb      	strb	r3, [r7, #23]
            break;
 8005b18:	e00c      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
            } else if (val == ISM330DHCX_GY_ODR_52Hz){
 8005b1a:	78fb      	ldrb	r3, [r7, #3]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d102      	bne.n	8005b26 <ism330dhcx_gy_data_rate_set+0x28a>
              odr_gy = ISM330DHCX_GY_ODR_104Hz;
 8005b20:	2304      	movs	r3, #4
 8005b22:	75fb      	strb	r3, [r7, #23]
            break;
 8005b24:	e006      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
              odr_gy = val;
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	75fb      	strb	r3, [r7, #23]
            break;
 8005b2a:	e003      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
          default:
            odr_gy = val;
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	75fb      	strb	r3, [r7, #23]
            break;
 8005b30:	e000      	b.n	8005b34 <ism330dhcx_gy_data_rate_set+0x298>
        }
      }
 8005b32:	bf00      	nop
    }
  }
  if (ret == 0) {
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d107      	bne.n	8005b4a <ism330dhcx_gy_data_rate_set+0x2ae>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005b3a:	f107 0208 	add.w	r2, r7, #8
 8005b3e:	2301      	movs	r3, #1
 8005b40:	2111      	movs	r1, #17
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fbcc 	bl	80052e0 <ism330dhcx_read_reg>
 8005b48:	6138      	str	r0, [r7, #16]
  }
  if(ret == 0){
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10f      	bne.n	8005b70 <ism330dhcx_gy_data_rate_set+0x2d4>
   ctrl2_g.odr_g= (uint8_t)odr_gy;
 8005b50:	7dfb      	ldrb	r3, [r7, #23]
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	7a3b      	ldrb	r3, [r7, #8]
 8005b5a:	f362 1307 	bfi	r3, r2, #4, #4
 8005b5e:	723b      	strb	r3, [r7, #8]
   ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005b60:	f107 0208 	add.w	r2, r7, #8
 8005b64:	2301      	movs	r3, #1
 8005b66:	2111      	movs	r1, #17
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff fbd1 	bl	8005310 <ism330dhcx_write_reg>
 8005b6e:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8005b70:	693b      	ldr	r3, [r7, #16]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop

08005b7c <ism330dhcx_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_gy_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_g_t *val)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
 8005b86:	f107 0208 	add.w	r2, r7, #8
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	2111      	movs	r1, #17
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff fba6 	bl	80052e0 <ism330dhcx_read_reg>
 8005b94:	60f8      	str	r0, [r7, #12]
  switch (ctrl2_g.odr_g){
 8005b96:	7a3b      	ldrb	r3, [r7, #8]
 8005b98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b0a      	cmp	r3, #10
 8005ba0:	d844      	bhi.n	8005c2c <ism330dhcx_gy_data_rate_get+0xb0>
 8005ba2:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <ism330dhcx_gy_data_rate_get+0x2c>)
 8005ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba8:	08005bd5 	.word	0x08005bd5
 8005bac:	08005bdd 	.word	0x08005bdd
 8005bb0:	08005be5 	.word	0x08005be5
 8005bb4:	08005bed 	.word	0x08005bed
 8005bb8:	08005bf5 	.word	0x08005bf5
 8005bbc:	08005bfd 	.word	0x08005bfd
 8005bc0:	08005c05 	.word	0x08005c05
 8005bc4:	08005c0d 	.word	0x08005c0d
 8005bc8:	08005c15 	.word	0x08005c15
 8005bcc:	08005c1d 	.word	0x08005c1d
 8005bd0:	08005c25 	.word	0x08005c25
    case ISM330DHCX_GY_ODR_OFF:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
      break;
 8005bda:	e02b      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_12Hz5:
      *val = ISM330DHCX_GY_ODR_12Hz5;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2201      	movs	r2, #1
 8005be0:	701a      	strb	r2, [r3, #0]
      break;
 8005be2:	e027      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_26Hz:
      *val = ISM330DHCX_GY_ODR_26Hz;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	2202      	movs	r2, #2
 8005be8:	701a      	strb	r2, [r3, #0]
      break;
 8005bea:	e023      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_52Hz:
      *val = ISM330DHCX_GY_ODR_52Hz;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	2203      	movs	r2, #3
 8005bf0:	701a      	strb	r2, [r3, #0]
      break;
 8005bf2:	e01f      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_104Hz:
      *val = ISM330DHCX_GY_ODR_104Hz;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	701a      	strb	r2, [r3, #0]
      break;
 8005bfa:	e01b      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_208Hz:
      *val = ISM330DHCX_GY_ODR_208Hz;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2205      	movs	r2, #5
 8005c00:	701a      	strb	r2, [r3, #0]
      break;
 8005c02:	e017      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_417Hz:
      *val = ISM330DHCX_GY_ODR_417Hz;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	2206      	movs	r2, #6
 8005c08:	701a      	strb	r2, [r3, #0]
      break;
 8005c0a:	e013      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_833Hz:
      *val = ISM330DHCX_GY_ODR_833Hz;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	2207      	movs	r2, #7
 8005c10:	701a      	strb	r2, [r3, #0]
      break;
 8005c12:	e00f      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_1667Hz:
      *val = ISM330DHCX_GY_ODR_1667Hz;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2208      	movs	r2, #8
 8005c18:	701a      	strb	r2, [r3, #0]
      break;
 8005c1a:	e00b      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_3333Hz:
      *val = ISM330DHCX_GY_ODR_3333Hz;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2209      	movs	r2, #9
 8005c20:	701a      	strb	r2, [r3, #0]
      break;
 8005c22:	e007      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    case ISM330DHCX_GY_ODR_6667Hz:
      *val = ISM330DHCX_GY_ODR_6667Hz;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	220a      	movs	r2, #10
 8005c28:	701a      	strb	r2, [r3, #0]
      break;
 8005c2a:	e003      	b.n	8005c34 <ism330dhcx_gy_data_rate_get+0xb8>
    default:
      *val = ISM330DHCX_GY_ODR_OFF;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	701a      	strb	r2, [r3, #0]
      break;
 8005c32:	bf00      	nop
  }
  return ret;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop

08005c40 <ism330dhcx_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005c4c:	f107 0208 	add.w	r2, r7, #8
 8005c50:	2301      	movs	r3, #1
 8005c52:	2112      	movs	r1, #18
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff fb43 	bl	80052e0 <ism330dhcx_read_reg>
 8005c5a:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10f      	bne.n	8005c82 <ism330dhcx_block_data_update_set+0x42>
    ctrl3_c.bdu= (uint8_t)val;
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	7a3b      	ldrb	r3, [r7, #8]
 8005c6c:	f362 1386 	bfi	r3, r2, #6, #1
 8005c70:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005c72:	f107 0208 	add.w	r2, r7, #8
 8005c76:	2301      	movs	r3, #1
 8005c78:	2112      	movs	r1, #18
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fb48 	bl	8005310 <ism330dhcx_write_reg>
 8005c80:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005c82:	68fb      	ldr	r3, [r7, #12]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <ism330dhcx_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_G, buff, 6);
 8005c96:	f107 020c 	add.w	r2, r7, #12
 8005c9a:	2306      	movs	r3, #6
 8005c9c:	2122      	movs	r1, #34	; 0x22
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff fb1e 	bl	80052e0 <ism330dhcx_read_reg>
 8005ca4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005ca6:	7b7b      	ldrb	r3, [r7, #13]
 8005ca8:	b21a      	sxth	r2, r3
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	7b3b      	ldrb	r3, [r7, #12]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	b21a      	sxth	r2, r3
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005cc8:	7bfa      	ldrb	r2, [r7, #15]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	3302      	adds	r3, #2
 8005cce:	b212      	sxth	r2, r2
 8005cd0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	3302      	adds	r3, #2
 8005cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	021b      	lsls	r3, r3, #8
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	3302      	adds	r3, #2
 8005cec:	b212      	sxth	r2, r2
 8005cee:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005cf0:	7c7a      	ldrb	r2, [r7, #17]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	b212      	sxth	r2, r2
 8005cf8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	7c3b      	ldrb	r3, [r7, #16]
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	4413      	add	r3, r2
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	3304      	adds	r3, #4
 8005d14:	b212      	sxth	r2, r2
 8005d16:	801a      	strh	r2, [r3, #0]

  return ret;
 8005d18:	697b      	ldr	r3, [r7, #20]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <ism330dhcx_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b086      	sub	sp, #24
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 8005d2c:	f107 020c 	add.w	r2, r7, #12
 8005d30:	2306      	movs	r3, #6
 8005d32:	2128      	movs	r1, #40	; 0x28
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff fad3 	bl	80052e0 <ism330dhcx_read_reg>
 8005d3a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005d3c:	7b7b      	ldrb	r3, [r7, #13]
 8005d3e:	b21a      	sxth	r2, r3
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	021b      	lsls	r3, r3, #8
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	7b3b      	ldrb	r3, [r7, #12]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	4413      	add	r3, r2
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	b21a      	sxth	r2, r3
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005d5e:	7bfa      	ldrb	r2, [r7, #15]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	3302      	adds	r3, #2
 8005d64:	b212      	sxth	r2, r2
 8005d66:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	b29a      	uxth	r2, r3
 8005d76:	7bbb      	ldrb	r3, [r7, #14]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	3302      	adds	r3, #2
 8005d82:	b212      	sxth	r2, r2
 8005d84:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005d86:	7c7a      	ldrb	r2, [r7, #17]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	b212      	sxth	r2, r2
 8005d8e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	3304      	adds	r3, #4
 8005d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	021b      	lsls	r3, r3, #8
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	7c3b      	ldrb	r3, [r7, #16]
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	3304      	adds	r3, #4
 8005daa:	b212      	sxth	r2, r2
 8005dac:	801a      	strh	r2, [r3, #0]

  return ret;
 8005dae:	697b      	ldr	r3, [r7, #20]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005dc4:	f107 0208 	add.w	r2, r7, #8
 8005dc8:	2301      	movs	r3, #1
 8005dca:	2101      	movs	r1, #1
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff fa87 	bl	80052e0 <ism330dhcx_read_reg>
 8005dd2:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&func_cfg_access, 1);
  if(ret == 0){
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10f      	bne.n	8005dfa <ism330dhcx_mem_bank_set+0x42>
    func_cfg_access.reg_access= (uint8_t)val;
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	7a3b      	ldrb	r3, [r7, #8]
 8005de4:	f362 1387 	bfi	r3, r2, #6, #2
 8005de8:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8005dea:	f107 0208 	add.w	r2, r7, #8
 8005dee:	2301      	movs	r3, #1
 8005df0:	2101      	movs	r1, #1
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7ff fa8c 	bl	8005310 <ism330dhcx_write_reg>
 8005df8:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&func_cfg_access, 1);
  }
  return ret;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 8005e0e:	2301      	movs	r3, #1
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	210f      	movs	r1, #15
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7ff fa63 	bl	80052e0 <ism330dhcx_read_reg>
 8005e1a:	60f8      	str	r0, [r7, #12]
  return ret;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005e32:	f107 0208 	add.w	r2, r7, #8
 8005e36:	2301      	movs	r3, #1
 8005e38:	2112      	movs	r1, #18
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7ff fa50 	bl	80052e0 <ism330dhcx_read_reg>
 8005e40:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10f      	bne.n	8005e68 <ism330dhcx_reset_set+0x42>
    ctrl3_c.sw_reset= (uint8_t)val;
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	7a3b      	ldrb	r3, [r7, #8]
 8005e52:	f362 0300 	bfi	r3, r2, #0, #1
 8005e56:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8005e58:	f107 0208 	add.w	r2, r7, #8
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	2112      	movs	r1, #18
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fa55 	bl	8005310 <ism330dhcx_write_reg>
 8005e66:	60f8      	str	r0, [r7, #12]
                               (uint8_t*)&ctrl3_c, 1);
  }
  return ret;
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <ism330dhcx_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005e7e:	f107 0208 	add.w	r2, r7, #8
 8005e82:	2301      	movs	r3, #1
 8005e84:	2112      	movs	r1, #18
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fa2a 	bl	80052e0 <ism330dhcx_read_reg>
 8005e8c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10f      	bne.n	8005eb4 <ism330dhcx_auto_increment_set+0x42>
    ctrl3_c.if_inc= (uint8_t)val;
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	b2da      	uxtb	r2, r3
 8005e9c:	7a3b      	ldrb	r3, [r7, #8]
 8005e9e:	f362 0382 	bfi	r3, r2, #2, #1
 8005ea2:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
 8005ea4:	f107 0208 	add.w	r2, r7, #8
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	2112      	movs	r1, #18
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fa2f 	bl	8005310 <ism330dhcx_write_reg>
 8005eb2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                ism330dhcx_fifo_mode_t val)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b084      	sub	sp, #16
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;

  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005eca:	f107 0208 	add.w	r2, r7, #8
 8005ece:	2301      	movs	r3, #1
 8005ed0:	210a      	movs	r1, #10
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff fa04 	bl	80052e0 <ism330dhcx_read_reg>
 8005ed8:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&fifo_ctrl4, 1);
  if(ret == 0){
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10f      	bne.n	8005f00 <ism330dhcx_fifo_mode_set+0x42>
    fifo_ctrl4.fifo_mode= (uint8_t)val;
 8005ee0:	78fb      	ldrb	r3, [r7, #3]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	7a3b      	ldrb	r3, [r7, #8]
 8005eea:	f362 0302 	bfi	r3, r2, #0, #3
 8005eee:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8005ef0:	f107 0208 	add.w	r2, r7, #8
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	210a      	movs	r1, #10
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7ff fa09 	bl	8005310 <ism330dhcx_write_reg>
 8005efe:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&fifo_ctrl4, 1);
  }
  return ret;
 8005f00:	68fb      	ldr	r3, [r7, #12]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                 ism330dhcx_emb_fsm_enable_t *val)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005f14:	2102      	movs	r1, #2
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff ff4e 	bl	8005db8 <ism330dhcx_mem_bank_set>
 8005f1c:	60f8      	str	r0, [r7, #12]
  if(ret == 0){
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <ism330dhcx_fsm_enable_get+0x28>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                             (uint8_t*)&val->fsm_enable_a, 1);
 8005f24:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8005f26:	2301      	movs	r3, #1
 8005f28:	2146      	movs	r1, #70	; 0x46
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7ff f9d8 	bl	80052e0 <ism330dhcx_read_reg>
 8005f30:	60f8      	str	r0, [r7, #12]
  }
  if(ret == 0){
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d107      	bne.n	8005f48 <ism330dhcx_fsm_enable_get+0x3e>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                             (uint8_t*)&val->fsm_enable_b, 1);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	2147      	movs	r1, #71	; 0x47
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff f9cd 	bl	80052e0 <ism330dhcx_read_reg>
 8005f46:	60f8      	str	r0, [r7, #12]
  }
  if(ret == 0){
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d104      	bne.n	8005f58 <ism330dhcx_fsm_enable_get+0x4e>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005f4e:	2100      	movs	r1, #0
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7ff ff31 	bl	8005db8 <ism330dhcx_mem_bank_set>
 8005f56:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8005f58:	68fb      	ldr	r3, [r7, #12]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                    ism330dhcx_fsm_odr_t *val)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005f6e:	2102      	movs	r1, #2
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff ff21 	bl	8005db8 <ism330dhcx_mem_bank_set>
 8005f76:	60f8      	str	r0, [r7, #12]

  if(ret == 0){
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d107      	bne.n	8005f8e <ism330dhcx_fsm_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8005f7e:	f107 0208 	add.w	r2, r7, #8
 8005f82:	2301      	movs	r3, #1
 8005f84:	215f      	movs	r1, #95	; 0x5f
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff f9aa 	bl	80052e0 <ism330dhcx_read_reg>
 8005f8c:	60f8      	str	r0, [r7, #12]
                             (uint8_t*)&emb_func_odr_cfg_b, 1);
  }
  if(ret == 0){
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <ism330dhcx_fsm_data_rate_get+0x3a>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8005f94:	2100      	movs	r1, #0
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff ff0e 	bl	8005db8 <ism330dhcx_mem_bank_set>
 8005f9c:	60f8      	str	r0, [r7, #12]
  }
  switch (emb_func_odr_cfg_b.fsm_odr){
 8005f9e:	7a3b      	ldrb	r3, [r7, #8]
 8005fa0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d81a      	bhi.n	8005fe0 <ism330dhcx_fsm_data_rate_get+0x7c>
 8005faa:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08005fc1 	.word	0x08005fc1
 8005fb4:	08005fc9 	.word	0x08005fc9
 8005fb8:	08005fd1 	.word	0x08005fd1
 8005fbc:	08005fd9 	.word	0x08005fd9
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	701a      	strb	r2, [r3, #0]
      break;
 8005fc6:	e00f      	b.n	8005fe8 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	701a      	strb	r2, [r3, #0]
      break;
 8005fce:	e00b      	b.n	8005fe8 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	701a      	strb	r2, [r3, #0]
      break;
 8005fd6:	e007      	b.n	8005fe8 <ism330dhcx_fsm_data_rate_get+0x84>
    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2203      	movs	r2, #3
 8005fdc:	701a      	strb	r2, [r3, #0]
      break;
 8005fde:	e003      	b.n	8005fe8 <ism330dhcx_fsm_data_rate_get+0x84>
    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
      break;
 8005fe6:	bf00      	nop
  }
  return ret;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop

08005ff4 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8005ffe:	2102      	movs	r1, #2
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff fed9 	bl	8005db8 <ism330dhcx_mem_bank_set>
 8006006:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d107      	bne.n	800601e <ism330dhcx_mlc_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 800600e:	f107 0208 	add.w	r2, r7, #8
 8006012:	2301      	movs	r3, #1
 8006014:	2105      	movs	r1, #5
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff f962 	bl	80052e0 <ism330dhcx_read_reg>
 800601c:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <ism330dhcx_mlc_get+0x48>
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8006024:	2100      	movs	r1, #0
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff fec6 	bl	8005db8 <ism330dhcx_mem_bank_set>
 800602c:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 800602e:	7a3b      	ldrb	r3, [r7, #8]
 8006030:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 800603c:	68fb      	ldr	r3, [r7, #12]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                   ism330dhcx_mlc_odr_t *val)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;

  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8006052:	2102      	movs	r1, #2
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff feaf 	bl	8005db8 <ism330dhcx_mem_bank_set>
 800605a:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d107      	bne.n	8006072 <ism330dhcx_mlc_data_rate_get+0x2a>
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8006062:	f107 0208 	add.w	r2, r7, #8
 8006066:	2301      	movs	r3, #1
 8006068:	2160      	movs	r1, #96	; 0x60
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f7ff f938 	bl	80052e0 <ism330dhcx_read_reg>
 8006070:	60f8      	str	r0, [r7, #12]
                              (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d12a      	bne.n	80060ce <ism330dhcx_mlc_data_rate_get+0x86>
    switch (reg.mlc_odr) {
 8006078:	7a3b      	ldrb	r3, [r7, #8]
 800607a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b03      	cmp	r3, #3
 8006082:	d81b      	bhi.n	80060bc <ism330dhcx_mlc_data_rate_get+0x74>
 8006084:	a201      	add	r2, pc, #4	; (adr r2, 800608c <ism330dhcx_mlc_data_rate_get+0x44>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	0800609d 	.word	0x0800609d
 8006090:	080060a5 	.word	0x080060a5
 8006094:	080060ad 	.word	0x080060ad
 8006098:	080060b5 	.word	0x080060b5
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
        break;
 80060a2:	e00f      	b.n	80060c4 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
        break;
 80060aa:	e00b      	b.n	80060c4 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2202      	movs	r2, #2
 80060b0:	701a      	strb	r2, [r3, #0]
        break;
 80060b2:	e007      	b.n	80060c4 <ism330dhcx_mlc_data_rate_get+0x7c>
      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2203      	movs	r2, #3
 80060b8:	701a      	strb	r2, [r3, #0]
        break;
 80060ba:	e003      	b.n	80060c4 <ism330dhcx_mlc_data_rate_get+0x7c>
      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
        break;
 80060c2:	bf00      	nop
    }
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80060c4:	2100      	movs	r1, #0
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fe76 	bl	8005db8 <ism330dhcx_mem_bank_set>
 80060cc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80060ce:	68fb      	ldr	r3, [r7, #12]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	795a      	ldrb	r2, [r3, #5]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2232      	movs	r2, #50	; 0x32
 80060ec:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	799b      	ldrb	r3, [r3, #6]
 80060f2:	3b80      	subs	r3, #128	; 0x80
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	719a      	strb	r2, [r3, #6]
}
 80060fa:	bf00      	nop
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 8006110:	4b09      	ldr	r3, [pc, #36]	; (8006138 <INIT_STREAMING_HEADER+0x30>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2232      	movs	r2, #50	; 0x32
 800611e:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2208      	movs	r2, #8
 8006124:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2203      	movs	r2, #3
 800612a:	601a      	str	r2, [r3, #0]
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	200000a4 	.word	0x200000a4

0800613c <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SouceAddr | CMD | PAYLOAD
 *      1          1        1       N
 */
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b098      	sub	sp, #96	; 0x60
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8006144:	2301      	movs	r3, #1
 8006146:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d801      	bhi.n	8006158 <HandleMSG+0x1c>
  {
    return 0;
 8006154:	2300      	movs	r3, #0
 8006156:	e2e9      	b.n	800672c <HandleMSG+0x5f0>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	791b      	ldrb	r3, [r3, #4]
 800615c:	2b32      	cmp	r3, #50	; 0x32
 800615e:	d001      	beq.n	8006164 <HandleMSG+0x28>
  {
    return 0;
 8006160:	2300      	movs	r3, #0
 8006162:	e2e3      	b.n	800672c <HandleMSG+0x5f0>
  }

  switch (Msg->Data[2])   /* CMD */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	799b      	ldrb	r3, [r3, #6]
 8006168:	2b7a      	cmp	r3, #122	; 0x7a
 800616a:	f000 8098 	beq.w	800629e <HandleMSG+0x162>
 800616e:	2b7a      	cmp	r3, #122	; 0x7a
 8006170:	f300 82d8 	bgt.w	8006724 <HandleMSG+0x5e8>
 8006174:	2b12      	cmp	r3, #18
 8006176:	dc2d      	bgt.n	80061d4 <HandleMSG+0x98>
 8006178:	2b00      	cmp	r3, #0
 800617a:	f340 82d3 	ble.w	8006724 <HandleMSG+0x5e8>
 800617e:	3b01      	subs	r3, #1
 8006180:	2b11      	cmp	r3, #17
 8006182:	f200 82cf 	bhi.w	8006724 <HandleMSG+0x5e8>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <HandleMSG+0x50>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061db 	.word	0x080061db
 8006190:	08006215 	.word	0x08006215
 8006194:	08006725 	.word	0x08006725
 8006198:	08006725 	.word	0x08006725
 800619c:	08006725 	.word	0x08006725
 80061a0:	08006725 	.word	0x08006725
 80061a4:	080066e9 	.word	0x080066e9
 80061a8:	080062cd 	.word	0x080062cd
 80061ac:	08006343 	.word	0x08006343
 80061b0:	08006725 	.word	0x08006725
 80061b4:	08006725 	.word	0x08006725
 80061b8:	08006381 	.word	0x08006381
 80061bc:	08006725 	.word	0x08006725
 80061c0:	080061fb 	.word	0x080061fb
 80061c4:	08006725 	.word	0x08006725
 80061c8:	080063c7 	.word	0x080063c7
 80061cc:	08006639 	.word	0x08006639
 80061d0:	08006687 	.word	0x08006687
 80061d4:	2b76      	cmp	r3, #118	; 0x76
 80061d6:	d04b      	beq.n	8006270 <HandleMSG+0x134>
 80061d8:	e2a4      	b.n	8006724 <HandleMSG+0x5e8>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d001      	beq.n	80061e6 <HandleMSG+0xaa>
      {
        return 0;
 80061e2:	2300      	movs	r3, #0
 80061e4:	e2a2      	b.n	800672c <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff ff76 	bl	80060d8 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2203      	movs	r2, #3
 80061f0:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fb fbe6 	bl	80019c4 <UART_SendMsg>
      break;
 80061f8:	e297      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d001      	beq.n	8006206 <HandleMSG+0xca>
      {
        return 0;
 8006202:	2300      	movs	r3, #0
 8006204:	e292      	b.n	800672c <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7ff ff66 	bl	80060d8 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2203      	movs	r2, #3
 8006210:	601a      	str	r2, [r3, #0]
      break;
 8006212:	e28a      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b03      	cmp	r3, #3
 800621a:	d001      	beq.n	8006220 <HandleMSG+0xe4>
      {
        return 0;
 800621c:	2300      	movs	r3, #0
 800621e:	e285      	b.n	800672c <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff ff59 	bl	80060d8 <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 8006226:	f107 020c 	add.w	r2, r7, #12
 800622a:	f107 0310 	add.w	r3, r7, #16
 800622e:	4611      	mov	r1, r2
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fad7 	bl	80067e4 <Get_PresentationString>

      i = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800623a:	e00d      	b.n	8006258 <HandleMSG+0x11c>
      {
        Msg->Data[3U + i] = ps[i];
 800623c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800623e:	3303      	adds	r3, #3
 8006240:	f107 0110 	add.w	r1, r7, #16
 8006244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006246:	440a      	add	r2, r1
 8006248:	7811      	ldrb	r1, [r2, #0]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	4413      	add	r3, r2
 800624e:	460a      	mov	r2, r1
 8006250:	711a      	strb	r2, [r3, #4]
        i++;
 8006252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006254:	3301      	adds	r3, #1
 8006256:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800625c:	429a      	cmp	r2, r3
 800625e:	d3ed      	bcc.n	800623c <HandleMSG+0x100>
      }

      Msg->Len = 3U + i;
 8006260:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006262:	1cda      	adds	r2, r3, #3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7fb fbab 	bl	80019c4 <UART_SendMsg>
      break;
 800626e:	e25c      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b02      	cmp	r3, #2
 8006276:	d801      	bhi.n	800627c <HandleMSG+0x140>
      {
        return 0;
 8006278:	2300      	movs	r3, #0
 800627a:	e257      	b.n	800672c <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ff2b 	bl	80060d8 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3307      	adds	r3, #7
 8006286:	2204      	movs	r2, #4
 8006288:	210f      	movs	r1, #15
 800628a:	4618      	mov	r0, r3
 800628c:	f7fc fa22 	bl	80026d4 <Serialize_s32>
      Msg->Len = 3 + 4;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2207      	movs	r2, #7
 8006294:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fb fb94 	bl	80019c4 <UART_SendMsg>
      break;
 800629c:	e245      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d801      	bhi.n	80062aa <HandleMSG+0x16e>
      {
        return 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	e240      	b.n	800672c <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff ff14 	bl	80060d8 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3307      	adds	r3, #7
 80062b4:	2204      	movs	r2, #4
 80062b6:	2104      	movs	r1, #4
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fc fa0b 	bl	80026d4 <Serialize_s32>
      Msg->Len = 3 + 4;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2207      	movs	r2, #7
 80062c2:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7fb fb7d 	bl	80019c4 <UART_SendMsg>
      break;
 80062ca:	e22e      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b02      	cmp	r3, #2
 80062d2:	d801      	bhi.n	80062d8 <HandleMSG+0x19c>
      {
        return 0;
 80062d4:	2300      	movs	r3, #0
 80062d6:	e229      	b.n	800672c <HandleMSG+0x5f0>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3307      	adds	r3, #7
 80062dc:	2104      	movs	r1, #4
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fc f9d2 	bl	8002688 <Deserialize>
 80062e4:	4603      	mov	r3, r0
 80062e6:	4a3f      	ldr	r2, [pc, #252]	; (80063e4 <HandleMSG+0x2a8>)
 80062e8:	6013      	str	r3, [r2, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 80062ea:	4b3e      	ldr	r3, [pc, #248]	; (80063e4 <HandleMSG+0x2a8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0310 	and.w	r3, r3, #16
 80062f2:	2b10      	cmp	r3, #16
 80062f4:	d101      	bne.n	80062fa <HandleMSG+0x1be>
      {
        BSP_SENSOR_ACC_Enable();
 80062f6:	f7fb fdcd 	bl	8001e94 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 80062fa:	4b3a      	ldr	r3, [pc, #232]	; (80063e4 <HandleMSG+0x2a8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b20      	cmp	r3, #32
 8006304:	d101      	bne.n	800630a <HandleMSG+0x1ce>
      {
        BSP_SENSOR_GYR_Enable();
 8006306:	f7fb fdcd 	bl	8001ea4 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800630a:	4b36      	ldr	r3, [pc, #216]	; (80063e4 <HandleMSG+0x2a8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006312:	2b40      	cmp	r3, #64	; 0x40
 8006314:	d101      	bne.n	800631a <HandleMSG+0x1de>
      {
        BSP_SENSOR_MAG_Enable();
 8006316:	f7fb fdcd 	bl	8001eb4 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 800631a:	4833      	ldr	r0, [pc, #204]	; (80063e8 <HandleMSG+0x2ac>)
 800631c:	f006 fe4c 	bl	800cfb8 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 8006320:	4b32      	ldr	r3, [pc, #200]	; (80063ec <HandleMSG+0x2b0>)
 8006322:	2201      	movs	r2, #1
 8006324:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	795a      	ldrb	r2, [r3, #5]
 800632a:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <HandleMSG+0x2b4>)
 800632c:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff fed2 	bl	80060d8 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2203      	movs	r2, #3
 8006338:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7fb fb42 	bl	80019c4 <UART_SendMsg>
      break;
 8006340:	e1f3      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d801      	bhi.n	800634e <HandleMSG+0x212>
      {
        return 0;
 800634a:	2300      	movs	r3, #0
 800634c:	e1ee      	b.n	800672c <HandleMSG+0x5f0>
      }

      DataLoggerActive = 0;
 800634e:	4b27      	ldr	r3, [pc, #156]	; (80063ec <HandleMSG+0x2b0>)
 8006350:	2200      	movs	r2, #0
 8006352:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8006354:	4824      	ldr	r0, [pc, #144]	; (80063e8 <HandleMSG+0x2ac>)
 8006356:	f006 fecf 	bl	800d0f8 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 800635a:	f7fb fdb3 	bl	8001ec4 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 800635e:	f7fb fdb9 	bl	8001ed4 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 8006362:	f7fb fdbf 	bl	8001ee4 <BSP_SENSOR_MAG_Disable>

      SensorsEnabled = 0;
 8006366:	4b1f      	ldr	r3, [pc, #124]	; (80063e4 <HandleMSG+0x2a8>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 800636c:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <HandleMSG+0x2b8>)
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff feb0 	bl	80060d8 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7fb fb23 	bl	80019c4 <UART_SendMsg>
      break;
 800637e:	e1d4      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d801      	bhi.n	800638c <HandleMSG+0x250>
      {
        return 0;
 8006388:	2300      	movs	r3, #0
 800638a:	e1cf      	b.n	800672c <HandleMSG+0x5f0>
      }

      BUILD_REPLY_HEADER(Msg);
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff fea3 	bl	80060d8 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2203      	movs	r2, #3
 8006396:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	79d8      	ldrb	r0, [r3, #7]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	7a19      	ldrb	r1, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7a5b      	ldrb	r3, [r3, #9]
 80063a4:	461a      	mov	r2, r3
 80063a6:	f000 f9f3 	bl	8006790 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	7a98      	ldrb	r0, [r3, #10]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	7ad9      	ldrb	r1, [r3, #11]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	7b1a      	ldrb	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7b5b      	ldrb	r3, [r3, #13]
 80063ba:	f000 f9bf 	bl	800673c <RTC_DateRegulate>
      UART_SendMsg(Msg);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f7fb fb00 	bl	80019c4 <UART_SendMsg>
      break;
 80063c4:	e1b1      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b36      	cmp	r3, #54	; 0x36
 80063cc:	d801      	bhi.n	80063d2 <HandleMSG+0x296>
      {
        return 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e1ac      	b.n	800672c <HandleMSG+0x5f0>
      }

      msg_offset = 4;
 80063d2:	2304      	movs	r3, #4
 80063d4:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	79db      	ldrb	r3, [r3, #7]
 80063da:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 80063dc:	2300      	movs	r3, #0
 80063de:	65bb      	str	r3, [r7, #88]	; 0x58
 80063e0:	e11b      	b.n	800661a <HandleMSG+0x4de>
 80063e2:	bf00      	nop
 80063e4:	20000584 	.word	0x20000584
 80063e8:	2000240c 	.word	0x2000240c
 80063ec:	20000581 	.word	0x20000581
 80063f0:	200000a4 	.word	0x200000a4
 80063f4:	20000589 	.word	0x20000589
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 80063f8:	4ba6      	ldr	r3, [pc, #664]	; (8006694 <HandleMSG+0x558>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2234      	movs	r2, #52	; 0x34
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	4aa5      	ldr	r2, [pc, #660]	; (8006698 <HandleMSG+0x55c>)
 8006404:	4413      	add	r3, r2
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800640a:	440a      	add	r2, r1
 800640c:	3204      	adds	r2, #4
 800640e:	7812      	ldrb	r2, [r2, #0]
 8006410:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 8006412:	4ba0      	ldr	r3, [pc, #640]	; (8006694 <HandleMSG+0x558>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2234      	movs	r2, #52	; 0x34
 8006418:	fb02 f303 	mul.w	r3, r2, r3
 800641c:	4a9e      	ldr	r2, [pc, #632]	; (8006698 <HandleMSG+0x55c>)
 800641e:	4413      	add	r3, r2
 8006420:	3301      	adds	r3, #1
 8006422:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006424:	3201      	adds	r2, #1
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	440a      	add	r2, r1
 800642a:	3204      	adds	r2, #4
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 8006430:	4b98      	ldr	r3, [pc, #608]	; (8006694 <HandleMSG+0x558>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2234      	movs	r2, #52	; 0x34
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	4a97      	ldr	r2, [pc, #604]	; (8006698 <HandleMSG+0x55c>)
 800643c:	4413      	add	r3, r2
 800643e:	3302      	adds	r3, #2
 8006440:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006442:	3202      	adds	r2, #2
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	440a      	add	r2, r1
 8006448:	3204      	adds	r2, #4
 800644a:	7812      	ldrb	r2, [r2, #0]
 800644c:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 800644e:	4b91      	ldr	r3, [pc, #580]	; (8006694 <HandleMSG+0x558>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2234      	movs	r2, #52	; 0x34
 8006454:	fb02 f303 	mul.w	r3, r2, r3
 8006458:	4a8f      	ldr	r2, [pc, #572]	; (8006698 <HandleMSG+0x55c>)
 800645a:	4413      	add	r3, r2
 800645c:	3303      	adds	r3, #3
 800645e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006460:	3203      	adds	r2, #3
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	440a      	add	r2, r1
 8006466:	3204      	adds	r2, #4
 8006468:	7812      	ldrb	r2, [r2, #0]
 800646a:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 800646c:	4b89      	ldr	r3, [pc, #548]	; (8006694 <HandleMSG+0x558>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2234      	movs	r2, #52	; 0x34
 8006472:	fb02 f303 	mul.w	r3, r2, r3
 8006476:	4a88      	ldr	r2, [pc, #544]	; (8006698 <HandleMSG+0x55c>)
 8006478:	4413      	add	r3, r2
 800647a:	3304      	adds	r3, #4
 800647c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800647e:	3204      	adds	r2, #4
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	440a      	add	r2, r1
 8006484:	3204      	adds	r2, #4
 8006486:	6812      	ldr	r2, [r2, #0]
 8006488:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 800648a:	4b82      	ldr	r3, [pc, #520]	; (8006694 <HandleMSG+0x558>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2234      	movs	r2, #52	; 0x34
 8006490:	fb02 f303 	mul.w	r3, r2, r3
 8006494:	3308      	adds	r3, #8
 8006496:	4a80      	ldr	r2, [pc, #512]	; (8006698 <HandleMSG+0x55c>)
 8006498:	4413      	add	r3, r2
 800649a:	3304      	adds	r3, #4
 800649c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800649e:	3208      	adds	r2, #8
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	440a      	add	r2, r1
 80064a4:	3204      	adds	r2, #4
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 80064aa:	4b7a      	ldr	r3, [pc, #488]	; (8006694 <HandleMSG+0x558>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2234      	movs	r2, #52	; 0x34
 80064b0:	fb02 f303 	mul.w	r3, r2, r3
 80064b4:	3308      	adds	r3, #8
 80064b6:	4a78      	ldr	r2, [pc, #480]	; (8006698 <HandleMSG+0x55c>)
 80064b8:	4413      	add	r3, r2
 80064ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064bc:	320c      	adds	r2, #12
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	440a      	add	r2, r1
 80064c2:	3204      	adds	r2, #4
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 80064c8:	4b72      	ldr	r3, [pc, #456]	; (8006694 <HandleMSG+0x558>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2234      	movs	r2, #52	; 0x34
 80064ce:	fb02 f303 	mul.w	r3, r2, r3
 80064d2:	3310      	adds	r3, #16
 80064d4:	4a70      	ldr	r2, [pc, #448]	; (8006698 <HandleMSG+0x55c>)
 80064d6:	4413      	add	r3, r2
 80064d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064da:	3210      	adds	r2, #16
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	440a      	add	r2, r1
 80064e0:	3204      	adds	r2, #4
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 80064e6:	4b6b      	ldr	r3, [pc, #428]	; (8006694 <HandleMSG+0x558>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2234      	movs	r2, #52	; 0x34
 80064ec:	fb02 f303 	mul.w	r3, r2, r3
 80064f0:	3310      	adds	r3, #16
 80064f2:	4a69      	ldr	r2, [pc, #420]	; (8006698 <HandleMSG+0x55c>)
 80064f4:	4413      	add	r3, r2
 80064f6:	3304      	adds	r3, #4
 80064f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064fa:	3214      	adds	r2, #20
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	440a      	add	r2, r1
 8006500:	3204      	adds	r2, #4
 8006502:	6812      	ldr	r2, [r2, #0]
 8006504:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 8006506:	4b63      	ldr	r3, [pc, #396]	; (8006694 <HandleMSG+0x558>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2234      	movs	r2, #52	; 0x34
 800650c:	fb02 f303 	mul.w	r3, r2, r3
 8006510:	3318      	adds	r3, #24
 8006512:	4a61      	ldr	r2, [pc, #388]	; (8006698 <HandleMSG+0x55c>)
 8006514:	4413      	add	r3, r2
 8006516:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006518:	3218      	adds	r2, #24
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	440a      	add	r2, r1
 800651e:	3204      	adds	r2, #4
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 8006524:	4b5b      	ldr	r3, [pc, #364]	; (8006694 <HandleMSG+0x558>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2234      	movs	r2, #52	; 0x34
 800652a:	fb02 f303 	mul.w	r3, r2, r3
 800652e:	3318      	adds	r3, #24
 8006530:	4a59      	ldr	r2, [pc, #356]	; (8006698 <HandleMSG+0x55c>)
 8006532:	4413      	add	r3, r2
 8006534:	3304      	adds	r3, #4
 8006536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006538:	321c      	adds	r2, #28
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	440a      	add	r2, r1
 800653e:	3204      	adds	r2, #4
 8006540:	6812      	ldr	r2, [r2, #0]
 8006542:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 8006544:	4b53      	ldr	r3, [pc, #332]	; (8006694 <HandleMSG+0x558>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2234      	movs	r2, #52	; 0x34
 800654a:	fb02 f303 	mul.w	r3, r2, r3
 800654e:	3320      	adds	r3, #32
 8006550:	4a51      	ldr	r2, [pc, #324]	; (8006698 <HandleMSG+0x55c>)
 8006552:	4413      	add	r3, r2
 8006554:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006556:	3220      	adds	r2, #32
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	440a      	add	r2, r1
 800655c:	3204      	adds	r2, #4
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 8006562:	4b4c      	ldr	r3, [pc, #304]	; (8006694 <HandleMSG+0x558>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2234      	movs	r2, #52	; 0x34
 8006568:	fb02 f303 	mul.w	r3, r2, r3
 800656c:	3320      	adds	r3, #32
 800656e:	4a4a      	ldr	r2, [pc, #296]	; (8006698 <HandleMSG+0x55c>)
 8006570:	4413      	add	r3, r2
 8006572:	3304      	adds	r3, #4
 8006574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006576:	3224      	adds	r2, #36	; 0x24
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	440a      	add	r2, r1
 800657c:	3204      	adds	r2, #4
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 8006582:	4b44      	ldr	r3, [pc, #272]	; (8006694 <HandleMSG+0x558>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2234      	movs	r2, #52	; 0x34
 8006588:	fb02 f303 	mul.w	r3, r2, r3
 800658c:	3328      	adds	r3, #40	; 0x28
 800658e:	4a42      	ldr	r2, [pc, #264]	; (8006698 <HandleMSG+0x55c>)
 8006590:	4413      	add	r3, r2
 8006592:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006594:	3228      	adds	r2, #40	; 0x28
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	440a      	add	r2, r1
 800659a:	3204      	adds	r2, #4
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 80065a0:	4b3c      	ldr	r3, [pc, #240]	; (8006694 <HandleMSG+0x558>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2234      	movs	r2, #52	; 0x34
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	3328      	adds	r3, #40	; 0x28
 80065ac:	4a3a      	ldr	r2, [pc, #232]	; (8006698 <HandleMSG+0x55c>)
 80065ae:	4413      	add	r3, r2
 80065b0:	3304      	adds	r3, #4
 80065b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065b4:	322c      	adds	r2, #44	; 0x2c
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	440a      	add	r2, r1
 80065ba:	3204      	adds	r2, #4
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 80065c0:	4b34      	ldr	r3, [pc, #208]	; (8006694 <HandleMSG+0x558>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2234      	movs	r2, #52	; 0x34
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	3330      	adds	r3, #48	; 0x30
 80065cc:	4a32      	ldr	r2, [pc, #200]	; (8006698 <HandleMSG+0x55c>)
 80065ce:	4413      	add	r3, r2
 80065d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065d2:	3230      	adds	r2, #48	; 0x30
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	440a      	add	r2, r1
 80065d8:	3204      	adds	r2, #4
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 80065de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e0:	3334      	adds	r3, #52	; 0x34
 80065e2:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 80065e4:	4b2d      	ldr	r3, [pc, #180]	; (800669c <HandleMSG+0x560>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3301      	adds	r3, #1
 80065ea:	4a2c      	ldr	r2, [pc, #176]	; (800669c <HandleMSG+0x560>)
 80065ec:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 80065ee:	4b2b      	ldr	r3, [pc, #172]	; (800669c <HandleMSG+0x560>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	dd02      	ble.n	80065fc <HandleMSG+0x4c0>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 80065f6:	4b29      	ldr	r3, [pc, #164]	; (800669c <HandleMSG+0x560>)
 80065f8:	2208      	movs	r2, #8
 80065fa:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <HandleMSG+0x558>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	4a24      	ldr	r2, [pc, #144]	; (8006694 <HandleMSG+0x558>)
 8006604:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 8006606:	4b23      	ldr	r3, [pc, #140]	; (8006694 <HandleMSG+0x558>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2b07      	cmp	r3, #7
 800660c:	dd02      	ble.n	8006614 <HandleMSG+0x4d8>
        {
          OfflineDataWriteIndex = 0;
 800660e:	4b21      	ldr	r3, [pc, #132]	; (8006694 <HandleMSG+0x558>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 8006614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006616:	3301      	adds	r3, #1
 8006618:	65bb      	str	r3, [r7, #88]	; 0x58
 800661a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800661c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800661e:	429a      	cmp	r2, r3
 8006620:	f4ff aeea 	bcc.w	80063f8 <HandleMSG+0x2bc>
        }
      }

      SensorReadRequest = 1;
 8006624:	4b1e      	ldr	r3, [pc, #120]	; (80066a0 <HandleMSG+0x564>)
 8006626:	2201      	movs	r2, #1
 8006628:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff fd54 	bl	80060d8 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2203      	movs	r2, #3
 8006634:	601a      	str	r2, [r3, #0]
      break;
 8006636:	e078      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b03      	cmp	r3, #3
 800663e:	d801      	bhi.n	8006644 <HandleMSG+0x508>
      {
        return 0;
 8006640:	2300      	movs	r3, #0
 8006642:	e073      	b.n	800672c <HandleMSG+0x5f0>
      }

      if (Msg->Data[3] == 1U)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	79db      	ldrb	r3, [r3, #7]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d10e      	bne.n	800666a <HandleMSG+0x52e>
      {
        UseOfflineData = 1U;
 800664c:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <HandleMSG+0x568>)
 800664e:	2201      	movs	r2, #1
 8006650:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 8006652:	4b15      	ldr	r3, [pc, #84]	; (80066a8 <HandleMSG+0x56c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a15      	ldr	r2, [pc, #84]	; (80066ac <HandleMSG+0x570>)
 8006658:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 800665a:	4b13      	ldr	r3, [pc, #76]	; (80066a8 <HandleMSG+0x56c>)
 800665c:	f04f 32ff 	mov.w	r2, #4294967295
 8006660:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8006662:	4813      	ldr	r0, [pc, #76]	; (80066b0 <HandleMSG+0x574>)
 8006664:	f006 fd48 	bl	800d0f8 <HAL_TIM_Base_Stop_IT>
 8006668:	e006      	b.n	8006678 <HandleMSG+0x53c>
      }
      else
      {
        UseOfflineData = 0U;
 800666a:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <HandleMSG+0x568>)
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 8006670:	4b0e      	ldr	r3, [pc, #56]	; (80066ac <HandleMSG+0x570>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <HandleMSG+0x56c>)
 8006676:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fd2d 	bl	80060d8 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fb f9a0 	bl	80019c4 <UART_SendMsg>
      break;
 8006684:	e051      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d812      	bhi.n	80066b4 <HandleMSG+0x578>
      {
        return 0;
 800668e:	2300      	movs	r3, #0
 8006690:	e04c      	b.n	800672c <HandleMSG+0x5f0>
 8006692:	bf00      	nop
 8006694:	20000590 	.word	0x20000590
 8006698:	20001e40 	.word	0x20001e40
 800669c:	20000594 	.word	0x20000594
 80066a0:	20000588 	.word	0x20000588
 80066a4:	20000589 	.word	0x20000589
 80066a8:	20000584 	.word	0x20000584
 80066ac:	20001e34 	.word	0x20001e34
 80066b0:	2000240c 	.word	0x2000240c
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3307      	adds	r3, #7
 80066b8:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <HandleMSG+0x5f8>)
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	4611      	mov	r1, r2
 80066be:	2204      	movs	r2, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fc f807 	bl	80026d4 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	330b      	adds	r3, #11
 80066ca:	2201      	movs	r2, #1
 80066cc:	2130      	movs	r1, #48	; 0x30
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7fc f800 	bl	80026d4 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff fcff 	bl	80060d8 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2208      	movs	r2, #8
 80066de:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7fb f96f 	bl	80019c4 <UART_SendMsg>
      break;
 80066e6:	e020      	b.n	800672a <HandleMSG+0x5ee>

    case CMD_ChangeSF:
      if (Msg->Len < 3U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d801      	bhi.n	80066f4 <HandleMSG+0x5b8>
      {
        return 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e01b      	b.n	800672c <HandleMSG+0x5f0>
      }

      Enabled6X = Msg->Data[3];
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	79da      	ldrb	r2, [r3, #7]
 80066f8:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <HandleMSG+0x5fc>)
 80066fa:	701a      	strb	r2, [r3, #0]

      if (Enabled6X == 1U)
 80066fc:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <HandleMSG+0x5fc>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d104      	bne.n	800670e <HandleMSG+0x5d2>
      {
        MotionFX_manager_stop_9X();
 8006704:	f7fb fde8 	bl	80022d8 <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 8006708:	f7fb fdc8 	bl	800229c <MotionFX_manager_start_6X>
 800670c:	e003      	b.n	8006716 <HandleMSG+0x5da>
      }
      else
      {
        MotionFX_manager_stop_6X();
 800670e:	f7fb fdcf 	bl	80022b0 <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 8006712:	f7fb fdd7 	bl	80022c4 <MotionFX_manager_start_9X>
      }

      BUILD_REPLY_HEADER(Msg);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff fcde 	bl	80060d8 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fb f951 	bl	80019c4 <UART_SendMsg>
      break;
 8006722:	e002      	b.n	800672a <HandleMSG+0x5ee>

    default:
      ret = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8006728:	bf00      	nop
  }

  return ret;
 800672a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800672c:	4618      	mov	r0, r3
 800672e:	3760      	adds	r7, #96	; 0x60
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000004 	.word	0x20000004
 8006738:	20000598 	.word	0x20000598

0800673c <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 800673c:	b590      	push	{r4, r7, lr}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	4604      	mov	r4, r0
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	461a      	mov	r2, r3
 800674a:	4623      	mov	r3, r4
 800674c:	71fb      	strb	r3, [r7, #7]
 800674e:	4603      	mov	r3, r0
 8006750:	71bb      	strb	r3, [r7, #6]
 8006752:	460b      	mov	r3, r1
 8006754:	717b      	strb	r3, [r7, #5]
 8006756:	4613      	mov	r3, r2
 8006758:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 800675e:	79bb      	ldrb	r3, [r7, #6]
 8006760:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 8006762:	797b      	ldrb	r3, [r7, #5]
 8006764:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 8006766:	793b      	ldrb	r3, [r7, #4]
 8006768:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 800676a:	f107 030c 	add.w	r3, r7, #12
 800676e:	2200      	movs	r2, #0
 8006770:	4619      	mov	r1, r3
 8006772:	4806      	ldr	r0, [pc, #24]	; (800678c <RTC_DateRegulate+0x50>)
 8006774:	f006 f9f2 	bl	800cb5c <HAL_RTC_SetDate>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800677e:	f7fb fd03 	bl	8002188 <Error_Handler>
  }
}
 8006782:	bf00      	nop
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	bd90      	pop	{r4, r7, pc}
 800678a:	bf00      	nop
 800678c:	200023dc 	.word	0x200023dc

08006790 <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	71fb      	strb	r3, [r7, #7]
 800679a:	460b      	mov	r3, r1
 800679c:	71bb      	strb	r3, [r7, #6]
 800679e:	4613      	mov	r3, r2
 80067a0:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 80067a6:	79bb      	ldrb	r3, [r7, #6]
 80067a8:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 80067aa:	797b      	ldrb	r3, [r7, #5]
 80067ac:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 80067be:	f107 030c 	add.w	r3, r7, #12
 80067c2:	2200      	movs	r2, #0
 80067c4:	4619      	mov	r1, r3
 80067c6:	4806      	ldr	r0, [pc, #24]	; (80067e0 <RTC_TimeRegulate+0x50>)
 80067c8:	f006 f8ca 	bl	800c960 <HAL_RTC_SetTime>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 80067d2:	f7fb fcd9 	bl	8002188 <Error_Handler>
  }
}
 80067d6:	bf00      	nop
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200023dc 	.word	0x200023dc

080067e4 <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 80067e4:	b5b0      	push	{r4, r5, r7, lr}
 80067e6:	b09e      	sub	sp, #120	; 0x78
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 80067ee:	230d      	movs	r3, #13
 80067f0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 80067f8:	4b19      	ldr	r3, [pc, #100]	; (8006860 <Get_PresentationString+0x7c>)
 80067fa:	f107 0408 	add.w	r4, r7, #8
 80067fe:	461d      	mov	r5, r3
 8006800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	8022      	strh	r2, [r4, #0]
 800680e:	3402      	adds	r4, #2
 8006810:	0c1b      	lsrs	r3, r3, #16
 8006812:	7023      	strb	r3, [r4, #0]

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 8006814:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800681c:	4611      	mov	r1, r2
 800681e:	4618      	mov	r0, r3
 8006820:	f7fb fd64 	bl	80022ec <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 8006824:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8006828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682a:	429a      	cmp	r2, r3
 800682c:	da06      	bge.n	800683c <Get_PresentationString+0x58>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 800682e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8006832:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006836:	4413      	add	r3, r2
 8006838:	677b      	str	r3, [r7, #116]	; 0x74
 800683a:	e002      	b.n	8006842 <Get_PresentationString+0x5e>
  }
  else
  {
    lib_version_num = lib_version_string;
 800683c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006840:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 8006842:	f107 0208 	add.w	r2, r7, #8
 8006846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006848:	2140      	movs	r1, #64	; 0x40
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f014 fa46 	bl	801acdc <sniprintf>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	601a      	str	r2, [r3, #0]
}
 8006858:	bf00      	nop
 800685a:	3778      	adds	r7, #120	; 0x78
 800685c:	46bd      	mov	sp, r7
 800685e:	bdb0      	pop	{r4, r5, r7, pc}
 8006860:	0801b5c8 	.word	0x0801b5c8

08006864 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006868:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <HAL_Init+0x4c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a10      	ldr	r2, [pc, #64]	; (80068b0 <HAL_Init+0x4c>)
 800686e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006874:	2003      	movs	r0, #3
 8006876:	f000 f96d 	bl	8006b54 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800687a:	f003 fb79 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800687e:	4602      	mov	r2, r0
 8006880:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <HAL_Init+0x50>)
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	490b      	ldr	r1, [pc, #44]	; (80068b8 <HAL_Init+0x54>)
 800688a:	5ccb      	ldrb	r3, [r1, r3]
 800688c:	fa22 f303 	lsr.w	r3, r2, r3
 8006890:	4a0a      	ldr	r2, [pc, #40]	; (80068bc <HAL_Init+0x58>)
 8006892:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006894:	200f      	movs	r0, #15
 8006896:	f000 f813 	bl	80068c0 <HAL_InitTick>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e002      	b.n	80068aa <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80068a4:	f7fb ff3a 	bl	800271c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40022000 	.word	0x40022000
 80068b4:	46020c00 	.word	0x46020c00
 80068b8:	0801b638 	.word	0x0801b638
 80068bc:	20000010 	.word	0x20000010

080068c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80068c8:	4b15      	ldr	r3, [pc, #84]	; (8006920 <HAL_InitTick+0x60>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e021      	b.n	8006918 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80068d4:	4b13      	ldr	r3, [pc, #76]	; (8006924 <HAL_InitTick+0x64>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	4b11      	ldr	r3, [pc, #68]	; (8006920 <HAL_InitTick+0x60>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	4619      	mov	r1, r3
 80068de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	4618      	mov	r0, r3
 80068ec:	f000 f965 	bl	8006bba <HAL_SYSTICK_Config>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e00e      	b.n	8006918 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b0f      	cmp	r3, #15
 80068fe:	d80a      	bhi.n	8006916 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006900:	2200      	movs	r2, #0
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	f000 f92f 	bl	8006b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800690c:	4a06      	ldr	r2, [pc, #24]	; (8006928 <HAL_InitTick+0x68>)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	e000      	b.n	8006918 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	200000ac 	.word	0x200000ac
 8006924:	20000010 	.word	0x20000010
 8006928:	200000a8 	.word	0x200000a8

0800692c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <HAL_IncTick+0x20>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	4b06      	ldr	r3, [pc, #24]	; (8006950 <HAL_IncTick+0x24>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4413      	add	r3, r2
 800693c:	4a04      	ldr	r2, [pc, #16]	; (8006950 <HAL_IncTick+0x24>)
 800693e:	6013      	str	r3, [r2, #0]
}
 8006940:	bf00      	nop
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	200000ac 	.word	0x200000ac
 8006950:	2000258c 	.word	0x2000258c

08006954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  return uwTick;
 8006958:	4b03      	ldr	r3, [pc, #12]	; (8006968 <HAL_GetTick+0x14>)
 800695a:	681b      	ldr	r3, [r3, #0]
}
 800695c:	4618      	mov	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	2000258c 	.word	0x2000258c

0800696c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006974:	f7ff ffee 	bl	8006954 <HAL_GetTick>
 8006978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d005      	beq.n	8006992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006986:	4b0a      	ldr	r3, [pc, #40]	; (80069b0 <HAL_Delay+0x44>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4413      	add	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006992:	bf00      	nop
 8006994:	f7ff ffde 	bl	8006954 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d8f7      	bhi.n	8006994 <HAL_Delay+0x28>
  {
  }
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	200000ac 	.word	0x200000ac

080069b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80069c4:	4b0c      	ldr	r3, [pc, #48]	; (80069f8 <__NVIC_SetPriorityGrouping+0x44>)
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80069d0:	4013      	ands	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80069dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80069e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069e6:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <__NVIC_SetPriorityGrouping+0x44>)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	60d3      	str	r3, [r2, #12]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr
 80069f8:	e000ed00 	.word	0xe000ed00

080069fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a00:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <__NVIC_GetPriorityGrouping+0x18>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	0a1b      	lsrs	r3, r3, #8
 8006a06:	f003 0307 	and.w	r3, r3, #7
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	e000ed00 	.word	0xe000ed00

08006a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	4603      	mov	r3, r0
 8006a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	db0b      	blt.n	8006a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a2a:	79fb      	ldrb	r3, [r7, #7]
 8006a2c:	f003 021f 	and.w	r2, r3, #31
 8006a30:	4907      	ldr	r1, [pc, #28]	; (8006a50 <__NVIC_EnableIRQ+0x38>)
 8006a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	2001      	movs	r0, #1
 8006a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e000e100 	.word	0xe000e100

08006a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	6039      	str	r1, [r7, #0]
 8006a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	db0a      	blt.n	8006a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	490c      	ldr	r1, [pc, #48]	; (8006aa0 <__NVIC_SetPriority+0x4c>)
 8006a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a72:	0112      	lsls	r2, r2, #4
 8006a74:	b2d2      	uxtb	r2, r2
 8006a76:	440b      	add	r3, r1
 8006a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a7c:	e00a      	b.n	8006a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	4908      	ldr	r1, [pc, #32]	; (8006aa4 <__NVIC_SetPriority+0x50>)
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	3b04      	subs	r3, #4
 8006a8c:	0112      	lsls	r2, r2, #4
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	440b      	add	r3, r1
 8006a92:	761a      	strb	r2, [r3, #24]
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	e000e100 	.word	0xe000e100
 8006aa4:	e000ed00 	.word	0xe000ed00

08006aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b089      	sub	sp, #36	; 0x24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	f1c3 0307 	rsb	r3, r3, #7
 8006ac2:	2b04      	cmp	r3, #4
 8006ac4:	bf28      	it	cs
 8006ac6:	2304      	movcs	r3, #4
 8006ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	3304      	adds	r3, #4
 8006ace:	2b06      	cmp	r3, #6
 8006ad0:	d902      	bls.n	8006ad8 <NVIC_EncodePriority+0x30>
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	3b03      	subs	r3, #3
 8006ad6:	e000      	b.n	8006ada <NVIC_EncodePriority+0x32>
 8006ad8:	2300      	movs	r3, #0
 8006ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006adc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae6:	43da      	mvns	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	401a      	ands	r2, r3
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006af0:	f04f 31ff 	mov.w	r1, #4294967295
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	fa01 f303 	lsl.w	r3, r1, r3
 8006afa:	43d9      	mvns	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b00:	4313      	orrs	r3, r2
         );
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3724      	adds	r7, #36	; 0x24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
	...

08006b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b20:	d301      	bcc.n	8006b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b22:	2301      	movs	r3, #1
 8006b24:	e00f      	b.n	8006b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b26:	4a0a      	ldr	r2, [pc, #40]	; (8006b50 <SysTick_Config+0x40>)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b2e:	210f      	movs	r1, #15
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	f7ff ff8e 	bl	8006a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <SysTick_Config+0x40>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b3e:	4b04      	ldr	r3, [pc, #16]	; (8006b50 <SysTick_Config+0x40>)
 8006b40:	2207      	movs	r2, #7
 8006b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	e000e010 	.word	0xe000e010

08006b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff ff29 	bl	80069b4 <__NVIC_SetPriorityGrouping>
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b086      	sub	sp, #24
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	4603      	mov	r3, r0
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
 8006b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b78:	f7ff ff40 	bl	80069fc <__NVIC_GetPriorityGrouping>
 8006b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	6978      	ldr	r0, [r7, #20]
 8006b84:	f7ff ff90 	bl	8006aa8 <NVIC_EncodePriority>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff ff5f 	bl	8006a54 <__NVIC_SetPriority>
}
 8006b96:	bf00      	nop
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b082      	sub	sp, #8
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bac:	4618      	mov	r0, r3
 8006bae:	f7ff ff33 	bl	8006a18 <__NVIC_EnableIRQ>
}
 8006bb2:	bf00      	nop
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff ffa4 	bl	8006b10 <SysTick_Config>
 8006bc8:	4603      	mov	r3, r0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e054      	b.n	8006c90 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	7f5b      	ldrb	r3, [r3, #29]
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d105      	bne.n	8006bfc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fa ff5a 	bl	8001ab0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	791b      	ldrb	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10c      	bne.n	8006c24 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a22      	ldr	r2, [pc, #136]	; (8006c98 <HAL_CRC_Init+0xc4>)
 8006c10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0218 	bic.w	r2, r2, #24
 8006c20:	609a      	str	r2, [r3, #8]
 8006c22:	e00c      	b.n	8006c3e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6899      	ldr	r1, [r3, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f834 	bl	8006c9c <HAL_CRCEx_Polynomial_Set>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e028      	b.n	8006c90 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	795b      	ldrb	r3, [r3, #5]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d105      	bne.n	8006c52 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c4e:	611a      	str	r2, [r3, #16]
 8006c50:	e004      	b.n	8006c5c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	6912      	ldr	r2, [r2, #16]
 8006c5a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695a      	ldr	r2, [r3, #20]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699a      	ldr	r2, [r3, #24]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	04c11db7 	.word	0x04c11db7

08006c9c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006cac:	231f      	movs	r3, #31
 8006cae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006cb0:	bf00      	nop
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1e5a      	subs	r2, r3, #1
 8006cb6:	613a      	str	r2, [r7, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <HAL_CRCEx_Polynomial_Set+0x34>
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	f003 031f 	and.w	r3, r3, #31
 8006cc2:	68ba      	ldr	r2, [r7, #8]
 8006cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0f0      	beq.n	8006cb2 <HAL_CRCEx_Polynomial_Set+0x16>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2b18      	cmp	r3, #24
 8006cd4:	d846      	bhi.n	8006d64 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006cd6:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <HAL_CRCEx_Polynomial_Set+0x40>)
 8006cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cdc:	08006d6b 	.word	0x08006d6b
 8006ce0:	08006d65 	.word	0x08006d65
 8006ce4:	08006d65 	.word	0x08006d65
 8006ce8:	08006d65 	.word	0x08006d65
 8006cec:	08006d65 	.word	0x08006d65
 8006cf0:	08006d65 	.word	0x08006d65
 8006cf4:	08006d65 	.word	0x08006d65
 8006cf8:	08006d65 	.word	0x08006d65
 8006cfc:	08006d59 	.word	0x08006d59
 8006d00:	08006d65 	.word	0x08006d65
 8006d04:	08006d65 	.word	0x08006d65
 8006d08:	08006d65 	.word	0x08006d65
 8006d0c:	08006d65 	.word	0x08006d65
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006d65 	.word	0x08006d65
 8006d18:	08006d65 	.word	0x08006d65
 8006d1c:	08006d4d 	.word	0x08006d4d
 8006d20:	08006d65 	.word	0x08006d65
 8006d24:	08006d65 	.word	0x08006d65
 8006d28:	08006d65 	.word	0x08006d65
 8006d2c:	08006d65 	.word	0x08006d65
 8006d30:	08006d65 	.word	0x08006d65
 8006d34:	08006d65 	.word	0x08006d65
 8006d38:	08006d65 	.word	0x08006d65
 8006d3c:	08006d41 	.word	0x08006d41
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b06      	cmp	r3, #6
 8006d44:	d913      	bls.n	8006d6e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006d4a:	e010      	b.n	8006d6e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	2b07      	cmp	r3, #7
 8006d50:	d90f      	bls.n	8006d72 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006d56:	e00c      	b.n	8006d72 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2b0f      	cmp	r3, #15
 8006d5c:	d90b      	bls.n	8006d76 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006d62:	e008      	b.n	8006d76 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	75fb      	strb	r3, [r7, #23]
      break;
 8006d68:	e006      	b.n	8006d78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006d6a:	bf00      	nop
 8006d6c:	e004      	b.n	8006d78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006d6e:	bf00      	nop
 8006d70:	e002      	b.n	8006d78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006d72:	bf00      	nop
 8006d74:	e000      	b.n	8006d78 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006d76:	bf00      	nop
  }
  if (status == HAL_OK)
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10d      	bne.n	8006d9a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f023 0118 	bic.w	r1, r3, #24
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	371c      	adds	r7, #28
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e04f      	b.n	8006e60 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_DMA_Start_IT+0x26>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e048      	b.n	8006e60 <HAL_DMA_Start_IT+0xb8>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d136      	bne.n	8006e50 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2202      	movs	r2, #2
 8006de6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f872 	bl	8006ee0 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695a      	ldr	r2, [r3, #20]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8006e0a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	695a      	ldr	r2, [r3, #20]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e22:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d007      	beq.n	8006e3c <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e3a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695a      	ldr	r2, [r3, #20]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e007      	b.n	8006e60 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2240      	movs	r2, #64	; 0x40
 8006e54:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e02b      	b.n	8006ed4 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e84:	f023 030f 	bic.w	r3, r3, #15
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e92:	3b50      	subs	r3, #80	; 0x50
 8006e94:	09db      	lsrs	r3, r3, #7
 8006e96:	f003 031f 	and.w	r3, r3, #31
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	f003 0310 	and.w	r3, r3, #16
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d012      	beq.n	8006ed2 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	f003 0311 	and.w	r3, r3, #17
 8006eb2:	2b11      	cmp	r3, #17
 8006eb4:	d106      	bne.n	8006ec4 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	685a      	ldr	r2, [r3, #4]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	605a      	str	r2, [r3, #4]
 8006ec2:	e006      	b.n	8006ed2 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	401a      	ands	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef4:	0c1b      	lsrs	r3, r3, #16
 8006ef6:	041b      	lsls	r3, r3, #16
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	b291      	uxth	r1, r2
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	430b      	orrs	r3, r1
 8006f02:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8006f0c:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006f1e:	bf00      	nop
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
	...

08006f2c <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8006f34:	f7ff fd0e 	bl	8006954 <HAL_GetTick>
 8006f38:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0dc      	b.n	80070fe <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a6f      	ldr	r2, [pc, #444]	; (8007108 <HAL_DMAEx_List_Init+0x1dc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	f000 809f 	beq.w	800708e <HAL_DMAEx_List_Init+0x162>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a6d      	ldr	r2, [pc, #436]	; (800710c <HAL_DMAEx_List_Init+0x1e0>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	f000 8099 	beq.w	800708e <HAL_DMAEx_List_Init+0x162>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a6b      	ldr	r2, [pc, #428]	; (8007110 <HAL_DMAEx_List_Init+0x1e4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	f000 8093 	beq.w	800708e <HAL_DMAEx_List_Init+0x162>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a69      	ldr	r2, [pc, #420]	; (8007114 <HAL_DMAEx_List_Init+0x1e8>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	f000 808d 	beq.w	800708e <HAL_DMAEx_List_Init+0x162>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a67      	ldr	r2, [pc, #412]	; (8007118 <HAL_DMAEx_List_Init+0x1ec>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	f000 8087 	beq.w	800708e <HAL_DMAEx_List_Init+0x162>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a65      	ldr	r2, [pc, #404]	; (800711c <HAL_DMAEx_List_Init+0x1f0>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	f000 8081 	beq.w	800708e <HAL_DMAEx_List_Init+0x162>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a63      	ldr	r2, [pc, #396]	; (8007120 <HAL_DMAEx_List_Init+0x1f4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d07b      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a62      	ldr	r2, [pc, #392]	; (8007124 <HAL_DMAEx_List_Init+0x1f8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d076      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a60      	ldr	r2, [pc, #384]	; (8007128 <HAL_DMAEx_List_Init+0x1fc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d071      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a5f      	ldr	r2, [pc, #380]	; (800712c <HAL_DMAEx_List_Init+0x200>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d06c      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a5d      	ldr	r2, [pc, #372]	; (8007130 <HAL_DMAEx_List_Init+0x204>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d067      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a5c      	ldr	r2, [pc, #368]	; (8007134 <HAL_DMAEx_List_Init+0x208>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d062      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a5a      	ldr	r2, [pc, #360]	; (8007138 <HAL_DMAEx_List_Init+0x20c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d05d      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a59      	ldr	r2, [pc, #356]	; (800713c <HAL_DMAEx_List_Init+0x210>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d058      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a57      	ldr	r2, [pc, #348]	; (8007140 <HAL_DMAEx_List_Init+0x214>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d053      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a56      	ldr	r2, [pc, #344]	; (8007144 <HAL_DMAEx_List_Init+0x218>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d04e      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a54      	ldr	r2, [pc, #336]	; (8007148 <HAL_DMAEx_List_Init+0x21c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d049      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a53      	ldr	r2, [pc, #332]	; (800714c <HAL_DMAEx_List_Init+0x220>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d044      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a51      	ldr	r2, [pc, #324]	; (8007150 <HAL_DMAEx_List_Init+0x224>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d03f      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a50      	ldr	r2, [pc, #320]	; (8007154 <HAL_DMAEx_List_Init+0x228>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d03a      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a4e      	ldr	r2, [pc, #312]	; (8007158 <HAL_DMAEx_List_Init+0x22c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d035      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a4d      	ldr	r2, [pc, #308]	; (800715c <HAL_DMAEx_List_Init+0x230>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d030      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a4b      	ldr	r2, [pc, #300]	; (8007160 <HAL_DMAEx_List_Init+0x234>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02b      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a4a      	ldr	r2, [pc, #296]	; (8007164 <HAL_DMAEx_List_Init+0x238>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d026      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a48      	ldr	r2, [pc, #288]	; (8007168 <HAL_DMAEx_List_Init+0x23c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d021      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a47      	ldr	r2, [pc, #284]	; (800716c <HAL_DMAEx_List_Init+0x240>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d01c      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a45      	ldr	r2, [pc, #276]	; (8007170 <HAL_DMAEx_List_Init+0x244>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d017      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a44      	ldr	r2, [pc, #272]	; (8007174 <HAL_DMAEx_List_Init+0x248>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d012      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a42      	ldr	r2, [pc, #264]	; (8007178 <HAL_DMAEx_List_Init+0x24c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00d      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a41      	ldr	r2, [pc, #260]	; (800717c <HAL_DMAEx_List_Init+0x250>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d008      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a3f      	ldr	r2, [pc, #252]	; (8007180 <HAL_DMAEx_List_Init+0x254>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d003      	beq.n	800708e <HAL_DMAEx_List_Init+0x162>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a3e      	ldr	r2, [pc, #248]	; (8007184 <HAL_DMAEx_List_Init+0x258>)
 800708c:	4293      	cmp	r3, r2
 800708e:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695a      	ldr	r2, [r3, #20]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0206 	orr.w	r2, r2, #6
 80070ae:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80070b0:	e00f      	b.n	80070d2 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80070b2:	f7ff fc4f 	bl	8006954 <HAL_GetTick>
 80070b6:	4602      	mov	r2, r0
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	2b05      	cmp	r3, #5
 80070be:	d908      	bls.n	80070d2 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2210      	movs	r2, #16
 80070c4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2203      	movs	r2, #3
 80070ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e015      	b.n	80070fe <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e8      	bne.n	80070b2 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fabb 	bl	800765c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	40020050 	.word	0x40020050
 800710c:	50020050 	.word	0x50020050
 8007110:	400200d0 	.word	0x400200d0
 8007114:	500200d0 	.word	0x500200d0
 8007118:	40020150 	.word	0x40020150
 800711c:	50020150 	.word	0x50020150
 8007120:	400201d0 	.word	0x400201d0
 8007124:	500201d0 	.word	0x500201d0
 8007128:	40020250 	.word	0x40020250
 800712c:	50020250 	.word	0x50020250
 8007130:	400202d0 	.word	0x400202d0
 8007134:	500202d0 	.word	0x500202d0
 8007138:	40020350 	.word	0x40020350
 800713c:	50020350 	.word	0x50020350
 8007140:	400203d0 	.word	0x400203d0
 8007144:	500203d0 	.word	0x500203d0
 8007148:	40020450 	.word	0x40020450
 800714c:	50020450 	.word	0x50020450
 8007150:	400204d0 	.word	0x400204d0
 8007154:	500204d0 	.word	0x500204d0
 8007158:	40020550 	.word	0x40020550
 800715c:	50020550 	.word	0x50020550
 8007160:	400205d0 	.word	0x400205d0
 8007164:	500205d0 	.word	0x500205d0
 8007168:	40020650 	.word	0x40020650
 800716c:	50020650 	.word	0x50020650
 8007170:	400206d0 	.word	0x400206d0
 8007174:	500206d0 	.word	0x500206d0
 8007178:	40020750 	.word	0x40020750
 800717c:	50020750 	.word	0x50020750
 8007180:	400207d0 	.word	0x400207d0
 8007184:	500207d0 	.word	0x500207d0

08007188 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_DMAEx_List_Start_IT+0x16>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e082      	b.n	80072a8 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80071a8:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	695b      	ldr	r3, [r3, #20]
 80071b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071b4:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d005      	beq.n	80071c8 <HAL_DMAEx_List_Start_IT+0x40>
 80071bc:	7dfb      	ldrb	r3, [r7, #23]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d16a      	bne.n	8007298 <HAL_DMAEx_List_Start_IT+0x110>
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d067      	beq.n	8007298 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d157      	bne.n	8007284 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_DMAEx_List_Start_IT+0x5a>
 80071de:	2302      	movs	r3, #2
 80071e0:	e062      	b.n	80072a8 <HAL_DMAEx_List_Start_IT+0x120>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2202      	movs	r2, #2
 80071ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f6:	2202      	movs	r2, #2
 80071f8:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007204:	2200      	movs	r2, #0
 8007206:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	695a      	ldr	r2, [r3, #20]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8007216:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800721c:	2b00      	cmp	r3, #0
 800721e:	d007      	beq.n	8007230 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	695a      	ldr	r2, [r3, #20]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800722e:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695a      	ldr	r2, [r3, #20]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007246:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f107 010c 	add.w	r1, r7, #12
 8007252:	2200      	movs	r2, #0
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fc3b 	bl	8007ad0 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4619      	mov	r1, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	0c0b      	lsrs	r3, r1, #16
 8007268:	041b      	lsls	r3, r3, #16
 800726a:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007278:	4013      	ands	r3, r2
 800727a:	68f9      	ldr	r1, [r7, #12]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6812      	ldr	r2, [r2, #0]
 8007280:	430b      	orrs	r3, r1
 8007282:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	695a      	ldr	r2, [r3, #20]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0201 	orr.w	r2, r2, #1
 8007292:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	e007      	b.n	80072a8 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2240      	movs	r2, #64	; 0x40
 800729c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_DMAEx_List_BuildNode>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_DMAEx_List_BuildNode+0x16>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e004      	b.n	80072d4 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fa41 	bl	8007754 <DMA_List_BuildNode>

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3708      	adds	r7, #8
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08c      	sub	sp, #48	; 0x30
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <HAL_DMAEx_List_InsertNode+0x18>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e0b6      	b.n	8007466 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d104      	bne.n	800730a <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2204      	movs	r2, #4
 8007304:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e0ad      	b.n	8007466 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 fb70 	bl	80079f8 <DMA_List_CheckNodesBaseAddresses>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2205      	movs	r2, #5
 8007322:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e09e      	b.n	8007466 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fb91 	bl	8007a58 <DMA_List_CheckNodesTypes>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d004      	beq.n	8007346 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2204      	movs	r2, #4
 8007340:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e08f      	b.n	8007466 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2202      	movs	r2, #2
 800734a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8007352:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007356:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fbb7 	bl	8007ad0 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d11a      	bne.n	80073a0 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d106      	bne.n	800737e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	609a      	str	r2, [r3, #8]
 800737c:	e06c      	b.n	8007458 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800738a:	4013      	ands	r3, r2
 800738c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800738e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007390:	4319      	orrs	r1, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2202      	movs	r2, #2
 800739c:	609a      	str	r2, [r3, #8]
 800739e:	e05b      	b.n	8007458 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10f      	bne.n	80073c6 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80073b0:	4013      	ands	r3, r2
 80073b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b6:	4319      	orrs	r1, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	e043      	b.n	800744e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80073c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c8:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80073ca:	f107 0314 	add.w	r3, r7, #20
 80073ce:	461a      	mov	r2, r3
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 fbac 	bl	8007b30 <DMA_List_FindNode>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d132      	bne.n	8007444 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d11a      	bne.n	800741e <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	461a      	mov	r2, r3
 80073f6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80073fa:	4013      	ands	r3, r2
 80073fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007400:	4319      	orrs	r1, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800740e:	4013      	ands	r3, r2
 8007410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007414:	4319      	orrs	r1, r3
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800741c:	e017      	b.n	800744e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800741e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007434:	4013      	ands	r3, r2
 8007436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800743a:	4319      	orrs	r1, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007442:	e004      	b.n	800744e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2206      	movs	r2, #6
 8007448:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e00b      	b.n	8007466 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3730      	adds	r7, #48	; 0x30
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b08a      	sub	sp, #40	; 0x28
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e052      	b.n	8007526 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d104      	bne.n	8007492 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	e049      	b.n	8007526 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00c      	beq.n	80074b4 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d101      	bne.n	80074aa <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	e03d      	b.n	8007526 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2204      	movs	r2, #4
 80074ae:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e038      	b.n	8007526 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d104      	bne.n	80074c6 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2204      	movs	r2, #4
 80074c0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e02f      	b.n	8007526 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2202      	movs	r2, #2
 80074ca:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f107 0220 	add.w	r2, r7, #32
 80074da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 faf6 	bl	8007ad0 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80074e8:	f107 030c 	add.w	r3, r7, #12
 80074ec:	461a      	mov	r2, r3
 80074ee:	2100      	movs	r1, #0
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fb1d 	bl	8007b30 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007500:	4013      	ands	r3, r2
 8007502:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	4610      	mov	r0, r2
 8007508:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800750a:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800750c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3728      	adds	r7, #40	; 0x28
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
	...

08007530 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <HAL_DMAEx_List_LinkQ+0x16>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e072      	b.n	8007630 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007550:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007558:	b2db      	uxtb	r3, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d002      	beq.n	8007564 <HAL_DMAEx_List_LinkQ+0x34>
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	2b05      	cmp	r3, #5
 8007562:	d108      	bne.n	8007576 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2240      	movs	r2, #64	; 0x40
 8007568:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e05c      	b.n	8007630 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	7b1b      	ldrb	r3, [r3, #12]
 800757a:	b2db      	uxtb	r3, r3
 800757c:	2b02      	cmp	r3, #2
 800757e:	d104      	bne.n	800758a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2201      	movs	r2, #1
 8007584:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e052      	b.n	8007630 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a2b      	ldr	r2, [pc, #172]	; (800763c <HAL_DMAEx_List_LinkQ+0x10c>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d022      	beq.n	80075da <HAL_DMAEx_List_LinkQ+0xaa>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a29      	ldr	r2, [pc, #164]	; (8007640 <HAL_DMAEx_List_LinkQ+0x110>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d01d      	beq.n	80075da <HAL_DMAEx_List_LinkQ+0xaa>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a28      	ldr	r2, [pc, #160]	; (8007644 <HAL_DMAEx_List_LinkQ+0x114>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d018      	beq.n	80075da <HAL_DMAEx_List_LinkQ+0xaa>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a26      	ldr	r2, [pc, #152]	; (8007648 <HAL_DMAEx_List_LinkQ+0x118>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d013      	beq.n	80075da <HAL_DMAEx_List_LinkQ+0xaa>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a25      	ldr	r2, [pc, #148]	; (800764c <HAL_DMAEx_List_LinkQ+0x11c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <HAL_DMAEx_List_LinkQ+0xaa>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a23      	ldr	r2, [pc, #140]	; (8007650 <HAL_DMAEx_List_LinkQ+0x120>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <HAL_DMAEx_List_LinkQ+0xaa>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a22      	ldr	r2, [pc, #136]	; (8007654 <HAL_DMAEx_List_LinkQ+0x124>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <HAL_DMAEx_List_LinkQ+0xaa>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a20      	ldr	r2, [pc, #128]	; (8007658 <HAL_DMAEx_List_LinkQ+0x128>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d101      	bne.n	80075de <HAL_DMAEx_List_LinkQ+0xae>
 80075da:	2301      	movs	r3, #1
 80075dc:	e000      	b.n	80075e0 <HAL_DMAEx_List_LinkQ+0xb0>
 80075de:	2300      	movs	r3, #0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d004      	beq.n	80075fc <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2203      	movs	r2, #3
 80075f6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e019      	b.n	8007630 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	2b81      	cmp	r3, #129	; 0x81
 8007602:	d108      	bne.n	8007616 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10d      	bne.n	8007628 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	2204      	movs	r2, #4
 8007610:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e00c      	b.n	8007630 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2204      	movs	r2, #4
 8007622:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e003      	b.n	8007630 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	40020650 	.word	0x40020650
 8007640:	50020650 	.word	0x50020650
 8007644:	400206d0 	.word	0x400206d0
 8007648:	500206d0 	.word	0x500206d0
 800764c:	40020750 	.word	0x40020750
 8007650:	50020750 	.word	0x50020750
 8007654:	400207d0 	.word	0x400207d0
 8007658:	500207d0 	.word	0x500207d0

0800765c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode | hdma->InitLinkedList.LinkAllocatedPort;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800766c:	431a      	orrs	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4313      	orrs	r3, r2
 8007674:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	430a      	orrs	r2, r1
 8007688:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800769a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2200      	movs	r2, #0
 80076a2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	2200      	movs	r2, #0
 80076aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2200      	movs	r2, #0
 80076b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a1e      	ldr	r2, [pc, #120]	; (8007734 <DMA_List_Init+0xd8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d022      	beq.n	8007704 <DMA_List_Init+0xa8>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1d      	ldr	r2, [pc, #116]	; (8007738 <DMA_List_Init+0xdc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d01d      	beq.n	8007704 <DMA_List_Init+0xa8>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a1b      	ldr	r2, [pc, #108]	; (800773c <DMA_List_Init+0xe0>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d018      	beq.n	8007704 <DMA_List_Init+0xa8>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a1a      	ldr	r2, [pc, #104]	; (8007740 <DMA_List_Init+0xe4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d013      	beq.n	8007704 <DMA_List_Init+0xa8>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a18      	ldr	r2, [pc, #96]	; (8007744 <DMA_List_Init+0xe8>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d00e      	beq.n	8007704 <DMA_List_Init+0xa8>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a17      	ldr	r2, [pc, #92]	; (8007748 <DMA_List_Init+0xec>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d009      	beq.n	8007704 <DMA_List_Init+0xa8>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a15      	ldr	r2, [pc, #84]	; (800774c <DMA_List_Init+0xf0>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d004      	beq.n	8007704 <DMA_List_Init+0xa8>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a14      	ldr	r2, [pc, #80]	; (8007750 <DMA_List_Init+0xf4>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d101      	bne.n	8007708 <DMA_List_Init+0xac>
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <DMA_List_Init+0xae>
 8007708:	2300      	movs	r3, #0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d007      	beq.n	800771e <DMA_List_Init+0xc2>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2200      	movs	r2, #0
 8007714:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2200      	movs	r2, #0
 800771c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2200      	movs	r2, #0
 8007724:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	40020650 	.word	0x40020650
 8007738:	50020650 	.word	0x50020650
 800773c:	400206d0 	.word	0x400206d0
 8007740:	500206d0 	.word	0x500206d0
 8007744:	40020750 	.word	0x40020750
 8007748:	50020750 	.word	0x50020750
 800774c:	400207d0 	.word	0x400207d0
 8007750:	500207d0 	.word	0x500207d0

08007754 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8007766:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 800776c:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8007772:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8007778:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0320 	and.w	r3, r3, #32
 8007786:	2b00      	cmp	r3, #0
 8007788:	d017      	beq.n	80077ba <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	3b01      	subs	r3, #1
 800779e:	051b      	lsls	r3, r3, #20
 80077a0:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 80077a4:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	3b01      	subs	r3, #1
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 80077b2:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 80077b4:	431a      	orrs	r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6859      	ldr	r1, [r3, #4]
 80077c2:	f240 237f 	movw	r3, #639	; 0x27f
 80077c6:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 80077c8:	431a      	orrs	r2, r3
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d6:	d10c      	bne.n	80077f2 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0320 	and.w	r3, r3, #32
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d011      	beq.n	8007808 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	605a      	str	r2, [r3, #4]
 80077f0:	e00a      	b.n	8007808 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fa:	d105      	bne.n	8007808 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00f      	beq.n	8007830 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781c:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8007828:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 800782a:	431a      	orrs	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007834:	b29a      	uxth	r2, r3
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d04e      	beq.n	80078e4 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784e:	3b01      	subs	r3, #1
 8007850:	0419      	lsls	r1, r3, #16
 8007852:	4b67      	ldr	r3, [pc, #412]	; (80079f0 <DMA_List_BuildNode+0x29c>)
 8007854:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8007856:	431a      	orrs	r2, r3
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007860:	2b00      	cmp	r3, #0
 8007862:	da06      	bge.n	8007872 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	609a      	str	r2, [r3, #8]
 8007870:	e005      	b.n	800787e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007882:	2b00      	cmp	r3, #0
 8007884:	da06      	bge.n	8007894 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	609a      	str	r2, [r3, #8]
 8007892:	e005      	b.n	80078a0 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	da06      	bge.n	80078b6 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	609a      	str	r2, [r3, #8]
 80078b4:	e005      	b.n	80078c2 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da06      	bge.n	80078d8 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	609a      	str	r2, [r3, #8]
 80078d6:	e005      	b.n	80078e4 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d059      	beq.n	80079b4 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007904:	2b00      	cmp	r3, #0
 8007906:	da09      	bge.n	800791c <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800790c:	425b      	negs	r3, r3
 800790e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	615a      	str	r2, [r3, #20]
 800791a:	e005      	b.n	8007928 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007920:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792c:	2b00      	cmp	r3, #0
 800792e:	da0d      	bge.n	800794c <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007934:	425b      	negs	r3, r3
 8007936:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695a      	ldr	r2, [r3, #20]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	0419      	lsls	r1, r3, #16
 8007940:	4b2c      	ldr	r3, [pc, #176]	; (80079f4 <DMA_List_BuildNode+0x2a0>)
 8007942:	400b      	ands	r3, r1
 8007944:	431a      	orrs	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	615a      	str	r2, [r3, #20]
 800794a:	e009      	b.n	8007960 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007954:	0419      	lsls	r1, r3, #16
 8007956:	4b27      	ldr	r3, [pc, #156]	; (80079f4 <DMA_List_BuildNode+0x2a0>)
 8007958:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 800795a:	431a      	orrs	r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007964:	2b00      	cmp	r3, #0
 8007966:	da08      	bge.n	800797a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800796c:	425b      	negs	r3, r3
 800796e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	b29a      	uxth	r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	619a      	str	r2, [r3, #24]
 8007978:	e004      	b.n	8007984 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007988:	2b00      	cmp	r3, #0
 800798a:	da0b      	bge.n	80079a4 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007990:	425b      	negs	r3, r3
 8007992:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 800799c:	431a      	orrs	r2, r3
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	619a      	str	r2, [r3, #24]
 80079a2:	e007      	b.n	80079b4 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ac:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 80079ae:	431a      	orrs	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0302 	and.w	r3, r3, #2
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d006      	beq.n	80079d6 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 80079d4:	e005      	b.n	80079e2 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	6a1b      	ldr	r3, [r3, #32]
 80079da:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	621a      	str	r2, [r3, #32]
}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	07ff0000 	.word	0x07ff0000
 80079f4:	1fff0000 	.word	0x1fff0000

080079f8 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b087      	sub	sp, #28
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	431a      	orrs	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	0c1b      	lsrs	r3, r3, #16
 8007a10:	041b      	lsls	r3, r3, #16
 8007a12:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	617b      	str	r3, [r7, #20]
 8007a22:	e00a      	b.n	8007a3a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	e004      	b.n	8007a3a <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	0c1b      	lsrs	r3, r3, #16
 8007a3e:	041b      	lsls	r3, r3, #16
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d001      	beq.n	8007a4a <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	371c      	adds	r7, #28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	e00e      	b.n	8007a96 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e006      	b.n	8007a96 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a1b      	ldr	r3, [r3, #32]
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d007      	beq.n	8007aac <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d001      	beq.n	8007aac <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e00b      	b.n	8007ac4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d007      	beq.n	8007ac2 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a1b      	ldr	r3, [r3, #32]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d001      	beq.n	8007ac2 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e000      	b.n	8007ac4 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	371c      	adds	r7, #28
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	4a0d      	ldr	r2, [pc, #52]	; (8007b28 <DMA_List_GetCLLRNodeInfo+0x58>)
 8007af2:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00f      	beq.n	8007b1a <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2207      	movs	r2, #7
 8007afe:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8007b00:	e00b      	b.n	8007b1a <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	4a08      	ldr	r2, [pc, #32]	; (8007b2c <DMA_List_GetCLLRNodeInfo+0x5c>)
 8007b0c:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2205      	movs	r2, #5
 8007b18:	601a      	str	r2, [r3, #0]
}
 8007b1a:	bf00      	nop
 8007b1c:	3714      	adds	r7, #20
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	fe010000 	.word	0xfe010000
 8007b2c:	f8010000 	.word	0xf8010000

08007b30 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b089      	sub	sp, #36	; 0x24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8007b40:	2300      	movs	r3, #0
 8007b42:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d142      	bne.n	8007bda <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8007b54:	e01d      	b.n	8007b92 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d107      	bne.n	8007b6c <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007b66:	4013      	ands	r3, r2
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	e00f      	b.n	8007b8c <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	0c1b      	lsrs	r3, r3, #16
 8007b76:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007b84:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007b88:	4013      	ands	r3, r2
 8007b8a:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d3dc      	bcc.n	8007b56 <DMA_List_FindNode+0x26>
 8007b9c:	e029      	b.n	8007bf2 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d107      	bne.n	8007bb4 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007bae:	4013      	ands	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
 8007bb2:	e00f      	b.n	8007bd4 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8007bb4:	69bb      	ldr	r3, [r7, #24]
 8007bb6:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	0c1b      	lsrs	r3, r3, #16
 8007bbe:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8007bcc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d206      	bcs.n	8007bf2 <DMA_List_FindNode+0xc2>
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007bea:	4013      	ands	r3, r2
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d1d5      	bne.n	8007b9e <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d008      	beq.n	8007c0a <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8007bfe:	4013      	ands	r3, r2
 8007c00:	69ba      	ldr	r2, [r7, #24]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d001      	beq.n	8007c0a <DMA_List_FindNode+0xda>
    {
      return 1U;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e02b      	b.n	8007c62 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	0c1b      	lsrs	r3, r3, #16
 8007c16:	041b      	lsls	r3, r3, #16
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	0c1b      	lsrs	r3, r3, #16
 8007c26:	041b      	lsls	r3, r3, #16
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	461a      	mov	r2, r3
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00f      	beq.n	8007c60 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	461a      	mov	r2, r3
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c4c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8007c50:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	0c1b      	lsrs	r3, r3, #16
 8007c58:	041b      	lsls	r3, r3, #16
 8007c5a:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3724      	adds	r7, #36	; 0x24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
	...

08007c70 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b089      	sub	sp, #36	; 0x24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007c82:	e1ba      	b.n	8007ffa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	2101      	movs	r1, #1
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c90:	4013      	ands	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 81aa 	beq.w	8007ff4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a55      	ldr	r2, [pc, #340]	; (8007df8 <HAL_GPIO_Init+0x188>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d15d      	bne.n	8007d64 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8007cae:	2201      	movs	r2, #1
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	69fa      	ldr	r2, [r7, #28]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f003 0201 	and.w	r2, r3, #1
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69fa      	ldr	r2, [r7, #28]
 8007cd6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8007cd8:	4a48      	ldr	r2, [pc, #288]	; (8007dfc <HAL_GPIO_Init+0x18c>)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ce0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8007ce2:	4a46      	ldr	r2, [pc, #280]	; (8007dfc <HAL_GPIO_Init+0x18c>)
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	4413      	add	r3, r2
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	08da      	lsrs	r2, r3, #3
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	3208      	adds	r2, #8
 8007cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	220f      	movs	r2, #15
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	43db      	mvns	r3, r3
 8007d0c:	69fa      	ldr	r2, [r7, #28]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	220b      	movs	r2, #11
 8007d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d20:	69fa      	ldr	r2, [r7, #28]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	08da      	lsrs	r2, r3, #3
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	3208      	adds	r2, #8
 8007d2e:	69f9      	ldr	r1, [r7, #28]
 8007d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	2203      	movs	r2, #3
 8007d40:	fa02 f303 	lsl.w	r3, r2, r3
 8007d44:	43db      	mvns	r3, r3
 8007d46:	69fa      	ldr	r2, [r7, #28]
 8007d48:	4013      	ands	r3, r2
 8007d4a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8007d4c:	69bb      	ldr	r3, [r7, #24]
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	2202      	movs	r2, #2
 8007d52:	fa02 f303 	lsl.w	r3, r2, r3
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e067      	b.n	8007e34 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d003      	beq.n	8007d74 <HAL_GPIO_Init+0x104>
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b12      	cmp	r3, #18
 8007d72:	d145      	bne.n	8007e00 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	08da      	lsrs	r2, r3, #3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3208      	adds	r2, #8
 8007d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d80:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f003 0307 	and.w	r3, r3, #7
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	220f      	movs	r2, #15
 8007d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d90:	43db      	mvns	r3, r3
 8007d92:	69fa      	ldr	r2, [r7, #28]
 8007d94:	4013      	ands	r3, r2
 8007d96:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	f003 020f 	and.w	r2, r3, #15
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dac:	69fa      	ldr	r2, [r7, #28]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	08da      	lsrs	r2, r3, #3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3208      	adds	r2, #8
 8007dba:	69f9      	ldr	r1, [r7, #28]
 8007dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	2203      	movs	r2, #3
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	43db      	mvns	r3, r3
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f003 0203 	and.w	r2, r3, #3
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e01e      	b.n	8007e34 <HAL_GPIO_Init+0x1c4>
 8007df6:	bf00      	nop
 8007df8:	46020000 	.word	0x46020000
 8007dfc:	0801b714 	.word	0x0801b714
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e10:	43db      	mvns	r3, r3
 8007e12:	69fa      	ldr	r2, [r7, #28]
 8007e14:	4013      	ands	r3, r2
 8007e16:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f003 0203 	and.w	r2, r3, #3
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	005b      	lsls	r3, r3, #1
 8007e24:	fa02 f303 	lsl.w	r3, r2, r3
 8007e28:	69fa      	ldr	r2, [r7, #28]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d00b      	beq.n	8007e54 <HAL_GPIO_Init+0x1e4>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d007      	beq.n	8007e54 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e48:	2b11      	cmp	r3, #17
 8007e4a:	d003      	beq.n	8007e54 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	2b12      	cmp	r3, #18
 8007e52:	d130      	bne.n	8007eb6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	2203      	movs	r2, #3
 8007e60:	fa02 f303 	lsl.w	r3, r2, r3
 8007e64:	43db      	mvns	r3, r3
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	4013      	ands	r3, r2
 8007e6a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	68da      	ldr	r2, [r3, #12]
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	fa02 f303 	lsl.w	r3, r2, r3
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e92:	43db      	mvns	r3, r3
 8007e94:	69fa      	ldr	r2, [r7, #28]
 8007e96:	4013      	ands	r3, r2
 8007e98:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	091b      	lsrs	r3, r3, #4
 8007ea0:	f003 0201 	and.w	r2, r3, #1
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d017      	beq.n	8007eee <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	2203      	movs	r2, #3
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	689a      	ldr	r2, [r3, #8]
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	69fa      	ldr	r2, [r7, #28]
 8007eec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d07c      	beq.n	8007ff4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8007efa:	4a47      	ldr	r2, [pc, #284]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	089b      	lsrs	r3, r3, #2
 8007f00:	3318      	adds	r3, #24
 8007f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f06:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f003 0303 	and.w	r3, r3, #3
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	220f      	movs	r2, #15
 8007f12:	fa02 f303 	lsl.w	r3, r2, r3
 8007f16:	43db      	mvns	r3, r3
 8007f18:	69fa      	ldr	r2, [r7, #28]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	0a9a      	lsrs	r2, r3, #10
 8007f22:	4b3e      	ldr	r3, [pc, #248]	; (800801c <HAL_GPIO_Init+0x3ac>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	f002 0203 	and.w	r2, r2, #3
 8007f2c:	00d2      	lsls	r2, r2, #3
 8007f2e:	4093      	lsls	r3, r2
 8007f30:	69fa      	ldr	r2, [r7, #28]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8007f36:	4938      	ldr	r1, [pc, #224]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	089b      	lsrs	r3, r3, #2
 8007f3c:	3318      	adds	r3, #24
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8007f44:	4b34      	ldr	r3, [pc, #208]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f4a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	43db      	mvns	r3, r3
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	4013      	ands	r3, r2
 8007f54:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_GPIO_Init+0x2fa>
        {
          tmp |= iocurrent;
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8007f6a:	4a2b      	ldr	r2, [pc, #172]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        tmp = EXTI->EMR1;
 8007f72:	4b29      	ldr	r3, [pc, #164]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f78:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	4013      	ands	r3, r2
 8007f82:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_GPIO_Init+0x328>
        {
          tmp |= iocurrent;
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8007f98:	4a1f      	ldr	r2, [pc, #124]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8007fa0:	4b1d      	ldr	r3, [pc, #116]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	4013      	ands	r3, r2
 8007fae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <HAL_GPIO_Init+0x354>
        {
          tmp |= iocurrent;
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8007fc4:	4a14      	ldr	r2, [pc, #80]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8007fca:	4b13      	ldr	r3, [pc, #76]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d003      	beq.n	8007fee <HAL_GPIO_Init+0x37e>
        {
          tmp |= iocurrent;
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8007fee:	4a0a      	ldr	r2, [pc, #40]	; (8008018 <HAL_GPIO_Init+0x3a8>)
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	6053      	str	r3, [r2, #4]
      }
    }
    position++;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	fa22 f303 	lsr.w	r3, r2, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	f47f ae3d 	bne.w	8007c84 <HAL_GPIO_Init+0x14>
  }
}
 800800a:	bf00      	nop
 800800c:	bf00      	nop
 800800e:	3724      	adds	r7, #36	; 0x24
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	46022000 	.word	0x46022000
 800801c:	002f7f7f 	.word	0x002f7f7f

08008020 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008020:	b480      	push	{r7}
 8008022:	b089      	sub	sp, #36	; 0x24
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8008032:	e0bc      	b.n	80081ae <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8008034:	2201      	movs	r2, #1
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	4013      	ands	r3, r2
 8008040:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	f000 80ad 	beq.w	80081a8 <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a5e      	ldr	r2, [pc, #376]	; (80081cc <HAL_GPIO_DeInit+0x1ac>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d115      	bne.n	8008082 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 8008056:	4a5e      	ldr	r2, [pc, #376]	; (80081d0 <HAL_GPIO_DeInit+0x1b0>)
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800805e:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8008060:	4a5b      	ldr	r2, [pc, #364]	; (80081d0 <HAL_GPIO_DeInit+0x1b0>)
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	00db      	lsls	r3, r3, #3
 8008066:	4413      	add	r3, r2
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 800806c:	4b57      	ldr	r3, [pc, #348]	; (80081cc <HAL_GPIO_DeInit+0x1ac>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	2101      	movs	r1, #1
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	fa01 f303 	lsl.w	r3, r1, r3
 8008078:	43db      	mvns	r3, r3
 800807a:	4954      	ldr	r1, [pc, #336]	; (80081cc <HAL_GPIO_DeInit+0x1ac>)
 800807c:	4013      	ands	r3, r2
 800807e:	600b      	str	r3, [r1, #0]
 8008080:	e053      	b.n	800812a <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 8008082:	4a54      	ldr	r2, [pc, #336]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	089b      	lsrs	r3, r3, #2
 8008088:	3318      	adds	r3, #24
 800808a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800808e:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	220f      	movs	r2, #15
 800809a:	fa02 f303 	lsl.w	r3, r2, r3
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4013      	ands	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	0a9a      	lsrs	r2, r3, #10
 80080a8:	4b4b      	ldr	r3, [pc, #300]	; (80081d8 <HAL_GPIO_DeInit+0x1b8>)
 80080aa:	4013      	ands	r3, r2
 80080ac:	69ba      	ldr	r2, [r7, #24]
 80080ae:	f002 0203 	and.w	r2, r2, #3
 80080b2:	00d2      	lsls	r2, r2, #3
 80080b4:	4093      	lsls	r3, r2
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d136      	bne.n	800812a <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 80080bc:	4b45      	ldr	r3, [pc, #276]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 80080be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	43db      	mvns	r3, r3
 80080c6:	4943      	ldr	r1, [pc, #268]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 80080ce:	4b41      	ldr	r3, [pc, #260]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 80080d0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	43db      	mvns	r3, r3
 80080d8:	493e      	ldr	r1, [pc, #248]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 80080da:	4013      	ands	r3, r2
 80080dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 80080e0:	4b3c      	ldr	r3, [pc, #240]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	43db      	mvns	r3, r3
 80080e8:	493a      	ldr	r1, [pc, #232]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 80080ee:	4b39      	ldr	r3, [pc, #228]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	43db      	mvns	r3, r3
 80080f6:	4937      	ldr	r1, [pc, #220]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	220f      	movs	r2, #15
 8008106:	fa02 f303 	lsl.w	r3, r2, r3
 800810a:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 800810c:	4a31      	ldr	r2, [pc, #196]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	089b      	lsrs	r3, r3, #2
 8008112:	3318      	adds	r3, #24
 8008114:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	43da      	mvns	r2, r3
 800811c:	482d      	ldr	r0, [pc, #180]	; (80081d4 <HAL_GPIO_DeInit+0x1b4>)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	089b      	lsrs	r3, r3, #2
 8008122:	400a      	ands	r2, r1
 8008124:	3318      	adds	r3, #24
 8008126:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	2103      	movs	r1, #3
 8008134:	fa01 f303 	lsl.w	r3, r1, r3
 8008138:	431a      	orrs	r2, r3
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	08da      	lsrs	r2, r3, #3
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	3208      	adds	r2, #8
 8008146:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	220f      	movs	r2, #15
 8008154:	fa02 f303 	lsl.w	r3, r2, r3
 8008158:	43db      	mvns	r3, r3
 800815a:	69fa      	ldr	r2, [r7, #28]
 800815c:	08d2      	lsrs	r2, r2, #3
 800815e:	4019      	ands	r1, r3
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3208      	adds	r2, #8
 8008164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	2103      	movs	r1, #3
 8008172:	fa01 f303 	lsl.w	r3, r1, r3
 8008176:	43db      	mvns	r3, r3
 8008178:	401a      	ands	r2, r3
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	685a      	ldr	r2, [r3, #4]
 8008182:	2101      	movs	r1, #1
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	fa01 f303 	lsl.w	r3, r1, r3
 800818a:	43db      	mvns	r3, r3
 800818c:	401a      	ands	r2, r3
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	68da      	ldr	r2, [r3, #12]
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	2103      	movs	r1, #3
 800819c:	fa01 f303 	lsl.w	r3, r1, r3
 80081a0:	43db      	mvns	r3, r3
 80081a2:	401a      	ands	r2, r3
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	3301      	adds	r3, #1
 80081ac:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	fa22 f303 	lsr.w	r3, r2, r3
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f47f af3c 	bne.w	8008034 <HAL_GPIO_DeInit+0x14>
  }
}
 80081bc:	bf00      	nop
 80081be:	bf00      	nop
 80081c0:	3724      	adds	r7, #36	; 0x24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	46020000 	.word	0x46020000
 80081d0:	0801b714 	.word	0x0801b714
 80081d4:	46022000 	.word	0x46022000
 80081d8:	002f7f7f 	.word	0x002f7f7f

080081dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691a      	ldr	r2, [r3, #16]
 80081ec:	887b      	ldrh	r3, [r7, #2]
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081f4:	2301      	movs	r3, #1
 80081f6:	73fb      	strb	r3, [r7, #15]
 80081f8:	e001      	b.n	80081fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081fa:	2300      	movs	r3, #0
 80081fc:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 80081fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	807b      	strh	r3, [r7, #2]
 8008218:	4613      	mov	r3, r2
 800821a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800821c:	787b      	ldrb	r3, [r7, #1]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d003      	beq.n	800822a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008222:	887a      	ldrh	r2, [r7, #2]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8008228:	e002      	b.n	8008230 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800822a:	887a      	ldrh	r2, [r7, #2]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8008246:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008248:	68da      	ldr	r2, [r3, #12]
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	4013      	ands	r3, r2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d006      	beq.n	8008260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008252:	4a0c      	ldr	r2, [pc, #48]	; (8008284 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008254:	88fb      	ldrh	r3, [r7, #6]
 8008256:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008258:	88fb      	ldrh	r3, [r7, #6]
 800825a:	4618      	mov	r0, r3
 800825c:	f7f9 ff52 	bl	8002104 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8008260:	4b08      	ldr	r3, [pc, #32]	; (8008284 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8008262:	691a      	ldr	r2, [r3, #16]
 8008264:	88fb      	ldrh	r3, [r7, #6]
 8008266:	4013      	ands	r3, r2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d006      	beq.n	800827a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800826c:	4a05      	ldr	r2, [pc, #20]	; (8008284 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800826e:	88fb      	ldrh	r3, [r7, #6]
 8008270:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008272:	88fb      	ldrh	r3, [r7, #6]
 8008274:	4618      	mov	r0, r3
 8008276:	f000 f807 	bl	8008288 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800827a:	bf00      	nop
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	46022000 	.word	0x46022000

08008288 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	4603      	mov	r3, r0
 8008290:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8008292:	bf00      	nop
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e081      	b.n	80083b4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d106      	bne.n	80082ca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7f9 fd45 	bl	8001d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2224      	movs	r2, #36	; 0x24
 80082ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0201 	bic.w	r2, r2, #1
 80082e0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80082ee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082fe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d107      	bne.n	8008318 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008314:	609a      	str	r2, [r3, #8]
 8008316:	e006      	b.n	8008326 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689a      	ldr	r2, [r3, #8]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008324:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68db      	ldr	r3, [r3, #12]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d104      	bne.n	8008338 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008336:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6812      	ldr	r2, [r2, #0]
 8008342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800835a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691a      	ldr	r2, [r3, #16]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	ea42 0103 	orr.w	r1, r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	021a      	lsls	r2, r3, #8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69d9      	ldr	r1, [r3, #28]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1a      	ldr	r2, [r3, #32]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f042 0201 	orr.w	r2, r2, #1
 8008394:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2220      	movs	r2, #32
 80083a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e021      	b.n	8008412 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2224      	movs	r2, #36	; 0x24
 80083d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0201 	bic.w	r2, r2, #1
 80083e4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7f9 fd18 	bl	8001e1c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
	...

0800841c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b088      	sub	sp, #32
 8008420:	af02      	add	r7, sp, #8
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	461a      	mov	r2, r3
 800842a:	4603      	mov	r3, r0
 800842c:	817b      	strh	r3, [r7, #10]
 800842e:	460b      	mov	r3, r1
 8008430:	813b      	strh	r3, [r7, #8]
 8008432:	4613      	mov	r3, r2
 8008434:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b20      	cmp	r3, #32
 8008440:	f040 80f9 	bne.w	8008636 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008444:	6a3b      	ldr	r3, [r7, #32]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d002      	beq.n	8008450 <HAL_I2C_Mem_Write+0x34>
 800844a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	d105      	bne.n	800845c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008456:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e0ed      	b.n	8008638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_I2C_Mem_Write+0x4e>
 8008466:	2302      	movs	r3, #2
 8008468:	e0e6      	b.n	8008638 <HAL_I2C_Mem_Write+0x21c>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008472:	f7fe fa6f 	bl	8006954 <HAL_GetTick>
 8008476:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	2319      	movs	r3, #25
 800847e:	2201      	movs	r2, #1
 8008480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f000 fadd 	bl	8008a44 <I2C_WaitOnFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e0d1      	b.n	8008638 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2221      	movs	r2, #33	; 0x21
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2240      	movs	r2, #64	; 0x40
 80084a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a3a      	ldr	r2, [r7, #32]
 80084ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80084b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80084bc:	88f8      	ldrh	r0, [r7, #6]
 80084be:	893a      	ldrh	r2, [r7, #8]
 80084c0:	8979      	ldrh	r1, [r7, #10]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	4603      	mov	r3, r0
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f9ed 	bl	80088ac <I2C_RequestMemoryWrite>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0a9      	b.n	8008638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	2bff      	cmp	r3, #255	; 0xff
 80084ec:	d90e      	bls.n	800850c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	22ff      	movs	r2, #255	; 0xff
 80084f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	8979      	ldrh	r1, [r7, #10]
 80084fc:	2300      	movs	r3, #0
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fc09 	bl	8008d1c <I2C_TransferConfig>
 800850a:	e00f      	b.n	800852c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008510:	b29a      	uxth	r2, r3
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800851a:	b2da      	uxtb	r2, r3
 800851c:	8979      	ldrh	r1, [r7, #10]
 800851e:	2300      	movs	r3, #0
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 fbf8 	bl	8008d1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 fac7 	bl	8008ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e07b      	b.n	8008638 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	781a      	ldrb	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800855a:	b29b      	uxth	r3, r3
 800855c:	3b01      	subs	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008568:	3b01      	subs	r3, #1
 800856a:	b29a      	uxth	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d034      	beq.n	80085e4 <HAL_I2C_Mem_Write+0x1c8>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d130      	bne.n	80085e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	9300      	str	r3, [sp, #0]
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	2200      	movs	r2, #0
 800858a:	2180      	movs	r1, #128	; 0x80
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 fa59 	bl	8008a44 <I2C_WaitOnFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e04d      	b.n	8008638 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	2bff      	cmp	r3, #255	; 0xff
 80085a4:	d90e      	bls.n	80085c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	22ff      	movs	r2, #255	; 0xff
 80085aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	8979      	ldrh	r1, [r7, #10]
 80085b4:	2300      	movs	r3, #0
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f000 fbad 	bl	8008d1c <I2C_TransferConfig>
 80085c2:	e00f      	b.n	80085e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	8979      	ldrh	r1, [r7, #10]
 80085d6:	2300      	movs	r3, #0
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 fb9c 	bl	8008d1c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d19e      	bne.n	800852c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 faa6 	bl	8008b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e01a      	b.n	8008638 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2220      	movs	r2, #32
 8008608:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6859      	ldr	r1, [r3, #4]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <HAL_I2C_Mem_Write+0x224>)
 8008616:	400b      	ands	r3, r1
 8008618:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2220      	movs	r2, #32
 800861e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e000      	b.n	8008638 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008636:	2302      	movs	r3, #2
  }
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	fe00e800 	.word	0xfe00e800

08008644 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af02      	add	r7, sp, #8
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	4608      	mov	r0, r1
 800864e:	4611      	mov	r1, r2
 8008650:	461a      	mov	r2, r3
 8008652:	4603      	mov	r3, r0
 8008654:	817b      	strh	r3, [r7, #10]
 8008656:	460b      	mov	r3, r1
 8008658:	813b      	strh	r3, [r7, #8]
 800865a:	4613      	mov	r3, r2
 800865c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b20      	cmp	r3, #32
 8008668:	f040 80fd 	bne.w	8008866 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <HAL_I2C_Mem_Read+0x34>
 8008672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	d105      	bne.n	8008684 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800867e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e0f1      	b.n	8008868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800868a:	2b01      	cmp	r3, #1
 800868c:	d101      	bne.n	8008692 <HAL_I2C_Mem_Read+0x4e>
 800868e:	2302      	movs	r3, #2
 8008690:	e0ea      	b.n	8008868 <HAL_I2C_Mem_Read+0x224>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800869a:	f7fe f95b 	bl	8006954 <HAL_GetTick>
 800869e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	2319      	movs	r3, #25
 80086a6:	2201      	movs	r2, #1
 80086a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 f9c9 	bl	8008a44 <I2C_WaitOnFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e0d5      	b.n	8008868 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2222      	movs	r2, #34	; 0x22
 80086c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2240      	movs	r2, #64	; 0x40
 80086c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a3a      	ldr	r2, [r7, #32]
 80086d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80086dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80086e4:	88f8      	ldrh	r0, [r7, #6]
 80086e6:	893a      	ldrh	r2, [r7, #8]
 80086e8:	8979      	ldrh	r1, [r7, #10]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	9301      	str	r3, [sp, #4]
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	4603      	mov	r3, r0
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 f92d 	bl	8008954 <I2C_RequestMemoryRead>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e0ad      	b.n	8008868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008710:	b29b      	uxth	r3, r3
 8008712:	2bff      	cmp	r3, #255	; 0xff
 8008714:	d90e      	bls.n	8008734 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	22ff      	movs	r2, #255	; 0xff
 800871a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008720:	b2da      	uxtb	r2, r3
 8008722:	8979      	ldrh	r1, [r7, #10]
 8008724:	4b52      	ldr	r3, [pc, #328]	; (8008870 <HAL_I2C_Mem_Read+0x22c>)
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 faf5 	bl	8008d1c <I2C_TransferConfig>
 8008732:	e00f      	b.n	8008754 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008738:	b29a      	uxth	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008742:	b2da      	uxtb	r2, r3
 8008744:	8979      	ldrh	r1, [r7, #10]
 8008746:	4b4a      	ldr	r3, [pc, #296]	; (8008870 <HAL_I2C_Mem_Read+0x22c>)
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 fae4 	bl	8008d1c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875a:	2200      	movs	r2, #0
 800875c:	2104      	movs	r1, #4
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f000 f970 	bl	8008a44 <I2C_WaitOnFlagUntilTimeout>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e07c      	b.n	8008868 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	1c5a      	adds	r2, r3, #1
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800878a:	3b01      	subs	r3, #1
 800878c:	b29a      	uxth	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008796:	b29b      	uxth	r3, r3
 8008798:	3b01      	subs	r3, #1
 800879a:	b29a      	uxth	r2, r3
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d034      	beq.n	8008814 <HAL_I2C_Mem_Read+0x1d0>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d130      	bne.n	8008814 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	2200      	movs	r2, #0
 80087ba:	2180      	movs	r1, #128	; 0x80
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 f941 	bl	8008a44 <I2C_WaitOnFlagUntilTimeout>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e04d      	b.n	8008868 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2bff      	cmp	r3, #255	; 0xff
 80087d4:	d90e      	bls.n	80087f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	22ff      	movs	r2, #255	; 0xff
 80087da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	8979      	ldrh	r1, [r7, #10]
 80087e4:	2300      	movs	r3, #0
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 fa95 	bl	8008d1c <I2C_TransferConfig>
 80087f2:	e00f      	b.n	8008814 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008802:	b2da      	uxtb	r2, r3
 8008804:	8979      	ldrh	r1, [r7, #10]
 8008806:	2300      	movs	r3, #0
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 fa84 	bl	8008d1c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008818:	b29b      	uxth	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d19a      	bne.n	8008754 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f98e 	bl	8008b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e01a      	b.n	8008868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2220      	movs	r2, #32
 8008838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	6859      	ldr	r1, [r3, #4]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	4b0b      	ldr	r3, [pc, #44]	; (8008874 <HAL_I2C_Mem_Read+0x230>)
 8008846:	400b      	ands	r3, r1
 8008848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2220      	movs	r2, #32
 800884e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	e000      	b.n	8008868 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008866:	2302      	movs	r3, #2
  }
}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	80002400 	.word	0x80002400
 8008874:	fe00e800 	.word	0xfe00e800

08008878 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008886:	b2db      	uxtb	r3, r3
}
 8008888:	4618      	mov	r0, r3
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af02      	add	r7, sp, #8
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	4608      	mov	r0, r1
 80088b6:	4611      	mov	r1, r2
 80088b8:	461a      	mov	r2, r3
 80088ba:	4603      	mov	r3, r0
 80088bc:	817b      	strh	r3, [r7, #10]
 80088be:	460b      	mov	r3, r1
 80088c0:	813b      	strh	r3, [r7, #8]
 80088c2:	4613      	mov	r3, r2
 80088c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	8979      	ldrh	r1, [r7, #10]
 80088cc:	4b20      	ldr	r3, [pc, #128]	; (8008950 <I2C_RequestMemoryWrite+0xa4>)
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 fa21 	bl	8008d1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	69b9      	ldr	r1, [r7, #24]
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f000 f8f0 	bl	8008ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e02c      	b.n	8008948 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80088ee:	88fb      	ldrh	r3, [r7, #6]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d105      	bne.n	8008900 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80088f4:	893b      	ldrh	r3, [r7, #8]
 80088f6:	b2da      	uxtb	r2, r3
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	629a      	str	r2, [r3, #40]	; 0x28
 80088fe:	e015      	b.n	800892c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008900:	893b      	ldrh	r3, [r7, #8]
 8008902:	0a1b      	lsrs	r3, r3, #8
 8008904:	b29b      	uxth	r3, r3
 8008906:	b2da      	uxtb	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800890e:	69fa      	ldr	r2, [r7, #28]
 8008910:	69b9      	ldr	r1, [r7, #24]
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 f8d6 	bl	8008ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e012      	b.n	8008948 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008922:	893b      	ldrh	r3, [r7, #8]
 8008924:	b2da      	uxtb	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	69bb      	ldr	r3, [r7, #24]
 8008932:	2200      	movs	r2, #0
 8008934:	2180      	movs	r1, #128	; 0x80
 8008936:	68f8      	ldr	r0, [r7, #12]
 8008938:	f000 f884 	bl	8008a44 <I2C_WaitOnFlagUntilTimeout>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d001      	beq.n	8008946 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008942:	2301      	movs	r3, #1
 8008944:	e000      	b.n	8008948 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	80002000 	.word	0x80002000

08008954 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af02      	add	r7, sp, #8
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	461a      	mov	r2, r3
 8008962:	4603      	mov	r3, r0
 8008964:	817b      	strh	r3, [r7, #10]
 8008966:	460b      	mov	r3, r1
 8008968:	813b      	strh	r3, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800896e:	88fb      	ldrh	r3, [r7, #6]
 8008970:	b2da      	uxtb	r2, r3
 8008972:	8979      	ldrh	r1, [r7, #10]
 8008974:	4b20      	ldr	r3, [pc, #128]	; (80089f8 <I2C_RequestMemoryRead+0xa4>)
 8008976:	9300      	str	r3, [sp, #0]
 8008978:	2300      	movs	r3, #0
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 f9ce 	bl	8008d1c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	69b9      	ldr	r1, [r7, #24]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 f89d 	bl	8008ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e02c      	b.n	80089ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008994:	88fb      	ldrh	r3, [r7, #6]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d105      	bne.n	80089a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800899a:	893b      	ldrh	r3, [r7, #8]
 800899c:	b2da      	uxtb	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	629a      	str	r2, [r3, #40]	; 0x28
 80089a4:	e015      	b.n	80089d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80089a6:	893b      	ldrh	r3, [r7, #8]
 80089a8:	0a1b      	lsrs	r3, r3, #8
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	b2da      	uxtb	r2, r3
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089b4:	69fa      	ldr	r2, [r7, #28]
 80089b6:	69b9      	ldr	r1, [r7, #24]
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 f883 	bl	8008ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e012      	b.n	80089ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089c8:	893b      	ldrh	r3, [r7, #8]
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	2200      	movs	r2, #0
 80089da:	2140      	movs	r1, #64	; 0x40
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 f831 	bl	8008a44 <I2C_WaitOnFlagUntilTimeout>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	80002000 	.word	0x80002000

080089fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d103      	bne.n	8008a1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2200      	movs	r2, #0
 8008a18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d007      	beq.n	8008a38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f042 0201 	orr.w	r2, r2, #1
 8008a36:	619a      	str	r2, [r3, #24]
  }
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	4613      	mov	r3, r2
 8008a52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a54:	e022      	b.n	8008a9c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5c:	d01e      	beq.n	8008a9c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a5e:	f7fd ff79 	bl	8006954 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	683a      	ldr	r2, [r7, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d302      	bcc.n	8008a74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d113      	bne.n	8008a9c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a78:	f043 0220 	orr.w	r2, r3, #32
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2220      	movs	r2, #32
 8008a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e00f      	b.n	8008abc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	bf0c      	ite	eq
 8008aac:	2301      	moveq	r3, #1
 8008aae:	2300      	movne	r3, #0
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d0cd      	beq.n	8008a56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008ad0:	e02c      	b.n	8008b2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	68b9      	ldr	r1, [r7, #8]
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 f870 	bl	8008bbc <I2C_IsErrorOccurred>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d001      	beq.n	8008ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e02a      	b.n	8008b3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aec:	d01e      	beq.n	8008b2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aee:	f7fd ff31 	bl	8006954 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d302      	bcc.n	8008b04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d113      	bne.n	8008b2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b08:	f043 0220 	orr.w	r2, r3, #32
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e007      	b.n	8008b3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d1cb      	bne.n	8008ad2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b50:	e028      	b.n	8008ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 f830 	bl	8008bbc <I2C_IsErrorOccurred>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e026      	b.n	8008bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b66:	f7fd fef5 	bl	8006954 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d302      	bcc.n	8008b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d113      	bne.n	8008ba4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b80:	f043 0220 	orr.w	r2, r3, #32
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e007      	b.n	8008bb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b20      	cmp	r3, #32
 8008bb0:	d1cf      	bne.n	8008b52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	77fb      	strb	r3, [r7, #31]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	617b      	str	r3, [r7, #20]
  uint32_t error_code = 0;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	61bb      	str	r3, [r7, #24]

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f003 0310 	and.w	r3, r3, #16
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d040      	beq.n	8008c64 <I2C_IsErrorOccurred+0xa8>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008bf0:	d01d      	beq.n	8008c2e <I2C_IsErrorOccurred+0x72>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	685a      	ldr	r2, [r3, #4]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c00:	605a      	str	r2, [r3, #4]
    }

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c02:	e014      	b.n	8008c2e <I2C_IsErrorOccurred+0x72>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d010      	beq.n	8008c2e <I2C_IsErrorOccurred+0x72>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c0c:	f7fd fea2 	bl	8006954 <HAL_GetTick>
 8008c10:	4602      	mov	r2, r0
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	1ad3      	subs	r3, r2, r3
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d302      	bcc.n	8008c22 <I2C_IsErrorOccurred+0x66>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d105      	bne.n	8008c2e <I2C_IsErrorOccurred+0x72>
        {
          error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	f043 0320 	orr.w	r3, r3, #32
 8008c28:	61bb      	str	r3, [r7, #24]

          status = HAL_ERROR;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	77fb      	strb	r3, [r7, #31]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	f003 0320 	and.w	r3, r3, #32
 8008c38:	2b20      	cmp	r3, #32
 8008c3a:	d002      	beq.n	8008c42 <I2C_IsErrorOccurred+0x86>
 8008c3c:	7ffb      	ldrb	r3, [r7, #31]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d0e0      	beq.n	8008c04 <I2C_IsErrorOccurred+0x48>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008c42:	7ffb      	ldrb	r3, [r7, #31]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d103      	bne.n	8008c50 <I2C_IsErrorOccurred+0x94>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	61da      	str	r2, [r3, #28]
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2210      	movs	r2, #16
 8008c56:	61da      	str	r2, [r3, #28]

    error_code |= HAL_I2C_ERROR_AF;
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	f043 0304 	orr.w	r3, r3, #4
 8008c5e:	61bb      	str	r3, [r7, #24]

    status = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	77fb      	strb	r3, [r7, #31]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	617b      	str	r3, [r7, #20]

  /* Then verify if an additionnal errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	f043 0301 	orr.w	r3, r3, #1
 8008c7c:	61bb      	str	r3, [r7, #24]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <I2C_IsErrorOccurred+0xf0>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	f043 0308 	orr.w	r3, r3, #8
 8008c9c:	61bb      	str	r3, [r7, #24]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ca6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	77fb      	strb	r3, [r7, #31]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d00a      	beq.n	8008ccc <I2C_IsErrorOccurred+0x110>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	f043 0302 	orr.w	r3, r3, #2
 8008cbc:	61bb      	str	r3, [r7, #24]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	77fb      	strb	r3, [r7, #31]
  }

  if (status != HAL_OK)
 8008ccc:	7ffb      	ldrb	r3, [r7, #31]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d01c      	beq.n	8008d0c <I2C_IsErrorOccurred+0x150>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff fe92 	bl	80089fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	6859      	ldr	r1, [r3, #4]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	; (8008d18 <I2C_IsErrorOccurred+0x15c>)
 8008ce4:	400b      	ands	r3, r1
 8008ce6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2220      	movs	r2, #32
 8008cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008d0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	fe00e800 	.word	0xfe00e800

08008d1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	607b      	str	r3, [r7, #4]
 8008d26:	460b      	mov	r3, r1
 8008d28:	817b      	strh	r3, [r7, #10]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	0d5b      	lsrs	r3, r3, #21
 8008d38:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008d3c:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <I2C_TransferConfig+0x58>)
 8008d3e:	430b      	orrs	r3, r1
 8008d40:	43db      	mvns	r3, r3
 8008d42:	ea02 0103 	and.w	r1, r2, r3
 8008d46:	897b      	ldrh	r3, [r7, #10]
 8008d48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008d4c:	7a7b      	ldrb	r3, [r7, #9]
 8008d4e:	041b      	lsls	r3, r3, #16
 8008d50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d54:	431a      	orrs	r2, r3
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	431a      	orrs	r2, r3
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]
                                    (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                                    I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8008d66:	bf00      	nop
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	03ff63ff 	.word	0x03ff63ff

08008d78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b20      	cmp	r3, #32
 8008d8c:	d138      	bne.n	8008e00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d101      	bne.n	8008d9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008d98:	2302      	movs	r3, #2
 8008d9a:	e032      	b.n	8008e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2224      	movs	r2, #36	; 0x24
 8008da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008dca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6819      	ldr	r1, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	430a      	orrs	r2, r1
 8008dda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0201 	orr.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2220      	movs	r2, #32
 8008df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	e000      	b.n	8008e02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008e00:	2302      	movs	r3, #2
  }
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b085      	sub	sp, #20
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b20      	cmp	r3, #32
 8008e22:	d139      	bne.n	8008e98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d101      	bne.n	8008e32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e033      	b.n	8008e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2224      	movs	r2, #36	; 0x24
 8008e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0201 	bic.w	r2, r2, #1
 8008e50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008e60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	021b      	lsls	r3, r3, #8
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0201 	orr.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	e000      	b.n	8008e9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008e98:	2302      	movs	r3, #2
  }
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
	...

08008ea8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008eb0:	4b34      	ldr	r3, [pc, #208]	; (8008f84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008eb8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d101      	bne.n	8008ec6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e057      	b.n	8008f76 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ecc:	d90a      	bls.n	8008ee4 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8008ece:	4b2d      	ldr	r3, [pc, #180]	; (8008f84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	4a2a      	ldr	r2, [pc, #168]	; (8008f84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ee0:	60d3      	str	r3, [r2, #12]
 8008ee2:	e007      	b.n	8008ef4 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8008ee4:	4b27      	ldr	r3, [pc, #156]	; (8008f84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008eec:	4925      	ldr	r1, [pc, #148]	; (8008f84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is rised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008ef4:	4b24      	ldr	r3, [pc, #144]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a24      	ldr	r2, [pc, #144]	; (8008f8c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008efa:	fba2 2303 	umull	r2, r3, r2, r3
 8008efe:	099b      	lsrs	r3, r3, #6
 8008f00:	2232      	movs	r2, #50	; 0x32
 8008f02:	fb02 f303 	mul.w	r3, r2, r3
 8008f06:	4a21      	ldr	r2, [pc, #132]	; (8008f8c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008f08:	fba2 2303 	umull	r2, r3, r2, r3
 8008f0c:	099b      	lsrs	r3, r3, #6
 8008f0e:	3301      	adds	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008f12:	e002      	b.n	8008f1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	3b01      	subs	r3, #1
 8008f18:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8008f1a:	4b1a      	ldr	r3, [pc, #104]	; (8008f84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d102      	bne.n	8008f2c <HAL_PWREx_ControlVoltageScaling+0x84>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1f3      	bne.n	8008f14 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01b      	beq.n	8008f6a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is rised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008f32:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a15      	ldr	r2, [pc, #84]	; (8008f8c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008f38:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3c:	099b      	lsrs	r3, r3, #6
 8008f3e:	2232      	movs	r2, #50	; 0x32
 8008f40:	fb02 f303 	mul.w	r3, r2, r3
 8008f44:	4a11      	ldr	r2, [pc, #68]	; (8008f8c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8008f46:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4a:	099b      	lsrs	r3, r3, #6
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008f50:	e002      	b.n	8008f58 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	3b01      	subs	r3, #1
 8008f56:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d102      	bne.n	8008f6a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f3      	bne.n	8008f52 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e000      	b.n	8008f76 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	46020800 	.word	0x46020800
 8008f88:	20000010 	.word	0x20000010
 8008f8c:	10624dd3 	.word	0x10624dd3

08008f90 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008f90:	b480      	push	{r7}
 8008f92:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008f94:	4b04      	ldr	r3, [pc, #16]	; (8008fa8 <HAL_PWREx_GetVoltageRange+0x18>)
 8008f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop
 8008fa8:	46020800 	.word	0x46020800

08008fac <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8008fb0:	4b05      	ldr	r3, [pc, #20]	; (8008fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb4:	4a04      	ldr	r2, [pc, #16]	; (8008fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008fb6:	f043 0301 	orr.w	r3, r3, #1
 8008fba:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8008fbc:	bf00      	nop
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	46020800 	.word	0x46020800

08008fcc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b08c      	sub	sp, #48	; 0x30
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d102      	bne.n	8008fe6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f000 be58 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fe6:	4ba2      	ldr	r3, [pc, #648]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f003 030c 	and.w	r3, r3, #12
 8008fee:	62bb      	str	r3, [r7, #40]	; 0x28
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ff0:	4b9f      	ldr	r3, [pc, #636]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	627b      	str	r3, [r7, #36]	; 0x24

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0310 	and.w	r3, r3, #16
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 816f 	beq.w	80092e6 <HAL_RCC_OscConfig+0x31a>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	2b00      	cmp	r3, #0
 800900c:	d007      	beq.n	800901e <HAL_RCC_OscConfig+0x52>
 800900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009010:	2b0c      	cmp	r3, #12
 8009012:	f040 80e1 	bne.w	80091d8 <HAL_RCC_OscConfig+0x20c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	2b01      	cmp	r3, #1
 800901a:	f040 80dd 	bne.w	80091d8 <HAL_RCC_OscConfig+0x20c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800901e:	4b94      	ldr	r3, [pc, #592]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0304 	and.w	r3, r3, #4
 8009026:	2b00      	cmp	r3, #0
 8009028:	d006      	beq.n	8009038 <HAL_RCC_OscConfig+0x6c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d102      	bne.n	8009038 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	f000 be2f 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800903c:	4b8c      	ldr	r3, [pc, #560]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009044:	2b00      	cmp	r3, #0
 8009046:	d004      	beq.n	8009052 <HAL_RCC_OscConfig+0x86>
 8009048:	4b89      	ldr	r3, [pc, #548]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009050:	e005      	b.n	800905e <HAL_RCC_OscConfig+0x92>
 8009052:	4b87      	ldr	r3, [pc, #540]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009054:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009058:	041b      	lsls	r3, r3, #16
 800905a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800905e:	4293      	cmp	r3, r2
 8009060:	d255      	bcs.n	800910e <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10a      	bne.n	800907e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	4618      	mov	r0, r3
 800906e:	f001 f8dd 	bl	800a22c <RCC_SetFlashLatencyFromMSIRange>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	f000 be0c 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800907e:	4b7c      	ldr	r3, [pc, #496]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	4a7b      	ldr	r2, [pc, #492]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009084:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009088:	6093      	str	r3, [r2, #8]
 800908a:	4b79      	ldr	r3, [pc, #484]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	4976      	ldr	r1, [pc, #472]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009098:	4313      	orrs	r3, r2
 800909a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80090a4:	d309      	bcc.n	80090ba <HAL_RCC_OscConfig+0xee>
 80090a6:	4b72      	ldr	r3, [pc, #456]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	f023 021f 	bic.w	r2, r3, #31
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	496f      	ldr	r1, [pc, #444]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	60cb      	str	r3, [r1, #12]
 80090b8:	e07e      	b.n	80091b8 <HAL_RCC_OscConfig+0x1ec>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	2b00      	cmp	r3, #0
 80090c0:	da0a      	bge.n	80090d8 <HAL_RCC_OscConfig+0x10c>
 80090c2:	4b6b      	ldr	r3, [pc, #428]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	015b      	lsls	r3, r3, #5
 80090d0:	4967      	ldr	r1, [pc, #412]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	60cb      	str	r3, [r1, #12]
 80090d6:	e06f      	b.n	80091b8 <HAL_RCC_OscConfig+0x1ec>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090e0:	d30a      	bcc.n	80090f8 <HAL_RCC_OscConfig+0x12c>
 80090e2:	4b63      	ldr	r3, [pc, #396]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	029b      	lsls	r3, r3, #10
 80090f0:	495f      	ldr	r1, [pc, #380]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60cb      	str	r3, [r1, #12]
 80090f6:	e05f      	b.n	80091b8 <HAL_RCC_OscConfig+0x1ec>
 80090f8:	4b5d      	ldr	r3, [pc, #372]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a1b      	ldr	r3, [r3, #32]
 8009104:	03db      	lsls	r3, r3, #15
 8009106:	495a      	ldr	r1, [pc, #360]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009108:	4313      	orrs	r3, r2
 800910a:	60cb      	str	r3, [r1, #12]
 800910c:	e054      	b.n	80091b8 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800910e:	4b58      	ldr	r3, [pc, #352]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	4a57      	ldr	r2, [pc, #348]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009114:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009118:	6093      	str	r3, [r2, #8]
 800911a:	4b55      	ldr	r3, [pc, #340]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	4952      	ldr	r1, [pc, #328]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009128:	4313      	orrs	r3, r2
 800912a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009134:	d309      	bcc.n	800914a <HAL_RCC_OscConfig+0x17e>
 8009136:	4b4e      	ldr	r3, [pc, #312]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f023 021f 	bic.w	r2, r3, #31
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	494b      	ldr	r1, [pc, #300]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009144:	4313      	orrs	r3, r2
 8009146:	60cb      	str	r3, [r1, #12]
 8009148:	e028      	b.n	800919c <HAL_RCC_OscConfig+0x1d0>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	2b00      	cmp	r3, #0
 8009150:	da0a      	bge.n	8009168 <HAL_RCC_OscConfig+0x19c>
 8009152:	4b47      	ldr	r3, [pc, #284]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a1b      	ldr	r3, [r3, #32]
 800915e:	015b      	lsls	r3, r3, #5
 8009160:	4943      	ldr	r1, [pc, #268]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009162:	4313      	orrs	r3, r2
 8009164:	60cb      	str	r3, [r1, #12]
 8009166:	e019      	b.n	800919c <HAL_RCC_OscConfig+0x1d0>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009170:	d30a      	bcc.n	8009188 <HAL_RCC_OscConfig+0x1bc>
 8009172:	4b3f      	ldr	r3, [pc, #252]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	029b      	lsls	r3, r3, #10
 8009180:	493b      	ldr	r1, [pc, #236]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009182:	4313      	orrs	r3, r2
 8009184:	60cb      	str	r3, [r1, #12]
 8009186:	e009      	b.n	800919c <HAL_RCC_OscConfig+0x1d0>
 8009188:	4b39      	ldr	r3, [pc, #228]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6a1b      	ldr	r3, [r3, #32]
 8009194:	03db      	lsls	r3, r3, #15
 8009196:	4936      	ldr	r1, [pc, #216]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009198:	4313      	orrs	r3, r2
 800919a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 f840 	bl	800a22c <RCC_SetFlashLatencyFromMSIRange>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d002      	beq.n	80091b8 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	f000 bd6f 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80091b8:	f000 ffe2 	bl	800a180 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80091bc:	4b2d      	ldr	r3, [pc, #180]	; (8009274 <HAL_RCC_OscConfig+0x2a8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fd fb7d 	bl	80068c0 <HAL_InitTick>
 80091c6:	4603      	mov	r3, r0
 80091c8:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK)
 80091ca:	7ffb      	ldrb	r3, [r7, #31]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8089 	beq.w	80092e4 <HAL_RCC_OscConfig+0x318>
        {
          return status;
 80091d2:	7ffb      	ldrb	r3, [r7, #31]
 80091d4:	f000 bd5f 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d066      	beq.n	80092ae <HAL_RCC_OscConfig+0x2e2>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80091e0:	4b23      	ldr	r3, [pc, #140]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a22      	ldr	r2, [pc, #136]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80091ec:	f7fd fbb2 	bl	8006954 <HAL_GetTick>
 80091f0:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80091f2:	e009      	b.n	8009208 <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80091f4:	f7fd fbae 	bl	8006954 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d902      	bls.n	8009208 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	f000 bd47 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009208:	4b19      	ldr	r3, [pc, #100]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	d0ef      	beq.n	80091f4 <HAL_RCC_OscConfig+0x228>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8009214:	4b16      	ldr	r3, [pc, #88]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	4a15      	ldr	r2, [pc, #84]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800921a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800921e:	6093      	str	r3, [r2, #8]
 8009220:	4b13      	ldr	r3, [pc, #76]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922c:	4910      	ldr	r1, [pc, #64]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800922e:	4313      	orrs	r3, r2
 8009230:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800923a:	d309      	bcc.n	8009250 <HAL_RCC_OscConfig+0x284>
 800923c:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	f023 021f 	bic.w	r2, r3, #31
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a1b      	ldr	r3, [r3, #32]
 8009248:	4909      	ldr	r1, [pc, #36]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800924a:	4313      	orrs	r3, r2
 800924c:	60cb      	str	r3, [r1, #12]
 800924e:	e04a      	b.n	80092e6 <HAL_RCC_OscConfig+0x31a>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	2b00      	cmp	r3, #0
 8009256:	da0f      	bge.n	8009278 <HAL_RCC_OscConfig+0x2ac>
 8009258:	4b05      	ldr	r3, [pc, #20]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	015b      	lsls	r3, r3, #5
 8009266:	4902      	ldr	r1, [pc, #8]	; (8009270 <HAL_RCC_OscConfig+0x2a4>)
 8009268:	4313      	orrs	r3, r2
 800926a:	60cb      	str	r3, [r1, #12]
 800926c:	e03b      	b.n	80092e6 <HAL_RCC_OscConfig+0x31a>
 800926e:	bf00      	nop
 8009270:	46020c00 	.word	0x46020c00
 8009274:	200000a8 	.word	0x200000a8
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009280:	d30a      	bcc.n	8009298 <HAL_RCC_OscConfig+0x2cc>
 8009282:	4b94      	ldr	r3, [pc, #592]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	029b      	lsls	r3, r3, #10
 8009290:	4990      	ldr	r1, [pc, #576]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009292:	4313      	orrs	r3, r2
 8009294:	60cb      	str	r3, [r1, #12]
 8009296:	e026      	b.n	80092e6 <HAL_RCC_OscConfig+0x31a>
 8009298:	4b8e      	ldr	r3, [pc, #568]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800929a:	68db      	ldr	r3, [r3, #12]
 800929c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a1b      	ldr	r3, [r3, #32]
 80092a4:	03db      	lsls	r3, r3, #15
 80092a6:	498b      	ldr	r1, [pc, #556]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80092a8:	4313      	orrs	r3, r2
 80092aa:	60cb      	str	r3, [r1, #12]
 80092ac:	e01b      	b.n	80092e6 <HAL_RCC_OscConfig+0x31a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80092ae:	4b89      	ldr	r3, [pc, #548]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a88      	ldr	r2, [pc, #544]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80092b4:	f023 0301 	bic.w	r3, r3, #1
 80092b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80092ba:	f7fd fb4b 	bl	8006954 <HAL_GetTick>
 80092be:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80092c0:	e009      	b.n	80092d6 <HAL_RCC_OscConfig+0x30a>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80092c2:	f7fd fb47 	bl	8006954 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d902      	bls.n	80092d6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	f000 bce0 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80092d6:	4b7f      	ldr	r3, [pc, #508]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f003 0304 	and.w	r3, r3, #4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d1ef      	bne.n	80092c2 <HAL_RCC_OscConfig+0x2f6>
 80092e2:	e000      	b.n	80092e6 <HAL_RCC_OscConfig+0x31a>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80092e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f000 808d 	beq.w	800940e <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d005      	beq.n	8009306 <HAL_RCC_OscConfig+0x33a>
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	2b0c      	cmp	r3, #12
 80092fe:	d10f      	bne.n	8009320 <HAL_RCC_OscConfig+0x354>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	2b03      	cmp	r3, #3
 8009304:	d10c      	bne.n	8009320 <HAL_RCC_OscConfig+0x354>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009306:	4b73      	ldr	r3, [pc, #460]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d07c      	beq.n	800940c <HAL_RCC_OscConfig+0x440>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d178      	bne.n	800940c <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	f000 bcbb 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	685b      	ldr	r3, [r3, #4]
 8009324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009328:	d106      	bne.n	8009338 <HAL_RCC_OscConfig+0x36c>
 800932a:	4b6a      	ldr	r3, [pc, #424]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a69      	ldr	r2, [pc, #420]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	e03b      	b.n	80093b0 <HAL_RCC_OscConfig+0x3e4>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009340:	d112      	bne.n	8009368 <HAL_RCC_OscConfig+0x39c>
 8009342:	4b64      	ldr	r3, [pc, #400]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a63      	ldr	r2, [pc, #396]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800934c:	6013      	str	r3, [r2, #0]
 800934e:	4b61      	ldr	r3, [pc, #388]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a60      	ldr	r2, [pc, #384]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009354:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	4b5e      	ldr	r3, [pc, #376]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a5d      	ldr	r2, [pc, #372]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	e023      	b.n	80093b0 <HAL_RCC_OscConfig+0x3e4>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8009370:	d112      	bne.n	8009398 <HAL_RCC_OscConfig+0x3cc>
 8009372:	4b58      	ldr	r3, [pc, #352]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a57      	ldr	r2, [pc, #348]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	4b55      	ldr	r3, [pc, #340]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a54      	ldr	r2, [pc, #336]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009384:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	4b52      	ldr	r3, [pc, #328]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a51      	ldr	r2, [pc, #324]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	e00b      	b.n	80093b0 <HAL_RCC_OscConfig+0x3e4>
 8009398:	4b4e      	ldr	r3, [pc, #312]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a4d      	ldr	r2, [pc, #308]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800939e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	4b4b      	ldr	r3, [pc, #300]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a4a      	ldr	r2, [pc, #296]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80093aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d014      	beq.n	80093e2 <HAL_RCC_OscConfig+0x416>
      {
        tickstart = HAL_GetTick();
 80093b8:	f7fd facc 	bl	8006954 <HAL_GetTick>
 80093bc:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093be:	e009      	b.n	80093d4 <HAL_RCC_OscConfig+0x408>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093c0:	f7fd fac8 	bl	8006954 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	2b64      	cmp	r3, #100	; 0x64
 80093cc:	d902      	bls.n	80093d4 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	f000 bc61 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80093d4:	4b3f      	ldr	r3, [pc, #252]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d0ef      	beq.n	80093c0 <HAL_RCC_OscConfig+0x3f4>
 80093e0:	e015      	b.n	800940e <HAL_RCC_OscConfig+0x442>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80093e2:	f7fd fab7 	bl	8006954 <HAL_GetTick>
 80093e6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80093e8:	e009      	b.n	80093fe <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093ea:	f7fd fab3 	bl	8006954 <HAL_GetTick>
 80093ee:	4602      	mov	r2, r0
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	2b64      	cmp	r3, #100	; 0x64
 80093f6:	d902      	bls.n	80093fe <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 80093f8:	2303      	movs	r3, #3
 80093fa:	f000 bc4c 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80093fe:	4b35      	ldr	r3, [pc, #212]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1ef      	bne.n	80093ea <HAL_RCC_OscConfig+0x41e>
 800940a:	e000      	b.n	800940e <HAL_RCC_OscConfig+0x442>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800940c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0302 	and.w	r3, r3, #2
 8009416:	2b00      	cmp	r3, #0
 8009418:	d064      	beq.n	80094e4 <HAL_RCC_OscConfig+0x518>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800941a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941c:	2b04      	cmp	r3, #4
 800941e:	d005      	beq.n	800942c <HAL_RCC_OscConfig+0x460>
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	2b0c      	cmp	r3, #12
 8009424:	d11a      	bne.n	800945c <HAL_RCC_OscConfig+0x490>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009428:	2b02      	cmp	r3, #2
 800942a:	d117      	bne.n	800945c <HAL_RCC_OscConfig+0x490>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800942c:	4b29      	ldr	r3, [pc, #164]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009434:	2b00      	cmp	r3, #0
 8009436:	d006      	beq.n	8009446 <HAL_RCC_OscConfig+0x47a>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d102      	bne.n	8009446 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	f000 bc28 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009446:	4b23      	ldr	r3, [pc, #140]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	041b      	lsls	r3, r3, #16
 8009454:	491f      	ldr	r1, [pc, #124]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009456:	4313      	orrs	r3, r2
 8009458:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800945a:	e043      	b.n	80094e4 <HAL_RCC_OscConfig+0x518>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d024      	beq.n	80094ae <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8009464:	4b1b      	ldr	r3, [pc, #108]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a1a      	ldr	r2, [pc, #104]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800946a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800946e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009470:	f7fd fa70 	bl	8006954 <HAL_GetTick>
 8009474:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009476:	e009      	b.n	800948c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009478:	f7fd fa6c 	bl	8006954 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	6a3b      	ldr	r3, [r7, #32]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d902      	bls.n	800948c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	f000 bc05 	b.w	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800948c:	4b11      	ldr	r3, [pc, #68]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0ef      	beq.n	8009478 <HAL_RCC_OscConfig+0x4ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8009498:	4b0e      	ldr	r3, [pc, #56]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	691b      	ldr	r3, [r3, #16]
 80094a4:	041b      	lsls	r3, r3, #16
 80094a6:	490b      	ldr	r1, [pc, #44]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	610b      	str	r3, [r1, #16]
 80094ac:	e01a      	b.n	80094e4 <HAL_RCC_OscConfig+0x518>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80094ae:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a08      	ldr	r2, [pc, #32]	; (80094d4 <HAL_RCC_OscConfig+0x508>)
 80094b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094b8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80094ba:	f7fd fa4b 	bl	8006954 <HAL_GetTick>
 80094be:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094c0:	e00a      	b.n	80094d8 <HAL_RCC_OscConfig+0x50c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094c2:	f7fd fa47 	bl	8006954 <HAL_GetTick>
 80094c6:	4602      	mov	r2, r0
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	1ad3      	subs	r3, r2, r3
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d903      	bls.n	80094d8 <HAL_RCC_OscConfig+0x50c>
          {
            return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e3e0      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
 80094d4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80094d8:	4baf      	ldr	r3, [pc, #700]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1ee      	bne.n	80094c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0308 	and.w	r3, r3, #8
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 80c7 	beq.w	8009680 <HAL_RCC_OscConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80094f2:	2300      	movs	r3, #0
 80094f4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094f8:	4ba7      	ldr	r3, [pc, #668]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80094fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b00      	cmp	r3, #0
 8009504:	d111      	bne.n	800952a <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009506:	4ba4      	ldr	r3, [pc, #656]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800950c:	4aa2      	ldr	r2, [pc, #648]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 800950e:	f043 0304 	orr.w	r3, r3, #4
 8009512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009516:	4ba0      	ldr	r3, [pc, #640]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800951c:	f003 0304 	and.w	r3, r3, #4
 8009520:	617b      	str	r3, [r7, #20]
 8009522:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8009524:	2301      	movs	r3, #1
 8009526:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800952a:	4b9c      	ldr	r3, [pc, #624]	; (800979c <HAL_RCC_OscConfig+0x7d0>)
 800952c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b00      	cmp	r3, #0
 8009534:	d118      	bne.n	8009568 <HAL_RCC_OscConfig+0x59c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009536:	4b99      	ldr	r3, [pc, #612]	; (800979c <HAL_RCC_OscConfig+0x7d0>)
 8009538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953a:	4a98      	ldr	r2, [pc, #608]	; (800979c <HAL_RCC_OscConfig+0x7d0>)
 800953c:	f043 0301 	orr.w	r3, r3, #1
 8009540:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009542:	f7fd fa07 	bl	8006954 <HAL_GetTick>
 8009546:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009548:	e008      	b.n	800955c <HAL_RCC_OscConfig+0x590>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800954a:	f7fd fa03 	bl	8006954 <HAL_GetTick>
 800954e:	4602      	mov	r2, r0
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	2b02      	cmp	r3, #2
 8009556:	d901      	bls.n	800955c <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e39c      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800955c:	4b8f      	ldr	r3, [pc, #572]	; (800979c <HAL_RCC_OscConfig+0x7d0>)
 800955e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0f0      	beq.n	800954a <HAL_RCC_OscConfig+0x57e>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	695b      	ldr	r3, [r3, #20]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d05f      	beq.n	8009630 <HAL_RCC_OscConfig+0x664>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009570:	4b89      	ldr	r3, [pc, #548]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009576:	61bb      	str	r3, [r7, #24]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	699a      	ldr	r2, [r3, #24]
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009582:	429a      	cmp	r2, r3
 8009584:	d037      	beq.n	80095f6 <HAL_RCC_OscConfig+0x62a>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d006      	beq.n	800959e <HAL_RCC_OscConfig+0x5d2>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <HAL_RCC_OscConfig+0x5d2>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e37b      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d01b      	beq.n	80095e0 <HAL_RCC_OscConfig+0x614>
        {
          __HAL_RCC_LSI_DISABLE();
 80095a8:	4b7b      	ldr	r3, [pc, #492]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80095aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095ae:	4a7a      	ldr	r2, [pc, #488]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80095b0:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80095b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80095b8:	f7fd f9cc 	bl	8006954 <HAL_GetTick>
 80095bc:	6238      	str	r0, [r7, #32]

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0x606>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80095c0:	f7fd f9c8 	bl	8006954 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0x606>
            {
              return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e361      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80095d2:	4b71      	ldr	r3, [pc, #452]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80095d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1ef      	bne.n	80095c0 <HAL_RCC_OscConfig+0x5f4>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80095e0:	4b6d      	ldr	r3, [pc, #436]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80095e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	496a      	ldr	r1, [pc, #424]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80095f6:	4b68      	ldr	r3, [pc, #416]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80095f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095fc:	4a66      	ldr	r2, [pc, #408]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80095fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009602:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8009606:	f7fd f9a5 	bl	8006954 <HAL_GetTick>
 800960a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800960c:	e008      	b.n	8009620 <HAL_RCC_OscConfig+0x654>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800960e:	f7fd f9a1 	bl	8006954 <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	2b02      	cmp	r3, #2
 800961a:	d901      	bls.n	8009620 <HAL_RCC_OscConfig+0x654>
        {
          return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e33a      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009620:	4b5d      	ldr	r3, [pc, #372]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d0ef      	beq.n	800960e <HAL_RCC_OscConfig+0x642>
 800962e:	e01b      	b.n	8009668 <HAL_RCC_OscConfig+0x69c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8009630:	4b59      	ldr	r3, [pc, #356]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009636:	4a58      	ldr	r2, [pc, #352]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009638:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800963c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8009640:	f7fd f988 	bl	8006954 <HAL_GetTick>
 8009644:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009646:	e008      	b.n	800965a <HAL_RCC_OscConfig+0x68e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009648:	f7fd f984 	bl	8006954 <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	6a3b      	ldr	r3, [r7, #32]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b02      	cmp	r3, #2
 8009654:	d901      	bls.n	800965a <HAL_RCC_OscConfig+0x68e>
        {
          return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e31d      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800965a:	4b4f      	ldr	r3, [pc, #316]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 800965c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1ef      	bne.n	8009648 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009668:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800966c:	2b01      	cmp	r3, #1
 800966e:	d107      	bne.n	8009680 <HAL_RCC_OscConfig+0x6b4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009670:	4b49      	ldr	r3, [pc, #292]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009676:	4a48      	ldr	r2, [pc, #288]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009678:	f023 0304 	bic.w	r3, r3, #4
 800967c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0304 	and.w	r3, r3, #4
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 8112 	beq.w	80098b2 <HAL_RCC_OscConfig+0x8e6>
  {
    FlagStatus pwrclkchanged = RESET;
 800968e:	2300      	movs	r3, #0
 8009690:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009694:	4b40      	ldr	r3, [pc, #256]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d111      	bne.n	80096c6 <HAL_RCC_OscConfig+0x6fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096a2:	4b3d      	ldr	r3, [pc, #244]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80096a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096a8:	4a3b      	ldr	r2, [pc, #236]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80096aa:	f043 0304 	orr.w	r3, r3, #4
 80096ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80096b2:	4b39      	ldr	r3, [pc, #228]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 80096b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	613b      	str	r3, [r7, #16]
 80096be:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80096c0:	2301      	movs	r3, #1
 80096c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80096c6:	4b35      	ldr	r3, [pc, #212]	; (800979c <HAL_RCC_OscConfig+0x7d0>)
 80096c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ca:	f003 0301 	and.w	r3, r3, #1
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d118      	bne.n	8009704 <HAL_RCC_OscConfig+0x738>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80096d2:	4b32      	ldr	r3, [pc, #200]	; (800979c <HAL_RCC_OscConfig+0x7d0>)
 80096d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d6:	4a31      	ldr	r2, [pc, #196]	; (800979c <HAL_RCC_OscConfig+0x7d0>)
 80096d8:	f043 0301 	orr.w	r3, r3, #1
 80096dc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096de:	f7fd f939 	bl	8006954 <HAL_GetTick>
 80096e2:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80096e4:	e008      	b.n	80096f8 <HAL_RCC_OscConfig+0x72c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096e6:	f7fd f935 	bl	8006954 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	6a3b      	ldr	r3, [r7, #32]
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	2b02      	cmp	r3, #2
 80096f2:	d901      	bls.n	80096f8 <HAL_RCC_OscConfig+0x72c>
        {
          return HAL_TIMEOUT;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e2ce      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80096f8:	4b28      	ldr	r3, [pc, #160]	; (800979c <HAL_RCC_OscConfig+0x7d0>)
 80096fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fc:	f003 0301 	and.w	r3, r3, #1
 8009700:	2b00      	cmp	r3, #0
 8009702:	d0f0      	beq.n	80096e6 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d01f      	beq.n	8009750 <HAL_RCC_OscConfig+0x784>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d010      	beq.n	800973e <HAL_RCC_OscConfig+0x772>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800971c:	4b1e      	ldr	r3, [pc, #120]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 800971e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009722:	4a1d      	ldr	r2, [pc, #116]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009724:	f043 0304 	orr.w	r3, r3, #4
 8009728:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800972c:	4b1a      	ldr	r3, [pc, #104]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 800972e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009732:	4a19      	ldr	r2, [pc, #100]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009734:	f043 0301 	orr.w	r3, r3, #1
 8009738:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800973c:	e018      	b.n	8009770 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800973e:	4b16      	ldr	r3, [pc, #88]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009744:	4a14      	ldr	r2, [pc, #80]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009746:	f043 0301 	orr.w	r3, r3, #1
 800974a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800974e:	e00f      	b.n	8009770 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009750:	4b11      	ldr	r3, [pc, #68]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009756:	4a10      	ldr	r2, [pc, #64]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009758:	f023 0301 	bic.w	r3, r3, #1
 800975c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009760:	4b0d      	ldr	r3, [pc, #52]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009766:	4a0c      	ldr	r2, [pc, #48]	; (8009798 <HAL_RCC_OscConfig+0x7cc>)
 8009768:	f023 0304 	bic.w	r3, r3, #4
 800976c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d058      	beq.n	800982a <HAL_RCC_OscConfig+0x85e>
    {
      tickstart = HAL_GetTick();
 8009778:	f7fd f8ec 	bl	8006954 <HAL_GetTick>
 800977c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800977e:	e00f      	b.n	80097a0 <HAL_RCC_OscConfig+0x7d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009780:	f7fd f8e8 	bl	8006954 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	f241 3288 	movw	r2, #5000	; 0x1388
 800978e:	4293      	cmp	r3, r2
 8009790:	d906      	bls.n	80097a0 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 8009792:	2303      	movs	r3, #3
 8009794:	e27f      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
 8009796:	bf00      	nop
 8009798:	46020c00 	.word	0x46020c00
 800979c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a0:	4ba4      	ldr	r3, [pc, #656]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80097a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0e8      	beq.n	8009780 <HAL_RCC_OscConfig+0x7b4>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d01b      	beq.n	80097f2 <HAL_RCC_OscConfig+0x826>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80097ba:	4b9e      	ldr	r3, [pc, #632]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80097bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097c0:	4a9c      	ldr	r2, [pc, #624]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80097c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80097ca:	e00a      	b.n	80097e2 <HAL_RCC_OscConfig+0x816>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097cc:	f7fd f8c2 	bl	8006954 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097da:	4293      	cmp	r3, r2
 80097dc:	d901      	bls.n	80097e2 <HAL_RCC_OscConfig+0x816>
          {
            return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e259      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80097e2:	4b94      	ldr	r3, [pc, #592]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80097e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d0ed      	beq.n	80097cc <HAL_RCC_OscConfig+0x800>
 80097f0:	e053      	b.n	800989a <HAL_RCC_OscConfig+0x8ce>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80097f2:	4b90      	ldr	r3, [pc, #576]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80097f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097f8:	4a8e      	ldr	r2, [pc, #568]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80097fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009802:	e00a      	b.n	800981a <HAL_RCC_OscConfig+0x84e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009804:	f7fd f8a6 	bl	8006954 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009812:	4293      	cmp	r3, r2
 8009814:	d901      	bls.n	800981a <HAL_RCC_OscConfig+0x84e>
          {
            return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e23d      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800981a:	4b86      	ldr	r3, [pc, #536]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 800981c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1ed      	bne.n	8009804 <HAL_RCC_OscConfig+0x838>
 8009828:	e037      	b.n	800989a <HAL_RCC_OscConfig+0x8ce>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800982a:	f7fd f893 	bl	8006954 <HAL_GetTick>
 800982e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009830:	e00a      	b.n	8009848 <HAL_RCC_OscConfig+0x87c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009832:	f7fd f88f 	bl	8006954 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	6a3b      	ldr	r3, [r7, #32]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009840:	4293      	cmp	r3, r2
 8009842:	d901      	bls.n	8009848 <HAL_RCC_OscConfig+0x87c>
        {
          return HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	e226      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009848:	4b7a      	ldr	r3, [pc, #488]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 800984a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1ed      	bne.n	8009832 <HAL_RCC_OscConfig+0x866>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8009856:	4b77      	ldr	r3, [pc, #476]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800985c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009860:	2b00      	cmp	r3, #0
 8009862:	d01a      	beq.n	800989a <HAL_RCC_OscConfig+0x8ce>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009864:	4b73      	ldr	r3, [pc, #460]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009866:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800986a:	4a72      	ldr	r2, [pc, #456]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 800986c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009870:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009874:	e00a      	b.n	800988c <HAL_RCC_OscConfig+0x8c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009876:	f7fd f86d 	bl	8006954 <HAL_GetTick>
 800987a:	4602      	mov	r2, r0
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	f241 3288 	movw	r2, #5000	; 0x1388
 8009884:	4293      	cmp	r3, r2
 8009886:	d901      	bls.n	800988c <HAL_RCC_OscConfig+0x8c0>
          {
            return HAL_TIMEOUT;
 8009888:	2303      	movs	r3, #3
 800988a:	e204      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800988c:	4b69      	ldr	r3, [pc, #420]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 800988e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1ed      	bne.n	8009876 <HAL_RCC_OscConfig+0x8aa>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800989a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d107      	bne.n	80098b2 <HAL_RCC_OscConfig+0x8e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80098a2:	4b64      	ldr	r3, [pc, #400]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80098a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098a8:	4a62      	ldr	r2, [pc, #392]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80098aa:	f023 0304 	bic.w	r3, r3, #4
 80098ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f003 0320 	and.w	r3, r3, #32
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d036      	beq.n	800992c <HAL_RCC_OscConfig+0x960>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d019      	beq.n	80098fa <HAL_RCC_OscConfig+0x92e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80098c6:	4b5b      	ldr	r3, [pc, #364]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a5a      	ldr	r2, [pc, #360]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80098cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80098d0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80098d2:	f7fd f83f 	bl	8006954 <HAL_GetTick>
 80098d6:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80098d8:	e008      	b.n	80098ec <HAL_RCC_OscConfig+0x920>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80098da:	f7fd f83b 	bl	8006954 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d901      	bls.n	80098ec <HAL_RCC_OscConfig+0x920>
        {
          return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e1d4      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80098ec:	4b51      	ldr	r3, [pc, #324]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d0f0      	beq.n	80098da <HAL_RCC_OscConfig+0x90e>
 80098f8:	e018      	b.n	800992c <HAL_RCC_OscConfig+0x960>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80098fa:	4b4e      	ldr	r3, [pc, #312]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a4d      	ldr	r2, [pc, #308]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009900:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009904:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009906:	f7fd f825 	bl	8006954 <HAL_GetTick>
 800990a:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800990c:	e008      	b.n	8009920 <HAL_RCC_OscConfig+0x954>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800990e:	f7fd f821 	bl	8006954 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	2b02      	cmp	r3, #2
 800991a:	d901      	bls.n	8009920 <HAL_RCC_OscConfig+0x954>
        {
          return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e1ba      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009920:	4b44      	ldr	r3, [pc, #272]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1f0      	bne.n	800990e <HAL_RCC_OscConfig+0x942>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009934:	2b00      	cmp	r3, #0
 8009936:	d036      	beq.n	80099a6 <HAL_RCC_OscConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993c:	2b00      	cmp	r3, #0
 800993e:	d019      	beq.n	8009974 <HAL_RCC_OscConfig+0x9a8>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8009940:	4b3c      	ldr	r3, [pc, #240]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a3b      	ldr	r2, [pc, #236]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800994a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800994c:	f7fd f802 	bl	8006954 <HAL_GetTick>
 8009950:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009952:	e008      	b.n	8009966 <HAL_RCC_OscConfig+0x99a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009954:	f7fc fffe 	bl	8006954 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	2b02      	cmp	r3, #2
 8009960:	d901      	bls.n	8009966 <HAL_RCC_OscConfig+0x99a>
        {
          return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e197      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009966:	4b33      	ldr	r3, [pc, #204]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d0f0      	beq.n	8009954 <HAL_RCC_OscConfig+0x988>
 8009972:	e018      	b.n	80099a6 <HAL_RCC_OscConfig+0x9da>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009974:	4b2f      	ldr	r3, [pc, #188]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a2e      	ldr	r2, [pc, #184]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 800997a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800997e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009980:	f7fc ffe8 	bl	8006954 <HAL_GetTick>
 8009984:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009986:	e008      	b.n	800999a <HAL_RCC_OscConfig+0x9ce>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009988:	f7fc ffe4 	bl	8006954 <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	2b02      	cmp	r3, #2
 8009994:	d901      	bls.n	800999a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e17d      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800999a:	4b26      	ldr	r3, [pc, #152]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1f0      	bne.n	8009988 <HAL_RCC_OscConfig+0x9bc>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d07f      	beq.n	8009ab2 <HAL_RCC_OscConfig+0xae6>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d062      	beq.n	8009a80 <HAL_RCC_OscConfig+0xab4>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80099ba:	4b1e      	ldr	r3, [pc, #120]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	4a1d      	ldr	r2, [pc, #116]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80099c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099c4:	6093      	str	r3, [r2, #8]
 80099c6:	4b1b      	ldr	r3, [pc, #108]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d2:	4918      	ldr	r1, [pc, #96]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099dc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80099e0:	d309      	bcc.n	80099f6 <HAL_RCC_OscConfig+0xa2a>
 80099e2:	4b14      	ldr	r3, [pc, #80]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f023 021f 	bic.w	r2, r3, #31
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	4911      	ldr	r1, [pc, #68]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60cb      	str	r3, [r1, #12]
 80099f4:	e02a      	b.n	8009a4c <HAL_RCC_OscConfig+0xa80>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	da0a      	bge.n	8009a14 <HAL_RCC_OscConfig+0xa48>
 80099fe:	4b0d      	ldr	r3, [pc, #52]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a1b      	ldr	r3, [r3, #32]
 8009a0a:	015b      	lsls	r3, r3, #5
 8009a0c:	4909      	ldr	r1, [pc, #36]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	60cb      	str	r3, [r1, #12]
 8009a12:	e01b      	b.n	8009a4c <HAL_RCC_OscConfig+0xa80>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a1c:	d30c      	bcc.n	8009a38 <HAL_RCC_OscConfig+0xa6c>
 8009a1e:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6a1b      	ldr	r3, [r3, #32]
 8009a2a:	029b      	lsls	r3, r3, #10
 8009a2c:	4901      	ldr	r1, [pc, #4]	; (8009a34 <HAL_RCC_OscConfig+0xa68>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	60cb      	str	r3, [r1, #12]
 8009a32:	e00b      	b.n	8009a4c <HAL_RCC_OscConfig+0xa80>
 8009a34:	46020c00 	.word	0x46020c00
 8009a38:	4b99      	ldr	r3, [pc, #612]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a1b      	ldr	r3, [r3, #32]
 8009a44:	03db      	lsls	r3, r3, #15
 8009a46:	4996      	ldr	r1, [pc, #600]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8009a4c:	4b94      	ldr	r3, [pc, #592]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a93      	ldr	r2, [pc, #588]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009a52:	f043 0310 	orr.w	r3, r3, #16
 8009a56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009a58:	f7fc ff7c 	bl	8006954 <HAL_GetTick>
 8009a5c:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009a5e:	e008      	b.n	8009a72 <HAL_RCC_OscConfig+0xaa6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009a60:	f7fc ff78 	bl	8006954 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d901      	bls.n	8009a72 <HAL_RCC_OscConfig+0xaa6>
        {
          return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e111      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009a72:	4b8b      	ldr	r3, [pc, #556]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0320 	and.w	r3, r3, #32
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0f0      	beq.n	8009a60 <HAL_RCC_OscConfig+0xa94>
 8009a7e:	e018      	b.n	8009ab2 <HAL_RCC_OscConfig+0xae6>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009a80:	4b87      	ldr	r3, [pc, #540]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a86      	ldr	r2, [pc, #536]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009a86:	f023 0310 	bic.w	r3, r3, #16
 8009a8a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009a8c:	f7fc ff62 	bl	8006954 <HAL_GetTick>
 8009a90:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009a92:	e008      	b.n	8009aa6 <HAL_RCC_OscConfig+0xada>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009a94:	f7fc ff5e 	bl	8006954 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0xada>
        {
          return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e0f7      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009aa6:	4b7e      	ldr	r3, [pc, #504]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f0      	bne.n	8009a94 <HAL_RCC_OscConfig+0xac8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80ec 	beq.w	8009c94 <HAL_RCC_OscConfig+0xcc8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009abc:	4b78      	ldr	r3, [pc, #480]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	f003 030c 	and.w	r3, r3, #12
 8009ac4:	2b0c      	cmp	r3, #12
 8009ac6:	f000 80e3 	beq.w	8009c90 <HAL_RCC_OscConfig+0xcc4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	f040 80be 	bne.w	8009c50 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009ad4:	4b72      	ldr	r3, [pc, #456]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a71      	ldr	r2, [pc, #452]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ade:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009ae0:	f7fc ff38 	bl	8006954 <HAL_GetTick>
 8009ae4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009ae6:	e008      	b.n	8009afa <HAL_RCC_OscConfig+0xb2e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ae8:	f7fc ff34 	bl	8006954 <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	6a3b      	ldr	r3, [r7, #32]
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	2b02      	cmp	r3, #2
 8009af4:	d901      	bls.n	8009afa <HAL_RCC_OscConfig+0xb2e>
          {
            return HAL_TIMEOUT;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e0cd      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009afa:	4b69      	ldr	r3, [pc, #420]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1f0      	bne.n	8009ae8 <HAL_RCC_OscConfig+0xb1c>
          }
        }

        /* Enable PWR CLK */
        __HAL_RCC_PWR_CLK_ENABLE();
 8009b06:	4b66      	ldr	r3, [pc, #408]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b0c:	4a64      	ldr	r2, [pc, #400]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009b0e:	f043 0304 	orr.w	r3, r3, #4
 8009b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009b16:	4b62      	ldr	r3, [pc, #392]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b1c:	f003 0304 	and.w	r3, r3, #4
 8009b20:	60fb      	str	r3, [r7, #12]
 8009b22:	68fb      	ldr	r3, [r7, #12]

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8009b24:	4b5f      	ldr	r3, [pc, #380]	; (8009ca4 <HAL_RCC_OscConfig+0xcd8>)
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b30:	d102      	bne.n	8009b38 <HAL_RCC_OscConfig+0xb6c>
        {
          pwrboosten = SET;
 8009b32:	2301      	movs	r3, #1
 8009b34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009b38:	4b5a      	ldr	r3, [pc, #360]	; (8009ca4 <HAL_RCC_OscConfig+0xcd8>)
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	4a59      	ldr	r2, [pc, #356]	; (8009ca4 <HAL_RCC_OscConfig+0xcd8>)
 8009b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b42:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8009b44:	4b56      	ldr	r3, [pc, #344]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b4c:	f023 0303 	bic.w	r3, r3, #3
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009b58:	3a01      	subs	r2, #1
 8009b5a:	0212      	lsls	r2, r2, #8
 8009b5c:	4311      	orrs	r1, r2
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009b62:	430a      	orrs	r2, r1
 8009b64:	494e      	ldr	r1, [pc, #312]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009b66:	4313      	orrs	r3, r2
 8009b68:	628b      	str	r3, [r1, #40]	; 0x28
 8009b6a:	4b4d      	ldr	r3, [pc, #308]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b6e:	4b4e      	ldr	r3, [pc, #312]	; (8009ca8 <HAL_RCC_OscConfig+0xcdc>)
 8009b70:	4013      	ands	r3, r2
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009b76:	3a01      	subs	r2, #1
 8009b78:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009b80:	3a01      	subs	r2, #1
 8009b82:	0252      	lsls	r2, r2, #9
 8009b84:	b292      	uxth	r2, r2
 8009b86:	4311      	orrs	r1, r2
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009b8c:	3a01      	subs	r2, #1
 8009b8e:	0412      	lsls	r2, r2, #16
 8009b90:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009b94:	4311      	orrs	r1, r2
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009b9a:	3a01      	subs	r2, #1
 8009b9c:	0612      	lsls	r2, r2, #24
 8009b9e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	493e      	ldr	r1, [pc, #248]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009baa:	4b3d      	ldr	r3, [pc, #244]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bae:	4a3c      	ldr	r2, [pc, #240]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009bb0:	f023 0310 	bic.w	r3, r3, #16
 8009bb4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009bb6:	4b3a      	ldr	r3, [pc, #232]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bbe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009bc6:	00d2      	lsls	r2, r2, #3
 8009bc8:	4935      	ldr	r1, [pc, #212]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009bce:	4b34      	ldr	r3, [pc, #208]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd2:	4a33      	ldr	r2, [pc, #204]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009bd4:	f043 0310 	orr.w	r3, r3, #16
 8009bd8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009bda:	4b31      	ldr	r3, [pc, #196]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bde:	f023 020c 	bic.w	r2, r3, #12
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009be6:	492e      	ldr	r1, [pc, #184]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8009bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d105      	bne.n	8009c00 <HAL_RCC_OscConfig+0xc34>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009bf4:	4b2b      	ldr	r3, [pc, #172]	; (8009ca4 <HAL_RCC_OscConfig+0xcd8>)
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	4a2a      	ldr	r2, [pc, #168]	; (8009ca4 <HAL_RCC_OscConfig+0xcd8>)
 8009bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bfe:	60d3      	str	r3, [r2, #12]
        }

        /*Disable PWR clk */
        __HAL_RCC_PWR_CLK_DISABLE();
 8009c00:	4b27      	ldr	r3, [pc, #156]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c06:	4a26      	ldr	r2, [pc, #152]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c08:	f023 0304 	bic.w	r3, r3, #4
 8009c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009c10:	4b23      	ldr	r3, [pc, #140]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c14:	4a22      	ldr	r2, [pc, #136]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c1a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8009c1c:	4b20      	ldr	r3, [pc, #128]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c26:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009c28:	f7fc fe94 	bl	8006954 <HAL_GetTick>
 8009c2c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c30:	f7fc fe90 	bl	8006954 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e029      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009c42:	4b17      	ldr	r3, [pc, #92]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0f0      	beq.n	8009c30 <HAL_RCC_OscConfig+0xc64>
 8009c4e:	e021      	b.n	8009c94 <HAL_RCC_OscConfig+0xcc8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009c50:	4b13      	ldr	r3, [pc, #76]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a12      	ldr	r2, [pc, #72]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009c5a:	6013      	str	r3, [r2, #0]

        /* Disable main PLL outputs to save power if no PLLs on */
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
 8009c5c:	4b10      	ldr	r3, [pc, #64]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c60:	4a0f      	ldr	r2, [pc, #60]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c62:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009c66:	6293      	str	r3, [r2, #40]	; 0x28

        tickstart = HAL_GetTick();
 8009c68:	f7fc fe74 	bl	8006954 <HAL_GetTick>
 8009c6c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009c6e:	e008      	b.n	8009c82 <HAL_RCC_OscConfig+0xcb6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c70:	f7fc fe70 	bl	8006954 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	6a3b      	ldr	r3, [r7, #32]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d901      	bls.n	8009c82 <HAL_RCC_OscConfig+0xcb6>
          {
            return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e009      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009c82:	4b07      	ldr	r3, [pc, #28]	; (8009ca0 <HAL_RCC_OscConfig+0xcd4>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1f0      	bne.n	8009c70 <HAL_RCC_OscConfig+0xca4>
 8009c8e:	e001      	b.n	8009c94 <HAL_RCC_OscConfig+0xcc8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e000      	b.n	8009c96 <HAL_RCC_OscConfig+0xcca>
    }
  }
  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3730      	adds	r7, #48	; 0x30
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	46020c00 	.word	0x46020c00
 8009ca4:	46020800 	.word	0x46020800
 8009ca8:	80800000 	.word	0x80800000

08009cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d101      	bne.n	8009cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e146      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009cc0:	4ba5      	ldr	r3, [pc, #660]	; (8009f58 <HAL_RCC_ClockConfig+0x2ac>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 030f 	and.w	r3, r3, #15
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d910      	bls.n	8009cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cce:	4ba2      	ldr	r3, [pc, #648]	; (8009f58 <HAL_RCC_ClockConfig+0x2ac>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f023 020f 	bic.w	r2, r3, #15
 8009cd6:	49a0      	ldr	r1, [pc, #640]	; (8009f58 <HAL_RCC_ClockConfig+0x2ac>)
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cde:	4b9e      	ldr	r3, [pc, #632]	; (8009f58 <HAL_RCC_ClockConfig+0x2ac>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 030f 	and.w	r3, r3, #15
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d001      	beq.n	8009cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e12e      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f000 80be 	beq.w	8009e7a <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	2b03      	cmp	r3, #3
 8009d04:	d137      	bne.n	8009d76 <HAL_RCC_ClockConfig+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d06:	4b95      	ldr	r3, [pc, #596]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d0c:	4a93      	ldr	r2, [pc, #588]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009d0e:	f043 0304 	orr.w	r3, r3, #4
 8009d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009d16:	4b91      	ldr	r3, [pc, #580]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	68fb      	ldr	r3, [r7, #12]
      tickstart = HAL_GetTick();
 8009d24:	f7fc fe16 	bl	8006954 <HAL_GetTick>
 8009d28:	6178      	str	r0, [r7, #20]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009d2a:	4b8d      	ldr	r3, [pc, #564]	; (8009f60 <HAL_RCC_ClockConfig+0x2b4>)
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00f      	beq.n	8009d56 <HAL_RCC_ClockConfig+0xaa>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009d36:	e008      	b.n	8009d4a <HAL_RCC_ClockConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009d38:	f7fc fe0c 	bl	8006954 <HAL_GetTick>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d901      	bls.n	8009d4a <HAL_RCC_ClockConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e101      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009d4a:	4b85      	ldr	r3, [pc, #532]	; (8009f60 <HAL_RCC_ClockConfig+0x2b4>)
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0f0      	beq.n	8009d38 <HAL_RCC_ClockConfig+0x8c>
          }
        }
      }

      __HAL_RCC_PWR_CLK_DISABLE();
 8009d56:	4b81      	ldr	r3, [pc, #516]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d5c:	4a7f      	ldr	r2, [pc, #508]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009d5e:	f023 0304 	bic.w	r3, r3, #4
 8009d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8009d66:	4b7d      	ldr	r3, [pc, #500]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d121      	bne.n	8009db6 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8009d72:	2301      	movs	r3, #1
 8009d74:	e0eb      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d107      	bne.n	8009d8e <HAL_RCC_ClockConfig+0xe2>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009d7e:	4b77      	ldr	r3, [pc, #476]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d115      	bne.n	8009db6 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e0df      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d107      	bne.n	8009da6 <HAL_RCC_ClockConfig+0xfa>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8009d96:	4b71      	ldr	r3, [pc, #452]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0304 	and.w	r3, r3, #4
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d109      	bne.n	8009db6 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e0d3      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009da6:	4b6d      	ldr	r3, [pc, #436]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e0cb      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009db6:	4b69      	ldr	r3, [pc, #420]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	f023 0203 	bic.w	r2, r3, #3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	685b      	ldr	r3, [r3, #4]
 8009dc2:	4966      	ldr	r1, [pc, #408]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009dc8:	f7fc fdc4 	bl	8006954 <HAL_GetTick>
 8009dcc:	6178      	str	r0, [r7, #20]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d112      	bne.n	8009dfc <HAL_RCC_ClockConfig+0x150>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009dd6:	e00a      	b.n	8009dee <HAL_RCC_ClockConfig+0x142>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009dd8:	f7fc fdbc 	bl	8006954 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d901      	bls.n	8009dee <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e0af      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009dee:	4b5b      	ldr	r3, [pc, #364]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009df0:	69db      	ldr	r3, [r3, #28]
 8009df2:	f003 030c 	and.w	r3, r3, #12
 8009df6:	2b0c      	cmp	r3, #12
 8009df8:	d1ee      	bne.n	8009dd8 <HAL_RCC_ClockConfig+0x12c>
 8009dfa:	e03e      	b.n	8009e7a <HAL_RCC_ClockConfig+0x1ce>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	d112      	bne.n	8009e2a <HAL_RCC_ClockConfig+0x17e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009e04:	e00a      	b.n	8009e1c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e06:	f7fc fda5 	bl	8006954 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e098      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009e1c:	4b4f      	ldr	r3, [pc, #316]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f003 030c 	and.w	r3, r3, #12
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d1ee      	bne.n	8009e06 <HAL_RCC_ClockConfig+0x15a>
 8009e28:	e027      	b.n	8009e7a <HAL_RCC_ClockConfig+0x1ce>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d11d      	bne.n	8009e6e <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009e32:	e00a      	b.n	8009e4a <HAL_RCC_ClockConfig+0x19e>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e34:	f7fc fd8e 	bl	8006954 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d901      	bls.n	8009e4a <HAL_RCC_ClockConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009e46:	2303      	movs	r3, #3
 8009e48:	e081      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009e4a:	4b44      	ldr	r3, [pc, #272]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009e4c:	69db      	ldr	r3, [r3, #28]
 8009e4e:	f003 030c 	and.w	r3, r3, #12
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1ee      	bne.n	8009e34 <HAL_RCC_ClockConfig+0x188>
 8009e56:	e010      	b.n	8009e7a <HAL_RCC_ClockConfig+0x1ce>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e58:	f7fc fd7c 	bl	8006954 <HAL_GetTick>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d901      	bls.n	8009e6e <HAL_RCC_ClockConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	e06f      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009e6e:	4b3b      	ldr	r3, [pc, #236]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	f003 030c 	and.w	r3, r3, #12
 8009e76:	2b04      	cmp	r3, #4
 8009e78:	d1ee      	bne.n	8009e58 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0302 	and.w	r3, r3, #2
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d008      	beq.n	8009e98 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009e86:	4b35      	ldr	r3, [pc, #212]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009e88:	6a1b      	ldr	r3, [r3, #32]
 8009e8a:	f023 020f 	bic.w	r2, r3, #15
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	4932      	ldr	r1, [pc, #200]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 0304 	and.w	r3, r3, #4
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d008      	beq.n	8009eb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009ea4:	4b2d      	ldr	r3, [pc, #180]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009ea6:	6a1b      	ldr	r3, [r3, #32]
 8009ea8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	492a      	ldr	r1, [pc, #168]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0308 	and.w	r3, r3, #8
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d009      	beq.n	8009ed6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009ec2:	4b26      	ldr	r3, [pc, #152]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	011b      	lsls	r3, r3, #4
 8009ed0:	4922      	ldr	r1, [pc, #136]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0310 	and.w	r3, r3, #16
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d008      	beq.n	8009ef4 <HAL_RCC_ClockConfig+0x248>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009ee2:	4b1e      	ldr	r3, [pc, #120]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	695b      	ldr	r3, [r3, #20]
 8009eee:	491b      	ldr	r1, [pc, #108]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	624b      	str	r3, [r1, #36]	; 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009ef4:	4b18      	ldr	r3, [pc, #96]	; (8009f58 <HAL_RCC_ClockConfig+0x2ac>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 030f 	and.w	r3, r3, #15
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d210      	bcs.n	8009f24 <HAL_RCC_ClockConfig+0x278>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f02:	4b15      	ldr	r3, [pc, #84]	; (8009f58 <HAL_RCC_ClockConfig+0x2ac>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f023 020f 	bic.w	r2, r3, #15
 8009f0a:	4913      	ldr	r1, [pc, #76]	; (8009f58 <HAL_RCC_ClockConfig+0x2ac>)
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f12:	4b11      	ldr	r3, [pc, #68]	; (8009f58 <HAL_RCC_ClockConfig+0x2ac>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 030f 	and.w	r3, r3, #15
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d001      	beq.n	8009f24 <HAL_RCC_ClockConfig+0x278>
    {
      return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e014      	b.n	8009f4e <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009f24:	f000 f824 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	4b0c      	ldr	r3, [pc, #48]	; (8009f5c <HAL_RCC_ClockConfig+0x2b0>)
 8009f2c:	6a1b      	ldr	r3, [r3, #32]
 8009f2e:	f003 030f 	and.w	r3, r3, #15
 8009f32:	490c      	ldr	r1, [pc, #48]	; (8009f64 <HAL_RCC_ClockConfig+0x2b8>)
 8009f34:	5ccb      	ldrb	r3, [r1, r3]
 8009f36:	fa22 f303 	lsr.w	r3, r2, r3
 8009f3a:	4a0b      	ldr	r2, [pc, #44]	; (8009f68 <HAL_RCC_ClockConfig+0x2bc>)
 8009f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009f3e:	4b0b      	ldr	r3, [pc, #44]	; (8009f6c <HAL_RCC_ClockConfig+0x2c0>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fc fcbc 	bl	80068c0 <HAL_InitTick>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	74fb      	strb	r3, [r7, #19]

  return status;
 8009f4c:	7cfb      	ldrb	r3, [r7, #19]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	40022000 	.word	0x40022000
 8009f5c:	46020c00 	.word	0x46020c00
 8009f60:	46020800 	.word	0x46020800
 8009f64:	0801b638 	.word	0x0801b638
 8009f68:	20000010 	.word	0x20000010
 8009f6c:	200000a8 	.word	0x200000a8

08009f70 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b08b      	sub	sp, #44	; 0x2c
 8009f74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8009f76:	2300      	movs	r3, #0
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f7e:	4b7b      	ldr	r3, [pc, #492]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	f003 030c 	and.w	r3, r3, #12
 8009f86:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f88:	4b78      	ldr	r3, [pc, #480]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8c:	f003 0303 	and.w	r3, r3, #3
 8009f90:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <HAL_RCC_GetSysClockFreq+0x34>
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	2b0c      	cmp	r3, #12
 8009f9c:	d121      	bne.n	8009fe2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d11e      	bne.n	8009fe2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8009fa4:	4b71      	ldr	r3, [pc, #452]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d107      	bne.n	8009fc0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009fb0:	4b6e      	ldr	r3, [pc, #440]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009fb6:	0b1b      	lsrs	r3, r3, #12
 8009fb8:	f003 030f 	and.w	r3, r3, #15
 8009fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8009fbe:	e005      	b.n	8009fcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009fc0:	4b6a      	ldr	r3, [pc, #424]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	0f1b      	lsrs	r3, r3, #28
 8009fc6:	f003 030f 	and.w	r3, r3, #15
 8009fca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009fcc:	4a68      	ldr	r2, [pc, #416]	; (800a170 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fd4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d110      	bne.n	8009ffe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009fe0:	e00d      	b.n	8009ffe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fe2:	4b62      	ldr	r3, [pc, #392]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	f003 030c 	and.w	r3, r3, #12
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d102      	bne.n	8009ff4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009fee:	4b61      	ldr	r3, [pc, #388]	; (800a174 <HAL_RCC_GetSysClockFreq+0x204>)
 8009ff0:	623b      	str	r3, [r7, #32]
 8009ff2:	e004      	b.n	8009ffe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	2b08      	cmp	r3, #8
 8009ff8:	d101      	bne.n	8009ffe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009ffa:	4b5e      	ldr	r3, [pc, #376]	; (800a174 <HAL_RCC_GetSysClockFreq+0x204>)
 8009ffc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2b0c      	cmp	r3, #12
 800a002:	f040 80ac 	bne.w	800a15e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800a006:	4b59      	ldr	r3, [pc, #356]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a00a:	f003 0303 	and.w	r3, r3, #3
 800a00e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800a010:	4b56      	ldr	r3, [pc, #344]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a014:	0a1b      	lsrs	r3, r3, #8
 800a016:	f003 030f 	and.w	r3, r3, #15
 800a01a:	3301      	adds	r3, #1
 800a01c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800a01e:	4b53      	ldr	r3, [pc, #332]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a022:	091b      	lsrs	r3, r3, #4
 800a024:	f003 0301 	and.w	r3, r3, #1
 800a028:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800a02a:	4b50      	ldr	r3, [pc, #320]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02e:	08db      	lsrs	r3, r3, #3
 800a030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	fb02 f303 	mul.w	r3, r2, r3
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a042:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 8086 	beq.w	800a15a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	2b02      	cmp	r3, #2
 800a052:	d003      	beq.n	800a05c <HAL_RCC_GetSysClockFreq+0xec>
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	2b03      	cmp	r3, #3
 800a058:	d022      	beq.n	800a0a0 <HAL_RCC_GetSysClockFreq+0x130>
 800a05a:	e043      	b.n	800a0e4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	ee07 3a90 	vmov	s15, r3
 800a062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a066:	eddf 6a44 	vldr	s13, [pc, #272]	; 800a178 <HAL_RCC_GetSysClockFreq+0x208>
 800a06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06e:	4b3f      	ldr	r3, [pc, #252]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a07e:	ed97 6a01 	vldr	s12, [r7, #4]
 800a082:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a17c <HAL_RCC_GetSysClockFreq+0x20c>
 800a086:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a092:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800a09e:	e046      	b.n	800a12e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	ee07 3a90 	vmov	s15, r3
 800a0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0aa:	eddf 6a33 	vldr	s13, [pc, #204]	; 800a178 <HAL_RCC_GetSysClockFreq+0x208>
 800a0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0b2:	4b2e      	ldr	r3, [pc, #184]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ba:	ee07 3a90 	vmov	s15, r3
 800a0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a0c2:	ed97 6a01 	vldr	s12, [r7, #4]
 800a0c6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a17c <HAL_RCC_GetSysClockFreq+0x20c>
 800a0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0de:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800a0e2:	e024      	b.n	800a12e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e6:	ee07 3a90 	vmov	s15, r3
 800a0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0fc:	4b1b      	ldr	r3, [pc, #108]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a104:	ee07 3a90 	vmov	s15, r3
 800a108:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a10c:	ed97 6a01 	vldr	s12, [r7, #4]
 800a110:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800a17c <HAL_RCC_GetSysClockFreq+0x20c>
 800a114:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a118:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800a11c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a120:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800a124:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a128:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800a12c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800a12e:	4b0f      	ldr	r3, [pc, #60]	; (800a16c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800a130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a132:	0e1b      	lsrs	r3, r3, #24
 800a134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a138:	3301      	adds	r3, #1
 800a13a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a146:	edd7 6a07 	vldr	s13, [r7, #28]
 800a14a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a14e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a152:	ee17 3a90 	vmov	r3, s15
 800a156:	623b      	str	r3, [r7, #32]
 800a158:	e001      	b.n	800a15e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800a15a:	2300      	movs	r3, #0
 800a15c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800a15e:	6a3b      	ldr	r3, [r7, #32]
}
 800a160:	4618      	mov	r0, r3
 800a162:	372c      	adds	r7, #44	; 0x2c
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	46020c00 	.word	0x46020c00
 800a170:	0801b650 	.word	0x0801b650
 800a174:	00f42400 	.word	0x00f42400
 800a178:	4b742400 	.word	0x4b742400
 800a17c:	46000000 	.word	0x46000000

0800a180 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800a184:	f7ff fef4 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800a188:	4602      	mov	r2, r0
 800a18a:	4b07      	ldr	r3, [pc, #28]	; (800a1a8 <HAL_RCC_GetHCLKFreq+0x28>)
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	f003 030f 	and.w	r3, r3, #15
 800a192:	4906      	ldr	r1, [pc, #24]	; (800a1ac <HAL_RCC_GetHCLKFreq+0x2c>)
 800a194:	5ccb      	ldrb	r3, [r1, r3]
 800a196:	fa22 f303 	lsr.w	r3, r2, r3
 800a19a:	4a05      	ldr	r2, [pc, #20]	; (800a1b0 <HAL_RCC_GetHCLKFreq+0x30>)
 800a19c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800a19e:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <HAL_RCC_GetHCLKFreq+0x30>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	46020c00 	.word	0x46020c00
 800a1ac:	0801b638 	.word	0x0801b638
 800a1b0:	20000010 	.word	0x20000010

0800a1b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800a1b8:	f7ff ffe2 	bl	800a180 <HAL_RCC_GetHCLKFreq>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	4b05      	ldr	r3, [pc, #20]	; (800a1d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	091b      	lsrs	r3, r3, #4
 800a1c4:	f003 0307 	and.w	r3, r3, #7
 800a1c8:	4903      	ldr	r1, [pc, #12]	; (800a1d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1ca:	5ccb      	ldrb	r3, [r1, r3]
 800a1cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	bd80      	pop	{r7, pc}
 800a1d4:	46020c00 	.word	0x46020c00
 800a1d8:	0801b648 	.word	0x0801b648

0800a1dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800a1e0:	f7ff ffce 	bl	800a180 <HAL_RCC_GetHCLKFreq>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	4b05      	ldr	r3, [pc, #20]	; (800a1fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a1e8:	6a1b      	ldr	r3, [r3, #32]
 800a1ea:	0a1b      	lsrs	r3, r3, #8
 800a1ec:	f003 0307 	and.w	r3, r3, #7
 800a1f0:	4903      	ldr	r1, [pc, #12]	; (800a200 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1f2:	5ccb      	ldrb	r3, [r1, r3]
 800a1f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	46020c00 	.word	0x46020c00
 800a200:	0801b648 	.word	0x0801b648

0800a204 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800a208:	f7ff ffba 	bl	800a180 <HAL_RCC_GetHCLKFreq>
 800a20c:	4602      	mov	r2, r0
 800a20e:	4b05      	ldr	r3, [pc, #20]	; (800a224 <HAL_RCC_GetPCLK3Freq+0x20>)
 800a210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a212:	091b      	lsrs	r3, r3, #4
 800a214:	f003 0307 	and.w	r3, r3, #7
 800a218:	4903      	ldr	r1, [pc, #12]	; (800a228 <HAL_RCC_GetPCLK3Freq+0x24>)
 800a21a:	5ccb      	ldrb	r3, [r1, r3]
 800a21c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a220:	4618      	mov	r0, r3
 800a222:	bd80      	pop	{r7, pc}
 800a224:	46020c00 	.word	0x46020c00
 800a228:	0801b648 	.word	0x0801b648

0800a22c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a234:	4b3e      	ldr	r3, [pc, #248]	; (800a330 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a23a:	f003 0304 	and.w	r3, r3, #4
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a242:	f7fe fea5 	bl	8008f90 <HAL_PWREx_GetVoltageRange>
 800a246:	6178      	str	r0, [r7, #20]
 800a248:	e019      	b.n	800a27e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a24a:	4b39      	ldr	r3, [pc, #228]	; (800a330 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a24c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a250:	4a37      	ldr	r2, [pc, #220]	; (800a330 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a252:	f043 0304 	orr.w	r3, r3, #4
 800a256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a25a:	4b35      	ldr	r3, [pc, #212]	; (800a330 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a25c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a260:	f003 0304 	and.w	r3, r3, #4
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a268:	f7fe fe92 	bl	8008f90 <HAL_PWREx_GetVoltageRange>
 800a26c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a26e:	4b30      	ldr	r3, [pc, #192]	; (800a330 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a274:	4a2e      	ldr	r2, [pc, #184]	; (800a330 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800a276:	f023 0304 	bic.w	r3, r3, #4
 800a27a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a284:	d003      	beq.n	800a28e <RCC_SetFlashLatencyFromMSIRange+0x62>
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a28c:	d109      	bne.n	800a2a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a294:	d202      	bcs.n	800a29c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800a296:	2301      	movs	r3, #1
 800a298:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a29a:	e033      	b.n	800a304 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800a29c:	2300      	movs	r3, #0
 800a29e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800a2a0:	e030      	b.n	800a304 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2a8:	d208      	bcs.n	800a2bc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b0:	d102      	bne.n	800a2b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	613b      	str	r3, [r7, #16]
 800a2b6:	e025      	b.n	800a304 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e035      	b.n	800a328 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2c2:	d90f      	bls.n	800a2e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>

      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d109      	bne.n	800a2de <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2d0:	d902      	bls.n	800a2d8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	613b      	str	r3, [r7, #16]
 800a2d6:	e015      	b.n	800a304 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800a2d8:	2301      	movs	r3, #1
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	e012      	b.n	800a304 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800a2de:	2300      	movs	r3, #0
 800a2e0:	613b      	str	r3, [r7, #16]
 800a2e2:	e00f      	b.n	800a304 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2ea:	d109      	bne.n	800a300 <RCC_SetFlashLatencyFromMSIRange+0xd4>

        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2f2:	d102      	bne.n	800a2fa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	613b      	str	r3, [r7, #16]
 800a2f8:	e004      	b.n	800a304 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	613b      	str	r3, [r7, #16]
 800a2fe:	e001      	b.n	800a304 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800a300:	2301      	movs	r3, #1
 800a302:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a304:	4b0b      	ldr	r3, [pc, #44]	; (800a334 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f023 020f 	bic.w	r2, r3, #15
 800a30c:	4909      	ldr	r1, [pc, #36]	; (800a334 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	4313      	orrs	r3, r2
 800a312:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800a314:	4b07      	ldr	r3, [pc, #28]	; (800a334 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 030f 	and.w	r3, r3, #15
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d001      	beq.n	800a326 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	e000      	b.n	800a328 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3718      	adds	r7, #24
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	46020c00 	.word	0x46020c00
 800a334:	40022000 	.word	0x40022000

0800a338 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a340:	2300      	movs	r3, #0
 800a342:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a344:	2300      	movs	r3, #0
 800a346:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f003 0301 	and.w	r3, r3, #1
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00a      	beq.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800a354:	4bae      	ldr	r3, [pc, #696]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a35a:	f023 0203 	bic.w	r2, r3, #3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a362:	49ab      	ldr	r1, [pc, #684]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a364:	4313      	orrs	r3, r2
 800a366:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00a      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a376:	4ba6      	ldr	r3, [pc, #664]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a37c:	f023 020c 	bic.w	r2, r3, #12
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a384:	49a2      	ldr	r1, [pc, #648]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a386:	4313      	orrs	r3, r2
 800a388:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00a      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a398:	4b9d      	ldr	r3, [pc, #628]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a39a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a39e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a6:	499a      	ldr	r1, [pc, #616]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0308 	and.w	r3, r3, #8
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a3ba:	4b95      	ldr	r3, [pc, #596]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c8:	4991      	ldr	r1, [pc, #580]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0310 	and.w	r3, r3, #16
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a3dc:	4b8c      	ldr	r3, [pc, #560]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a3de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ea:	4989      	ldr	r1, [pc, #548]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0320 	and.w	r3, r3, #32
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a3fe:	4b84      	ldr	r3, [pc, #528]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a404:	f023 0207 	bic.w	r2, r3, #7
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a40c:	4980      	ldr	r1, [pc, #512]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a40e:	4313      	orrs	r3, r2
 800a410:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d00a      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a420:	4b7b      	ldr	r3, [pc, #492]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a426:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a42e:	4978      	ldr	r1, [pc, #480]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a430:	4313      	orrs	r3, r2
 800a432:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00a      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a442:	4b73      	ldr	r3, [pc, #460]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a450:	496f      	ldr	r1, [pc, #444]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a452:	4313      	orrs	r3, r2
 800a454:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00a      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800a464:	4b6a      	ldr	r3, [pc, #424]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a46a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a472:	4967      	ldr	r1, [pc, #412]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a474:	4313      	orrs	r3, r2
 800a476:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00a      	beq.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800a486:	4b62      	ldr	r3, [pc, #392]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a48c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a494:	495e      	ldr	r1, [pc, #376]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a496:	4313      	orrs	r3, r2
 800a498:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00a      	beq.n	800a4be <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800a4a8:	4b59      	ldr	r3, [pc, #356]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a4aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a4ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4b6:	4956      	ldr	r1, [pc, #344]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00a      	beq.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800a4ca:	4b51      	ldr	r3, [pc, #324]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a4cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4d8:	494d      	ldr	r1, [pc, #308]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800a4ec:	4b48      	ldr	r3, [pc, #288]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a4ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a4f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4fa:	4945      	ldr	r1, [pc, #276]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d042      	beq.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a514:	2b80      	cmp	r3, #128	; 0x80
 800a516:	d028      	beq.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x232>
 800a518:	2b80      	cmp	r3, #128	; 0x80
 800a51a:	d823      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800a51c:	2b60      	cmp	r3, #96	; 0x60
 800a51e:	d026      	beq.n	800a56e <HAL_RCCEx_PeriphCLKConfig+0x236>
 800a520:	2b60      	cmp	r3, #96	; 0x60
 800a522:	d81f      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800a524:	2b40      	cmp	r3, #64	; 0x40
 800a526:	d006      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a528:	2b40      	cmp	r3, #64	; 0x40
 800a52a:	d81b      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d009      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800a530:	2b20      	cmp	r3, #32
 800a532:	d00f      	beq.n	800a554 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800a534:	e016      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a536:	4b36      	ldr	r3, [pc, #216]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53a:	4a35      	ldr	r2, [pc, #212]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a53c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a540:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a542:	e015      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	4618      	mov	r0, r3
 800a54a:	f002 f85f 	bl	800c60c <RCCEx_PLL2_Config>
 800a54e:	4603      	mov	r3, r0
 800a550:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a552:	e00d      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3328      	adds	r3, #40	; 0x28
 800a558:	4618      	mov	r0, r3
 800a55a:	f002 f8ef 	bl	800c73c <RCCEx_PLL3_Config>
 800a55e:	4603      	mov	r3, r0
 800a560:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a562:	e005      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x238>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	74fb      	strb	r3, [r7, #19]
        break;
 800a568:	e002      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 800a56a:	bf00      	nop
 800a56c:	e000      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 800a56e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a570:	7cfb      	ldrb	r3, [r7, #19]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10c      	bne.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800a576:	4b26      	ldr	r3, [pc, #152]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a578:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a57c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a586:	4922      	ldr	r1, [pc, #136]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a588:	4313      	orrs	r3, r2
 800a58a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a58e:	e001      	b.n	800a594 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a590:	7cfb      	ldrb	r3, [r7, #19]
 800a592:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d04c      	beq.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5aa:	d02e      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a5ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5b0:	d828      	bhi.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a5b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5b6:	d02d      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a5b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5bc:	d822      	bhi.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a5be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c2:	d008      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 800a5c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c8:	d81c      	bhi.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800a5ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5d2:	d00f      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a5d4:	e016      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a5d6:	4b0e      	ldr	r3, [pc, #56]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5da:	4a0d      	ldr	r2, [pc, #52]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a5dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5e0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a5e2:	e018      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f002 f80f 	bl	800c60c <RCCEx_PLL2_Config>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a5f2:	e010      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	3328      	adds	r3, #40	; 0x28
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f002 f89f 	bl	800c73c <RCCEx_PLL3_Config>
 800a5fe:	4603      	mov	r3, r0
 800a600:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a602:	e008      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	74fb      	strb	r3, [r7, #19]
        break;
 800a608:	e005      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        break;
 800a60a:	bf00      	nop
 800a60c:	e003      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a60e:	bf00      	nop
 800a610:	46020c00 	.word	0x46020c00
        break;
 800a614:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a616:	7cfb      	ldrb	r3, [r7, #19]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10c      	bne.n	800a636 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800a61c:	4bb7      	ldr	r3, [pc, #732]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a61e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a622:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a62c:	49b3      	ldr	r1, [pc, #716]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a634:	e001      	b.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x302>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a636:	7cfb      	ldrb	r3, [r7, #19]
 800a638:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d03e      	beq.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a64c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a650:	d025      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a652:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a656:	d81f      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a65c:	d01f      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a65e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a662:	d819      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a664:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a668:	d019      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a66a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a66e:	d813      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a674:	d008      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800a676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a67a:	d80d      	bhi.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00e      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a684:	d00b      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0x366>
 800a686:	e007      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	3304      	adds	r3, #4
 800a68c:	4618      	mov	r0, r3
 800a68e:	f001 ffbd 	bl	800c60c <RCCEx_PLL2_Config>
 800a692:	4603      	mov	r3, r0
 800a694:	74fb      	strb	r3, [r7, #19]
        break;
 800a696:	e003      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	74fb      	strb	r3, [r7, #19]
        break;
 800a69c:	e000      	b.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        break;
 800a69e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6a0:	7cfb      	ldrb	r3, [r7, #19]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10c      	bne.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x388>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800a6a6:	4b95      	ldr	r3, [pc, #596]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a6a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a6ac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a6b6:	4991      	ldr	r1, [pc, #580]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800a6be:	e001      	b.n	800a6c4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6c0:	7cfb      	ldrb	r3, [r7, #19]
 800a6c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d036      	beq.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d81b      	bhi.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 800a6da:	a201      	add	r2, pc, #4	; (adr r2, 800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a719 	.word	0x0800a719
 800a6e4:	0800a6f5 	.word	0x0800a6f5
 800a6e8:	0800a703 	.word	0x0800a703
 800a6ec:	0800a719 	.word	0x0800a719
 800a6f0:	0800a719 	.word	0x0800a719
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a6f4:	4b81      	ldr	r3, [pc, #516]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f8:	4a80      	ldr	r2, [pc, #512]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a6fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6fe:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a700:	e00b      	b.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	3328      	adds	r3, #40	; 0x28
 800a706:	4618      	mov	r0, r3
 800a708:	f002 f818 	bl	800c73c <RCCEx_PLL3_Config>
 800a70c:	4603      	mov	r3, r0
 800a70e:	74fb      	strb	r3, [r7, #19]
        break;
 800a710:	e003      	b.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	74fb      	strb	r3, [r7, #19]
        break;
 800a716:	e000      	b.n	800a71a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        break;
 800a718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a71a:	7cfb      	ldrb	r3, [r7, #19]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10c      	bne.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x402>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800a720:	4b76      	ldr	r3, [pc, #472]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a722:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a726:	f023 0207 	bic.w	r2, r3, #7
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a730:	4972      	ldr	r1, [pc, #456]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a732:	4313      	orrs	r3, r2
 800a734:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a738:	e001      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0x406>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a73a:	7cfb      	ldrb	r3, [r7, #19]
 800a73c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a746:	2b00      	cmp	r3, #0
 800a748:	d042      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));

    switch (pPeriphClkInit->Adf1ClockSelection)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a750:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a754:	d025      	beq.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800a756:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a75a:	d81f      	bhi.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a75c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a760:	d021      	beq.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 800a762:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a766:	d819      	bhi.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a76c:	d00e      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x454>
 800a76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a772:	d813      	bhi.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800a774:	2b00      	cmp	r3, #0
 800a776:	d018      	beq.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0x472>
 800a778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77c:	d10e      	bne.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x464>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a77e:	4b5f      	ldr	r3, [pc, #380]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a782:	4a5e      	ldr	r2, [pc, #376]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a788:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a78a:	e00f      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3328      	adds	r3, #40	; 0x28
 800a790:	4618      	mov	r0, r3
 800a792:	f001 ffd3 	bl	800c73c <RCCEx_PLL3_Config>
 800a796:	4603      	mov	r3, r0
 800a798:	74fb      	strb	r3, [r7, #19]
        break;
 800a79a:	e007      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a79c:	2301      	movs	r3, #1
 800a79e:	74fb      	strb	r3, [r7, #19]
        break;
 800a7a0:	e004      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 800a7a2:	bf00      	nop
 800a7a4:	e002      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 800a7a6:	bf00      	nop
 800a7a8:	e000      	b.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 800a7aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7ac:	7cfb      	ldrb	r3, [r7, #19]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10c      	bne.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800a7b2:	4b52      	ldr	r3, [pc, #328]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a7b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a7b8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7c2:	494e      	ldr	r1, [pc, #312]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800a7ca:	e001      	b.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7cc:	7cfb      	ldrb	r3, [r7, #19]
 800a7ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 80a0 	beq.w	800a91e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	747b      	strb	r3, [r7, #17]
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7e2:	4b46      	ldr	r3, [pc, #280]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a7e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d110      	bne.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x4da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7f0:	4b42      	ldr	r3, [pc, #264]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a7f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a7f6:	4a41      	ldr	r2, [pc, #260]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a7f8:	f043 0304 	orr.w	r3, r3, #4
 800a7fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a800:	4b3e      	ldr	r3, [pc, #248]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a806:	f003 0304 	and.w	r3, r3, #4
 800a80a:	60bb      	str	r3, [r7, #8]
 800a80c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a80e:	2301      	movs	r3, #1
 800a810:	747b      	strb	r3, [r7, #17]
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a812:	4b3b      	ldr	r3, [pc, #236]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a816:	4a3a      	ldr	r2, [pc, #232]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a818:	f043 0301 	orr.w	r3, r3, #1
 800a81c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a81e:	f7fc f899 	bl	8006954 <HAL_GetTick>
 800a822:	60f8      	str	r0, [r7, #12]

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a824:	e009      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a826:	f7fc f895 	bl	8006954 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	2b02      	cmp	r3, #2
 800a832:	d902      	bls.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        ret = HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	74fb      	strb	r3, [r7, #19]
        break;
 800a838:	e005      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a83a:	4b31      	ldr	r3, [pc, #196]	; (800a900 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800a83c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a83e:	f003 0301 	and.w	r3, r3, #1
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0ef      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      }
    }

    if (ret == HAL_OK)
 800a846:	7cfb      	ldrb	r3, [r7, #19]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d15b      	bne.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a84c:	4b2b      	ldr	r3, [pc, #172]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a84e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a856:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d01f      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x566>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	429a      	cmp	r2, r3
 800a868:	d019      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x566>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a86a:	4b24      	ldr	r3, [pc, #144]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a86c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a874:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a876:	4b21      	ldr	r3, [pc, #132]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a87c:	4a1f      	ldr	r2, [pc, #124]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a87e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a882:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a886:	4b1d      	ldr	r3, [pc, #116]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a88c:	4a1b      	ldr	r2, [pc, #108]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a88e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a892:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a896:	4a19      	ldr	r2, [pc, #100]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d016      	beq.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8a8:	f7fc f854 	bl	8006954 <HAL_GetTick>
 800a8ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8ae:	e00b      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8b0:	f7fc f850 	bl	8006954 <HAL_GetTick>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d902      	bls.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x590>
          {
            ret = HAL_TIMEOUT;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	74fb      	strb	r3, [r7, #19]
            break;
 800a8c6:	e006      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a8c8:	4b0c      	ldr	r3, [pc, #48]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a8ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8ce:	f003 0302 	and.w	r3, r3, #2
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0ec      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x578>
          }
        }
      }

      if (ret == HAL_OK)
 800a8d6:	7cfb      	ldrb	r3, [r7, #19]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10c      	bne.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a8dc:	4b07      	ldr	r3, [pc, #28]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a8de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a8e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a8ec:	4903      	ldr	r1, [pc, #12]	; (800a8fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
 800a8f4:	e008      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a8f6:	7cfb      	ldrb	r3, [r7, #19]
 800a8f8:	74bb      	strb	r3, [r7, #18]
 800a8fa:	e005      	b.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a8fc:	46020c00 	.word	0x46020c00
 800a900:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a904:	7cfb      	ldrb	r3, [r7, #19]
 800a906:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a908:	7c7b      	ldrb	r3, [r7, #17]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d107      	bne.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a90e:	4bab      	ldr	r3, [pc, #684]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a914:	4aa9      	ldr	r2, [pc, #676]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a916:	f023 0304 	bic.w	r3, r3, #4
 800a91a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a926:	2b00      	cmp	r3, #0
 800a928:	d03a      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x668>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(pPeriphClkInit->Clk48ClockSelection));

    switch (pPeriphClkInit->Clk48ClockSelection)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a930:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a934:	d01f      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x63e>
 800a936:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a93a:	d819      	bhi.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800a93c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a940:	d00f      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800a942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a946:	d813      	bhi.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d016      	beq.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800a94c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a950:	d10e      	bne.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      case RCC_CLK48CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	3304      	adds	r3, #4
 800a956:	4618      	mov	r0, r3
 800a958:	f001 fe58 	bl	800c60c <RCCEx_PLL2_Config>
 800a95c:	4603      	mov	r3, r0
 800a95e:	74fb      	strb	r3, [r7, #19]
        break;
 800a960:	e00c      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_PLL1:
        /* Enable CLK48 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a962:	4b96      	ldr	r3, [pc, #600]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a966:	4a95      	ldr	r2, [pc, #596]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a96c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a96e:	e005      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_HSI48:
        break;
      case RCC_CLK48CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	74fb      	strb	r3, [r7, #19]
        break;
 800a974:	e002      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 800a976:	bf00      	nop
 800a978:	e000      	b.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 800a97a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a97c:	7cfb      	ldrb	r3, [r7, #19]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d10c      	bne.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->Clk48ClockSelection);
 800a982:	4b8e      	ldr	r3, [pc, #568]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a988:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a992:	498a      	ldr	r1, [pc, #552]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a994:	4313      	orrs	r3, r2
 800a996:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800a99a:	e001      	b.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x668>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a99c:	7cfb      	ldrb	r3, [r7, #19]
 800a99e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d027      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9b6:	d00a      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x696>
 800a9b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9bc:	d804      	bhi.n	800a9c8 <HAL_RCCEx_PeriphCLKConfig+0x690>
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d007      	beq.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 800a9c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9c6:	d006      	beq.n	800a9d6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	74fb      	strb	r3, [r7, #19]
        break;
 800a9cc:	e004      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 800a9ce:	bf00      	nop
 800a9d0:	e002      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 800a9d2:	bf00      	nop
 800a9d4:	e000      	b.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 800a9d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9d8:	7cfb      	ldrb	r3, [r7, #19]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10c      	bne.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a9de:	4b77      	ldr	r3, [pc, #476]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a9e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a9e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9ee:	4973      	ldr	r1, [pc, #460]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800a9f6:	e001      	b.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9f8:	7cfb      	ldrb	r3, [r7, #19]
 800a9fa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00b      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800aa08:	4b6c      	ldr	r3, [pc, #432]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aa0e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa18:	4968      	ldr	r1, [pc, #416]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d017      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa36:	d105      	bne.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aa38:	4b60      	ldr	r3, [pc, #384]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3c:	4a5f      	ldr	r2, [pc, #380]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa42:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800aa44:	4b5d      	ldr	r3, [pc, #372]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aa4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa54:	4959      	ldr	r1, [pc, #356]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa56:	4313      	orrs	r3, r2
 800aa58:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00b      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800aa68:	4b54      	ldr	r3, [pc, #336]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa78:	4950      	ldr	r1, [pc, #320]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800aa8c:	4b4b      	ldr	r3, [pc, #300]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aa92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800aa9c:	4947      	ldr	r1, [pc, #284]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800aab0:	4b42      	ldr	r3, [pc, #264]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aab2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aab6:	f023 0218 	bic.w	r2, r3, #24
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800aac0:	493e      	ldr	r1, [pc, #248]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d023      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aade:	d105      	bne.n	800aaec <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aae0:	4b36      	ldr	r3, [pc, #216]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae4:	4a35      	ldr	r2, [pc, #212]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaea:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aaf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aaf6:	d105      	bne.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      /* Enable PLL2 Q CLK output */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800aaf8:	4b30      	ldr	r3, [pc, #192]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	4a2f      	ldr	r2, [pc, #188]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800aafe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab02:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800ab04:	4b2d      	ldr	r3, [pc, #180]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800ab06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ab0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab14:	4929      	ldr	r1, [pc, #164]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d032      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab32:	d00e      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800ab34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab38:	d813      	bhi.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d014      	beq.n	800ab68 <HAL_RCCEx_PeriphCLKConfig+0x830>
 800ab3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab42:	d10e      	bne.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab44:	4b1d      	ldr	r3, [pc, #116]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800ab46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab48:	4a1c      	ldr	r2, [pc, #112]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800ab4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab4e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800ab50:	e00b      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	3304      	adds	r3, #4
 800ab56:	4618      	mov	r0, r3
 800ab58:	f001 fd58 	bl	800c60c <RCCEx_PLL2_Config>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	74fb      	strb	r3, [r7, #19]
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800ab60:	e003      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x832>
      default:
        ret = HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	74fb      	strb	r3, [r7, #19]
        break;
 800ab66:	e000      	b.n	800ab6a <HAL_RCCEx_PeriphCLKConfig+0x832>
        break;
 800ab68:	bf00      	nop
    }
    if (ret == HAL_OK)
 800ab6a:	7cfb      	ldrb	r3, [r7, #19]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10c      	bne.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800ab70:	4b12      	ldr	r3, [pc, #72]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800ab72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab80:	490e      	ldr	r1, [pc, #56]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800ab88:	e001      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab8a:	7cfb      	ldrb	r3, [r7, #19]
 800ab8c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d00b      	beq.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800ab9a:	4b08      	ldr	r3, [pc, #32]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800ab9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aba0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abaa:	4904      	ldr	r1, [pc, #16]	; (800abbc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800abac:	4313      	orrs	r3, r2
 800abae:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  return status;
 800abb2:	7cbb      	ldrb	r3, [r7, #18]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	46020c00 	.word	0x46020c00

0800abc0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b089      	sub	sp, #36	; 0x24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800abc8:	4bac      	ldr	r3, [pc, #688]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800abca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800abd2:	4baa      	ldr	r3, [pc, #680]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800abd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd6:	f003 0303 	and.w	r3, r3, #3
 800abda:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800abdc:	4ba7      	ldr	r3, [pc, #668]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800abde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe0:	0a1b      	lsrs	r3, r3, #8
 800abe2:	f003 030f 	and.w	r3, r3, #15
 800abe6:	3301      	adds	r3, #1
 800abe8:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800abea:	4ba4      	ldr	r3, [pc, #656]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abee:	f003 0310 	and.w	r3, r3, #16
 800abf2:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800abf4:	4ba1      	ldr	r3, [pc, #644]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800abf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf8:	08db      	lsrs	r3, r3, #3
 800abfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abfe:	68fa      	ldr	r2, [r7, #12]
 800ac00:	fb02 f303 	mul.w	r3, r2, r3
 800ac04:	ee07 3a90 	vmov	s15, r3
 800ac08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 8123 	beq.w	800ae5e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	2b03      	cmp	r3, #3
 800ac1c:	d062      	beq.n	800ace4 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	2b03      	cmp	r3, #3
 800ac22:	f200 8081 	bhi.w	800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d024      	beq.n	800ac76 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d17a      	bne.n	800ad28 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	ee07 3a90 	vmov	s15, r3
 800ac38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac3c:	eddf 6a90 	vldr	s13, [pc, #576]	; 800ae80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800ac40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac44:	4b8d      	ldr	r3, [pc, #564]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ac46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4c:	ee07 3a90 	vmov	s15, r3
 800ac50:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac54:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac58:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800ac5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac60:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac68:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac74:	e08f      	b.n	800ad96 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ac76:	4b81      	ldr	r3, [pc, #516]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d005      	beq.n	800ac8e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800ac82:	4b7e      	ldr	r3, [pc, #504]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	0f1b      	lsrs	r3, r3, #28
 800ac88:	f003 030f 	and.w	r3, r3, #15
 800ac8c:	e006      	b.n	800ac9c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800ac8e:	4b7b      	ldr	r3, [pc, #492]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ac90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac94:	041b      	lsls	r3, r3, #16
 800ac96:	0f1b      	lsrs	r3, r3, #28
 800ac98:	f003 030f 	and.w	r3, r3, #15
 800ac9c:	4a7a      	ldr	r2, [pc, #488]	; (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800ac9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aca2:	ee07 3a90 	vmov	s15, r3
 800aca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	ee07 3a90 	vmov	s15, r3
 800acb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc2:	ed97 6a02 	vldr	s12, [r7, #8]
 800acc6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800acca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800acda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ace2:	e058      	b.n	800ad96 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	ee07 3a90 	vmov	s15, r3
 800acea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acee:	eddf 6a64 	vldr	s13, [pc, #400]	; 800ae80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 800acf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf6:	4b61      	ldr	r3, [pc, #388]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800acf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800ad0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad12:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ad1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad26:	e036      	b.n	800ad96 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ad28:	4b54      	ldr	r3, [pc, #336]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d005      	beq.n	800ad40 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800ad34:	4b51      	ldr	r3, [pc, #324]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	0f1b      	lsrs	r3, r3, #28
 800ad3a:	f003 030f 	and.w	r3, r3, #15
 800ad3e:	e006      	b.n	800ad4e <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 800ad40:	4b4e      	ldr	r3, [pc, #312]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ad42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad46:	041b      	lsls	r3, r3, #16
 800ad48:	0f1b      	lsrs	r3, r3, #28
 800ad4a:	f003 030f 	and.w	r3, r3, #15
 800ad4e:	4a4e      	ldr	r2, [pc, #312]	; (800ae88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800ad50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad54:	ee07 3a90 	vmov	s15, r3
 800ad58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	ee07 3a90 	vmov	s15, r3
 800ad62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad74:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad78:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ae84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800ad7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad88:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ad8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad94:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800ad96:	4b39      	ldr	r3, [pc, #228]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ad98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d017      	beq.n	800add2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ada2:	4b36      	ldr	r3, [pc, #216]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ada4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada6:	0a5b      	lsrs	r3, r3, #9
 800ada8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adac:	ee07 3a90 	vmov	s15, r3
 800adb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800adb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adb8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800adbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800adc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc8:	ee17 2a90 	vmov	r2, s15
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	e002      	b.n	800add8 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800add8:	4b28      	ldr	r3, [pc, #160]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800adda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800addc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d017      	beq.n	800ae14 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ade4:	4b25      	ldr	r3, [pc, #148]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ade6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade8:	0c1b      	lsrs	r3, r3, #16
 800adea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adee:	ee07 3a90 	vmov	s15, r3
 800adf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800adf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adfa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800adfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae0a:	ee17 2a90 	vmov	r2, s15
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	605a      	str	r2, [r3, #4]
 800ae12:	e002      	b.n	800ae1a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800ae1a:	4b18      	ldr	r3, [pc, #96]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ae1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d017      	beq.n	800ae56 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ae26:	4b15      	ldr	r3, [pc, #84]	; (800ae7c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800ae28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae2a:	0e1b      	lsrs	r3, r3, #24
 800ae2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae30:	ee07 3a90 	vmov	s15, r3
 800ae34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800ae38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae3c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ae40:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae4c:	ee17 2a90 	vmov	r2, s15
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	609a      	str	r2, [r3, #8]
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }
}
 800ae54:	e00c      	b.n	800ae70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	609a      	str	r2, [r3, #8]
}
 800ae5c:	e008      	b.n	800ae70 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	609a      	str	r2, [r3, #8]
}
 800ae70:	bf00      	nop
 800ae72:	3724      	adds	r7, #36	; 0x24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7a:	4770      	bx	lr
 800ae7c:	46020c00 	.word	0x46020c00
 800ae80:	4b742400 	.word	0x4b742400
 800ae84:	46000000 	.word	0x46000000
 800ae88:	0801b650 	.word	0x0801b650

0800ae8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b089      	sub	sp, #36	; 0x24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800ae94:	4bac      	ldr	r3, [pc, #688]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800ae96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800ae9e:	4baa      	ldr	r3, [pc, #680]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea2:	f003 0303 	and.w	r3, r3, #3
 800aea6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800aea8:	4ba7      	ldr	r3, [pc, #668]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aeaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeac:	0a1b      	lsrs	r3, r3, #8
 800aeae:	f003 030f 	and.w	r3, r3, #15
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800aeb6:	4ba4      	ldr	r3, [pc, #656]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aeb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeba:	f003 0310 	and.w	r3, r3, #16
 800aebe:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800aec0:	4ba1      	ldr	r3, [pc, #644]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec4:	08db      	lsrs	r3, r3, #3
 800aec6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	fb02 f303 	mul.w	r3, r2, r3
 800aed0:	ee07 3a90 	vmov	s15, r3
 800aed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f000 8123 	beq.w	800b12a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d062      	beq.n	800afb0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	f200 8081 	bhi.w	800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	2b01      	cmp	r3, #1
 800aef6:	d024      	beq.n	800af42 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d17a      	bne.n	800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	ee07 3a90 	vmov	s15, r3
 800af04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af08:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b14c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800af0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af10:	4b8d      	ldr	r3, [pc, #564]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800af12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800af20:	ed97 6a02 	vldr	s12, [r7, #8]
 800af24:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800b150 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800af28:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800af2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800af30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af34:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800af38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af40:	e08f      	b.n	800b062 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800af42:	4b81      	ldr	r3, [pc, #516]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d005      	beq.n	800af5a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800af4e:	4b7e      	ldr	r3, [pc, #504]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	0f1b      	lsrs	r3, r3, #28
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	e006      	b.n	800af68 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800af5a:	4b7b      	ldr	r3, [pc, #492]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800af5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800af60:	041b      	lsls	r3, r3, #16
 800af62:	0f1b      	lsrs	r3, r3, #28
 800af64:	f003 030f 	and.w	r3, r3, #15
 800af68:	4a7a      	ldr	r2, [pc, #488]	; (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800af6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af6e:	ee07 3a90 	vmov	s15, r3
 800af72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800af92:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800b150 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800af96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800afa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afae:	e058      	b.n	800b062 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	ee07 3a90 	vmov	s15, r3
 800afb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afba:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b14c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800afbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afc2:	4b61      	ldr	r3, [pc, #388]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800afc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800afd2:	ed97 6a02 	vldr	s12, [r7, #8]
 800afd6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800b150 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800afda:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800afde:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800afe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800afea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aff2:	e036      	b.n	800b062 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800aff4:	4b54      	ldr	r3, [pc, #336]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d005      	beq.n	800b00c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 800b000:	4b51      	ldr	r3, [pc, #324]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	0f1b      	lsrs	r3, r3, #28
 800b006:	f003 030f 	and.w	r3, r3, #15
 800b00a:	e006      	b.n	800b01a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800b00c:	4b4e      	ldr	r3, [pc, #312]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b00e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b012:	041b      	lsls	r3, r3, #16
 800b014:	0f1b      	lsrs	r3, r3, #28
 800b016:	f003 030f 	and.w	r3, r3, #15
 800b01a:	4a4e      	ldr	r2, [pc, #312]	; (800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800b01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b020:	ee07 3a90 	vmov	s15, r3
 800b024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	ee07 3a90 	vmov	s15, r3
 800b02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	ee07 3a90 	vmov	s15, r3
 800b03c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b040:	ed97 6a02 	vldr	s12, [r7, #8]
 800b044:	eddf 5a42 	vldr	s11, [pc, #264]	; 800b150 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800b048:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b050:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b054:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800b058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b060:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800b062:	4b39      	ldr	r3, [pc, #228]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d017      	beq.n	800b09e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b06e:	4b36      	ldr	r3, [pc, #216]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b072:	0a5b      	lsrs	r3, r3, #9
 800b074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b078:	ee07 3a90 	vmov	s15, r3
 800b07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800b080:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b084:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b088:	edd7 6a07 	vldr	s13, [r7, #28]
 800b08c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b094:	ee17 2a90 	vmov	r2, s15
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	601a      	str	r2, [r3, #0]
 800b09c:	e002      	b.n	800b0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800b0a4:	4b28      	ldr	r3, [pc, #160]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d017      	beq.n	800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b0b0:	4b25      	ldr	r3, [pc, #148]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b0b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b4:	0c1b      	lsrs	r3, r3, #16
 800b0b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ba:	ee07 3a90 	vmov	s15, r3
 800b0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800b0c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0c6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b0ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0d6:	ee17 2a90 	vmov	r2, s15
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	605a      	str	r2, [r3, #4]
 800b0de:	e002      	b.n	800b0e6 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800b0e6:	4b18      	ldr	r3, [pc, #96]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d017      	beq.n	800b122 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b0f2:	4b15      	ldr	r3, [pc, #84]	; (800b148 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800b0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0f6:	0e1b      	lsrs	r3, r3, #24
 800b0f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0fc:	ee07 3a90 	vmov	s15, r3
 800b100:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800b104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b108:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b10c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b114:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b118:	ee17 2a90 	vmov	r2, s15
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b120:	e00c      	b.n	800b13c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	609a      	str	r2, [r3, #8]
}
 800b128:	e008      	b.n	800b13c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	609a      	str	r2, [r3, #8]
}
 800b13c:	bf00      	nop
 800b13e:	3724      	adds	r7, #36	; 0x24
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	46020c00 	.word	0x46020c00
 800b14c:	4b742400 	.word	0x4b742400
 800b150:	46000000 	.word	0x46000000
 800b154:	0801b650 	.word	0x0801b650

0800b158 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b158:	b480      	push	{r7}
 800b15a:	b089      	sub	sp, #36	; 0x24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800b160:	4bac      	ldr	r3, [pc, #688]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b168:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800b16a:	4baa      	ldr	r3, [pc, #680]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16e:	f003 0303 	and.w	r3, r3, #3
 800b172:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800b174:	4ba7      	ldr	r3, [pc, #668]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b178:	0a1b      	lsrs	r3, r3, #8
 800b17a:	f003 030f 	and.w	r3, r3, #15
 800b17e:	3301      	adds	r3, #1
 800b180:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800b182:	4ba4      	ldr	r3, [pc, #656]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b186:	f003 0310 	and.w	r3, r3, #16
 800b18a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800b18c:	4ba1      	ldr	r3, [pc, #644]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b18e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b190:	08db      	lsrs	r3, r3, #3
 800b192:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	fb02 f303 	mul.w	r3, r2, r3
 800b19c:	ee07 3a90 	vmov	s15, r3
 800b1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	f000 8123 	beq.w	800b3f6 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d062      	beq.n	800b27c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	f200 8081 	bhi.w	800b2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d024      	beq.n	800b20e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d17a      	bne.n	800b2c0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d4:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b418 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800b1d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1dc:	4b8d      	ldr	r3, [pc, #564]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e4:	ee07 3a90 	vmov	s15, r3
 800b1e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1ec:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1f0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b1f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b1f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b200:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b204:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b208:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800b20c:	e08f      	b.n	800b32e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b20e:	4b81      	ldr	r3, [pc, #516]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b216:	2b00      	cmp	r3, #0
 800b218:	d005      	beq.n	800b226 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800b21a:	4b7e      	ldr	r3, [pc, #504]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	0f1b      	lsrs	r3, r3, #28
 800b220:	f003 030f 	and.w	r3, r3, #15
 800b224:	e006      	b.n	800b234 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800b226:	4b7b      	ldr	r3, [pc, #492]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b22c:	041b      	lsls	r3, r3, #16
 800b22e:	0f1b      	lsrs	r3, r3, #28
 800b230:	f003 030f 	and.w	r3, r3, #15
 800b234:	4a7a      	ldr	r2, [pc, #488]	; (800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800b236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b23a:	ee07 3a90 	vmov	s15, r3
 800b23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	ee07 3a90 	vmov	s15, r3
 800b248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	ee07 3a90 	vmov	s15, r3
 800b256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b25a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b25e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b26a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b26e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b272:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b27a:	e058      	b.n	800b32e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	ee07 3a90 	vmov	s15, r3
 800b282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b286:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b418 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800b28a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b28e:	4b61      	ldr	r3, [pc, #388]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b296:	ee07 3a90 	vmov	s15, r3
 800b29a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b29e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2a2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b2a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b2aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b2b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2be:	e036      	b.n	800b32e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b2c0:	4b54      	ldr	r3, [pc, #336]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d005      	beq.n	800b2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800b2cc:	4b51      	ldr	r3, [pc, #324]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	0f1b      	lsrs	r3, r3, #28
 800b2d2:	f003 030f 	and.w	r3, r3, #15
 800b2d6:	e006      	b.n	800b2e6 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800b2d8:	4b4e      	ldr	r3, [pc, #312]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b2da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b2de:	041b      	lsls	r3, r3, #16
 800b2e0:	0f1b      	lsrs	r3, r3, #28
 800b2e2:	f003 030f 	and.w	r3, r3, #15
 800b2e6:	4a4e      	ldr	r2, [pc, #312]	; (800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800b2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ec:	ee07 3a90 	vmov	s15, r3
 800b2f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	ee07 3a90 	vmov	s15, r3
 800b308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b30c:	ed97 6a02 	vldr	s12, [r7, #8]
 800b310:	eddf 5a42 	vldr	s11, [pc, #264]	; 800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b314:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b31c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b320:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b324:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b328:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b32c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800b32e:	4b39      	ldr	r3, [pc, #228]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d017      	beq.n	800b36a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b33a:	4b36      	ldr	r3, [pc, #216]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b33e:	0a5b      	lsrs	r3, r3, #9
 800b340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b344:	ee07 3a90 	vmov	s15, r3
 800b348:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800b34c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b350:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b354:	edd7 6a07 	vldr	s13, [r7, #28]
 800b358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b360:	ee17 2a90 	vmov	r2, s15
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	601a      	str	r2, [r3, #0]
 800b368:	e002      	b.n	800b370 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800b370:	4b28      	ldr	r3, [pc, #160]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d017      	beq.n	800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b37c:	4b25      	ldr	r3, [pc, #148]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b37e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b380:	0c1b      	lsrs	r3, r3, #16
 800b382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800b38e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b392:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b396:	edd7 6a07 	vldr	s13, [r7, #28]
 800b39a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b39e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a2:	ee17 2a90 	vmov	r2, s15
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	605a      	str	r2, [r3, #4]
 800b3aa:	e002      	b.n	800b3b2 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800b3b2:	4b18      	ldr	r3, [pc, #96]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d017      	beq.n	800b3ee <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b3be:	4b15      	ldr	r3, [pc, #84]	; (800b414 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800b3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3c2:	0e1b      	lsrs	r3, r3, #24
 800b3c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3c8:	ee07 3a90 	vmov	s15, r3
 800b3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800b3d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3d4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b3d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3e4:	ee17 2a90 	vmov	r2, s15
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800b3ec:	e00c      	b.n	800b408 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	609a      	str	r2, [r3, #8]
}
 800b3f4:	e008      	b.n	800b408 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	609a      	str	r2, [r3, #8]
}
 800b408:	bf00      	nop
 800b40a:	3724      	adds	r7, #36	; 0x24
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	46020c00 	.word	0x46020c00
 800b418:	4b742400 	.word	0x4b742400
 800b41c:	46000000 	.word	0x46000000
 800b420:	0801b650 	.word	0x0801b650

0800b424 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08e      	sub	sp, #56	; 0x38
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b432:	d145      	bne.n	800b4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b434:	4bcc      	ldr	r3, [pc, #816]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800b436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b43a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b43e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800b440:	4bc9      	ldr	r3, [pc, #804]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800b442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b446:	f003 0302 	and.w	r3, r3, #2
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d108      	bne.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800b44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b454:	d104      	bne.n	800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
    {
      frequency = LSE_VALUE;
 800b456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b45a:	637b      	str	r3, [r7, #52]	; 0x34
 800b45c:	f001 b8cd 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800b460:	4bc1      	ldr	r3, [pc, #772]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800b462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b46a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b46e:	d114      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 800b470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b476:	d110      	bne.n	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b478:	4bbb      	ldr	r3, [pc, #748]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800b47a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b47e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b486:	d103      	bne.n	800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      {
        frequency = LSI_VALUE / 128U;
 800b488:	23fa      	movs	r3, #250	; 0xfa
 800b48a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b48c:	f001 b8b5 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
      else
      {
        frequency = LSI_VALUE;
 800b490:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b494:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b496:	f001 b8b0 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800b49a:	4bb3      	ldr	r3, [pc, #716]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4a6:	d107      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4ae:	d103      	bne.n	800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
    {
      frequency = HSE_VALUE / 32U;
 800b4b0:	4bae      	ldr	r3, [pc, #696]	; (800b76c <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 800b4b2:	637b      	str	r3, [r7, #52]	; 0x34
 800b4b4:	f001 b8a1 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	637b      	str	r3, [r7, #52]	; 0x34
 800b4bc:	f001 b89d 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4c6:	f001 806d 	beq.w	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4d0:	f201 8090 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4da:	f000 86d3 	beq.w	800c284 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4e4:	f201 8086 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4ee:	f001 8004 	beq.w	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4f8:	f201 807c 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b502:	f000 878b 	beq.w	800c41c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b50c:	f201 8072 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b516:	f000 8732 	beq.w	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b520:	f201 8068 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b52a:	f000 86d9 	beq.w	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b534:	f201 805e 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b53e:	f000 8592 	beq.w	800c066 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b548:	f201 8054 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b552:	f000 81f6 	beq.w	800b942 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b55c:	f201 804a 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b566:	f000 8194 	beq.w	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b570:	f201 8040 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b57a:	f000 847f 	beq.w	800be7c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b584:	f201 8036 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b58e:	f000 842a 	beq.w	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b598:	f201 802c 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5a2:	f000 83bd 	beq.w	800bd20 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5ac:	f201 8022 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5b6:	f000 80f1 	beq.w	800b79c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5c0:	f201 8018 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ca:	f000 8095 	beq.w	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5d4:	f201 800e 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5de:	f000 8131 	beq.w	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5e8:	f201 8004 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5f2:	f000 855e 	beq.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5fc:	f200 87fa 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b606:	f000 85f8 	beq.w	800c1fa <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b610:	f200 87f0 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b61a:	f000 859c 	beq.w	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b624:	f200 87e6 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b62e:	f000 84d0 	beq.w	800bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b638:	f200 87dc 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b80      	cmp	r3, #128	; 0x80
 800b640:	f000 849b 	beq.w	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2b80      	cmp	r3, #128	; 0x80
 800b648:	f200 87d4 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b20      	cmp	r3, #32
 800b650:	d84c      	bhi.n	800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 87cd 	beq.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	2b1f      	cmp	r3, #31
 800b660:	f200 87c8 	bhi.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800b664:	a201      	add	r2, pc, #4	; (adr r2, 800b66c <HAL_RCCEx_GetPeriphCLKFreq+0x248>)
 800b666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66a:	bf00      	nop
 800b66c:	0800ba3d 	.word	0x0800ba3d
 800b670:	0800baab 	.word	0x0800baab
 800b674:	0800c5f5 	.word	0x0800c5f5
 800b678:	0800bb19 	.word	0x0800bb19
 800b67c:	0800c5f5 	.word	0x0800c5f5
 800b680:	0800c5f5 	.word	0x0800c5f5
 800b684:	0800c5f5 	.word	0x0800c5f5
 800b688:	0800bb87 	.word	0x0800bb87
 800b68c:	0800c5f5 	.word	0x0800c5f5
 800b690:	0800c5f5 	.word	0x0800c5f5
 800b694:	0800c5f5 	.word	0x0800c5f5
 800b698:	0800c5f5 	.word	0x0800c5f5
 800b69c:	0800c5f5 	.word	0x0800c5f5
 800b6a0:	0800c5f5 	.word	0x0800c5f5
 800b6a4:	0800c5f5 	.word	0x0800c5f5
 800b6a8:	0800bbf5 	.word	0x0800bbf5
 800b6ac:	0800c5f5 	.word	0x0800c5f5
 800b6b0:	0800c5f5 	.word	0x0800c5f5
 800b6b4:	0800c5f5 	.word	0x0800c5f5
 800b6b8:	0800c5f5 	.word	0x0800c5f5
 800b6bc:	0800c5f5 	.word	0x0800c5f5
 800b6c0:	0800c5f5 	.word	0x0800c5f5
 800b6c4:	0800c5f5 	.word	0x0800c5f5
 800b6c8:	0800c5f5 	.word	0x0800c5f5
 800b6cc:	0800c5f5 	.word	0x0800c5f5
 800b6d0:	0800c5f5 	.word	0x0800c5f5
 800b6d4:	0800c5f5 	.word	0x0800c5f5
 800b6d8:	0800c5f5 	.word	0x0800c5f5
 800b6dc:	0800c5f5 	.word	0x0800c5f5
 800b6e0:	0800c5f5 	.word	0x0800c5f5
 800b6e4:	0800c5f5 	.word	0x0800c5f5
 800b6e8:	0800bc69 	.word	0x0800bc69
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b40      	cmp	r3, #64	; 0x40
 800b6f0:	f000 841d 	beq.w	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800b6f4:	f000 bf7e 	b.w	800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
    {
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b6f8:	4b1b      	ldr	r3, [pc, #108]	; (800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800b6fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b6fe:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b702:	633b      	str	r3, [r7, #48]	; 0x30
 800b704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b706:	2b80      	cmp	r3, #128	; 0x80
 800b708:	d036      	beq.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	2b80      	cmp	r3, #128	; 0x80
 800b70e:	d840      	bhi.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800b710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b712:	2b60      	cmp	r3, #96	; 0x60
 800b714:	d02c      	beq.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	2b60      	cmp	r3, #96	; 0x60
 800b71a:	d83a      	bhi.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800b71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71e:	2b40      	cmp	r3, #64	; 0x40
 800b720:	d009      	beq.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	2b40      	cmp	r3, #64	; 0x40
 800b726:	d834      	bhi.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d00b      	beq.n	800b746 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	2b20      	cmp	r3, #32
 800b732:	d010      	beq.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800b734:	e02d      	b.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7ff fa40 	bl	800abc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800b740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b742:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b744:	e028      	b.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b746:	f107 0318 	add.w	r3, r7, #24
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff fb9e 	bl	800ae8c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b754:	e020      	b.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b756:	f107 030c 	add.w	r3, r7, #12
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff fcfc 	bl	800b158 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b764:	e018      	b.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 800b766:	bf00      	nop
 800b768:	46020c00 	.word	0x46020c00
 800b76c:	0007a120 	.word	0x0007a120

          case RCC_SAI1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b770:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b774:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b776:	e00f      	b.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b778:	4bab      	ldr	r3, [pc, #684]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b784:	d102      	bne.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            {
              frequency = HSI_VALUE;
 800b786:	4ba9      	ldr	r3, [pc, #676]	; (800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800b788:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800b78a:	e005      	b.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
              frequency = 0U;
 800b78c:	2300      	movs	r3, #0
 800b78e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b790:	e002      	b.n	800b798 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          default :
          {
            frequency = 0U;
 800b792:	2300      	movs	r3, #0
 800b794:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b796:	bf00      	nop
          }
        }
        break;
 800b798:	f000 bf2f 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b79c:	4ba2      	ldr	r3, [pc, #648]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b79e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b7a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b7a6:	633b      	str	r3, [r7, #48]	; 0x30
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7ae:	d037      	beq.n	800b820 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 800b7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7b6:	d840      	bhi.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800b7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7be:	d02b      	beq.n	800b818 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800b7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7c6:	d838      	bhi.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ce:	d00b      	beq.n	800b7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 800b7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7d6:	d830      	bhi.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d00c      	beq.n	800b7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 800b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7e4:	d010      	beq.n	800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 800b7e6:	e028      	b.n	800b83a <HAL_RCCEx_GetPeriphCLKFreq+0x416>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7ff f9e7 	bl	800abc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800b7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b7f6:	e023      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7f8:	f107 0318 	add.w	r3, r7, #24
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff fb45 	bl	800ae8c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b802:	69bb      	ldr	r3, [r7, #24]
 800b804:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b806:	e01b      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b808:	f107 030c 	add.w	r3, r7, #12
 800b80c:	4618      	mov	r0, r3
 800b80e:	f7ff fca3 	bl	800b158 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b816:	e013      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b818:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b81c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b81e:	e00f      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b820:	4b81      	ldr	r3, [pc, #516]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b82c:	d102      	bne.n	800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
            {
              frequency = HSI_VALUE;
 800b82e:	4b7f      	ldr	r3, [pc, #508]	; (800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800b830:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800b832:	e005      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              frequency = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b838:	e002      	b.n	800b840 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          default :

            frequency = 0U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b83e:	bf00      	nop

        }
        break;
 800b840:	f000 bedb 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      case RCC_PERIPHCLK_SAES:
        /* Get the current SAES source */
        srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b844:	4b78      	ldr	r3, [pc, #480]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b846:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b84a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b84e:	633b      	str	r3, [r7, #48]	; 0x30

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b850:	4b75      	ldr	r3, [pc, #468]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b85c:	d105      	bne.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b860:	2b00      	cmp	r3, #0
 800b862:	d102      	bne.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        {
          frequency = HSI_VALUE;
 800b864:	4b71      	ldr	r3, [pc, #452]	; (800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 800b866:	637b      	str	r3, [r7, #52]	; 0x34
 800b868:	e011      	b.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b86a:	4b6f      	ldr	r3, [pc, #444]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b876:	d106      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b87e:	d102      	bne.n	800b886 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          frequency = HSI_VALUE >> 1U;
 800b880:	4b6b      	ldr	r3, [pc, #428]	; (800ba30 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 800b882:	637b      	str	r3, [r7, #52]	; 0x34
 800b884:	e003      	b.n	800b88e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        /* Clock not enabled for SAES */
        else
        {
          frequency = 0U;
 800b886:	2300      	movs	r3, #0
 800b888:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800b88a:	f000 beb6 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800b88e:	f000 beb4 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_CLK48:

        srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 800b892:	4b65      	ldr	r3, [pc, #404]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b898:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b89c:	633b      	str	r3, [r7, #48]	; 0x30
 800b89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b8a4:	d030      	beq.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b8ac:	d844      	bhi.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8b4:	d00b      	beq.n	800b8ce <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 800b8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8bc:	d83c      	bhi.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 800b8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d014      	beq.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8ca:	d008      	beq.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b8cc:	e034      	b.n	800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x514>

        switch (srcclk)
        {
          case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b8ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff f974 	bl	800abc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b8dc:	e02f      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8de:	f107 0318 	add.w	r3, r7, #24
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff fad2 	bl	800ae8c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b8ec:	e027      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b8ee:	4b4e      	ldr	r3, [pc, #312]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8fa:	d102      	bne.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
            {
              frequency = HSI48_VALUE;
 800b8fc:	4b4d      	ldr	r3, [pc, #308]	; (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800b8fe:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800b900:	e01d      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
              frequency = 0U;
 800b902:	2300      	movs	r3, #0
 800b904:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b906:	e01a      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b908:	4b47      	ldr	r3, [pc, #284]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b910:	2b00      	cmp	r3, #0
 800b912:	d005      	beq.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 800b914:	4b44      	ldr	r3, [pc, #272]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b916:	689b      	ldr	r3, [r3, #8]
 800b918:	0e1b      	lsrs	r3, r3, #24
 800b91a:	f003 030f 	and.w	r3, r3, #15
 800b91e:	e006      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800b920:	4b41      	ldr	r3, [pc, #260]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b922:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	0e1b      	lsrs	r3, r3, #24
 800b92a:	f003 030f 	and.w	r3, r3, #15
 800b92e:	4a42      	ldr	r2, [pc, #264]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 800b930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b934:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b936:	e002      	b.n	800b93e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          default :

            frequency = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800b93c:	bf00      	nop

        }
        break;
 800b93e:	f000 be5c 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SDMMC:
        srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b942:	4b39      	ldr	r3, [pc, #228]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b944:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b94c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b950:	2b00      	cmp	r3, #0
 800b952:	d157      	bne.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 800b954:	4b34      	ldr	r3, [pc, #208]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b95a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b95e:	633b      	str	r3, [r7, #48]	; 0x30
 800b960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b962:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b966:	d030      	beq.n	800b9ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b96e:	d844      	bhi.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 800b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b976:	d00b      	beq.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b97e:	d83c      	bhi.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	2b00      	cmp	r3, #0
 800b984:	d014      	beq.n	800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 800b986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b988:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b98c:	d008      	beq.n	800b9a0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 800b98e:	e034      	b.n	800b9fa <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>

          switch (srcclk)
          {
            case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */
            {
              HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff f913 	bl	800abc0 <HAL_RCCEx_GetPLL1ClockFreq>
              frequency = pll1_clocks.PLL1_Q_Frequency;
 800b99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99c:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b99e:	e02f      	b.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */
            {
              HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9a0:	f107 0318 	add.w	r3, r7, #24
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff fa71 	bl	800ae8c <HAL_RCCEx_GetPLL2ClockFreq>
              frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b9ae:	e027      	b.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */
            {
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b9b0:	4b1d      	ldr	r3, [pc, #116]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9bc:	d102      	bne.n	800b9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
              {
                frequency = HSI48_VALUE;
 800b9be:	4b1d      	ldr	r3, [pc, #116]	; (800ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 800b9c0:	637b      	str	r3, [r7, #52]	; 0x34
              }
              else
              {
                frequency = 0U;
              }
              break;
 800b9c2:	e01d      	b.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
                frequency = 0U;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b9c8:	e01a      	b.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
            {
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b9ca:	4b17      	ldr	r3, [pc, #92]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d005      	beq.n	800b9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800b9d6:	4b14      	ldr	r3, [pc, #80]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	0e1b      	lsrs	r3, r3, #24
 800b9dc:	f003 030f 	and.w	r3, r3, #15
 800b9e0:	e006      	b.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b9e2:	4b11      	ldr	r3, [pc, #68]	; (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800b9e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b9e8:	041b      	lsls	r3, r3, #16
 800b9ea:	0e1b      	lsrs	r3, r3, #24
 800b9ec:	f003 030f 	and.w	r3, r3, #15
 800b9f0:	4a11      	ldr	r2, [pc, #68]	; (800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 800b9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9f6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b9f8:	e002      	b.n	800ba00 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            default :
            {
              frequency = 0U;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800b9fe:	bf00      	nop
            }
          }
          break;
 800ba00:	f000 bdfb 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        }
        else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800ba04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba0a:	d108      	bne.n	800ba1e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ba0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7ff f8d5 	bl	800abc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_P_Frequency;
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ba1a:	f000 bdee 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800ba22:	f000 bdea 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800ba26:	bf00      	nop
 800ba28:	46020c00 	.word	0x46020c00
 800ba2c:	00f42400 	.word	0x00f42400
 800ba30:	007a1200 	.word	0x007a1200
 800ba34:	02dc6c00 	.word	0x02dc6c00
 800ba38:	0801b650 	.word	0x0801b650

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800ba3c:	4bad      	ldr	r3, [pc, #692]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800ba3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba42:	f003 0303 	and.w	r3, r3, #3
 800ba46:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800ba48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d104      	bne.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800ba4e:	f7fe fbc5 	bl	800a1dc <HAL_RCC_GetPCLK2Freq>
 800ba52:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800ba54:	f000 bdd1 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d104      	bne.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
          frequency = HAL_RCC_GetSysClockFreq();
 800ba5e:	f7fe fa87 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800ba62:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800ba64:	f000 bdc9 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800ba68:	4ba2      	ldr	r3, [pc, #648]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba74:	d105      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d102      	bne.n	800ba82 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          frequency = HSI_VALUE;
 800ba7c:	4b9e      	ldr	r3, [pc, #632]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800ba7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba80:	e011      	b.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800ba82:	4b9c      	ldr	r3, [pc, #624]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800ba84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba88:	f003 0302 	and.w	r3, r3, #2
 800ba8c:	2b02      	cmp	r3, #2
 800ba8e:	d106      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 800ba90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba92:	2b03      	cmp	r3, #3
 800ba94:	d103      	bne.n	800ba9e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          frequency = LSE_VALUE;
 800ba96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba9c:	e003      	b.n	800baa6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          frequency = 0U;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800baa2:	f000 bdaa 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800baa6:	f000 bda8 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800baaa:	4b92      	ldr	r3, [pc, #584]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800baac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bab0:	f003 030c 	and.w	r3, r3, #12
 800bab4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800bab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d104      	bne.n	800bac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800babc:	f7fe fb7a 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 800bac0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800bac2:	f000 bd9a 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	2b04      	cmp	r3, #4
 800baca:	d104      	bne.n	800bad6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          frequency = HAL_RCC_GetSysClockFreq();
 800bacc:	f7fe fa50 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800bad0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bad2:	f000 bd92 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800bad6:	4b87      	ldr	r3, [pc, #540]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bae2:	d105      	bne.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800bae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae6:	2b08      	cmp	r3, #8
 800bae8:	d102      	bne.n	800baf0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
          frequency = HSI_VALUE;
 800baea:	4b83      	ldr	r3, [pc, #524]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800baec:	637b      	str	r3, [r7, #52]	; 0x34
 800baee:	e011      	b.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800baf0:	4b80      	ldr	r3, [pc, #512]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800baf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800baf6:	f003 0302 	and.w	r3, r3, #2
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d106      	bne.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 800bafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb00:	2b0c      	cmp	r3, #12
 800bb02:	d103      	bne.n	800bb0c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = LSE_VALUE;
 800bb04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb08:	637b      	str	r3, [r7, #52]	; 0x34
 800bb0a:	e003      	b.n	800bb14 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = 0U;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb10:	f000 bd73 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bb14:	f000 bd71 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800bb18:	4b76      	ldr	r3, [pc, #472]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bb1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb22:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d104      	bne.n	800bb34 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb2a:	f7fe fb43 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 800bb2e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800bb30:	f000 bd63 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800bb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb36:	2b10      	cmp	r3, #16
 800bb38:	d104      	bne.n	800bb44 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = HAL_RCC_GetSysClockFreq();
 800bb3a:	f7fe fa19 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800bb3e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bb40:	f000 bd5b 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800bb44:	4b6b      	ldr	r3, [pc, #428]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb50:	d105      	bne.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800bb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb54:	2b20      	cmp	r3, #32
 800bb56:	d102      	bne.n	800bb5e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HSI_VALUE;
 800bb58:	4b67      	ldr	r3, [pc, #412]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800bb5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bb5c:	e011      	b.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800bb5e:	4b65      	ldr	r3, [pc, #404]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bb60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bb64:	f003 0302 	and.w	r3, r3, #2
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d106      	bne.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	2b30      	cmp	r3, #48	; 0x30
 800bb70:	d103      	bne.n	800bb7a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = LSE_VALUE;
 800bb72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb76:	637b      	str	r3, [r7, #52]	; 0x34
 800bb78:	e003      	b.n	800bb82 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = 0U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bb7e:	f000 bd3c 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bb82:	f000 bd3a 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800bb86:	4b5b      	ldr	r3, [pc, #364]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bb88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bb8c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb90:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800bb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d104      	bne.n	800bba2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bb98:	f7fe fb0c 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 800bb9c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800bb9e:	f000 bd2c 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	2b40      	cmp	r3, #64	; 0x40
 800bba6:	d104      	bne.n	800bbb2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          frequency = HAL_RCC_GetSysClockFreq();
 800bba8:	f7fe f9e2 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800bbac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bbae:	f000 bd24 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800bbb2:	4b50      	ldr	r3, [pc, #320]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bbba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbbe:	d105      	bne.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800bbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc2:	2b80      	cmp	r3, #128	; 0x80
 800bbc4:	d102      	bne.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HSI_VALUE;
 800bbc6:	4b4c      	ldr	r3, [pc, #304]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800bbc8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbca:	e011      	b.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800bbcc:	4b49      	ldr	r3, [pc, #292]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bbce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bbd2:	f003 0302 	and.w	r3, r3, #2
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d106      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800bbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbdc:	2bc0      	cmp	r3, #192	; 0xc0
 800bbde:	d103      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = LSE_VALUE;
 800bbe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbe4:	637b      	str	r3, [r7, #52]	; 0x34
 800bbe6:	e003      	b.n	800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
          frequency = 0U;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bbec:	f000 bd05 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bbf0:	f000 bd03 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800bbf4:	4b3f      	ldr	r3, [pc, #252]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bbf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bbfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbfe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800bc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d104      	bne.n	800bc10 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bc06:	f7fe fad5 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 800bc0a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800bc0c:	f000 bcf5 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800bc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc16:	d104      	bne.n	800bc22 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
          frequency = HAL_RCC_GetSysClockFreq();
 800bc18:	f7fe f9aa 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800bc1c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bc1e:	f000 bcec 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800bc22:	4b34      	ldr	r3, [pc, #208]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc2e:	d106      	bne.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc36:	d102      	bne.n	800bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
          frequency = HSI_VALUE;
 800bc38:	4b2f      	ldr	r3, [pc, #188]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800bc3a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc3c:	e012      	b.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800bc3e:	4b2d      	ldr	r3, [pc, #180]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bc40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bc44:	f003 0302 	and.w	r3, r3, #2
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d107      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc52:	d103      	bne.n	800bc5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          frequency = LSE_VALUE;
 800bc54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc58:	637b      	str	r3, [r7, #52]	; 0x34
 800bc5a:	e003      	b.n	800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
          frequency = 0U;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc60:	f000 bccb 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bc64:	f000 bcc9 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800bc68:	4b22      	ldr	r3, [pc, #136]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bc6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bc6e:	f003 0307 	and.w	r3, r3, #7
 800bc72:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800bc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d104      	bne.n	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800bc7a:	f7fe fac3 	bl	800a204 <HAL_RCC_GetPCLK3Freq>
 800bc7e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bc80:	f000 bcbb 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d104      	bne.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800bc8a:	f7fe f971 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800bc8e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bc90:	f000 bcb3 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800bc94:	4b17      	ldr	r3, [pc, #92]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bca0:	d105      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800bca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca4:	2b02      	cmp	r3, #2
 800bca6:	d102      	bne.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HSI_VALUE;
 800bca8:	4b13      	ldr	r3, [pc, #76]	; (800bcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800bcaa:	637b      	str	r3, [r7, #52]	; 0x34
 800bcac:	e036      	b.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800bcae:	4b11      	ldr	r3, [pc, #68]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bcb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800bcb4:	f003 0302 	and.w	r3, r3, #2
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d106      	bne.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d103      	bne.n	800bcca <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          frequency = LSE_VALUE;
 800bcc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcc6:	637b      	str	r3, [r7, #52]	; 0x34
 800bcc8:	e028      	b.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800bcca:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 0320 	and.w	r3, r3, #32
 800bcd2:	2b20      	cmp	r3, #32
 800bcd4:	d11e      	bne.n	800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd8:	2b04      	cmp	r3, #4
 800bcda:	d11b      	bne.n	800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bcdc:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d009      	beq.n	800bcfc <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 800bce8:	4b02      	ldr	r3, [pc, #8]	; (800bcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	0e1b      	lsrs	r3, r3, #24
 800bcee:	f003 030f 	and.w	r3, r3, #15
 800bcf2:	e00a      	b.n	800bd0a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 800bcf4:	46020c00 	.word	0x46020c00
 800bcf8:	00f42400 	.word	0x00f42400
 800bcfc:	4bb0      	ldr	r3, [pc, #704]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bcfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bd02:	041b      	lsls	r3, r3, #16
 800bd04:	0e1b      	lsrs	r3, r3, #24
 800bd06:	f003 030f 	and.w	r3, r3, #15
 800bd0a:	4aae      	ldr	r2, [pc, #696]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800bd0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd10:	637b      	str	r3, [r7, #52]	; 0x34
 800bd12:	e003      	b.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = 0U;
 800bd14:	2300      	movs	r3, #0
 800bd16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd18:	f000 bc6f 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bd1c:	f000 bc6d 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADCDAC:

        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800bd20:	4ba7      	ldr	r3, [pc, #668]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bd22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd26:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bd2a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd32:	d104      	bne.n	800bd3e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        {
          frequency = HAL_RCC_GetSysClockFreq();
 800bd34:	f7fe f91c 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800bd38:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADC */
        else
        {
          frequency = 0U;
        }
        break;
 800bd3a:	f000 bc5e 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd44:	d108      	bne.n	800bd58 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd46:	f107 0318 	add.w	r3, r7, #24
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7ff f89e 	bl	800ae8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800bd50:	6a3b      	ldr	r3, [r7, #32]
 800bd52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd54:	f000 bc51 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d104      	bne.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetHCLKFreq();
 800bd5e:	f7fe fa0f 	bl	800a180 <HAL_RCC_GetHCLKFreq>
 800bd62:	6378      	str	r0, [r7, #52]	; 0x34
          break;
 800bd64:	f000 bc49 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bd6e:	d118      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800bd70:	4b93      	ldr	r3, [pc, #588]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d005      	beq.n	800bd88 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800bd7c:	4b90      	ldr	r3, [pc, #576]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bd7e:	689b      	ldr	r3, [r3, #8]
 800bd80:	0f1b      	lsrs	r3, r3, #28
 800bd82:	f003 030f 	and.w	r3, r3, #15
 800bd86:	e006      	b.n	800bd96 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800bd88:	4b8d      	ldr	r3, [pc, #564]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bd8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bd8e:	041b      	lsls	r3, r3, #16
 800bd90:	0f1b      	lsrs	r3, r3, #28
 800bd92:	f003 030f 	and.w	r3, r3, #15
 800bd96:	4a8b      	ldr	r2, [pc, #556]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800bd98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd9c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800bd9e:	f000 bc2c 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800bda2:	4b87      	ldr	r3, [pc, #540]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdae:	d106      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bdb6:	d102      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          frequency = HSE_VALUE;
 800bdb8:	4b83      	ldr	r3, [pc, #524]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800bdba:	637b      	str	r3, [r7, #52]	; 0x34
 800bdbc:	e011      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800bdbe:	4b80      	ldr	r3, [pc, #512]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bdc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bdca:	d106      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 800bdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdd2:	d102      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          frequency = HSI_VALUE;
 800bdd4:	4b7c      	ldr	r3, [pc, #496]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800bdd6:	637b      	str	r3, [r7, #52]	; 0x34
 800bdd8:	e003      	b.n	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          frequency = 0U;
 800bdda:	2300      	movs	r3, #0
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdde:	f000 bc0c 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bde2:	f000 bc0a 	b.w	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_MDF1:
        /* Get the current MDF1 source */
        srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800bde6:	4b76      	ldr	r3, [pc, #472]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bde8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bdec:	f003 0307 	and.w	r3, r3, #7
 800bdf0:	633b      	str	r3, [r7, #48]	; 0x30
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	2b04      	cmp	r3, #4
 800bdf6:	d83d      	bhi.n	800be74 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 800bdf8:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>)
 800bdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfe:	bf00      	nop
 800be00:	0800be35 	.word	0x0800be35
 800be04:	0800be15 	.word	0x0800be15
 800be08:	0800be25 	.word	0x0800be25
 800be0c:	0800be3d 	.word	0x0800be3d
 800be10:	0800be45 	.word	0x0800be45

        switch (srcclk)
        {
          case RCC_MDF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fe fed1 	bl	800abc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800be1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800be22:	e02a      	b.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be24:	f107 030c 	add.w	r3, r7, #12
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff f995 	bl	800b158 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800be32:	e022      	b.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 800be34:	f7fe f9a4 	bl	800a180 <HAL_RCC_GetHCLKFreq>
 800be38:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800be3a:	e01e      	b.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800be3c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800be40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800be42:	e01a      	b.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be44:	4b5e      	ldr	r3, [pc, #376]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d005      	beq.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 800be50:	4b5b      	ldr	r3, [pc, #364]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	0e1b      	lsrs	r3, r3, #24
 800be56:	f003 030f 	and.w	r3, r3, #15
 800be5a:	e006      	b.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800be5c:	4b58      	ldr	r3, [pc, #352]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800be5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be62:	041b      	lsls	r3, r3, #16
 800be64:	0e1b      	lsrs	r3, r3, #24
 800be66:	f003 030f 	and.w	r3, r3, #15
 800be6a:	4a56      	ldr	r2, [pc, #344]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800be6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800be72:	e002      	b.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          default:

            frequency = 0U;
 800be74:	2300      	movs	r3, #0
 800be76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800be78:	bf00      	nop

        }
        break;
 800be7a:	e3be      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADF1:
        /* Get the current ADF1 source */
        srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800be7c:	4b50      	ldr	r3, [pc, #320]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800be7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800be82:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800be86:	633b      	str	r3, [r7, #48]	; 0x30
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be8e:	d032      	beq.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800be96:	d846      	bhi.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800be9e:	d026      	beq.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bea6:	d83e      	bhi.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800beae:	d012      	beq.n	800bed6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800beb6:	d836      	bhi.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 800beb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d013      	beq.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 800bebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bec4:	d12f      	bne.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>

        switch (srcclk)
        {
          case RCC_ADF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe fe78 	bl	800abc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bed4:	e02a      	b.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bed6:	f107 030c 	add.w	r3, r7, #12
 800beda:	4618      	mov	r0, r3
 800bedc:	f7ff f93c 	bl	800b158 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bee4:	e022      	b.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 800bee6:	f7fe f94b 	bl	800a180 <HAL_RCC_GetHCLKFreq>
 800beea:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800beec:	e01e      	b.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800beee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bef2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bef4:	e01a      	b.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bef6:	4b32      	ldr	r3, [pc, #200]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d005      	beq.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 800bf02:	4b2f      	ldr	r3, [pc, #188]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	0e1b      	lsrs	r3, r3, #24
 800bf08:	f003 030f 	and.w	r3, r3, #15
 800bf0c:	e006      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800bf0e:	4b2c      	ldr	r3, [pc, #176]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bf10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bf14:	041b      	lsls	r3, r3, #16
 800bf16:	0e1b      	lsrs	r3, r3, #24
 800bf18:	f003 030f 	and.w	r3, r3, #15
 800bf1c:	4a29      	ldr	r2, [pc, #164]	; (800bfc4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800bf1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf22:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bf24:	e002      	b.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          default:

            frequency = 0U;
 800bf26:	2300      	movs	r3, #0
 800bf28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800bf2a:	bf00      	nop
        }
        break;
 800bf2c:	e365      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800bf2e:	4b24      	ldr	r3, [pc, #144]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bf30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bf38:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d103      	bne.n	800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bf40:	f7fe f938 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 800bf44:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800bf46:	e358      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800bf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf4e:	d103      	bne.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetSysClockFreq();
 800bf50:	f7fe f80e 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800bf54:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bf56:	e350      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800bf58:	4b19      	ldr	r3, [pc, #100]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf64:	d106      	bne.n	800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf6c:	d102      	bne.n	800bf74 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HSI_VALUE;
 800bf6e:	4b16      	ldr	r3, [pc, #88]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800bf70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf72:	e342      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800bf74:	2300      	movs	r3, #0
 800bf76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf78:	e33f      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800bf7a:	4b11      	ldr	r3, [pc, #68]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bf7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bf80:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bf84:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800bf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d103      	bne.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800bf8c:	f7fe f912 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 800bf90:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800bf92:	e332      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800bf94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf9a:	d103      	bne.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          frequency = HAL_RCC_GetSysClockFreq();
 800bf9c:	f7fd ffe8 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800bfa0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bfa2:	e32a      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800bfa4:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfb0:	d10c      	bne.n	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfb8:	d108      	bne.n	800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
          frequency = HSI_VALUE;
 800bfba:	4b03      	ldr	r3, [pc, #12]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 800bfbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfbe:	e31c      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800bfc0:	46020c00 	.word	0x46020c00
 800bfc4:	0801b650 	.word	0x0801b650
 800bfc8:	00f42400 	.word	0x00f42400
          frequency = 0U;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfd0:	e313      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bfd2:	4ba9      	ldr	r3, [pc, #676]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800bfd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bfd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bfdc:	633b      	str	r3, [r7, #48]	; 0x30
 800bfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe0:	2bc0      	cmp	r3, #192	; 0xc0
 800bfe2:	d024      	beq.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800bfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe6:	2bc0      	cmp	r3, #192	; 0xc0
 800bfe8:	d839      	bhi.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	2b80      	cmp	r3, #128	; 0x80
 800bfee:	d00d      	beq.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 800bff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff2:	2b80      	cmp	r3, #128	; 0x80
 800bff4:	d833      	bhi.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d003      	beq.n	800c004 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	2b40      	cmp	r3, #64	; 0x40
 800c000:	d011      	beq.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 800c002:	e02c      	b.n	800c05e <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>

        switch (srcclk)
        {
          case RCC_I2C3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800c004:	f7fe f8fe 	bl	800a204 <HAL_RCC_GetPCLK3Freq>
 800c008:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c00a:	e02b      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_HSI:
          {
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c00c:	4b9a      	ldr	r3, [pc, #616]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c018:	d102      	bne.n	800c020 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
            {
              frequency = HSI_VALUE;
 800c01a:	4b98      	ldr	r3, [pc, #608]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800c01c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800c01e:	e021      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 800c020:	2300      	movs	r3, #0
 800c022:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c024:	e01e      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_SYSCLK:
          {
            frequency = HAL_RCC_GetSysClockFreq();
 800c026:	f7fd ffa3 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800c02a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c02c:	e01a      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_MSIK:
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800c02e:	4b92      	ldr	r3, [pc, #584]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d005      	beq.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800c03a:	4b8f      	ldr	r3, [pc, #572]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	0f1b      	lsrs	r3, r3, #28
 800c040:	f003 030f 	and.w	r3, r3, #15
 800c044:	e006      	b.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
 800c046:	4b8c      	ldr	r3, [pc, #560]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c04c:	041b      	lsls	r3, r3, #16
 800c04e:	0f1b      	lsrs	r3, r3, #28
 800c050:	f003 030f 	and.w	r3, r3, #15
 800c054:	4a8a      	ldr	r2, [pc, #552]	; (800c280 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 800c056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c05a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c05c:	e002      	b.n	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          default:
          {
            frequency = 0U;
 800c05e:	2300      	movs	r3, #0
 800c060:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c062:	bf00      	nop
          }
        }
        break;
 800c064:	e2c9      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800c066:	4b84      	ldr	r3, [pc, #528]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c06c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c070:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	2b00      	cmp	r3, #0
 800c076:	d103      	bne.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c078:	f7fe f89c 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 800c07c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800c07e:	e2bc      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c086:	d103      	bne.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
          frequency = HAL_RCC_GetSysClockFreq();
 800c088:	f7fd ff72 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800c08c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c08e:	e2b4      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c090:	4b79      	ldr	r3, [pc, #484]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c09c:	d106      	bne.n	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c0a4:	d102      	bne.n	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
          frequency = HSI_VALUE;
 800c0a6:	4b75      	ldr	r3, [pc, #468]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800c0a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0aa:	e2a6      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c0b0:	e2a3      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM34:
        /* Get the current LPTIM34 source */
        srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800c0b2:	4b71      	ldr	r3, [pc, #452]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c0b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c0b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0bc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d117      	bne.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c0c4:	4b6c      	ldr	r3, [pc, #432]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d005      	beq.n	800c0dc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 800c0d0:	4b69      	ldr	r3, [pc, #420]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	0e1b      	lsrs	r3, r3, #24
 800c0d6:	f003 030f 	and.w	r3, r3, #15
 800c0da:	e006      	b.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
 800c0dc:	4b66      	ldr	r3, [pc, #408]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c0de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c0e2:	041b      	lsls	r3, r3, #16
 800c0e4:	0e1b      	lsrs	r3, r3, #24
 800c0e6:	f003 030f 	and.w	r3, r3, #15
 800c0ea:	4a65      	ldr	r2, [pc, #404]	; (800c280 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 800c0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0f0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM34 */
        else
        {
          frequency = 0U;
        }
        break;
 800c0f2:	e282      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800c0f4:	4b60      	ldr	r3, [pc, #384]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c0f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c102:	d107      	bne.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c10a:	d103      	bne.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
          frequency = LSI_VALUE;
 800c10c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c110:	637b      	str	r3, [r7, #52]	; 0x34
 800c112:	e01f      	b.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800c114:	4b58      	ldr	r3, [pc, #352]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c11c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c120:	d106      	bne.n	800c130 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c128:	d102      	bne.n	800c130 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
          frequency = HSI_VALUE;
 800c12a:	4b54      	ldr	r3, [pc, #336]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800c12c:	637b      	str	r3, [r7, #52]	; 0x34
 800c12e:	e011      	b.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800c130:	4b51      	ldr	r3, [pc, #324]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d107      	bne.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c144:	d103      	bne.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = LSE_VALUE;
 800c146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c14a:	637b      	str	r3, [r7, #52]	; 0x34
 800c14c:	e002      	b.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
          frequency = 0U;
 800c14e:	2300      	movs	r3, #0
 800c150:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c152:	e252      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800c154:	e251      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c156:	4b48      	ldr	r3, [pc, #288]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c15c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c160:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	2b00      	cmp	r3, #0
 800c166:	d117      	bne.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c168:	4b43      	ldr	r3, [pc, #268]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c170:	2b00      	cmp	r3, #0
 800c172:	d005      	beq.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
 800c174:	4b40      	ldr	r3, [pc, #256]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c176:	689b      	ldr	r3, [r3, #8]
 800c178:	0e1b      	lsrs	r3, r3, #24
 800c17a:	f003 030f 	and.w	r3, r3, #15
 800c17e:	e006      	b.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
 800c180:	4b3d      	ldr	r3, [pc, #244]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c182:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c186:	041b      	lsls	r3, r3, #16
 800c188:	0e1b      	lsrs	r3, r3, #24
 800c18a:	f003 030f 	and.w	r3, r3, #15
 800c18e:	4a3c      	ldr	r2, [pc, #240]	; (800c280 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 800c190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c194:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c196:	e230      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800c198:	4b37      	ldr	r3, [pc, #220]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c19a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c19e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1a6:	d107      	bne.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1ae:	d103      	bne.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
          frequency = LSI_VALUE;
 800c1b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c1b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1b6:	e01f      	b.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800c1b8:	4b2f      	ldr	r3, [pc, #188]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c1c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1c4:	d106      	bne.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800c1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c1cc:	d102      	bne.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
          frequency = HSI_VALUE;
 800c1ce:	4b2b      	ldr	r3, [pc, #172]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800c1d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c1d2:	e011      	b.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800c1d4:	4b28      	ldr	r3, [pc, #160]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c1d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1da:	f003 0302 	and.w	r3, r3, #2
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d107      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800c1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c1e8:	d103      	bne.n	800c1f2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
          frequency = LSE_VALUE;
 800c1ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c1f0:	e002      	b.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
          frequency = 0U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c1f6:	e200      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800c1f8:	e1ff      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c1fa:	4b1f      	ldr	r3, [pc, #124]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c1fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c200:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c204:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d103      	bne.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800c20c:	f7fd ffd2 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 800c210:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM2 */
        else
        {
          frequency = 0U;
        }
        break;
 800c212:	e1f2      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800c214:	4b18      	ldr	r3, [pc, #96]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c21a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c21e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c222:	d107      	bne.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c22a:	d103      	bne.n	800c234 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
          frequency = LSI_VALUE;
 800c22c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c230:	637b      	str	r3, [r7, #52]	; 0x34
 800c232:	e01f      	b.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800c234:	4b10      	ldr	r3, [pc, #64]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c23c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c240:	d106      	bne.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c248:	d102      	bne.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HSI_VALUE;
 800c24a:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800c24c:	637b      	str	r3, [r7, #52]	; 0x34
 800c24e:	e011      	b.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800c250:	4b09      	ldr	r3, [pc, #36]	; (800c278 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800c252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d107      	bne.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c264:	d103      	bne.n	800c26e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSE_VALUE;
 800c266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c26a:	637b      	str	r3, [r7, #52]	; 0x34
 800c26c:	e002      	b.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
          frequency = 0U;
 800c26e:	2300      	movs	r3, #0
 800c270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c272:	e1c2      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800c274:	e1c1      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800c276:	bf00      	nop
 800c278:	46020c00 	.word	0x46020c00
 800c27c:	00f42400 	.word	0x00f42400
 800c280:	0801b650 	.word	0x0801b650

      case RCC_PERIPHCLK_FDCAN1:
        /* Get the current FDCAN1 kernel source */
        srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800c284:	4bb0      	ldr	r3, [pc, #704]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c28a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800c28e:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800c290:	4bad      	ldr	r3, [pc, #692]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c29c:	d105      	bne.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 800c29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d102      	bne.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
        {
          frequency = HSE_VALUE;
 800c2a4:	4ba9      	ldr	r3, [pc, #676]	; (800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800c2a6:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN1 */
        else
        {
          frequency = 0U;
        }
        break;
 800c2a8:	e1a7      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c2b0:	d107      	bne.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe fc82 	bl	800abc0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2c0:	e19b      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2c8:	d107      	bne.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ca:	f107 0318 	add.w	r3, r7, #24
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7fe fddc 	bl	800ae8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2d8:	e18f      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c2de:	e18c      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c2e0:	4b99      	ldr	r3, [pc, #612]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c2e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c2ea:	633b      	str	r3, [r7, #48]	; 0x30
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2f2:	d028      	beq.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c2fa:	d83c      	bhi.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800c2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c302:	d013      	beq.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 800c304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c306:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c30a:	d834      	bhi.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d004      	beq.n	800c31c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c318:	d004      	beq.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800c31a:	e02c      	b.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PCLK2:

            frequency = HAL_RCC_GetPCLK2Freq();
 800c31c:	f7fd ff5e 	bl	800a1dc <HAL_RCC_GetPCLK2Freq>
 800c320:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c322:	e02b      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800c324:	f7fd fe24 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800c328:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c32a:	e027      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c32c:	4b86      	ldr	r3, [pc, #536]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c338:	d102      	bne.n	800c340 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
            {
              frequency = HSI_VALUE;
 800c33a:	4b84      	ldr	r3, [pc, #528]	; (800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800c33c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800c33e:	e01d      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
              frequency = 0U;
 800c340:	2300      	movs	r3, #0
 800c342:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c344:	e01a      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c346:	4b80      	ldr	r3, [pc, #512]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d005      	beq.n	800c35e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800c352:	4b7d      	ldr	r3, [pc, #500]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	0e1b      	lsrs	r3, r3, #24
 800c358:	f003 030f 	and.w	r3, r3, #15
 800c35c:	e006      	b.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800c35e:	4b7a      	ldr	r3, [pc, #488]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c364:	041b      	lsls	r3, r3, #16
 800c366:	0e1b      	lsrs	r3, r3, #24
 800c368:	f003 030f 	and.w	r3, r3, #15
 800c36c:	4a78      	ldr	r2, [pc, #480]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 800c36e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c372:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c374:	e002      	b.n	800c37c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          default:

            frequency = 0U;
 800c376:	2300      	movs	r3, #0
 800c378:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c37a:	bf00      	nop

        }
        break;
 800c37c:	e13d      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c37e:	4b72      	ldr	r3, [pc, #456]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c388:	633b      	str	r3, [r7, #48]	; 0x30
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c390:	d028      	beq.n	800c3e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc0>
 800c392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c394:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c398:	d83c      	bhi.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3a0:	d013      	beq.n	800c3ca <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 800c3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3a8:	d834      	bhi.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d004      	beq.n	800c3ba <HAL_RCCEx_GetPeriphCLKFreq+0xf96>
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3b6:	d004      	beq.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 800c3b8:	e02c      	b.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PCLK1:

            frequency = HAL_RCC_GetPCLK1Freq();
 800c3ba:	f7fd fefb 	bl	800a1b4 <HAL_RCC_GetPCLK1Freq>
 800c3be:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c3c0:	e02b      	b.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800c3c2:	f7fd fdd5 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800c3c6:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c3c8:	e027      	b.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c3ca:	4b5f      	ldr	r3, [pc, #380]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3d6:	d102      	bne.n	800c3de <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            {
              frequency = HSI_VALUE;
 800c3d8:	4b5c      	ldr	r3, [pc, #368]	; (800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800c3da:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800c3dc:	e01d      	b.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>
              frequency = 0U;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c3e2:	e01a      	b.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c3e4:	4b58      	ldr	r3, [pc, #352]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c3e6:	689b      	ldr	r3, [r3, #8]
 800c3e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d005      	beq.n	800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800c3f0:	4b55      	ldr	r3, [pc, #340]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	0e1b      	lsrs	r3, r3, #24
 800c3f6:	f003 030f 	and.w	r3, r3, #15
 800c3fa:	e006      	b.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
 800c3fc:	4b52      	ldr	r3, [pc, #328]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c3fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c402:	041b      	lsls	r3, r3, #16
 800c404:	0e1b      	lsrs	r3, r3, #24
 800c406:	f003 030f 	and.w	r3, r3, #15
 800c40a:	4a51      	ldr	r2, [pc, #324]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 800c40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c410:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c412:	e002      	b.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          default:

            frequency = 0U;
 800c414:	2300      	movs	r3, #0
 800c416:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c418:	bf00      	nop

        }
        break;
 800c41a:	e0ee      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c41c:	4b4a      	ldr	r3, [pc, #296]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c41e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c422:	f003 0318 	and.w	r3, r3, #24
 800c426:	633b      	str	r3, [r7, #48]	; 0x30
 800c428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42a:	2b18      	cmp	r3, #24
 800c42c:	d861      	bhi.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 800c42e:	a201      	add	r2, pc, #4	; (adr r2, 800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800c430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c434:	0800c499 	.word	0x0800c499
 800c438:	0800c4f3 	.word	0x0800c4f3
 800c43c:	0800c4f3 	.word	0x0800c4f3
 800c440:	0800c4f3 	.word	0x0800c4f3
 800c444:	0800c4f3 	.word	0x0800c4f3
 800c448:	0800c4f3 	.word	0x0800c4f3
 800c44c:	0800c4f3 	.word	0x0800c4f3
 800c450:	0800c4f3 	.word	0x0800c4f3
 800c454:	0800c4a1 	.word	0x0800c4a1
 800c458:	0800c4f3 	.word	0x0800c4f3
 800c45c:	0800c4f3 	.word	0x0800c4f3
 800c460:	0800c4f3 	.word	0x0800c4f3
 800c464:	0800c4f3 	.word	0x0800c4f3
 800c468:	0800c4f3 	.word	0x0800c4f3
 800c46c:	0800c4f3 	.word	0x0800c4f3
 800c470:	0800c4f3 	.word	0x0800c4f3
 800c474:	0800c4a9 	.word	0x0800c4a9
 800c478:	0800c4f3 	.word	0x0800c4f3
 800c47c:	0800c4f3 	.word	0x0800c4f3
 800c480:	0800c4f3 	.word	0x0800c4f3
 800c484:	0800c4f3 	.word	0x0800c4f3
 800c488:	0800c4f3 	.word	0x0800c4f3
 800c48c:	0800c4f3 	.word	0x0800c4f3
 800c490:	0800c4f3 	.word	0x0800c4f3
 800c494:	0800c4c3 	.word	0x0800c4c3
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PCLK3:

            frequency = HAL_RCC_GetPCLK3Freq();
 800c498:	f7fd feb4 	bl	800a204 <HAL_RCC_GetPCLK3Freq>
 800c49c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c49e:	e02b      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800c4a0:	f7fd fd66 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800c4a4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c4a6:	e027      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4a8:	4b27      	ldr	r3, [pc, #156]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4b4:	d102      	bne.n	800c4bc <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
            {
              frequency = HSI_VALUE;
 800c4b6:	4b25      	ldr	r3, [pc, #148]	; (800c54c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800c4b8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800c4ba:	e01d      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
              frequency = 0U;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c4c0:	e01a      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c4c2:	4b21      	ldr	r3, [pc, #132]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d005      	beq.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x10b6>
 800c4ce:	4b1e      	ldr	r3, [pc, #120]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c4d0:	689b      	ldr	r3, [r3, #8]
 800c4d2:	0e1b      	lsrs	r3, r3, #24
 800c4d4:	f003 030f 	and.w	r3, r3, #15
 800c4d8:	e006      	b.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 800c4da:	4b1b      	ldr	r3, [pc, #108]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c4dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c4e0:	041b      	lsls	r3, r3, #16
 800c4e2:	0e1b      	lsrs	r3, r3, #24
 800c4e4:	f003 030f 	and.w	r3, r3, #15
 800c4e8:	4a19      	ldr	r2, [pc, #100]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 800c4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c4f0:	e002      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          default:

            frequency = 0U;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c4f6:	bf00      	nop
        }
        break;
 800c4f8:	e07f      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c4fa:	4b13      	ldr	r3, [pc, #76]	; (800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800c4fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c500:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c504:	633b      	str	r3, [r7, #48]	; 0x30
 800c506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c508:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c50c:	d013      	beq.n	800c536 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 800c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c510:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c514:	d842      	bhi.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800c516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c51c:	d01a      	beq.n	800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c524:	d83a      	bhi.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 800c526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d01b      	beq.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x1140>
 800c52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c532:	d01b      	beq.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x1148>
 800c534:	e032      	b.n	800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_PLL2:

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c536:	f107 0318 	add.w	r3, r7, #24
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fe fca6 	bl	800ae8c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c544:	e02d      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800c546:	bf00      	nop
 800c548:	46020c00 	.word	0x46020c00
 800c54c:	00f42400 	.word	0x00f42400
 800c550:	0801b650 	.word	0x0801b650

          case RCC_OSPICLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fe fb31 	bl	800abc0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800c55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c560:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c562:	e01e      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 800c564:	f7fd fd04 	bl	8009f70 <HAL_RCC_GetSysClockFreq>
 800c568:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800c56a:	e01a      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c56c:	4b25      	ldr	r3, [pc, #148]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d005      	beq.n	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 800c578:	4b22      	ldr	r3, [pc, #136]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	0e1b      	lsrs	r3, r3, #24
 800c57e:	f003 030f 	and.w	r3, r3, #15
 800c582:	e006      	b.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
 800c584:	4b1f      	ldr	r3, [pc, #124]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c586:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c58a:	041b      	lsls	r3, r3, #16
 800c58c:	0e1b      	lsrs	r3, r3, #24
 800c58e:	f003 030f 	and.w	r3, r3, #15
 800c592:	4a1d      	ldr	r2, [pc, #116]	; (800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 800c594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c598:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c59a:	e002      	b.n	800c5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          default:

            frequency = 0U;
 800c59c:	2300      	movs	r3, #0
 800c59e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800c5a0:	bf00      	nop
        }
        break;
 800c5a2:	e02a      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_DAC1:
        /* Get the current DAC1 kernel source */
        srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c5a4:	4b17      	ldr	r3, [pc, #92]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c5a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c5aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5ae:	633b      	str	r3, [r7, #48]	; 0x30
        /* Check if LSE is ready and if DAC1 clock selection is LSE */
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c5b0:	4b14      	ldr	r3, [pc, #80]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c5b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5b6:	f003 0302 	and.w	r3, r3, #2
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d106      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 800c5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d103      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        {
          frequency = LSE_VALUE;
 800c5c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c5c8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ca:	e012      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Check if LSI is ready and if DAC1 clock selection is LSI */
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c5cc:	4b0d      	ldr	r3, [pc, #52]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800c5ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c5d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5da:	d107      	bne.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 800c5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5e2:	d103      	bne.n	800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
        {
          frequency = LSI_VALUE;
 800c5e4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c5e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c5ea:	e002      	b.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Clock not enabled for DAC1*/
        else
        {
          frequency = 0U;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 800c5f0:	e003      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800c5f2:	e002      	b.n	800c5fa <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      default:
         frequency = 0U;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c5f8:	bf00      	nop
    }
  }
  return (frequency);
 800c5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3738      	adds	r7, #56	; 0x38
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	46020c00 	.word	0x46020c00
 800c608:	0801b650 	.word	0x0801b650

0800c60c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b084      	sub	sp, #16
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c614:	4b47      	ldr	r3, [pc, #284]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a46      	ldr	r2, [pc, #280]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c61a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c61e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c620:	f7fa f998 	bl	8006954 <HAL_GetTick>
 800c624:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c626:	e008      	b.n	800c63a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c628:	f7fa f994 	bl	8006954 <HAL_GetTick>
 800c62c:	4602      	mov	r2, r0
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	2b02      	cmp	r3, #2
 800c634:	d901      	bls.n	800c63a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c636:	2303      	movs	r3, #3
 800c638:	e077      	b.n	800c72a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c63a:	4b3e      	ldr	r3, [pc, #248]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1f0      	bne.n	800c628 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c646:	4b3b      	ldr	r3, [pc, #236]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c64e:	f023 0303 	bic.w	r3, r3, #3
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	6811      	ldr	r1, [r2, #0]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	6852      	ldr	r2, [r2, #4]
 800c65a:	3a01      	subs	r2, #1
 800c65c:	0212      	lsls	r2, r2, #8
 800c65e:	430a      	orrs	r2, r1
 800c660:	4934      	ldr	r1, [pc, #208]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c662:	4313      	orrs	r3, r2
 800c664:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c666:	4b33      	ldr	r3, [pc, #204]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c668:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c66a:	4b33      	ldr	r3, [pc, #204]	; (800c738 <RCCEx_PLL2_Config+0x12c>)
 800c66c:	4013      	ands	r3, r2
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	6892      	ldr	r2, [r2, #8]
 800c672:	3a01      	subs	r2, #1
 800c674:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	68d2      	ldr	r2, [r2, #12]
 800c67c:	3a01      	subs	r2, #1
 800c67e:	0252      	lsls	r2, r2, #9
 800c680:	b292      	uxth	r2, r2
 800c682:	4311      	orrs	r1, r2
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	6912      	ldr	r2, [r2, #16]
 800c688:	3a01      	subs	r2, #1
 800c68a:	0412      	lsls	r2, r2, #16
 800c68c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c690:	4311      	orrs	r1, r2
 800c692:	687a      	ldr	r2, [r7, #4]
 800c694:	6952      	ldr	r2, [r2, #20]
 800c696:	3a01      	subs	r2, #1
 800c698:	0612      	lsls	r2, r2, #24
 800c69a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c69e:	430a      	orrs	r2, r1
 800c6a0:	4924      	ldr	r1, [pc, #144]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c6a6:	4b23      	ldr	r3, [pc, #140]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6aa:	f023 020c 	bic.w	r2, r3, #12
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	4920      	ldr	r1, [pc, #128]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6b4:	4313      	orrs	r3, r2
 800c6b6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c6b8:	4b1e      	ldr	r3, [pc, #120]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a1b      	ldr	r3, [r3, #32]
 800c6c0:	491c      	ldr	r1, [pc, #112]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c6c6:	4b1b      	ldr	r3, [pc, #108]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ca:	4a1a      	ldr	r2, [pc, #104]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6cc:	f023 0310 	bic.w	r3, r3, #16
 800c6d0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c6d2:	4b18      	ldr	r3, [pc, #96]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	69d2      	ldr	r2, [r2, #28]
 800c6e2:	00d2      	lsls	r2, r2, #3
 800c6e4:	4913      	ldr	r1, [pc, #76]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c6ea:	4b12      	ldr	r3, [pc, #72]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ee:	4a11      	ldr	r2, [pc, #68]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6f0:	f043 0310 	orr.w	r3, r3, #16
 800c6f4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c6f6:	4b0f      	ldr	r3, [pc, #60]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4a0e      	ldr	r2, [pc, #56]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c6fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c700:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c702:	f7fa f927 	bl	8006954 <HAL_GetTick>
 800c706:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c708:	e008      	b.n	800c71c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c70a:	f7fa f923 	bl	8006954 <HAL_GetTick>
 800c70e:	4602      	mov	r2, r0
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	2b02      	cmp	r3, #2
 800c716:	d901      	bls.n	800c71c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c718:	2303      	movs	r3, #3
 800c71a:	e006      	b.n	800c72a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c71c:	4b05      	ldr	r3, [pc, #20]	; (800c734 <RCCEx_PLL2_Config+0x128>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c724:	2b00      	cmp	r3, #0
 800c726:	d0f0      	beq.n	800c70a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c728:	2300      	movs	r3, #0

}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3710      	adds	r7, #16
 800c72e:	46bd      	mov	sp, r7
 800c730:	bd80      	pop	{r7, pc}
 800c732:	bf00      	nop
 800c734:	46020c00 	.word	0x46020c00
 800c738:	80800000 	.word	0x80800000

0800c73c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters N & P & optionally M as well as PLL3 output clock(s)
  * @note   PLL3 is temporary disable to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c744:	4b47      	ldr	r3, [pc, #284]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a46      	ldr	r2, [pc, #280]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c74a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c74e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c750:	f7fa f900 	bl	8006954 <HAL_GetTick>
 800c754:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c756:	e008      	b.n	800c76a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c758:	f7fa f8fc 	bl	8006954 <HAL_GetTick>
 800c75c:	4602      	mov	r2, r0
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	2b02      	cmp	r3, #2
 800c764:	d901      	bls.n	800c76a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c766:	2303      	movs	r3, #3
 800c768:	e077      	b.n	800c85a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c76a:	4b3e      	ldr	r3, [pc, #248]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1f0      	bne.n	800c758 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c776:	4b3b      	ldr	r3, [pc, #236]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c77a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c77e:	f023 0303 	bic.w	r3, r3, #3
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	6811      	ldr	r1, [r2, #0]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6852      	ldr	r2, [r2, #4]
 800c78a:	3a01      	subs	r2, #1
 800c78c:	0212      	lsls	r2, r2, #8
 800c78e:	430a      	orrs	r2, r1
 800c790:	4934      	ldr	r1, [pc, #208]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c792:	4313      	orrs	r3, r2
 800c794:	630b      	str	r3, [r1, #48]	; 0x30
 800c796:	4b33      	ldr	r3, [pc, #204]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c79a:	4b33      	ldr	r3, [pc, #204]	; (800c868 <RCCEx_PLL3_Config+0x12c>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	6892      	ldr	r2, [r2, #8]
 800c7a2:	3a01      	subs	r2, #1
 800c7a4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	68d2      	ldr	r2, [r2, #12]
 800c7ac:	3a01      	subs	r2, #1
 800c7ae:	0252      	lsls	r2, r2, #9
 800c7b0:	b292      	uxth	r2, r2
 800c7b2:	4311      	orrs	r1, r2
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	6912      	ldr	r2, [r2, #16]
 800c7b8:	3a01      	subs	r2, #1
 800c7ba:	0412      	lsls	r2, r2, #16
 800c7bc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c7c0:	4311      	orrs	r1, r2
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	6952      	ldr	r2, [r2, #20]
 800c7c6:	3a01      	subs	r2, #1
 800c7c8:	0612      	lsls	r2, r2, #24
 800c7ca:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c7ce:	430a      	orrs	r2, r1
 800c7d0:	4924      	ldr	r1, [pc, #144]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c7d6:	4b23      	ldr	r3, [pc, #140]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7da:	f023 020c 	bic.w	r2, r3, #12
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	4920      	ldr	r1, [pc, #128]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c7e8:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c7ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a1b      	ldr	r3, [r3, #32]
 800c7f0:	491c      	ldr	r1, [pc, #112]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c7f6:	4b1b      	ldr	r3, [pc, #108]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fa:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c7fc:	f023 0310 	bic.w	r3, r3, #16
 800c800:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c802:	4b18      	ldr	r3, [pc, #96]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c806:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c80a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	69d2      	ldr	r2, [r2, #28]
 800c812:	00d2      	lsls	r2, r2, #3
 800c814:	4913      	ldr	r1, [pc, #76]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c816:	4313      	orrs	r3, r2
 800c818:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c81a:	4b12      	ldr	r3, [pc, #72]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81e:	4a11      	ldr	r2, [pc, #68]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c820:	f043 0310 	orr.w	r3, r3, #16
 800c824:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c826:	4b0f      	ldr	r3, [pc, #60]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a0e      	ldr	r2, [pc, #56]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c82c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c830:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c832:	f7fa f88f 	bl	8006954 <HAL_GetTick>
 800c836:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c838:	e008      	b.n	800c84c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c83a:	f7fa f88b 	bl	8006954 <HAL_GetTick>
 800c83e:	4602      	mov	r2, r0
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	2b02      	cmp	r3, #2
 800c846:	d901      	bls.n	800c84c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c848:	2303      	movs	r3, #3
 800c84a:	e006      	b.n	800c85a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <RCCEx_PLL3_Config+0x128>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c854:	2b00      	cmp	r3, #0
 800c856:	d0f0      	beq.n	800c83a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	46020c00 	.word	0x46020c00
 800c868:	80800000 	.word	0x80800000

0800c86c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d068      	beq.n	800c950 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7f5 fde4 	bl	8002460 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2202      	movs	r2, #2
 800c89c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8a0:	4b2e      	ldr	r3, [pc, #184]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c8a2:	22ca      	movs	r2, #202	; 0xca
 800c8a4:	625a      	str	r2, [r3, #36]	; 0x24
 800c8a6:	4b2d      	ldr	r3, [pc, #180]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c8a8:	2253      	movs	r2, #83	; 0x53
 800c8aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 fa4f 	bl	800cd50 <RTC_EnterInitMode>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c8b6:	7bfb      	ldrb	r3, [r7, #15]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d13f      	bne.n	800c93c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800c8bc:	4b27      	ldr	r3, [pc, #156]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	4a26      	ldr	r2, [pc, #152]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c8c2:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800c8c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8ca:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800c8cc:	4b23      	ldr	r3, [pc, #140]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c8ce:	699a      	ldr	r2, [r3, #24]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6859      	ldr	r1, [r3, #4]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	4319      	orrs	r1, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	699b      	ldr	r3, [r3, #24]
 800c8de:	430b      	orrs	r3, r1
 800c8e0:	491e      	ldr	r1, [pc, #120]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	68da      	ldr	r2, [r3, #12]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	689b      	ldr	r3, [r3, #8]
 800c8ee:	041b      	lsls	r3, r3, #16
 800c8f0:	491a      	ldr	r1, [pc, #104]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800c8f6:	4b19      	ldr	r3, [pc, #100]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c8f8:	68db      	ldr	r3, [r3, #12]
 800c8fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c906:	430b      	orrs	r3, r1
 800c908:	4914      	ldr	r1, [pc, #80]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c90a:	4313      	orrs	r3, r2
 800c90c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f000 fa52 	bl	800cdb8 <RTC_ExitInitMode>
 800c914:	4603      	mov	r3, r0
 800c916:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800c918:	7bfb      	ldrb	r3, [r7, #15]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10e      	bne.n	800c93c <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800c91e:	4b0f      	ldr	r3, [pc, #60]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a19      	ldr	r1, [r3, #32]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	69db      	ldr	r3, [r3, #28]
 800c92e:	4319      	orrs	r1, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	695b      	ldr	r3, [r3, #20]
 800c934:	430b      	orrs	r3, r1
 800c936:	4909      	ldr	r1, [pc, #36]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c938:	4313      	orrs	r3, r2
 800c93a:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c93c:	4b07      	ldr	r3, [pc, #28]	; (800c95c <HAL_RTC_Init+0xf0>)
 800c93e:	22ff      	movs	r2, #255	; 0xff
 800c940:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 800c942:	7bfb      	ldrb	r3, [r7, #15]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d103      	bne.n	800c950 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800c950:	7bfb      	ldrb	r3, [r7, #15]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3710      	adds	r7, #16
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	46007800 	.word	0x46007800

0800c960 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c960:	b590      	push	{r4, r7, lr}
 800c962:	b087      	sub	sp, #28
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c972:	2b01      	cmp	r3, #1
 800c974:	d101      	bne.n	800c97a <HAL_RTC_SetTime+0x1a>
 800c976:	2302      	movs	r3, #2
 800c978:	e088      	b.n	800ca8c <HAL_RTC_SetTime+0x12c>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2201      	movs	r2, #1
 800c97e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2202      	movs	r2, #2
 800c986:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c98a:	4b42      	ldr	r3, [pc, #264]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800c98c:	22ca      	movs	r2, #202	; 0xca
 800c98e:	625a      	str	r2, [r3, #36]	; 0x24
 800c990:	4b40      	ldr	r3, [pc, #256]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800c992:	2253      	movs	r2, #83	; 0x53
 800c994:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f000 f9da 	bl	800cd50 <RTC_EnterInitMode>
 800c99c:	4603      	mov	r3, r0
 800c99e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c9a0:	7cfb      	ldrb	r3, [r7, #19]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d163      	bne.n	800ca6e <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800c9a6:	4b3b      	ldr	r3, [pc, #236]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b2:	d057      	beq.n	800ca64 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d125      	bne.n	800ca06 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c9ba:	4b36      	ldr	r3, [pc, #216]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d102      	bne.n	800c9cc <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 fa2f 	bl	800ce34 <RTC_ByteToBcd2>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	785b      	ldrb	r3, [r3, #1]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f000 fa28 	bl	800ce34 <RTC_ByteToBcd2>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c9e8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	789b      	ldrb	r3, [r3, #2]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f000 fa20 	bl	800ce34 <RTC_ByteToBcd2>
 800c9f4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9f6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	78db      	ldrb	r3, [r3, #3]
 800c9fe:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca00:	4313      	orrs	r3, r2
 800ca02:	617b      	str	r3, [r7, #20]
 800ca04:	e017      	b.n	800ca36 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ca06:	4b23      	ldr	r3, [pc, #140]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800ca08:	699b      	ldr	r3, [r3, #24]
 800ca0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d102      	bne.n	800ca18 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	2200      	movs	r2, #0
 800ca16:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	785b      	ldrb	r3, [r3, #1]
 800ca22:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca24:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ca2a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	78db      	ldrb	r3, [r3, #3]
 800ca30:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ca32:	4313      	orrs	r3, r2
 800ca34:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800ca36:	4a17      	ldr	r2, [pc, #92]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ca3e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ca42:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800ca44:	4b13      	ldr	r3, [pc, #76]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	4a12      	ldr	r2, [pc, #72]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800ca4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca4e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800ca50:	4b10      	ldr	r3, [pc, #64]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800ca52:	699a      	ldr	r2, [r3, #24]
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	68d9      	ldr	r1, [r3, #12]
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	691b      	ldr	r3, [r3, #16]
 800ca5c:	430b      	orrs	r3, r1
 800ca5e:	490d      	ldr	r1, [pc, #52]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800ca60:	4313      	orrs	r3, r2
 800ca62:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f000 f9a7 	bl	800cdb8 <RTC_ExitInitMode>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca6e:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <HAL_RTC_SetTime+0x134>)
 800ca70:	22ff      	movs	r2, #255	; 0xff
 800ca72:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ca74:	7cfb      	ldrb	r3, [r7, #19]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d103      	bne.n	800ca82 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800ca8a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	371c      	adds	r7, #28
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd90      	pop	{r4, r7, pc}
 800ca94:	46007800 	.word	0x46007800

0800ca98 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b086      	sub	sp, #24
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 800caa4:	4b2c      	ldr	r3, [pc, #176]	; (800cb58 <HAL_RTC_GetTime+0xc0>)
 800caa6:	689a      	ldr	r2, [r3, #8]
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800caac:	4b2a      	ldr	r3, [pc, #168]	; (800cb58 <HAL_RTC_GetTime+0xc0>)
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cab8:	d049      	beq.n	800cb4e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800caba:	4b27      	ldr	r3, [pc, #156]	; (800cb58 <HAL_RTC_GetTime+0xc0>)
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800cac6:	4b24      	ldr	r3, [pc, #144]	; (800cb58 <HAL_RTC_GetTime+0xc0>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cace:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cad2:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	0c1b      	lsrs	r3, r3, #16
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	0a1b      	lsrs	r3, r3, #8
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caee:	b2da      	uxtb	r2, r3
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	b2db      	uxtb	r3, r3
 800caf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cafc:	b2da      	uxtb	r2, r3
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	0d9b      	lsrs	r3, r3, #22
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	f003 0301 	and.w	r3, r3, #1
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d11a      	bne.n	800cb4e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 f9a9 	bl	800ce74 <RTC_Bcd2ToByte>
 800cb22:	4603      	mov	r3, r0
 800cb24:	461a      	mov	r2, r3
 800cb26:	68bb      	ldr	r3, [r7, #8]
 800cb28:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	785b      	ldrb	r3, [r3, #1]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 f9a0 	bl	800ce74 <RTC_Bcd2ToByte>
 800cb34:	4603      	mov	r3, r0
 800cb36:	461a      	mov	r2, r3
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	789b      	ldrb	r3, [r3, #2]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 f997 	bl	800ce74 <RTC_Bcd2ToByte>
 800cb46:	4603      	mov	r3, r0
 800cb48:	461a      	mov	r2, r3
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3718      	adds	r7, #24
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	46007800 	.word	0x46007800

0800cb5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cb5c:	b590      	push	{r4, r7, lr}
 800cb5e:	b087      	sub	sp, #28
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb6e:	2b01      	cmp	r3, #1
 800cb70:	d101      	bne.n	800cb76 <HAL_RTC_SetDate+0x1a>
 800cb72:	2302      	movs	r3, #2
 800cb74:	e071      	b.n	800cc5a <HAL_RTC_SetDate+0xfe>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2202      	movs	r2, #2
 800cb82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10e      	bne.n	800cbaa <HAL_RTC_SetDate+0x4e>
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	785b      	ldrb	r3, [r3, #1]
 800cb90:	f003 0310 	and.w	r3, r3, #16
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d008      	beq.n	800cbaa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	785b      	ldrb	r3, [r3, #1]
 800cb9c:	f023 0310 	bic.w	r3, r3, #16
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	330a      	adds	r3, #10
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d11c      	bne.n	800cbea <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	78db      	ldrb	r3, [r3, #3]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f000 f93d 	bl	800ce34 <RTC_ByteToBcd2>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	785b      	ldrb	r3, [r3, #1]
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 f936 	bl	800ce34 <RTC_ByteToBcd2>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cbcc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	789b      	ldrb	r3, [r3, #2]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 f92e 	bl	800ce34 <RTC_ByteToBcd2>
 800cbd8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cbda:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	617b      	str	r3, [r7, #20]
 800cbe8:	e00e      	b.n	800cc08 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	78db      	ldrb	r3, [r3, #3]
 800cbee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	785b      	ldrb	r3, [r3, #1]
 800cbf4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cbf6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800cbf8:	68ba      	ldr	r2, [r7, #8]
 800cbfa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800cbfc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800cc04:	4313      	orrs	r3, r2
 800cc06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc08:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <HAL_RTC_SetDate+0x108>)
 800cc0a:	22ca      	movs	r2, #202	; 0xca
 800cc0c:	625a      	str	r2, [r3, #36]	; 0x24
 800cc0e:	4b15      	ldr	r3, [pc, #84]	; (800cc64 <HAL_RTC_SetDate+0x108>)
 800cc10:	2253      	movs	r2, #83	; 0x53
 800cc12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cc14:	68f8      	ldr	r0, [r7, #12]
 800cc16:	f000 f89b 	bl	800cd50 <RTC_EnterInitMode>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cc1e:	7cfb      	ldrb	r3, [r7, #19]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10b      	bne.n	800cc3c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800cc24:	4a0f      	ldr	r2, [pc, #60]	; (800cc64 <HAL_RTC_SetDate+0x108>)
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f000 f8c0 	bl	800cdb8 <RTC_ExitInitMode>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc3c:	4b09      	ldr	r3, [pc, #36]	; (800cc64 <HAL_RTC_SetDate+0x108>)
 800cc3e:	22ff      	movs	r2, #255	; 0xff
 800cc40:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800cc42:	7cfb      	ldrb	r3, [r7, #19]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d103      	bne.n	800cc50 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800cc58:	7cfb      	ldrb	r3, [r7, #19]
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	371c      	adds	r7, #28
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd90      	pop	{r4, r7, pc}
 800cc62:	bf00      	nop
 800cc64:	46007800 	.word	0x46007800

0800cc68 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800cc74:	4b22      	ldr	r3, [pc, #136]	; (800cd00 <HAL_RTC_GetDate+0x98>)
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc80:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	0c1b      	lsrs	r3, r3, #16
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	0a1b      	lsrs	r3, r3, #8
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	f003 031f 	and.w	r3, r3, #31
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	b2db      	uxtb	r3, r3
 800cca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cca4:	b2da      	uxtb	r2, r3
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	0b5b      	lsrs	r3, r3, #13
 800ccae:	b2db      	uxtb	r3, r3
 800ccb0:	f003 0307 	and.w	r3, r3, #7
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d11a      	bne.n	800ccf6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	78db      	ldrb	r3, [r3, #3]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f000 f8d5 	bl	800ce74 <RTC_Bcd2ToByte>
 800ccca:	4603      	mov	r3, r0
 800cccc:	461a      	mov	r2, r3
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	785b      	ldrb	r3, [r3, #1]
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 f8cc 	bl	800ce74 <RTC_Bcd2ToByte>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	461a      	mov	r2, r3
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	789b      	ldrb	r3, [r3, #2]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f000 f8c3 	bl	800ce74 <RTC_Bcd2ToByte>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3718      	adds	r7, #24
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	46007800 	.word	0x46007800

0800cd04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800cd0c:	4b0f      	ldr	r3, [pc, #60]	; (800cd4c <HAL_RTC_WaitForSynchro+0x48>)
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	4a0e      	ldr	r2, [pc, #56]	; (800cd4c <HAL_RTC_WaitForSynchro+0x48>)
 800cd12:	f023 0320 	bic.w	r3, r3, #32
 800cd16:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800cd18:	f7f9 fe1c 	bl	8006954 <HAL_GetTick>
 800cd1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cd1e:	e009      	b.n	800cd34 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cd20:	f7f9 fe18 	bl	8006954 <HAL_GetTick>
 800cd24:	4602      	mov	r2, r0
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd2e:	d901      	bls.n	800cd34 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800cd30:	2303      	movs	r3, #3
 800cd32:	e006      	b.n	800cd42 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800cd34:	4b05      	ldr	r3, [pc, #20]	; (800cd4c <HAL_RTC_WaitForSynchro+0x48>)
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f003 0320 	and.w	r3, r3, #32
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d0ef      	beq.n	800cd20 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	46007800 	.word	0x46007800

0800cd50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800cd5c:	4b15      	ldr	r3, [pc, #84]	; (800cdb4 <RTC_EnterInitMode+0x64>)
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d120      	bne.n	800cdaa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cd68:	4b12      	ldr	r3, [pc, #72]	; (800cdb4 <RTC_EnterInitMode+0x64>)
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	4a11      	ldr	r2, [pc, #68]	; (800cdb4 <RTC_EnterInitMode+0x64>)
 800cd6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd72:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800cd74:	f7f9 fdee 	bl	8006954 <HAL_GetTick>
 800cd78:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cd7a:	e00d      	b.n	800cd98 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cd7c:	f7f9 fdea 	bl	8006954 <HAL_GetTick>
 800cd80:	4602      	mov	r2, r0
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	1ad3      	subs	r3, r2, r3
 800cd86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd8a:	d905      	bls.n	800cd98 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800cd8c:	2303      	movs	r3, #3
 800cd8e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2203      	movs	r2, #3
 800cd94:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800cd98:	4b06      	ldr	r3, [pc, #24]	; (800cdb4 <RTC_EnterInitMode+0x64>)
 800cd9a:	68db      	ldr	r3, [r3, #12]
 800cd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <RTC_EnterInitMode+0x5a>
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d1e8      	bne.n	800cd7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800cdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	46007800 	.word	0x46007800

0800cdb8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800cdc4:	4b1a      	ldr	r3, [pc, #104]	; (800ce30 <RTC_ExitInitMode+0x78>)
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	4a19      	ldr	r2, [pc, #100]	; (800ce30 <RTC_ExitInitMode+0x78>)
 800cdca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdce:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800cdd0:	4b17      	ldr	r3, [pc, #92]	; (800ce30 <RTC_ExitInitMode+0x78>)
 800cdd2:	699b      	ldr	r3, [r3, #24]
 800cdd4:	f003 0320 	and.w	r3, r3, #32
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d10c      	bne.n	800cdf6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff ff91 	bl	800cd04 <HAL_RTC_WaitForSynchro>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d01e      	beq.n	800ce26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2203      	movs	r2, #3
 800cdec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	73fb      	strb	r3, [r7, #15]
 800cdf4:	e017      	b.n	800ce26 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800cdf6:	4b0e      	ldr	r3, [pc, #56]	; (800ce30 <RTC_ExitInitMode+0x78>)
 800cdf8:	699b      	ldr	r3, [r3, #24]
 800cdfa:	4a0d      	ldr	r2, [pc, #52]	; (800ce30 <RTC_ExitInitMode+0x78>)
 800cdfc:	f023 0320 	bic.w	r3, r3, #32
 800ce00:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7ff ff7e 	bl	800cd04 <HAL_RTC_WaitForSynchro>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d005      	beq.n	800ce1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2203      	movs	r2, #3
 800ce12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800ce16:	2303      	movs	r3, #3
 800ce18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800ce1a:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <RTC_ExitInitMode+0x78>)
 800ce1c:	699b      	ldr	r3, [r3, #24]
 800ce1e:	4a04      	ldr	r2, [pc, #16]	; (800ce30 <RTC_ExitInitMode+0x78>)
 800ce20:	f043 0320 	orr.w	r3, r3, #32
 800ce24:	6193      	str	r3, [r2, #24]
  }
  return status;
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	46007800 	.word	0x46007800

0800ce34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b085      	sub	sp, #20
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800ce46:	e005      	b.n	800ce54 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800ce4e:	7afb      	ldrb	r3, [r7, #11]
 800ce50:	3b0a      	subs	r3, #10
 800ce52:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800ce54:	7afb      	ldrb	r3, [r7, #11]
 800ce56:	2b09      	cmp	r3, #9
 800ce58:	d8f6      	bhi.n	800ce48 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	011b      	lsls	r3, r3, #4
 800ce60:	b2da      	uxtb	r2, r3
 800ce62:	7afb      	ldrb	r3, [r7, #11]
 800ce64:	4313      	orrs	r3, r2
 800ce66:	b2db      	uxtb	r3, r3
}
 800ce68:	4618      	mov	r0, r3
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce72:	4770      	bx	lr

0800ce74 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b085      	sub	sp, #20
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800ce7e:	79fb      	ldrb	r3, [r7, #7]
 800ce80:	091b      	lsrs	r3, r3, #4
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	461a      	mov	r2, r3
 800ce86:	4613      	mov	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	4413      	add	r3, r2
 800ce8c:	005b      	lsls	r3, r3, #1
 800ce8e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	79fb      	ldrb	r3, [r7, #7]
 800ce96:	f003 030f 	and.w	r3, r3, #15
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	4413      	add	r3, r2
 800ce9e:	b2db      	uxtb	r3, r3
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	681a      	ldr	r2, [r3, #0]
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	4910      	ldr	r1, [pc, #64]	; (800cf00 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800cec0:	4313      	orrs	r3, r2
 800cec2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	689a      	ldr	r2, [r3, #8]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	431a      	orrs	r2, r3
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	490c      	ldr	r1, [pc, #48]	; (800cf04 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ced4:	4313      	orrs	r3, r2
 800ced6:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800ced8:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ceda:	6a1b      	ldr	r3, [r3, #32]
 800cedc:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	6919      	ldr	r1, [r3, #16]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	695b      	ldr	r3, [r3, #20]
 800cee8:	041b      	lsls	r3, r3, #16
 800ceea:	430b      	orrs	r3, r1
 800ceec:	4905      	ldr	r1, [pc, #20]	; (800cf04 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800ceee:	4313      	orrs	r3, r2
 800cef0:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800cef2:	2300      	movs	r3, #0
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	46007800 	.word	0x46007800
 800cf04:	46007c00 	.word	0x46007c00

0800cf08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf16:	2301      	movs	r3, #1
 800cf18:	e049      	b.n	800cfae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d106      	bne.n	800cf34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7f5 fd0a 	bl	8002948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2202      	movs	r2, #2
 800cf38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	3304      	adds	r3, #4
 800cf44:	4619      	mov	r1, r3
 800cf46:	4610      	mov	r0, r2
 800cf48:	f000 fbae 	bl	800d6a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2201      	movs	r2, #1
 800cf68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2201      	movs	r2, #1
 800cf78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2201      	movs	r2, #1
 800cf88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2201      	movs	r2, #1
 800cf90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
	...

0800cfb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	2b01      	cmp	r3, #1
 800cfca:	d001      	beq.n	800cfd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e072      	b.n	800d0b6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	68da      	ldr	r2, [r3, #12]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f042 0201 	orr.w	r2, r2, #1
 800cfe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a35      	ldr	r2, [pc, #212]	; (800d0c4 <HAL_TIM_Base_Start_IT+0x10c>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d040      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	4a34      	ldr	r2, [pc, #208]	; (800d0c8 <HAL_TIM_Base_Start_IT+0x110>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d03b      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d004:	d036      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d00e:	d031      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a2d      	ldr	r2, [pc, #180]	; (800d0cc <HAL_TIM_Base_Start_IT+0x114>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d02c      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a2c      	ldr	r2, [pc, #176]	; (800d0d0 <HAL_TIM_Base_Start_IT+0x118>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d027      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a2a      	ldr	r2, [pc, #168]	; (800d0d4 <HAL_TIM_Base_Start_IT+0x11c>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d022      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a29      	ldr	r2, [pc, #164]	; (800d0d8 <HAL_TIM_Base_Start_IT+0x120>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d01d      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a27      	ldr	r2, [pc, #156]	; (800d0dc <HAL_TIM_Base_Start_IT+0x124>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d018      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a26      	ldr	r2, [pc, #152]	; (800d0e0 <HAL_TIM_Base_Start_IT+0x128>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d013      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a24      	ldr	r2, [pc, #144]	; (800d0e4 <HAL_TIM_Base_Start_IT+0x12c>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d00e      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a23      	ldr	r2, [pc, #140]	; (800d0e8 <HAL_TIM_Base_Start_IT+0x130>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d009      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a21      	ldr	r2, [pc, #132]	; (800d0ec <HAL_TIM_Base_Start_IT+0x134>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d004      	beq.n	800d074 <HAL_TIM_Base_Start_IT+0xbc>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a20      	ldr	r2, [pc, #128]	; (800d0f0 <HAL_TIM_Base_Start_IT+0x138>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d115      	bne.n	800d0a0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	689a      	ldr	r2, [r3, #8]
 800d07a:	4b1e      	ldr	r3, [pc, #120]	; (800d0f4 <HAL_TIM_Base_Start_IT+0x13c>)
 800d07c:	4013      	ands	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2b06      	cmp	r3, #6
 800d084:	d015      	beq.n	800d0b2 <HAL_TIM_Base_Start_IT+0xfa>
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d08c:	d011      	beq.n	800d0b2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f042 0201 	orr.w	r2, r2, #1
 800d09c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d09e:	e008      	b.n	800d0b2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	681a      	ldr	r2, [r3, #0]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f042 0201 	orr.w	r2, r2, #1
 800d0ae:	601a      	str	r2, [r3, #0]
 800d0b0:	e000      	b.n	800d0b4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d0b4:	2300      	movs	r3, #0
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3714      	adds	r7, #20
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	40012c00 	.word	0x40012c00
 800d0c8:	50012c00 	.word	0x50012c00
 800d0cc:	40000400 	.word	0x40000400
 800d0d0:	50000400 	.word	0x50000400
 800d0d4:	40000800 	.word	0x40000800
 800d0d8:	50000800 	.word	0x50000800
 800d0dc:	40000c00 	.word	0x40000c00
 800d0e0:	50000c00 	.word	0x50000c00
 800d0e4:	40013400 	.word	0x40013400
 800d0e8:	50013400 	.word	0x50013400
 800d0ec:	40014000 	.word	0x40014000
 800d0f0:	50014000 	.word	0x50014000
 800d0f4:	00010007 	.word	0x00010007

0800d0f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	68da      	ldr	r2, [r3, #12]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f022 0201 	bic.w	r2, r2, #1
 800d10e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	6a1a      	ldr	r2, [r3, #32]
 800d116:	f241 1311 	movw	r3, #4369	; 0x1111
 800d11a:	4013      	ands	r3, r2
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d10f      	bne.n	800d140 <HAL_TIM_Base_Stop_IT+0x48>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6a1a      	ldr	r2, [r3, #32]
 800d126:	f244 4344 	movw	r3, #17476	; 0x4444
 800d12a:	4013      	ands	r3, r2
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d107      	bne.n	800d140 <HAL_TIM_Base_Stop_IT+0x48>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f022 0201 	bic.w	r2, r2, #1
 800d13e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2201      	movs	r2, #1
 800d144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d148:	2300      	movs	r3, #0
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	370c      	adds	r7, #12
 800d14e:	46bd      	mov	sp, r7
 800d150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d154:	4770      	bx	lr

0800d156 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b082      	sub	sp, #8
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	691b      	ldr	r3, [r3, #16]
 800d164:	f003 0302 	and.w	r3, r3, #2
 800d168:	2b02      	cmp	r3, #2
 800d16a:	d122      	bne.n	800d1b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	f003 0302 	and.w	r3, r3, #2
 800d176:	2b02      	cmp	r3, #2
 800d178:	d11b      	bne.n	800d1b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f06f 0202 	mvn.w	r2, #2
 800d182:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2201      	movs	r2, #1
 800d188:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	f003 0303 	and.w	r3, r3, #3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d003      	beq.n	800d1a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 fa67 	bl	800d66c <HAL_TIM_IC_CaptureCallback>
 800d19e:	e005      	b.n	800d1ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 fa59 	bl	800d658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 fa6a 	bl	800d680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	691b      	ldr	r3, [r3, #16]
 800d1b8:	f003 0304 	and.w	r3, r3, #4
 800d1bc:	2b04      	cmp	r3, #4
 800d1be:	d122      	bne.n	800d206 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	f003 0304 	and.w	r3, r3, #4
 800d1ca:	2b04      	cmp	r3, #4
 800d1cc:	d11b      	bne.n	800d206 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f06f 0204 	mvn.w	r2, #4
 800d1d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2202      	movs	r2, #2
 800d1dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d003      	beq.n	800d1f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f000 fa3d 	bl	800d66c <HAL_TIM_IC_CaptureCallback>
 800d1f2:	e005      	b.n	800d200 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fa2f 	bl	800d658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fa40 	bl	800d680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	691b      	ldr	r3, [r3, #16]
 800d20c:	f003 0308 	and.w	r3, r3, #8
 800d210:	2b08      	cmp	r3, #8
 800d212:	d122      	bne.n	800d25a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	f003 0308 	and.w	r3, r3, #8
 800d21e:	2b08      	cmp	r3, #8
 800d220:	d11b      	bne.n	800d25a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f06f 0208 	mvn.w	r2, #8
 800d22a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2204      	movs	r2, #4
 800d230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	69db      	ldr	r3, [r3, #28]
 800d238:	f003 0303 	and.w	r3, r3, #3
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d003      	beq.n	800d248 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fa13 	bl	800d66c <HAL_TIM_IC_CaptureCallback>
 800d246:	e005      	b.n	800d254 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 fa05 	bl	800d658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 fa16 	bl	800d680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	f003 0310 	and.w	r3, r3, #16
 800d264:	2b10      	cmp	r3, #16
 800d266:	d122      	bne.n	800d2ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68db      	ldr	r3, [r3, #12]
 800d26e:	f003 0310 	and.w	r3, r3, #16
 800d272:	2b10      	cmp	r3, #16
 800d274:	d11b      	bne.n	800d2ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f06f 0210 	mvn.w	r2, #16
 800d27e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2208      	movs	r2, #8
 800d284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	69db      	ldr	r3, [r3, #28]
 800d28c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d290:	2b00      	cmp	r3, #0
 800d292:	d003      	beq.n	800d29c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 f9e9 	bl	800d66c <HAL_TIM_IC_CaptureCallback>
 800d29a:	e005      	b.n	800d2a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f9db 	bl	800d658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 f9ec 	bl	800d680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	f003 0301 	and.w	r3, r3, #1
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d10e      	bne.n	800d2da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68db      	ldr	r3, [r3, #12]
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d107      	bne.n	800d2da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f06f 0201 	mvn.w	r2, #1
 800d2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7f3 fe2d 	bl	8000f34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2e4:	2b80      	cmp	r3, #128	; 0x80
 800d2e6:	d10e      	bne.n	800d306 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2f2:	2b80      	cmp	r3, #128	; 0x80
 800d2f4:	d107      	bne.n	800d306 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f000 fc33 	bl	800db6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d314:	d10e      	bne.n	800d334 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d320:	2b80      	cmp	r3, #128	; 0x80
 800d322:	d107      	bne.n	800d334 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d32c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 fc26 	bl	800db80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d33e:	2b40      	cmp	r3, #64	; 0x40
 800d340:	d10e      	bne.n	800d360 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68db      	ldr	r3, [r3, #12]
 800d348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d34c:	2b40      	cmp	r3, #64	; 0x40
 800d34e:	d107      	bne.n	800d360 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f99a 	bl	800d694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	f003 0320 	and.w	r3, r3, #32
 800d36a:	2b20      	cmp	r3, #32
 800d36c:	d10e      	bne.n	800d38c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	68db      	ldr	r3, [r3, #12]
 800d374:	f003 0320 	and.w	r3, r3, #32
 800d378:	2b20      	cmp	r3, #32
 800d37a:	d107      	bne.n	800d38c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f06f 0220 	mvn.w	r2, #32
 800d384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fbe6 	bl	800db58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	691b      	ldr	r3, [r3, #16]
 800d392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d39a:	d10f      	bne.n	800d3bc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3aa:	d107      	bne.n	800d3bc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800d3b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fbec 	bl	800db94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d3c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d3ca:	d10f      	bne.n	800d3ec <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d3d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d3da:	d107      	bne.n	800d3ec <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800d3e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 fbde 	bl	800dba8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	691b      	ldr	r3, [r3, #16]
 800d3f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d3fa:	d10f      	bne.n	800d41c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d40a:	d107      	bne.n	800d41c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800d414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 fbd0 	bl	800dbbc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d42a:	d10f      	bne.n	800d44c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d436:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d43a:	d107      	bne.n	800d44c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800d444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fbc2 	bl	800dbd0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d44c:	bf00      	nop
 800d44e:	3708      	adds	r7, #8
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d45e:	2300      	movs	r3, #0
 800d460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d101      	bne.n	800d470 <HAL_TIM_ConfigClockSource+0x1c>
 800d46c:	2302      	movs	r3, #2
 800d46e:	e0e6      	b.n	800d63e <HAL_TIM_ConfigClockSource+0x1ea>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2202      	movs	r2, #2
 800d47c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689b      	ldr	r3, [r3, #8]
 800d486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800d48e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d49a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	68ba      	ldr	r2, [r7, #8]
 800d4a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a67      	ldr	r2, [pc, #412]	; (800d648 <HAL_TIM_ConfigClockSource+0x1f4>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	f000 80b1 	beq.w	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d4b0:	4a65      	ldr	r2, [pc, #404]	; (800d648 <HAL_TIM_ConfigClockSource+0x1f4>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	f200 80b6 	bhi.w	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d4b8:	4a64      	ldr	r2, [pc, #400]	; (800d64c <HAL_TIM_ConfigClockSource+0x1f8>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	f000 80a9 	beq.w	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d4c0:	4a62      	ldr	r2, [pc, #392]	; (800d64c <HAL_TIM_ConfigClockSource+0x1f8>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	f200 80ae 	bhi.w	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d4c8:	4a61      	ldr	r2, [pc, #388]	; (800d650 <HAL_TIM_ConfigClockSource+0x1fc>)
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	f000 80a1 	beq.w	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d4d0:	4a5f      	ldr	r2, [pc, #380]	; (800d650 <HAL_TIM_ConfigClockSource+0x1fc>)
 800d4d2:	4293      	cmp	r3, r2
 800d4d4:	f200 80a6 	bhi.w	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d4d8:	4a5e      	ldr	r2, [pc, #376]	; (800d654 <HAL_TIM_ConfigClockSource+0x200>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	f000 8099 	beq.w	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d4e0:	4a5c      	ldr	r2, [pc, #368]	; (800d654 <HAL_TIM_ConfigClockSource+0x200>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	f200 809e 	bhi.w	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d4e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d4ec:	f000 8091 	beq.w	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d4f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d4f4:	f200 8096 	bhi.w	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d4f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4fc:	f000 8089 	beq.w	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d504:	f200 808e 	bhi.w	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d50c:	d03e      	beq.n	800d58c <HAL_TIM_ConfigClockSource+0x138>
 800d50e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d512:	f200 8087 	bhi.w	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d51a:	f000 8086 	beq.w	800d62a <HAL_TIM_ConfigClockSource+0x1d6>
 800d51e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d522:	d87f      	bhi.n	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d524:	2b70      	cmp	r3, #112	; 0x70
 800d526:	d01a      	beq.n	800d55e <HAL_TIM_ConfigClockSource+0x10a>
 800d528:	2b70      	cmp	r3, #112	; 0x70
 800d52a:	d87b      	bhi.n	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d52c:	2b60      	cmp	r3, #96	; 0x60
 800d52e:	d050      	beq.n	800d5d2 <HAL_TIM_ConfigClockSource+0x17e>
 800d530:	2b60      	cmp	r3, #96	; 0x60
 800d532:	d877      	bhi.n	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d534:	2b50      	cmp	r3, #80	; 0x50
 800d536:	d03c      	beq.n	800d5b2 <HAL_TIM_ConfigClockSource+0x15e>
 800d538:	2b50      	cmp	r3, #80	; 0x50
 800d53a:	d873      	bhi.n	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d53c:	2b40      	cmp	r3, #64	; 0x40
 800d53e:	d058      	beq.n	800d5f2 <HAL_TIM_ConfigClockSource+0x19e>
 800d540:	2b40      	cmp	r3, #64	; 0x40
 800d542:	d86f      	bhi.n	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d544:	2b30      	cmp	r3, #48	; 0x30
 800d546:	d064      	beq.n	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d548:	2b30      	cmp	r3, #48	; 0x30
 800d54a:	d86b      	bhi.n	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d54c:	2b20      	cmp	r3, #32
 800d54e:	d060      	beq.n	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d550:	2b20      	cmp	r3, #32
 800d552:	d867      	bhi.n	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
 800d554:	2b00      	cmp	r3, #0
 800d556:	d05c      	beq.n	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d558:	2b10      	cmp	r3, #16
 800d55a:	d05a      	beq.n	800d612 <HAL_TIM_ConfigClockSource+0x1be>
 800d55c:	e062      	b.n	800d624 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	6899      	ldr	r1, [r3, #8]
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	685a      	ldr	r2, [r3, #4]
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	f000 fa11 	bl	800d994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68ba      	ldr	r2, [r7, #8]
 800d588:	609a      	str	r2, [r3, #8]
      break;
 800d58a:	e04f      	b.n	800d62c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6818      	ldr	r0, [r3, #0]
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	6899      	ldr	r1, [r3, #8]
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	685a      	ldr	r2, [r3, #4]
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	f000 f9fa 	bl	800d994 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	689a      	ldr	r2, [r3, #8]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d5ae:	609a      	str	r2, [r3, #8]
      break;
 800d5b0:	e03c      	b.n	800d62c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6818      	ldr	r0, [r3, #0]
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	6859      	ldr	r1, [r3, #4]
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	461a      	mov	r2, r3
 800d5c0:	f000 f96c 	bl	800d89c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2150      	movs	r1, #80	; 0x50
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	f000 f9c5 	bl	800d95a <TIM_ITRx_SetConfig>
      break;
 800d5d0:	e02c      	b.n	800d62c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6818      	ldr	r0, [r3, #0]
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	6859      	ldr	r1, [r3, #4]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	f000 f98b 	bl	800d8fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2160      	movs	r1, #96	; 0x60
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 f9b5 	bl	800d95a <TIM_ITRx_SetConfig>
      break;
 800d5f0:	e01c      	b.n	800d62c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6818      	ldr	r0, [r3, #0]
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	6859      	ldr	r1, [r3, #4]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	461a      	mov	r2, r3
 800d600:	f000 f94c 	bl	800d89c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2140      	movs	r1, #64	; 0x40
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 f9a5 	bl	800d95a <TIM_ITRx_SetConfig>
      break;
 800d610:	e00c      	b.n	800d62c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4619      	mov	r1, r3
 800d61c:	4610      	mov	r0, r2
 800d61e:	f000 f99c 	bl	800d95a <TIM_ITRx_SetConfig>
      break;
 800d622:	e003      	b.n	800d62c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	73fb      	strb	r3, [r7, #15]
      break;
 800d628:	e000      	b.n	800d62c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800d62a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	00100070 	.word	0x00100070
 800d64c:	00100040 	.word	0x00100040
 800d650:	00100030 	.word	0x00100030
 800d654:	00100020 	.word	0x00100020

0800d658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d658:	b480      	push	{r7}
 800d65a:	b083      	sub	sp, #12
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d660:	bf00      	nop
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d66c:	b480      	push	{r7}
 800d66e:	b083      	sub	sp, #12
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d674:	bf00      	nop
 800d676:	370c      	adds	r7, #12
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d680:	b480      	push	{r7}
 800d682:	b083      	sub	sp, #12
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d688:	bf00      	nop
 800d68a:	370c      	adds	r7, #12
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr

0800d694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d694:	b480      	push	{r7}
 800d696:	b083      	sub	sp, #12
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d69c:	bf00      	nop
 800d69e:	370c      	adds	r7, #12
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a6:	4770      	bx	lr

0800d6a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b085      	sub	sp, #20
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a68      	ldr	r2, [pc, #416]	; (800d85c <TIM_Base_SetConfig+0x1b4>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d02b      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a67      	ldr	r2, [pc, #412]	; (800d860 <TIM_Base_SetConfig+0x1b8>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d027      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6ce:	d023      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6d6:	d01f      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	4a62      	ldr	r2, [pc, #392]	; (800d864 <TIM_Base_SetConfig+0x1bc>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d01b      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a61      	ldr	r2, [pc, #388]	; (800d868 <TIM_Base_SetConfig+0x1c0>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d017      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a60      	ldr	r2, [pc, #384]	; (800d86c <TIM_Base_SetConfig+0x1c4>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d013      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4a5f      	ldr	r2, [pc, #380]	; (800d870 <TIM_Base_SetConfig+0x1c8>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d00f      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4a5e      	ldr	r2, [pc, #376]	; (800d874 <TIM_Base_SetConfig+0x1cc>)
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d00b      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a5d      	ldr	r2, [pc, #372]	; (800d878 <TIM_Base_SetConfig+0x1d0>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d007      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4a5c      	ldr	r2, [pc, #368]	; (800d87c <TIM_Base_SetConfig+0x1d4>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d003      	beq.n	800d718 <TIM_Base_SetConfig+0x70>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	4a5b      	ldr	r2, [pc, #364]	; (800d880 <TIM_Base_SetConfig+0x1d8>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d108      	bne.n	800d72a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d71e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	4313      	orrs	r3, r2
 800d728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4a4b      	ldr	r2, [pc, #300]	; (800d85c <TIM_Base_SetConfig+0x1b4>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d043      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a4a      	ldr	r2, [pc, #296]	; (800d860 <TIM_Base_SetConfig+0x1b8>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d03f      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d740:	d03b      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d748:	d037      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4a45      	ldr	r2, [pc, #276]	; (800d864 <TIM_Base_SetConfig+0x1bc>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d033      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	4a44      	ldr	r2, [pc, #272]	; (800d868 <TIM_Base_SetConfig+0x1c0>)
 800d756:	4293      	cmp	r3, r2
 800d758:	d02f      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4a43      	ldr	r2, [pc, #268]	; (800d86c <TIM_Base_SetConfig+0x1c4>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d02b      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	4a42      	ldr	r2, [pc, #264]	; (800d870 <TIM_Base_SetConfig+0x1c8>)
 800d766:	4293      	cmp	r3, r2
 800d768:	d027      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4a41      	ldr	r2, [pc, #260]	; (800d874 <TIM_Base_SetConfig+0x1cc>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d023      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4a40      	ldr	r2, [pc, #256]	; (800d878 <TIM_Base_SetConfig+0x1d0>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d01f      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4a3f      	ldr	r2, [pc, #252]	; (800d87c <TIM_Base_SetConfig+0x1d4>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d01b      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4a3e      	ldr	r2, [pc, #248]	; (800d880 <TIM_Base_SetConfig+0x1d8>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d017      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	4a3d      	ldr	r2, [pc, #244]	; (800d884 <TIM_Base_SetConfig+0x1dc>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d013      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	4a3c      	ldr	r2, [pc, #240]	; (800d888 <TIM_Base_SetConfig+0x1e0>)
 800d796:	4293      	cmp	r3, r2
 800d798:	d00f      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	4a3b      	ldr	r2, [pc, #236]	; (800d88c <TIM_Base_SetConfig+0x1e4>)
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d00b      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4a3a      	ldr	r2, [pc, #232]	; (800d890 <TIM_Base_SetConfig+0x1e8>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d007      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	4a39      	ldr	r2, [pc, #228]	; (800d894 <TIM_Base_SetConfig+0x1ec>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d003      	beq.n	800d7ba <TIM_Base_SetConfig+0x112>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	4a38      	ldr	r2, [pc, #224]	; (800d898 <TIM_Base_SetConfig+0x1f0>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d108      	bne.n	800d7cc <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	68db      	ldr	r3, [r3, #12]
 800d7c6:	68fa      	ldr	r2, [r7, #12]
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	695b      	ldr	r3, [r3, #20]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	68fa      	ldr	r2, [r7, #12]
 800d7de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	689a      	ldr	r2, [r3, #8]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	681a      	ldr	r2, [r3, #0]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4a1a      	ldr	r2, [pc, #104]	; (800d85c <TIM_Base_SetConfig+0x1b4>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d023      	beq.n	800d840 <TIM_Base_SetConfig+0x198>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a19      	ldr	r2, [pc, #100]	; (800d860 <TIM_Base_SetConfig+0x1b8>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d01f      	beq.n	800d840 <TIM_Base_SetConfig+0x198>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a1e      	ldr	r2, [pc, #120]	; (800d87c <TIM_Base_SetConfig+0x1d4>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d01b      	beq.n	800d840 <TIM_Base_SetConfig+0x198>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	4a1d      	ldr	r2, [pc, #116]	; (800d880 <TIM_Base_SetConfig+0x1d8>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	d017      	beq.n	800d840 <TIM_Base_SetConfig+0x198>
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	4a1c      	ldr	r2, [pc, #112]	; (800d884 <TIM_Base_SetConfig+0x1dc>)
 800d814:	4293      	cmp	r3, r2
 800d816:	d013      	beq.n	800d840 <TIM_Base_SetConfig+0x198>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	4a1b      	ldr	r2, [pc, #108]	; (800d888 <TIM_Base_SetConfig+0x1e0>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d00f      	beq.n	800d840 <TIM_Base_SetConfig+0x198>
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4a1a      	ldr	r2, [pc, #104]	; (800d88c <TIM_Base_SetConfig+0x1e4>)
 800d824:	4293      	cmp	r3, r2
 800d826:	d00b      	beq.n	800d840 <TIM_Base_SetConfig+0x198>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	4a19      	ldr	r2, [pc, #100]	; (800d890 <TIM_Base_SetConfig+0x1e8>)
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d007      	beq.n	800d840 <TIM_Base_SetConfig+0x198>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	4a18      	ldr	r2, [pc, #96]	; (800d894 <TIM_Base_SetConfig+0x1ec>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d003      	beq.n	800d840 <TIM_Base_SetConfig+0x198>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4a17      	ldr	r2, [pc, #92]	; (800d898 <TIM_Base_SetConfig+0x1f0>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d103      	bne.n	800d848 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	691a      	ldr	r2, [r3, #16]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	615a      	str	r2, [r3, #20]
}
 800d84e:	bf00      	nop
 800d850:	3714      	adds	r7, #20
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr
 800d85a:	bf00      	nop
 800d85c:	40012c00 	.word	0x40012c00
 800d860:	50012c00 	.word	0x50012c00
 800d864:	40000400 	.word	0x40000400
 800d868:	50000400 	.word	0x50000400
 800d86c:	40000800 	.word	0x40000800
 800d870:	50000800 	.word	0x50000800
 800d874:	40000c00 	.word	0x40000c00
 800d878:	50000c00 	.word	0x50000c00
 800d87c:	40013400 	.word	0x40013400
 800d880:	50013400 	.word	0x50013400
 800d884:	40014000 	.word	0x40014000
 800d888:	50014000 	.word	0x50014000
 800d88c:	40014400 	.word	0x40014400
 800d890:	50014400 	.word	0x50014400
 800d894:	40014800 	.word	0x40014800
 800d898:	50014800 	.word	0x50014800

0800d89c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b087      	sub	sp, #28
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6a1b      	ldr	r3, [r3, #32]
 800d8ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6a1b      	ldr	r3, [r3, #32]
 800d8b2:	f023 0201 	bic.w	r2, r3, #1
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	011b      	lsls	r3, r3, #4
 800d8cc:	693a      	ldr	r2, [r7, #16]
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	f023 030a 	bic.w	r3, r3, #10
 800d8d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d8da:	697a      	ldr	r2, [r7, #20]
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	693a      	ldr	r2, [r7, #16]
 800d8e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	621a      	str	r2, [r3, #32]
}
 800d8ee:	bf00      	nop
 800d8f0:	371c      	adds	r7, #28
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr

0800d8fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8fa:	b480      	push	{r7}
 800d8fc:	b087      	sub	sp, #28
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	60f8      	str	r0, [r7, #12]
 800d902:	60b9      	str	r1, [r7, #8]
 800d904:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6a1b      	ldr	r3, [r3, #32]
 800d90a:	f023 0210 	bic.w	r2, r3, #16
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d924:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	031b      	lsls	r3, r3, #12
 800d92a:	697a      	ldr	r2, [r7, #20]
 800d92c:	4313      	orrs	r3, r2
 800d92e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d936:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	011b      	lsls	r3, r3, #4
 800d93c:	693a      	ldr	r2, [r7, #16]
 800d93e:	4313      	orrs	r3, r2
 800d940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	697a      	ldr	r2, [r7, #20]
 800d946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	621a      	str	r2, [r3, #32]
}
 800d94e:	bf00      	nop
 800d950:	371c      	adds	r7, #28
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr

0800d95a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_ITR8: Internal Trigger 8
  *            @arg TIM_TS_ITR11: Internal Trigger 11
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d95a:	b480      	push	{r7}
 800d95c:	b085      	sub	sp, #20
 800d95e:	af00      	add	r7, sp, #0
 800d960:	6078      	str	r0, [r7, #4]
 800d962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800d970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d976:	683a      	ldr	r2, [r7, #0]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	f043 0307 	orr.w	r3, r3, #7
 800d980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	68fa      	ldr	r2, [r7, #12]
 800d986:	609a      	str	r2, [r3, #8]
}
 800d988:	bf00      	nop
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d994:	b480      	push	{r7}
 800d996:	b087      	sub	sp, #28
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
 800d9a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d9ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	021a      	lsls	r2, r3, #8
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	431a      	orrs	r2, r3
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	697a      	ldr	r2, [r7, #20]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	697a      	ldr	r2, [r7, #20]
 800d9c6:	609a      	str	r2, [r3, #8]
}
 800d9c8:	bf00      	nop
 800d9ca:	371c      	adds	r7, #28
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d101      	bne.n	800d9ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	e097      	b.n	800db1c <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2202      	movs	r2, #2
 800d9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a45      	ldr	r2, [pc, #276]	; (800db28 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d00e      	beq.n	800da34 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a44      	ldr	r2, [pc, #272]	; (800db2c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d009      	beq.n	800da34 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a42      	ldr	r2, [pc, #264]	; (800db30 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d004      	beq.n	800da34 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a41      	ldr	r2, [pc, #260]	; (800db34 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d108      	bne.n	800da46 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800da3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	68fa      	ldr	r2, [r7, #12]
 800da42:	4313      	orrs	r3, r2
 800da44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800da4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68fa      	ldr	r2, [r7, #12]
 800da58:	4313      	orrs	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4a2f      	ldr	r2, [pc, #188]	; (800db28 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d040      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	4a2e      	ldr	r2, [pc, #184]	; (800db2c <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d03b      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da80:	d036      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800da8a:	d031      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a29      	ldr	r2, [pc, #164]	; (800db38 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800da92:	4293      	cmp	r3, r2
 800da94:	d02c      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a28      	ldr	r2, [pc, #160]	; (800db3c <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d027      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4a26      	ldr	r2, [pc, #152]	; (800db40 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d022      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	4a25      	ldr	r2, [pc, #148]	; (800db44 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d01d      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a23      	ldr	r2, [pc, #140]	; (800db48 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d018      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a22      	ldr	r2, [pc, #136]	; (800db4c <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	d013      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a18      	ldr	r2, [pc, #96]	; (800db30 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d00e      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a17      	ldr	r2, [pc, #92]	; (800db34 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d009      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	4a1b      	ldr	r2, [pc, #108]	; (800db50 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d004      	beq.n	800daf0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a1a      	ldr	r2, [pc, #104]	; (800db54 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800daec:	4293      	cmp	r3, r2
 800daee:	d10c      	bne.n	800db0a <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daf6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	4313      	orrs	r3, r2
 800db00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	68ba      	ldr	r2, [r7, #8]
 800db08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3714      	adds	r7, #20
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	40012c00 	.word	0x40012c00
 800db2c:	50012c00 	.word	0x50012c00
 800db30:	40013400 	.word	0x40013400
 800db34:	50013400 	.word	0x50013400
 800db38:	40000400 	.word	0x40000400
 800db3c:	50000400 	.word	0x50000400
 800db40:	40000800 	.word	0x40000800
 800db44:	50000800 	.word	0x50000800
 800db48:	40000c00 	.word	0x40000c00
 800db4c:	50000c00 	.word	0x50000c00
 800db50:	40014000 	.word	0x40014000
 800db54:	50014000 	.word	0x50014000

0800db58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db58:	b480      	push	{r7}
 800db5a:	b083      	sub	sp, #12
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db74:	bf00      	nop
 800db76:	370c      	adds	r7, #12
 800db78:	46bd      	mov	sp, r7
 800db7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7e:	4770      	bx	lr

0800db80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800db94:	b480      	push	{r7}
 800db96:	b083      	sub	sp, #12
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800db9c:	bf00      	nop
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800dbb0:	bf00      	nop
 800dbb2:	370c      	adds	r7, #12
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b083      	sub	sp, #12
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800dbc4:	bf00      	nop
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr

0800dbd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800dbd8:	bf00      	nop
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d101      	bne.n	800dbf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e042      	b.n	800dc7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d106      	bne.n	800dc0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7f4 ff11 	bl	8002a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2224      	movs	r2, #36	; 0x24
 800dc12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f022 0201 	bic.w	r2, r2, #1
 800dc24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f94a 	bl	800dec0 <UART_SetConfig>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d101      	bne.n	800dc36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dc32:	2301      	movs	r3, #1
 800dc34:	e022      	b.n	800dc7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d002      	beq.n	800dc44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fac0 	bl	800e1c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	685a      	ldr	r2, [r3, #4]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689a      	ldr	r2, [r3, #8]
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	f042 0201 	orr.w	r2, r2, #1
 800dc72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 fb47 	bl	800e308 <UART_CheckIdleState>
 800dc7a:	4603      	mov	r3, r0
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b08a      	sub	sp, #40	; 0x28
 800dc88:	af02      	add	r7, sp, #8
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	603b      	str	r3, [r7, #0]
 800dc90:	4613      	mov	r3, r2
 800dc92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc9a:	2b20      	cmp	r3, #32
 800dc9c:	f040 8083 	bne.w	800dda6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d002      	beq.n	800dcac <HAL_UART_Transmit+0x28>
 800dca6:	88fb      	ldrh	r3, [r7, #6]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d101      	bne.n	800dcb0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800dcac:	2301      	movs	r3, #1
 800dcae:	e07b      	b.n	800dda8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d101      	bne.n	800dcbe <HAL_UART_Transmit+0x3a>
 800dcba:	2302      	movs	r3, #2
 800dcbc:	e074      	b.n	800dda8 <HAL_UART_Transmit+0x124>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	2221      	movs	r2, #33	; 0x21
 800dcd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dcd6:	f7f8 fe3d 	bl	8006954 <HAL_GetTick>
 800dcda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	88fa      	ldrh	r2, [r7, #6]
 800dce0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	88fa      	ldrh	r2, [r7, #6]
 800dce8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcf4:	d108      	bne.n	800dd08 <HAL_UART_Transmit+0x84>
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	691b      	ldr	r3, [r3, #16]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d104      	bne.n	800dd08 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	61bb      	str	r3, [r7, #24]
 800dd06:	e003      	b.n	800dd10 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800dd18:	e02c      	b.n	800dd74 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	2200      	movs	r2, #0
 800dd22:	2180      	movs	r1, #128	; 0x80
 800dd24:	68f8      	ldr	r0, [r7, #12]
 800dd26:	f000 fb3a 	bl	800e39e <UART_WaitOnFlagUntilTimeout>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d001      	beq.n	800dd34 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800dd30:	2303      	movs	r3, #3
 800dd32:	e039      	b.n	800dda8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d10b      	bne.n	800dd52 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	881b      	ldrh	r3, [r3, #0]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	3302      	adds	r3, #2
 800dd4e:	61bb      	str	r3, [r7, #24]
 800dd50:	e007      	b.n	800dd62 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dd52:	69fb      	ldr	r3, [r7, #28]
 800dd54:	781a      	ldrb	r2, [r3, #0]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800dd7a:	b29b      	uxth	r3, r3
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1cc      	bne.n	800dd1a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	2200      	movs	r2, #0
 800dd88:	2140      	movs	r1, #64	; 0x40
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	f000 fb07 	bl	800e39e <UART_WaitOnFlagUntilTimeout>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800dd96:	2303      	movs	r3, #3
 800dd98:	e006      	b.n	800dda8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	2220      	movs	r2, #32
 800dd9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800dda2:	2300      	movs	r3, #0
 800dda4:	e000      	b.n	800dda8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800dda6:	2302      	movs	r3, #2
  }
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3720      	adds	r7, #32
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b08a      	sub	sp, #40	; 0x28
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddc4:	2b20      	cmp	r3, #32
 800ddc6:	d147      	bne.n	800de58 <HAL_UART_Receive_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d002      	beq.n	800ddd4 <HAL_UART_Receive_DMA+0x24>
 800ddce:	88fb      	ldrh	r3, [r7, #6]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d101      	bne.n	800ddd8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e040      	b.n	800de5a <HAL_UART_Receive_DMA+0xaa>
    }

    __HAL_LOCK(huart);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	d101      	bne.n	800dde6 <HAL_UART_Receive_DMA+0x36>
 800dde2:	2302      	movs	r3, #2
 800dde4:	e039      	b.n	800de5a <HAL_UART_Receive_DMA+0xaa>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2201      	movs	r2, #1
 800ddea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a1a      	ldr	r2, [pc, #104]	; (800de64 <HAL_UART_Receive_DMA+0xb4>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d024      	beq.n	800de48 <HAL_UART_Receive_DMA+0x98>
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4a19      	ldr	r2, [pc, #100]	; (800de68 <HAL_UART_Receive_DMA+0xb8>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d01f      	beq.n	800de48 <HAL_UART_Receive_DMA+0x98>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800de12:	2b00      	cmp	r3, #0
 800de14:	d018      	beq.n	800de48 <HAL_UART_Receive_DMA+0x98>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	e853 3f00 	ldrex	r3, [r3]
 800de22:	613b      	str	r3, [r7, #16]
   return(result);
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800de2a:	627b      	str	r3, [r7, #36]	; 0x24
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	461a      	mov	r2, r3
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	623b      	str	r3, [r7, #32]
 800de36:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de38:	69f9      	ldr	r1, [r7, #28]
 800de3a:	6a3a      	ldr	r2, [r7, #32]
 800de3c:	e841 2300 	strex	r3, r2, [r1]
 800de40:	61bb      	str	r3, [r7, #24]
   return(result);
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1e6      	bne.n	800de16 <HAL_UART_Receive_DMA+0x66>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800de48:	88fb      	ldrh	r3, [r7, #6]
 800de4a:	461a      	mov	r2, r3
 800de4c:	68b9      	ldr	r1, [r7, #8]
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f000 fb6e 	bl	800e530 <UART_Start_Receive_DMA>
 800de54:	4603      	mov	r3, r0
 800de56:	e000      	b.n	800de5a <HAL_UART_Receive_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800de58:	2302      	movs	r3, #2
  }
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3728      	adds	r7, #40	; 0x28
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	46002400 	.word	0x46002400
 800de68:	56002400 	.word	0x56002400

0800de6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b083      	sub	sp, #12
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800de74:	bf00      	nop
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800de88:	bf00      	nop
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800de9c:	bf00      	nop
 800de9e:	370c      	adds	r7, #12
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	460b      	mov	r3, r1
 800deb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800deb4:	bf00      	nop
 800deb6:	370c      	adds	r7, #12
 800deb8:	46bd      	mov	sp, r7
 800deba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800debe:	4770      	bx	lr

0800dec0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dec0:	b5b0      	push	{r4, r5, r7, lr}
 800dec2:	b08a      	sub	sp, #40	; 0x28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dec8:	2300      	movs	r3, #0
 800deca:	77fb      	strb	r3, [r7, #31]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a94      	ldr	r2, [pc, #592]	; (800e124 <UART_SetConfig+0x264>)
 800ded2:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689a      	ldr	r2, [r3, #8]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	431a      	orrs	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	431a      	orrs	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	69db      	ldr	r3, [r3, #28]
 800dee8:	4313      	orrs	r3, r2
 800deea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	4b8d      	ldr	r3, [pc, #564]	; (800e128 <UART_SetConfig+0x268>)
 800def4:	4013      	ands	r3, r2
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	6812      	ldr	r2, [r2, #0]
 800defa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800defc:	430b      	orrs	r3, r1
 800defe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	68da      	ldr	r2, [r3, #12]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	430a      	orrs	r2, r1
 800df14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	699b      	ldr	r3, [r3, #24]
 800df1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a80      	ldr	r2, [pc, #512]	; (800e124 <UART_SetConfig+0x264>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d009      	beq.n	800df3a <UART_SetConfig+0x7a>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4a80      	ldr	r2, [pc, #512]	; (800e12c <UART_SetConfig+0x26c>)
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d004      	beq.n	800df3a <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6a1b      	ldr	r3, [r3, #32]
 800df34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df36:	4313      	orrs	r3, r2
 800df38:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800df44:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	6812      	ldr	r2, [r2, #0]
 800df4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df4e:	430b      	orrs	r3, r1
 800df50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df58:	f023 010f 	bic.w	r1, r3, #15
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	430a      	orrs	r2, r1
 800df66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a70      	ldr	r2, [pc, #448]	; (800e130 <UART_SetConfig+0x270>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d102      	bne.n	800df78 <UART_SetConfig+0xb8>
 800df72:	2301      	movs	r3, #1
 800df74:	623b      	str	r3, [r7, #32]
 800df76:	e029      	b.n	800dfcc <UART_SetConfig+0x10c>
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	4a6d      	ldr	r2, [pc, #436]	; (800e134 <UART_SetConfig+0x274>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d102      	bne.n	800df88 <UART_SetConfig+0xc8>
 800df82:	2302      	movs	r3, #2
 800df84:	623b      	str	r3, [r7, #32]
 800df86:	e021      	b.n	800dfcc <UART_SetConfig+0x10c>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a6a      	ldr	r2, [pc, #424]	; (800e138 <UART_SetConfig+0x278>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d102      	bne.n	800df98 <UART_SetConfig+0xd8>
 800df92:	2304      	movs	r3, #4
 800df94:	623b      	str	r3, [r7, #32]
 800df96:	e019      	b.n	800dfcc <UART_SetConfig+0x10c>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4a67      	ldr	r2, [pc, #412]	; (800e13c <UART_SetConfig+0x27c>)
 800df9e:	4293      	cmp	r3, r2
 800dfa0:	d102      	bne.n	800dfa8 <UART_SetConfig+0xe8>
 800dfa2:	2308      	movs	r3, #8
 800dfa4:	623b      	str	r3, [r7, #32]
 800dfa6:	e011      	b.n	800dfcc <UART_SetConfig+0x10c>
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4a64      	ldr	r2, [pc, #400]	; (800e140 <UART_SetConfig+0x280>)
 800dfae:	4293      	cmp	r3, r2
 800dfb0:	d102      	bne.n	800dfb8 <UART_SetConfig+0xf8>
 800dfb2:	2310      	movs	r3, #16
 800dfb4:	623b      	str	r3, [r7, #32]
 800dfb6:	e009      	b.n	800dfcc <UART_SetConfig+0x10c>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a59      	ldr	r2, [pc, #356]	; (800e124 <UART_SetConfig+0x264>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d102      	bne.n	800dfc8 <UART_SetConfig+0x108>
 800dfc2:	2320      	movs	r3, #32
 800dfc4:	623b      	str	r3, [r7, #32]
 800dfc6:	e001      	b.n	800dfcc <UART_SetConfig+0x10c>
 800dfc8:	2300      	movs	r3, #0
 800dfca:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a54      	ldr	r2, [pc, #336]	; (800e124 <UART_SetConfig+0x264>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d004      	beq.n	800dfe0 <UART_SetConfig+0x120>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a54      	ldr	r2, [pc, #336]	; (800e12c <UART_SetConfig+0x26c>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d163      	bne.n	800e0a8 <UART_SetConfig+0x1e8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800dfe0:	6a38      	ldr	r0, [r7, #32]
 800dfe2:	f7fd fa1f 	bl	800b424 <HAL_RCCEx_GetPeriphCLKFreq>
 800dfe6:	61b8      	str	r0, [r7, #24]

    /* If proper clock source reported */
    if (pclk != 0U)
 800dfe8:	69bb      	ldr	r3, [r7, #24]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	f000 80d4 	beq.w	800e198 <UART_SetConfig+0x2d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff4:	4a53      	ldr	r2, [pc, #332]	; (800e144 <UART_SetConfig+0x284>)
 800dff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dffa:	461a      	mov	r2, r3
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	fbb3 f3f2 	udiv	r3, r3, r2
 800e002:	60fb      	str	r3, [r7, #12]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	685a      	ldr	r2, [r3, #4]
 800e008:	4613      	mov	r3, r2
 800e00a:	005b      	lsls	r3, r3, #1
 800e00c:	4413      	add	r3, r2
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	429a      	cmp	r2, r3
 800e012:	d305      	bcc.n	800e020 <UART_SetConfig+0x160>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	685b      	ldr	r3, [r3, #4]
 800e018:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d902      	bls.n	800e026 <UART_SetConfig+0x166>
      {
        ret = HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	77fb      	strb	r3, [r7, #31]
 800e024:	e03f      	b.n	800e0a6 <UART_SetConfig+0x1e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e026:	69bb      	ldr	r3, [r7, #24]
 800e028:	4618      	mov	r0, r3
 800e02a:	f04f 0100 	mov.w	r1, #0
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e032:	4a44      	ldr	r2, [pc, #272]	; (800e144 <UART_SetConfig+0x284>)
 800e034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e038:	b29a      	uxth	r2, r3
 800e03a:	f04f 0300 	mov.w	r3, #0
 800e03e:	f7f2 fddf 	bl	8000c00 <__aeabi_uldivmod>
 800e042:	4602      	mov	r2, r0
 800e044:	460b      	mov	r3, r1
 800e046:	4610      	mov	r0, r2
 800e048:	4619      	mov	r1, r3
 800e04a:	f04f 0200 	mov.w	r2, #0
 800e04e:	f04f 0300 	mov.w	r3, #0
 800e052:	020b      	lsls	r3, r1, #8
 800e054:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e058:	0202      	lsls	r2, r0, #8
 800e05a:	6879      	ldr	r1, [r7, #4]
 800e05c:	6849      	ldr	r1, [r1, #4]
 800e05e:	0849      	lsrs	r1, r1, #1
 800e060:	4608      	mov	r0, r1
 800e062:	f04f 0100 	mov.w	r1, #0
 800e066:	1814      	adds	r4, r2, r0
 800e068:	eb43 0501 	adc.w	r5, r3, r1
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	461a      	mov	r2, r3
 800e072:	f04f 0300 	mov.w	r3, #0
 800e076:	4620      	mov	r0, r4
 800e078:	4629      	mov	r1, r5
 800e07a:	f7f2 fdc1 	bl	8000c00 <__aeabi_uldivmod>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4613      	mov	r3, r2
 800e084:	617b      	str	r3, [r7, #20]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e08c:	d308      	bcc.n	800e0a0 <UART_SetConfig+0x1e0>
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e094:	d204      	bcs.n	800e0a0 <UART_SetConfig+0x1e0>
        {
          huart->Instance->BRR = usartdiv;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	697a      	ldr	r2, [r7, #20]
 800e09c:	60da      	str	r2, [r3, #12]
 800e09e:	e002      	b.n	800e0a6 <UART_SetConfig+0x1e6>
        }
        else
        {
          ret = HAL_ERROR;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	77fb      	strb	r3, [r7, #31]
    if (pclk != 0U)
 800e0a4:	e078      	b.n	800e198 <UART_SetConfig+0x2d8>
 800e0a6:	e077      	b.n	800e198 <UART_SetConfig+0x2d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	69db      	ldr	r3, [r3, #28]
 800e0ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0b0:	d14a      	bne.n	800e148 <UART_SetConfig+0x288>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e0b2:	6a38      	ldr	r0, [r7, #32]
 800e0b4:	f7fd f9b6 	bl	800b424 <HAL_RCCEx_GetPeriphCLKFreq>
 800e0b8:	61b8      	str	r0, [r7, #24]

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e0ba:	69bb      	ldr	r3, [r7, #24]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d06b      	beq.n	800e198 <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0c4:	4a1f      	ldr	r2, [pc, #124]	; (800e144 <UART_SetConfig+0x284>)
 800e0c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0d2:	005a      	lsls	r2, r3, #1
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	085b      	lsrs	r3, r3, #1
 800e0da:	441a      	add	r2, r3
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	2b0f      	cmp	r3, #15
 800e0ec:	d916      	bls.n	800e11c <UART_SetConfig+0x25c>
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0f4:	d212      	bcs.n	800e11c <UART_SetConfig+0x25c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	f023 030f 	bic.w	r3, r3, #15
 800e0fe:	827b      	strh	r3, [r7, #18]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	085b      	lsrs	r3, r3, #1
 800e104:	b29b      	uxth	r3, r3
 800e106:	f003 0307 	and.w	r3, r3, #7
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	8a7b      	ldrh	r3, [r7, #18]
 800e10e:	4313      	orrs	r3, r2
 800e110:	827b      	strh	r3, [r7, #18]
        huart->Instance->BRR = brrtemp;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	8a7a      	ldrh	r2, [r7, #18]
 800e118:	60da      	str	r2, [r3, #12]
 800e11a:	e03d      	b.n	800e198 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	77fb      	strb	r3, [r7, #31]
 800e120:	e03a      	b.n	800e198 <UART_SetConfig+0x2d8>
 800e122:	bf00      	nop
 800e124:	46002400 	.word	0x46002400
 800e128:	cfff69f3 	.word	0xcfff69f3
 800e12c:	56002400 	.word	0x56002400
 800e130:	40013800 	.word	0x40013800
 800e134:	40004400 	.word	0x40004400
 800e138:	40004800 	.word	0x40004800
 800e13c:	40004c00 	.word	0x40004c00
 800e140:	40005000 	.word	0x40005000
 800e144:	0801b794 	.word	0x0801b794
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800e148:	6a38      	ldr	r0, [r7, #32]
 800e14a:	f7fd f96b 	bl	800b424 <HAL_RCCEx_GetPeriphCLKFreq>
 800e14e:	61b8      	str	r0, [r7, #24]

    if (pclk != 0U)
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d020      	beq.n	800e198 <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15a:	4a19      	ldr	r2, [pc, #100]	; (800e1c0 <UART_SetConfig+0x300>)
 800e15c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e160:	461a      	mov	r2, r3
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	fbb3 f2f2 	udiv	r2, r3, r2
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	085b      	lsrs	r3, r3, #1
 800e16e:	441a      	add	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	fbb2 f3f3 	udiv	r3, r2, r3
 800e178:	b29b      	uxth	r3, r3
 800e17a:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2b0f      	cmp	r3, #15
 800e180:	d908      	bls.n	800e194 <UART_SetConfig+0x2d4>
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e188:	d204      	bcs.n	800e194 <UART_SetConfig+0x2d4>
      {
        huart->Instance->BRR = usartdiv;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	697a      	ldr	r2, [r7, #20]
 800e190:	60da      	str	r2, [r3, #12]
 800e192:	e001      	b.n	800e198 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 800e194:	2301      	movs	r3, #1
 800e196:	77fb      	strb	r3, [r7, #31]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e1b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3728      	adds	r7, #40	; 0x28
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bdb0      	pop	{r4, r5, r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	0801b794 	.word	0x0801b794

0800e1c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b083      	sub	sp, #12
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1d0:	f003 0301 	and.w	r3, r3, #1
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00a      	beq.n	800e1ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	430a      	orrs	r2, r1
 800e1ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1f2:	f003 0302 	and.w	r3, r3, #2
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00a      	beq.n	800e210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	430a      	orrs	r2, r1
 800e20e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e214:	f003 0304 	and.w	r3, r3, #4
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00a      	beq.n	800e232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	685b      	ldr	r3, [r3, #4]
 800e222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	430a      	orrs	r2, r1
 800e230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e236:	f003 0308 	and.w	r3, r3, #8
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00a      	beq.n	800e254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	430a      	orrs	r2, r1
 800e252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e258:	f003 0310 	and.w	r3, r3, #16
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00a      	beq.n	800e276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	430a      	orrs	r2, r1
 800e274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e27a:	f003 0320 	and.w	r3, r3, #32
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00a      	beq.n	800e298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	430a      	orrs	r2, r1
 800e296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d01a      	beq.n	800e2da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	685b      	ldr	r3, [r3, #4]
 800e2aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	430a      	orrs	r2, r1
 800e2b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2c2:	d10a      	bne.n	800e2da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	430a      	orrs	r2, r1
 800e2d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d00a      	beq.n	800e2fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	430a      	orrs	r2, r1
 800e2fa:	605a      	str	r2, [r3, #4]
  }
}
 800e2fc:	bf00      	nop
 800e2fe:	370c      	adds	r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b086      	sub	sp, #24
 800e30c:	af02      	add	r7, sp, #8
 800e30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e318:	f7f8 fb1c 	bl	8006954 <HAL_GetTick>
 800e31c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f003 0308 	and.w	r3, r3, #8
 800e328:	2b08      	cmp	r3, #8
 800e32a:	d10e      	bne.n	800e34a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e32c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e330:	9300      	str	r3, [sp, #0]
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2200      	movs	r2, #0
 800e336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f82f 	bl	800e39e <UART_WaitOnFlagUntilTimeout>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e346:	2303      	movs	r3, #3
 800e348:	e025      	b.n	800e396 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f003 0304 	and.w	r3, r3, #4
 800e354:	2b04      	cmp	r3, #4
 800e356:	d10e      	bne.n	800e376 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e35c:	9300      	str	r3, [sp, #0]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2200      	movs	r2, #0
 800e362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 f819 	bl	800e39e <UART_WaitOnFlagUntilTimeout>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d001      	beq.n	800e376 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e372:	2303      	movs	r3, #3
 800e374:	e00f      	b.n	800e396 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2220      	movs	r2, #32
 800e37a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2220      	movs	r2, #32
 800e382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2200      	movs	r2, #0
 800e38a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2200      	movs	r2, #0
 800e390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3710      	adds	r7, #16
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e39e:	b580      	push	{r7, lr}
 800e3a0:	b09c      	sub	sp, #112	; 0x70
 800e3a2:	af00      	add	r7, sp, #0
 800e3a4:	60f8      	str	r0, [r7, #12]
 800e3a6:	60b9      	str	r1, [r7, #8]
 800e3a8:	603b      	str	r3, [r7, #0]
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3ae:	e0a9      	b.n	800e504 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b6:	f000 80a5 	beq.w	800e504 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3ba:	f7f8 facb 	bl	8006954 <HAL_GetTick>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	1ad3      	subs	r3, r2, r3
 800e3c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d302      	bcc.n	800e3d0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e3ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d140      	bne.n	800e452 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d8:	e853 3f00 	ldrex	r3, [r3]
 800e3dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e3de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e3e4:	667b      	str	r3, [r7, #100]	; 0x64
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e3f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e3f6:	e841 2300 	strex	r3, r2, [r1]
 800e3fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e3fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d1e6      	bne.n	800e3d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	3308      	adds	r3, #8
 800e408:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e40c:	e853 3f00 	ldrex	r3, [r3]
 800e410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e414:	f023 0301 	bic.w	r3, r3, #1
 800e418:	663b      	str	r3, [r7, #96]	; 0x60
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	3308      	adds	r3, #8
 800e420:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e422:	64ba      	str	r2, [r7, #72]	; 0x48
 800e424:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e428:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e42a:	e841 2300 	strex	r3, r2, [r1]
 800e42e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e432:	2b00      	cmp	r3, #0
 800e434:	d1e5      	bne.n	800e402 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2220      	movs	r2, #32
 800e43a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2220      	movs	r2, #32
 800e442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2200      	movs	r2, #0
 800e44a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e44e:	2303      	movs	r3, #3
 800e450:	e069      	b.n	800e526 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 0304 	and.w	r3, r3, #4
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d051      	beq.n	800e504 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e46a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e46e:	d149      	bne.n	800e504 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e478:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e482:	e853 3f00 	ldrex	r3, [r3]
 800e486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e48e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	461a      	mov	r2, r3
 800e496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e498:	637b      	str	r3, [r7, #52]	; 0x34
 800e49a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e49c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4a0:	e841 2300 	strex	r3, r2, [r1]
 800e4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1e6      	bne.n	800e47a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3308      	adds	r3, #8
 800e4b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	e853 3f00 	ldrex	r3, [r3]
 800e4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	f023 0301 	bic.w	r3, r3, #1
 800e4c2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	3308      	adds	r3, #8
 800e4ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4cc:	623a      	str	r2, [r7, #32]
 800e4ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d0:	69f9      	ldr	r1, [r7, #28]
 800e4d2:	6a3a      	ldr	r2, [r7, #32]
 800e4d4:	e841 2300 	strex	r3, r2, [r1]
 800e4d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4da:	69bb      	ldr	r3, [r7, #24]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d1e5      	bne.n	800e4ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2220      	movs	r2, #32
 800e4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2220      	movs	r2, #32
 800e4ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2220      	movs	r2, #32
 800e4f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e500:	2303      	movs	r3, #3
 800e502:	e010      	b.n	800e526 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	69da      	ldr	r2, [r3, #28]
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	4013      	ands	r3, r2
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	429a      	cmp	r2, r3
 800e512:	bf0c      	ite	eq
 800e514:	2301      	moveq	r3, #1
 800e516:	2300      	movne	r3, #0
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	461a      	mov	r2, r3
 800e51c:	79fb      	ldrb	r3, [r7, #7]
 800e51e:	429a      	cmp	r2, r3
 800e520:	f43f af46 	beq.w	800e3b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3770      	adds	r7, #112	; 0x70
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
	...

0800e530 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b098      	sub	sp, #96	; 0x60
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	4613      	mov	r3, r2
 800e53c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800e53e:	88fb      	ldrh	r3, [r7, #6]
 800e540:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	68ba      	ldr	r2, [r7, #8]
 800e548:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	88fa      	ldrh	r2, [r7, #6]
 800e54e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2200      	movs	r2, #0
 800e556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	2222      	movs	r2, #34	; 0x22
 800e55e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e566:	2b00      	cmp	r3, #0
 800e568:	d074      	beq.n	800e654 <UART_Start_Receive_DMA+0x124>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e56e:	4a64      	ldr	r2, [pc, #400]	; (800e700 <UART_Start_Receive_DMA+0x1d0>)
 800e570:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e576:	4a63      	ldr	r2, [pc, #396]	; (800e704 <UART_Start_Receive_DMA+0x1d4>)
 800e578:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e57e:	4a62      	ldr	r2, [pc, #392]	; (800e708 <UART_Start_Receive_DMA+0x1d8>)
 800e580:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e586:	2200      	movs	r2, #0
 800e588:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	689b      	ldr	r3, [r3, #8]
 800e58e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e592:	d107      	bne.n	800e5a4 <UART_Start_Receive_DMA+0x74>
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	691b      	ldr	r3, [r3, #16]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d103      	bne.n	800e5a4 <UART_Start_Receive_DMA+0x74>
    {
      nbByte = Size * 2U;
 800e59c:	88fb      	ldrh	r3, [r7, #6]
 800e59e:	005b      	lsls	r3, r3, #1
 800e5a0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d02e      	beq.n	800e610 <UART_Start_Receive_DMA+0xe0>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d025      	beq.n	800e608 <UART_Start_Receive_DMA+0xd8>
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d01f      	beq.n	800e608 <UART_Start_Receive_DMA+0xd8>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800e5d4:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7f8 fdc4 	bl	8007188 <HAL_DMAEx_List_Start_IT>
 800e600:	4603      	mov	r3, r0
 800e602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e606:	e013      	b.n	800e630 <UART_Start_Receive_DMA+0x100>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 800e608:	2301      	movs	r3, #1
 800e60a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e60e:	e00f      	b.n	800e630 <UART_Start_Receive_DMA+0x100>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	3324      	adds	r3, #36	; 0x24
 800e61a:	4619      	mov	r1, r3
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e620:	461a      	mov	r2, r3
 800e622:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800e626:	f7f8 fbbf 	bl	8006da8 <HAL_DMA_Start_IT>
 800e62a:	4603      	mov	r3, r0
 800e62c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 800e630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00d      	beq.n	800e654 <UART_Start_Receive_DMA+0x124>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2210      	movs	r2, #16
 800e63c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2220      	movs	r2, #32
 800e64c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e650:	2301      	movs	r3, #1
 800e652:	e051      	b.n	800e6f8 <UART_Start_Receive_DMA+0x1c8>
    }
  }
  __HAL_UNLOCK(huart);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2200      	movs	r2, #0
 800e658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e664:	e853 3f00 	ldrex	r3, [r3]
 800e668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e66c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e670:	65bb      	str	r3, [r7, #88]	; 0x58
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	461a      	mov	r2, r3
 800e678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e67a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e67c:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e682:	e841 2300 	strex	r3, r2, [r1]
 800e686:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d1e6      	bne.n	800e65c <UART_Start_Receive_DMA+0x12c>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	3308      	adds	r3, #8
 800e694:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	e853 3f00 	ldrex	r3, [r3]
 800e69c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6a0:	f043 0301 	orr.w	r3, r3, #1
 800e6a4:	657b      	str	r3, [r7, #84]	; 0x54
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	3308      	adds	r3, #8
 800e6ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6ae:	63ba      	str	r2, [r7, #56]	; 0x38
 800e6b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6b6:	e841 2300 	strex	r3, r2, [r1]
 800e6ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1e5      	bne.n	800e68e <UART_Start_Receive_DMA+0x15e>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	3308      	adds	r3, #8
 800e6c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	e853 3f00 	ldrex	r3, [r3]
 800e6d0:	617b      	str	r3, [r7, #20]
   return(result);
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6d8:	653b      	str	r3, [r7, #80]	; 0x50
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	3308      	adds	r3, #8
 800e6e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6e2:	627a      	str	r2, [r7, #36]	; 0x24
 800e6e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6e6:	6a39      	ldr	r1, [r7, #32]
 800e6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ea:	e841 2300 	strex	r3, r2, [r1]
 800e6ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6f0:	69fb      	ldr	r3, [r7, #28]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d1e5      	bne.n	800e6c2 <UART_Start_Receive_DMA+0x192>

  return HAL_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3760      	adds	r7, #96	; 0x60
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	0800e85b 	.word	0x0800e85b
 800e704:	0800e97b 	.word	0x0800e97b
 800e708:	0800e9b3 	.word	0x0800e9b3

0800e70c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b08f      	sub	sp, #60	; 0x3c
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e71a:	6a3b      	ldr	r3, [r7, #32]
 800e71c:	e853 3f00 	ldrex	r3, [r3]
 800e720:	61fb      	str	r3, [r7, #28]
   return(result);
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e728:	637b      	str	r3, [r7, #52]	; 0x34
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	461a      	mov	r2, r3
 800e730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e732:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e734:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e736:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e73a:	e841 2300 	strex	r3, r2, [r1]
 800e73e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e742:	2b00      	cmp	r3, #0
 800e744:	d1e6      	bne.n	800e714 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	3308      	adds	r3, #8
 800e74c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	e853 3f00 	ldrex	r3, [r3]
 800e754:	60bb      	str	r3, [r7, #8]
   return(result);
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e75c:	633b      	str	r3, [r7, #48]	; 0x30
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	3308      	adds	r3, #8
 800e764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e766:	61ba      	str	r2, [r7, #24]
 800e768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e76a:	6979      	ldr	r1, [r7, #20]
 800e76c:	69ba      	ldr	r2, [r7, #24]
 800e76e:	e841 2300 	strex	r3, r2, [r1]
 800e772:	613b      	str	r3, [r7, #16]
   return(result);
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d1e5      	bne.n	800e746 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2220      	movs	r2, #32
 800e77e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e782:	bf00      	nop
 800e784:	373c      	adds	r7, #60	; 0x3c
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e78e:	b480      	push	{r7}
 800e790:	b095      	sub	sp, #84	; 0x54
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e79e:	e853 3f00 	ldrex	r3, [r3]
 800e7a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7b4:	643b      	str	r3, [r7, #64]	; 0x40
 800e7b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e7ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e7bc:	e841 2300 	strex	r3, r2, [r1]
 800e7c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d1e6      	bne.n	800e796 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	3308      	adds	r3, #8
 800e7ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d0:	6a3b      	ldr	r3, [r7, #32]
 800e7d2:	e853 3f00 	ldrex	r3, [r3]
 800e7d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e7de:	f023 0301 	bic.w	r3, r3, #1
 800e7e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	3308      	adds	r3, #8
 800e7ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e7ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7f4:	e841 2300 	strex	r3, r2, [r1]
 800e7f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d1e3      	bne.n	800e7c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e804:	2b01      	cmp	r3, #1
 800e806:	d118      	bne.n	800e83a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	e853 3f00 	ldrex	r3, [r3]
 800e814:	60bb      	str	r3, [r7, #8]
   return(result);
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	f023 0310 	bic.w	r3, r3, #16
 800e81c:	647b      	str	r3, [r7, #68]	; 0x44
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	461a      	mov	r2, r3
 800e824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e826:	61bb      	str	r3, [r7, #24]
 800e828:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82a:	6979      	ldr	r1, [r7, #20]
 800e82c:	69ba      	ldr	r2, [r7, #24]
 800e82e:	e841 2300 	strex	r3, r2, [r1]
 800e832:	613b      	str	r3, [r7, #16]
   return(result);
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1e6      	bne.n	800e808 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2220      	movs	r2, #32
 800e83e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2200      	movs	r2, #0
 800e84c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e84e:	bf00      	nop
 800e850:	3754      	adds	r7, #84	; 0x54
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e85a:	b580      	push	{r7, lr}
 800e85c:	b09c      	sub	sp, #112	; 0x70
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e866:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e86c:	2b81      	cmp	r3, #129	; 0x81
 800e86e:	d071      	beq.n	800e954 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800e870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e872:	2200      	movs	r2, #0
 800e874:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e880:	e853 3f00 	ldrex	r3, [r3]
 800e884:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e88c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e896:	65bb      	str	r3, [r7, #88]	; 0x58
 800e898:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e89c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e89e:	e841 2300 	strex	r3, r2, [r1]
 800e8a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e6      	bne.n	800e878 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	3308      	adds	r3, #8
 800e8b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8b4:	e853 3f00 	ldrex	r3, [r3]
 800e8b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e8ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8bc:	f023 0301 	bic.w	r3, r3, #1
 800e8c0:	667b      	str	r3, [r7, #100]	; 0x64
 800e8c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3308      	adds	r3, #8
 800e8c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e8ca:	647a      	str	r2, [r7, #68]	; 0x44
 800e8cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e8d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8d2:	e841 2300 	strex	r3, r2, [r1]
 800e8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e8d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1e5      	bne.n	800e8aa <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	3308      	adds	r3, #8
 800e8e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	e853 3f00 	ldrex	r3, [r3]
 800e8ec:	623b      	str	r3, [r7, #32]
   return(result);
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8f4:	663b      	str	r3, [r7, #96]	; 0x60
 800e8f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	3308      	adds	r3, #8
 800e8fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e8fe:	633a      	str	r2, [r7, #48]	; 0x30
 800e900:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e906:	e841 2300 	strex	r3, r2, [r1]
 800e90a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d1e5      	bne.n	800e8de <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e914:	2220      	movs	r2, #32
 800e916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e91a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e91e:	2b01      	cmp	r3, #1
 800e920:	d118      	bne.n	800e954 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	e853 3f00 	ldrex	r3, [r3]
 800e92e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f023 0310 	bic.w	r3, r3, #16
 800e936:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	461a      	mov	r2, r3
 800e93e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e940:	61fb      	str	r3, [r7, #28]
 800e942:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e944:	69b9      	ldr	r1, [r7, #24]
 800e946:	69fa      	ldr	r2, [r7, #28]
 800e948:	e841 2300 	strex	r3, r2, [r1]
 800e94c:	617b      	str	r3, [r7, #20]
   return(result);
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d1e6      	bne.n	800e922 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d107      	bne.n	800e96c <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e95c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e95e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e962:	4619      	mov	r1, r3
 800e964:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e966:	f7ff fa9f 	bl	800dea8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e96a:	e002      	b.n	800e972 <UART_DMAReceiveCplt+0x118>
    HAL_UART_RxCpltCallback(huart);
 800e96c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e96e:	f7ff fa7d 	bl	800de6c <HAL_UART_RxCpltCallback>
}
 800e972:	bf00      	nop
 800e974:	3770      	adds	r7, #112	; 0x70
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b084      	sub	sp, #16
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e986:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d109      	bne.n	800e9a4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e996:	085b      	lsrs	r3, r3, #1
 800e998:	b29b      	uxth	r3, r3
 800e99a:	4619      	mov	r1, r3
 800e99c:	68f8      	ldr	r0, [r7, #12]
 800e99e:	f7ff fa83 	bl	800dea8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9a2:	e002      	b.n	800e9aa <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f7ff fa6b 	bl	800de80 <HAL_UART_RxHalfCpltCallback>
}
 800e9aa:	bf00      	nop
 800e9ac:	3710      	adds	r7, #16
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b086      	sub	sp, #24
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9be:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9c6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e9c8:	697b      	ldr	r3, [r7, #20]
 800e9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9ce:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9da:	2b80      	cmp	r3, #128	; 0x80
 800e9dc:	d109      	bne.n	800e9f2 <UART_DMAError+0x40>
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	2b21      	cmp	r3, #33	; 0x21
 800e9e2:	d106      	bne.n	800e9f2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e9ec:	6978      	ldr	r0, [r7, #20]
 800e9ee:	f7ff fe8d 	bl	800e70c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	689b      	ldr	r3, [r3, #8]
 800e9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9fc:	2b40      	cmp	r3, #64	; 0x40
 800e9fe:	d109      	bne.n	800ea14 <UART_DMAError+0x62>
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2b22      	cmp	r3, #34	; 0x22
 800ea04:	d106      	bne.n	800ea14 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ea0e:	6978      	ldr	r0, [r7, #20]
 800ea10:	f7ff febd 	bl	800e78e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea1a:	f043 0210 	orr.w	r2, r3, #16
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea24:	6978      	ldr	r0, [r7, #20]
 800ea26:	f7ff fa35 	bl	800de94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea2a:	bf00      	nop
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ea32:	b480      	push	{r7}
 800ea34:	b085      	sub	sp, #20
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d101      	bne.n	800ea48 <HAL_UARTEx_DisableFifoMode+0x16>
 800ea44:	2302      	movs	r3, #2
 800ea46:	e027      	b.n	800ea98 <HAL_UARTEx_DisableFifoMode+0x66>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2224      	movs	r2, #36	; 0x24
 800ea54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f022 0201 	bic.w	r2, r2, #1
 800ea6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ea76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2220      	movs	r2, #32
 800ea8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2200      	movs	r2, #0
 800ea92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ea96:	2300      	movs	r3, #0
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3714      	adds	r7, #20
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d101      	bne.n	800eabc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eab8:	2302      	movs	r3, #2
 800eaba:	e02d      	b.n	800eb18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2201      	movs	r2, #1
 800eac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2224      	movs	r2, #36	; 0x24
 800eac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	f022 0201 	bic.w	r2, r2, #1
 800eae2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	683a      	ldr	r2, [r7, #0]
 800eaf4:	430a      	orrs	r2, r1
 800eaf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 f84f 	bl	800eb9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	68fa      	ldr	r2, [r7, #12]
 800eb04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2220      	movs	r2, #32
 800eb0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d101      	bne.n	800eb38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eb34:	2302      	movs	r3, #2
 800eb36:	e02d      	b.n	800eb94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2224      	movs	r2, #36	; 0x24
 800eb44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f022 0201 	bic.w	r2, r2, #1
 800eb5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	430a      	orrs	r2, r1
 800eb72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 f811 	bl	800eb9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2220      	movs	r2, #32
 800eb86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb92:	2300      	movs	r3, #0
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3710      	adds	r7, #16
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b085      	sub	sp, #20
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d108      	bne.n	800ebbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ebbc:	e031      	b.n	800ec22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ebbe:	2308      	movs	r3, #8
 800ebc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ebc2:	2308      	movs	r3, #8
 800ebc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	0e5b      	lsrs	r3, r3, #25
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	f003 0307 	and.w	r3, r3, #7
 800ebd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	689b      	ldr	r3, [r3, #8]
 800ebdc:	0f5b      	lsrs	r3, r3, #29
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	f003 0307 	and.w	r3, r3, #7
 800ebe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebe6:	7bbb      	ldrb	r3, [r7, #14]
 800ebe8:	7b3a      	ldrb	r2, [r7, #12]
 800ebea:	4911      	ldr	r1, [pc, #68]	; (800ec30 <UARTEx_SetNbDataToProcess+0x94>)
 800ebec:	5c8a      	ldrb	r2, [r1, r2]
 800ebee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ebf2:	7b3a      	ldrb	r2, [r7, #12]
 800ebf4:	490f      	ldr	r1, [pc, #60]	; (800ec34 <UARTEx_SetNbDataToProcess+0x98>)
 800ebf6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebfc:	b29a      	uxth	r2, r3
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec04:	7bfb      	ldrb	r3, [r7, #15]
 800ec06:	7b7a      	ldrb	r2, [r7, #13]
 800ec08:	4909      	ldr	r1, [pc, #36]	; (800ec30 <UARTEx_SetNbDataToProcess+0x94>)
 800ec0a:	5c8a      	ldrb	r2, [r1, r2]
 800ec0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec10:	7b7a      	ldrb	r2, [r7, #13]
 800ec12:	4908      	ldr	r1, [pc, #32]	; (800ec34 <UARTEx_SetNbDataToProcess+0x98>)
 800ec14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec16:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ec22:	bf00      	nop
 800ec24:	3714      	adds	r7, #20
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop
 800ec30:	0801b7ac 	.word	0x0801b7ac
 800ec34:	0801b7b4 	.word	0x0801b7b4

0800ec38 <DataHist_parameters>:
 800ec38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ec3e:	f04f 0e00 	mov.w	lr, #0
 800ec42:	e9dd c607 	ldrd	ip, r6, [sp, #28]
 800ec46:	7020      	strb	r0, [r4, #0]
 800ec48:	6808      	ldr	r0, [r1, #0]
 800ec4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ec4c:	6060      	str	r0, [r4, #4]
 800ec4e:	6848      	ldr	r0, [r1, #4]
 800ec50:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800ec54:	60a0      	str	r0, [r4, #8]
 800ec56:	6888      	ldr	r0, [r1, #8]
 800ec58:	f102 0780 	add.w	r7, r2, #128	; 0x80
 800ec5c:	60e0      	str	r0, [r4, #12]
 800ec5e:	68c8      	ldr	r0, [r1, #12]
 800ec60:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800ec64:	6120      	str	r0, [r4, #16]
 800ec66:	6908      	ldr	r0, [r1, #16]
 800ec68:	6160      	str	r0, [r4, #20]
 800ec6a:	6948      	ldr	r0, [r1, #20]
 800ec6c:	61a0      	str	r0, [r4, #24]
 800ec6e:	6988      	ldr	r0, [r1, #24]
 800ec70:	61e0      	str	r0, [r4, #28]
 800ec72:	69c8      	ldr	r0, [r1, #28]
 800ec74:	6220      	str	r0, [r4, #32]
 800ec76:	6a09      	ldr	r1, [r1, #32]
 800ec78:	6261      	str	r1, [r4, #36]	; 0x24
 800ec7a:	8811      	ldrh	r1, [r2, #0]
 800ec7c:	8521      	strh	r1, [r4, #40]	; 0x28
 800ec7e:	4641      	mov	r1, r8
 800ec80:	f1a7 0278 	sub.w	r2, r7, #120	; 0x78
 800ec84:	f852 0b04 	ldr.w	r0, [r2], #4
 800ec88:	42ba      	cmp	r2, r7
 800ec8a:	f841 0b04 	str.w	r0, [r1], #4
 800ec8e:	d1f9      	bne.n	800ec84 <DataHist_parameters+0x4c>
 800ec90:	f10e 0e1e 	add.w	lr, lr, #30
 800ec94:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800ec98:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800ec9c:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800eca0:	d1ed      	bne.n	800ec7e <DataHist_parameters+0x46>
 800eca2:	2000      	movs	r0, #0
 800eca4:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800eca8:	881a      	ldrh	r2, [r3, #0]
 800ecaa:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800ecae:	f103 0780 	add.w	r7, r3, #128	; 0x80
 800ecb2:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800ecb6:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800ecba:	4672      	mov	r2, lr
 800ecbc:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800ecc0:	f853 1b04 	ldr.w	r1, [r3], #4
 800ecc4:	42bb      	cmp	r3, r7
 800ecc6:	f842 1b04 	str.w	r1, [r2], #4
 800ecca:	d1f9      	bne.n	800ecc0 <DataHist_parameters+0x88>
 800eccc:	301e      	adds	r0, #30
 800ecce:	285a      	cmp	r0, #90	; 0x5a
 800ecd0:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800ecd4:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800ecd8:	d1ef      	bne.n	800ecba <DataHist_parameters+0x82>
 800ecda:	2700      	movs	r7, #0
 800ecdc:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800ece0:	f8bc 3000 	ldrh.w	r3, [ip]
 800ece4:	f8dc e004 	ldr.w	lr, [ip, #4]
 800ece8:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 800ecec:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800ecf0:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800ecf4:	4662      	mov	r2, ip
 800ecf6:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800ecfa:	f853 1b04 	ldr.w	r1, [r3], #4
 800ecfe:	4283      	cmp	r3, r0
 800ed00:	f842 1b04 	str.w	r1, [r2], #4
 800ed04:	d1f9      	bne.n	800ecfa <DataHist_parameters+0xc2>
 800ed06:	371e      	adds	r7, #30
 800ed08:	2f5a      	cmp	r7, #90	; 0x5a
 800ed0a:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800ed0e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800ed12:	d1ef      	bne.n	800ecf4 <DataHist_parameters+0xbc>
 800ed14:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800ed18:	8833      	ldrh	r3, [r6, #0]
 800ed1a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800ed1e:	f106 0080 	add.w	r0, r6, #128	; 0x80
 800ed22:	2600      	movs	r6, #0
 800ed24:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800ed28:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800ed2c:	463a      	mov	r2, r7
 800ed2e:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800ed32:	f853 1b04 	ldr.w	r1, [r3], #4
 800ed36:	4298      	cmp	r0, r3
 800ed38:	f842 1b04 	str.w	r1, [r2], #4
 800ed3c:	d1f9      	bne.n	800ed32 <DataHist_parameters+0xfa>
 800ed3e:	361e      	adds	r6, #30
 800ed40:	2e5a      	cmp	r6, #90	; 0x5a
 800ed42:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800ed46:	f100 0078 	add.w	r0, r0, #120	; 0x78
 800ed4a:	d1ef      	bne.n	800ed2c <DataHist_parameters+0xf4>
 800ed4c:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800ed50:	f8c3 c004 	str.w	ip, [r3, #4]
 800ed54:	69aa      	ldr	r2, [r5, #24]
 800ed56:	7829      	ldrb	r1, [r5, #0]
 800ed58:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800ed5c:	f884 15e8 	strb.w	r1, [r4, #1512]	; 0x5e8
 800ed60:	619a      	str	r2, [r3, #24]
 800ed62:	686a      	ldr	r2, [r5, #4]
 800ed64:	605a      	str	r2, [r3, #4]
 800ed66:	68a9      	ldr	r1, [r5, #8]
 800ed68:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800ed6c:	6011      	str	r1, [r2, #0]
 800ed6e:	68e9      	ldr	r1, [r5, #12]
 800ed70:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800ed74:	6011      	str	r1, [r2, #0]
 800ed76:	6929      	ldr	r1, [r5, #16]
 800ed78:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800ed7c:	6011      	str	r1, [r2, #0]
 800ed7e:	6969      	ldr	r1, [r5, #20]
 800ed80:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800ed84:	6011      	str	r1, [r2, #0]
 800ed86:	69ea      	ldr	r2, [r5, #28]
 800ed88:	61da      	str	r2, [r3, #28]
 800ed8a:	6a2a      	ldr	r2, [r5, #32]
 800ed8c:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ed94:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800ed98:	601a      	str	r2, [r3, #0]
 800ed9a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ed9c:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800eda0:	601a      	str	r2, [r3, #0]
 800eda2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800eda4:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800eda8:	6023      	str	r3, [r4, #0]
 800edaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edae:	bf00      	nop

0800edb0 <rotVect>:
 800edb0:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800edb4:	ed92 7a01 	vldr	s14, [r2, #4]
 800edb8:	ee07 3a90 	vmov	s15, r3
 800edbc:	f991 3000 	ldrsb.w	r3, [r1]
 800edc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800edc4:	ee06 3a90 	vmov	s13, r3
 800edc8:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800edcc:	ed92 6a00 	vldr	s12, [r2]
 800edd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800edd8:	ee07 3a10 	vmov	s14, r3
 800eddc:	eee6 7a86 	vfma.f32	s15, s13, s12
 800ede0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ede4:	edd2 6a02 	vldr	s13, [r2, #8]
 800ede8:	eee7 7a26 	vfma.f32	s15, s14, s13
 800edec:	edc0 7a00 	vstr	s15, [r0]
 800edf0:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800edf4:	ed92 7a01 	vldr	s14, [r2, #4]
 800edf8:	ee07 3a90 	vmov	s15, r3
 800edfc:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800ee00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee04:	ee06 3a90 	vmov	s13, r3
 800ee08:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800ee0c:	ed92 6a00 	vldr	s12, [r2]
 800ee10:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee14:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ee18:	ee07 3a10 	vmov	s14, r3
 800ee1c:	eee6 7a86 	vfma.f32	s15, s13, s12
 800ee20:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ee24:	edd2 6a02 	vldr	s13, [r2, #8]
 800ee28:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ee2c:	edc0 7a01 	vstr	s15, [r0, #4]
 800ee30:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800ee34:	ed92 7a01 	vldr	s14, [r2, #4]
 800ee38:	ee07 3a90 	vmov	s15, r3
 800ee3c:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800ee40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee44:	ee06 3a90 	vmov	s13, r3
 800ee48:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800ee4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee50:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ee54:	ed92 6a00 	vldr	s12, [r2]
 800ee58:	ee07 3a10 	vmov	s14, r3
 800ee5c:	eee6 7a86 	vfma.f32	s15, s13, s12
 800ee60:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ee64:	edd2 6a02 	vldr	s13, [r2, #8]
 800ee68:	eee7 7a26 	vfma.f32	s15, s14, s13
 800ee6c:	edc0 7a02 	vstr	s15, [r0, #8]
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop

0800ee74 <findAxis>:
 800ee74:	f990 3000 	ldrsb.w	r3, [r0]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d027      	beq.n	800eecc <findAxis+0x58>
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	d00e      	beq.n	800ee9e <findAxis+0x2a>
 800ee80:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800ee84:	2b01      	cmp	r3, #1
 800ee86:	d053      	beq.n	800ef30 <findAxis+0xbc>
 800ee88:	3301      	adds	r3, #1
 800ee8a:	d048      	beq.n	800ef1e <findAxis+0xaa>
 800ee8c:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800ee90:	2b01      	cmp	r3, #1
 800ee92:	d053      	beq.n	800ef3c <findAxis+0xc8>
 800ee94:	3301      	adds	r3, #1
 800ee96:	d104      	bne.n	800eea2 <findAxis+0x2e>
 800ee98:	2364      	movs	r3, #100	; 0x64
 800ee9a:	700b      	strb	r3, [r1, #0]
 800ee9c:	e001      	b.n	800eea2 <findAxis+0x2e>
 800ee9e:	2377      	movs	r3, #119	; 0x77
 800eea0:	700b      	strb	r3, [r1, #0]
 800eea2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d016      	beq.n	800eed8 <findAxis+0x64>
 800eeaa:	3301      	adds	r3, #1
 800eeac:	d02e      	beq.n	800ef0c <findAxis+0x98>
 800eeae:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d039      	beq.n	800ef2a <findAxis+0xb6>
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	d034      	beq.n	800ef24 <findAxis+0xb0>
 800eeba:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800eebe:	2b01      	cmp	r3, #1
 800eec0:	d03f      	beq.n	800ef42 <findAxis+0xce>
 800eec2:	3301      	adds	r3, #1
 800eec4:	d10a      	bne.n	800eedc <findAxis+0x68>
 800eec6:	2364      	movs	r3, #100	; 0x64
 800eec8:	704b      	strb	r3, [r1, #1]
 800eeca:	e007      	b.n	800eedc <findAxis+0x68>
 800eecc:	2365      	movs	r3, #101	; 0x65
 800eece:	700b      	strb	r3, [r1, #0]
 800eed0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d1e8      	bne.n	800eeaa <findAxis+0x36>
 800eed8:	2365      	movs	r3, #101	; 0x65
 800eeda:	704b      	strb	r3, [r1, #1]
 800eedc:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d010      	beq.n	800ef06 <findAxis+0x92>
 800eee4:	3301      	adds	r3, #1
 800eee6:	d014      	beq.n	800ef12 <findAxis+0x9e>
 800eee8:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800eeec:	2b01      	cmp	r3, #1
 800eeee:	d022      	beq.n	800ef36 <findAxis+0xc2>
 800eef0:	3301      	adds	r3, #1
 800eef2:	d011      	beq.n	800ef18 <findAxis+0xa4>
 800eef4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d025      	beq.n	800ef48 <findAxis+0xd4>
 800eefc:	3301      	adds	r3, #1
 800eefe:	bf04      	itt	eq
 800ef00:	2364      	moveq	r3, #100	; 0x64
 800ef02:	708b      	strbeq	r3, [r1, #2]
 800ef04:	4770      	bx	lr
 800ef06:	2365      	movs	r3, #101	; 0x65
 800ef08:	708b      	strb	r3, [r1, #2]
 800ef0a:	4770      	bx	lr
 800ef0c:	2377      	movs	r3, #119	; 0x77
 800ef0e:	704b      	strb	r3, [r1, #1]
 800ef10:	e7e4      	b.n	800eedc <findAxis+0x68>
 800ef12:	2377      	movs	r3, #119	; 0x77
 800ef14:	708b      	strb	r3, [r1, #2]
 800ef16:	4770      	bx	lr
 800ef18:	2373      	movs	r3, #115	; 0x73
 800ef1a:	708b      	strb	r3, [r1, #2]
 800ef1c:	4770      	bx	lr
 800ef1e:	2373      	movs	r3, #115	; 0x73
 800ef20:	700b      	strb	r3, [r1, #0]
 800ef22:	e7be      	b.n	800eea2 <findAxis+0x2e>
 800ef24:	2373      	movs	r3, #115	; 0x73
 800ef26:	704b      	strb	r3, [r1, #1]
 800ef28:	e7d8      	b.n	800eedc <findAxis+0x68>
 800ef2a:	236e      	movs	r3, #110	; 0x6e
 800ef2c:	704b      	strb	r3, [r1, #1]
 800ef2e:	e7d5      	b.n	800eedc <findAxis+0x68>
 800ef30:	236e      	movs	r3, #110	; 0x6e
 800ef32:	700b      	strb	r3, [r1, #0]
 800ef34:	e7b5      	b.n	800eea2 <findAxis+0x2e>
 800ef36:	236e      	movs	r3, #110	; 0x6e
 800ef38:	708b      	strb	r3, [r1, #2]
 800ef3a:	4770      	bx	lr
 800ef3c:	2375      	movs	r3, #117	; 0x75
 800ef3e:	700b      	strb	r3, [r1, #0]
 800ef40:	e7af      	b.n	800eea2 <findAxis+0x2e>
 800ef42:	2375      	movs	r3, #117	; 0x75
 800ef44:	704b      	strb	r3, [r1, #1]
 800ef46:	e7c9      	b.n	800eedc <findAxis+0x68>
 800ef48:	2375      	movs	r3, #117	; 0x75
 800ef4a:	708b      	strb	r3, [r1, #2]
 800ef4c:	4770      	bx	lr
 800ef4e:	bf00      	nop

0800ef50 <findDirection>:
 800ef50:	b5d0      	push	{r4, r6, r7, lr}
 800ef52:	ed2d 8b04 	vpush	{d8-d9}
 800ef56:	eef0 8ac0 	vabs.f32	s17, s0
 800ef5a:	eeb0 8ae0 	vabs.f32	s16, s1
 800ef5e:	eef4 8ac8 	vcmpe.f32	s17, s16
 800ef62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef66:	4604      	mov	r4, r0
 800ef68:	eeb0 9ac1 	vabs.f32	s18, s2
 800ef6c:	dd36      	ble.n	800efdc <findDirection+0x8c>
 800ef6e:	eef4 8ac9 	vcmpe.f32	s17, s18
 800ef72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef76:	dd31      	ble.n	800efdc <findDirection+0x8c>
 800ef78:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ef7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef80:	ee18 0a90 	vmov	r0, s17
 800ef84:	f340 8094 	ble.w	800f0b0 <findDirection+0x160>
 800ef88:	f7f1 fae2 	bl	8000550 <__aeabi_f2d>
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	ee18 0a10 	vmov	r0, s16
 800ef92:	460f      	mov	r7, r1
 800ef94:	f7f1 fadc 	bl	8000550 <__aeabi_f2d>
 800ef98:	a387      	add	r3, pc, #540	; (adr r3, 800f1b8 <findDirection+0x268>)
 800ef9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9e:	f7f1 fb2f 	bl	8000600 <__aeabi_dmul>
 800efa2:	4602      	mov	r2, r0
 800efa4:	460b      	mov	r3, r1
 800efa6:	4630      	mov	r0, r6
 800efa8:	4639      	mov	r1, r7
 800efaa:	f7f1 fdb9 	bl	8000b20 <__aeabi_dcmpgt>
 800efae:	b188      	cbz	r0, 800efd4 <findDirection+0x84>
 800efb0:	ee19 0a10 	vmov	r0, s18
 800efb4:	f7f1 facc 	bl	8000550 <__aeabi_f2d>
 800efb8:	a37f      	add	r3, pc, #508	; (adr r3, 800f1b8 <findDirection+0x268>)
 800efba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efbe:	f7f1 fb1f 	bl	8000600 <__aeabi_dmul>
 800efc2:	4602      	mov	r2, r0
 800efc4:	460b      	mov	r3, r1
 800efc6:	4630      	mov	r0, r6
 800efc8:	4639      	mov	r1, r7
 800efca:	f7f1 fda9 	bl	8000b20 <__aeabi_dcmpgt>
 800efce:	2800      	cmp	r0, #0
 800efd0:	bf18      	it	ne
 800efd2:	2404      	movne	r4, #4
 800efd4:	ecbd 8b04 	vpop	{d8-d9}
 800efd8:	4620      	mov	r0, r4
 800efda:	bdd0      	pop	{r4, r6, r7, pc}
 800efdc:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800efe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe4:	dd32      	ble.n	800f04c <findDirection+0xfc>
 800efe6:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800efea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efee:	ee18 0a10 	vmov	r0, s16
 800eff2:	f340 8086 	ble.w	800f102 <findDirection+0x1b2>
 800eff6:	f7f1 faab 	bl	8000550 <__aeabi_f2d>
 800effa:	4606      	mov	r6, r0
 800effc:	ee18 0a90 	vmov	r0, s17
 800f000:	460f      	mov	r7, r1
 800f002:	f7f1 faa5 	bl	8000550 <__aeabi_f2d>
 800f006:	a36c      	add	r3, pc, #432	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00c:	f7f1 faf8 	bl	8000600 <__aeabi_dmul>
 800f010:	4602      	mov	r2, r0
 800f012:	460b      	mov	r3, r1
 800f014:	4630      	mov	r0, r6
 800f016:	4639      	mov	r1, r7
 800f018:	f7f1 fd82 	bl	8000b20 <__aeabi_dcmpgt>
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d0d9      	beq.n	800efd4 <findDirection+0x84>
 800f020:	ee19 0a10 	vmov	r0, s18
 800f024:	f7f1 fa94 	bl	8000550 <__aeabi_f2d>
 800f028:	a363      	add	r3, pc, #396	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02e:	f7f1 fae7 	bl	8000600 <__aeabi_dmul>
 800f032:	4602      	mov	r2, r0
 800f034:	460b      	mov	r3, r1
 800f036:	4630      	mov	r0, r6
 800f038:	4639      	mov	r1, r7
 800f03a:	f7f1 fd71 	bl	8000b20 <__aeabi_dcmpgt>
 800f03e:	ecbd 8b04 	vpop	{d8-d9}
 800f042:	2800      	cmp	r0, #0
 800f044:	bf18      	it	ne
 800f046:	2401      	movne	r4, #1
 800f048:	4620      	mov	r0, r4
 800f04a:	bdd0      	pop	{r4, r6, r7, pc}
 800f04c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800f050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f054:	ee19 0a10 	vmov	r0, s18
 800f058:	dd7f      	ble.n	800f15a <findDirection+0x20a>
 800f05a:	f7f1 fa79 	bl	8000550 <__aeabi_f2d>
 800f05e:	4606      	mov	r6, r0
 800f060:	ee18 0a10 	vmov	r0, s16
 800f064:	460f      	mov	r7, r1
 800f066:	f7f1 fa73 	bl	8000550 <__aeabi_f2d>
 800f06a:	a353      	add	r3, pc, #332	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f070:	f7f1 fac6 	bl	8000600 <__aeabi_dmul>
 800f074:	4602      	mov	r2, r0
 800f076:	460b      	mov	r3, r1
 800f078:	4630      	mov	r0, r6
 800f07a:	4639      	mov	r1, r7
 800f07c:	f7f1 fd50 	bl	8000b20 <__aeabi_dcmpgt>
 800f080:	2800      	cmp	r0, #0
 800f082:	d0a7      	beq.n	800efd4 <findDirection+0x84>
 800f084:	ee18 0a90 	vmov	r0, s17
 800f088:	f7f1 fa62 	bl	8000550 <__aeabi_f2d>
 800f08c:	a34a      	add	r3, pc, #296	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f092:	f7f1 fab5 	bl	8000600 <__aeabi_dmul>
 800f096:	4602      	mov	r2, r0
 800f098:	460b      	mov	r3, r1
 800f09a:	4630      	mov	r0, r6
 800f09c:	4639      	mov	r1, r7
 800f09e:	f7f1 fd3f 	bl	8000b20 <__aeabi_dcmpgt>
 800f0a2:	ecbd 8b04 	vpop	{d8-d9}
 800f0a6:	2800      	cmp	r0, #0
 800f0a8:	bf18      	it	ne
 800f0aa:	2400      	movne	r4, #0
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	bdd0      	pop	{r4, r6, r7, pc}
 800f0b0:	f7f1 fa4e 	bl	8000550 <__aeabi_f2d>
 800f0b4:	4606      	mov	r6, r0
 800f0b6:	ee18 0a10 	vmov	r0, s16
 800f0ba:	460f      	mov	r7, r1
 800f0bc:	f7f1 fa48 	bl	8000550 <__aeabi_f2d>
 800f0c0:	a33d      	add	r3, pc, #244	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c6:	f7f1 fa9b 	bl	8000600 <__aeabi_dmul>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	4639      	mov	r1, r7
 800f0d2:	f7f1 fd25 	bl	8000b20 <__aeabi_dcmpgt>
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	f43f af7c 	beq.w	800efd4 <findDirection+0x84>
 800f0dc:	ee19 0a10 	vmov	r0, s18
 800f0e0:	f7f1 fa36 	bl	8000550 <__aeabi_f2d>
 800f0e4:	a334      	add	r3, pc, #208	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ea:	f7f1 fa89 	bl	8000600 <__aeabi_dmul>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	4639      	mov	r1, r7
 800f0f6:	f7f1 fd13 	bl	8000b20 <__aeabi_dcmpgt>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	bf18      	it	ne
 800f0fe:	2405      	movne	r4, #5
 800f100:	e768      	b.n	800efd4 <findDirection+0x84>
 800f102:	f7f1 fa25 	bl	8000550 <__aeabi_f2d>
 800f106:	4606      	mov	r6, r0
 800f108:	ee18 0a90 	vmov	r0, s17
 800f10c:	460f      	mov	r7, r1
 800f10e:	f7f1 fa1f 	bl	8000550 <__aeabi_f2d>
 800f112:	a329      	add	r3, pc, #164	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	f7f1 fa72 	bl	8000600 <__aeabi_dmul>
 800f11c:	4602      	mov	r2, r0
 800f11e:	460b      	mov	r3, r1
 800f120:	4630      	mov	r0, r6
 800f122:	4639      	mov	r1, r7
 800f124:	f7f1 fcfc 	bl	8000b20 <__aeabi_dcmpgt>
 800f128:	2800      	cmp	r0, #0
 800f12a:	f43f af53 	beq.w	800efd4 <findDirection+0x84>
 800f12e:	ee19 0a10 	vmov	r0, s18
 800f132:	f7f1 fa0d 	bl	8000550 <__aeabi_f2d>
 800f136:	a320      	add	r3, pc, #128	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13c:	f7f1 fa60 	bl	8000600 <__aeabi_dmul>
 800f140:	4602      	mov	r2, r0
 800f142:	460b      	mov	r3, r1
 800f144:	4630      	mov	r0, r6
 800f146:	4639      	mov	r1, r7
 800f148:	f7f1 fcea 	bl	8000b20 <__aeabi_dcmpgt>
 800f14c:	ecbd 8b04 	vpop	{d8-d9}
 800f150:	2800      	cmp	r0, #0
 800f152:	bf18      	it	ne
 800f154:	2403      	movne	r4, #3
 800f156:	4620      	mov	r0, r4
 800f158:	bdd0      	pop	{r4, r6, r7, pc}
 800f15a:	f7f1 f9f9 	bl	8000550 <__aeabi_f2d>
 800f15e:	4606      	mov	r6, r0
 800f160:	ee18 0a10 	vmov	r0, s16
 800f164:	460f      	mov	r7, r1
 800f166:	f7f1 f9f3 	bl	8000550 <__aeabi_f2d>
 800f16a:	a313      	add	r3, pc, #76	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f170:	f7f1 fa46 	bl	8000600 <__aeabi_dmul>
 800f174:	4602      	mov	r2, r0
 800f176:	460b      	mov	r3, r1
 800f178:	4630      	mov	r0, r6
 800f17a:	4639      	mov	r1, r7
 800f17c:	f7f1 fcd0 	bl	8000b20 <__aeabi_dcmpgt>
 800f180:	2800      	cmp	r0, #0
 800f182:	f43f af27 	beq.w	800efd4 <findDirection+0x84>
 800f186:	ee18 0a90 	vmov	r0, s17
 800f18a:	f7f1 f9e1 	bl	8000550 <__aeabi_f2d>
 800f18e:	a30a      	add	r3, pc, #40	; (adr r3, 800f1b8 <findDirection+0x268>)
 800f190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f194:	f7f1 fa34 	bl	8000600 <__aeabi_dmul>
 800f198:	4602      	mov	r2, r0
 800f19a:	460b      	mov	r3, r1
 800f19c:	4630      	mov	r0, r6
 800f19e:	4639      	mov	r1, r7
 800f1a0:	f7f1 fcbe 	bl	8000b20 <__aeabi_dcmpgt>
 800f1a4:	ecbd 8b04 	vpop	{d8-d9}
 800f1a8:	2800      	cmp	r0, #0
 800f1aa:	bf18      	it	ne
 800f1ac:	2402      	movne	r4, #2
 800f1ae:	4620      	mov	r0, r4
 800f1b0:	bdd0      	pop	{r4, r6, r7, pc}
 800f1b2:	bf00      	nop
 800f1b4:	f3af 8000 	nop.w
 800f1b8:	e0000000 	.word	0xe0000000
 800f1bc:	3ff6b851 	.word	0x3ff6b851

0800f1c0 <updateOrientation>:
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	b410      	push	{r4}
 800f1c4:	6003      	str	r3, [r0, #0]
 800f1c6:	6043      	str	r3, [r0, #4]
 800f1c8:	7203      	strb	r3, [r0, #8]
 800f1ca:	780c      	ldrb	r4, [r1, #0]
 800f1cc:	784a      	ldrb	r2, [r1, #1]
 800f1ce:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800f1d2:	2b17      	cmp	r3, #23
 800f1d4:	bf98      	it	ls
 800f1d6:	3420      	addls	r4, #32
 800f1d8:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800f1dc:	bf98      	it	ls
 800f1de:	b2e4      	uxtbls	r4, r4
 800f1e0:	2b17      	cmp	r3, #23
 800f1e2:	788b      	ldrb	r3, [r1, #2]
 800f1e4:	bf98      	it	ls
 800f1e6:	3220      	addls	r2, #32
 800f1e8:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800f1ec:	bf98      	it	ls
 800f1ee:	b2d2      	uxtbls	r2, r2
 800f1f0:	2917      	cmp	r1, #23
 800f1f2:	bf98      	it	ls
 800f1f4:	3320      	addls	r3, #32
 800f1f6:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800f1fa:	bf98      	it	ls
 800f1fc:	b2db      	uxtbls	r3, r3
 800f1fe:	2c13      	cmp	r4, #19
 800f200:	d80d      	bhi.n	800f21e <updateOrientation+0x5e>
 800f202:	e8df f004 	tbb	[pc, r4]
 800f206:	0a36      	.short	0x0a36
 800f208:	0c0c0c0c 	.word	0x0c0c0c0c
 800f20c:	0c0c0c0c 	.word	0x0c0c0c0c
 800f210:	0c0c0c39 	.word	0x0c0c0c39
 800f214:	3f0c3c0c 	.word	0x3f0c3c0c
 800f218:	420c      	.short	0x420c
 800f21a:	2101      	movs	r1, #1
 800f21c:	7001      	strb	r1, [r0, #0]
 800f21e:	3a64      	subs	r2, #100	; 0x64
 800f220:	2a13      	cmp	r2, #19
 800f222:	d80d      	bhi.n	800f240 <updateOrientation+0x80>
 800f224:	e8df f002 	tbb	[pc, r2]
 800f228:	0c0c0a34 	.word	0x0c0c0a34
 800f22c:	0c0c0c0c 	.word	0x0c0c0c0c
 800f230:	0c370c0c 	.word	0x0c370c0c
 800f234:	3a0c0c0c 	.word	0x3a0c0c0c
 800f238:	400c3d0c 	.word	0x400c3d0c
 800f23c:	2201      	movs	r2, #1
 800f23e:	7042      	strb	r2, [r0, #1]
 800f240:	3b64      	subs	r3, #100	; 0x64
 800f242:	2b13      	cmp	r3, #19
 800f244:	d80d      	bhi.n	800f262 <updateOrientation+0xa2>
 800f246:	e8df f003 	tbb	[pc, r3]
 800f24a:	320a      	.short	0x320a
 800f24c:	0c0c0c0c 	.word	0x0c0c0c0c
 800f250:	0c0c0c0c 	.word	0x0c0c0c0c
 800f254:	0c0c0c37 	.word	0x0c0c0c37
 800f258:	410c3c0c 	.word	0x410c3c0c
 800f25c:	0f0c      	.short	0x0f0c
 800f25e:	23ff      	movs	r3, #255	; 0xff
 800f260:	7203      	strb	r3, [r0, #8]
 800f262:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f266:	4770      	bx	lr
 800f268:	23ff      	movs	r3, #255	; 0xff
 800f26a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f26e:	7083      	strb	r3, [r0, #2]
 800f270:	4770      	bx	lr
 800f272:	21ff      	movs	r1, #255	; 0xff
 800f274:	7181      	strb	r1, [r0, #6]
 800f276:	e7d2      	b.n	800f21e <updateOrientation+0x5e>
 800f278:	2101      	movs	r1, #1
 800f27a:	70c1      	strb	r1, [r0, #3]
 800f27c:	e7cf      	b.n	800f21e <updateOrientation+0x5e>
 800f27e:	21ff      	movs	r1, #255	; 0xff
 800f280:	70c1      	strb	r1, [r0, #3]
 800f282:	e7cc      	b.n	800f21e <updateOrientation+0x5e>
 800f284:	2101      	movs	r1, #1
 800f286:	7181      	strb	r1, [r0, #6]
 800f288:	e7c9      	b.n	800f21e <updateOrientation+0x5e>
 800f28a:	21ff      	movs	r1, #255	; 0xff
 800f28c:	7001      	strb	r1, [r0, #0]
 800f28e:	e7c6      	b.n	800f21e <updateOrientation+0x5e>
 800f290:	22ff      	movs	r2, #255	; 0xff
 800f292:	71c2      	strb	r2, [r0, #7]
 800f294:	e7d4      	b.n	800f240 <updateOrientation+0x80>
 800f296:	2201      	movs	r2, #1
 800f298:	7102      	strb	r2, [r0, #4]
 800f29a:	e7d1      	b.n	800f240 <updateOrientation+0x80>
 800f29c:	22ff      	movs	r2, #255	; 0xff
 800f29e:	7102      	strb	r2, [r0, #4]
 800f2a0:	e7ce      	b.n	800f240 <updateOrientation+0x80>
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	71c2      	strb	r2, [r0, #7]
 800f2a6:	e7cb      	b.n	800f240 <updateOrientation+0x80>
 800f2a8:	22ff      	movs	r2, #255	; 0xff
 800f2aa:	7042      	strb	r2, [r0, #1]
 800f2ac:	e7c8      	b.n	800f240 <updateOrientation+0x80>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2b4:	7083      	strb	r3, [r0, #2]
 800f2b6:	4770      	bx	lr
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2be:	7143      	strb	r3, [r0, #5]
 800f2c0:	4770      	bx	lr
 800f2c2:	23ff      	movs	r3, #255	; 0xff
 800f2c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2c8:	7143      	strb	r3, [r0, #5]
 800f2ca:	4770      	bx	lr
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2d2:	7203      	strb	r3, [r0, #8]
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop

0800f2d8 <qmult>:
 800f2d8:	ed90 3a01 	vldr	s6, [r0, #4]
 800f2dc:	ed91 2a03 	vldr	s4, [r1, #12]
 800f2e0:	edd0 5a02 	vldr	s11, [r0, #8]
 800f2e4:	edd1 4a01 	vldr	s9, [r1, #4]
 800f2e8:	ed90 4a00 	vldr	s8, [r0]
 800f2ec:	edd1 3a00 	vldr	s7, [r1]
 800f2f0:	ed91 5a02 	vldr	s10, [r1, #8]
 800f2f4:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800f2f8:	ee62 6a03 	vmul.f32	s13, s4, s6
 800f2fc:	ee22 7a25 	vmul.f32	s14, s4, s11
 800f300:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800f304:	edd0 2a03 	vldr	s5, [r0, #12]
 800f308:	eea4 6a02 	vfma.f32	s12, s8, s4
 800f30c:	eee4 6a05 	vfma.f32	s13, s8, s10
 800f310:	eea3 7a23 	vfma.f32	s14, s6, s7
 800f314:	eee4 7a63 	vfms.f32	s15, s8, s7
 800f318:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800f31c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800f320:	eea5 7a22 	vfma.f32	s14, s10, s5
 800f324:	eee2 7a22 	vfma.f32	s15, s4, s5
 800f328:	eea3 6a45 	vfms.f32	s12, s6, s10
 800f32c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800f330:	eea4 7a64 	vfms.f32	s14, s8, s9
 800f334:	eee5 7a65 	vfms.f32	s15, s10, s11
 800f338:	ed82 6a00 	vstr	s12, [r2]
 800f33c:	edc2 6a01 	vstr	s13, [r2, #4]
 800f340:	ed82 7a02 	vstr	s14, [r2, #8]
 800f344:	edc2 7a03 	vstr	s15, [r2, #12]
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop

0800f34c <MEMS_setMagIndexToOne>:
 800f34c:	291f      	cmp	r1, #31
 800f34e:	b430      	push	{r4, r5}
 800f350:	f04f 0401 	mov.w	r4, #1
 800f354:	d921      	bls.n	800f39a <MEMS_setMagIndexToOne+0x4e>
 800f356:	6885      	ldr	r5, [r0, #8]
 800f358:	3920      	subs	r1, #32
 800f35a:	fa04 f101 	lsl.w	r1, r4, r1
 800f35e:	ea21 0105 	bic.w	r1, r1, r5
 800f362:	4069      	eors	r1, r5
 800f364:	2a1f      	cmp	r2, #31
 800f366:	6081      	str	r1, [r0, #8]
 800f368:	f04f 0101 	mov.w	r1, #1
 800f36c:	d920      	bls.n	800f3b0 <MEMS_setMagIndexToOne+0x64>
 800f36e:	6904      	ldr	r4, [r0, #16]
 800f370:	3a20      	subs	r2, #32
 800f372:	fa01 f202 	lsl.w	r2, r1, r2
 800f376:	ea22 0204 	bic.w	r2, r2, r4
 800f37a:	4062      	eors	r2, r4
 800f37c:	2b1f      	cmp	r3, #31
 800f37e:	6102      	str	r2, [r0, #16]
 800f380:	f04f 0201 	mov.w	r2, #1
 800f384:	d91f      	bls.n	800f3c6 <MEMS_setMagIndexToOne+0x7a>
 800f386:	bc30      	pop	{r4, r5}
 800f388:	69c1      	ldr	r1, [r0, #28]
 800f38a:	3b20      	subs	r3, #32
 800f38c:	fa02 f303 	lsl.w	r3, r2, r3
 800f390:	ea23 0301 	bic.w	r3, r3, r1
 800f394:	404b      	eors	r3, r1
 800f396:	61c3      	str	r3, [r0, #28]
 800f398:	4770      	bx	lr
 800f39a:	68c5      	ldr	r5, [r0, #12]
 800f39c:	fa04 f101 	lsl.w	r1, r4, r1
 800f3a0:	ea21 0105 	bic.w	r1, r1, r5
 800f3a4:	4069      	eors	r1, r5
 800f3a6:	2a1f      	cmp	r2, #31
 800f3a8:	60c1      	str	r1, [r0, #12]
 800f3aa:	f04f 0101 	mov.w	r1, #1
 800f3ae:	d8de      	bhi.n	800f36e <MEMS_setMagIndexToOne+0x22>
 800f3b0:	6944      	ldr	r4, [r0, #20]
 800f3b2:	fa01 f202 	lsl.w	r2, r1, r2
 800f3b6:	ea22 0204 	bic.w	r2, r2, r4
 800f3ba:	4062      	eors	r2, r4
 800f3bc:	2b1f      	cmp	r3, #31
 800f3be:	6142      	str	r2, [r0, #20]
 800f3c0:	f04f 0201 	mov.w	r2, #1
 800f3c4:	d8df      	bhi.n	800f386 <MEMS_setMagIndexToOne+0x3a>
 800f3c6:	bc30      	pop	{r4, r5}
 800f3c8:	6981      	ldr	r1, [r0, #24]
 800f3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f3ce:	ea23 0301 	bic.w	r3, r3, r1
 800f3d2:	404b      	eors	r3, r1
 800f3d4:	6183      	str	r3, [r0, #24]
 800f3d6:	4770      	bx	lr

0800f3d8 <getRotationMatrix>:
 800f3d8:	b538      	push	{r3, r4, r5, lr}
 800f3da:	4605      	mov	r5, r0
 800f3dc:	460c      	mov	r4, r1
 800f3de:	4610      	mov	r0, r2
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	2224      	movs	r2, #36	; 0x24
 800f3e4:	f00b fc71 	bl	801acca <memset>
 800f3e8:	ed95 5a00 	vldr	s10, [r5]
 800f3ec:	ed80 5a02 	vstr	s10, [r0, #8]
 800f3f0:	edd5 5a01 	vldr	s11, [r5, #4]
 800f3f4:	edc0 5a05 	vstr	s11, [r0, #20]
 800f3f8:	edd5 6a02 	vldr	s13, [r5, #8]
 800f3fc:	edc0 6a08 	vstr	s13, [r0, #32]
 800f400:	ed94 4a02 	vldr	s8, [r4, #8]
 800f404:	ed94 7a01 	vldr	s14, [r4, #4]
 800f408:	edd4 4a00 	vldr	s9, [r4]
 800f40c:	ee65 7ac4 	vnmul.f32	s15, s11, s8
 800f410:	ee26 6ae4 	vnmul.f32	s12, s13, s9
 800f414:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f418:	ee65 6a47 	vnmul.f32	s13, s10, s14
 800f41c:	eee4 6aa5 	vfma.f32	s13, s9, s11
 800f420:	eeb0 7ae7 	vabs.f32	s14, s15
 800f424:	edc0 6a06 	vstr	s13, [r0, #24]
 800f428:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f514 <getRotationMatrix+0x13c>
 800f42c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800f430:	eea4 6a05 	vfma.f32	s12, s8, s10
 800f434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f438:	eeb0 5ac6 	vabs.f32	s10, s12
 800f43c:	bfdc      	itt	le
 800f43e:	eeb0 7a66 	vmovle.f32	s14, s13
 800f442:	eec7 5aa6 	vdivle.f32	s11, s15, s13
 800f446:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800f44a:	bfd4      	ite	le
 800f44c:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800f450:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800f454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f458:	4603      	mov	r3, r0
 800f45a:	ed80 6a03 	vstr	s12, [r0, #12]
 800f45e:	edc0 7a00 	vstr	s15, [r0]
 800f462:	d447      	bmi.n	800f4f4 <getRotationMatrix+0x11c>
 800f464:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800f468:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800f46c:	eef0 5a66 	vmov.f32	s11, s13
 800f470:	edd3 6a06 	vldr	s13, [r3, #24]
 800f474:	eeb0 5ae6 	vabs.f32	s10, s13
 800f478:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800f47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f480:	d543      	bpl.n	800f50a <getRotationMatrix+0x132>
 800f482:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800f486:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800f48a:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f48e:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800f492:	eeb0 7a45 	vmov.f32	s14, s10
 800f496:	eef0 5a44 	vmov.f32	s11, s8
 800f49a:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800f49e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f4a2:	ee65 5a07 	vmul.f32	s11, s10, s14
 800f4a6:	ee84 7aa5 	vdiv.f32	s14, s9, s11
 800f4aa:	edd3 3a08 	vldr	s7, [r3, #32]
 800f4ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4b2:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f4b6:	edd3 4a02 	vldr	s9, [r3, #8]
 800f4ba:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f4be:	ed93 4a05 	vldr	s8, [r3, #20]
 800f4c2:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800f4c6:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800f4ca:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800f4ce:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800f4d2:	eee4 5a07 	vfma.f32	s11, s8, s14
 800f4d6:	eee6 6a24 	vfma.f32	s13, s12, s9
 800f4da:	edc3 7a00 	vstr	s15, [r3]
 800f4de:	ed83 6a03 	vstr	s12, [r3, #12]
 800f4e2:	ed83 7a06 	vstr	s14, [r3, #24]
 800f4e6:	ed83 5a04 	vstr	s10, [r3, #16]
 800f4ea:	edc3 5a01 	vstr	s11, [r3, #4]
 800f4ee:	edc3 6a07 	vstr	s13, [r3, #28]
 800f4f2:	bd38      	pop	{r3, r4, r5, pc}
 800f4f4:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800f4f8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f4fc:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f500:	eeb0 7a45 	vmov.f32	s14, s10
 800f504:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800f508:	e7b2      	b.n	800f470 <getRotationMatrix+0x98>
 800f50a:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800f50e:	eee5 5a05 	vfma.f32	s11, s10, s10
 800f512:	e7c2      	b.n	800f49a <getRotationMatrix+0xc2>
 800f514:	00000000 	.word	0x00000000

0800f518 <b_dcm2q>:
 800f518:	ed90 5a08 	vldr	s10, [r0, #32]
 800f51c:	edd0 7a00 	vldr	s15, [r0]
 800f520:	edd0 6a04 	vldr	s13, [r0, #16]
 800f524:	ee37 7a85 	vadd.f32	s14, s15, s10
 800f528:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800f52c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f530:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800f534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f538:	bfc2      	ittt	gt
 800f53a:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800f53e:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800f542:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800f546:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800f54a:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800f54e:	ee35 6a47 	vsub.f32	s12, s10, s14
 800f552:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800f556:	bfd8      	it	le
 800f558:	eddf 5a40 	vldrle	s11, [pc, #256]	; 800f65c <b_dcm2q+0x144>
 800f55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f560:	bfc4      	itt	gt
 800f562:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800f566:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800f56a:	ee35 7a07 	vadd.f32	s14, s10, s14
 800f56e:	bfc8      	it	gt
 800f570:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800f574:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800f578:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800f57c:	bfd8      	it	le
 800f57e:	ed9f 6a37 	vldrle	s12, [pc, #220]	; 800f65c <b_dcm2q+0x144>
 800f582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f586:	dd5d      	ble.n	800f644 <b_dcm2q+0x12c>
 800f588:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f58c:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f590:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800f594:	eef1 4ac7 	vsqrt.f32	s9, s14
 800f598:	ee64 4a84 	vmul.f32	s9, s9, s8
 800f59c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f5a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f5a4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f5a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b0:	bf84      	itt	hi
 800f5b2:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800f5b6:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800f5ba:	edd0 6a07 	vldr	s13, [r0, #28]
 800f5be:	bf88      	it	hi
 800f5c0:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800f5c4:	edd0 7a05 	vldr	s15, [r0, #20]
 800f5c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f5cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f5d0:	bf98      	it	ls
 800f5d2:	ed9f 7a22 	vldrls	s14, [pc, #136]	; 800f65c <b_dcm2q+0x144>
 800f5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5da:	d43c      	bmi.n	800f656 <b_dcm2q+0x13e>
 800f5dc:	bfd8      	it	le
 800f5de:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800f5e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f5e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5ea:	ed81 7a00 	vstr	s14, [r1]
 800f5ee:	edd0 7a06 	vldr	s15, [r0, #24]
 800f5f2:	ed90 7a02 	vldr	s14, [r0, #8]
 800f5f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f602:	d425      	bmi.n	800f650 <b_dcm2q+0x138>
 800f604:	bfd8      	it	le
 800f606:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800f60a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f60e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f612:	edc1 5a01 	vstr	s11, [r1, #4]
 800f616:	edd0 7a01 	vldr	s15, [r0, #4]
 800f61a:	ed90 7a03 	vldr	s14, [r0, #12]
 800f61e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62a:	d40e      	bmi.n	800f64a <b_dcm2q+0x132>
 800f62c:	bfd8      	it	le
 800f62e:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800f632:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f636:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f63a:	edc1 4a03 	vstr	s9, [r1, #12]
 800f63e:	ed81 6a02 	vstr	s12, [r1, #8]
 800f642:	4770      	bx	lr
 800f644:	eddf 4a05 	vldr	s9, [pc, #20]	; 800f65c <b_dcm2q+0x144>
 800f648:	e7a8      	b.n	800f59c <b_dcm2q+0x84>
 800f64a:	eeb1 6a46 	vneg.f32	s12, s12
 800f64e:	e7f0      	b.n	800f632 <b_dcm2q+0x11a>
 800f650:	eef1 5a65 	vneg.f32	s11, s11
 800f654:	e7d9      	b.n	800f60a <b_dcm2q+0xf2>
 800f656:	eeb1 7a47 	vneg.f32	s14, s14
 800f65a:	e7c2      	b.n	800f5e2 <b_dcm2q+0xca>
 800f65c:	00000000 	.word	0x00000000

0800f660 <q2hpr>:
 800f660:	ed90 7a00 	vldr	s14, [r0]
 800f664:	edd0 6a01 	vldr	s13, [r0, #4]
 800f668:	edd0 7a02 	vldr	s15, [r0, #8]
 800f66c:	ed90 5a03 	vldr	s10, [r0, #12]
 800f670:	b510      	push	{r4, lr}
 800f672:	ee27 0a27 	vmul.f32	s0, s14, s15
 800f676:	ed2d 8b0a 	vpush	{d8-d12}
 800f67a:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800f67e:	ee27 8a26 	vmul.f32	s16, s14, s13
 800f682:	ee67 0a07 	vmul.f32	s1, s14, s14
 800f686:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800f68a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f68e:	ee27 7a05 	vmul.f32	s14, s14, s10
 800f692:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f696:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f69a:	ee78 aa08 	vadd.f32	s21, s16, s16
 800f69e:	460c      	mov	r4, r1
 800f6a0:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800f6a4:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800f6a8:	ee30 ca00 	vadd.f32	s24, s0, s0
 800f6ac:	ee36 ba06 	vadd.f32	s22, s12, s12
 800f6b0:	ee77 8a07 	vadd.f32	s17, s14, s14
 800f6b4:	ee75 baa5 	vadd.f32	s23, s11, s11
 800f6b8:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800f6bc:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800f6c0:	bb8a      	cbnz	r2, 800f726 <q2hpr+0xc6>
 800f6c2:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800f6c6:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800f6ca:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800f6ce:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800f6d2:	f009 fe69 	bl	80193a8 <atan2f>
 800f6d6:	eeb0 8a40 	vmov.f32	s16, s0
 800f6da:	ee38 0aab 	vadd.f32	s0, s17, s23
 800f6de:	ed84 8a00 	vstr	s16, [r4]
 800f6e2:	f009 fe2f 	bl	8019344 <asinf>
 800f6e6:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800f6ea:	eef0 8a40 	vmov.f32	s17, s0
 800f6ee:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800f6f2:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800f6f6:	f009 fe57 	bl	80193a8 <atan2f>
 800f6fa:	eef1 8a68 	vneg.f32	s17, s17
 800f6fe:	eeb0 9a40 	vmov.f32	s18, s0
 800f702:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f70a:	ed84 9a02 	vstr	s18, [r4, #8]
 800f70e:	edc4 8a01 	vstr	s17, [r4, #4]
 800f712:	d505      	bpl.n	800f720 <q2hpr+0xc0>
 800f714:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800f76c <q2hpr+0x10c>
 800f718:	ee38 8a00 	vadd.f32	s16, s16, s0
 800f71c:	ed84 8a00 	vstr	s16, [r4]
 800f720:	ecbd 8b0a 	vpop	{d8-d12}
 800f724:	bd10      	pop	{r4, pc}
 800f726:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800f72a:	f009 fe0b 	bl	8019344 <asinf>
 800f72e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800f732:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800f736:	eeb0 9a40 	vmov.f32	s18, s0
 800f73a:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800f73e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800f742:	f009 fe31 	bl	80193a8 <atan2f>
 800f746:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800f74a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800f74e:	eef0 8a40 	vmov.f32	s17, s0
 800f752:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800f756:	eeb1 0a48 	vneg.f32	s0, s16
 800f75a:	f009 fe25 	bl	80193a8 <atan2f>
 800f75e:	eef1 8a68 	vneg.f32	s17, s17
 800f762:	eeb0 8a40 	vmov.f32	s16, s0
 800f766:	ed84 0a00 	vstr	s0, [r4]
 800f76a:	e7ca      	b.n	800f702 <q2hpr+0xa2>
 800f76c:	40c90fdb 	.word	0x40c90fdb

0800f770 <llEvaluate.constprop.0>:
 800f770:	edd0 7a00 	vldr	s15, [r0]
 800f774:	ed92 6a00 	vldr	s12, [r2]
 800f778:	ed90 7a04 	vldr	s14, [r0, #16]
 800f77c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800f780:	edd2 7a01 	vldr	s15, [r2, #4]
 800f784:	ed90 5a05 	vldr	s10, [r0, #20]
 800f788:	eee7 7a66 	vfms.f32	s15, s14, s13
 800f78c:	edd0 5a08 	vldr	s11, [r0, #32]
 800f790:	ed92 7a02 	vldr	s14, [r2, #8]
 800f794:	ee87 6a85 	vdiv.f32	s12, s15, s10
 800f798:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f79c:	ed90 5a09 	vldr	s10, [r0, #36]	; 0x24
 800f7a0:	edd0 5a0c 	vldr	s11, [r0, #48]	; 0x30
 800f7a4:	edd2 7a03 	vldr	s15, [r2, #12]
 800f7a8:	eea6 7a45 	vfms.f32	s14, s12, s10
 800f7ac:	edd0 4a0a 	vldr	s9, [r0, #40]	; 0x28
 800f7b0:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 800f7b4:	eee6 7ae5 	vfms.f32	s15, s13, s11
 800f7b8:	eec7 5a24 	vdiv.f32	s11, s14, s9
 800f7bc:	eee6 7a45 	vfms.f32	s15, s12, s10
 800f7c0:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800f7c4:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800f7c8:	eee5 7ac7 	vfms.f32	s15, s11, s14
 800f7cc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800f7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7d4:	b084      	sub	sp, #16
 800f7d6:	edcd 6a00 	vstr	s13, [sp]
 800f7da:	ed8d 6a01 	vstr	s12, [sp, #4]
 800f7de:	edcd 5a02 	vstr	s11, [sp, #8]
 800f7e2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f7e6:	2704      	movs	r7, #4
 800f7e8:	f10d 0810 	add.w	r8, sp, #16
 800f7ec:	ed78 7a01 	vldmdb	r8!, {s15}
 800f7f0:	f101 0510 	add.w	r5, r1, #16
 800f7f4:	2f04      	cmp	r7, #4
 800f7f6:	4686      	mov	lr, r0
 800f7f8:	f04f 0c03 	mov.w	ip, #3
 800f7fc:	ed65 7a01 	vstmdb	r5!, {s15}
 800f800:	b27b      	sxtb	r3, r7
 800f802:	d029      	beq.n	800f858 <llEvaluate.constprop.0+0xe8>
 800f804:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800f808:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800f80c:	4432      	add	r2, r6
 800f80e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800f812:	edd2 6a00 	vldr	s13, [r2]
 800f816:	ed94 7a00 	vldr	s14, [r4]
 800f81a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f81e:	3301      	adds	r3, #1
 800f820:	b2da      	uxtb	r2, r3
 800f822:	2a04      	cmp	r2, #4
 800f824:	edc5 7a00 	vstr	s15, [r5]
 800f828:	b25b      	sxtb	r3, r3
 800f82a:	d1ed      	bne.n	800f808 <llEvaluate.constprop.0+0x98>
 800f82c:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800f830:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f834:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800f838:	ed85 7a00 	vstr	s14, [r5]
 800f83c:	d013      	beq.n	800f866 <llEvaluate.constprop.0+0xf6>
 800f83e:	ed78 7a01 	vldmdb	r8!, {s15}
 800f842:	3f01      	subs	r7, #1
 800f844:	b2ff      	uxtb	r7, r7
 800f846:	2f04      	cmp	r7, #4
 800f848:	ed65 7a01 	vstmdb	r5!, {s15}
 800f84c:	f1ae 0e14 	sub.w	lr, lr, #20
 800f850:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f854:	b27b      	sxtb	r3, r7
 800f856:	d1d5      	bne.n	800f804 <llEvaluate.constprop.0+0x94>
 800f858:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800f85c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f860:	ed85 7a00 	vstr	s14, [r5]
 800f864:	e7eb      	b.n	800f83e <llEvaluate.constprop.0+0xce>
 800f866:	b004      	add	sp, #16
 800f868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f86c <MEMS_updateMagBufferIndex>:
 800f86c:	2300      	movs	r3, #0
 800f86e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f870:	7802      	ldrb	r2, [r0, #0]
 800f872:	7847      	ldrb	r7, [r0, #1]
 800f874:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800f878:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f87c:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800f880:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800f884:	42ba      	cmp	r2, r7
 800f886:	460c      	mov	r4, r1
 800f888:	b083      	sub	sp, #12
 800f88a:	f103 0301 	add.w	r3, r3, #1
 800f88e:	d073      	beq.n	800f978 <MEMS_updateMagBufferIndex+0x10c>
 800f890:	1a9b      	subs	r3, r3, r2
 800f892:	fb93 f6f7 	sdiv	r6, r3, r7
 800f896:	fb07 3316 	mls	r3, r7, r6, r3
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	bfb6      	itet	lt
 800f89e:	18fe      	addlt	r6, r7, r3
 800f8a0:	b21e      	sxthge	r6, r3
 800f8a2:	b236      	sxthlt	r6, r6
 800f8a4:	b91a      	cbnz	r2, 800f8ae <MEMS_updateMagBufferIndex+0x42>
 800f8a6:	23ff      	movs	r3, #255	; 0xff
 800f8a8:	7083      	strb	r3, [r0, #2]
 800f8aa:	b003      	add	sp, #12
 800f8ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f8b2:	2500      	movs	r5, #0
 800f8b4:	ee87 7a80 	vdiv.f32	s14, s15, s0
 800f8b8:	462b      	mov	r3, r5
 800f8ba:	e000      	b.n	800f8be <MEMS_updateMagBufferIndex+0x52>
 800f8bc:	7847      	ldrb	r7, [r0, #1]
 800f8be:	4433      	add	r3, r6
 800f8c0:	fb93 f2f7 	sdiv	r2, r3, r7
 800f8c4:	fb07 3212 	mls	r2, r7, r2, r3
 800f8c8:	b2d2      	uxtb	r2, r2
 800f8ca:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800f8ce:	f9b2 1022 	ldrsh.w	r1, [r2, #34]	; 0x22
 800f8d2:	3501      	adds	r5, #1
 800f8d4:	fb91 f3f4 	sdiv	r3, r1, r4
 800f8d8:	fb04 1313 	mls	r3, r4, r3, r1
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	bfb8      	it	lt
 800f8e0:	191b      	addlt	r3, r3, r4
 800f8e2:	b21b      	sxth	r3, r3
 800f8e4:	ee07 3a90 	vmov	s15, r3
 800f8e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f8ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8f0:	fef8 7a67 	vrinta.f32	s15, s15
 800f8f4:	f9b2 1024 	ldrsh.w	r1, [r2, #36]	; 0x24
 800f8f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8fc:	fb91 f3f4 	sdiv	r3, r1, r4
 800f900:	fb04 1313 	mls	r3, r4, r3, r1
 800f904:	2b00      	cmp	r3, #0
 800f906:	bfb8      	it	lt
 800f908:	191b      	addlt	r3, r3, r4
 800f90a:	b21b      	sxth	r3, r3
 800f90c:	edcd 7a01 	vstr	s15, [sp, #4]
 800f910:	ee07 3a90 	vmov	s15, r3
 800f914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f918:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f91c:	fef8 7a67 	vrinta.f32	s15, s15
 800f920:	f9b2 2026 	ldrsh.w	r2, [r2, #38]	; 0x26
 800f924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f928:	fb92 f3f4 	sdiv	r3, r2, r4
 800f92c:	fb04 2313 	mls	r3, r4, r3, r2
 800f930:	18e2      	adds	r2, r4, r3
 800f932:	2b00      	cmp	r3, #0
 800f934:	fa0f fc83 	sxth.w	ip, r3
 800f938:	b217      	sxth	r7, r2
 800f93a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f93e:	edcd 7a01 	vstr	s15, [sp, #4]
 800f942:	bfac      	ite	ge
 800f944:	ee07 ca90 	vmovge	s15, ip
 800f948:	ee07 7a90 	vmovlt	s15, r7
 800f94c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f950:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f954:	fef8 7a67 	vrinta.f32	s15, s15
 800f958:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f95c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f960:	edcd 7a01 	vstr	s15, [sp, #4]
 800f964:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f968:	f7ff fcf0 	bl	800f34c <MEMS_setMagIndexToOne>
 800f96c:	7802      	ldrb	r2, [r0, #0]
 800f96e:	b2eb      	uxtb	r3, r5
 800f970:	429a      	cmp	r2, r3
 800f972:	d8a3      	bhi.n	800f8bc <MEMS_updateMagBufferIndex+0x50>
 800f974:	b003      	add	sp, #12
 800f976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f978:	fb93 f6f2 	sdiv	r6, r3, r2
 800f97c:	fb02 3316 	mls	r3, r2, r6, r3
 800f980:	b21e      	sxth	r6, r3
 800f982:	e78f      	b.n	800f8a4 <MEMS_updateMagBufferIndex+0x38>

0800f984 <getMagStats.constprop.0>:
 800f984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f988:	2400      	movs	r4, #0
 800f98a:	4607      	mov	r7, r0
 800f98c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f990:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f992:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800f996:	6034      	str	r4, [r6, #0]
 800f998:	601c      	str	r4, [r3, #0]
 800f99a:	7800      	ldrb	r0, [r0, #0]
 800f99c:	787d      	ldrb	r5, [r7, #1]
 800f99e:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800f9a2:	42a8      	cmp	r0, r5
 800f9a4:	f000 80ba 	beq.w	800fb1c <getMagStats.constprop.0+0x198>
 800f9a8:	3401      	adds	r4, #1
 800f9aa:	eba4 0c00 	sub.w	ip, r4, r0
 800f9ae:	fb9c f4f5 	sdiv	r4, ip, r5
 800f9b2:	ee04 0a90 	vmov	s9, r0
 800f9b6:	fb05 c414 	mls	r4, r5, r4, ip
 800f9ba:	2c00      	cmp	r4, #0
 800f9bc:	bfb8      	it	lt
 800f9be:	1964      	addlt	r4, r4, r5
 800f9c0:	b224      	sxth	r4, r4
 800f9c2:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800fb38 <getMagStats.constprop.0+0x1b4>
 800f9c6:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800f9ca:	ee25 5a85 	vmul.f32	s10, s11, s10
 800f9ce:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	f000 80ac 	beq.w	800fb30 <getMagStats.constprop.0+0x1ac>
 800f9d8:	f100 3cff 	add.w	ip, r0, #4294967295
 800f9dc:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800fb3c <getMagStats.constprop.0+0x1b8>
 800f9e0:	2000      	movs	r0, #0
 800f9e2:	f8b1 9000 	ldrh.w	r9, [r1]
 800f9e6:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800f9ea:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800f9ee:	fa54 fc8c 	uxtab	ip, r4, ip
 800f9f2:	e002      	b.n	800f9fa <getMagStats.constprop.0+0x76>
 800f9f4:	ed93 3a00 	vldr	s6, [r3]
 800f9f8:	3401      	adds	r4, #1
 800f9fa:	fb94 faf5 	sdiv	sl, r4, r5
 800f9fe:	fb05 4a1a 	mls	sl, r5, sl, r4
 800fa02:	fa5f fa8a 	uxtb.w	sl, sl
 800fa06:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
 800fa0a:	f8ba b024 	ldrh.w	fp, [sl, #36]	; 0x24
 800fa0e:	f8ba 1022 	ldrh.w	r1, [sl, #34]	; 0x22
 800fa12:	ebab 0b08 	sub.w	fp, fp, r8
 800fa16:	fa0f fb8b 	sxth.w	fp, fp
 800fa1a:	ee06 ba90 	vmov	s13, fp
 800fa1e:	eba1 0109 	sub.w	r1, r1, r9
 800fa22:	b209      	sxth	r1, r1
 800fa24:	ee07 1a10 	vmov	s14, r1
 800fa28:	edd2 3a04 	vldr	s7, [r2, #16]
 800fa2c:	f8ba 1026 	ldrh.w	r1, [sl, #38]	; 0x26
 800fa30:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fa34:	eba1 010e 	sub.w	r1, r1, lr
 800fa38:	ed92 4a00 	vldr	s8, [r2]
 800fa3c:	b209      	sxth	r1, r1
 800fa3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa42:	ee07 1a90 	vmov	s15, r1
 800fa46:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800fa4a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fa4e:	ed92 6a08 	vldr	s12, [r2, #32]
 800fa52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa56:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800fa5a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800fa5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800fa62:	ee16 aa90 	vmov	sl, s13
 800fa66:	ee17 1a10 	vmov	r1, s14
 800fa6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa6e:	fb1a fa0a 	smulbb	sl, sl, sl
 800fa72:	b209      	sxth	r1, r1
 800fa74:	fb01 aa01 	mla	sl, r1, r1, sl
 800fa78:	ee17 1a90 	vmov	r1, s15
 800fa7c:	b209      	sxth	r1, r1
 800fa7e:	fb01 a101 	mla	r1, r1, r1, sl
 800fa82:	ee07 1a90 	vmov	s15, r1
 800fa86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa8a:	eef1 6ae7 	vsqrt.f32	s13, s15
 800fa8e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800fa92:	ee17 1a90 	vmov	r1, s15
 800fa96:	b209      	sxth	r1, r1
 800fa98:	ee07 1a10 	vmov	s14, r1
 800fa9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800faa0:	ee77 7a45 	vsub.f32	s15, s14, s10
 800faa4:	eef0 7ae7 	vabs.f32	s15, s15
 800faa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800faac:	ee17 1a90 	vmov	r1, s15
 800fab0:	b209      	sxth	r1, r1
 800fab2:	ee07 1a90 	vmov	s15, r1
 800fab6:	ee37 7a03 	vadd.f32	s14, s14, s6
 800faba:	fb01 f101 	mul.w	r1, r1, r1
 800fabe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fac2:	ed83 7a00 	vstr	s14, [r3]
 800fac6:	ee07 1a90 	vmov	s15, r1
 800faca:	eef4 5ae6 	vcmpe.f32	s11, s13
 800face:	ed96 7a00 	vldr	s14, [r6]
 800fad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fada:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fade:	bf44      	itt	mi
 800fae0:	3001      	addmi	r0, #1
 800fae2:	b2c0      	uxtbmi	r0, r0
 800fae4:	45a4      	cmp	ip, r4
 800fae6:	edc6 7a00 	vstr	s15, [r6]
 800faea:	d183      	bne.n	800f9f4 <getMagStats.constprop.0+0x70>
 800faec:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800faf0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800faf4:	eef1 7ac7 	vsqrt.f32	s15, s14
 800faf8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800fb40 <getMagStats.constprop.0+0x1bc>
 800fafc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fb00:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800fb04:	edc6 7a00 	vstr	s15, [r6]
 800fb08:	edd3 7a00 	vldr	s15, [r3]
 800fb0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fb10:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800fb14:	edc3 7a00 	vstr	s15, [r3]
 800fb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1c:	1c65      	adds	r5, r4, #1
 800fb1e:	fb95 f4f0 	sdiv	r4, r5, r0
 800fb22:	fb00 5414 	mls	r4, r0, r4, r5
 800fb26:	ee04 0a90 	vmov	s9, r0
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	b224      	sxth	r4, r4
 800fb2e:	e748      	b.n	800f9c2 <getMagStats.constprop.0+0x3e>
 800fb30:	edd6 7a00 	vldr	s15, [r6]
 800fb34:	e7da      	b.n	800faec <getMagStats.constprop.0+0x168>
 800fb36:	bf00      	nop
 800fb38:	423c0000 	.word	0x423c0000
 800fb3c:	00000000 	.word	0x00000000
 800fb40:	3f59999a 	.word	0x3f59999a

0800fb44 <MFX_emptyAttitude>:
 800fb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb48:	ed2d 8b10 	vpush	{d8-d15}
 800fb4c:	f04f 0b00 	mov.w	fp, #0
 800fb50:	2600      	movs	r6, #0
 800fb52:	2700      	movs	r7, #0
 800fb54:	f8df 8480 	ldr.w	r8, [pc, #1152]	; 800ffd8 <MFX_emptyAttitude+0x494>
 800fb58:	f6ad 6d54 	subw	sp, sp, #3668	; 0xe54
 800fb5c:	f838 3b04 	ldrh.w	r3, [r8], #4
 800fb60:	f88d b6ca 	strb.w	fp, [sp, #1738]	; 0x6ca
 800fb64:	f8ad 36c8 	strh.w	r3, [sp, #1736]	; 0x6c8
 800fb68:	f60d 0438 	addw	r4, sp, #2104	; 0x838
 800fb6c:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 800fb70:	e9c4 bb00 	strd	fp, fp, [r4]
 800fb74:	f8ad 30b8 	strh.w	r3, [sp, #184]	; 0xb8
 800fb78:	0c1b      	lsrs	r3, r3, #16
 800fb7a:	f88d 30ba 	strb.w	r3, [sp, #186]	; 0xba
 800fb7e:	f8c4 b008 	str.w	fp, [r4, #8]
 800fb82:	f10d 0abc 	add.w	sl, sp, #188	; 0xbc
 800fb86:	ab32      	add	r3, sp, #200	; 0xc8
 800fb88:	4681      	mov	r9, r0
 800fb8a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800fb8e:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 800fb92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb96:	ab35      	add	r3, sp, #212	; 0xd4
 800fb98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fb9c:	ab38      	add	r3, sp, #224	; 0xe0
 800fb9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fba2:	ab3b      	add	r3, sp, #236	; 0xec
 800fba4:	f50d 65d9 	add.w	r5, sp, #1736	; 0x6c8
 800fba8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fbac:	ab3e      	add	r3, sp, #248	; 0xf8
 800fbae:	e9cd 672a 	strd	r6, r7, [sp, #168]	; 0xa8
 800fbb2:	e9cd 672c 	strd	r6, r7, [sp, #176]	; 0xb0
 800fbb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fbba:	4628      	mov	r0, r5
 800fbbc:	2224      	movs	r2, #36	; 0x24
 800fbbe:	f00b f884 	bl	801acca <memset>
 800fbc2:	4659      	mov	r1, fp
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fbca:	f00b f87e 	bl	801acca <memset>
 800fbce:	edd5 7a00 	vldr	s15, [r5]
 800fbd2:	ed9f 9af2 	vldr	s18, [pc, #968]	; 800ff9c <MFX_emptyAttitude+0x458>
 800fbd6:	ed95 7a01 	vldr	s14, [r5, #4]
 800fbda:	edd5 6a02 	vldr	s13, [r5, #8]
 800fbde:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 800fbe2:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800fbe6:	eddf 7aee 	vldr	s15, [pc, #952]	; 800ffa0 <MFX_emptyAttitude+0x45c>
 800fbea:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
 800fbee:	ed8d 7a45 	vstr	s14, [sp, #276]	; 0x114
 800fbf2:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 800fbf6:	edcd 6a46 	vstr	s13, [sp, #280]	; 0x118
 800fbfa:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 800fbfe:	edcd 7a4f 	vstr	s15, [sp, #316]	; 0x13c
 800fc02:	edcd 7a50 	vstr	s15, [sp, #320]	; 0x140
 800fc06:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 800fc0a:	edcd 7a52 	vstr	s15, [sp, #328]	; 0x148
 800fc0e:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800fc12:	edcd 7a54 	vstr	s15, [sp, #336]	; 0x150
 800fc16:	edcd 7a55 	vstr	s15, [sp, #340]	; 0x154
 800fc1a:	edcd 7a56 	vstr	s15, [sp, #344]	; 0x158
 800fc1e:	edcd 7a58 	vstr	s15, [sp, #352]	; 0x160
 800fc22:	edcd 7a59 	vstr	s15, [sp, #356]	; 0x164
 800fc26:	edcd 7a5a 	vstr	s15, [sp, #360]	; 0x168
 800fc2a:	edcd 7a5b 	vstr	s15, [sp, #364]	; 0x16c
 800fc2e:	edcd 7a5c 	vstr	s15, [sp, #368]	; 0x170
 800fc32:	edcd 7a5d 	vstr	s15, [sp, #372]	; 0x174
 800fc36:	edcd 7a5e 	vstr	s15, [sp, #376]	; 0x178
 800fc3a:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
 800fc3e:	edcd 7a60 	vstr	s15, [sp, #384]	; 0x180
 800fc42:	edcd 7a62 	vstr	s15, [sp, #392]	; 0x188
 800fc46:	edcd 7a63 	vstr	s15, [sp, #396]	; 0x18c
 800fc4a:	ed8d 9a4d 	vstr	s18, [sp, #308]	; 0x134
 800fc4e:	ed8d 9a57 	vstr	s18, [sp, #348]	; 0x15c
 800fc52:	ed8d 9a61 	vstr	s18, [sp, #388]	; 0x184
 800fc56:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 800fc5a:	edd5 4a05 	vldr	s9, [r5, #20]
 800fc5e:	edd5 5a03 	vldr	s11, [r5, #12]
 800fc62:	ed95 5a04 	vldr	s10, [r5, #16]
 800fc66:	edcd 4a05 	vstr	s9, [sp, #20]
 800fc6a:	edcd 4a49 	vstr	s9, [sp, #292]	; 0x124
 800fc6e:	edcd 5a0c 	vstr	s11, [sp, #48]	; 0x30
 800fc72:	edcd 5a47 	vstr	s11, [sp, #284]	; 0x11c
 800fc76:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800fc7a:	ed8d 5a48 	vstr	s10, [sp, #288]	; 0x120
 800fc7e:	edcd 7a65 	vstr	s15, [sp, #404]	; 0x194
 800fc82:	edcd 7a66 	vstr	s15, [sp, #408]	; 0x198
 800fc86:	edcd 7a67 	vstr	s15, [sp, #412]	; 0x19c
 800fc8a:	edcd 7a68 	vstr	s15, [sp, #416]	; 0x1a0
 800fc8e:	edcd 7a69 	vstr	s15, [sp, #420]	; 0x1a4
 800fc92:	edcd 7a6a 	vstr	s15, [sp, #424]	; 0x1a8
 800fc96:	edcd 7a6c 	vstr	s15, [sp, #432]	; 0x1b0
 800fc9a:	edcd 7a6d 	vstr	s15, [sp, #436]	; 0x1b4
 800fc9e:	edcd 7a6e 	vstr	s15, [sp, #440]	; 0x1b8
 800fca2:	edcd 7a6f 	vstr	s15, [sp, #444]	; 0x1bc
 800fca6:	edcd 7a70 	vstr	s15, [sp, #448]	; 0x1c0
 800fcaa:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 800fcae:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 800fcb2:	edcd 7a73 	vstr	s15, [sp, #460]	; 0x1cc
 800fcb6:	edcd 7a74 	vstr	s15, [sp, #464]	; 0x1d0
 800fcba:	edcd 7a76 	vstr	s15, [sp, #472]	; 0x1d8
 800fcbe:	edcd 7a77 	vstr	s15, [sp, #476]	; 0x1dc
 800fcc2:	edcd 7a78 	vstr	s15, [sp, #480]	; 0x1e0
 800fcc6:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 800fcca:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800fcce:	ed8d 9a6b 	vstr	s18, [sp, #428]	; 0x1ac
 800fcd2:	ed8d 9a75 	vstr	s18, [sp, #468]	; 0x1d4
 800fcd6:	ed8d 9a7f 	vstr	s18, [sp, #508]	; 0x1fc
 800fcda:	edcd 7a7b 	vstr	s15, [sp, #492]	; 0x1ec
 800fcde:	ed95 4a06 	vldr	s8, [r5, #24]
 800fce2:	edd5 3a07 	vldr	s7, [r5, #28]
 800fce6:	ed95 3a08 	vldr	s6, [r5, #32]
 800fcea:	f44f 76b4 	mov.w	r6, #360	; 0x168
 800fcee:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800fcf2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800fcf6:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
 800fcfa:	ed8d 4a08 	vstr	s8, [sp, #32]
 800fcfe:	ed8d 4a4a 	vstr	s8, [sp, #296]	; 0x128
 800fd02:	edcd 3a07 	vstr	s7, [sp, #28]
 800fd06:	edcd 3a4b 	vstr	s7, [sp, #300]	; 0x12c
 800fd0a:	ed8d 3a06 	vstr	s6, [sp, #24]
 800fd0e:	ed8d 3a4c 	vstr	s6, [sp, #304]	; 0x130
 800fd12:	edcd 7a7c 	vstr	s15, [sp, #496]	; 0x1f0
 800fd16:	edcd 7a7d 	vstr	s15, [sp, #500]	; 0x1f4
 800fd1a:	edcd 7a7e 	vstr	s15, [sp, #504]	; 0x1f8
 800fd1e:	edcd 7a80 	vstr	s15, [sp, #512]	; 0x200
 800fd22:	edcd 7a81 	vstr	s15, [sp, #516]	; 0x204
 800fd26:	edcd 7a82 	vstr	s15, [sp, #520]	; 0x208
 800fd2a:	edcd 7a83 	vstr	s15, [sp, #524]	; 0x20c
 800fd2e:	edcd 7a84 	vstr	s15, [sp, #528]	; 0x210
 800fd32:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 800fd36:	edcd 7a86 	vstr	s15, [sp, #536]	; 0x218
 800fd3a:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800fd3e:	edcd 7a88 	vstr	s15, [sp, #544]	; 0x220
 800fd42:	edcd 7a8a 	vstr	s15, [sp, #552]	; 0x228
 800fd46:	edcd 7a8b 	vstr	s15, [sp, #556]	; 0x22c
 800fd4a:	edcd 7a8c 	vstr	s15, [sp, #560]	; 0x230
 800fd4e:	edcd 7a8d 	vstr	s15, [sp, #564]	; 0x234
 800fd52:	edcd 7a8e 	vstr	s15, [sp, #568]	; 0x238
 800fd56:	edcd 7a8f 	vstr	s15, [sp, #572]	; 0x23c
 800fd5a:	edcd 7a90 	vstr	s15, [sp, #576]	; 0x240
 800fd5e:	edcd 7a91 	vstr	s15, [sp, #580]	; 0x244
 800fd62:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800fd66:	ed8d 9a89 	vstr	s18, [sp, #548]	; 0x224
 800fd6a:	ed8d 9a93 	vstr	s18, [sp, #588]	; 0x24c
 800fd6e:	edcd 7a94 	vstr	s15, [sp, #592]	; 0x250
 800fd72:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800fd76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd7a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800fd7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fd82:	f8d8 3000 	ldr.w	r3, [r8]
 800fd86:	4659      	mov	r1, fp
 800fd88:	4632      	mov	r2, r6
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	eef0 fa67 	vmov.f32	s31, s15
 800fd90:	f8cc 3000 	str.w	r3, [ip]
 800fd94:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 800fd98:	edcd 7a95 	vstr	s15, [sp, #596]	; 0x254
 800fd9c:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48
 800fda0:	edcd 7a96 	vstr	s15, [sp, #600]	; 0x258
 800fda4:	edcd 7a11 	vstr	s15, [sp, #68]	; 0x44
 800fda8:	edcd 7a97 	vstr	s15, [sp, #604]	; 0x25c
 800fdac:	edcd 7a98 	vstr	s15, [sp, #608]	; 0x260
 800fdb0:	edcd 7a99 	vstr	s15, [sp, #612]	; 0x264
 800fdb4:	edcd 7a9a 	vstr	s15, [sp, #616]	; 0x268
 800fdb8:	f00a ff87 	bl	801acca <memset>
 800fdbc:	4632      	mov	r2, r6
 800fdbe:	4621      	mov	r1, r4
 800fdc0:	a8a0      	add	r0, sp, #640	; 0x280
 800fdc2:	f8ad 7278 	strh.w	r7, [sp, #632]	; 0x278
 800fdc6:	f00a ff73 	bl	801acb0 <memcpy>
 800fdca:	4632      	mov	r2, r6
 800fdcc:	4659      	mov	r1, fp
 800fdce:	4620      	mov	r0, r4
 800fdd0:	ed8d 8a9f 	vstr	s16, [sp, #636]	; 0x27c
 800fdd4:	f00a ff79 	bl	801acca <memset>
 800fdd8:	4632      	mov	r2, r6
 800fdda:	4621      	mov	r1, r4
 800fddc:	a8fc      	add	r0, sp, #1008	; 0x3f0
 800fdde:	f50d 68ab 	add.w	r8, sp, #1368	; 0x558
 800fde2:	f8ad 73e8 	strh.w	r7, [sp, #1000]	; 0x3e8
 800fde6:	f00a ff63 	bl	801acb0 <memcpy>
 800fdea:	4632      	mov	r2, r6
 800fdec:	4659      	mov	r1, fp
 800fdee:	4620      	mov	r0, r4
 800fdf0:	ed8d 8afb 	vstr	s16, [sp, #1004]	; 0x3ec
 800fdf4:	f00a ff69 	bl	801acca <memset>
 800fdf8:	4632      	mov	r2, r6
 800fdfa:	4621      	mov	r1, r4
 800fdfc:	f8a8 7000 	strh.w	r7, [r8]
 800fe00:	f50d 60ac 	add.w	r0, sp, #1376	; 0x560
 800fe04:	f00a ff54 	bl	801acb0 <memcpy>
 800fe08:	4632      	mov	r2, r6
 800fe0a:	4659      	mov	r1, fp
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	ed88 8a01 	vstr	s16, [r8, #4]
 800fe12:	f00a ff5a 	bl	801acca <memset>
 800fe16:	4632      	mov	r2, r6
 800fe18:	4621      	mov	r1, r4
 800fe1a:	802f      	strh	r7, [r5, #0]
 800fe1c:	ae1e      	add	r6, sp, #120	; 0x78
 800fe1e:	f50d 60da 	add.w	r0, sp, #1744	; 0x6d0
 800fe22:	f00a ff45 	bl	801acb0 <memcpy>
 800fe26:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800fe2a:	f8cd 8000 	str.w	r8, [sp]
 800fe2e:	9403      	str	r4, [sp, #12]
 800fe30:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 800fe34:	eddf 5a5b 	vldr	s11, [pc, #364]	; 800ffa4 <MFX_emptyAttitude+0x460>
 800fe38:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 800ffa8 <MFX_emptyAttitude+0x464>
 800fe3c:	ed85 8a01 	vstr	s16, [r5, #4]
 800fe40:	f04f 0501 	mov.w	r5, #1
 800fe44:	4f59      	ldr	r7, [pc, #356]	; (800ffac <MFX_emptyAttitude+0x468>)
 800fe46:	f8df e194 	ldr.w	lr, [pc, #404]	; 800ffdc <MFX_emptyAttitude+0x498>
 800fe4a:	f8df c194 	ldr.w	ip, [pc, #404]	; 800ffe0 <MFX_emptyAttitude+0x49c>
 800fe4e:	abfa      	add	r3, sp, #1000	; 0x3e8
 800fe50:	aa9e      	add	r2, sp, #632	; 0x278
 800fe52:	a915      	add	r1, sp, #84	; 0x54
 800fe54:	9723      	str	r7, [sp, #140]	; 0x8c
 800fe56:	2001      	movs	r0, #1
 800fe58:	af35      	add	r7, sp, #212	; 0xd4
 800fe5a:	2600      	movs	r6, #0
 800fe5c:	ed8d 5a24 	vstr	s10, [sp, #144]	; 0x90
 800fe60:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 800fe64:	ed8d 6a20 	vstr	s12, [sp, #128]	; 0x80
 800fe68:	f88d 5078 	strb.w	r5, [sp, #120]	; 0x78
 800fe6c:	f8cd e084 	str.w	lr, [sp, #132]	; 0x84
 800fe70:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
 800fe74:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800fe78:	edcd fa26 	vstr	s31, [sp, #152]	; 0x98
 800fe7c:	edcd fa27 	vstr	s31, [sp, #156]	; 0x9c
 800fe80:	edcd fa28 	vstr	s31, [sp, #160]	; 0xa0
 800fe84:	edcd fa29 	vstr	s31, [sp, #164]	; 0xa4
 800fe88:	f7fe fed6 	bl	800ec38 <DataHist_parameters>
 800fe8c:	e8ba 0007 	ldmia.w	sl!, {r0, r1, r2}
 800fe90:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 800fe94:	ed9f 2a46 	vldr	s4, [pc, #280]	; 800ffb0 <MFX_emptyAttitude+0x46c>
 800fe98:	eddf 2a46 	vldr	s5, [pc, #280]	; 800ffb4 <MFX_emptyAttitude+0x470>
 800fe9c:	eddf 6a46 	vldr	s13, [pc, #280]	; 800ffb8 <MFX_emptyAttitude+0x474>
 800fea0:	970e      	str	r7, [sp, #56]	; 0x38
 800fea2:	ed9f 3a46 	vldr	s6, [pc, #280]	; 800ffbc <MFX_emptyAttitude+0x478>
 800fea6:	2700      	movs	r7, #0
 800fea8:	eddf 3a45 	vldr	s7, [pc, #276]	; 800ffc0 <MFX_emptyAttitude+0x47c>
 800feac:	ed9f 4a45 	vldr	s8, [pc, #276]	; 800ffc4 <MFX_emptyAttitude+0x480>
 800feb0:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ffc8 <MFX_emptyAttitude+0x484>
 800feb4:	f8c9 207c 	str.w	r2, [r9, #124]	; 0x7c
 800feb8:	f8df e128 	ldr.w	lr, [pc, #296]	; 800ffe4 <MFX_emptyAttitude+0x4a0>
 800febc:	4a43      	ldr	r2, [pc, #268]	; (800ffcc <MFX_emptyAttitude+0x488>)
 800febe:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800fec2:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
 800fec6:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 800feca:	ab38      	add	r3, sp, #224	; 0xe0
 800fecc:	f8c9 200c 	str.w	r2, [r9, #12]
 800fed0:	f8c9 e030 	str.w	lr, [r9, #48]	; 0x30
 800fed4:	e8bc 0007 	ldmia.w	ip!, {r0, r1, r2}
 800fed8:	f8bd e0b8 	ldrh.w	lr, [sp, #184]	; 0xb8
 800fedc:	f89d c0ba 	ldrb.w	ip, [sp, #186]	; 0xba
 800fee0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fee2:	ab3b      	add	r3, sp, #236	; 0xec
 800fee4:	e9c9 6716 	strd	r6, r7, [r9, #88]	; 0x58
 800fee8:	e9c9 6718 	strd	r6, r7, [r9, #96]	; 0x60
 800feec:	e9c9 671a 	strd	r6, r7, [r9, #104]	; 0x68
 800fef0:	edc9 1a05 	vstr	s3, [r9, #20]
 800fef4:	ed89 2a06 	vstr	s4, [r9, #24]
 800fef8:	edc9 2a07 	vstr	s5, [r9, #28]
 800fefc:	ed89 3a08 	vstr	s6, [r9, #32]
 800ff00:	edc9 3a09 	vstr	s7, [r9, #36]	; 0x24
 800ff04:	ed89 4a0a 	vstr	s8, [r9, #40]	; 0x28
 800ff08:	edc9 4a0b 	vstr	s9, [r9, #44]	; 0x2c
 800ff0c:	edc9 6a0d 	vstr	s13, [r9, #52]	; 0x34
 800ff10:	9310      	str	r3, [sp, #64]	; 0x40
 800ff12:	f8a9 e070 	strh.w	lr, [r9, #112]	; 0x70
 800ff16:	f889 c072 	strb.w	ip, [r9, #114]	; 0x72
 800ff1a:	f8c9 0080 	str.w	r0, [r9, #128]	; 0x80
 800ff1e:	ed89 8a02 	vstr	s16, [r9, #8]
 800ff22:	ed89 8a04 	vstr	s16, [r9, #16]
 800ff26:	f8c9 1084 	str.w	r1, [r9, #132]	; 0x84
 800ff2a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ff2c:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
 800ff30:	460f      	mov	r7, r1
 800ff32:	cf07      	ldmia	r7!, {r0, r1, r2}
 800ff34:	f8c9 2094 	str.w	r2, [r9, #148]	; 0x94
 800ff38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ff3a:	ab3e      	add	r3, sp, #248	; 0xf8
 800ff3c:	4617      	mov	r7, r2
 800ff3e:	f240 1801 	movw	r8, #257	; 0x101
 800ff42:	461d      	mov	r5, r3
 800ff44:	ed9f 5a22 	vldr	s10, [pc, #136]	; 800ffd0 <MFX_emptyAttitude+0x48c>
 800ff48:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800ff4c:	ed9f 6a21 	vldr	s12, [pc, #132]	; 800ffd4 <MFX_emptyAttitude+0x490>
 800ff50:	f509 7346 	add.w	r3, r9, #792	; 0x318
 800ff54:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
 800ff58:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
 800ff5c:	461e      	mov	r6, r3
 800ff5e:	cf07      	ldmia	r7!, {r0, r1, r2}
 800ff60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff62:	f8c9 0098 	str.w	r0, [r9, #152]	; 0x98
 800ff66:	f8c9 109c 	str.w	r1, [r9, #156]	; 0x9c
 800ff6a:	f8c9 20a0 	str.w	r2, [r9, #160]	; 0xa0
 800ff6e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ff70:	f8c9 00a4 	str.w	r0, [r9, #164]	; 0xa4
 800ff74:	f8c9 10a8 	str.w	r1, [r9, #168]	; 0xa8
 800ff78:	f8c9 20ac 	str.w	r2, [r9, #172]	; 0xac
 800ff7c:	ed89 5a65 	vstr	s10, [r9, #404]	; 0x194
 800ff80:	edc9 5a66 	vstr	s11, [r9, #408]	; 0x198
 800ff84:	ed89 6a67 	vstr	s12, [r9, #412]	; 0x19c
 800ff88:	f8c9 8000 	str.w	r8, [r9]
 800ff8c:	f8a9 8004 	strh.w	r8, [r9, #4]
 800ff90:	edc9 fa64 	vstr	s31, [r9, #400]	; 0x190
 800ff94:	edc9 fa30 	vstr	s31, [r9, #192]	; 0xc0
 800ff98:	e026      	b.n	800ffe8 <MFX_emptyAttitude+0x4a4>
 800ff9a:	bf00      	nop
 800ff9c:	447a0000 	.word	0x447a0000
 800ffa0:	00000000 	.word	0x00000000
 800ffa4:	3ea25c13 	.word	0x3ea25c13
 800ffa8:	3e93ffa3 	.word	0x3e93ffa3
 800ffac:	3d57bb3d 	.word	0x3d57bb3d
 800ffb0:	3a9d4952 	.word	0x3a9d4952
 800ffb4:	3ac49ba6 	.word	0x3ac49ba6
 800ffb8:	3f2ac083 	.word	0x3f2ac083
 800ffbc:	3b03126f 	.word	0x3b03126f
 800ffc0:	3a83126f 	.word	0x3a83126f
 800ffc4:	3f639581 	.word	0x3f639581
 800ffc8:	402ab021 	.word	0x402ab021
 800ffcc:	01010100 	.word	0x01010100
 800ffd0:	3f4ccccd 	.word	0x3f4ccccd
 800ffd4:	3f333333 	.word	0x3f333333
 800ffd8:	0801b5ec 	.word	0x0801b5ec
 800ffdc:	3e5cec8f 	.word	0x3e5cec8f
 800ffe0:	3e006d36 	.word	0x3e006d36
 800ffe4:	3f13f7cf 	.word	0x3f13f7cf
 800ffe8:	edc9 fa4a 	vstr	s31, [r9, #296]	; 0x128
 800ffec:	edc9 fa31 	vstr	s31, [r9, #196]	; 0xc4
 800fff0:	edc9 fa4b 	vstr	s31, [r9, #300]	; 0x12c
 800fff4:	cd07      	ldmia	r5!, {r0, r1, r2}
 800fff6:	edc9 fa32 	vstr	s31, [r9, #200]	; 0xc8
 800fffa:	f8c9 00b0 	str.w	r0, [r9, #176]	; 0xb0
 800fffe:	f8c9 10b4 	str.w	r1, [r9, #180]	; 0xb4
 8010002:	f8c9 20b8 	str.w	r2, [r9, #184]	; 0xb8
 8010006:	edc9 fa4c 	vstr	s31, [r9, #304]	; 0x130
 801000a:	edc9 fa33 	vstr	s31, [r9, #204]	; 0xcc
 801000e:	edc9 fa4d 	vstr	s31, [r9, #308]	; 0x134
 8010012:	edc9 fa34 	vstr	s31, [r9, #208]	; 0xd0
 8010016:	edc9 fa4e 	vstr	s31, [r9, #312]	; 0x138
 801001a:	edc9 fa35 	vstr	s31, [r9, #212]	; 0xd4
 801001e:	edc9 fa4f 	vstr	s31, [r9, #316]	; 0x13c
 8010022:	edc9 fa36 	vstr	s31, [r9, #216]	; 0xd8
 8010026:	edc9 fa50 	vstr	s31, [r9, #320]	; 0x140
 801002a:	edc9 fa37 	vstr	s31, [r9, #220]	; 0xdc
 801002e:	edc9 fa51 	vstr	s31, [r9, #324]	; 0x144
 8010032:	edc9 fa38 	vstr	s31, [r9, #224]	; 0xe0
 8010036:	edc9 fa52 	vstr	s31, [r9, #328]	; 0x148
 801003a:	edc9 fa39 	vstr	s31, [r9, #228]	; 0xe4
 801003e:	edc9 fa53 	vstr	s31, [r9, #332]	; 0x14c
 8010042:	edc9 fa3a 	vstr	s31, [r9, #232]	; 0xe8
 8010046:	edc9 fa54 	vstr	s31, [r9, #336]	; 0x150
 801004a:	edc9 fa3b 	vstr	s31, [r9, #236]	; 0xec
 801004e:	edc9 fa55 	vstr	s31, [r9, #340]	; 0x154
 8010052:	edc9 fa3c 	vstr	s31, [r9, #240]	; 0xf0
 8010056:	edc9 fa56 	vstr	s31, [r9, #344]	; 0x158
 801005a:	edc9 fa3d 	vstr	s31, [r9, #244]	; 0xf4
 801005e:	edc9 fa57 	vstr	s31, [r9, #348]	; 0x15c
 8010062:	edc9 fa3e 	vstr	s31, [r9, #248]	; 0xf8
 8010066:	edc9 fa58 	vstr	s31, [r9, #352]	; 0x160
 801006a:	edc9 fa3f 	vstr	s31, [r9, #252]	; 0xfc
 801006e:	ed9d 6a0d 	vldr	s12, [sp, #52]	; 0x34
 8010072:	edc9 fa59 	vstr	s31, [r9, #356]	; 0x164
 8010076:	ed89 6a6c 	vstr	s12, [r9, #432]	; 0x1b0
 801007a:	edc9 fa40 	vstr	s31, [r9, #256]	; 0x100
 801007e:	edc9 fa5a 	vstr	s31, [r9, #360]	; 0x168
 8010082:	edc9 fa41 	vstr	s31, [r9, #260]	; 0x104
 8010086:	edc9 fa5b 	vstr	s31, [r9, #364]	; 0x16c
 801008a:	edc9 fa42 	vstr	s31, [r9, #264]	; 0x108
 801008e:	edc9 fa5c 	vstr	s31, [r9, #368]	; 0x170
 8010092:	edc9 fa43 	vstr	s31, [r9, #268]	; 0x10c
 8010096:	edc9 fa5d 	vstr	s31, [r9, #372]	; 0x174
 801009a:	edc9 fa44 	vstr	s31, [r9, #272]	; 0x110
 801009e:	edc9 fa5e 	vstr	s31, [r9, #376]	; 0x178
 80100a2:	edc9 fa45 	vstr	s31, [r9, #276]	; 0x114
 80100a6:	edc9 fa5f 	vstr	s31, [r9, #380]	; 0x17c
 80100aa:	edc9 fa46 	vstr	s31, [r9, #280]	; 0x118
 80100ae:	edc9 fa60 	vstr	s31, [r9, #384]	; 0x180
 80100b2:	edc9 fa47 	vstr	s31, [r9, #284]	; 0x11c
 80100b6:	edc9 fa61 	vstr	s31, [r9, #388]	; 0x184
 80100ba:	edc9 fa48 	vstr	s31, [r9, #288]	; 0x120
 80100be:	edc9 fa62 	vstr	s31, [r9, #392]	; 0x188
 80100c2:	edc9 fa49 	vstr	s31, [r9, #292]	; 0x124
 80100c6:	edc9 fa63 	vstr	s31, [r9, #396]	; 0x18c
 80100ca:	ed89 9a75 	vstr	s18, [r9, #468]	; 0x1d4
 80100ce:	edc9 fa76 	vstr	s31, [r9, #472]	; 0x1d8
 80100d2:	edc9 fa77 	vstr	s31, [r9, #476]	; 0x1dc
 80100d6:	edc9 fa78 	vstr	s31, [r9, #480]	; 0x1e0
 80100da:	edc9 fa79 	vstr	s31, [r9, #484]	; 0x1e4
 80100de:	edc9 fa7a 	vstr	s31, [r9, #488]	; 0x1e8
 80100e2:	edc9 fa7b 	vstr	s31, [r9, #492]	; 0x1ec
 80100e6:	f889 b1a4 	strb.w	fp, [r9, #420]	; 0x1a4
 80100ea:	f8c9 b1a6 	str.w	fp, [r9, #422]	; 0x1a6
 80100ee:	edc9 fa7c 	vstr	s31, [r9, #496]	; 0x1f0
 80100f2:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
 80100f6:	eddd 5a0c 	vldr	s11, [sp, #48]	; 0x30
 80100fa:	ed89 6a6d 	vstr	s12, [r9, #436]	; 0x1b4
 80100fe:	f44f 1a48 	mov.w	sl, #3276800	; 0x320000
 8010102:	ed9d 6a0b 	vldr	s12, [sp, #44]	; 0x2c
 8010106:	edc9 5a6f 	vstr	s11, [r9, #444]	; 0x1bc
 801010a:	ed89 6a6e 	vstr	s12, [r9, #440]	; 0x1b8
 801010e:	f8c9 a1a0 	str.w	sl, [r9, #416]	; 0x1a0
 8010112:	edc9 fa7d 	vstr	s31, [r9, #500]	; 0x1f4
 8010116:	edc9 fa7e 	vstr	s31, [r9, #504]	; 0x1f8
 801011a:	ed89 9a7f 	vstr	s18, [r9, #508]	; 0x1fc
 801011e:	edc9 fa80 	vstr	s31, [r9, #512]	; 0x200
 8010122:	edc9 fa81 	vstr	s31, [r9, #516]	; 0x204
 8010126:	edc9 fa82 	vstr	s31, [r9, #520]	; 0x208
 801012a:	edc9 fa83 	vstr	s31, [r9, #524]	; 0x20c
 801012e:	edc9 fa84 	vstr	s31, [r9, #528]	; 0x210
 8010132:	edc9 fa85 	vstr	s31, [r9, #532]	; 0x214
 8010136:	edc9 fa86 	vstr	s31, [r9, #536]	; 0x218
 801013a:	edc9 fa87 	vstr	s31, [r9, #540]	; 0x21c
 801013e:	edc9 fa88 	vstr	s31, [r9, #544]	; 0x220
 8010142:	ed89 9a89 	vstr	s18, [r9, #548]	; 0x224
 8010146:	edc9 fa8a 	vstr	s31, [r9, #552]	; 0x228
 801014a:	edc9 fa8b 	vstr	s31, [r9, #556]	; 0x22c
 801014e:	edc9 fa8c 	vstr	s31, [r9, #560]	; 0x230
 8010152:	edc9 fa8d 	vstr	s31, [r9, #564]	; 0x234
 8010156:	edc9 fa8e 	vstr	s31, [r9, #568]	; 0x238
 801015a:	edc9 fa8f 	vstr	s31, [r9, #572]	; 0x23c
 801015e:	edc9 fa90 	vstr	s31, [r9, #576]	; 0x240
 8010162:	edc9 fa91 	vstr	s31, [r9, #580]	; 0x244
 8010166:	edc9 fa92 	vstr	s31, [r9, #584]	; 0x248
 801016a:	ed89 9a93 	vstr	s18, [r9, #588]	; 0x24c
 801016e:	edc9 fa94 	vstr	s31, [r9, #592]	; 0x250
 8010172:	edc9 fa95 	vstr	s31, [r9, #596]	; 0x254
 8010176:	edc9 fa96 	vstr	s31, [r9, #600]	; 0x258
 801017a:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 801017e:	eddd 4a05 	vldr	s9, [sp, #20]
 8010182:	ed9d 4a08 	vldr	s8, [sp, #32]
 8010186:	ed89 5a70 	vstr	s10, [r9, #448]	; 0x1c0
 801018a:	edc9 4a71 	vstr	s9, [r9, #452]	; 0x1c4
 801018e:	ed89 4a72 	vstr	s8, [r9, #456]	; 0x1c8
 8010192:	edc9 fa97 	vstr	s31, [r9, #604]	; 0x25c
 8010196:	edc9 fa98 	vstr	s31, [r9, #608]	; 0x260
 801019a:	edc9 fa99 	vstr	s31, [r9, #612]	; 0x264
 801019e:	edc9 fa9a 	vstr	s31, [r9, #616]	; 0x268
 80101a2:	edc9 fa9b 	vstr	s31, [r9, #620]	; 0x26c
 80101a6:	edc9 fa9c 	vstr	s31, [r9, #624]	; 0x270
 80101aa:	ed89 9a9d 	vstr	s18, [r9, #628]	; 0x274
 80101ae:	edc9 fa9e 	vstr	s31, [r9, #632]	; 0x278
 80101b2:	edc9 fa9f 	vstr	s31, [r9, #636]	; 0x27c
 80101b6:	edc9 faa0 	vstr	s31, [r9, #640]	; 0x280
 80101ba:	edc9 faa1 	vstr	s31, [r9, #644]	; 0x284
 80101be:	edc9 faa2 	vstr	s31, [r9, #648]	; 0x288
 80101c2:	edc9 faa3 	vstr	s31, [r9, #652]	; 0x28c
 80101c6:	edc9 faa4 	vstr	s31, [r9, #656]	; 0x290
 80101ca:	edc9 faa5 	vstr	s31, [r9, #660]	; 0x294
 80101ce:	edc9 faa6 	vstr	s31, [r9, #664]	; 0x298
 80101d2:	ed89 9aa7 	vstr	s18, [r9, #668]	; 0x29c
 80101d6:	edc9 faa8 	vstr	s31, [r9, #672]	; 0x2a0
 80101da:	edc9 faa9 	vstr	s31, [r9, #676]	; 0x2a4
 80101de:	edc9 faaa 	vstr	s31, [r9, #680]	; 0x2a8
 80101e2:	edc9 faab 	vstr	s31, [r9, #684]	; 0x2ac
 80101e6:	edc9 faac 	vstr	s31, [r9, #688]	; 0x2b0
 80101ea:	edc9 faad 	vstr	s31, [r9, #692]	; 0x2b4
 80101ee:	edc9 faae 	vstr	s31, [r9, #696]	; 0x2b8
 80101f2:	edc9 faaf 	vstr	s31, [r9, #700]	; 0x2bc
 80101f6:	edc9 fab0 	vstr	s31, [r9, #704]	; 0x2c0
 80101fa:	f04f 0501 	mov.w	r5, #1
 80101fe:	ed89 9ab1 	vstr	s18, [r9, #708]	; 0x2c4
 8010202:	eddd 3a07 	vldr	s7, [sp, #28]
 8010206:	ed9d 1a13 	vldr	s2, [sp, #76]	; 0x4c
 801020a:	ed9d 3a06 	vldr	s6, [sp, #24]
 801020e:	eddd 0a12 	vldr	s1, [sp, #72]	; 0x48
 8010212:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
 8010216:	7820      	ldrb	r0, [r4, #0]
 8010218:	f50d 6e4b 	add.w	lr, sp, #3248	; 0xcb0
 801021c:	f50d 6c34 	add.w	ip, sp, #2880	; 0xb40
 8010220:	f50d 631d 	add.w	r3, sp, #2512	; 0x9d0
 8010224:	f60d 013c 	addw	r1, sp, #2108	; 0x83c
 8010228:	f50d 6206 	add.w	r2, sp, #2144	; 0x860
 801022c:	f50d 6462 	add.w	r4, sp, #3616	; 0xe20
 8010230:	edc9 3a73 	vstr	s7, [r9, #460]	; 0x1cc
 8010234:	ed89 1abc 	vstr	s2, [r9, #752]	; 0x2f0
 8010238:	ed89 3a74 	vstr	s6, [r9, #464]	; 0x1d0
 801023c:	edc9 0abd 	vstr	s1, [r9, #756]	; 0x2f4
 8010240:	ed89 0abe 	vstr	s0, [r9, #760]	; 0x2f8
 8010244:	f889 51ac 	strb.w	r5, [r9, #428]	; 0x1ac
 8010248:	edc9 fab2 	vstr	s31, [r9, #712]	; 0x2c8
 801024c:	edc9 fab3 	vstr	s31, [r9, #716]	; 0x2cc
 8010250:	edc9 fab4 	vstr	s31, [r9, #720]	; 0x2d0
 8010254:	edc9 fab5 	vstr	s31, [r9, #724]	; 0x2d4
 8010258:	edc9 fab6 	vstr	s31, [r9, #728]	; 0x2d8
 801025c:	edc9 fab7 	vstr	s31, [r9, #732]	; 0x2dc
 8010260:	edc9 fab8 	vstr	s31, [r9, #736]	; 0x2e0
 8010264:	edc9 fab9 	vstr	s31, [r9, #740]	; 0x2e4
 8010268:	edc9 faba 	vstr	s31, [r9, #744]	; 0x2e8
 801026c:	ed89 9abb 	vstr	s18, [r9, #748]	; 0x2ec
 8010270:	edc9 fabf 	vstr	s31, [r9, #764]	; 0x2fc
 8010274:	edc9 fac0 	vstr	s31, [r9, #768]	; 0x300
 8010278:	edc9 fac1 	vstr	s31, [r9, #772]	; 0x304
 801027c:	edc9 fac2 	vstr	s31, [r9, #776]	; 0x308
 8010280:	ed89 9ac5 	vstr	s18, [r9, #788]	; 0x314
 8010284:	edc9 fac3 	vstr	s31, [r9, #780]	; 0x30c
 8010288:	edc9 fac4 	vstr	s31, [r9, #784]	; 0x310
 801028c:	e9cd e401 	strd	lr, r4, [sp, #4]
 8010290:	9603      	str	r6, [sp, #12]
 8010292:	f8cd c000 	str.w	ip, [sp]
 8010296:	f7fe fccf 	bl	800ec38 <DataHist_parameters>
 801029a:	f609 1238 	addw	r2, r9, #2360	; 0x938
 801029e:	f509 6313 	add.w	r3, r9, #2352	; 0x930
 80102a2:	9205      	str	r2, [sp, #20]
 80102a4:	edc3 fa00 	vstr	s31, [r3]
 80102a8:	f609 1164 	addw	r1, r9, #2404	; 0x964
 80102ac:	9b05      	ldr	r3, [sp, #20]
 80102ae:	9106      	str	r1, [sp, #24]
 80102b0:	f609 1a34 	addw	sl, r9, #2356	; 0x934
 80102b4:	edca fa00 	vstr	s31, [sl]
 80102b8:	f509 6217 	add.w	r2, r9, #2416	; 0x970
 80102bc:	edc3 fa00 	vstr	s31, [r3]
 80102c0:	9b06      	ldr	r3, [sp, #24]
 80102c2:	9207      	str	r2, [sp, #28]
 80102c4:	f609 183c 	addw	r8, r9, #2364	; 0x93c
 80102c8:	f509 6e14 	add.w	lr, r9, #2368	; 0x940
 80102cc:	f609 1c5c 	addw	ip, r9, #2396	; 0x95c
 80102d0:	f609 1744 	addw	r7, r9, #2372	; 0x944
 80102d4:	f509 6616 	add.w	r6, r9, #2400	; 0x960
 80102d8:	f609 1548 	addw	r5, r9, #2376	; 0x948
 80102dc:	ed88 8a00 	vstr	s16, [r8]
 80102e0:	edce fa00 	vstr	s31, [lr]
 80102e4:	edcc fa00 	vstr	s31, [ip]
 80102e8:	edc7 fa00 	vstr	s31, [r7]
 80102ec:	edc6 fa00 	vstr	s31, [r6]
 80102f0:	edc5 fa00 	vstr	s31, [r5]
 80102f4:	edc3 fa00 	vstr	s31, [r3]
 80102f8:	9b07      	ldr	r3, [sp, #28]
 80102fa:	f609 1454 	addw	r4, r9, #2388	; 0x954
 80102fe:	f609 1058 	addw	r0, r9, #2392	; 0x958
 8010302:	f609 1168 	addw	r1, r9, #2408	; 0x968
 8010306:	f8c9 b94c 	str.w	fp, [r9, #2380]	; 0x94c
 801030a:	f8a9 b950 	strh.w	fp, [r9, #2384]	; 0x950
 801030e:	edc4 fa00 	vstr	s31, [r4]
 8010312:	ed80 8a00 	vstr	s16, [r0]
 8010316:	edc1 fa00 	vstr	s31, [r1]
 801031a:	edc3 fa00 	vstr	s31, [r3]
 801031e:	230a      	movs	r3, #10
 8010320:	f609 126c 	addw	r2, r9, #2412	; 0x96c
 8010324:	edc2 fa00 	vstr	s31, [r2]
 8010328:	f889 b978 	strb.w	fp, [r9, #2424]	; 0x978
 801032c:	f8c9 3974 	str.w	r3, [r9, #2420]	; 0x974
 8010330:	f60d 6d54 	addw	sp, sp, #3668	; 0xe54
 8010334:	ecbd 8b10 	vpop	{d8-d15}
 8010338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801033c <output_update>:
 801033c:	ed90 7a00 	vldr	s14, [r0]
 8010340:	edd0 7a01 	vldr	s15, [r0, #4]
 8010344:	edd0 5a02 	vldr	s11, [r0, #8]
 8010348:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801034c:	ee27 6a07 	vmul.f32	s12, s14, s14
 8010350:	ed90 5a03 	vldr	s10, [r0, #12]
 8010354:	ee27 4aa5 	vmul.f32	s8, s15, s11
 8010358:	ee36 6a26 	vadd.f32	s12, s12, s13
 801035c:	ee67 6a05 	vmul.f32	s13, s14, s10
 8010360:	ee36 6a06 	vadd.f32	s12, s12, s12
 8010364:	ee27 7a25 	vmul.f32	s14, s14, s11
 8010368:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801036c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8010370:	ee76 6a84 	vadd.f32	s13, s13, s8
 8010374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010378:	f89d c01c 	ldrb.w	ip, [sp, #28]
 801037c:	460f      	mov	r7, r1
 801037e:	4615      	mov	r5, r2
 8010380:	461e      	mov	r6, r3
 8010382:	ee74 5ac6 	vsub.f32	s11, s9, s12
 8010386:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801038a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801038e:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010392:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8010396:	f1bc 0f00 	cmp.w	ip, #0
 801039a:	d146      	bne.n	801042a <output_update+0xee>
 801039c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103a0:	eef1 6a66 	vneg.f32	s13, s13
 80103a4:	edc3 7a01 	vstr	s15, [r3, #4]
 80103a8:	edc3 6a00 	vstr	s13, [r3]
 80103ac:	edc3 5a02 	vstr	s11, [r3, #8]
 80103b0:	4662      	mov	r2, ip
 80103b2:	4629      	mov	r1, r5
 80103b4:	4604      	mov	r4, r0
 80103b6:	f7ff f953 	bl	800f660 <q2hpr>
 80103ba:	edd5 6a01 	vldr	s13, [r5, #4]
 80103be:	ed95 7a00 	vldr	s14, [r5]
 80103c2:	edd5 7a02 	vldr	s15, [r5, #8]
 80103c6:	ed9f 6a44 	vldr	s12, [pc, #272]	; 80104d8 <output_update+0x19c>
 80103ca:	ee27 7a06 	vmul.f32	s14, s14, s12
 80103ce:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 80103d2:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 80103d6:	ed85 7a00 	vstr	s14, [r5]
 80103da:	edc5 6a01 	vstr	s13, [r5, #4]
 80103de:	edc5 7a02 	vstr	s15, [r5, #8]
 80103e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80103e6:	edd6 7a00 	vldr	s15, [r6]
 80103ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80103ee:	6822      	ldr	r2, [r4, #0]
 80103f0:	edc8 7a00 	vstr	s15, [r8]
 80103f4:	ed97 7a00 	vldr	s14, [r7]
 80103f8:	edd6 7a01 	vldr	s15, [r6, #4]
 80103fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010400:	edc8 7a01 	vstr	s15, [r8, #4]
 8010404:	ed97 7a02 	vldr	s14, [r7, #8]
 8010408:	edd6 7a02 	vldr	s15, [r6, #8]
 801040c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010410:	edc8 7a02 	vstr	s15, [r8, #8]
 8010414:	edd4 7a02 	vldr	s15, [r4, #8]
 8010418:	eef1 7a67 	vneg.f32	s15, s15
 801041c:	6863      	ldr	r3, [r4, #4]
 801041e:	edc4 7a02 	vstr	s15, [r4, #8]
 8010422:	6062      	str	r2, [r4, #4]
 8010424:	6023      	str	r3, [r4, #0]
 8010426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801042a:	f1bc 0f01 	cmp.w	ip, #1
 801042e:	d015      	beq.n	801045c <output_update+0x120>
 8010430:	ed9f 6a29 	vldr	s12, [pc, #164]	; 80104d8 <output_update+0x19c>
 8010434:	edd2 6a00 	vldr	s13, [r2]
 8010438:	ed92 7a01 	vldr	s14, [r2, #4]
 801043c:	edd2 7a02 	vldr	s15, [r2, #8]
 8010440:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010444:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010448:	ee67 7a86 	vmul.f32	s15, s15, s12
 801044c:	edc2 6a00 	vstr	s13, [r2]
 8010450:	ed82 7a01 	vstr	s14, [r2, #4]
 8010454:	edc2 7a02 	vstr	s15, [r2, #8]
 8010458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801045c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010460:	eef1 6a66 	vneg.f32	s13, s13
 8010464:	ee36 6a64 	vsub.f32	s12, s12, s9
 8010468:	edc3 7a00 	vstr	s15, [r3]
 801046c:	edc3 6a01 	vstr	s13, [r3, #4]
 8010470:	ed83 6a02 	vstr	s12, [r3, #8]
 8010474:	4662      	mov	r2, ip
 8010476:	4629      	mov	r1, r5
 8010478:	f7ff f8f2 	bl	800f660 <q2hpr>
 801047c:	edd5 6a00 	vldr	s13, [r5]
 8010480:	ed95 7a01 	vldr	s14, [r5, #4]
 8010484:	edd5 7a02 	vldr	s15, [r5, #8]
 8010488:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80104d8 <output_update+0x19c>
 801048c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010490:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010494:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010498:	ed85 7a01 	vstr	s14, [r5, #4]
 801049c:	edc5 6a00 	vstr	s13, [r5]
 80104a0:	edc5 7a02 	vstr	s15, [r5, #8]
 80104a4:	ed97 7a00 	vldr	s14, [r7]
 80104a8:	edd6 7a00 	vldr	s15, [r6]
 80104ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104b0:	edc8 7a00 	vstr	s15, [r8]
 80104b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80104b8:	edd6 7a01 	vldr	s15, [r6, #4]
 80104bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104c0:	edc8 7a01 	vstr	s15, [r8, #4]
 80104c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80104c8:	edd6 7a02 	vldr	s15, [r6, #8]
 80104cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104d0:	edc8 7a02 	vstr	s15, [r8, #8]
 80104d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d8:	42652ee1 	.word	0x42652ee1

080104dc <kalman_3gyro.constprop.0>:
 80104dc:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 80104e0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80104e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e8:	ed2d 8b10 	vpush	{d8-d15}
 80104ec:	edd2 6a04 	vldr	s13, [r2, #16]
 80104f0:	ed92 aa02 	vldr	s20, [r2, #8]
 80104f4:	edd2 8a03 	vldr	s17, [r2, #12]
 80104f8:	ed92 6a05 	vldr	s12, [r2, #20]
 80104fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010500:	edd2 7a00 	vldr	s15, [r2]
 8010504:	f2ad 7dc4 	subw	sp, sp, #1988	; 0x7c4
 8010508:	6854      	ldr	r4, [r2, #4]
 801050a:	4de3      	ldr	r5, [pc, #908]	; (8010898 <kalman_3gyro.constprop.0+0x3bc>)
 801050c:	4683      	mov	fp, r0
 801050e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 8010512:	9108      	str	r1, [sp, #32]
 8010514:	460e      	mov	r6, r1
 8010516:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
 801051a:	2100      	movs	r1, #0
 801051c:	9321      	str	r3, [sp, #132]	; 0x84
 801051e:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010522:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
 8010526:	edcd 6a1a 	vstr	s13, [sp, #104]	; 0x68
 801052a:	ed8d 6a1b 	vstr	s12, [sp, #108]	; 0x6c
 801052e:	ed8d 7a78 	vstr	s14, [sp, #480]	; 0x1e0
 8010532:	edcd 7a40 	vstr	s15, [sp, #256]	; 0x100
 8010536:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 801053a:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 801053e:	edcd 6a76 	vstr	s13, [sp, #472]	; 0x1d8
 8010542:	ed8d 6a77 	vstr	s12, [sp, #476]	; 0x1dc
 8010546:	ed8d 0a43 	vstr	s0, [sp, #268]	; 0x10c
 801054a:	ed8d aa70 	vstr	s20, [sp, #448]	; 0x1c0
 801054e:	ed8d aa71 	vstr	s20, [sp, #452]	; 0x1c4
 8010552:	ed8d aa72 	vstr	s20, [sp, #456]	; 0x1c8
 8010556:	edcd 8a73 	vstr	s17, [sp, #460]	; 0x1cc
 801055a:	edcd 8a74 	vstr	s17, [sp, #464]	; 0x1d0
 801055e:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 8010562:	eeb0 8a60 	vmov.f32	s16, s1
 8010566:	9548      	str	r5, [sp, #288]	; 0x120
 8010568:	946d      	str	r4, [sp, #436]	; 0x1b4
 801056a:	946e      	str	r4, [sp, #440]	; 0x1b8
 801056c:	946f      	str	r4, [sp, #444]	; 0x1bc
 801056e:	ed8d 0a44 	vstr	s0, [sp, #272]	; 0x110
 8010572:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 8010576:	ed8d 1a04 	vstr	s2, [sp, #16]
 801057a:	f00a fba6 	bl	801acca <memset>
 801057e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010582:	f50d 61d7 	add.w	r1, sp, #1720	; 0x6b8
 8010586:	600b      	str	r3, [r1, #0]
 8010588:	f20d 61ec 	addw	r1, sp, #1772	; 0x6ec
 801058c:	600b      	str	r3, [r1, #0]
 801058e:	f50d 61e4 	add.w	r1, sp, #1824	; 0x720
 8010592:	600b      	str	r3, [r1, #0]
 8010594:	f20d 7154 	addw	r1, sp, #1876	; 0x754
 8010598:	600b      	str	r3, [r1, #0]
 801059a:	f89b 200d 	ldrb.w	r2, [fp, #13]
 801059e:	f50d 61f1 	add.w	r1, sp, #1928	; 0x788
 80105a2:	600b      	str	r3, [r1, #0]
 80105a4:	f20d 71bc 	addw	r1, sp, #1980	; 0x7bc
 80105a8:	600b      	str	r3, [r1, #0]
 80105aa:	2a00      	cmp	r2, #0
 80105ac:	f001 82aa 	beq.w	8011b04 <kalman_3gyro.constprop.0+0x1628>
 80105b0:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 80105b4:	ed96 5a02 	vldr	s10, [r6, #8]
 80105b8:	edd6 5a01 	vldr	s11, [r6, #4]
 80105bc:	ed96 3a00 	vldr	s6, [r6]
 80105c0:	ee25 9a86 	vmul.f32	s18, s11, s12
 80105c4:	ee75 9a05 	vadd.f32	s19, s10, s10
 80105c8:	ee75 5aa5 	vadd.f32	s11, s11, s11
 80105cc:	ee25 5a06 	vmul.f32	s10, s10, s12
 80105d0:	ee23 6a06 	vmul.f32	s12, s6, s12
 80105d4:	ee33 3a03 	vadd.f32	s6, s6, s6
 80105d8:	9b08      	ldr	r3, [sp, #32]
 80105da:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 80105de:	ed93 7a04 	vldr	s14, [r3, #16]
 80105e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80105e6:	edd3 6a05 	vldr	s13, [r3, #20]
 80105ea:	eeb1 4a47 	vneg.f32	s8, s14
 80105ee:	eef1 4a67 	vneg.f32	s9, s15
 80105f2:	eef1 3a66 	vneg.f32	s7, s13
 80105f6:	ee34 1a04 	vadd.f32	s2, s8, s8
 80105fa:	ee77 1a07 	vadd.f32	s3, s14, s14
 80105fe:	ee34 2aa4 	vadd.f32	s4, s9, s9
 8010602:	ee77 2aa7 	vadd.f32	s5, s15, s15
 8010606:	2300      	movs	r3, #0
 8010608:	ee33 0aa3 	vadd.f32	s0, s7, s7
 801060c:	ee76 0aa6 	vadd.f32	s1, s13, s13
 8010610:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 8010614:	ed81 1a00 	vstr	s2, [r1]
 8010618:	f20d 617c 	addw	r1, sp, #1660	; 0x67c
 801061c:	edc1 1a00 	vstr	s3, [r1]
 8010620:	f20d 6214 	addw	r2, sp, #1556	; 0x614
 8010624:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 8010628:	ed81 2a00 	vstr	s4, [r1]
 801062c:	edc2 9a00 	vstr	s19, [r2]
 8010630:	f20d 6154 	addw	r1, sp, #1620	; 0x654
 8010634:	f50d 62c3 	add.w	r2, sp, #1560	; 0x618
 8010638:	edc1 2a00 	vstr	s5, [r1]
 801063c:	ed82 9a00 	vstr	s18, [r2]
 8010640:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
 8010644:	f50d 62c8 	add.w	r2, sp, #1600	; 0x640
 8010648:	600b      	str	r3, [r1, #0]
 801064a:	ed82 5a00 	vstr	s10, [r2]
 801064e:	f20d 6144 	addw	r1, sp, #1604	; 0x644
 8010652:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 8010656:	600b      	str	r3, [r1, #0]
 8010658:	ed82 3a00 	vstr	s6, [r2]
 801065c:	f50d 61cf 	add.w	r1, sp, #1656	; 0x678
 8010660:	f50d 62ce 	add.w	r2, sp, #1648	; 0x670
 8010664:	600b      	str	r3, [r1, #0]
 8010666:	edc2 5a00 	vstr	s11, [r2]
 801066a:	f20d 611c 	addw	r1, sp, #1564	; 0x61c
 801066e:	f20d 6274 	addw	r2, sp, #1652	; 0x674
 8010672:	600b      	str	r3, [r1, #0]
 8010674:	ed82 6a00 	vstr	s12, [r2]
 8010678:	f50d 61ca 	add.w	r1, sp, #1616	; 0x650
 801067c:	f20d 624c 	addw	r2, sp, #1612	; 0x64c
 8010680:	600b      	str	r3, [r1, #0]
 8010682:	ed82 0a00 	vstr	s0, [r2]
 8010686:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 801068a:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 801068e:	600b      	str	r3, [r1, #0]
 8010690:	edc2 0a00 	vstr	s1, [r2]
 8010694:	2100      	movs	r1, #0
 8010696:	2230      	movs	r2, #48	; 0x30
 8010698:	a879      	add	r0, sp, #484	; 0x1e4
 801069a:	edcd 6a4a 	vstr	s13, [sp, #296]	; 0x128
 801069e:	ed8d 7a4f 	vstr	s14, [sp, #316]	; 0x13c
 80106a2:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 80106a6:	9349      	str	r3, [sp, #292]	; 0x124
 80106a8:	934d      	str	r3, [sp, #308]	; 0x134
 80106aa:	9351      	str	r3, [sp, #324]	; 0x144
 80106ac:	edcd 3a4c 	vstr	s7, [sp, #304]	; 0x130
 80106b0:	ed8d 4a4b 	vstr	s8, [sp, #300]	; 0x12c
 80106b4:	edcd 4a50 	vstr	s9, [sp, #320]	; 0x140
 80106b8:	e9cd 4428 	strd	r4, r4, [sp, #160]	; 0xa0
 80106bc:	942a      	str	r4, [sp, #168]	; 0xa8
 80106be:	f00a fb04 	bl	801acca <memset>
 80106c2:	eddb 6a06 	vldr	s13, [fp, #24]
 80106c6:	ed9b 7a07 	vldr	s14, [fp, #28]
 80106ca:	eddb 7a08 	vldr	s15, [fp, #32]
 80106ce:	ee68 6a26 	vmul.f32	s13, s16, s13
 80106d2:	ee28 7a07 	vmul.f32	s14, s16, s14
 80106d6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80106da:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 80106de:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80106e2:	ed8d 7a14 	vstr	s14, [sp, #80]	; 0x50
 80106e6:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f043 83d2 	bne.w	8013e94 <kalman_3gyro.constprop.0+0x39b8>
 80106f0:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	f043 80fb 	bne.w	80138f0 <kalman_3gyro.constprop.0+0x3414>
 80106fa:	f20b 43b4 	addw	r3, fp, #1204	; 0x4b4
 80106fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8010700:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 8010704:	9303      	str	r3, [sp, #12]
 8010706:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 801070a:	9310      	str	r3, [sp, #64]	; 0x40
 801070c:	f50b 6a97 	add.w	sl, fp, #1208	; 0x4b8
 8010710:	f50b 66c5 	add.w	r6, fp, #1576	; 0x628
 8010714:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 8010718:	930f      	str	r3, [sp, #60]	; 0x3c
 801071a:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 801071e:	edd0 7a00 	vldr	s15, [r0]
 8010722:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010726:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 801072a:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 801072e:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 8010732:	ed93 6a00 	vldr	s12, [r3]
 8010736:	ed91 7a00 	vldr	s14, [r1]
 801073a:	2300      	movs	r3, #0
 801073c:	edd2 6a00 	vldr	s13, [r2]
 8010740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010744:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
 8010748:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 801074c:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 8010750:	ed8d 6a37 	vstr	s12, [sp, #220]	; 0xdc
 8010754:	9338      	str	r3, [sp, #224]	; 0xe0
 8010756:	9339      	str	r3, [sp, #228]	; 0xe4
 8010758:	933a      	str	r3, [sp, #232]	; 0xe8
 801075a:	933b      	str	r3, [sp, #236]	; 0xec
 801075c:	d14e      	bne.n	80107fc <kalman_3gyro.constprop.0+0x320>
 801075e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010766:	d149      	bne.n	80107fc <kalman_3gyro.constprop.0+0x320>
 8010768:	eef5 6a40 	vcmp.f32	s13, #0.0
 801076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010770:	d144      	bne.n	80107fc <kalman_3gyro.constprop.0+0x320>
 8010772:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8010776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077a:	d13f      	bne.n	80107fc <kalman_3gyro.constprop.0+0x320>
 801077c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010780:	2200      	movs	r2, #0
 8010782:	9821      	ldr	r0, [sp, #132]	; 0x84
 8010784:	9334      	str	r3, [sp, #208]	; 0xd0
 8010786:	9335      	str	r3, [sp, #212]	; 0xd4
 8010788:	9336      	str	r3, [sp, #216]	; 0xd8
 801078a:	7803      	ldrb	r3, [r0, #0]
 801078c:	ed90 7a03 	vldr	s14, [r0, #12]
 8010790:	edd0 6a01 	vldr	s13, [r0, #4]
 8010794:	edd0 7a02 	vldr	s15, [r0, #8]
 8010798:	9137      	str	r1, [sp, #220]	; 0xdc
 801079a:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 801079e:	2b00      	cmp	r3, #0
 80107a0:	f003 849e 	beq.w	80140e0 <kalman_3gyro.constprop.0+0x3c04>
 80107a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80107a8:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80107ac:	eee7 7a07 	vfma.f32	s15, s14, s14
 80107b0:	eef1 6ae7 	vsqrt.f32	s13, s15
 80107b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80107b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80107bc:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80107c0:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 80107c4:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 80107c8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80107cc:	2100      	movs	r1, #0
 80107ce:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80107d2:	f00a fa7a 	bl	801acca <memset>
 80107d6:	4b31      	ldr	r3, [pc, #196]	; (801089c <kalman_3gyro.constprop.0+0x3c0>)
 80107d8:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 80107dc:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 80107e0:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 80107e4:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80107e8:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 80107ec:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 80107f0:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 80107f4:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 80107f8:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80107fc:	9b08      	ldr	r3, [sp, #32]
 80107fe:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80108a0 <kalman_3gyro.constprop.0+0x3c4>
 8010802:	edd3 7a01 	vldr	s15, [r3, #4]
 8010806:	ed93 7a00 	vldr	s14, [r3]
 801080a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801080e:	edd3 5a02 	vldr	s11, [r3, #8]
 8010812:	eee7 6a07 	vfma.f32	s13, s14, s14
 8010816:	eee5 6aa5 	vfma.f32	s13, s11, s11
 801081a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801081e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010822:	f101 810f 	bmi.w	8011a44 <kalman_3gyro.constprop.0+0x1568>
 8010826:	eef1 9ae6 	vsqrt.f32	s19, s13
 801082a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801082e:	ee79 6ae6 	vsub.f32	s13, s19, s13
 8010832:	eef6 ca00 	vmov.f32	s25, #96	; 0x3f000000  0.5
 8010836:	eef0 6ae6 	vabs.f32	s13, s13
 801083a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 801083e:	ee76 caec 	vsub.f32	s25, s13, s25
 8010842:	edd3 4a04 	vldr	s9, [r3, #16]
 8010846:	edd3 aa03 	vldr	s21, [r3, #12]
 801084a:	ee64 6aa4 	vmul.f32	s13, s9, s9
 801084e:	ed93 8a05 	vldr	s16, [r3, #20]
 8010852:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010856:	eeea 6aaa 	vfma.f32	s13, s21, s21
 801085a:	ee86 0a29 	vdiv.f32	s0, s12, s19
 801085e:	eee8 6a08 	vfma.f32	s13, s16, s16
 8010862:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 80108a0 <kalman_3gyro.constprop.0+0x3c4>
 8010866:	eef4 6ac6 	vcmpe.f32	s13, s12
 801086a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801086e:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 8010872:	bf54      	ite	pl
 8010874:	eeb1 eae6 	vsqrtpl.f32	s28, s13
 8010878:	ed9f ea0a 	vldrmi	s28, [pc, #40]	; 80108a4 <kalman_3gyro.constprop.0+0x3c8>
 801087c:	f20b 40bc 	addw	r0, fp, #1212	; 0x4bc
 8010880:	eecd 6a0e 	vdiv.f32	s13, s26, s28
 8010884:	ed90 5a00 	vldr	s10, [r0]
 8010888:	f50b 639d 	add.w	r3, fp, #1256	; 0x4e8
 801088c:	9306      	str	r3, [sp, #24]
 801088e:	f20b 43e4 	addw	r3, fp, #1252	; 0x4e4
 8010892:	930a      	str	r3, [sp, #40]	; 0x28
 8010894:	9b06      	ldr	r3, [sp, #24]
 8010896:	e009      	b.n	80108ac <kalman_3gyro.constprop.0+0x3d0>
 8010898:	3a9d4952 	.word	0x3a9d4952
 801089c:	40a00000 	.word	0x40a00000
 80108a0:	3c23d70a 	.word	0x3c23d70a
 80108a4:	3dcccccd 	.word	0x3dcccccd
 80108a8:	4b000000 	.word	0x4b000000
 80108ac:	f20b 42dc 	addw	r2, fp, #1244	; 0x4dc
 80108b0:	f20b 4eec 	addw	lr, fp, #1260	; 0x4ec
 80108b4:	ee27 ba00 	vmul.f32	s22, s14, s0
 80108b8:	ee6a aaa6 	vmul.f32	s21, s21, s13
 80108bc:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80108c0:	ee28 8a26 	vmul.f32	s16, s16, s13
 80108c4:	ed93 6a00 	vldr	s12, [r3]
 80108c8:	edd2 6a00 	vldr	s13, [r2]
 80108cc:	ee27 9a80 	vmul.f32	s18, s15, s0
 80108d0:	eeb0 da45 	vmov.f32	s26, s10
 80108d4:	ee25 0a80 	vmul.f32	s0, s11, s0
 80108d8:	ed9e 5a00 	vldr	s10, [lr]
 80108dc:	9020      	str	r0, [sp, #128]	; 0x80
 80108de:	f20b 70a4 	addw	r0, fp, #1956	; 0x7a4
 80108e2:	9017      	str	r0, [sp, #92]	; 0x5c
 80108e4:	f20b 70bc 	addw	r0, fp, #1980	; 0x7bc
 80108e8:	f20b 642c 	addw	r4, fp, #1580	; 0x62c
 80108ec:	9019      	str	r0, [sp, #100]	; 0x64
 80108ee:	f20b 709c 	addw	r0, fp, #1948	; 0x79c
 80108f2:	9402      	str	r4, [sp, #8]
 80108f4:	9011      	str	r0, [sp, #68]	; 0x44
 80108f6:	f50b 60f5 	add.w	r0, fp, #1960	; 0x7a8
 80108fa:	9018      	str	r0, [sp, #96]	; 0x60
 80108fc:	9802      	ldr	r0, [sp, #8]
 80108fe:	f20b 41c4 	addw	r1, fp, #1220	; 0x4c4
 8010902:	f50b 6999 	add.w	r9, fp, #1224	; 0x4c8
 8010906:	f50b 689c 	add.w	r8, fp, #1248	; 0x4e0
 801090a:	f50b 6cc7 	add.w	ip, fp, #1592	; 0x638
 801090e:	f50b 67ca 	add.w	r7, fp, #1616	; 0x650
 8010912:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 8010916:	edd8 1a00 	vldr	s3, [r8]
 801091a:	edd0 0a00 	vldr	s1, [r0]
 801091e:	ed91 2a00 	vldr	s4, [r1]
 8010922:	ed8d ba2b 	vstr	s22, [sp, #172]	; 0xac
 8010926:	ed8d 9a2c 	vstr	s18, [sp, #176]	; 0xb0
 801092a:	edcd aa2e 	vstr	s21, [sp, #184]	; 0xb8
 801092e:	edcd 4a2f 	vstr	s9, [sp, #188]	; 0xbc
 8010932:	ed8d 8a30 	vstr	s16, [sp, #192]	; 0xc0
 8010936:	edcd 6a05 	vstr	s13, [sp, #20]
 801093a:	ed8d 6a06 	vstr	s12, [sp, #24]
 801093e:	eddc 6a00 	vldr	s13, [ip]
 8010942:	ed99 6a00 	vldr	s12, [r9]
 8010946:	ed8d 5a07 	vstr	s10, [sp, #28]
 801094a:	9501      	str	r5, [sp, #4]
 801094c:	ed8d 0a2d 	vstr	s0, [sp, #180]	; 0xb4
 8010950:	edd7 2a00 	vldr	s5, [r7]
 8010954:	9801      	ldr	r0, [sp, #4]
 8010956:	f50b 62cb 	add.w	r2, fp, #1624	; 0x658
 801095a:	ed90 4a00 	vldr	s8, [r0]
 801095e:	ed92 ca00 	vldr	s24, [r2]
 8010962:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010964:	f20b 634c 	addw	r3, fp, #1612	; 0x64c
 8010968:	edd0 ba00 	vldr	s23, [r0]
 801096c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801096e:	ed93 fa00 	vldr	s30, [r3]
 8010972:	ed90 5a00 	vldr	s10, [r0]
 8010976:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010978:	ed8d ca0c 	vstr	s24, [sp, #48]	; 0x30
 801097c:	ed93 ca00 	vldr	s24, [r3]
 8010980:	9b03      	ldr	r3, [sp, #12]
 8010982:	edcd ba0a 	vstr	s23, [sp, #40]	; 0x28
 8010986:	edd3 ba00 	vldr	s23, [r3]
 801098a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801098c:	ed8d 5a1c 	vstr	s10, [sp, #112]	; 0x70
 8010990:	ed93 5a00 	vldr	s10, [r3]
 8010994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010996:	f50b 649e 	add.w	r4, fp, #1264	; 0x4f0
 801099a:	ed94 3a00 	vldr	s6, [r4]
 801099e:	ed8d 5a13 	vstr	s10, [sp, #76]	; 0x4c
 80109a2:	ed93 5a00 	vldr	s10, [r3]
 80109a6:	eeb8 1a00 	vmov.f32	s2, #128	; 0xc0000000 -2.0
 80109aa:	9819      	ldr	r0, [sp, #100]	; 0x64
 80109ac:	f20b 6134 	addw	r1, fp, #1588	; 0x634
 80109b0:	f20b 45cc 	addw	r5, fp, #1228	; 0x4cc
 80109b4:	f20b 683c 	addw	r8, fp, #1596	; 0x63c
 80109b8:	f50b 6ecc 	add.w	lr, fp, #1632	; 0x660
 80109bc:	f20b 6c54 	addw	ip, fp, #1620	; 0x654
 80109c0:	f20b 675c 	addw	r7, fp, #1628	; 0x65c
 80109c4:	edd7 fa00 	vldr	s31, [r7]
 80109c8:	edde da00 	vldr	s27, [lr]
 80109cc:	eddc ea00 	vldr	s29, [ip]
 80109d0:	ed8d 4a09 	vstr	s8, [sp, #36]	; 0x24
 80109d4:	edd5 3a00 	vldr	s7, [r5]
 80109d8:	ed8d 3a0b 	vstr	s6, [sp, #44]	; 0x2c
 80109dc:	ed98 4a00 	vldr	s8, [r8]
 80109e0:	ed91 3a00 	vldr	s6, [r1]
 80109e4:	ed8d 5a1d 	vstr	s10, [sp, #116]	; 0x74
 80109e8:	ed90 5a00 	vldr	s10, [r0]
 80109ec:	eed0 6a81 	vfnms.f32	s13, s1, s2
 80109f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80109f2:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 80109f6:	ed90 5a00 	vldr	s10, [r0]
 80109fa:	ee9d 6a01 	vfnms.f32	s12, s26, s2
 80109fe:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8010a02:	edd6 2a00 	vldr	s5, [r6]
 8010a06:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010a08:	ed8d 5a16 	vstr	s10, [sp, #88]	; 0x58
 8010a0c:	eddd 0a16 	vldr	s1, [sp, #88]	; 0x58
 8010a10:	ed90 5a00 	vldr	s10, [r0]
 8010a14:	ee92 3a81 	vfnms.f32	s6, s5, s2
 8010a18:	ee36 6a21 	vadd.f32	s12, s12, s3
 8010a1c:	eddd 2a1c 	vldr	s5, [sp, #112]	; 0x70
 8010a20:	eddd 1a1d 	vldr	s3, [sp, #116]	; 0x74
 8010a24:	f50b 63f8 	add.w	r3, fp, #1984	; 0x7c0
 8010a28:	ee90 5a81 	vfnms.f32	s10, s1, s2
 8010a2c:	edd3 0a00 	vldr	s1, [r3]
 8010a30:	eed1 2a81 	vfnms.f32	s5, s3, s2
 8010a34:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
 8010a38:	9324      	str	r3, [sp, #144]	; 0x90
 8010a3a:	f20b 73cc 	addw	r3, fp, #1996	; 0x7cc
 8010a3e:	ee35 5a20 	vadd.f32	s10, s10, s1
 8010a42:	edd3 0a00 	vldr	s1, [r3]
 8010a46:	ed9a da00 	vldr	s26, [sl]
 8010a4a:	eeef 6aa1 	vfma.f32	s13, s31, s3
 8010a4e:	eddd fa09 	vldr	s31, [sp, #36]	; 0x24
 8010a52:	f50b 62f4 	add.w	r2, fp, #1952	; 0x7a0
 8010a56:	edcd 0a1c 	vstr	s1, [sp, #112]	; 0x70
 8010a5a:	edd2 0a00 	vldr	s1, [r2]
 8010a5e:	ee9d 2a01 	vfnms.f32	s4, s26, s2
 8010a62:	eedf 3a81 	vfnms.f32	s7, s31, s2
 8010a66:	ed9d da05 	vldr	s26, [sp, #20]
 8010a6a:	eddd fa1e 	vldr	s31, [sp, #120]	; 0x78
 8010a6e:	f20b 71ac 	addw	r1, fp, #1964	; 0x7ac
 8010a72:	edcd 0a1f 	vstr	s1, [sp, #124]	; 0x7c
 8010a76:	edd1 0a00 	vldr	s1, [r1]
 8010a7a:	ee32 2a0d 	vadd.f32	s4, s4, s26
 8010a7e:	ee72 2aaf 	vadd.f32	s5, s5, s31
 8010a82:	ed9d da07 	vldr	s26, [sp, #28]
 8010a86:	eddd fa1c 	vldr	s31, [sp, #112]	; 0x70
 8010a8a:	edcd 0a1d 	vstr	s1, [sp, #116]	; 0x74
 8010a8e:	9327      	str	r3, [sp, #156]	; 0x9c
 8010a90:	9216      	str	r2, [sp, #88]	; 0x58
 8010a92:	f50b 63f9 	add.w	r3, fp, #1992	; 0x7c8
 8010a96:	f20b 72c4 	addw	r2, fp, #1988	; 0x7c4
 8010a9a:	f50b 69c6 	add.w	r9, fp, #1584	; 0x630
 8010a9e:	eead 6a21 	vfma.f32	s12, s26, s3
 8010aa2:	ee33 3a0f 	vadd.f32	s6, s6, s30
 8010aa6:	ed99 da00 	vldr	s26, [r9]
 8010aaa:	eeaf 5aa1 	vfma.f32	s10, s31, s3
 8010aae:	ed9d fa1d 	vldr	s30, [sp, #116]	; 0x74
 8010ab2:	9326      	str	r3, [sp, #152]	; 0x98
 8010ab4:	9123      	str	r1, [sp, #140]	; 0x8c
 8010ab6:	9225      	str	r2, [sp, #148]	; 0x94
 8010ab8:	eddd fa1f 	vldr	s31, [sp, #124]	; 0x7c
 8010abc:	ee9f fa81 	vfnms.f32	s30, s31, s2
 8010ac0:	ee9d 4a01 	vfnms.f32	s8, s26, s2
 8010ac4:	ed9d da06 	vldr	s26, [sp, #24]
 8010ac8:	ed5f 0a8a 	vldr	s1, [pc, #-552]	; 80108a4 <kalman_3gyro.constprop.0+0x3c8>
 8010acc:	eeb0 1a4f 	vmov.f32	s2, s30
 8010ad0:	ed9d fa13 	vldr	s30, [sp, #76]	; 0x4c
 8010ad4:	eead 2a21 	vfma.f32	s4, s26, s3
 8010ad8:	ed9d da0a 	vldr	s26, [sp, #40]	; 0x28
 8010adc:	ee6f fa20 	vmul.f32	s31, s30, s1
 8010ae0:	ed93 fa00 	vldr	s30, [r3]
 8010ae4:	ee73 3a8d 	vadd.f32	s7, s7, s26
 8010ae8:	ee34 4a2e 	vadd.f32	s8, s8, s29
 8010aec:	ed9d da0b 	vldr	s26, [sp, #44]	; 0x2c
 8010af0:	eddd ea0c 	vldr	s29, [sp, #48]	; 0x30
 8010af4:	ed8d fa05 	vstr	s30, [sp, #20]
 8010af8:	ed92 fa00 	vldr	s30, [r2]
 8010afc:	eeae 3aa1 	vfma.f32	s6, s29, s3
 8010b00:	eeed 3a21 	vfma.f32	s7, s26, s3
 8010b04:	eddd ea05 	vldr	s29, [sp, #20]
 8010b08:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 8010b0c:	ed8d fa07 	vstr	s30, [sp, #28]
 8010b10:	eeee 2aa1 	vfma.f32	s5, s29, s3
 8010b14:	ee2c fa20 	vmul.f32	s30, s24, s1
 8010b18:	eddd ea07 	vldr	s29, [sp, #28]
 8010b1c:	ee6b 0aa0 	vmul.f32	s1, s23, s1
 8010b20:	eead 4aa1 	vfma.f32	s8, s27, s3
 8010b24:	eecd da0c 	vdiv.f32	s27, s26, s24
 8010b28:	f50b 63fa 	add.w	r3, fp, #2000	; 0x7d0
 8010b2c:	ee27 ca2d 	vmul.f32	s24, s14, s27
 8010b30:	ee31 1a2e 	vadd.f32	s2, s2, s29
 8010b34:	ee26 6a0f 	vmul.f32	s12, s12, s30
 8010b38:	ee25 5a2f 	vmul.f32	s10, s10, s31
 8010b3c:	ee60 6aa6 	vmul.f32	s13, s1, s13
 8010b40:	edd3 ea00 	vldr	s29, [r3]
 8010b44:	ee22 2a0f 	vmul.f32	s4, s4, s30
 8010b48:	ee24 9a89 	vmul.f32	s18, s9, s18
 8010b4c:	eeae 1aa1 	vfma.f32	s2, s29, s3
 8010b50:	ee26 6a06 	vmul.f32	s12, s12, s12
 8010b54:	ee25 5a05 	vmul.f32	s10, s10, s10
 8010b58:	ee62 2aaf 	vmul.f32	s5, s5, s31
 8010b5c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8010b60:	ee20 3a83 	vmul.f32	s6, s1, s6
 8010b64:	eef0 4acc 	vabs.f32	s9, s24
 8010b68:	ed1f 7ab1 	vldr	s14, [pc, #-708]	; 80108a8 <kalman_3gyro.constprop.0+0x3cc>
 8010b6c:	ee63 3a8f 	vmul.f32	s7, s7, s30
 8010b70:	eea2 6a02 	vfma.f32	s12, s4, s4
 8010b74:	eea2 5aa2 	vfma.f32	s10, s5, s5
 8010b78:	ee21 1a2f 	vmul.f32	s2, s2, s31
 8010b7c:	eee3 6a03 	vfma.f32	s13, s6, s6
 8010b80:	ee20 4a84 	vmul.f32	s8, s1, s8
 8010b84:	eef4 4ac7 	vcmpe.f32	s9, s14
 8010b88:	eeaa 9a8b 	vfma.f32	s18, s21, s22
 8010b8c:	eea3 6aa3 	vfma.f32	s12, s7, s7
 8010b90:	eea1 5a01 	vfma.f32	s10, s2, s2
 8010b94:	eee4 6a04 	vfma.f32	s13, s8, s8
 8010b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b9c:	eea8 9a00 	vfma.f32	s18, s16, s0
 8010ba0:	eeb1 fac6 	vsqrt.f32	s30, s12
 8010ba4:	ee27 8aad 	vmul.f32	s16, s15, s27
 8010ba8:	eeb1 bac5 	vsqrt.f32	s22, s10
 8010bac:	ee65 daad 	vmul.f32	s27, s11, s27
 8010bb0:	eef1 aae6 	vsqrt.f32	s21, s13
 8010bb4:	931f      	str	r3, [sp, #124]	; 0x7c
 8010bb6:	d517      	bpl.n	8010be8 <kalman_3gyro.constprop.0+0x70c>
 8010bb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010bbc:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc4:	f2c1 8054 	blt.w	8011c70 <kalman_3gyro.constprop.0+0x1794>
 8010bc8:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8010bcc:	ee17 0a90 	vmov	r0, s15
 8010bd0:	f7ef fcbe 	bl	8000550 <__aeabi_f2d>
 8010bd4:	ec41 0b10 	vmov	d0, r0, r1
 8010bd8:	f008 fa1e 	bl	8019018 <floor>
 8010bdc:	ec51 0b10 	vmov	r0, r1, d0
 8010be0:	f7ef ffbe 	bl	8000b60 <__aeabi_d2f>
 8010be4:	ee0c 0a10 	vmov	s24, r0
 8010be8:	eeb0 7ac8 	vabs.f32	s14, s16
 8010bec:	ed5f 7ad2 	vldr	s15, [pc, #-840]	; 80108a8 <kalman_3gyro.constprop.0+0x3cc>
 8010bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf8:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 8010bfc:	d517      	bpl.n	8010c2e <kalman_3gyro.constprop.0+0x752>
 8010bfe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c02:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0a:	f2c1 8025 	blt.w	8011c58 <kalman_3gyro.constprop.0+0x177c>
 8010c0e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010c12:	ee17 0a90 	vmov	r0, s15
 8010c16:	f7ef fc9b 	bl	8000550 <__aeabi_f2d>
 8010c1a:	ec41 0b10 	vmov	d0, r0, r1
 8010c1e:	f008 f9fb 	bl	8019018 <floor>
 8010c22:	ec51 0b10 	vmov	r0, r1, d0
 8010c26:	f7ef ff9b 	bl	8000b60 <__aeabi_d2f>
 8010c2a:	ee08 0a10 	vmov	s16, r0
 8010c2e:	eeb0 7aed 	vabs.f32	s14, s27
 8010c32:	ed5f 7ae3 	vldr	s15, [pc, #-908]	; 80108a8 <kalman_3gyro.constprop.0+0x3cc>
 8010c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3e:	ed8d 8a32 	vstr	s16, [sp, #200]	; 0xc8
 8010c42:	d517      	bpl.n	8010c74 <kalman_3gyro.constprop.0+0x798>
 8010c44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c48:	eef4 dae7 	vcmpe.f32	s27, s15
 8010c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c50:	f2c0 87f6 	blt.w	8011c40 <kalman_3gyro.constprop.0+0x1764>
 8010c54:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8010c58:	ee17 0a90 	vmov	r0, s15
 8010c5c:	f7ef fc78 	bl	8000550 <__aeabi_f2d>
 8010c60:	ec41 0b10 	vmov	d0, r0, r1
 8010c64:	f008 f9d8 	bl	8019018 <floor>
 8010c68:	ec51 0b10 	vmov	r0, r1, d0
 8010c6c:	f7ef ff78 	bl	8000b60 <__aeabi_d2f>
 8010c70:	ee0d 0a90 	vmov	s27, r0
 8010c74:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 8010c78:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 8010c7c:	1e61      	subs	r1, r4, #1
 8010c7e:	b249      	sxtb	r1, r1
 8010c80:	2900      	cmp	r1, #0
 8010c82:	dd1a      	ble.n	8010cba <kalman_3gyro.constprop.0+0x7de>
 8010c84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010c88:	1ea0      	subs	r0, r4, #2
 8010c8a:	0089      	lsls	r1, r1, #2
 8010c8c:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 8010c90:	b2c0      	uxtb	r0, r0
 8010c92:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 8010c96:	440a      	add	r2, r1
 8010c98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8010c9c:	445b      	add	r3, fp
 8010c9e:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 8010ca2:	681d      	ldr	r5, [r3, #0]
 8010ca4:	6858      	ldr	r0, [r3, #4]
 8010ca6:	6899      	ldr	r1, [r3, #8]
 8010ca8:	60dd      	str	r5, [r3, #12]
 8010caa:	6118      	str	r0, [r3, #16]
 8010cac:	6159      	str	r1, [r3, #20]
 8010cae:	3b0c      	subs	r3, #12
 8010cb0:	4293      	cmp	r3, r2
 8010cb2:	d1f6      	bne.n	8010ca2 <kalman_3gyro.constprop.0+0x7c6>
 8010cb4:	9b03      	ldr	r3, [sp, #12]
 8010cb6:	edd3 ba00 	vldr	s23, [r3]
 8010cba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8010cbc:	ed8a ca00 	vstr	s24, [sl]
 8010cc0:	ed83 8a00 	vstr	s16, [r3]
 8010cc4:	9b01      	ldr	r3, [sp, #4]
 8010cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010cca:	edc3 da00 	vstr	s27, [r3]
 8010cce:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 8010cd2:	eec7 7a2b 	vdiv.f32	s15, s14, s23
 8010cd6:	3301      	adds	r3, #1
 8010cd8:	b2db      	uxtb	r3, r3
 8010cda:	429c      	cmp	r4, r3
 8010cdc:	bf28      	it	cs
 8010cde:	461c      	movcs	r4, r3
 8010ce0:	9b08      	ldr	r3, [sp, #32]
 8010ce2:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 8010ce6:	ed93 ca03 	vldr	s24, [r3, #12]
 8010cea:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8010cee:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8010f68 <kalman_3gyro.constprop.0+0xa8c>
 8010cf2:	eef0 6acc 	vabs.f32	s13, s24
 8010cf6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010cfa:	edd3 ba04 	vldr	s23, [r3, #16]
 8010cfe:	ed93 8a05 	vldr	s16, [r3, #20]
 8010d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d06:	ee67 baab 	vmul.f32	s23, s15, s23
 8010d0a:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010d0e:	d517      	bpl.n	8010d40 <kalman_3gyro.constprop.0+0x864>
 8010d10:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010d14:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1c:	f2c0 8784 	blt.w	8011c28 <kalman_3gyro.constprop.0+0x174c>
 8010d20:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8010d24:	ee17 0a90 	vmov	r0, s15
 8010d28:	f7ef fc12 	bl	8000550 <__aeabi_f2d>
 8010d2c:	ec41 0b10 	vmov	d0, r0, r1
 8010d30:	f008 f972 	bl	8019018 <floor>
 8010d34:	ec51 0b10 	vmov	r0, r1, d0
 8010d38:	f7ef ff12 	bl	8000b60 <__aeabi_d2f>
 8010d3c:	ee0c 0a10 	vmov	s24, r0
 8010d40:	eef0 7aeb 	vabs.f32	s15, s23
 8010d44:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8010f68 <kalman_3gyro.constprop.0+0xa8c>
 8010d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d50:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 8010d54:	d517      	bpl.n	8010d86 <kalman_3gyro.constprop.0+0x8aa>
 8010d56:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010d5a:	eef4 bae7 	vcmpe.f32	s23, s15
 8010d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d62:	f2c0 8755 	blt.w	8011c10 <kalman_3gyro.constprop.0+0x1734>
 8010d66:	ee7b 7aa7 	vadd.f32	s15, s23, s15
 8010d6a:	ee17 0a90 	vmov	r0, s15
 8010d6e:	f7ef fbef 	bl	8000550 <__aeabi_f2d>
 8010d72:	ec41 0b10 	vmov	d0, r0, r1
 8010d76:	f008 f94f 	bl	8019018 <floor>
 8010d7a:	ec51 0b10 	vmov	r0, r1, d0
 8010d7e:	f7ef feef 	bl	8000b60 <__aeabi_d2f>
 8010d82:	ee0b 0a90 	vmov	s23, r0
 8010d86:	eef0 7ac8 	vabs.f32	s15, s16
 8010d8a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8010f68 <kalman_3gyro.constprop.0+0xa8c>
 8010d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d96:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
 8010d9a:	d517      	bpl.n	8010dcc <kalman_3gyro.constprop.0+0x8f0>
 8010d9c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010da0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da8:	f2c0 8726 	blt.w	8011bf8 <kalman_3gyro.constprop.0+0x171c>
 8010dac:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010db0:	ee17 0a90 	vmov	r0, s15
 8010db4:	f7ef fbcc 	bl	8000550 <__aeabi_f2d>
 8010db8:	ec41 0b10 	vmov	d0, r0, r1
 8010dbc:	f008 f92c 	bl	8019018 <floor>
 8010dc0:	ec51 0b10 	vmov	r0, r1, d0
 8010dc4:	f7ef fecc 	bl	8000b60 <__aeabi_d2f>
 8010dc8:	ee08 0a10 	vmov	s16, r0
 8010dcc:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 8010dd0:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 8010dd4:	1e61      	subs	r1, r4, #1
 8010dd6:	b249      	sxtb	r1, r1
 8010dd8:	2900      	cmp	r1, #0
 8010dda:	dd17      	ble.n	8010e0c <kalman_3gyro.constprop.0+0x930>
 8010ddc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010de0:	1ea2      	subs	r2, r4, #2
 8010de2:	0089      	lsls	r1, r1, #2
 8010de4:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 8010de8:	b2d2      	uxtb	r2, r2
 8010dea:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 8010dee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010df2:	4401      	add	r1, r0
 8010df4:	445b      	add	r3, fp
 8010df6:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 8010dfa:	681d      	ldr	r5, [r3, #0]
 8010dfc:	6858      	ldr	r0, [r3, #4]
 8010dfe:	689a      	ldr	r2, [r3, #8]
 8010e00:	60dd      	str	r5, [r3, #12]
 8010e02:	6118      	str	r0, [r3, #16]
 8010e04:	615a      	str	r2, [r3, #20]
 8010e06:	3b0c      	subs	r3, #12
 8010e08:	4299      	cmp	r1, r3
 8010e0a:	d1f6      	bne.n	8010dfa <kalman_3gyro.constprop.0+0x91e>
 8010e0c:	9b02      	ldr	r3, [sp, #8]
 8010e0e:	ed86 ca00 	vstr	s24, [r6]
 8010e12:	edc3 ba00 	vstr	s23, [r3]
 8010e16:	ed89 8a00 	vstr	s16, [r9]
 8010e1a:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 8010e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e22:	3301      	adds	r3, #1
 8010e24:	b2db      	uxtb	r3, r3
 8010e26:	429c      	cmp	r4, r3
 8010e28:	bf28      	it	cs
 8010e2a:	461c      	movcs	r4, r3
 8010e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e2e:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 8010e32:	ed93 7a00 	vldr	s14, [r3]
 8010e36:	9b08      	ldr	r3, [sp, #32]
 8010e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e3c:	ed93 ca06 	vldr	s24, [r3, #24]
 8010e40:	ee27 ca8c 	vmul.f32	s24, s15, s24
 8010e44:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010f68 <kalman_3gyro.constprop.0+0xa8c>
 8010e48:	eef0 6acc 	vabs.f32	s13, s24
 8010e4c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010e50:	edd3 ba07 	vldr	s23, [r3, #28]
 8010e54:	ed93 8a08 	vldr	s16, [r3, #32]
 8010e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e5c:	ee67 baab 	vmul.f32	s23, s15, s23
 8010e60:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010e64:	d517      	bpl.n	8010e96 <kalman_3gyro.constprop.0+0x9ba>
 8010e66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010e6a:	eeb4 cae7 	vcmpe.f32	s24, s15
 8010e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e72:	f2c0 86b5 	blt.w	8011be0 <kalman_3gyro.constprop.0+0x1704>
 8010e76:	ee7c 7a27 	vadd.f32	s15, s24, s15
 8010e7a:	ee17 0a90 	vmov	r0, s15
 8010e7e:	f7ef fb67 	bl	8000550 <__aeabi_f2d>
 8010e82:	ec41 0b10 	vmov	d0, r0, r1
 8010e86:	f008 f8c7 	bl	8019018 <floor>
 8010e8a:	ec51 0b10 	vmov	r0, r1, d0
 8010e8e:	f7ef fe67 	bl	8000b60 <__aeabi_d2f>
 8010e92:	ee0c 0a10 	vmov	s24, r0
 8010e96:	eef0 7aeb 	vabs.f32	s15, s23
 8010e9a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8010f68 <kalman_3gyro.constprop.0+0xa8c>
 8010e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea6:	ed8d ca31 	vstr	s24, [sp, #196]	; 0xc4
 8010eaa:	d517      	bpl.n	8010edc <kalman_3gyro.constprop.0+0xa00>
 8010eac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010eb0:	eef4 bae7 	vcmpe.f32	s23, s15
 8010eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb8:	f2c0 8686 	blt.w	8011bc8 <kalman_3gyro.constprop.0+0x16ec>
 8010ebc:	ee7b 7aa7 	vadd.f32	s15, s23, s15
 8010ec0:	ee17 0a90 	vmov	r0, s15
 8010ec4:	f7ef fb44 	bl	8000550 <__aeabi_f2d>
 8010ec8:	ec41 0b10 	vmov	d0, r0, r1
 8010ecc:	f008 f8a4 	bl	8019018 <floor>
 8010ed0:	ec51 0b10 	vmov	r0, r1, d0
 8010ed4:	f7ef fe44 	bl	8000b60 <__aeabi_d2f>
 8010ed8:	ee0b 0a90 	vmov	s23, r0
 8010edc:	eef0 7ac8 	vabs.f32	s15, s16
 8010ee0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8010f68 <kalman_3gyro.constprop.0+0xa8c>
 8010ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	edcd ba32 	vstr	s23, [sp, #200]	; 0xc8
 8010ef0:	d517      	bpl.n	8010f22 <kalman_3gyro.constprop.0+0xa46>
 8010ef2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010ef6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efe:	f2c0 8657 	blt.w	8011bb0 <kalman_3gyro.constprop.0+0x16d4>
 8010f02:	ee78 7a27 	vadd.f32	s15, s16, s15
 8010f06:	ee17 0a90 	vmov	r0, s15
 8010f0a:	f7ef fb21 	bl	8000550 <__aeabi_f2d>
 8010f0e:	ec41 0b10 	vmov	d0, r0, r1
 8010f12:	f008 f881 	bl	8019018 <floor>
 8010f16:	ec51 0b10 	vmov	r0, r1, d0
 8010f1a:	f7ef fe21 	bl	8000b60 <__aeabi_d2f>
 8010f1e:	ee08 0a10 	vmov	s16, r0
 8010f22:	f89b 5791 	ldrb.w	r5, [fp, #1937]	; 0x791
 8010f26:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 8010f2a:	1e6b      	subs	r3, r5, #1
 8010f2c:	b25b      	sxtb	r3, r3
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	dd1e      	ble.n	8010f70 <kalman_3gyro.constprop.0+0xa94>
 8010f32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010f36:	1eaa      	subs	r2, r5, #2
 8010f38:	009b      	lsls	r3, r3, #2
 8010f3a:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 8010f3e:	b2d2      	uxtb	r2, r2
 8010f40:	4418      	add	r0, r3
 8010f42:	f203 718c 	addw	r1, r3, #1932	; 0x78c
 8010f46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010f4a:	eb0b 0301 	add.w	r3, fp, r1
 8010f4e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 8010f52:	681c      	ldr	r4, [r3, #0]
 8010f54:	6859      	ldr	r1, [r3, #4]
 8010f56:	689a      	ldr	r2, [r3, #8]
 8010f58:	60dc      	str	r4, [r3, #12]
 8010f5a:	6119      	str	r1, [r3, #16]
 8010f5c:	615a      	str	r2, [r3, #20]
 8010f5e:	3b0c      	subs	r3, #12
 8010f60:	4283      	cmp	r3, r0
 8010f62:	d1f6      	bne.n	8010f52 <kalman_3gyro.constprop.0+0xa76>
 8010f64:	e004      	b.n	8010f70 <kalman_3gyro.constprop.0+0xa94>
 8010f66:	bf00      	nop
 8010f68:	4b000000 	.word	0x4b000000
 8010f6c:	00000000 	.word	0x00000000
 8010f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f72:	aa52      	add	r2, sp, #328	; 0x148
 8010f74:	ed83 ca00 	vstr	s24, [r3]
 8010f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f7a:	a92b      	add	r1, sp, #172	; 0xac
 8010f7c:	edc3 ba00 	vstr	s23, [r3]
 8010f80:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010f82:	a82e      	add	r0, sp, #184	; 0xb8
 8010f84:	ed83 8a00 	vstr	s16, [r3]
 8010f88:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 8010f8c:	f20d 46cc 	addw	r6, sp, #1228	; 0x4cc
 8010f90:	3301      	adds	r3, #1
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	429d      	cmp	r5, r3
 8010f96:	bf28      	it	cs
 8010f98:	461d      	movcs	r5, r3
 8010f9a:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 8010f9e:	f88b 5790 	strb.w	r5, [fp, #1936]	; 0x790
 8010fa2:	461c      	mov	r4, r3
 8010fa4:	9313      	str	r3, [sp, #76]	; 0x4c
 8010fa6:	f7fe fa17 	bl	800f3d8 <getRotationMatrix>
 8010faa:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 8010fae:	4635      	mov	r5, r6
 8010fb0:	6820      	ldr	r0, [r4, #0]
 8010fb2:	6861      	ldr	r1, [r4, #4]
 8010fb4:	68a2      	ldr	r2, [r4, #8]
 8010fb6:	68e3      	ldr	r3, [r4, #12]
 8010fb8:	3410      	adds	r4, #16
 8010fba:	42bc      	cmp	r4, r7
 8010fbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010fbe:	f106 0610 	add.w	r6, r6, #16
 8010fc2:	d1f4      	bne.n	8010fae <kalman_3gyro.constprop.0+0xad2>
 8010fc4:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 8010fc8:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 8010fcc:	eef0 7ae7 	vabs.f32	s15, s15
 8010fd0:	eeb0 7ac7 	vabs.f32	s14, s14
 8010fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fdc:	6820      	ldr	r0, [r4, #0]
 8010fde:	6030      	str	r0, [r6, #0]
 8010fe0:	f140 8582 	bpl.w	8011ae8 <kalman_3gyro.constprop.0+0x160c>
 8010fe4:	f04f 0c04 	mov.w	ip, #4
 8010fe8:	2600      	movs	r6, #0
 8010fea:	eef0 7a47 	vmov.f32	s15, s14
 8010fee:	4665      	mov	r5, ip
 8010ff0:	4633      	mov	r3, r6
 8010ff2:	f04f 0a07 	mov.w	sl, #7
 8010ff6:	f04f 0906 	mov.w	r9, #6
 8010ffa:	f04f 0803 	mov.w	r8, #3
 8010ffe:	2101      	movs	r1, #1
 8011000:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 8011004:	eeb0 7ac7 	vabs.f32	s14, s14
 8011008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011010:	f340 858e 	ble.w	8011b30 <kalman_3gyro.constprop.0+0x1654>
 8011014:	f04f 0a08 	mov.w	sl, #8
 8011018:	f04f 0804 	mov.w	r8, #4
 801101c:	4655      	mov	r5, sl
 801101e:	4646      	mov	r6, r8
 8011020:	f04f 0e06 	mov.w	lr, #6
 8011024:	f04f 0907 	mov.w	r9, #7
 8011028:	2403      	movs	r4, #3
 801102a:	f04f 0c05 	mov.w	ip, #5
 801102e:	2200      	movs	r2, #0
 8011030:	2301      	movs	r3, #1
 8011032:	2102      	movs	r1, #2
 8011034:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8011036:	f20d 40cc 	addw	r0, sp, #1228	; 0x4cc
 801103a:	443e      	add	r6, r7
 801103c:	443d      	add	r5, r7
 801103e:	edd6 6a00 	vldr	s13, [r6]
 8011042:	ed95 7a00 	vldr	s14, [r5]
 8011046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801104a:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801104e:	edc6 7a00 	vstr	s15, [r6]
 8011052:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 8011056:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 801105a:	ed97 7a00 	vldr	s14, [r7]
 801105e:	edd5 7a00 	vldr	s15, [r5]
 8011062:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011066:	edc7 6a00 	vstr	s13, [r7]
 801106a:	eb00 0588 	add.w	r5, r0, r8, lsl #2
 801106e:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 8011072:	ed96 6a00 	vldr	s12, [r6]
 8011076:	ed97 7a00 	vldr	s14, [r7]
 801107a:	edd5 7a00 	vldr	s15, [r5]
 801107e:	eee6 7a47 	vfms.f32	s15, s12, s14
 8011082:	edc5 7a00 	vstr	s15, [r5]
 8011086:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 801108a:	ed97 7a00 	vldr	s14, [r7]
 801108e:	edd6 7a00 	vldr	s15, [r6]
 8011092:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011096:	edc6 7a00 	vstr	s15, [r6]
 801109a:	eb00 078a 	add.w	r7, r0, sl, lsl #2
 801109e:	eb00 0689 	add.w	r6, r0, r9, lsl #2
 80110a2:	edd7 5a00 	vldr	s11, [r7]
 80110a6:	ed96 7a00 	vldr	s14, [r6]
 80110aa:	eea6 7a65 	vfms.f32	s14, s12, s11
 80110ae:	ed86 7a00 	vstr	s14, [r6]
 80110b2:	eb00 068e 	add.w	r6, r0, lr, lsl #2
 80110b6:	ed97 6a00 	vldr	s12, [r7]
 80110ba:	ed96 7a00 	vldr	s14, [r6]
 80110be:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80110c2:	ed86 7a00 	vstr	s14, [r6]
 80110c6:	ed95 7a00 	vldr	s14, [r5]
 80110ca:	eef0 7ae7 	vabs.f32	s15, s15
 80110ce:	eeb0 7ac7 	vabs.f32	s14, s14
 80110d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80110d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110da:	ea4f 008c 	mov.w	r0, ip, lsl #2
 80110de:	9001      	str	r0, [sp, #4]
 80110e0:	ea4f 0484 	mov.w	r4, r4, lsl #2
 80110e4:	ea4f 008e 	mov.w	r0, lr, lsl #2
 80110e8:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80110ec:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80110f0:	ea4f 0782 	mov.w	r7, r2, lsl #2
 80110f4:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 80110f8:	ea4f 0588 	mov.w	r5, r8, lsl #2
 80110fc:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8011100:	dd0b      	ble.n	801111a <kalman_3gyro.constprop.0+0xc3e>
 8011102:	461d      	mov	r5, r3
 8011104:	4613      	mov	r3, r2
 8011106:	4606      	mov	r6, r0
 8011108:	462a      	mov	r2, r5
 801110a:	4667      	mov	r7, ip
 801110c:	4625      	mov	r5, r4
 801110e:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8011112:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8011116:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801111a:	f20d 48cc 	addw	r8, sp, #1228	; 0x4cc
 801111e:	4444      	add	r4, r8
 8011120:	4445      	add	r5, r8
 8011122:	ed94 7a00 	vldr	s14, [r4]
 8011126:	edd5 7a00 	vldr	s15, [r5]
 801112a:	ee87 1a27 	vdiv.f32	s2, s14, s15
 801112e:	ed84 1a00 	vstr	s2, [r4]
 8011132:	4440      	add	r0, r8
 8011134:	4446      	add	r6, r8
 8011136:	edd6 7a00 	vldr	s15, [r6]
 801113a:	ed90 2a00 	vldr	s4, [r0]
 801113e:	eea1 2a67 	vfms.f32	s4, s2, s15
 8011142:	ed80 2a00 	vstr	s4, [r0]
 8011146:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
 801114a:	f20d 49cc 	addw	r9, sp, #1228	; 0x4cc
 801114e:	eb00 080c 	add.w	r8, r0, ip
 8011152:	eb00 040e 	add.w	r4, r0, lr
 8011156:	4438      	add	r0, r7
 8011158:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 801115c:	444f      	add	r7, r9
 801115e:	f5a0 60cf 	sub.w	r0, r0, #1656	; 0x678
 8011162:	edd7 1a00 	vldr	s3, [r7]
 8011166:	edd4 5a00 	vldr	s11, [r4]
 801116a:	edd0 3a00 	vldr	s7, [r0]
 801116e:	f50d 64f8 	add.w	r4, sp, #1984	; 0x7c0
 8011172:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
 8011176:	f50d 67f8 	add.w	r7, sp, #1984	; 0x7c0
 801117a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801117e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8011182:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 8011186:	4601      	mov	r1, r0
 8011188:	4623      	mov	r3, r4
 801118a:	463a      	mov	r2, r7
 801118c:	44cc      	add	ip, r9
 801118e:	f5a8 68cf 	sub.w	r8, r8, #1656	; 0x678
 8011192:	eddc 0a00 	vldr	s1, [ip]
 8011196:	ed98 5a00 	vldr	s10, [r8]
 801119a:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 801119e:	f2a0 606c 	subw	r0, r0, #1644	; 0x66c
 80111a2:	f5a1 61cc 	sub.w	r1, r1, #1632	; 0x660
 80111a6:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 80111aa:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 80111ae:	f5a2 62cc 	sub.w	r2, r2, #1632	; 0x660
 80111b2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80111b6:	eea0 5ae5 	vfms.f32	s10, s1, s11
 80111ba:	eee1 3ae5 	vfms.f32	s7, s3, s11
 80111be:	ed90 4a00 	vldr	s8, [r0]
 80111c2:	ed91 7a00 	vldr	s14, [r1]
 80111c6:	ed93 6a00 	vldr	s12, [r3]
 80111ca:	edd4 4a00 	vldr	s9, [r4]
 80111ce:	edd7 6a00 	vldr	s13, [r7]
 80111d2:	edd2 7a00 	vldr	s15, [r2]
 80111d6:	ee82 3a82 	vdiv.f32	s6, s5, s4
 80111da:	eee0 4ac4 	vfms.f32	s9, s1, s8
 80111de:	eea7 6a60 	vfms.f32	s12, s14, s1
 80111e2:	eee5 3a41 	vfms.f32	s7, s10, s2
 80111e6:	eee1 6ac4 	vfms.f32	s13, s3, s8
 80111ea:	eee7 7a61 	vfms.f32	s15, s14, s3
 80111ee:	ee63 3a23 	vmul.f32	s7, s6, s7
 80111f2:	ed96 2a00 	vldr	s4, [r6]
 80111f6:	eee1 6a64 	vfms.f32	s13, s2, s9
 80111fa:	eee1 7a46 	vfms.f32	s15, s2, s12
 80111fe:	edd5 1a00 	vldr	s3, [r5]
 8011202:	44ca      	add	sl, r9
 8011204:	ee82 1aa1 	vdiv.f32	s2, s5, s3
 8011208:	ee63 6a26 	vmul.f32	s13, s6, s13
 801120c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8011210:	edda 1a00 	vldr	s3, [sl]
 8011214:	eea2 5a63 	vfms.f32	s10, s4, s7
 8011218:	9b01      	ldr	r3, [sp, #4]
 801121a:	44ce      	add	lr, r9
 801121c:	444b      	add	r3, r9
 801121e:	ed93 3a00 	vldr	s6, [r3]
 8011222:	ee21 5a05 	vmul.f32	s10, s2, s10
 8011226:	eee2 4a66 	vfms.f32	s9, s4, s13
 801122a:	eea7 6ac2 	vfms.f32	s12, s15, s4
 801122e:	eee1 5ae3 	vfms.f32	s11, s3, s7
 8011232:	edde 0a00 	vldr	s1, [lr]
 8011236:	ee61 4a24 	vmul.f32	s9, s2, s9
 801123a:	ee82 2aa0 	vdiv.f32	s4, s5, s1
 801123e:	ee26 6a01 	vmul.f32	s12, s12, s2
 8011242:	eee3 5a45 	vfms.f32	s11, s6, s10
 8011246:	eea1 4ae6 	vfms.f32	s8, s3, s13
 801124a:	eea7 7ae1 	vfms.f32	s14, s15, s3
 801124e:	ee62 5a25 	vmul.f32	s11, s4, s11
 8011252:	eea6 7a43 	vfms.f32	s14, s12, s6
 8011256:	eea3 4a64 	vfms.f32	s8, s6, s9
 801125a:	ee37 3aa4 	vadd.f32	s6, s15, s9
 801125e:	ee22 4a04 	vmul.f32	s8, s4, s8
 8011262:	ee35 3ac3 	vsub.f32	s6, s11, s6
 8011266:	ee27 7a02 	vmul.f32	s14, s14, s4
 801126a:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 801126e:	eeb4 3ac2 	vcmpe.f32	s6, s4
 8011272:	ed8d 6a50 	vstr	s12, [sp, #320]	; 0x140
 8011276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801127a:	ee36 6ac6 	vsub.f32	s12, s13, s12
 801127e:	bfc8      	it	gt
 8011280:	ee33 3a22 	vaddgt.f32	s6, s6, s5
 8011284:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8011288:	bfcc      	ite	gt
 801128a:	eef1 2ac3 	vsqrtgt.f32	s5, s6
 801128e:	ed5f 2ac9 	vldrle	s5, [pc, #-804]	; 8010f6c <kalman_3gyro.constprop.0+0xa90>
 8011292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011296:	edcd 3a4b 	vstr	s7, [sp, #300]	; 0x12c
 801129a:	ed8d 5a4a 	vstr	s10, [sp, #296]	; 0x128
 801129e:	edcd 5a49 	vstr	s11, [sp, #292]	; 0x124
 80112a2:	ed8d 4a4c 	vstr	s8, [sp, #304]	; 0x130
 80112a6:	edcd 4a4d 	vstr	s9, [sp, #308]	; 0x134
 80112aa:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 80112ae:	ed8d 7a4f 	vstr	s14, [sp, #316]	; 0x13c
 80112b2:	edcd 7a51 	vstr	s15, [sp, #324]	; 0x144
 80112b6:	f100 84eb 	bmi.w	8011c90 <kalman_3gyro.constprop.0+0x17b4>
 80112ba:	bfd8      	it	le
 80112bc:	ee62 2a86 	vmulle.f32	s5, s5, s12
 80112c0:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80112c4:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 80112c8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80112cc:	eeb4 6ac3 	vcmpe.f32	s12, s6
 80112d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112d4:	ee37 7a63 	vsub.f32	s14, s14, s7
 80112d8:	bf88      	it	hi
 80112da:	eeb7 3a00 	vmovhi.f32	s6, #112	; 0x3f800000  1.0
 80112de:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80112e2:	bf88      	it	hi
 80112e4:	ee36 6a03 	vaddhi.f32	s12, s12, s6
 80112e8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80112ec:	bf8c      	ite	hi
 80112ee:	eeb1 3ac6 	vsqrthi.f32	s6, s12
 80112f2:	ed1f 3ae2 	vldrls	s6, [pc, #-904]	; 8010f6c <kalman_3gyro.constprop.0+0xa90>
 80112f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112fa:	ee62 6aa6 	vmul.f32	s13, s5, s13
 80112fe:	f100 84c3 	bmi.w	8011c88 <kalman_3gyro.constprop.0+0x17ac>
 8011302:	bfd8      	it	le
 8011304:	ee23 3a07 	vmulle.f32	s6, s6, s14
 8011308:	ee75 5aa4 	vadd.f32	s11, s11, s9
 801130c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011310:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011320:	bf88      	it	hi
 8011322:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 8011326:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 801132a:	bf88      	it	hi
 801132c:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 8011330:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011334:	bf8c      	ite	hi
 8011336:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 801133a:	ed1f 7af4 	vldrls	s14, [pc, #-976]	; 8010f6c <kalman_3gyro.constprop.0+0xa90>
 801133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011342:	ee23 3a06 	vmul.f32	s6, s6, s12
 8011346:	f102 82c7 	bmi.w	80138d8 <kalman_3gyro.constprop.0+0x33fc>
 801134a:	bfd8      	it	le
 801134c:	ee27 7a05 	vmulle.f32	s14, s14, s10
 8011350:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011354:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 8011358:	ee27 7a27 	vmul.f32	s14, s14, s15
 801135c:	1e53      	subs	r3, r2, #1
 801135e:	b25b      	sxtb	r3, r3
 8011360:	2b00      	cmp	r3, #0
 8011362:	dd1c      	ble.n	801139e <kalman_3gyro.constprop.0+0xec2>
 8011364:	3a02      	subs	r2, #2
 8011366:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801136a:	b2d2      	uxtb	r2, r2
 801136c:	f1ab 040c 	sub.w	r4, fp, #12
 8011370:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8011374:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011378:	eba4 0482 	sub.w	r4, r4, r2, lsl #2
 801137c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 8011380:	f8d3 033c 	ldr.w	r0, [r3, #828]	; 0x33c
 8011384:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 8011388:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 801138c:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
 8011390:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 8011394:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 8011398:	3b0c      	subs	r3, #12
 801139a:	42a3      	cmp	r3, r4
 801139c:	d1f0      	bne.n	8011380 <kalman_3gyro.constprop.0+0xea4>
 801139e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80113a2:	ed9d 6a04 	vldr	s12, [sp, #16]
 80113a6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80113aa:	ee85 6a86 	vdiv.f32	s12, s11, s12
 80113ae:	ee73 7a03 	vadd.f32	s15, s6, s6
 80113b2:	ee37 7a07 	vadd.f32	s14, s14, s14
 80113b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80113ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80113be:	ee27 7a06 	vmul.f32	s14, s14, s12
 80113c2:	4bd9      	ldr	r3, [pc, #868]	; (8011728 <kalman_3gyro.constprop.0+0x124c>)
 80113c4:	4ad9      	ldr	r2, [pc, #868]	; (801172c <kalman_3gyro.constprop.0+0x1250>)
 80113c6:	edd3 ba00 	vldr	s23, [r3]
 80113ca:	f20d 2343 	addw	r3, sp, #579	; 0x243
 80113ce:	f1c3 0301 	rsb	r3, r3, #1
 80113d2:	930c      	str	r3, [sp, #48]	; 0x30
 80113d4:	ab2b      	add	r3, sp, #172	; 0xac
 80113d6:	e9cd b30a 	strd	fp, r3, [sp, #40]	; 0x28
 80113da:	9320      	str	r3, [sp, #128]	; 0x80
 80113dc:	2300      	movs	r3, #0
 80113de:	edcb 6ad2 	vstr	s13, [fp, #840]	; 0x348
 80113e2:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 80113e6:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 80113ea:	ed92 8a00 	vldr	s16, [r2]
 80113ee:	9309      	str	r3, [sp, #36]	; 0x24
 80113f0:	f50d 7911 	add.w	r9, sp, #580	; 0x244
 80113f4:	f50d 7a62 	add.w	sl, sp, #904	; 0x388
 80113f8:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 80113fc:	e9dd 0209 	ldrd	r0, r2, [sp, #36]	; 0x24
 8011400:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011402:	3001      	adds	r0, #1
 8011404:	f20d 41cc 	addw	r1, sp, #1228	; 0x4cc
 8011408:	f20d 2343 	addw	r3, sp, #579	; 0x243
 801140c:	9009      	str	r0, [sp, #36]	; 0x24
 801140e:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 8011412:	18ec      	adds	r4, r5, r3
 8011414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011418:	f841 0b04 	str.w	r0, [r1], #4
 801141c:	f20d 2061 	addw	r0, sp, #609	; 0x261
 8011420:	4298      	cmp	r0, r3
 8011422:	f102 020c 	add.w	r2, r2, #12
 8011426:	d1f2      	bne.n	801140e <kalman_3gyro.constprop.0+0xf32>
 8011428:	f20d 43cc 	addw	r3, sp, #1228	; 0x4cc
 801142c:	ed93 7a00 	vldr	s14, [r3]
 8011430:	f50d 639a 	add.w	r3, sp, #1232	; 0x4d0
 8011434:	edd3 7a00 	vldr	s15, [r3]
 8011438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011440:	bf84      	itt	hi
 8011442:	f44f 7381 	movhi.w	r3, #258	; 0x102
 8011446:	f8a9 3000 	strhhi.w	r3, [r9]
 801144a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 801144e:	ed93 7a00 	vldr	s14, [r3]
 8011452:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 8011456:	edd3 7a00 	vldr	s15, [r3]
 801145a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011462:	bf84      	itt	hi
 8011464:	f44f 7341 	movhi.w	r3, #772	; 0x304
 8011468:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 801146c:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 8011470:	ed93 7a00 	vldr	s14, [r3]
 8011474:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 8011478:	edd3 7a00 	vldr	s15, [r3]
 801147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011484:	bf84      	itt	hi
 8011486:	f240 5306 	movwhi	r3, #1286	; 0x506
 801148a:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 801148e:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 8011492:	ed93 7a00 	vldr	s14, [r3]
 8011496:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 801149a:	edd3 7a00 	vldr	s15, [r3]
 801149e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a6:	bf84      	itt	hi
 80114a8:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 80114ac:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 80114b0:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 80114b4:	ed93 7a00 	vldr	s14, [r3]
 80114b8:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 80114bc:	edd3 7a00 	vldr	s15, [r3]
 80114c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c8:	bf84      	itt	hi
 80114ca:	f640 130a 	movwhi	r3, #2314	; 0x90a
 80114ce:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 80114d2:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 80114d6:	ed93 7a00 	vldr	s14, [r3]
 80114da:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 80114de:	edd3 7a00 	vldr	s15, [r3]
 80114e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ea:	bf84      	itt	hi
 80114ec:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 80114f0:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 80114f4:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 80114f8:	ed93 7a00 	vldr	s14, [r3]
 80114fc:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 8011500:	edd3 7a00 	vldr	s15, [r3]
 8011504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801150c:	bf84      	itt	hi
 801150e:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 8011512:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 8011516:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 801151a:	ed93 7a00 	vldr	s14, [r3]
 801151e:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 8011522:	edd3 7a00 	vldr	s15, [r3]
 8011526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801152a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801152e:	bf84      	itt	hi
 8011530:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 8011534:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 8011538:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 801153c:	ed93 7a00 	vldr	s14, [r3]
 8011540:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 8011544:	edd3 7a00 	vldr	s15, [r3]
 8011548:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011550:	bf84      	itt	hi
 8011552:	f241 1312 	movwhi	r3, #4370	; 0x1112
 8011556:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 801155a:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 801155e:	ed93 7a00 	vldr	s14, [r3]
 8011562:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 8011566:	edd3 7a00 	vldr	s15, [r3]
 801156a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011572:	bf84      	itt	hi
 8011574:	f241 3314 	movwhi	r3, #4884	; 0x1314
 8011578:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 801157c:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 8011580:	ed93 7a00 	vldr	s14, [r3]
 8011584:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 8011588:	edd3 7a00 	vldr	s15, [r3]
 801158c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011594:	bf84      	itt	hi
 8011596:	f241 5316 	movwhi	r3, #5398	; 0x1516
 801159a:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 801159e:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 80115a2:	ed93 7a00 	vldr	s14, [r3]
 80115a6:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 80115aa:	edd3 7a00 	vldr	s15, [r3]
 80115ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80115b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b6:	bf84      	itt	hi
 80115b8:	f241 7318 	movwhi	r3, #5912	; 0x1718
 80115bc:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 80115c0:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 80115c4:	ed93 7a00 	vldr	s14, [r3]
 80115c8:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 80115cc:	edd3 7a00 	vldr	s15, [r3]
 80115d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80115d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d8:	bf84      	itt	hi
 80115da:	f641 131a 	movwhi	r3, #6426	; 0x191a
 80115de:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 80115e2:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 80115e6:	ed93 7a00 	vldr	s14, [r3]
 80115ea:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 80115ee:	edd3 7a00 	vldr	s15, [r3]
 80115f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80115f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115fa:	bf84      	itt	hi
 80115fc:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 8011600:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 8011604:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 8011608:	ed93 7a00 	vldr	s14, [r3]
 801160c:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 8011610:	edd3 7a00 	vldr	s15, [r3]
 8011614:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801161c:	bf88      	it	hi
 801161e:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 8011622:	f04f 021e 	mov.w	r2, #30
 8011626:	bf88      	it	hi
 8011628:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 801162c:	2101      	movs	r1, #1
 801162e:	4650      	mov	r0, sl
 8011630:	f009 fb4b 	bl	801acca <memset>
 8011634:	2304      	movs	r3, #4
 8011636:	9307      	str	r3, [sp, #28]
 8011638:	2302      	movs	r3, #2
 801163a:	9305      	str	r3, [sp, #20]
 801163c:	9a05      	ldr	r2, [sp, #20]
 801163e:	2701      	movs	r7, #1
 8011640:	4613      	mov	r3, r2
 8011642:	9206      	str	r2, [sp, #24]
 8011644:	40ba      	lsls	r2, r7
 8011646:	9205      	str	r2, [sp, #20]
 8011648:	eb03 0b07 	add.w	fp, r3, r7
 801164c:	9b05      	ldr	r3, [sp, #20]
 801164e:	463a      	mov	r2, r7
 8011650:	443b      	add	r3, r7
 8011652:	2b1f      	cmp	r3, #31
 8011654:	bfa8      	it	ge
 8011656:	231f      	movge	r3, #31
 8011658:	eba3 0802 	sub.w	r8, r3, r2
 801165c:	f1b8 0f00 	cmp.w	r8, #0
 8011660:	9701      	str	r7, [sp, #4]
 8011662:	f10b 35ff 	add.w	r5, fp, #4294967295
 8011666:	461f      	mov	r7, r3
 8011668:	dd33      	ble.n	80116d2 <kalman_3gyro.constprop.0+0x11f6>
 801166a:	1e7b      	subs	r3, r7, #1
 801166c:	9302      	str	r3, [sp, #8]
 801166e:	1ebb      	subs	r3, r7, #2
 8011670:	e9cd 8303 	strd	r8, r3, [sp, #12]
 8011674:	4616      	mov	r6, r2
 8011676:	2400      	movs	r4, #0
 8011678:	46b8      	mov	r8, r7
 801167a:	1e71      	subs	r1, r6, #1
 801167c:	f919 2001 	ldrsb.w	r2, [r9, r1]
 8011680:	f919 0005 	ldrsb.w	r0, [r9, r5]
 8011684:	f20d 43cc 	addw	r3, sp, #1228	; 0x4cc
 8011688:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 801168c:	eb03 0780 	add.w	r7, r3, r0, lsl #2
 8011690:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8011694:	ed57 7a01 	vldr	s15, [r7, #-4]
 8011698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116a0:	f105 0c02 	add.w	ip, r5, #2
 80116a4:	f105 0701 	add.w	r7, r5, #1
 80116a8:	f240 81e5 	bls.w	8011a76 <kalman_3gyro.constprop.0+0x159a>
 80116ac:	45e0      	cmp	r8, ip
 80116ae:	f80a 0004 	strb.w	r0, [sl, r4]
 80116b2:	f000 81d1 	beq.w	8011a58 <kalman_3gyro.constprop.0+0x157c>
 80116b6:	463d      	mov	r5, r7
 80116b8:	9b03      	ldr	r3, [sp, #12]
 80116ba:	3401      	adds	r4, #1
 80116bc:	42a3      	cmp	r3, r4
 80116be:	dcdc      	bgt.n	801167a <kalman_3gyro.constprop.0+0x119e>
 80116c0:	4647      	mov	r7, r8
 80116c2:	4698      	mov	r8, r3
 80116c4:	9b01      	ldr	r3, [sp, #4]
 80116c6:	4642      	mov	r2, r8
 80116c8:	1e58      	subs	r0, r3, #1
 80116ca:	4651      	mov	r1, sl
 80116cc:	4448      	add	r0, r9
 80116ce:	f009 faef 	bl	801acb0 <memcpy>
 80116d2:	9b06      	ldr	r3, [sp, #24]
 80116d4:	eb07 0b03 	add.w	fp, r7, r3
 80116d8:	f1bb 0f1e 	cmp.w	fp, #30
 80116dc:	ddb6      	ble.n	801164c <kalman_3gyro.constprop.0+0x1170>
 80116de:	9b07      	ldr	r3, [sp, #28]
 80116e0:	3b01      	subs	r3, #1
 80116e2:	9307      	str	r3, [sp, #28]
 80116e4:	d1aa      	bne.n	801163c <kalman_3gyro.constprop.0+0x1160>
 80116e6:	f999 200e 	ldrsb.w	r2, [r9, #14]
 80116ea:	f20d 41cc 	addw	r1, sp, #1228	; 0x4cc
 80116ee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80116f2:	ed52 7a01 	vldr	s15, [r2, #-4]
 80116f6:	f999 300f 	ldrsb.w	r3, [r9, #15]
 80116fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80116fe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011702:	ed13 7a01 	vldr	s14, [r3, #-4]
 8011706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801170a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801170e:	460a      	mov	r2, r1
 8011710:	bf4c      	ite	mi
 8011712:	2201      	movmi	r2, #1
 8011714:	2200      	movpl	r2, #0
 8011716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801171a:	bf4c      	ite	mi
 801171c:	2301      	movmi	r3, #1
 801171e:	2300      	movpl	r3, #0
 8011720:	429a      	cmp	r2, r3
 8011722:	f000 81c2 	beq.w	8011aaa <kalman_3gyro.constprop.0+0x15ce>
 8011726:	e013      	b.n	8011750 <kalman_3gyro.constprop.0+0x1274>
 8011728:	200029b4 	.word	0x200029b4
 801172c:	200029a4 	.word	0x200029a4
 8011730:	3f333333 	.word	0x3f333333
 8011734:	3f4ccccd 	.word	0x3f4ccccd
 8011738:	3f666666 	.word	0x3f666666
 801173c:	3ecccccc 	.word	0x3ecccccc
 8011740:	3dcccccd 	.word	0x3dcccccd
 8011744:	00000000 	.word	0x00000000
 8011748:	3fb33333 	.word	0x3fb33333
 801174c:	bfb33333 	.word	0xbfb33333
 8011750:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011754:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011758:	ee67 7a87 	vmul.f32	s15, s15, s14
 801175c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801175e:	ece3 7a01 	vstmia	r3!, {s15}
 8011762:	930b      	str	r3, [sp, #44]	; 0x2c
 8011764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011766:	3304      	adds	r3, #4
 8011768:	930a      	str	r3, [sp, #40]	; 0x28
 801176a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801176c:	2b03      	cmp	r3, #3
 801176e:	f47f ae45 	bne.w	80113fc <kalman_3gyro.constprop.0+0xf20>
 8011772:	eddd 7a2c 	vldr	s15, [sp, #176]	; 0xb0
 8011776:	eddd 6a2b 	vldr	s13, [sp, #172]	; 0xac
 801177a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801177e:	ed9d 7a2d 	vldr	s14, [sp, #180]	; 0xb4
 8011782:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8011786:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 8011730 <kalman_3gyro.constprop.0+0x1254>
 801178a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801178e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011792:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8011796:	ee6b 6a26 	vmul.f32	s13, s22, s13
 801179a:	ee2f 4a07 	vmul.f32	s8, s30, s14
 801179e:	eeea 6a86 	vfma.f32	s13, s21, s12
 80117a2:	ee6a 4a87 	vmul.f32	s9, s21, s14
 80117a6:	ee2b 5a07 	vmul.f32	s10, s22, s14
 80117aa:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 80117ae:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 80117b2:	eef1 7ae7 	vsqrt.f32	s15, s15
 80117b6:	eef0 3a66 	vmov.f32	s7, s13
 80117ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80117be:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80117c2:	ed9d 6a15 	vldr	s12, [sp, #84]	; 0x54
 80117c6:	eec4 6a07 	vdiv.f32	s13, s8, s14
 80117ca:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80117ce:	ed5f 5a27 	vldr	s11, [pc, #-156]	; 8011734 <kalman_3gyro.constprop.0+0x1258>
 80117d2:	ee84 7a87 	vdiv.f32	s14, s9, s14
 80117d6:	ee85 6a06 	vdiv.f32	s12, s10, s12
 80117da:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 80117de:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 80117e2:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 80117e6:	ee63 5aa5 	vmul.f32	s11, s7, s11
 80117ea:	edcd 6a3c 	vstr	s13, [sp, #240]	; 0xf0
 80117ee:	ed8d 7a3d 	vstr	s14, [sp, #244]	; 0xf4
 80117f2:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f040 81a0 	bne.w	8011b3c <kalman_3gyro.constprop.0+0x1660>
 80117fc:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8011800:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8011804:	edc8 5a07 	vstr	s11, [r8, #28]
 8011808:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 801180c:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
 8011810:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8011814:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
 8011818:	f8c8 1028 	str.w	r1, [r8, #40]	; 0x28
 801181c:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 8011820:	f8c8 3020 	str.w	r3, [r8, #32]
 8011824:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 8011828:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 801182c:	edd3 5a00 	vldr	s11, [r3]
 8011830:	ed92 8a00 	vldr	s16, [r2]
 8011834:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 8011838:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 801183c:	ed92 5a00 	vldr	s10, [r2]
 8011840:	ee28 8a25 	vmul.f32	s16, s16, s11
 8011844:	edd3 5a00 	vldr	s11, [r3]
 8011848:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 801184c:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 8011850:	eea5 8a25 	vfma.f32	s16, s10, s11
 8011854:	eddb ea02 	vldr	s29, [fp, #8]
 8011858:	ed92 5a00 	vldr	s10, [r2]
 801185c:	edd3 5a00 	vldr	s11, [r3]
 8011860:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 8011864:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 8011868:	eea5 8a25 	vfma.f32	s16, s10, s11
 801186c:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8011870:	ed92 5a00 	vldr	s10, [r2]
 8011874:	edd3 5a00 	vldr	s11, [r3]
 8011878:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 801187c:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 8011880:	eea5 8a25 	vfma.f32	s16, s10, s11
 8011884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011888:	ed92 5a00 	vldr	s10, [r2]
 801188c:	edd3 5a00 	vldr	s11, [r3]
 8011890:	eea5 8a25 	vfma.f32	s16, s10, s11
 8011894:	f340 8228 	ble.w	8011ce8 <kalman_3gyro.constprop.0+0x180c>
 8011898:	eddb 5a30 	vldr	s11, [fp, #192]	; 0xc0
 801189c:	eef4 5ac8 	vcmpe.f32	s11, s16
 80118a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a4:	f100 815a 	bmi.w	8011b5c <kalman_3gyro.constprop.0+0x1680>
 80118a8:	eddb 5a31 	vldr	s11, [fp, #196]	; 0xc4
 80118ac:	edcd 5a01 	vstr	s11, [sp, #4]
 80118b0:	eddb 5a4a 	vldr	s11, [fp, #296]	; 0x128
 80118b4:	eef4 5ac8 	vcmpe.f32	s11, s16
 80118b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118bc:	f142 8402 	bpl.w	80140c4 <kalman_3gyro.constprop.0+0x3be8>
 80118c0:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 80118c4:	eeb4 5ac8 	vcmpe.f32	s10, s16
 80118c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118cc:	f342 8453 	ble.w	8014176 <kalman_3gyro.constprop.0+0x3c9a>
 80118d0:	eddb 4a4c 	vldr	s9, [fp, #304]	; 0x130
 80118d4:	eef4 4ac8 	vcmpe.f32	s9, s16
 80118d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118dc:	f342 85e7 	ble.w	80144ae <kalman_3gyro.constprop.0+0x3fd2>
 80118e0:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 80118e4:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 80118e8:	ee38 3a65 	vsub.f32	s6, s16, s11
 80118ec:	ee34 4a63 	vsub.f32	s8, s8, s7
 80118f0:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80118f4:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 80118f8:	ee24 4a03 	vmul.f32	s8, s8, s6
 80118fc:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011900:	ee84 ca25 	vdiv.f32	s24, s8, s11
 8011904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011908:	ee3c ca23 	vadd.f32	s24, s24, s7
 801190c:	f202 85e7 	bhi.w	80144de <kalman_3gyro.constprop.0+0x4002>
 8011910:	eddb 5a50 	vldr	s11, [fp, #320]	; 0x140
 8011914:	eef4 5ac8 	vcmpe.f32	s11, s16
 8011918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191c:	f342 85e7 	ble.w	80144ee <kalman_3gyro.constprop.0+0x4012>
 8011920:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 8011924:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 8011928:	ee38 3a64 	vsub.f32	s6, s16, s9
 801192c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011930:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8011934:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011938:	ee84 caa5 	vdiv.f32	s24, s9, s11
 801193c:	ee3c ca23 	vadd.f32	s24, s24, s7
 8011940:	eddb 5a52 	vldr	s11, [fp, #328]	; 0x148
 8011944:	eef4 5ac8 	vcmpe.f32	s11, s16
 8011948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801194c:	f202 85e7 	bhi.w	801451e <kalman_3gyro.constprop.0+0x4042>
 8011950:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 8011954:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195c:	f343 8274 	ble.w	8014e48 <kalman_3gyro.constprop.0+0x496c>
 8011960:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 8011964:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 8011968:	ee38 3a65 	vsub.f32	s6, s16, s11
 801196c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011970:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8011974:	ee24 4a03 	vmul.f32	s8, s8, s6
 8011978:	ee84 ca25 	vdiv.f32	s24, s8, s11
 801197c:	ee3c ca23 	vadd.f32	s24, s24, s7
 8011980:	eddb 5a56 	vldr	s11, [fp, #344]	; 0x158
 8011984:	eef4 5ac8 	vcmpe.f32	s11, s16
 8011988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198c:	f202 85e7 	bhi.w	801455e <kalman_3gyro.constprop.0+0x4082>
 8011990:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 8011994:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801199c:	f343 825c 	ble.w	8014e58 <kalman_3gyro.constprop.0+0x497c>
 80119a0:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 80119a4:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 80119a8:	ee38 3a65 	vsub.f32	s6, s16, s11
 80119ac:	ee34 4a63 	vsub.f32	s8, s8, s7
 80119b0:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80119b4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80119b8:	ee84 ca25 	vdiv.f32	s24, s8, s11
 80119bc:	ee3c ca23 	vadd.f32	s24, s24, s7
 80119c0:	eddb 5a5a 	vldr	s11, [fp, #360]	; 0x168
 80119c4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80119c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119cc:	f2c2 85e7 	blt.w	801459e <kalman_3gyro.constprop.0+0x40c2>
 80119d0:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 80119d4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80119d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119dc:	f143 8230 	bpl.w	8014e40 <kalman_3gyro.constprop.0+0x4964>
 80119e0:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 80119e4:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 80119e8:	ee38 3a65 	vsub.f32	s6, s16, s11
 80119ec:	ee34 4a63 	vsub.f32	s8, s8, s7
 80119f0:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80119f4:	ee24 4a03 	vmul.f32	s8, s8, s6
 80119f8:	ee84 ca25 	vdiv.f32	s24, s8, s11
 80119fc:	ee3c ca23 	vadd.f32	s24, s24, s7
 8011a00:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8011a04:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a0c:	f2c2 85e7 	blt.w	80145de <kalman_3gyro.constprop.0+0x4102>
 8011a10:	eddb 5a60 	vldr	s11, [fp, #384]	; 0x180
 8011a14:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8011a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a1c:	f142 85e7 	bpl.w	80145ee <kalman_3gyro.constprop.0+0x4112>
 8011a20:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8011a24:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 8011a28:	ee78 3a64 	vsub.f32	s7, s16, s9
 8011a2c:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011a30:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8011a34:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011a38:	ee85 ca25 	vdiv.f32	s24, s10, s11
 8011a3c:	ee3c ca04 	vadd.f32	s24, s24, s8
 8011a40:	f002 bb42 	b.w	80140c8 <kalman_3gyro.constprop.0+0x3bec>
 8011a44:	ed5f 6ac4 	vldr	s13, [pc, #-784]	; 8011738 <kalman_3gyro.constprop.0+0x125c>
 8011a48:	ed5f cac4 	vldr	s25, [pc, #-784]	; 801173c <kalman_3gyro.constprop.0+0x1260>
 8011a4c:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8011a50:	ed5f 9ac5 	vldr	s19, [pc, #-788]	; 8011740 <kalman_3gyro.constprop.0+0x1264>
 8011a54:	f7fe bef5 	b.w	8010842 <kalman_3gyro.constprop.0+0x366>
 8011a58:	1c60      	adds	r0, r4, #1
 8011a5a:	455e      	cmp	r6, fp
 8011a5c:	ebab 0206 	sub.w	r2, fp, r6
 8011a60:	4449      	add	r1, r9
 8011a62:	4450      	add	r0, sl
 8011a64:	f6bf ae27 	bge.w	80116b6 <kalman_3gyro.constprop.0+0x11da>
 8011a68:	445c      	add	r4, fp
 8011a6a:	1ba4      	subs	r4, r4, r6
 8011a6c:	f009 f920 	bl	801acb0 <memcpy>
 8011a70:	463d      	mov	r5, r7
 8011a72:	465e      	mov	r6, fp
 8011a74:	e620      	b.n	80116b8 <kalman_3gyro.constprop.0+0x11dc>
 8011a76:	3601      	adds	r6, #1
 8011a78:	455e      	cmp	r6, fp
 8011a7a:	f80a 2004 	strb.w	r2, [sl, r4]
 8011a7e:	f47f ae1b 	bne.w	80116b8 <kalman_3gyro.constprop.0+0x11dc>
 8011a82:	9b02      	ldr	r3, [sp, #8]
 8011a84:	1c6f      	adds	r7, r5, #1
 8011a86:	1c60      	adds	r0, r4, #1
 8011a88:	45b8      	cmp	r8, r7
 8011a8a:	eba3 0205 	sub.w	r2, r3, r5
 8011a8e:	eb09 0105 	add.w	r1, r9, r5
 8011a92:	4450      	add	r0, sl
 8011a94:	f77f ae10 	ble.w	80116b8 <kalman_3gyro.constprop.0+0x11dc>
 8011a98:	f009 f90a 	bl	801acb0 <memcpy>
 8011a9c:	9b02      	ldr	r3, [sp, #8]
 8011a9e:	441c      	add	r4, r3
 8011aa0:	9b04      	ldr	r3, [sp, #16]
 8011aa2:	1b64      	subs	r4, r4, r5
 8011aa4:	1b5a      	subs	r2, r3, r5
 8011aa6:	19d5      	adds	r5, r2, r7
 8011aa8:	e606      	b.n	80116b8 <kalman_3gyro.constprop.0+0x11dc>
 8011aaa:	eef4 7a48 	vcmp.f32	s15, s16
 8011aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab2:	f43f ae4d 	beq.w	8011750 <kalman_3gyro.constprop.0+0x1274>
 8011ab6:	eef4 7a6b 	vcmp.f32	s15, s23
 8011aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011abe:	f43f ae47 	beq.w	8011750 <kalman_3gyro.constprop.0+0x1274>
 8011ac2:	eeb4 7a48 	vcmp.f32	s14, s16
 8011ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011aca:	f43f ae41 	beq.w	8011750 <kalman_3gyro.constprop.0+0x1274>
 8011ace:	eeb4 7a6b 	vcmp.f32	s14, s23
 8011ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad6:	f43f ae3b 	beq.w	8011750 <kalman_3gyro.constprop.0+0x1274>
 8011ada:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011ade:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011ae2:	eee7 7a26 	vfma.f32	s15, s14, s13
 8011ae6:	e639      	b.n	801175c <kalman_3gyro.constprop.0+0x1280>
 8011ae8:	f04f 0804 	mov.w	r8, #4
 8011aec:	2500      	movs	r5, #0
 8011aee:	4646      	mov	r6, r8
 8011af0:	4629      	mov	r1, r5
 8011af2:	f04f 0a06 	mov.w	sl, #6
 8011af6:	f04f 0907 	mov.w	r9, #7
 8011afa:	f04f 0c03 	mov.w	ip, #3
 8011afe:	2301      	movs	r3, #1
 8011b00:	f7ff ba7e 	b.w	8011000 <kalman_3gyro.constprop.0+0xb24>
 8011b04:	ed5f 7af1 	vldr	s15, [pc, #-964]	; 8011744 <kalman_3gyro.constprop.0+0x1268>
 8011b08:	ed5f 5af1 	vldr	s11, [pc, #-964]	; 8011748 <kalman_3gyro.constprop.0+0x126c>
 8011b0c:	ed1f 5af1 	vldr	s10, [pc, #-964]	; 801174c <kalman_3gyro.constprop.0+0x1270>
 8011b10:	9a08      	ldr	r2, [sp, #32]
 8011b12:	4b61      	ldr	r3, [pc, #388]	; (8011c98 <kalman_3gyro.constprop.0+0x17bc>)
 8011b14:	eeb0 6a67 	vmov.f32	s12, s15
 8011b18:	edc2 7a00 	vstr	s15, [r2]
 8011b1c:	eeb0 3a67 	vmov.f32	s6, s15
 8011b20:	eef0 9a65 	vmov.f32	s19, s11
 8011b24:	eeb0 9a45 	vmov.f32	s18, s10
 8011b28:	6053      	str	r3, [r2, #4]
 8011b2a:	6093      	str	r3, [r2, #8]
 8011b2c:	f7fe bd54 	b.w	80105d8 <kalman_3gyro.constprop.0+0xfc>
 8011b30:	f04f 0e08 	mov.w	lr, #8
 8011b34:	2405      	movs	r4, #5
 8011b36:	2202      	movs	r2, #2
 8011b38:	f7ff ba7c 	b.w	8011034 <kalman_3gyro.constprop.0+0xb58>
 8011b3c:	2300      	movs	r3, #0
 8011b3e:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 8011b42:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 8011b46:	edc8 5a07 	vstr	s11, [r8, #28]
 8011b4a:	edc8 5a08 	vstr	s11, [r8, #32]
 8011b4e:	edc8 5a09 	vstr	s11, [r8, #36]	; 0x24
 8011b52:	edc8 5a0a 	vstr	s11, [r8, #40]	; 0x28
 8011b56:	edc8 5a0b 	vstr	s11, [r8, #44]	; 0x2c
 8011b5a:	e663      	b.n	8011824 <kalman_3gyro.constprop.0+0x1348>
 8011b5c:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 8011b60:	eeb4 5ac8 	vcmpe.f32	s10, s16
 8011b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b68:	f342 82ff 	ble.w	801416a <kalman_3gyro.constprop.0+0x3c8e>
 8011b6c:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8011b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b74:	f2c2 8610 	blt.w	8014798 <kalman_3gyro.constprop.0+0x42bc>
 8011b78:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 8011b7c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b84:	f342 863c 	ble.w	8014800 <kalman_3gyro.constprop.0+0x4324>
 8011b88:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 8011b8c:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 8011b90:	ee38 3a65 	vsub.f32	s6, s16, s11
 8011b94:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011b98:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8011b9c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011ba0:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8011ba4:	ee74 5a23 	vadd.f32	s11, s8, s7
 8011ba8:	edcd 5a01 	vstr	s11, [sp, #4]
 8011bac:	f002 bdff 	b.w	80147ae <kalman_3gyro.constprop.0+0x42d2>
 8011bb0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011bb4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bbc:	f342 83e0 	ble.w	8014380 <kalman_3gyro.constprop.0+0x3ea4>
 8011bc0:	ed9f 8a36 	vldr	s16, [pc, #216]	; 8011c9c <kalman_3gyro.constprop.0+0x17c0>
 8011bc4:	f7ff b9ad 	b.w	8010f22 <kalman_3gyro.constprop.0+0xa46>
 8011bc8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011bcc:	eef4 bac7 	vcmpe.f32	s23, s14
 8011bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bd4:	f342 839b 	ble.w	801430e <kalman_3gyro.constprop.0+0x3e32>
 8011bd8:	eddf ba30 	vldr	s23, [pc, #192]	; 8011c9c <kalman_3gyro.constprop.0+0x17c0>
 8011bdc:	f7ff b97e 	b.w	8010edc <kalman_3gyro.constprop.0+0xa00>
 8011be0:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011be4:	eeb4 cac7 	vcmpe.f32	s24, s14
 8011be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bec:	f342 83da 	ble.w	80143a4 <kalman_3gyro.constprop.0+0x3ec8>
 8011bf0:	ed9f ca2a 	vldr	s24, [pc, #168]	; 8011c9c <kalman_3gyro.constprop.0+0x17c0>
 8011bf4:	f7ff b94f 	b.w	8010e96 <kalman_3gyro.constprop.0+0x9ba>
 8011bf8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011bfc:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c04:	f342 8371 	ble.w	80142ea <kalman_3gyro.constprop.0+0x3e0e>
 8011c08:	ed9f 8a24 	vldr	s16, [pc, #144]	; 8011c9c <kalman_3gyro.constprop.0+0x17c0>
 8011c0c:	f7ff b8de 	b.w	8010dcc <kalman_3gyro.constprop.0+0x8f0>
 8011c10:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011c14:	eef4 bac7 	vcmpe.f32	s23, s14
 8011c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1c:	f342 82e4 	ble.w	80141e8 <kalman_3gyro.constprop.0+0x3d0c>
 8011c20:	eddf ba1e 	vldr	s23, [pc, #120]	; 8011c9c <kalman_3gyro.constprop.0+0x17c0>
 8011c24:	f7ff b8af 	b.w	8010d86 <kalman_3gyro.constprop.0+0x8aa>
 8011c28:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011c2c:	eeb4 cac7 	vcmpe.f32	s24, s14
 8011c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c34:	f342 82c6 	ble.w	80141c4 <kalman_3gyro.constprop.0+0x3ce8>
 8011c38:	ed9f ca18 	vldr	s24, [pc, #96]	; 8011c9c <kalman_3gyro.constprop.0+0x17c0>
 8011c3c:	f7ff b880 	b.w	8010d40 <kalman_3gyro.constprop.0+0x864>
 8011c40:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011c44:	eef4 dac7 	vcmpe.f32	s27, s14
 8011c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c4c:	f342 82a8 	ble.w	80141a0 <kalman_3gyro.constprop.0+0x3cc4>
 8011c50:	eddf da12 	vldr	s27, [pc, #72]	; 8011c9c <kalman_3gyro.constprop.0+0x17c0>
 8011c54:	f7ff b80e 	b.w	8010c74 <kalman_3gyro.constprop.0+0x798>
 8011c58:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011c5c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c64:	f342 828a 	ble.w	801417c <kalman_3gyro.constprop.0+0x3ca0>
 8011c68:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8011c9c <kalman_3gyro.constprop.0+0x17c0>
 8011c6c:	f7fe bfdf 	b.w	8010c2e <kalman_3gyro.constprop.0+0x752>
 8011c70:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8011c74:	eeb4 cac7 	vcmpe.f32	s24, s14
 8011c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c7c:	f342 82e2 	ble.w	8014244 <kalman_3gyro.constprop.0+0x3d68>
 8011c80:	ed9f ca06 	vldr	s24, [pc, #24]	; 8011c9c <kalman_3gyro.constprop.0+0x17c0>
 8011c84:	f7fe bfb0 	b.w	8010be8 <kalman_3gyro.constprop.0+0x70c>
 8011c88:	eeb1 3a43 	vneg.f32	s6, s6
 8011c8c:	f7ff bb3c 	b.w	8011308 <kalman_3gyro.constprop.0+0xe2c>
 8011c90:	eef1 2a62 	vneg.f32	s5, s5
 8011c94:	f7ff bb14 	b.w	80112c0 <kalman_3gyro.constprop.0+0xde4>
 8011c98:	3f333333 	.word	0x3f333333
 8011c9c:	80000000 	.word	0x80000000
 8011ca0:	3fb77778 	.word	0x3fb77778
 8011ca4:	3f99999a 	.word	0x3f99999a
 8011ca8:	3f4ccccd 	.word	0x3f4ccccd
 8011cac:	4247ffff 	.word	0x4247ffff
 8011cb0:	3e4ccccd 	.word	0x3e4ccccd
 8011cb4:	3dcccccd 	.word	0x3dcccccd
 8011cb8:	42d40000 	.word	0x42d40000
 8011cbc:	46979000 	.word	0x46979000
 8011cc0:	4415c000 	.word	0x4415c000
 8011cc4:	3ba3d70a 	.word	0x3ba3d70a
 8011cc8:	3b449ba6 	.word	0x3b449ba6
 8011ccc:	3c75c28f 	.word	0x3c75c28f
 8011cd0:	3c23d70a 	.word	0x3c23d70a
 8011cd4:	3d4cccc0 	.word	0x3d4cccc0
 8011cd8:	43480000 	.word	0x43480000
 8011cdc:	3d4ccccd 	.word	0x3d4ccccd
 8011ce0:	3cf5c28f 	.word	0x3cf5c28f
 8011ce4:	3eb33334 	.word	0x3eb33334
 8011ce8:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011cec:	ed8d ca01 	vstr	s24, [sp, #4]
 8011cf0:	eddb ba74 	vldr	s23, [fp, #464]	; 0x1d0
 8011cf4:	eddb 3a72 	vldr	s7, [fp, #456]	; 0x1c8
 8011cf8:	ee79 baeb 	vsub.f32	s23, s19, s23
 8011cfc:	ee79 5a63 	vsub.f32	s11, s18, s7
 8011d00:	eef0 baeb 	vabs.f32	s23, s23
 8011d04:	eef0 5ae5 	vabs.f32	s11, s11
 8011d08:	ed1f 5a16 	vldr	s10, [pc, #-88]	; 8011cb4 <kalman_3gyro.constprop.0+0x17d8>
 8011d0c:	ee75 5aab 	vadd.f32	s11, s11, s23
 8011d10:	eef4 5ac5 	vcmpe.f32	s11, s10
 8011d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d18:	f340 8238 	ble.w	801218c <kalman_3gyro.constprop.0+0x1cb0>
 8011d1c:	ed5f 4a20 	vldr	s9, [pc, #-128]	; 8011ca0 <kalman_3gyro.constprop.0+0x17c4>
 8011d20:	eef4 5ae4 	vcmpe.f32	s11, s9
 8011d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d28:	f302 81de 	bgt.w	80140e8 <kalman_3gyro.constprop.0+0x3c0c>
 8011d2c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8011d30:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 8011d34:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011d38:	eea5 5aa4 	vfma.f32	s10, s11, s9
 8011d3c:	eef0 5a45 	vmov.f32	s11, s10
 8011d40:	fec5 5aac 	vmaxnm.f32	s11, s11, s25
 8011d44:	f89b 3000 	ldrb.w	r3, [fp]
 8011d48:	edcd 5a05 	vstr	s11, [sp, #20]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	f000 8218 	beq.w	8012182 <kalman_3gyro.constprop.0+0x1ca6>
 8011d52:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	f000 81fd 	beq.w	8012156 <kalman_3gyro.constprop.0+0x1c7a>
 8011d5c:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 8011d60:	2300      	movs	r3, #0
 8011d62:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 8011d66:	ed9d 4a35 	vldr	s8, [sp, #212]	; 0xd4
 8011d6a:	ee64 6a04 	vmul.f32	s13, s8, s8
 8011d6e:	eddd 0a34 	vldr	s1, [sp, #208]	; 0xd0
 8011d72:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 8011d76:	ee76 1aa6 	vadd.f32	s3, s13, s13
 8011d7a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011d7e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8011d82:	ee20 1aa0 	vmul.f32	s2, s1, s1
 8011d86:	ee65 6aa5 	vmul.f32	s13, s11, s11
 8011d8a:	eeb0 3a61 	vmov.f32	s6, s3
 8011d8e:	ed9d 7a37 	vldr	s14, [sp, #220]	; 0xdc
 8011d92:	eea1 3a06 	vfma.f32	s6, s2, s12
 8011d96:	ee64 4a25 	vmul.f32	s9, s8, s11
 8011d9a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011d9e:	eeb0 0a42 	vmov.f32	s0, s4
 8011da2:	ee60 2a87 	vmul.f32	s5, s1, s14
 8011da6:	ee24 5a07 	vmul.f32	s10, s8, s14
 8011daa:	ee72 fa43 	vsub.f32	s31, s4, s6
 8011dae:	ee74 4aa4 	vadd.f32	s9, s9, s9
 8011db2:	eea3 0ae3 	vfms.f32	s0, s7, s7
 8011db6:	eef0 7a66 	vmov.f32	s15, s13
 8011dba:	ee20 4a84 	vmul.f32	s8, s1, s8
 8011dbe:	ee35 5a05 	vadd.f32	s10, s10, s10
 8011dc2:	eee1 7a06 	vfma.f32	s15, s2, s12
 8011dc6:	ee25 7a87 	vmul.f32	s14, s11, s14
 8011dca:	eef0 ca64 	vmov.f32	s25, s9
 8011dce:	ee60 5aa5 	vmul.f32	s11, s1, s11
 8011dd2:	eee2 4ac6 	vfms.f32	s9, s5, s12
 8011dd6:	eef1 0ac0 	vsqrt.f32	s1, s0
 8011dda:	ee6f daa3 	vmul.f32	s27, s31, s7
 8011dde:	2200      	movs	r2, #0
 8011de0:	eeb0 1a67 	vmov.f32	s2, s15
 8011de4:	eee0 daa4 	vfma.f32	s27, s1, s9
 8011de8:	eef0 7a45 	vmov.f32	s15, s10
 8011dec:	9908      	ldr	r1, [sp, #32]
 8011dee:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 8011df2:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 8011df6:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 8011dfa:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8011dfe:	edcd da0a 	vstr	s27, [sp, #40]	; 0x28
 8011e02:	edd1 da03 	vldr	s27, [r1, #12]
 8011e06:	ee71 6aa6 	vadd.f32	s13, s3, s13
 8011e0a:	edd1 1a01 	vldr	s3, [r1, #4]
 8011e0e:	eee2 ca86 	vfma.f32	s25, s5, s12
 8011e12:	edcd da02 	vstr	s27, [sp, #8]
 8011e16:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011e1a:	eddd da0a 	vldr	s27, [sp, #40]	; 0x28
 8011e1e:	edcd 7a06 	vstr	s15, [sp, #24]
 8011e22:	ee67 2aa3 	vmul.f32	s5, s15, s7
 8011e26:	edd1 7a02 	vldr	s15, [r1, #8]
 8011e2a:	edcd 1a0c 	vstr	s3, [sp, #48]	; 0x30
 8011e2e:	edd1 1a00 	vldr	s3, [r1]
 8011e32:	ee77 7aed 	vsub.f32	s15, s15, s27
 8011e36:	ee32 1a41 	vsub.f32	s2, s4, s2
 8011e3a:	eeb0 0a47 	vmov.f32	s0, s14
 8011e3e:	ee2c daa3 	vmul.f32	s26, s25, s7
 8011e42:	edcd 1a0b 	vstr	s3, [sp, #44]	; 0x2c
 8011e46:	edd1 1a05 	vldr	s3, [r1, #20]
 8011e4a:	eea4 0a06 	vfma.f32	s0, s8, s12
 8011e4e:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
 8011e52:	eea0 da81 	vfma.f32	s26, s1, s2
 8011e56:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 8011e5a:	edcd 1a04 	vstr	s3, [sp, #16]
 8011e5e:	edd1 1a04 	vldr	s3, [r1, #16]
 8011e62:	ee37 dacd 	vsub.f32	s26, s15, s26
 8011e66:	eee0 2a80 	vfma.f32	s5, s1, s0
 8011e6a:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
 8011e6e:	edcd 1a03 	vstr	s3, [sp, #12]
 8011e72:	ee77 2ae2 	vsub.f32	s5, s15, s5
 8011e76:	eef0 1a45 	vmov.f32	s3, s10
 8011e7a:	eddd 7a03 	vldr	s15, [sp, #12]
 8011e7e:	eee5 1ac6 	vfms.f32	s3, s11, s12
 8011e82:	ee94 7a06 	vfnms.f32	s14, s8, s12
 8011e86:	eea5 5a86 	vfma.f32	s10, s11, s12
 8011e8a:	ed9d 4a04 	vldr	s8, [sp, #16]
 8011e8e:	ee37 6aec 	vsub.f32	s12, s15, s25
 8011e92:	eddd da02 	vldr	s27, [sp, #8]
 8011e96:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8011e9a:	edcd fa51 	vstr	s31, [sp, #324]	; 0x144
 8011e9e:	edcd 0a32 	vstr	s1, [sp, #200]	; 0xc8
 8011ea2:	edcd ca4e 	vstr	s25, [sp, #312]	; 0x138
 8011ea6:	edcd 4a50 	vstr	s9, [sp, #320]	; 0x140
 8011eaa:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8011eae:	edcd 7a7b 	vstr	s15, [sp, #492]	; 0x1ec
 8011eb2:	eddd 7a06 	vldr	s15, [sp, #24]
 8011eb6:	ed5f 5a85 	vldr	s11, [pc, #-532]	; 8011ca4 <kalman_3gyro.constprop.0+0x17c8>
 8011eba:	edcd 7a4b 	vstr	s15, [sp, #300]	; 0x12c
 8011ebe:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8011ec2:	ee33 3a42 	vsub.f32	s6, s6, s4
 8011ec6:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011eca:	ee33 3a04 	vadd.f32	s6, s6, s8
 8011ece:	ee71 1aad 	vadd.f32	s3, s3, s27
 8011ed2:	ee72 6a66 	vsub.f32	s13, s4, s13
 8011ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eda:	ed8d 1a4d 	vstr	s2, [sp, #308]	; 0x134
 8011ede:	edcd 6a49 	vstr	s13, [sp, #292]	; 0x124
 8011ee2:	ed8d da7a 	vstr	s26, [sp, #488]	; 0x1e8
 8011ee6:	ed8d 0a4a 	vstr	s0, [sp, #296]	; 0x128
 8011eea:	ed8d 7a4c 	vstr	s14, [sp, #304]	; 0x130
 8011eee:	edcd 2a79 	vstr	s5, [sp, #484]	; 0x1e4
 8011ef2:	ed8d 6a2c 	vstr	s12, [sp, #176]	; 0xb0
 8011ef6:	ed8d 6a7d 	vstr	s12, [sp, #500]	; 0x1f4
 8011efa:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 8011efe:	edcd 1a2b 	vstr	s3, [sp, #172]	; 0xac
 8011f02:	edcd 1a7c 	vstr	s3, [sp, #496]	; 0x1f0
 8011f06:	ed8d 3a2d 	vstr	s6, [sp, #180]	; 0xb4
 8011f0a:	ed8d 3a7e 	vstr	s6, [sp, #504]	; 0x1f8
 8011f0e:	ed8d 9a82 	vstr	s18, [sp, #520]	; 0x208
 8011f12:	ed8d ea83 	vstr	s28, [sp, #524]	; 0x20c
 8011f16:	edcd 9a84 	vstr	s19, [sp, #528]	; 0x210
 8011f1a:	9231      	str	r2, [sp, #196]	; 0xc4
 8011f1c:	d506      	bpl.n	8011f2c <kalman_3gyro.constprop.0+0x1a50>
 8011f1e:	ed1f 7a9e 	vldr	s14, [pc, #-632]	; 8011ca8 <kalman_3gyro.constprop.0+0x17cc>
 8011f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f2a:	dc01      	bgt.n	8011f30 <kalman_3gyro.constprop.0+0x1a54>
 8011f2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f30:	ee7e 7a67 	vsub.f32	s15, s28, s15
 8011f34:	eef0 7ae7 	vabs.f32	s15, s15
 8011f38:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8011f3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f44:	f340 8146 	ble.w	80121d4 <kalman_3gyro.constprop.0+0x1cf8>
 8011f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011f4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f54:	f142 80cc 	bpl.w	80140f0 <kalman_3gyro.constprop.0+0x3c14>
 8011f58:	ed1f 7aa6 	vldr	s14, [pc, #-664]	; 8011cc4 <kalman_3gyro.constprop.0+0x17e8>
 8011f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f60:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 8011cd0 <kalman_3gyro.constprop.0+0x17f4>
 8011f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f6c:	f102 814e 	bmi.w	801420c <kalman_3gyro.constprop.0+0x3d30>
 8011f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f74:	f142 814e 	bpl.w	8014214 <kalman_3gyro.constprop.0+0x3d38>
 8011f78:	ed1f 7aac 	vldr	s14, [pc, #-688]	; 8011ccc <kalman_3gyro.constprop.0+0x17f0>
 8011f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f84:	f282 834a 	bge.w	801461c <kalman_3gyro.constprop.0+0x4140>
 8011f88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011f8c:	ed5f 6aac 	vldr	s13, [pc, #-688]	; 8011ce0 <kalman_3gyro.constprop.0+0x1804>
 8011f90:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f98:	f2c2 8356 	blt.w	8014648 <kalman_3gyro.constprop.0+0x416c>
 8011f9c:	ed1f 7ab1 	vldr	s14, [pc, #-708]	; 8011cdc <kalman_3gyro.constprop.0+0x1800>
 8011fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa8:	f142 8356 	bpl.w	8014658 <kalman_3gyro.constprop.0+0x417c>
 8011fac:	ed5f 6ab4 	vldr	s13, [pc, #-720]	; 8011ce0 <kalman_3gyro.constprop.0+0x1804>
 8011fb0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011fb4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011fb8:	ed1f 6ac4 	vldr	s12, [pc, #-784]	; 8011cac <kalman_3gyro.constprop.0+0x17d0>
 8011fbc:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011fc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011fc4:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011fc8:	ed5f 6ac6 	vldr	s13, [pc, #-792]	; 8011cb4 <kalman_3gyro.constprop.0+0x17d8>
 8011fcc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fd4:	f2c2 8356 	blt.w	8014684 <kalman_3gyro.constprop.0+0x41a8>
 8011fd8:	ed1f 7acb 	vldr	s14, [pc, #-812]	; 8011cb0 <kalman_3gyro.constprop.0+0x17d4>
 8011fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fe4:	f142 8356 	bpl.w	8014694 <kalman_3gyro.constprop.0+0x41b8>
 8011fe8:	ed5f 6ace 	vldr	s13, [pc, #-824]	; 8011cb4 <kalman_3gyro.constprop.0+0x17d8>
 8011fec:	ed1f 7ace 	vldr	s14, [pc, #-824]	; 8011cb8 <kalman_3gyro.constprop.0+0x17dc>
 8011ff0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8011ff4:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8011ff8:	ee66 6a87 	vmul.f32	s13, s13, s14
 8011ffc:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8012000:	eea6 7a86 	vfma.f32	s14, s13, s12
 8012004:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012008:	eef4 7ae6 	vcmpe.f32	s15, s13
 801200c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012010:	db0d      	blt.n	801202e <kalman_3gyro.constprop.0+0x1b52>
 8012012:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012016:	ed1f 7ad7 	vldr	s14, [pc, #-860]	; 8011cbc <kalman_3gyro.constprop.0+0x17e0>
 801201a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801201e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8012022:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012026:	ed1f 7ada 	vldr	s14, [pc, #-872]	; 8011cc0 <kalman_3gyro.constprop.0+0x17e4>
 801202a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801202e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012032:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8012036:	ee77 6a26 	vadd.f32	s13, s14, s13
 801203a:	ed5f 4ade 	vldr	s9, [pc, #-888]	; 8011cc4 <kalman_3gyro.constprop.0+0x17e8>
 801203e:	eec5 5a26 	vdiv.f32	s11, s10, s13
 8012042:	ed1f 6ade 	vldr	s12, [pc, #-888]	; 8011ccc <kalman_3gyro.constprop.0+0x17f0>
 8012046:	eef4 7ae4 	vcmpe.f32	s15, s9
 801204a:	fec5 5a86 	vmaxnm.f32	s11, s11, s12
 801204e:	ed5f 6ae0 	vldr	s13, [pc, #-896]	; 8011cd0 <kalman_3gyro.constprop.0+0x17f4>
 8012052:	ed1f 5ae3 	vldr	s10, [pc, #-908]	; 8011cc8 <kalman_3gyro.constprop.0+0x17ec>
 8012056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801205a:	ee25 5a85 	vmul.f32	s10, s11, s10
 801205e:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8012062:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012066:	f142 8386 	bpl.w	8014776 <kalman_3gyro.constprop.0+0x429a>
 801206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206e:	f2c2 8386 	blt.w	801477e <kalman_3gyro.constprop.0+0x42a2>
 8012072:	ed5f 6aea 	vldr	s13, [pc, #-936]	; 8011ccc <kalman_3gyro.constprop.0+0x17f0>
 8012076:	eef4 7ae6 	vcmpe.f32	s15, s13
 801207a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801207e:	f142 8321 	bpl.w	80146c4 <kalman_3gyro.constprop.0+0x41e8>
 8012082:	ed5f 4aed 	vldr	s9, [pc, #-948]	; 8011cd0 <kalman_3gyro.constprop.0+0x17f4>
 8012086:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 8011cd4 <kalman_3gyro.constprop.0+0x17f8>
 801208a:	ee77 4ae4 	vsub.f32	s9, s15, s9
 801208e:	ed1f 4aee 	vldr	s8, [pc, #-952]	; 8011cd8 <kalman_3gyro.constprop.0+0x17fc>
 8012092:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8012096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801209a:	eee4 6a84 	vfma.f32	s13, s9, s8
 801209e:	eeb0 9a66 	vmov.f32	s18, s13
 80120a2:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 8011ce0 <kalman_3gyro.constprop.0+0x1804>
 80120a6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80120aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ae:	f2c2 8321 	blt.w	80146f4 <kalman_3gyro.constprop.0+0x4218>
 80120b2:	ed5f 6af6 	vldr	s13, [pc, #-984]	; 8011cdc <kalman_3gyro.constprop.0+0x1800>
 80120b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80120ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120be:	f142 8321 	bpl.w	8014704 <kalman_3gyro.constprop.0+0x4228>
 80120c2:	ed5f 4af9 	vldr	s9, [pc, #-996]	; 8011ce0 <kalman_3gyro.constprop.0+0x1804>
 80120c6:	ed5f 6af9 	vldr	s13, [pc, #-996]	; 8011ce4 <kalman_3gyro.constprop.0+0x1808>
 80120ca:	ee77 4ae4 	vsub.f32	s9, s15, s9
 80120ce:	ed9f 4a31 	vldr	s8, [pc, #196]	; 8012194 <kalman_3gyro.constprop.0+0x1cb8>
 80120d2:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80120d6:	eddf 6a30 	vldr	s13, [pc, #192]	; 8012198 <kalman_3gyro.constprop.0+0x1cbc>
 80120da:	eee4 6a84 	vfma.f32	s13, s9, s8
 80120de:	eeb0 9a66 	vmov.f32	s18, s13
 80120e2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80121cc <kalman_3gyro.constprop.0+0x1cf0>
 80120e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80120ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ee:	f2c2 8321 	blt.w	8014734 <kalman_3gyro.constprop.0+0x4258>
 80120f2:	eddf 6a33 	vldr	s13, [pc, #204]	; 80121c0 <kalman_3gyro.constprop.0+0x1ce4>
 80120f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80120fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120fe:	f142 8321 	bpl.w	8014744 <kalman_3gyro.constprop.0+0x4268>
 8012102:	eddf 4a32 	vldr	s9, [pc, #200]	; 80121cc <kalman_3gyro.constprop.0+0x1cf0>
 8012106:	eddf 6a25 	vldr	s13, [pc, #148]	; 801219c <kalman_3gyro.constprop.0+0x1cc0>
 801210a:	ee77 4ae4 	vsub.f32	s9, s15, s9
 801210e:	eeb2 4a04 	vmov.f32	s8, #36	; 0x41200000  10.0
 8012112:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8012116:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 801211a:	eee4 6a84 	vfma.f32	s13, s9, s8
 801211e:	eeb0 9a66 	vmov.f32	s18, s13
 8012122:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8012126:	eef4 7ae6 	vcmpe.f32	s15, s13
 801212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801212e:	f2c1 87e9 	blt.w	8014104 <kalman_3gyro.constprop.0+0x3c28>
 8012132:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8012136:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80121a0 <kalman_3gyro.constprop.0+0x1cc4>
 801213a:	ee77 4ae4 	vsub.f32	s9, s15, s9
 801213e:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
 8012142:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8012146:	eddf 6a17 	vldr	s13, [pc, #92]	; 80121a4 <kalman_3gyro.constprop.0+0x1cc8>
 801214a:	eee4 6a84 	vfma.f32	s13, s9, s8
 801214e:	eeb0 9a66 	vmov.f32	s18, s13
 8012152:	f001 bfd7 	b.w	8014104 <kalman_3gyro.constprop.0+0x3c28>
 8012156:	ee36 7a87 	vadd.f32	s14, s13, s14
 801215a:	ee36 6a07 	vadd.f32	s12, s12, s14
 801215e:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
 8012162:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012166:	ed9b 7a05 	vldr	s14, [fp, #20]
 801216a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801216e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012172:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012176:	eef4 7ac7 	vcmpe.f32	s15, s14
 801217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801217e:	f102 8158 	bmi.w	8014432 <kalman_3gyro.constprop.0+0x3f56>
 8012182:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 8012186:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 801218a:	e5ec      	b.n	8011d66 <kalman_3gyro.constprop.0+0x188a>
 801218c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012190:	e5d6      	b.n	8011d40 <kalman_3gyro.constprop.0+0x1864>
 8012192:	bf00      	nop
 8012194:	4247ffff 	.word	0x4247ffff
 8012198:	3f933333 	.word	0x3f933333
 801219c:	410c0000 	.word	0x410c0000
 80121a0:	42c80000 	.word	0x42c80000
 80121a4:	424a0000 	.word	0x424a0000
 80121a8:	3c23d70a 	.word	0x3c23d70a
 80121ac:	3b449ba6 	.word	0x3b449ba6
 80121b0:	3fb33333 	.word	0x3fb33333
 80121b4:	3ecccccd 	.word	0x3ecccccd
 80121b8:	3f8f5c29 	.word	0x3f8f5c29
 80121bc:	3f59999a 	.word	0x3f59999a
 80121c0:	3e4ccccd 	.word	0x3e4ccccd
 80121c4:	3f99999a 	.word	0x3f99999a
 80121c8:	3be56041 	.word	0x3be56041
 80121cc:	3dcccccd 	.word	0x3dcccccd
 80121d0:	3e333333 	.word	0x3e333333
 80121d4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80121d8:	ed1f 6a0d 	vldr	s12, [pc, #-52]	; 80121a8 <kalman_3gyro.constprop.0+0x1ccc>
 80121dc:	eeb0 7a49 	vmov.f32	s14, s18
 80121e0:	eef0 5a49 	vmov.f32	s11, s18
 80121e4:	ed1f 5a0f 	vldr	s10, [pc, #-60]	; 80121ac <kalman_3gyro.constprop.0+0x1cd0>
 80121e8:	eddd 6a05 	vldr	s13, [sp, #20]
 80121ec:	eddd 4a01 	vldr	s9, [sp, #4]
 80121f0:	ee66 caa4 	vmul.f32	s25, s13, s9
 80121f4:	eddd 6a1a 	vldr	s13, [sp, #104]	; 0x68
 80121f8:	ee76 4aa6 	vadd.f32	s9, s13, s13
 80121fc:	eddd 6a1b 	vldr	s13, [sp, #108]	; 0x6c
 8012200:	ed9d 4a6d 	vldr	s8, [sp, #436]	; 0x1b4
 8012204:	eddd 3a6e 	vldr	s7, [sp, #440]	; 0x1b8
 8012208:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 801220c:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 8012210:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012214:	ee2c 4a84 	vmul.f32	s8, s25, s8
 8012218:	ee63 3aac 	vmul.f32	s7, s7, s25
 801221c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8012220:	ee66 6a87 	vmul.f32	s13, s13, s14
 8012224:	ee63 ca2c 	vmul.f32	s25, s6, s25
 8012228:	ee2c ca22 	vmul.f32	s24, s24, s5
 801222c:	ed8d 5a46 	vstr	s10, [sp, #280]	; 0x118
 8012230:	ed9d 5a0d 	vldr	s10, [sp, #52]	; 0x34
 8012234:	f89b 200c 	ldrb.w	r2, [fp, #12]
 8012238:	edcd 4a76 	vstr	s9, [sp, #472]	; 0x1d8
 801223c:	edcd 6a77 	vstr	s13, [sp, #476]	; 0x1dc
 8012240:	ed8d aa71 	vstr	s20, [sp, #452]	; 0x1c4
 8012244:	ed8d aa72 	vstr	s20, [sp, #456]	; 0x1c8
 8012248:	ed8d 6a47 	vstr	s12, [sp, #284]	; 0x11c
 801224c:	ed8d 5a78 	vstr	s10, [sp, #480]	; 0x1e0
 8012250:	ed8d 4a6d 	vstr	s8, [sp, #436]	; 0x1b4
 8012254:	edcd 3a6e 	vstr	s7, [sp, #440]	; 0x1b8
 8012258:	edcd ca6f 	vstr	s25, [sp, #444]	; 0x1bc
 801225c:	ed8d ca70 	vstr	s24, [sp, #448]	; 0x1c0
 8012260:	2a00      	cmp	r2, #0
 8012262:	f001 831c 	beq.w	801389e <kalman_3gyro.constprop.0+0x33c2>
 8012266:	ee77 3a07 	vadd.f32	s7, s14, s14
 801226a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801226e:	ee27 ca0c 	vmul.f32	s24, s14, s24
 8012272:	ee25 5a25 	vmul.f32	s10, s10, s11
 8012276:	ee2a 7a07 	vmul.f32	s14, s20, s14
 801227a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 801227e:	ee26 6a25 	vmul.f32	s12, s12, s11
 8012282:	f89b 200d 	ldrb.w	r2, [fp, #13]
 8012286:	f89b 100e 	ldrb.w	r1, [fp, #14]
 801228a:	ed8d ca70 	vstr	s24, [sp, #448]	; 0x1c0
 801228e:	ed8d 5a40 	vstr	s10, [sp, #256]	; 0x100
 8012292:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 8012296:	ed8d 5a42 	vstr	s10, [sp, #264]	; 0x108
 801229a:	edcd 6a77 	vstr	s13, [sp, #476]	; 0x1dc
 801229e:	ed8d 7a71 	vstr	s14, [sp, #452]	; 0x1c4
 80122a2:	ed8d 7a72 	vstr	s14, [sp, #456]	; 0x1c8
 80122a6:	ed8d 6a47 	vstr	s12, [sp, #284]	; 0x11c
 80122aa:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 80122ae:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
 80122b2:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
 80122b6:	f88d 10a3 	strb.w	r1, [sp, #163]	; 0xa3
 80122ba:	f88d 10a4 	strb.w	r1, [sp, #164]	; 0xa4
 80122be:	f88d 10a5 	strb.w	r1, [sp, #165]	; 0xa5
 80122c2:	b159      	cbz	r1, 80122dc <kalman_3gyro.constprop.0+0x1e00>
 80122c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80122cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122d0:	dd04      	ble.n	80122dc <kalman_3gyro.constprop.0+0x1e00>
 80122d2:	2000      	movs	r0, #0
 80122d4:	f88d 00a3 	strb.w	r0, [sp, #163]	; 0xa3
 80122d8:	f8ad 00a4 	strh.w	r0, [sp, #164]	; 0xa4
 80122dc:	eef5 eac0 	vcmpe.f32	s29, #0.0
 80122e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e4:	dd09      	ble.n	80122fa <kalman_3gyro.constprop.0+0x1e1e>
 80122e6:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 80122ea:	eef4 7ac8 	vcmpe.f32	s15, s16
 80122ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f2:	db02      	blt.n	80122fa <kalman_3gyro.constprop.0+0x1e1e>
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	f001 872e 	beq.w	8014156 <kalman_3gyro.constprop.0+0x3c7a>
 80122fa:	b132      	cbz	r2, 801230a <kalman_3gyro.constprop.0+0x1e2e>
 80122fc:	f240 1001 	movw	r0, #257	; 0x101
 8012300:	2301      	movs	r3, #1
 8012302:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
 8012306:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 801230a:	2001      	movs	r0, #1
 801230c:	4603      	mov	r3, r0
 801230e:	f88d 00a9 	strb.w	r0, [sp, #169]	; 0xa9
 8012312:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 8012316:	ed5f 7a5a 	vldr	s15, [pc, #-360]	; 80121b0 <kalman_3gyro.constprop.0+0x1cd4>
 801231a:	eef4 9ae7 	vcmpe.f32	s19, s15
 801231e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012322:	dc09      	bgt.n	8012338 <kalman_3gyro.constprop.0+0x1e5c>
 8012324:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 80121b4 <kalman_3gyro.constprop.0+0x1cd8>
 8012328:	eef4 9ae7 	vcmpe.f32	s19, s15
 801232c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012330:	d402      	bmi.n	8012338 <kalman_3gyro.constprop.0+0x1e5c>
 8012332:	2a00      	cmp	r2, #0
 8012334:	f041 87c6 	bne.w	80142c4 <kalman_3gyro.constprop.0+0x3de8>
 8012338:	2300      	movs	r3, #0
 801233a:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 801233e:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 8012342:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
 8012346:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 801234a:	ed5f 7a65 	vldr	s15, [pc, #-404]	; 80121b8 <kalman_3gyro.constprop.0+0x1cdc>
 801234e:	eeb4 eae7 	vcmpe.f32	s28, s15
 8012352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012356:	dc09      	bgt.n	801236c <kalman_3gyro.constprop.0+0x1e90>
 8012358:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 80121bc <kalman_3gyro.constprop.0+0x1ce0>
 801235c:	eeb4 eae7 	vcmpe.f32	s28, s15
 8012360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012364:	d402      	bmi.n	801236c <kalman_3gyro.constprop.0+0x1e90>
 8012366:	2900      	cmp	r1, #0
 8012368:	f041 877e 	bne.w	8014268 <kalman_3gyro.constprop.0+0x3d8c>
 801236c:	2300      	movs	r3, #0
 801236e:	f88d 30a3 	strb.w	r3, [sp, #163]	; 0xa3
 8012372:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 8012376:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
 801237a:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 801237e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012382:	eef4 bae7 	vcmpe.f32	s23, s15
 8012386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801238a:	f341 8275 	ble.w	8013878 <kalman_3gyro.constprop.0+0x339c>
 801238e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012392:	ee7b 7aa7 	vadd.f32	s15, s23, s15
 8012396:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801239a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801239e:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80123a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123a6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80123aa:	eef4 bac7 	vcmpe.f32	s23, s14
 80123ae:	2300      	movs	r3, #0
 80123b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123b4:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 80123b8:	bfc4      	itt	gt
 80123ba:	f88d 30a9 	strbgt.w	r3, [sp, #169]	; 0xa9
 80123be:	f88d 30ab 	strbgt.w	r3, [sp, #171]	; 0xab
 80123c2:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 80123c6:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 80123ca:	edcd 4a76 	vstr	s9, [sp, #472]	; 0x1d8
 80123ce:	2b0e      	cmp	r3, #14
 80123d0:	edcd 7a78 	vstr	s15, [sp, #480]	; 0x1e0
 80123d4:	dc02      	bgt.n	80123dc <kalman_3gyro.constprop.0+0x1f00>
 80123d6:	3305      	adds	r3, #5
 80123d8:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 80123dc:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80123e0:	eef4 7acf 	vcmpe.f32	s15, s30
 80123e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e8:	f340 81d4 	ble.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 80123ec:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 80123f0:	eef4 7aea 	vcmpe.f32	s15, s21
 80123f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123f8:	f340 81cc 	ble.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 80123fc:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8012400:	eef4 7acb 	vcmpe.f32	s15, s22
 8012404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012408:	f340 81c4 	ble.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 801240c:	9b08      	ldr	r3, [sp, #32]
 801240e:	ed5f 7a94 	vldr	s15, [pc, #-592]	; 80121c0 <kalman_3gyro.constprop.0+0x1ce4>
 8012412:	ed93 7a06 	vldr	s14, [r3, #24]
 8012416:	eef0 6ac7 	vabs.f32	s13, s14
 801241a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012422:	f140 81b7 	bpl.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 8012426:	edd3 6a07 	vldr	s13, [r3, #28]
 801242a:	eeb0 6ae6 	vabs.f32	s12, s13
 801242e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012436:	f140 81ad 	bpl.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 801243a:	ed93 6a08 	vldr	s12, [r3, #32]
 801243e:	eef0 5ac6 	vabs.f32	s11, s12
 8012442:	eef4 5ae7 	vcmpe.f32	s11, s15
 8012446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244a:	f140 81a3 	bpl.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 801244e:	eddd 7a02 	vldr	s15, [sp, #8]
 8012452:	eeb0 eae7 	vabs.f32	s28, s15
 8012456:	ed5f 7aa5 	vldr	s15, [pc, #-660]	; 80121c4 <kalman_3gyro.constprop.0+0x1ce8>
 801245a:	eeb4 eae7 	vcmpe.f32	s28, s15
 801245e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012462:	f140 8197 	bpl.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 8012466:	eddd 5a03 	vldr	s11, [sp, #12]
 801246a:	eef0 5ae5 	vabs.f32	s11, s11
 801246e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8012472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012476:	f140 818d 	bpl.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 801247a:	eddd 5a04 	vldr	s11, [sp, #16]
 801247e:	eef0 5ae5 	vabs.f32	s11, s11
 8012482:	eef4 5ae7 	vcmpe.f32	s11, s15
 8012486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801248a:	f140 8183 	bpl.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 801248e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012490:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 8012494:	edd3 7a00 	vldr	s15, [r3]
 8012498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801249a:	edd4 5a00 	vldr	s11, [r4]
 801249e:	ed93 4a00 	vldr	s8, [r3]
 80124a2:	fe87 5a84 	vmaxnm.f32	s10, s15, s8
 80124a6:	fec7 4ac4 	vminnm.f32	s9, s15, s8
 80124aa:	ee77 7a84 	vadd.f32	s15, s15, s8
 80124ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80124b0:	fe85 5a25 	vmaxnm.f32	s10, s10, s11
 80124b4:	ed93 4a00 	vldr	s8, [r3]
 80124b8:	fec4 4ae5 	vminnm.f32	s9, s9, s11
 80124bc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80124c0:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 80124c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80124c6:	2a09      	cmp	r2, #9
 80124c8:	edd3 5a00 	vldr	s11, [r3]
 80124cc:	bf8c      	ite	hi
 80124ce:	230a      	movhi	r3, #10
 80124d0:	2305      	movls	r3, #5
 80124d2:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 80124d6:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 80124da:	ee77 7a84 	vadd.f32	s15, s15, s8
 80124de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80124e0:	2b05      	cmp	r3, #5
 80124e2:	fe85 5a25 	vmaxnm.f32	s10, s10, s11
 80124e6:	fec4 4ae5 	vminnm.f32	s9, s9, s11
 80124ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80124ee:	edd1 5a00 	vldr	s11, [r1]
 80124f2:	d033      	beq.n	801255c <kalman_3gyro.constprop.0+0x2080>
 80124f4:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 80124f8:	ed91 4a00 	vldr	s8, [r1]
 80124fc:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 8012500:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012504:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012508:	ee77 7a84 	vadd.f32	s15, s15, s8
 801250c:	ed91 4a00 	vldr	s8, [r1]
 8012510:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 8012514:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012518:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 801251c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012520:	ed91 4a00 	vldr	s8, [r1]
 8012524:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 8012528:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 801252c:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012530:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012534:	ed91 4a00 	vldr	s8, [r1]
 8012538:	2b0a      	cmp	r3, #10
 801253a:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 801253e:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012542:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012546:	d109      	bne.n	801255c <kalman_3gyro.constprop.0+0x2080>
 8012548:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 801254c:	ed91 4a00 	vldr	s8, [r1]
 8012550:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012554:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012558:	ee77 7a84 	vadd.f32	s15, s15, s8
 801255c:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012560:	ed5f 4ae7 	vldr	s9, [pc, #-924]	; 80121c8 <kalman_3gyro.constprop.0+0x1cec>
 8012564:	ee25 5a25 	vmul.f32	s10, s10, s11
 8012568:	eeb4 5ae4 	vcmpe.f32	s10, s9
 801256c:	ed1f 4ae9 	vldr	s8, [pc, #-932]	; 80121cc <kalman_3gyro.constprop.0+0x1cf0>
 8012570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012574:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012578:	f300 810c 	bgt.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 801257c:	eef0 7ae7 	vabs.f32	s15, s15
 8012580:	ed1f 5aed 	vldr	s10, [pc, #-948]	; 80121d0 <kalman_3gyro.constprop.0+0x1cf4>
 8012584:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012588:	eef4 7ac5 	vcmpe.f32	s15, s10
 801258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012590:	f300 8100 	bgt.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 8012594:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012596:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 801259a:	edd1 7a00 	vldr	s15, [r1]
 801259e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80125a0:	ed90 4a00 	vldr	s8, [r0]
 80125a4:	edd1 3a00 	vldr	s7, [r1]
 80125a8:	fe87 5aa3 	vmaxnm.f32	s10, s15, s7
 80125ac:	fec7 4ae3 	vminnm.f32	s9, s15, s7
 80125b0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80125b4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80125b6:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 80125ba:	edd1 3a00 	vldr	s7, [r1]
 80125be:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 80125c2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80125c6:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80125c8:	fe85 5a23 	vmaxnm.f32	s10, s10, s7
 80125cc:	ed91 4a00 	vldr	s8, [r1]
 80125d0:	fec4 4ae3 	vminnm.f32	s9, s9, s7
 80125d4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80125d8:	2b05      	cmp	r3, #5
 80125da:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 80125de:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 80125e2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80125e6:	d033      	beq.n	8012650 <kalman_3gyro.constprop.0+0x2174>
 80125e8:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 80125ec:	ed91 4a00 	vldr	s8, [r1]
 80125f0:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 80125f4:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 80125f8:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 80125fc:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012600:	ed91 4a00 	vldr	s8, [r1]
 8012604:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8012608:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 801260c:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012610:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012614:	ed91 4a00 	vldr	s8, [r1]
 8012618:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 801261c:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012620:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012624:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012628:	ed91 4a00 	vldr	s8, [r1]
 801262c:	2b0a      	cmp	r3, #10
 801262e:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012632:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 8012636:	ee77 7a84 	vadd.f32	s15, s15, s8
 801263a:	d109      	bne.n	8012650 <kalman_3gyro.constprop.0+0x2174>
 801263c:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8012640:	ed91 4a00 	vldr	s8, [r1]
 8012644:	fe85 5a04 	vmaxnm.f32	s10, s10, s8
 8012648:	fec4 4ac4 	vminnm.f32	s9, s9, s8
 801264c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012650:	ee35 5a64 	vsub.f32	s10, s10, s9
 8012654:	eddf 4ab3 	vldr	s9, [pc, #716]	; 8012924 <kalman_3gyro.constprop.0+0x2448>
 8012658:	ee25 5a25 	vmul.f32	s10, s10, s11
 801265c:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8012660:	ed9f 4ab1 	vldr	s8, [pc, #708]	; 8012928 <kalman_3gyro.constprop.0+0x244c>
 8012664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012668:	ee67 7a84 	vmul.f32	s15, s15, s8
 801266c:	f300 8092 	bgt.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 8012670:	eef0 7ae7 	vabs.f32	s15, s15
 8012674:	ed9f 5aad 	vldr	s10, [pc, #692]	; 801292c <kalman_3gyro.constprop.0+0x2450>
 8012678:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801267c:	eef4 7ac5 	vcmpe.f32	s15, s10
 8012680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012684:	f300 8086 	bgt.w	8012794 <kalman_3gyro.constprop.0+0x22b8>
 8012688:	9916      	ldr	r1, [sp, #88]	; 0x58
 801268a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 801268c:	ed91 4a00 	vldr	s8, [r1]
 8012690:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8012692:	2b05      	cmp	r3, #5
 8012694:	edd1 3a00 	vldr	s7, [r1]
 8012698:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 801269c:	edd1 4a00 	vldr	s9, [r1]
 80126a0:	fec4 7a23 	vmaxnm.f32	s15, s8, s7
 80126a4:	fe84 5a63 	vminnm.f32	s10, s8, s7
 80126a8:	ee74 3a23 	vadd.f32	s7, s8, s7
 80126ac:	fec4 7aa7 	vmaxnm.f32	s15, s9, s15
 80126b0:	ed95 4a00 	vldr	s8, [r5]
 80126b4:	fe84 5ac5 	vminnm.f32	s10, s9, s10
 80126b8:	ee74 3aa3 	vadd.f32	s7, s9, s7
 80126bc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80126be:	fec4 7a27 	vmaxnm.f32	s15, s8, s15
 80126c2:	edd5 4a00 	vldr	s9, [r5]
 80126c6:	fe84 5a45 	vminnm.f32	s10, s8, s10
 80126ca:	ee34 4a23 	vadd.f32	s8, s8, s7
 80126ce:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 80126d2:	fe84 5ac5 	vminnm.f32	s10, s9, s10
 80126d6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80126da:	d033      	beq.n	8012744 <kalman_3gyro.constprop.0+0x2268>
 80126dc:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 80126e0:	ed95 4a00 	vldr	s8, [r5]
 80126e4:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 80126e8:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 80126ec:	fe85 5a44 	vminnm.f32	s10, s10, s8
 80126f0:	ee74 4a24 	vadd.f32	s9, s8, s9
 80126f4:	ed95 4a00 	vldr	s8, [r5]
 80126f8:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 80126fc:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012700:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8012704:	fe85 5a44 	vminnm.f32	s10, s10, s8
 8012708:	ed95 4a00 	vldr	s8, [r5]
 801270c:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 8012710:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 8012714:	fe85 5a44 	vminnm.f32	s10, s10, s8
 8012718:	ee34 4a84 	vadd.f32	s8, s9, s8
 801271c:	edd5 4a00 	vldr	s9, [r5]
 8012720:	2b0a      	cmp	r3, #10
 8012722:	fec7 7aa4 	vmaxnm.f32	s15, s15, s9
 8012726:	fe85 5a64 	vminnm.f32	s10, s10, s9
 801272a:	ee74 4a24 	vadd.f32	s9, s8, s9
 801272e:	d109      	bne.n	8012744 <kalman_3gyro.constprop.0+0x2268>
 8012730:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 8012734:	ed93 4a00 	vldr	s8, [r3]
 8012738:	fec7 7a84 	vmaxnm.f32	s15, s15, s8
 801273c:	fe85 5a44 	vminnm.f32	s10, s10, s8
 8012740:	ee74 4a84 	vadd.f32	s9, s9, s8
 8012744:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8012748:	ed9f 4a76 	vldr	s8, [pc, #472]	; 8012924 <kalman_3gyro.constprop.0+0x2448>
 801274c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012750:	eef4 7ac4 	vcmpe.f32	s15, s8
 8012754:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8012928 <kalman_3gyro.constprop.0+0x244c>
 8012758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801275c:	ee64 4a85 	vmul.f32	s9, s9, s10
 8012760:	dc18      	bgt.n	8012794 <kalman_3gyro.constprop.0+0x22b8>
 8012762:	eef0 7ae4 	vabs.f32	s15, s9
 8012766:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801276a:	eddf 7a70 	vldr	s15, [pc, #448]	; 801292c <kalman_3gyro.constprop.0+0x2450>
 801276e:	eef4 5ae7 	vcmpe.f32	s11, s15
 8012772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012776:	dc0d      	bgt.n	8012794 <kalman_3gyro.constprop.0+0x22b8>
 8012778:	f89b 5005 	ldrb.w	r5, [fp, #5]
 801277c:	2d00      	cmp	r5, #0
 801277e:	f000 80dd 	beq.w	801293c <kalman_3gyro.constprop.0+0x2460>
 8012782:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 8012786:	2b01      	cmp	r3, #1
 8012788:	f002 8432 	beq.w	8014ff0 <kalman_3gyro.constprop.0+0x4b14>
 801278c:	2201      	movs	r2, #1
 801278e:	462b      	mov	r3, r5
 8012790:	9201      	str	r2, [sp, #4]
 8012792:	e00f      	b.n	80127b4 <kalman_3gyro.constprop.0+0x22d8>
 8012794:	2100      	movs	r1, #0
 8012796:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801279a:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
 801279e:	f88d 10a8 	strb.w	r1, [sp, #168]	; 0xa8
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f000 80cb 	beq.w	801293e <kalman_3gyro.constprop.0+0x2462>
 80127a8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 80127ac:	2a01      	cmp	r2, #1
 80127ae:	f001 862f 	beq.w	8014410 <kalman_3gyro.constprop.0+0x3f34>
 80127b2:	9101      	str	r1, [sp, #4]
 80127b4:	2b02      	cmp	r3, #2
 80127b6:	f041 87ed 	bne.w	8014794 <kalman_3gyro.constprop.0+0x42b8>
 80127ba:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80127be:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 80127c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80127c6:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 80127ca:	eecf 6a07 	vdiv.f32	s13, s30, s14
 80127ce:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80127d2:	eef4 7ac8 	vcmpe.f32	s15, s16
 80127d6:	ee8a 6a87 	vdiv.f32	s12, s21, s14
 80127da:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 80127de:	f240 1201 	movw	r2, #257	; 0x101
 80127e2:	ee8b 7a07 	vdiv.f32	s14, s22, s14
 80127e6:	2301      	movs	r3, #1
 80127e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ec:	edcd 6a2b 	vstr	s13, [sp, #172]	; 0xac
 80127f0:	ed8d 6a2c 	vstr	s12, [sp, #176]	; 0xb0
 80127f4:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 80127f8:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
 80127fc:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 8012800:	f2c2 80c4 	blt.w	801498c <kalman_3gyro.constprop.0+0x44b0>
 8012804:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8012808:	2a00      	cmp	r2, #0
 801280a:	f002 83e1 	beq.w	8014fd0 <kalman_3gyro.constprop.0+0x4af4>
 801280e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012812:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8012816:	3301      	adds	r3, #1
 8012818:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 801281c:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 8012820:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012824:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 8012828:	f002 84e5 	beq.w	80151f6 <kalman_3gyro.constprop.0+0x4d1a>
 801282c:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8012830:	f002 80fa 	beq.w	8014a28 <kalman_3gyro.constprop.0+0x454c>
 8012834:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012838:	2a00      	cmp	r2, #0
 801283a:	f042 80fa 	bne.w	8014a32 <kalman_3gyro.constprop.0+0x4556>
 801283e:	f04f 31ff 	mov.w	r1, #4294967295
 8012842:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012844:	a82e      	add	r0, sp, #184	; 0xb8
 8012846:	4613      	mov	r3, r2
 8012848:	edd2 7a00 	vldr	s15, [r2]
 801284c:	3101      	adds	r1, #1
 801284e:	330c      	adds	r3, #12
 8012850:	3204      	adds	r2, #4
 8012852:	461c      	mov	r4, r3
 8012854:	ed94 7a00 	vldr	s14, [r4]
 8012858:	330c      	adds	r3, #12
 801285a:	4598      	cmp	r8, r3
 801285c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012860:	d1f7      	bne.n	8012852 <kalman_3gyro.constprop.0+0x2376>
 8012862:	2902      	cmp	r1, #2
 8012864:	ece0 7a01 	vstmia	r0!, {s15}
 8012868:	f108 0804 	add.w	r8, r8, #4
 801286c:	d1eb      	bne.n	8012846 <kalman_3gyro.constprop.0+0x236a>
 801286e:	eddf 7a30 	vldr	s15, [pc, #192]	; 8012930 <kalman_3gyro.constprop.0+0x2454>
 8012872:	ed9d 4a2e 	vldr	s8, [sp, #184]	; 0xb8
 8012876:	eddd 4a2f 	vldr	s9, [sp, #188]	; 0xbc
 801287a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801287e:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 8012882:	ee24 4a27 	vmul.f32	s8, s8, s15
 8012886:	ee64 4aa7 	vmul.f32	s9, s9, s15
 801288a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801288e:	460a      	mov	r2, r1
 8012890:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8012892:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 8012896:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 801289a:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 801289e:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 80128a2:	330c      	adds	r3, #12
 80128a4:	4293      	cmp	r3, r2
 80128a6:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 80128aa:	d1f8      	bne.n	801289e <kalman_3gyro.constprop.0+0x23c2>
 80128ac:	1d1a      	adds	r2, r3, #4
 80128ae:	4290      	cmp	r0, r2
 80128b0:	ece4 7a01 	vstmia	r4!, {s15}
 80128b4:	d1ef      	bne.n	8012896 <kalman_3gyro.constprop.0+0x23ba>
 80128b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128b8:	ed9d 5a2b 	vldr	s10, [sp, #172]	; 0xac
 80128bc:	edd3 7a00 	vldr	s15, [r3]
 80128c0:	eddd 5a2c 	vldr	s11, [sp, #176]	; 0xb0
 80128c4:	ed9d 6a2d 	vldr	s12, [sp, #180]	; 0xb4
 80128c8:	ee97 5a84 	vfnms.f32	s10, s15, s8
 80128cc:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 80128d0:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 80128d4:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80128d8:	ed8d 5a2e 	vstr	s10, [sp, #184]	; 0xb8
 80128dc:	edcd 5a2f 	vstr	s11, [sp, #188]	; 0xbc
 80128e0:	ed8d 6a30 	vstr	s12, [sp, #192]	; 0xc0
 80128e4:	b14b      	cbz	r3, 80128fa <kalman_3gyro.constprop.0+0x241e>
 80128e6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80128ea:	ed9d 7a1e 	vldr	s14, [sp, #120]	; 0x78
 80128ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128f6:	f102 8556 	bmi.w	80153a6 <kalman_3gyro.constprop.0+0x4eca>
 80128fa:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 80128fe:	2a1e      	cmp	r2, #30
 8012900:	f002 84ef 	beq.w	80152e2 <kalman_3gyro.constprop.0+0x4e06>
 8012904:	2aff      	cmp	r2, #255	; 0xff
 8012906:	f102 0301 	add.w	r3, r2, #1
 801290a:	bf08      	it	eq
 801290c:	23ff      	moveq	r3, #255	; 0xff
 801290e:	f04f 0200 	mov.w	r2, #0
 8012912:	bf18      	it	ne
 8012914:	b2db      	uxtbne	r3, r3
 8012916:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 801291a:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801291e:	9b01      	ldr	r3, [sp, #4]
 8012920:	e01f      	b.n	8012962 <kalman_3gyro.constprop.0+0x2486>
 8012922:	bf00      	nop
 8012924:	3be56041 	.word	0x3be56041
 8012928:	3dcccccd 	.word	0x3dcccccd
 801292c:	3e333333 	.word	0x3e333333
 8012930:	3d088889 	.word	0x3d088889
 8012934:	42480000 	.word	0x42480000
 8012938:	00000000 	.word	0x00000000
 801293c:	2301      	movs	r3, #1
 801293e:	2200      	movs	r2, #0
 8012940:	f8db 41bc 	ldr.w	r4, [fp, #444]	; 0x1bc
 8012944:	f8db 01c0 	ldr.w	r0, [fp, #448]	; 0x1c0
 8012948:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 801294c:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
 8012950:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8012954:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8012958:	f88b 2001 	strb.w	r2, [fp, #1]
 801295c:	947f      	str	r4, [sp, #508]	; 0x1fc
 801295e:	9080      	str	r0, [sp, #512]	; 0x200
 8012960:	9181      	str	r1, [sp, #516]	; 0x204
 8012962:	ed5f 7a0c 	vldr	s15, [pc, #-48]	; 8012934 <kalman_3gyro.constprop.0+0x2458>
 8012966:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801296e:	f2c0 8774 	blt.w	801385a <kalman_3gyro.constprop.0+0x337e>
 8012972:	2200      	movs	r2, #0
 8012974:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
 8012978:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 801297c:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 8012980:	2b01      	cmp	r3, #1
 8012982:	d125      	bne.n	80129d0 <kalman_3gyro.constprop.0+0x24f4>
 8012984:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 8012988:	ed9d 5a70 	vldr	s10, [sp, #448]	; 0x1c0
 801298c:	eddd 5a71 	vldr	s11, [sp, #452]	; 0x1c4
 8012990:	ed9d 6a72 	vldr	s12, [sp, #456]	; 0x1c8
 8012994:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8012998:	ed9d 7a41 	vldr	s14, [sp, #260]	; 0x104
 801299c:	eddd 7a42 	vldr	s15, [sp, #264]	; 0x108
 80129a0:	ee25 5a24 	vmul.f32	s10, s10, s9
 80129a4:	ee65 5aa4 	vmul.f32	s11, s11, s9
 80129a8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80129ac:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80129b0:	ee37 7a07 	vadd.f32	s14, s14, s14
 80129b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80129b8:	ed8d 5a70 	vstr	s10, [sp, #448]	; 0x1c0
 80129bc:	edcd 5a71 	vstr	s11, [sp, #452]	; 0x1c4
 80129c0:	ed8d 6a72 	vstr	s12, [sp, #456]	; 0x1c8
 80129c4:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80129c8:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 80129cc:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 80129d0:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 80129d4:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 80129d8:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 80129dc:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 80129e0:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 80129e4:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 80129e8:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 80129ec:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 80129f0:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 80129f4:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 80129f8:	eddd 9a40 	vldr	s19, [sp, #256]	; 0x100
 80129fc:	ed9d 9a41 	vldr	s18, [sp, #260]	; 0x104
 8012a00:	ed9d 0a43 	vldr	s0, [sp, #268]	; 0x10c
 8012a04:	eddd 0a44 	vldr	s1, [sp, #272]	; 0x110
 8012a08:	ed9d 1a45 	vldr	s2, [sp, #276]	; 0x114
 8012a0c:	eddd 1a46 	vldr	s3, [sp, #280]	; 0x118
 8012a10:	ed9d 2a47 	vldr	s4, [sp, #284]	; 0x11c
 8012a14:	eddd 2a48 	vldr	s5, [sp, #288]	; 0x120
 8012a18:	eddd 7a6d 	vldr	s15, [sp, #436]	; 0x1b4
 8012a1c:	eea8 4a08 	vfma.f32	s8, s16, s16
 8012a20:	eee0 4a00 	vfma.f32	s9, s0, s0
 8012a24:	eea0 5aa0 	vfma.f32	s10, s1, s1
 8012a28:	eee1 5a01 	vfma.f32	s11, s2, s2
 8012a2c:	eea1 6aa1 	vfma.f32	s12, s3, s3
 8012a30:	eee2 6a02 	vfma.f32	s13, s4, s4
 8012a34:	eea2 7aa2 	vfma.f32	s14, s5, s5
 8012a38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012a3c:	eea9 3aa9 	vfma.f32	s6, s19, s19
 8012a40:	eee9 3a09 	vfma.f32	s7, s18, s18
 8012a44:	edcd 8a73 	vstr	s17, [sp, #460]	; 0x1cc
 8012a48:	edcd 8a74 	vstr	s17, [sp, #464]	; 0x1d0
 8012a4c:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 8012a50:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 8012a54:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 8012a58:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 8012a5c:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 8012a60:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 8012a64:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 8012a68:	edcd 7a85 	vstr	s15, [sp, #532]	; 0x214
 8012a6c:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 8012a70:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 8012a74:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 8012a78:	ed9d 4a6e 	vldr	s8, [sp, #440]	; 0x1b8
 8012a7c:	eddd 4a6f 	vldr	s9, [sp, #444]	; 0x1bc
 8012a80:	ed9d 5a70 	vldr	s10, [sp, #448]	; 0x1c0
 8012a84:	eddd 5a71 	vldr	s11, [sp, #452]	; 0x1c4
 8012a88:	ed9d 6a72 	vldr	s12, [sp, #456]	; 0x1c8
 8012a8c:	eddd 6a76 	vldr	s13, [sp, #472]	; 0x1d8
 8012a90:	ed9d 7a77 	vldr	s14, [sp, #476]	; 0x1dc
 8012a94:	eddd 7a78 	vldr	s15, [sp, #480]	; 0x1e0
 8012a98:	ee68 8aa8 	vmul.f32	s17, s17, s17
 8012a9c:	ee24 4a04 	vmul.f32	s8, s8, s8
 8012aa0:	ee64 4aa4 	vmul.f32	s9, s9, s9
 8012aa4:	ee25 5a05 	vmul.f32	s10, s10, s10
 8012aa8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8012aac:	ee26 6a06 	vmul.f32	s12, s12, s12
 8012ab0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8012ab4:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012ab8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012abc:	ed8d 4a86 	vstr	s8, [sp, #536]	; 0x218
 8012ac0:	edcd 8a8b 	vstr	s17, [sp, #556]	; 0x22c
 8012ac4:	edcd 8a8c 	vstr	s17, [sp, #560]	; 0x230
 8012ac8:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 8012acc:	edcd 4a87 	vstr	s9, [sp, #540]	; 0x21c
 8012ad0:	ed8d 5a88 	vstr	s10, [sp, #544]	; 0x220
 8012ad4:	edcd 5a89 	vstr	s11, [sp, #548]	; 0x224
 8012ad8:	ed8d 6a8a 	vstr	s12, [sp, #552]	; 0x228
 8012adc:	edcd 6a8e 	vstr	s13, [sp, #568]	; 0x238
 8012ae0:	ed8d 7a8f 	vstr	s14, [sp, #572]	; 0x23c
 8012ae4:	edcd 7a90 	vstr	s15, [sp, #576]	; 0x240
 8012ae8:	2600      	movs	r6, #0
 8012aea:	ed1f 8a6d 	vldr	s16, [pc, #-436]	; 8012938 <kalman_3gyro.constprop.0+0x245c>
 8012aee:	ad28      	add	r5, sp, #160	; 0xa0
 8012af0:	f50d 64c2 	add.w	r4, sp, #1552	; 0x610
 8012af4:	f50b 78ea 	add.w	r8, fp, #468	; 0x1d4
 8012af8:	e005      	b.n	8012b06 <kalman_3gyro.constprop.0+0x262a>
 8012afa:	3601      	adds	r6, #1
 8012afc:	2e0c      	cmp	r6, #12
 8012afe:	f104 0404 	add.w	r4, r4, #4
 8012b02:	f000 84fe 	beq.w	8013502 <kalman_3gyro.constprop.0+0x3026>
 8012b06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d0f5      	beq.n	8012afa <kalman_3gyro.constprop.0+0x261e>
 8012b0e:	ed89 8a00 	vstr	s16, [r9]
 8012b12:	ed89 8a01 	vstr	s16, [r9, #4]
 8012b16:	ed89 8a02 	vstr	s16, [r9, #8]
 8012b1a:	ed89 8a03 	vstr	s16, [r9, #12]
 8012b1e:	ed89 8a04 	vstr	s16, [r9, #16]
 8012b22:	ed89 8a05 	vstr	s16, [r9, #20]
 8012b26:	ed89 8a06 	vstr	s16, [r9, #24]
 8012b2a:	ed89 8a07 	vstr	s16, [r9, #28]
 8012b2e:	ed89 8a08 	vstr	s16, [r9, #32]
 8012b32:	edd4 da00 	vldr	s27, [r4]
 8012b36:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 8012b3a:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 8012b3e:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 8012b42:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 8012b46:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 8012b4a:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 8012b4e:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 8012b52:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 8012b56:	464f      	mov	r7, r9
 8012b58:	4643      	mov	r3, r8
 8012b5a:	464a      	mov	r2, r9
 8012b5c:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 8012b60:	ecb3 7a01 	vldmia	r3!, {s14}
 8012b64:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b6c:	ecf2 7a01 	vldmia	r2!, {s15}
 8012b70:	d006      	beq.n	8012b80 <kalman_3gyro.constprop.0+0x26a4>
 8012b72:	eef5 da40 	vcmp.f32	s27, #0.0
 8012b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b7a:	bf18      	it	ne
 8012b7c:	eeed 7a87 	vfmane.f32	s15, s27, s14
 8012b80:	ed93 7a08 	vldr	s14, [r3, #32]
 8012b84:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b8c:	d006      	beq.n	8012b9c <kalman_3gyro.constprop.0+0x26c0>
 8012b8e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b96:	bf18      	it	ne
 8012b98:	eeee 7a07 	vfmane.f32	s15, s28, s14
 8012b9c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8012ba0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ba8:	d006      	beq.n	8012bb8 <kalman_3gyro.constprop.0+0x26dc>
 8012baa:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb2:	bf18      	it	ne
 8012bb4:	eeee 7a87 	vfmane.f32	s15, s29, s14
 8012bb8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8012bbc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bc4:	d006      	beq.n	8012bd4 <kalman_3gyro.constprop.0+0x26f8>
 8012bc6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bce:	bf18      	it	ne
 8012bd0:	eeef 7a07 	vfmane.f32	s15, s30, s14
 8012bd4:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8012bd8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012be0:	d006      	beq.n	8012bf0 <kalman_3gyro.constprop.0+0x2714>
 8012be2:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bea:	bf18      	it	ne
 8012bec:	eeef 7a87 	vfmane.f32	s15, s31, s14
 8012bf0:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 8012bf4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bfc:	d006      	beq.n	8012c0c <kalman_3gyro.constprop.0+0x2730>
 8012bfe:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c06:	bf18      	it	ne
 8012c08:	eee6 7a87 	vfmane.f32	s15, s13, s14
 8012c0c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 8012c10:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c18:	d006      	beq.n	8012c28 <kalman_3gyro.constprop.0+0x274c>
 8012c1a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c22:	bf18      	it	ne
 8012c24:	eee6 7a07 	vfmane.f32	s15, s12, s14
 8012c28:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 8012c2c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c34:	d006      	beq.n	8012c44 <kalman_3gyro.constprop.0+0x2768>
 8012c36:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c3e:	bf18      	it	ne
 8012c40:	eee5 7a87 	vfmane.f32	s15, s11, s14
 8012c44:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 8012c48:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c50:	d006      	beq.n	8012c60 <kalman_3gyro.constprop.0+0x2784>
 8012c52:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c5a:	bf18      	it	ne
 8012c5c:	eee5 7a07 	vfmane.f32	s15, s10, s14
 8012c60:	428b      	cmp	r3, r1
 8012c62:	ed42 7a01 	vstr	s15, [r2, #-4]
 8012c66:	f47f af7b 	bne.w	8012b60 <kalman_3gyro.constprop.0+0x2684>
 8012c6a:	eef5 da40 	vcmp.f32	s27, #0.0
 8012c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c72:	edd9 8a00 	vldr	s17, [r9]
 8012c76:	f040 855a 	bne.w	801372e <kalman_3gyro.constprop.0+0x3252>
 8012c7a:	eef0 7a6d 	vmov.f32	s15, s27
 8012c7e:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c86:	ed99 9a01 	vldr	s18, [r9, #4]
 8012c8a:	d006      	beq.n	8012c9a <kalman_3gyro.constprop.0+0x27be>
 8012c8c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8012c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c94:	bf18      	it	ne
 8012c96:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 8012c9a:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca2:	edd9 aa02 	vldr	s21, [r9, #8]
 8012ca6:	d006      	beq.n	8012cb6 <kalman_3gyro.constprop.0+0x27da>
 8012ca8:	eef5 aa40 	vcmp.f32	s21, #0.0
 8012cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cb0:	bf18      	it	ne
 8012cb2:	eeea 7aae 	vfmane.f32	s15, s21, s29
 8012cb6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cbe:	edd9 ba03 	vldr	s23, [r9, #12]
 8012cc2:	d006      	beq.n	8012cd2 <kalman_3gyro.constprop.0+0x27f6>
 8012cc4:	eef5 ba40 	vcmp.f32	s23, #0.0
 8012cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ccc:	bf18      	it	ne
 8012cce:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 8012cd2:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cda:	edd9 ca04 	vldr	s25, [r9, #16]
 8012cde:	d006      	beq.n	8012cee <kalman_3gyro.constprop.0+0x2812>
 8012ce0:	eef5 ca40 	vcmp.f32	s25, #0.0
 8012ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ce8:	bf18      	it	ne
 8012cea:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 8012cee:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012cf6:	ed99 ca05 	vldr	s24, [r9, #20]
 8012cfa:	d006      	beq.n	8012d0a <kalman_3gyro.constprop.0+0x282e>
 8012cfc:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8012d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d04:	bf18      	it	ne
 8012d06:	eeec 7a26 	vfmane.f32	s15, s24, s13
 8012d0a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d12:	ed99 da06 	vldr	s26, [r9, #24]
 8012d16:	d006      	beq.n	8012d26 <kalman_3gyro.constprop.0+0x284a>
 8012d18:	eeb5 da40 	vcmp.f32	s26, #0.0
 8012d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d20:	bf18      	it	ne
 8012d22:	eeed 7a06 	vfmane.f32	s15, s26, s12
 8012d26:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d2e:	ed99 aa07 	vldr	s20, [r9, #28]
 8012d32:	d006      	beq.n	8012d42 <kalman_3gyro.constprop.0+0x2866>
 8012d34:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8012d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d3c:	bf18      	it	ne
 8012d3e:	eeea 7a25 	vfmane.f32	s15, s20, s11
 8012d42:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d4a:	ed99 ba08 	vldr	s22, [r9, #32]
 8012d4e:	d006      	beq.n	8012d5e <kalman_3gyro.constprop.0+0x2882>
 8012d50:	eeb5 ba40 	vcmp.f32	s22, #0.0
 8012d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d58:	bf18      	it	ne
 8012d5a:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 8012d5e:	ab85      	add	r3, sp, #532	; 0x214
 8012d60:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8012d64:	ed93 7a00 	vldr	s14, [r3]
 8012d68:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8012d6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012d70:	eec4 7a87 	vdiv.f32	s15, s9, s14
 8012d74:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8012d78:	ee29 9a27 	vmul.f32	s18, s18, s15
 8012d7c:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8012d80:	ee6b baa7 	vmul.f32	s23, s23, s15
 8012d84:	ee6c caa7 	vmul.f32	s25, s25, s15
 8012d88:	ee2c ca27 	vmul.f32	s24, s24, s15
 8012d8c:	ee2d da27 	vmul.f32	s26, s26, s15
 8012d90:	ee2a aa27 	vmul.f32	s20, s20, s15
 8012d94:	ee2b ba27 	vmul.f32	s22, s22, s15
 8012d98:	2e05      	cmp	r6, #5
 8012d9a:	edc9 8a00 	vstr	s17, [r9]
 8012d9e:	ed89 9a01 	vstr	s18, [r9, #4]
 8012da2:	edc9 aa02 	vstr	s21, [r9, #8]
 8012da6:	edc9 ba03 	vstr	s23, [r9, #12]
 8012daa:	edc9 ca04 	vstr	s25, [r9, #16]
 8012dae:	ed89 ca05 	vstr	s24, [r9, #20]
 8012db2:	ed89 da06 	vstr	s26, [r9, #24]
 8012db6:	ed89 aa07 	vstr	s20, [r9, #28]
 8012dba:	ed89 ba08 	vstr	s22, [r9, #32]
 8012dbe:	ea4f 0386 	mov.w	r3, r6, lsl #2
 8012dc2:	f340 84ae 	ble.w	8013722 <kalman_3gyro.constprop.0+0x3246>
 8012dc6:	eef5 da40 	vcmp.f32	s27, #0.0
 8012dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dce:	f000 8527 	beq.w	8013820 <kalman_3gyro.constprop.0+0x3344>
 8012dd2:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 8012dd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dde:	d001      	beq.n	8012de4 <kalman_3gyro.constprop.0+0x2908>
 8012de0:	ee67 7aad 	vmul.f32	s15, s15, s27
 8012de4:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dec:	d008      	beq.n	8012e00 <kalman_3gyro.constprop.0+0x2924>
 8012dee:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 8012df2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dfa:	bf18      	it	ne
 8012dfc:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 8012e00:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e08:	d008      	beq.n	8012e1c <kalman_3gyro.constprop.0+0x2940>
 8012e0a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 8012e0e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e16:	bf18      	it	ne
 8012e18:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 8012e1c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e24:	d008      	beq.n	8012e38 <kalman_3gyro.constprop.0+0x295c>
 8012e26:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 8012e2a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e32:	bf18      	it	ne
 8012e34:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 8012e38:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e40:	d008      	beq.n	8012e54 <kalman_3gyro.constprop.0+0x2978>
 8012e42:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 8012e46:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e4e:	bf18      	it	ne
 8012e50:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 8012e54:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e5c:	d008      	beq.n	8012e70 <kalman_3gyro.constprop.0+0x2994>
 8012e5e:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 8012e62:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e6a:	bf18      	it	ne
 8012e6c:	eee7 7a26 	vfmane.f32	s15, s14, s13
 8012e70:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e78:	d008      	beq.n	8012e8c <kalman_3gyro.constprop.0+0x29b0>
 8012e7a:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 8012e7e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e86:	bf18      	it	ne
 8012e88:	eee7 7a06 	vfmane.f32	s15, s14, s12
 8012e8c:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e94:	d008      	beq.n	8012ea8 <kalman_3gyro.constprop.0+0x29cc>
 8012e96:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 8012e9a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea2:	bf18      	it	ne
 8012ea4:	eee7 7a25 	vfmane.f32	s15, s14, s11
 8012ea8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb0:	d008      	beq.n	8012ec4 <kalman_3gyro.constprop.0+0x29e8>
 8012eb2:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 8012eb6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ebe:	bf18      	it	ne
 8012ec0:	eee7 7a05 	vfmane.f32	s15, s14, s10
 8012ec4:	aa79      	add	r2, sp, #484	; 0x1e4
 8012ec6:	4413      	add	r3, r2
 8012ec8:	edd3 9a00 	vldr	s19, [r3]
 8012ecc:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8012ed0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8012ed4:	2100      	movs	r1, #0
 8012ed6:	4650      	mov	r0, sl
 8012ed8:	ed8d 5a04 	vstr	s10, [sp, #16]
 8012edc:	edcd 5a03 	vstr	s11, [sp, #12]
 8012ee0:	ed8d 6a02 	vstr	s12, [sp, #8]
 8012ee4:	edcd 6a01 	vstr	s13, [sp, #4]
 8012ee8:	f007 feef 	bl	801acca <memset>
 8012eec:	4651      	mov	r1, sl
 8012eee:	4653      	mov	r3, sl
 8012ef0:	ed9d 5a04 	vldr	s10, [sp, #16]
 8012ef4:	eddd 5a03 	vldr	s11, [sp, #12]
 8012ef8:	ed9d 6a02 	vldr	s12, [sp, #8]
 8012efc:	eddd 6a01 	vldr	s13, [sp, #4]
 8012f00:	f109 0224 	add.w	r2, r9, #36	; 0x24
 8012f04:	ecf7 7a01 	vldmia	r7!, {s15}
 8012f08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f10:	d062      	beq.n	8012fd8 <kalman_3gyro.constprop.0+0x2afc>
 8012f12:	eef5 da40 	vcmp.f32	s27, #0.0
 8012f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f1a:	d005      	beq.n	8012f28 <kalman_3gyro.constprop.0+0x2a4c>
 8012f1c:	ed93 7a00 	vldr	s14, [r3]
 8012f20:	eead 7aa7 	vfma.f32	s14, s27, s15
 8012f24:	ed83 7a00 	vstr	s14, [r3]
 8012f28:	eeb5 ea40 	vcmp.f32	s28, #0.0
 8012f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f30:	d005      	beq.n	8012f3e <kalman_3gyro.constprop.0+0x2a62>
 8012f32:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8012f36:	eeae 7a27 	vfma.f32	s14, s28, s15
 8012f3a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 8012f3e:	eef5 ea40 	vcmp.f32	s29, #0.0
 8012f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f46:	d005      	beq.n	8012f54 <kalman_3gyro.constprop.0+0x2a78>
 8012f48:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8012f4c:	eeae 7aa7 	vfma.f32	s14, s29, s15
 8012f50:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 8012f54:	eeb5 fa40 	vcmp.f32	s30, #0.0
 8012f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f5c:	d005      	beq.n	8012f6a <kalman_3gyro.constprop.0+0x2a8e>
 8012f5e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8012f62:	eeaf 7a27 	vfma.f32	s14, s30, s15
 8012f66:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 8012f6a:	eef5 fa40 	vcmp.f32	s31, #0.0
 8012f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f72:	d005      	beq.n	8012f80 <kalman_3gyro.constprop.0+0x2aa4>
 8012f74:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8012f78:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 8012f7c:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8012f80:	eef5 6a40 	vcmp.f32	s13, #0.0
 8012f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f88:	d005      	beq.n	8012f96 <kalman_3gyro.constprop.0+0x2aba>
 8012f8a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 8012f8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8012f92:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 8012f96:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8012f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f9e:	d005      	beq.n	8012fac <kalman_3gyro.constprop.0+0x2ad0>
 8012fa0:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8012fa4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012fa8:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 8012fac:	eef5 5a40 	vcmp.f32	s11, #0.0
 8012fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fb4:	d005      	beq.n	8012fc2 <kalman_3gyro.constprop.0+0x2ae6>
 8012fb6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8012fba:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8012fbe:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 8012fc2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8012fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fca:	d005      	beq.n	8012fd8 <kalman_3gyro.constprop.0+0x2afc>
 8012fcc:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 8012fd0:	eea5 7a27 	vfma.f32	s14, s10, s15
 8012fd4:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 8012fd8:	4297      	cmp	r7, r2
 8012fda:	f103 0304 	add.w	r3, r3, #4
 8012fde:	d191      	bne.n	8012f04 <kalman_3gyro.constprop.0+0x2a28>
 8012fe0:	f20d 40cc 	addw	r0, sp, #1228	; 0x4cc
 8012fe4:	46d4      	mov	ip, sl
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	2208      	movs	r2, #8
 8012fea:	2700      	movs	r7, #0
 8012fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012ff0:	e074      	b.n	80130dc <kalman_3gyro.constprop.0+0x2c00>
 8012ff2:	eddc 7a00 	vldr	s15, [ip]
 8012ff6:	eef1 7a67 	vneg.f32	s15, s15
 8012ffa:	2f01      	cmp	r7, #1
 8012ffc:	ed83 8a01 	vstr	s16, [r3, #4]
 8013000:	edcc 7a00 	vstr	s15, [ip]
 8013004:	f1a2 0e07 	sub.w	lr, r2, #7
 8013008:	f000 8329 	beq.w	801365e <kalman_3gyro.constprop.0+0x3182>
 801300c:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013010:	edde 7a00 	vldr	s15, [lr]
 8013014:	eef1 7a67 	vneg.f32	s15, s15
 8013018:	2f02      	cmp	r7, #2
 801301a:	edce 7a00 	vstr	s15, [lr]
 801301e:	ed83 8a02 	vstr	s16, [r3, #8]
 8013022:	f1a2 0e06 	sub.w	lr, r2, #6
 8013026:	f000 8303 	beq.w	8013630 <kalman_3gyro.constprop.0+0x3154>
 801302a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 801302e:	edde 7a00 	vldr	s15, [lr]
 8013032:	eef1 7a67 	vneg.f32	s15, s15
 8013036:	2f03      	cmp	r7, #3
 8013038:	edce 7a00 	vstr	s15, [lr]
 801303c:	ed83 8a03 	vstr	s16, [r3, #12]
 8013040:	f1a2 0e05 	sub.w	lr, r2, #5
 8013044:	d170      	bne.n	8013128 <kalman_3gyro.constprop.0+0x2c4c>
 8013046:	eddc 7a03 	vldr	s15, [ip, #12]
 801304a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801304e:	edcc 7a03 	vstr	s15, [ip, #12]
 8013052:	f1a2 0e04 	sub.w	lr, r2, #4
 8013056:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 801305a:	edde 7a00 	vldr	s15, [lr]
 801305e:	eef1 7a67 	vneg.f32	s15, s15
 8013062:	edce 7a00 	vstr	s15, [lr]
 8013066:	f1a2 0e03 	sub.w	lr, r2, #3
 801306a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 801306e:	edde 7a00 	vldr	s15, [lr]
 8013072:	eef1 7a67 	vneg.f32	s15, s15
 8013076:	ed83 8a04 	vstr	s16, [r3, #16]
 801307a:	ed83 8a05 	vstr	s16, [r3, #20]
 801307e:	ed83 8a06 	vstr	s16, [r3, #24]
 8013082:	edce 7a00 	vstr	s15, [lr]
 8013086:	f1a2 0e02 	sub.w	lr, r2, #2
 801308a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 801308e:	edde 7a00 	vldr	s15, [lr]
 8013092:	eef1 7a67 	vneg.f32	s15, s15
 8013096:	2f07      	cmp	r7, #7
 8013098:	edce 7a00 	vstr	s15, [lr]
 801309c:	ed83 8a07 	vstr	s16, [r3, #28]
 80130a0:	f102 3eff 	add.w	lr, r2, #4294967295
 80130a4:	f040 80a2 	bne.w	80131ec <kalman_3gyro.constprop.0+0x2d10>
 80130a8:	eddc 7a07 	vldr	s15, [ip, #28]
 80130ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80130b0:	ed83 8a08 	vstr	s16, [r3, #32]
 80130b4:	edcc 7a07 	vstr	s15, [ip, #28]
 80130b8:	eb0a 0e82 	add.w	lr, sl, r2, lsl #2
 80130bc:	edde 7a00 	vldr	s15, [lr]
 80130c0:	eef1 7a67 	vneg.f32	s15, s15
 80130c4:	3701      	adds	r7, #1
 80130c6:	2f09      	cmp	r7, #9
 80130c8:	edce 7a00 	vstr	s15, [lr]
 80130cc:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80130d0:	f10c 0c24 	add.w	ip, ip, #36	; 0x24
 80130d4:	f102 0209 	add.w	r2, r2, #9
 80130d8:	f000 809f 	beq.w	801321a <kalman_3gyro.constprop.0+0x2d3e>
 80130dc:	ed83 8a00 	vstr	s16, [r3]
 80130e0:	2f00      	cmp	r7, #0
 80130e2:	d186      	bne.n	8012ff2 <kalman_3gyro.constprop.0+0x2b16>
 80130e4:	edda 7a00 	vldr	s15, [sl]
 80130e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80130ec:	edcc 7a00 	vstr	s15, [ip]
 80130f0:	f1a2 0e07 	sub.w	lr, r2, #7
 80130f4:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 80130f8:	edde 7a00 	vldr	s15, [lr]
 80130fc:	eef1 7a67 	vneg.f32	s15, s15
 8013100:	edce 7a00 	vstr	s15, [lr]
 8013104:	f1a2 0e06 	sub.w	lr, r2, #6
 8013108:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 801310c:	edde 7a00 	vldr	s15, [lr]
 8013110:	eef1 7a67 	vneg.f32	s15, s15
 8013114:	ed83 8a01 	vstr	s16, [r3, #4]
 8013118:	ed83 8a02 	vstr	s16, [r3, #8]
 801311c:	ed83 8a03 	vstr	s16, [r3, #12]
 8013120:	edce 7a00 	vstr	s15, [lr]
 8013124:	f1a2 0e05 	sub.w	lr, r2, #5
 8013128:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 801312c:	edde 7a00 	vldr	s15, [lr]
 8013130:	eef1 7a67 	vneg.f32	s15, s15
 8013134:	2f04      	cmp	r7, #4
 8013136:	edce 7a00 	vstr	s15, [lr]
 801313a:	ed83 8a04 	vstr	s16, [r3, #16]
 801313e:	f1a2 0e04 	sub.w	lr, r2, #4
 8013142:	d031      	beq.n	80131a8 <kalman_3gyro.constprop.0+0x2ccc>
 8013144:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013148:	edde 7a00 	vldr	s15, [lr]
 801314c:	eef1 7a67 	vneg.f32	s15, s15
 8013150:	2f05      	cmp	r7, #5
 8013152:	edce 7a00 	vstr	s15, [lr]
 8013156:	ed83 8a05 	vstr	s16, [r3, #20]
 801315a:	f1a2 0e03 	sub.w	lr, r2, #3
 801315e:	f000 8246 	beq.w	80135ee <kalman_3gyro.constprop.0+0x3112>
 8013162:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013166:	edde 7a00 	vldr	s15, [lr]
 801316a:	eef1 7a67 	vneg.f32	s15, s15
 801316e:	2f06      	cmp	r7, #6
 8013170:	edce 7a00 	vstr	s15, [lr]
 8013174:	ed83 8a06 	vstr	s16, [r3, #24]
 8013178:	f1a2 0e02 	sub.w	lr, r2, #2
 801317c:	d185      	bne.n	801308a <kalman_3gyro.constprop.0+0x2bae>
 801317e:	eddc 7a06 	vldr	s15, [ip, #24]
 8013182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013186:	edcc 7a06 	vstr	s15, [ip, #24]
 801318a:	f102 3eff 	add.w	lr, r2, #4294967295
 801318e:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013192:	edde 7a00 	vldr	s15, [lr]
 8013196:	eef1 7a67 	vneg.f32	s15, s15
 801319a:	ed83 8a07 	vstr	s16, [r3, #28]
 801319e:	ed83 8a08 	vstr	s16, [r3, #32]
 80131a2:	edce 7a00 	vstr	s15, [lr]
 80131a6:	e787      	b.n	80130b8 <kalman_3gyro.constprop.0+0x2bdc>
 80131a8:	eddc 7a04 	vldr	s15, [ip, #16]
 80131ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80131b0:	edcc 7a04 	vstr	s15, [ip, #16]
 80131b4:	f1a2 0e03 	sub.w	lr, r2, #3
 80131b8:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 80131bc:	edde 7a00 	vldr	s15, [lr]
 80131c0:	eef1 7a67 	vneg.f32	s15, s15
 80131c4:	edce 7a00 	vstr	s15, [lr]
 80131c8:	f1a2 0e02 	sub.w	lr, r2, #2
 80131cc:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 80131d0:	edde 7a00 	vldr	s15, [lr]
 80131d4:	eef1 7a67 	vneg.f32	s15, s15
 80131d8:	ed83 8a05 	vstr	s16, [r3, #20]
 80131dc:	ed83 8a06 	vstr	s16, [r3, #24]
 80131e0:	ed83 8a07 	vstr	s16, [r3, #28]
 80131e4:	edce 7a00 	vstr	s15, [lr]
 80131e8:	f102 3eff 	add.w	lr, r2, #4294967295
 80131ec:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 80131f0:	edde 7a00 	vldr	s15, [lr]
 80131f4:	eef1 7a67 	vneg.f32	s15, s15
 80131f8:	2f08      	cmp	r7, #8
 80131fa:	ed83 8a08 	vstr	s16, [r3, #32]
 80131fe:	edce 7a00 	vstr	s15, [lr]
 8013202:	f47f af59 	bne.w	80130b8 <kalman_3gyro.constprop.0+0x2bdc>
 8013206:	ed9c 7a08 	vldr	s14, [ip, #32]
 801320a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801320e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013212:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8013216:	edc2 7a00 	vstr	s15, [r2]
 801321a:	2700      	movs	r7, #0
 801321c:	f50b 7ca2 	add.w	ip, fp, #324	; 0x144
 8013220:	ecb1 3a01 	vldmia	r1!, {s6}
 8013224:	465a      	mov	r2, fp
 8013226:	edd1 3a08 	vldr	s7, [r1, #32]
 801322a:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 801322e:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 8013232:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 8013236:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 801323a:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 801323e:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 8013242:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 8013246:	4603      	mov	r3, r0
 8013248:	eeb5 3a40 	vcmp.f32	s6, #0.0
 801324c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013250:	d00c      	beq.n	801326c <kalman_3gyro.constprop.0+0x2d90>
 8013252:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 8013256:	eef5 2a40 	vcmp.f32	s5, #0.0
 801325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801325e:	d005      	beq.n	801326c <kalman_3gyro.constprop.0+0x2d90>
 8013260:	edd3 7a00 	vldr	s15, [r3]
 8013264:	eee3 7a22 	vfma.f32	s15, s6, s5
 8013268:	edc3 7a00 	vstr	s15, [r3]
 801326c:	eef5 3a40 	vcmp.f32	s7, #0.0
 8013270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013274:	d00c      	beq.n	8013290 <kalman_3gyro.constprop.0+0x2db4>
 8013276:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 801327a:	eef5 2a40 	vcmp.f32	s5, #0.0
 801327e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013282:	d005      	beq.n	8013290 <kalman_3gyro.constprop.0+0x2db4>
 8013284:	edd3 7a00 	vldr	s15, [r3]
 8013288:	eee3 7aa2 	vfma.f32	s15, s7, s5
 801328c:	edc3 7a00 	vstr	s15, [r3]
 8013290:	eeb5 4a40 	vcmp.f32	s8, #0.0
 8013294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013298:	d00c      	beq.n	80132b4 <kalman_3gyro.constprop.0+0x2dd8>
 801329a:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 801329e:	eef5 2a40 	vcmp.f32	s5, #0.0
 80132a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a6:	d005      	beq.n	80132b4 <kalman_3gyro.constprop.0+0x2dd8>
 80132a8:	edd3 7a00 	vldr	s15, [r3]
 80132ac:	eee4 7a22 	vfma.f32	s15, s8, s5
 80132b0:	edc3 7a00 	vstr	s15, [r3]
 80132b4:	eef5 4a40 	vcmp.f32	s9, #0.0
 80132b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132bc:	d00c      	beq.n	80132d8 <kalman_3gyro.constprop.0+0x2dfc>
 80132be:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 80132c2:	eef5 2a40 	vcmp.f32	s5, #0.0
 80132c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ca:	d005      	beq.n	80132d8 <kalman_3gyro.constprop.0+0x2dfc>
 80132cc:	edd3 7a00 	vldr	s15, [r3]
 80132d0:	eee4 7aa2 	vfma.f32	s15, s9, s5
 80132d4:	edc3 7a00 	vstr	s15, [r3]
 80132d8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 80132dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e0:	d00c      	beq.n	80132fc <kalman_3gyro.constprop.0+0x2e20>
 80132e2:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 80132e6:	eef5 2a40 	vcmp.f32	s5, #0.0
 80132ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ee:	d005      	beq.n	80132fc <kalman_3gyro.constprop.0+0x2e20>
 80132f0:	edd3 7a00 	vldr	s15, [r3]
 80132f4:	eee5 7a22 	vfma.f32	s15, s10, s5
 80132f8:	edc3 7a00 	vstr	s15, [r3]
 80132fc:	eef5 5a40 	vcmp.f32	s11, #0.0
 8013300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013304:	d00c      	beq.n	8013320 <kalman_3gyro.constprop.0+0x2e44>
 8013306:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 801330a:	eef5 2a40 	vcmp.f32	s5, #0.0
 801330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013312:	d005      	beq.n	8013320 <kalman_3gyro.constprop.0+0x2e44>
 8013314:	edd3 7a00 	vldr	s15, [r3]
 8013318:	eee5 7aa2 	vfma.f32	s15, s11, s5
 801331c:	edc3 7a00 	vstr	s15, [r3]
 8013320:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8013324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013328:	d00c      	beq.n	8013344 <kalman_3gyro.constprop.0+0x2e68>
 801332a:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 801332e:	eef5 2a40 	vcmp.f32	s5, #0.0
 8013332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013336:	d005      	beq.n	8013344 <kalman_3gyro.constprop.0+0x2e68>
 8013338:	edd3 7a00 	vldr	s15, [r3]
 801333c:	eee6 7a22 	vfma.f32	s15, s12, s5
 8013340:	edc3 7a00 	vstr	s15, [r3]
 8013344:	eef5 6a40 	vcmp.f32	s13, #0.0
 8013348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334c:	d00c      	beq.n	8013368 <kalman_3gyro.constprop.0+0x2e8c>
 801334e:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 8013352:	eef5 2a40 	vcmp.f32	s5, #0.0
 8013356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801335a:	d005      	beq.n	8013368 <kalman_3gyro.constprop.0+0x2e8c>
 801335c:	edd3 7a00 	vldr	s15, [r3]
 8013360:	eee6 7aa2 	vfma.f32	s15, s13, s5
 8013364:	edc3 7a00 	vstr	s15, [r3]
 8013368:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013370:	d00c      	beq.n	801338c <kalman_3gyro.constprop.0+0x2eb0>
 8013372:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 8013376:	eef5 2a40 	vcmp.f32	s5, #0.0
 801337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801337e:	d005      	beq.n	801338c <kalman_3gyro.constprop.0+0x2eb0>
 8013380:	edd3 7a00 	vldr	s15, [r3]
 8013384:	eee7 7a22 	vfma.f32	s15, s14, s5
 8013388:	edc3 7a00 	vstr	s15, [r3]
 801338c:	3224      	adds	r2, #36	; 0x24
 801338e:	4594      	cmp	ip, r2
 8013390:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8013394:	f47f af58 	bne.w	8013248 <kalman_3gyro.constprop.0+0x2d6c>
 8013398:	3701      	adds	r7, #1
 801339a:	2f09      	cmp	r7, #9
 801339c:	f100 0004 	add.w	r0, r0, #4
 80133a0:	f47f af3e 	bne.w	8013220 <kalman_3gyro.constprop.0+0x2d44>
 80133a4:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80133a8:	4640      	mov	r0, r8
 80133aa:	f20d 41cc 	addw	r1, sp, #1228	; 0x4cc
 80133ae:	f007 fc7f 	bl	801acb0 <memcpy>
 80133b2:	eef5 8a40 	vcmp.f32	s17, #0.0
 80133b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ba:	f000 8193 	beq.w	80136e4 <kalman_3gyro.constprop.0+0x3208>
 80133be:	eef5 9a40 	vcmp.f32	s19, #0.0
 80133c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c6:	f000 818d 	beq.w	80136e4 <kalman_3gyro.constprop.0+0x3208>
 80133ca:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80133ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d2:	ee69 8aa8 	vmul.f32	s17, s19, s17
 80133d6:	f040 8229 	bne.w	801382c <kalman_3gyro.constprop.0+0x3350>
 80133da:	eef5 aa40 	vcmp.f32	s21, #0.0
 80133de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e2:	f000 818e 	beq.w	8013702 <kalman_3gyro.constprop.0+0x3226>
 80133e6:	eef5 ba40 	vcmp.f32	s23, #0.0
 80133ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133ee:	ee29 7aaa 	vmul.f32	s14, s19, s21
 80133f2:	f040 81e2 	bne.w	80137ba <kalman_3gyro.constprop.0+0x32de>
 80133f6:	eef0 ba47 	vmov.f32	s23, s14
 80133fa:	eef0 aa49 	vmov.f32	s21, s18
 80133fe:	eef5 ca40 	vcmp.f32	s25, #0.0
 8013402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013406:	f000 814f 	beq.w	80136a8 <kalman_3gyro.constprop.0+0x31cc>
 801340a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801340e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013412:	f000 8265 	beq.w	80138e0 <kalman_3gyro.constprop.0+0x3404>
 8013416:	eeb5 ca40 	vcmp.f32	s24, #0.0
 801341a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341e:	eef0 7a48 	vmov.f32	s15, s16
 8013422:	ee29 7aac 	vmul.f32	s14, s19, s25
 8013426:	f040 81dc 	bne.w	80137e2 <kalman_3gyro.constprop.0+0x3306>
 801342a:	eeb0 ca47 	vmov.f32	s24, s14
 801342e:	eef0 ca67 	vmov.f32	s25, s15
 8013432:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801343a:	f000 8190 	beq.w	801375e <kalman_3gyro.constprop.0+0x3282>
 801343e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8013442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013446:	f000 813c 	beq.w	80136c2 <kalman_3gyro.constprop.0+0x31e6>
 801344a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 801344e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013452:	eef0 7a48 	vmov.f32	s15, s16
 8013456:	ee29 7a8d 	vmul.f32	s14, s19, s26
 801345a:	f040 81d5 	bne.w	8013808 <kalman_3gyro.constprop.0+0x332c>
 801345e:	eeb0 aa47 	vmov.f32	s20, s14
 8013462:	eeb0 da67 	vmov.f32	s26, s15
 8013466:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801346e:	f000 8136 	beq.w	80136de <kalman_3gyro.constprop.0+0x3202>
 8013472:	eef5 9a40 	vcmp.f32	s19, #0.0
 8013476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801347a:	f000 8234 	beq.w	80138e6 <kalman_3gyro.constprop.0+0x340a>
 801347e:	eef0 7a48 	vmov.f32	s15, s16
 8013482:	ee2b ba29 	vmul.f32	s22, s22, s19
 8013486:	eef0 9a67 	vmov.f32	s19, s15
 801348a:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 801348e:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 8013492:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 8013496:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 801349a:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 801349e:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 80134a2:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 80134a6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 80134aa:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 80134ae:	ee73 8aa8 	vadd.f32	s17, s7, s17
 80134b2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 80134b6:	ee74 baab 	vadd.f32	s23, s9, s23
 80134ba:	ee75 ca2c 	vadd.f32	s25, s10, s25
 80134be:	ee35 ca8c 	vadd.f32	s24, s11, s24
 80134c2:	ee36 da0d 	vadd.f32	s26, s12, s26
 80134c6:	ee36 aa8a 	vadd.f32	s20, s13, s20
 80134ca:	ee77 9a29 	vadd.f32	s19, s14, s19
 80134ce:	ee37 ba8b 	vadd.f32	s22, s15, s22
 80134d2:	3601      	adds	r6, #1
 80134d4:	2e0c      	cmp	r6, #12
 80134d6:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 80134da:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 80134de:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 80134e2:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 80134e6:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 80134ea:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 80134ee:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 80134f2:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 80134f6:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 80134fa:	f104 0404 	add.w	r4, r4, #4
 80134fe:	f47f ab02 	bne.w	8012b06 <kalman_3gyro.constprop.0+0x262a>
 8013502:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 8013506:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 801350a:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801350e:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 8013512:	eee6 7a06 	vfma.f32	s15, s12, s12
 8013516:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801351a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801351e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013526:	f100 81cc 	bmi.w	80138c2 <kalman_3gyro.constprop.0+0x33e6>
 801352a:	eeb1 5ae7 	vsqrt.f32	s10, s15
 801352e:	eec5 7a85 	vdiv.f32	s15, s11, s10
 8013532:	ed9f 5aee 	vldr	s10, [pc, #952]	; 80138ec <kalman_3gyro.constprop.0+0x3410>
 8013536:	ee67 4a86 	vmul.f32	s9, s15, s12
 801353a:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801353e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013542:	f8dd 382c 	ldr.w	r3, [sp, #2092]	; 0x82c
 8013546:	aa34      	add	r2, sp, #208	; 0xd0
 8013548:	edc3 4a00 	vstr	s9, [r3]
 801354c:	edc3 5a01 	vstr	s11, [r3, #4]
 8013550:	edc3 7a02 	vstr	s15, [r3, #8]
 8013554:	ed83 5a03 	vstr	s10, [r3, #12]
 8013558:	4618      	mov	r0, r3
 801355a:	4611      	mov	r1, r2
 801355c:	ed8d 6a3c 	vstr	s12, [sp, #240]	; 0xf0
 8013560:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 8013564:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8013568:	ed8d 5a3f 	vstr	s10, [sp, #252]	; 0xfc
 801356c:	f7fb feb4 	bl	800f2d8 <qmult>
 8013570:	ed9d 6a35 	vldr	s12, [sp, #212]	; 0xd4
 8013574:	eddd 5a34 	vldr	s11, [sp, #208]	; 0xd0
 8013578:	ee66 7a06 	vmul.f32	s15, s12, s12
 801357c:	eddd 6a36 	vldr	s13, [sp, #216]	; 0xd8
 8013580:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8013584:	ed9d 7a37 	vldr	s14, [sp, #220]	; 0xdc
 8013588:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801358c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013590:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8013594:	eeb1 5ae7 	vsqrt.f32	s10, s15
 8013598:	eec4 7a85 	vdiv.f32	s15, s9, s10
 801359c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80135a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80135a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80135a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80135ac:	f8dd 3828 	ldr.w	r3, [sp, #2088]	; 0x828
 80135b0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80135b2:	edc3 5a00 	vstr	s11, [r3]
 80135b6:	ed83 6a01 	vstr	s12, [r3, #4]
 80135ba:	edc3 6a02 	vstr	s13, [r3, #8]
 80135be:	ed83 7a03 	vstr	s14, [r3, #12]
 80135c2:	ae52      	add	r6, sp, #328	; 0x148
 80135c4:	af5a      	add	r7, sp, #360	; 0x168
 80135c6:	4634      	mov	r4, r6
 80135c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80135ca:	42bc      	cmp	r4, r7
 80135cc:	6028      	str	r0, [r5, #0]
 80135ce:	6069      	str	r1, [r5, #4]
 80135d0:	60aa      	str	r2, [r5, #8]
 80135d2:	60eb      	str	r3, [r5, #12]
 80135d4:	f106 0610 	add.w	r6, r6, #16
 80135d8:	f105 0510 	add.w	r5, r5, #16
 80135dc:	d1f3      	bne.n	80135c6 <kalman_3gyro.constprop.0+0x30ea>
 80135de:	6830      	ldr	r0, [r6, #0]
 80135e0:	6028      	str	r0, [r5, #0]
 80135e2:	f20d 7dc4 	addw	sp, sp, #1988	; 0x7c4
 80135e6:	ecbd 8b10 	vpop	{d8-d15}
 80135ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ee:	eddc 7a05 	vldr	s15, [ip, #20]
 80135f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80135f6:	edcc 7a05 	vstr	s15, [ip, #20]
 80135fa:	f1a2 0e02 	sub.w	lr, r2, #2
 80135fe:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013602:	edde 7a00 	vldr	s15, [lr]
 8013606:	eef1 7a67 	vneg.f32	s15, s15
 801360a:	edce 7a00 	vstr	s15, [lr]
 801360e:	f102 3eff 	add.w	lr, r2, #4294967295
 8013612:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013616:	edde 7a00 	vldr	s15, [lr]
 801361a:	eef1 7a67 	vneg.f32	s15, s15
 801361e:	ed83 8a06 	vstr	s16, [r3, #24]
 8013622:	ed83 8a07 	vstr	s16, [r3, #28]
 8013626:	ed83 8a08 	vstr	s16, [r3, #32]
 801362a:	edce 7a00 	vstr	s15, [lr]
 801362e:	e543      	b.n	80130b8 <kalman_3gyro.constprop.0+0x2bdc>
 8013630:	eddc 7a02 	vldr	s15, [ip, #8]
 8013634:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013638:	edcc 7a02 	vstr	s15, [ip, #8]
 801363c:	f1a2 0e05 	sub.w	lr, r2, #5
 8013640:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013644:	edde 7a00 	vldr	s15, [lr]
 8013648:	eef1 7a67 	vneg.f32	s15, s15
 801364c:	ed83 8a03 	vstr	s16, [r3, #12]
 8013650:	edce 7a00 	vstr	s15, [lr]
 8013654:	ed83 8a04 	vstr	s16, [r3, #16]
 8013658:	f1a2 0e04 	sub.w	lr, r2, #4
 801365c:	e572      	b.n	8013144 <kalman_3gyro.constprop.0+0x2c68>
 801365e:	eddc 7a01 	vldr	s15, [ip, #4]
 8013662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013666:	edcc 7a01 	vstr	s15, [ip, #4]
 801366a:	f1a2 0e06 	sub.w	lr, r2, #6
 801366e:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 8013672:	edde 7a00 	vldr	s15, [lr]
 8013676:	eef1 7a67 	vneg.f32	s15, s15
 801367a:	ed83 8a02 	vstr	s16, [r3, #8]
 801367e:	edce 7a00 	vstr	s15, [lr]
 8013682:	ed83 8a03 	vstr	s16, [r3, #12]
 8013686:	f1a2 0e05 	sub.w	lr, r2, #5
 801368a:	e54d      	b.n	8013128 <kalman_3gyro.constprop.0+0x2c4c>
 801368c:	eef5 ca40 	vcmp.f32	s25, #0.0
 8013690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013694:	eeb0 7a48 	vmov.f32	s14, s16
 8013698:	ee69 7aab 	vmul.f32	s15, s19, s23
 801369c:	f040 8097 	bne.w	80137ce <kalman_3gyro.constprop.0+0x32f2>
 80136a0:	eef0 ca67 	vmov.f32	s25, s15
 80136a4:	eef0 ba47 	vmov.f32	s23, s14
 80136a8:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80136ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b0:	f43f aebf 	beq.w	8013432 <kalman_3gyro.constprop.0+0x2f56>
 80136b4:	eef5 9a40 	vcmp.f32	s19, #0.0
 80136b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136bc:	d142      	bne.n	8013744 <kalman_3gyro.constprop.0+0x3268>
 80136be:	eeb0 ca69 	vmov.f32	s24, s19
 80136c2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80136c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ca:	f040 80ba 	bne.w	8013842 <kalman_3gyro.constprop.0+0x3366>
 80136ce:	eeb5 ba40 	vcmp.f32	s22, #0.0
 80136d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136d6:	eeb0 da4a 	vmov.f32	s26, s20
 80136da:	f47f aeca 	bne.w	8013472 <kalman_3gyro.constprop.0+0x2f96>
 80136de:	eef0 9a4b 	vmov.f32	s19, s22
 80136e2:	e6d2      	b.n	801348a <kalman_3gyro.constprop.0+0x2fae>
 80136e4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80136e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ec:	d051      	beq.n	8013792 <kalman_3gyro.constprop.0+0x32b6>
 80136ee:	eef5 9a40 	vcmp.f32	s19, #0.0
 80136f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136f6:	f040 8097 	bne.w	8013828 <kalman_3gyro.constprop.0+0x334c>
 80136fa:	eef0 aa69 	vmov.f32	s21, s19
 80136fe:	eef0 8a69 	vmov.f32	s17, s19
 8013702:	eef5 ba40 	vcmp.f32	s23, #0.0
 8013706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801370a:	f43f ae78 	beq.w	80133fe <kalman_3gyro.constprop.0+0x2f22>
 801370e:	eef5 9a40 	vcmp.f32	s19, #0.0
 8013712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013716:	d1b9      	bne.n	801368c <kalman_3gyro.constprop.0+0x31b0>
 8013718:	eef0 ca69 	vmov.f32	s25, s19
 801371c:	eef0 ba69 	vmov.f32	s23, s19
 8013720:	e7c2      	b.n	80136a8 <kalman_3gyro.constprop.0+0x31cc>
 8013722:	aa79      	add	r2, sp, #484	; 0x1e4
 8013724:	4413      	add	r3, r2
 8013726:	edd3 9a00 	vldr	s19, [r3]
 801372a:	f7ff bbd1 	b.w	8012ed0 <kalman_3gyro.constprop.0+0x29f4>
 801372e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8013732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013736:	bf14      	ite	ne
 8013738:	ee68 7aad 	vmulne.f32	s15, s17, s27
 801373c:	eef0 7a68 	vmoveq.f32	s15, s17
 8013740:	f7ff ba9d 	b.w	8012c7e <kalman_3gyro.constprop.0+0x27a2>
 8013744:	eeb5 da40 	vcmp.f32	s26, #0.0
 8013748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801374c:	eeb0 7a48 	vmov.f32	s14, s16
 8013750:	ee69 7a8c 	vmul.f32	s15, s19, s24
 8013754:	d14e      	bne.n	80137f4 <kalman_3gyro.constprop.0+0x3318>
 8013756:	eeb0 da67 	vmov.f32	s26, s15
 801375a:	eeb0 ca47 	vmov.f32	s24, s14
 801375e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8013762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013766:	f43f ae7e 	beq.w	8013466 <kalman_3gyro.constprop.0+0x2f8a>
 801376a:	eef5 9a40 	vcmp.f32	s19, #0.0
 801376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013772:	f000 84df 	beq.w	8014134 <kalman_3gyro.constprop.0+0x3c58>
 8013776:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801377e:	eeb0 7a48 	vmov.f32	s14, s16
 8013782:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8013786:	d148      	bne.n	801381a <kalman_3gyro.constprop.0+0x333e>
 8013788:	eef0 9a67 	vmov.f32	s19, s15
 801378c:	eeb0 aa47 	vmov.f32	s20, s14
 8013790:	e67b      	b.n	801348a <kalman_3gyro.constprop.0+0x2fae>
 8013792:	eef5 aa40 	vcmp.f32	s21, #0.0
 8013796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801379a:	d05b      	beq.n	8013854 <kalman_3gyro.constprop.0+0x3378>
 801379c:	eef5 9a40 	vcmp.f32	s19, #0.0
 80137a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137a4:	d0a9      	beq.n	80136fa <kalman_3gyro.constprop.0+0x321e>
 80137a6:	eef5 ba40 	vcmp.f32	s23, #0.0
 80137aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ae:	eef0 8a49 	vmov.f32	s17, s18
 80137b2:	ee29 7aaa 	vmul.f32	s14, s19, s21
 80137b6:	f43f ae1e 	beq.w	80133f6 <kalman_3gyro.constprop.0+0x2f1a>
 80137ba:	eef5 ca40 	vcmp.f32	s25, #0.0
 80137be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137c2:	eef0 aa49 	vmov.f32	s21, s18
 80137c6:	ee69 7aab 	vmul.f32	s15, s19, s23
 80137ca:	f43f af69 	beq.w	80136a0 <kalman_3gyro.constprop.0+0x31c4>
 80137ce:	eeb5 ca40 	vcmp.f32	s24, #0.0
 80137d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d6:	eef0 ba47 	vmov.f32	s23, s14
 80137da:	ee29 7aac 	vmul.f32	s14, s19, s25
 80137de:	f43f ae24 	beq.w	801342a <kalman_3gyro.constprop.0+0x2f4e>
 80137e2:	eeb5 da40 	vcmp.f32	s26, #0.0
 80137e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ea:	eef0 ca67 	vmov.f32	s25, s15
 80137ee:	ee69 7a8c 	vmul.f32	s15, s19, s24
 80137f2:	d0b0      	beq.n	8013756 <kalman_3gyro.constprop.0+0x327a>
 80137f4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 80137f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137fc:	eeb0 ca47 	vmov.f32	s24, s14
 8013800:	ee29 7a8d 	vmul.f32	s14, s19, s26
 8013804:	f43f ae2b 	beq.w	801345e <kalman_3gyro.constprop.0+0x2f82>
 8013808:	eeb5 ba40 	vcmp.f32	s22, #0.0
 801380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013810:	eeb0 da67 	vmov.f32	s26, s15
 8013814:	ee69 7a8a 	vmul.f32	s15, s19, s20
 8013818:	d0b6      	beq.n	8013788 <kalman_3gyro.constprop.0+0x32ac>
 801381a:	eeb0 aa47 	vmov.f32	s20, s14
 801381e:	e630      	b.n	8013482 <kalman_3gyro.constprop.0+0x2fa6>
 8013820:	eef0 7a6d 	vmov.f32	s15, s27
 8013824:	f7ff bade 	b.w	8012de4 <kalman_3gyro.constprop.0+0x2908>
 8013828:	eef0 8a48 	vmov.f32	s17, s16
 801382c:	eef5 aa40 	vcmp.f32	s21, #0.0
 8013830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013834:	ee29 9a29 	vmul.f32	s18, s18, s19
 8013838:	f47f add5 	bne.w	80133e6 <kalman_3gyro.constprop.0+0x2f0a>
 801383c:	eef0 aa49 	vmov.f32	s21, s18
 8013840:	e75f      	b.n	8013702 <kalman_3gyro.constprop.0+0x3226>
 8013842:	eef0 9a48 	vmov.f32	s19, s16
 8013846:	eeb0 aa48 	vmov.f32	s20, s16
 801384a:	eeb0 da48 	vmov.f32	s26, s16
 801384e:	ed9f ba27 	vldr	s22, [pc, #156]	; 80138ec <kalman_3gyro.constprop.0+0x3410>
 8013852:	e61a      	b.n	801348a <kalman_3gyro.constprop.0+0x2fae>
 8013854:	eef0 8a6a 	vmov.f32	s17, s21
 8013858:	e753      	b.n	8013702 <kalman_3gyro.constprop.0+0x3226>
 801385a:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 801385e:	2a31      	cmp	r2, #49	; 0x31
 8013860:	f63f a88e 	bhi.w	8012980 <kalman_3gyro.constprop.0+0x24a4>
 8013864:	2100      	movs	r1, #0
 8013866:	3201      	adds	r2, #1
 8013868:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 801386c:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
 8013870:	f88d 10a8 	strb.w	r1, [sp, #168]	; 0xa8
 8013874:	f7ff b884 	b.w	8012980 <kalman_3gyro.constprop.0+0x24a4>
 8013878:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 801387c:	2b00      	cmp	r3, #0
 801387e:	f340 8445 	ble.w	801410c <kalman_3gyro.constprop.0+0x3c30>
 8013882:	2200      	movs	r2, #0
 8013884:	3b01      	subs	r3, #1
 8013886:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 801388a:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
 801388e:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
 8013892:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 8013896:	f88d 20ab 	strb.w	r2, [sp, #171]	; 0xab
 801389a:	f7fe bd9f 	b.w	80123dc <kalman_3gyro.constprop.0+0x1f00>
 801389e:	f89b 200d 	ldrb.w	r2, [fp, #13]
 80138a2:	f89b 100e 	ldrb.w	r1, [fp, #14]
 80138a6:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
 80138aa:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
 80138ae:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
 80138b2:	f88d 10a3 	strb.w	r1, [sp, #163]	; 0xa3
 80138b6:	f88d 10a4 	strb.w	r1, [sp, #164]	; 0xa4
 80138ba:	f88d 10a5 	strb.w	r1, [sp, #165]	; 0xa5
 80138be:	f7fe bd0d 	b.w	80122dc <kalman_3gyro.constprop.0+0x1e00>
 80138c2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80138c6:	eef0 4a46 	vmov.f32	s9, s12
 80138ca:	eeb1 5ae5 	vsqrt.f32	s10, s11
 80138ce:	eef0 7a47 	vmov.f32	s15, s14
 80138d2:	eef0 5a66 	vmov.f32	s11, s13
 80138d6:	e634      	b.n	8013542 <kalman_3gyro.constprop.0+0x3066>
 80138d8:	eeb1 7a47 	vneg.f32	s14, s14
 80138dc:	f7fd bd38 	b.w	8011350 <kalman_3gyro.constprop.0+0xe74>
 80138e0:	eef0 ca69 	vmov.f32	s25, s19
 80138e4:	e6e0      	b.n	80136a8 <kalman_3gyro.constprop.0+0x31cc>
 80138e6:	eeb0 ba69 	vmov.f32	s22, s19
 80138ea:	e5ce      	b.n	801348a <kalman_3gyro.constprop.0+0x2fae>
 80138ec:	00000000 	.word	0x00000000
 80138f0:	2000      	movs	r0, #0
 80138f2:	49de      	ldr	r1, [pc, #888]	; (8013c6c <kalman_3gyro.constprop.0+0x3790>)
 80138f4:	4bde      	ldr	r3, [pc, #888]	; (8013c70 <kalman_3gyro.constprop.0+0x3794>)
 80138f6:	f20b 44b4 	addw	r4, fp, #1204	; 0x4b4
 80138fa:	4ade      	ldr	r2, [pc, #888]	; (8013c74 <kalman_3gyro.constprop.0+0x3798>)
 80138fc:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 8013900:	6021      	str	r1, [r4, #0]
 8013902:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 8013906:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 801390a:	6002      	str	r2, [r0, #0]
 801390c:	600b      	str	r3, [r1, #0]
 801390e:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 8013912:	9413      	str	r4, [sp, #76]	; 0x4c
 8013914:	9003      	str	r0, [sp, #12]
 8013916:	9110      	str	r1, [sp, #64]	; 0x40
 8013918:	2b00      	cmp	r3, #0
 801391a:	f001 8393 	beq.w	8015044 <kalman_3gyro.constprop.0+0x4b68>
 801391e:	240c      	movs	r4, #12
 8013920:	f50b 6a97 	add.w	sl, fp, #1208	; 0x4b8
 8013924:	eddf bad4 	vldr	s23, [pc, #848]	; 8013c78 <kalman_3gyro.constprop.0+0x379c>
 8013928:	ed9f bad4 	vldr	s22, [pc, #848]	; 8013c7c <kalman_3gyro.constprop.0+0x37a0>
 801392c:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 8013c80 <kalman_3gyro.constprop.0+0x37a4>
 8013930:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8013934:	eddf 9ad3 	vldr	s19, [pc, #844]	; 8013c84 <kalman_3gyro.constprop.0+0x37a8>
 8013938:	eddf aad3 	vldr	s21, [pc, #844]	; 8013c88 <kalman_3gyro.constprop.0+0x37ac>
 801393c:	4655      	mov	r5, sl
 801393e:	fb14 a403 	smlabb	r4, r4, r3, sl
 8013942:	9e08      	ldr	r6, [sp, #32]
 8013944:	e06b      	b.n	8013a1e <kalman_3gyro.constprop.0+0x3542>
 8013946:	eeb4 7ae9 	vcmpe.f32	s14, s19
 801394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801394e:	f300 815b 	bgt.w	8013c08 <kalman_3gyro.constprop.0+0x372c>
 8013952:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013956:	ee17 0a90 	vmov	r0, s15
 801395a:	f7ec fdf9 	bl	8000550 <__aeabi_f2d>
 801395e:	ec41 0b10 	vmov	d0, r0, r1
 8013962:	f005 fad5 	bl	8018f10 <ceil>
 8013966:	ec51 0b10 	vmov	r0, r1, d0
 801396a:	f7ed f8f9 	bl	8000b60 <__aeabi_d2f>
 801396e:	ee07 0a90 	vmov	s15, r0
 8013972:	edc5 7a00 	vstr	s15, [r5]
 8013976:	ed96 7a01 	vldr	s14, [r6, #4]
 801397a:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801397e:	eef0 6ae7 	vabs.f32	s13, s15
 8013982:	eef4 6acb 	vcmpe.f32	s13, s22
 8013986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801398a:	d51b      	bpl.n	80139c4 <kalman_3gyro.constprop.0+0x34e8>
 801398c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013994:	f280 8121 	bge.w	8013bda <kalman_3gyro.constprop.0+0x36fe>
 8013998:	eeb4 7ae9 	vcmpe.f32	s14, s19
 801399c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a0:	f300 812f 	bgt.w	8013c02 <kalman_3gyro.constprop.0+0x3726>
 80139a4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80139a8:	ee17 0a90 	vmov	r0, s15
 80139ac:	f7ec fdd0 	bl	8000550 <__aeabi_f2d>
 80139b0:	ec41 0b10 	vmov	d0, r0, r1
 80139b4:	f005 faac 	bl	8018f10 <ceil>
 80139b8:	ec51 0b10 	vmov	r0, r1, d0
 80139bc:	f7ed f8d0 	bl	8000b60 <__aeabi_d2f>
 80139c0:	ee07 0a90 	vmov	s15, r0
 80139c4:	edc5 7a01 	vstr	s15, [r5, #4]
 80139c8:	ed96 7a02 	vldr	s14, [r6, #8]
 80139cc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80139d0:	eef0 6ae7 	vabs.f32	s13, s15
 80139d4:	eef4 6acb 	vcmpe.f32	s13, s22
 80139d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139dc:	d51a      	bpl.n	8013a14 <kalman_3gyro.constprop.0+0x3538>
 80139de:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80139e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139e6:	da3b      	bge.n	8013a60 <kalman_3gyro.constprop.0+0x3584>
 80139e8:	eeb4 7ae9 	vcmpe.f32	s14, s19
 80139ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f0:	f300 8104 	bgt.w	8013bfc <kalman_3gyro.constprop.0+0x3720>
 80139f4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80139f8:	ee17 0a90 	vmov	r0, s15
 80139fc:	f7ec fda8 	bl	8000550 <__aeabi_f2d>
 8013a00:	ec41 0b10 	vmov	d0, r0, r1
 8013a04:	f005 fa84 	bl	8018f10 <ceil>
 8013a08:	ec51 0b10 	vmov	r0, r1, d0
 8013a0c:	f7ed f8a8 	bl	8000b60 <__aeabi_d2f>
 8013a10:	ee07 0a90 	vmov	s15, r0
 8013a14:	edc5 7a02 	vstr	s15, [r5, #8]
 8013a18:	350c      	adds	r5, #12
 8013a1a:	42ac      	cmp	r4, r5
 8013a1c:	d035      	beq.n	8013a8a <kalman_3gyro.constprop.0+0x35ae>
 8013a1e:	ed96 7a00 	vldr	s14, [r6]
 8013a22:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013a26:	eef0 6ae7 	vabs.f32	s13, s15
 8013a2a:	eef4 6acb 	vcmpe.f32	s13, s22
 8013a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a32:	d59e      	bpl.n	8013972 <kalman_3gyro.constprop.0+0x3496>
 8013a34:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3c:	db83      	blt.n	8013946 <kalman_3gyro.constprop.0+0x346a>
 8013a3e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013a42:	ee17 0a90 	vmov	r0, s15
 8013a46:	f7ec fd83 	bl	8000550 <__aeabi_f2d>
 8013a4a:	ec41 0b10 	vmov	d0, r0, r1
 8013a4e:	f005 fae3 	bl	8019018 <floor>
 8013a52:	ec51 0b10 	vmov	r0, r1, d0
 8013a56:	f7ed f883 	bl	8000b60 <__aeabi_d2f>
 8013a5a:	ee07 0a90 	vmov	s15, r0
 8013a5e:	e788      	b.n	8013972 <kalman_3gyro.constprop.0+0x3496>
 8013a60:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013a64:	ee17 0a90 	vmov	r0, s15
 8013a68:	f7ec fd72 	bl	8000550 <__aeabi_f2d>
 8013a6c:	ec41 0b10 	vmov	d0, r0, r1
 8013a70:	f005 fad2 	bl	8019018 <floor>
 8013a74:	ec51 0b10 	vmov	r0, r1, d0
 8013a78:	f7ed f872 	bl	8000b60 <__aeabi_d2f>
 8013a7c:	ee07 0a90 	vmov	s15, r0
 8013a80:	350c      	adds	r5, #12
 8013a82:	ed45 7a01 	vstr	s15, [r5, #-4]
 8013a86:	42ac      	cmp	r4, r5
 8013a88:	d1c9      	bne.n	8013a1e <kalman_3gyro.constprop.0+0x3542>
 8013a8a:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 8013a8e:	f50b 66c5 	add.w	r6, fp, #1576	; 0x628
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	f000 80d0 	beq.w	8013c38 <kalman_3gyro.constprop.0+0x375c>
 8013a98:	240c      	movs	r4, #12
 8013a9a:	f50b 66c5 	add.w	r6, fp, #1576	; 0x628
 8013a9e:	eddf ba7b 	vldr	s23, [pc, #492]	; 8013c8c <kalman_3gyro.constprop.0+0x37b0>
 8013aa2:	ed9f ba76 	vldr	s22, [pc, #472]	; 8013c7c <kalman_3gyro.constprop.0+0x37a0>
 8013aa6:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8013c90 <kalman_3gyro.constprop.0+0x37b4>
 8013aaa:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8013aae:	eddf 9a79 	vldr	s19, [pc, #484]	; 8013c94 <kalman_3gyro.constprop.0+0x37b8>
 8013ab2:	eddf aa75 	vldr	s21, [pc, #468]	; 8013c88 <kalman_3gyro.constprop.0+0x37ac>
 8013ab6:	4635      	mov	r5, r6
 8013ab8:	fb14 6403 	smlabb	r4, r4, r3, r6
 8013abc:	9f08      	ldr	r7, [sp, #32]
 8013abe:	e06b      	b.n	8013b98 <kalman_3gyro.constprop.0+0x36bc>
 8013ac0:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ac8:	f300 81b6 	bgt.w	8013e38 <kalman_3gyro.constprop.0+0x395c>
 8013acc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013ad0:	ee17 0a90 	vmov	r0, s15
 8013ad4:	f7ec fd3c 	bl	8000550 <__aeabi_f2d>
 8013ad8:	ec41 0b10 	vmov	d0, r0, r1
 8013adc:	f005 fa18 	bl	8018f10 <ceil>
 8013ae0:	ec51 0b10 	vmov	r0, r1, d0
 8013ae4:	f7ed f83c 	bl	8000b60 <__aeabi_d2f>
 8013ae8:	ee07 0a90 	vmov	s15, r0
 8013aec:	edc5 7a00 	vstr	s15, [r5]
 8013af0:	ed97 7a04 	vldr	s14, [r7, #16]
 8013af4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013af8:	eef0 6ae7 	vabs.f32	s13, s15
 8013afc:	eef4 6acb 	vcmpe.f32	s13, s22
 8013b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b04:	d51b      	bpl.n	8013b3e <kalman_3gyro.constprop.0+0x3662>
 8013b06:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b0e:	f280 817c 	bge.w	8013e0a <kalman_3gyro.constprop.0+0x392e>
 8013b12:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b1a:	f300 818a 	bgt.w	8013e32 <kalman_3gyro.constprop.0+0x3956>
 8013b1e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013b22:	ee17 0a90 	vmov	r0, s15
 8013b26:	f7ec fd13 	bl	8000550 <__aeabi_f2d>
 8013b2a:	ec41 0b10 	vmov	d0, r0, r1
 8013b2e:	f005 f9ef 	bl	8018f10 <ceil>
 8013b32:	ec51 0b10 	vmov	r0, r1, d0
 8013b36:	f7ed f813 	bl	8000b60 <__aeabi_d2f>
 8013b3a:	ee07 0a90 	vmov	s15, r0
 8013b3e:	edc5 7a01 	vstr	s15, [r5, #4]
 8013b42:	ed97 7a05 	vldr	s14, [r7, #20]
 8013b46:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013b4a:	eef0 6ae7 	vabs.f32	s13, s15
 8013b4e:	eef4 6acb 	vcmpe.f32	s13, s22
 8013b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b56:	d51a      	bpl.n	8013b8e <kalman_3gyro.constprop.0+0x36b2>
 8013b58:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b60:	da55      	bge.n	8013c0e <kalman_3gyro.constprop.0+0x3732>
 8013b62:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b6a:	f300 815f 	bgt.w	8013e2c <kalman_3gyro.constprop.0+0x3950>
 8013b6e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013b72:	ee17 0a90 	vmov	r0, s15
 8013b76:	f7ec fceb 	bl	8000550 <__aeabi_f2d>
 8013b7a:	ec41 0b10 	vmov	d0, r0, r1
 8013b7e:	f005 f9c7 	bl	8018f10 <ceil>
 8013b82:	ec51 0b10 	vmov	r0, r1, d0
 8013b86:	f7ec ffeb 	bl	8000b60 <__aeabi_d2f>
 8013b8a:	ee07 0a90 	vmov	s15, r0
 8013b8e:	edc5 7a02 	vstr	s15, [r5, #8]
 8013b92:	350c      	adds	r5, #12
 8013b94:	42ac      	cmp	r4, r5
 8013b96:	d04f      	beq.n	8013c38 <kalman_3gyro.constprop.0+0x375c>
 8013b98:	ed97 7a03 	vldr	s14, [r7, #12]
 8013b9c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013ba0:	eef0 6ae7 	vabs.f32	s13, s15
 8013ba4:	eef4 6acb 	vcmpe.f32	s13, s22
 8013ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bac:	d59e      	bpl.n	8013aec <kalman_3gyro.constprop.0+0x3610>
 8013bae:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bb6:	db83      	blt.n	8013ac0 <kalman_3gyro.constprop.0+0x35e4>
 8013bb8:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013bbc:	ee17 0a90 	vmov	r0, s15
 8013bc0:	f7ec fcc6 	bl	8000550 <__aeabi_f2d>
 8013bc4:	ec41 0b10 	vmov	d0, r0, r1
 8013bc8:	f005 fa26 	bl	8019018 <floor>
 8013bcc:	ec51 0b10 	vmov	r0, r1, d0
 8013bd0:	f7ec ffc6 	bl	8000b60 <__aeabi_d2f>
 8013bd4:	ee07 0a90 	vmov	s15, r0
 8013bd8:	e788      	b.n	8013aec <kalman_3gyro.constprop.0+0x3610>
 8013bda:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013bde:	ee17 0a90 	vmov	r0, s15
 8013be2:	f7ec fcb5 	bl	8000550 <__aeabi_f2d>
 8013be6:	ec41 0b10 	vmov	d0, r0, r1
 8013bea:	f005 fa15 	bl	8019018 <floor>
 8013bee:	ec51 0b10 	vmov	r0, r1, d0
 8013bf2:	f7ec ffb5 	bl	8000b60 <__aeabi_d2f>
 8013bf6:	ee07 0a90 	vmov	s15, r0
 8013bfa:	e6e3      	b.n	80139c4 <kalman_3gyro.constprop.0+0x34e8>
 8013bfc:	eef0 7a6a 	vmov.f32	s15, s21
 8013c00:	e708      	b.n	8013a14 <kalman_3gyro.constprop.0+0x3538>
 8013c02:	eef0 7a6a 	vmov.f32	s15, s21
 8013c06:	e6dd      	b.n	80139c4 <kalman_3gyro.constprop.0+0x34e8>
 8013c08:	eef0 7a6a 	vmov.f32	s15, s21
 8013c0c:	e6b1      	b.n	8013972 <kalman_3gyro.constprop.0+0x3496>
 8013c0e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013c12:	ee17 0a90 	vmov	r0, s15
 8013c16:	f7ec fc9b 	bl	8000550 <__aeabi_f2d>
 8013c1a:	ec41 0b10 	vmov	d0, r0, r1
 8013c1e:	f005 f9fb 	bl	8019018 <floor>
 8013c22:	ec51 0b10 	vmov	r0, r1, d0
 8013c26:	f7ec ff9b 	bl	8000b60 <__aeabi_d2f>
 8013c2a:	ee07 0a90 	vmov	s15, r0
 8013c2e:	350c      	adds	r5, #12
 8013c30:	ed45 7a01 	vstr	s15, [r5, #-4]
 8013c34:	42ac      	cmp	r4, r5
 8013c36:	d1af      	bne.n	8013b98 <kalman_3gyro.constprop.0+0x36bc>
 8013c38:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	f43c ad69 	beq.w	8010714 <kalman_3gyro.constprop.0+0x238>
 8013c42:	240c      	movs	r4, #12
 8013c44:	f50b 62f3 	add.w	r2, fp, #1944	; 0x798
 8013c48:	eddf ba13 	vldr	s23, [pc, #76]	; 8013c98 <kalman_3gyro.constprop.0+0x37bc>
 8013c4c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 8013c7c <kalman_3gyro.constprop.0+0x37a0>
 8013c50:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8013c9c <kalman_3gyro.constprop.0+0x37c0>
 8013c54:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8013c58:	eddf 9a11 	vldr	s19, [pc, #68]	; 8013ca0 <kalman_3gyro.constprop.0+0x37c4>
 8013c5c:	eddf aa0a 	vldr	s21, [pc, #40]	; 8013c88 <kalman_3gyro.constprop.0+0x37ac>
 8013c60:	4615      	mov	r5, r2
 8013c62:	fb14 2403 	smlabb	r4, r4, r3, r2
 8013c66:	9f08      	ldr	r7, [sp, #32]
 8013c68:	920f      	str	r2, [sp, #60]	; 0x3c
 8013c6a:	e0ad      	b.n	8013dc8 <kalman_3gyro.constprop.0+0x38ec>
 8013c6c:	3a7001e0 	.word	0x3a7001e0
 8013c70:	3a8c0118 	.word	0x3a8c0118
 8013c74:	3a000100 	.word	0x3a000100
 8013c78:	44888777 	.word	0x44888777
 8013c7c:	4b000000 	.word	0x4b000000
 8013c80:	39f001e1 	.word	0x39f001e1
 8013c84:	b9f001e1 	.word	0xb9f001e1
 8013c88:	80000000 	.word	0x80000000
 8013c8c:	44fffe00 	.word	0x44fffe00
 8013c90:	39800100 	.word	0x39800100
 8013c94:	b9800100 	.word	0xb9800100
 8013c98:	446a0ccd 	.word	0x446a0ccd
 8013c9c:	3a0c0118 	.word	0x3a0c0118
 8013ca0:	ba0c0118 	.word	0xba0c0118
 8013ca4:	bf666666 	.word	0xbf666666
 8013ca8:	3ecccccd 	.word	0x3ecccccd
 8013cac:	3f4ccccd 	.word	0x3f4ccccd
 8013cb0:	3ca3d70a 	.word	0x3ca3d70a
 8013cb4:	3d072b02 	.word	0x3d072b02
 8013cb8:	3cb43958 	.word	0x3cb43958
 8013cbc:	3d4ccccd 	.word	0x3d4ccccd
 8013cc0:	3cf5c28f 	.word	0x3cf5c28f
 8013cc4:	3d75c28f 	.word	0x3d75c28f
 8013cc8:	3d23d70a 	.word	0x3d23d70a
 8013ccc:	3d8f5c29 	.word	0x3d8f5c29
 8013cd0:	3dcccccd 	.word	0x3dcccccd
 8013cd4:	3e4ccccd 	.word	0x3e4ccccd
 8013cd8:	3e99999a 	.word	0x3e99999a
 8013cdc:	3f666666 	.word	0x3f666666
 8013ce0:	3ee66666 	.word	0x3ee66666
 8013ce4:	3fcccccd 	.word	0x3fcccccd
 8013ce8:	3fe66666 	.word	0x3fe66666
 8013cec:	3f333333 	.word	0x3f333333
 8013cf0:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf8:	f300 80c6 	bgt.w	8013e88 <kalman_3gyro.constprop.0+0x39ac>
 8013cfc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013d00:	ee17 0a90 	vmov	r0, s15
 8013d04:	f7ec fc24 	bl	8000550 <__aeabi_f2d>
 8013d08:	ec41 0b10 	vmov	d0, r0, r1
 8013d0c:	f005 f900 	bl	8018f10 <ceil>
 8013d10:	ec51 0b10 	vmov	r0, r1, d0
 8013d14:	f7ec ff24 	bl	8000b60 <__aeabi_d2f>
 8013d18:	ee07 0a90 	vmov	s15, r0
 8013d1c:	edc5 7a00 	vstr	s15, [r5]
 8013d20:	ed97 7a07 	vldr	s14, [r7, #28]
 8013d24:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013d28:	eef0 6ae7 	vabs.f32	s13, s15
 8013d2c:	eef4 6acb 	vcmpe.f32	s13, s22
 8013d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d34:	d51b      	bpl.n	8013d6e <kalman_3gyro.constprop.0+0x3892>
 8013d36:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d3e:	f280 808f 	bge.w	8013e60 <kalman_3gyro.constprop.0+0x3984>
 8013d42:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d4a:	f300 809a 	bgt.w	8013e82 <kalman_3gyro.constprop.0+0x39a6>
 8013d4e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013d52:	ee17 0a90 	vmov	r0, s15
 8013d56:	f7ec fbfb 	bl	8000550 <__aeabi_f2d>
 8013d5a:	ec41 0b10 	vmov	d0, r0, r1
 8013d5e:	f005 f8d7 	bl	8018f10 <ceil>
 8013d62:	ec51 0b10 	vmov	r0, r1, d0
 8013d66:	f7ec fefb 	bl	8000b60 <__aeabi_d2f>
 8013d6a:	ee07 0a90 	vmov	s15, r0
 8013d6e:	edc5 7a01 	vstr	s15, [r5, #4]
 8013d72:	ed97 7a08 	vldr	s14, [r7, #32]
 8013d76:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013d7a:	eef0 6ae7 	vabs.f32	s13, s15
 8013d7e:	eef4 6acb 	vcmpe.f32	s13, s22
 8013d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d86:	d519      	bpl.n	8013dbc <kalman_3gyro.constprop.0+0x38e0>
 8013d88:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d90:	da55      	bge.n	8013e3e <kalman_3gyro.constprop.0+0x3962>
 8013d92:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8013d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d9a:	dc78      	bgt.n	8013e8e <kalman_3gyro.constprop.0+0x39b2>
 8013d9c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8013da0:	ee17 0a90 	vmov	r0, s15
 8013da4:	f7ec fbd4 	bl	8000550 <__aeabi_f2d>
 8013da8:	ec41 0b10 	vmov	d0, r0, r1
 8013dac:	f005 f8b0 	bl	8018f10 <ceil>
 8013db0:	ec51 0b10 	vmov	r0, r1, d0
 8013db4:	f7ec fed4 	bl	8000b60 <__aeabi_d2f>
 8013db8:	ee07 0a90 	vmov	s15, r0
 8013dbc:	edc5 7a02 	vstr	s15, [r5, #8]
 8013dc0:	350c      	adds	r5, #12
 8013dc2:	42ac      	cmp	r4, r5
 8013dc4:	f43c aca9 	beq.w	801071a <kalman_3gyro.constprop.0+0x23e>
 8013dc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8013dcc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8013dd0:	eef0 6ae7 	vabs.f32	s13, s15
 8013dd4:	eef4 6acb 	vcmpe.f32	s13, s22
 8013dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ddc:	d59e      	bpl.n	8013d1c <kalman_3gyro.constprop.0+0x3840>
 8013dde:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8013de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013de6:	db83      	blt.n	8013cf0 <kalman_3gyro.constprop.0+0x3814>
 8013de8:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013dec:	ee17 0a90 	vmov	r0, s15
 8013df0:	f7ec fbae 	bl	8000550 <__aeabi_f2d>
 8013df4:	ec41 0b10 	vmov	d0, r0, r1
 8013df8:	f005 f90e 	bl	8019018 <floor>
 8013dfc:	ec51 0b10 	vmov	r0, r1, d0
 8013e00:	f7ec feae 	bl	8000b60 <__aeabi_d2f>
 8013e04:	ee07 0a90 	vmov	s15, r0
 8013e08:	e788      	b.n	8013d1c <kalman_3gyro.constprop.0+0x3840>
 8013e0a:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013e0e:	ee17 0a90 	vmov	r0, s15
 8013e12:	f7ec fb9d 	bl	8000550 <__aeabi_f2d>
 8013e16:	ec41 0b10 	vmov	d0, r0, r1
 8013e1a:	f005 f8fd 	bl	8019018 <floor>
 8013e1e:	ec51 0b10 	vmov	r0, r1, d0
 8013e22:	f7ec fe9d 	bl	8000b60 <__aeabi_d2f>
 8013e26:	ee07 0a90 	vmov	s15, r0
 8013e2a:	e688      	b.n	8013b3e <kalman_3gyro.constprop.0+0x3662>
 8013e2c:	eef0 7a6a 	vmov.f32	s15, s21
 8013e30:	e6ad      	b.n	8013b8e <kalman_3gyro.constprop.0+0x36b2>
 8013e32:	eef0 7a6a 	vmov.f32	s15, s21
 8013e36:	e682      	b.n	8013b3e <kalman_3gyro.constprop.0+0x3662>
 8013e38:	eef0 7a6a 	vmov.f32	s15, s21
 8013e3c:	e656      	b.n	8013aec <kalman_3gyro.constprop.0+0x3610>
 8013e3e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013e42:	ee17 0a90 	vmov	r0, s15
 8013e46:	f7ec fb83 	bl	8000550 <__aeabi_f2d>
 8013e4a:	ec41 0b10 	vmov	d0, r0, r1
 8013e4e:	f005 f8e3 	bl	8019018 <floor>
 8013e52:	ec51 0b10 	vmov	r0, r1, d0
 8013e56:	f7ec fe83 	bl	8000b60 <__aeabi_d2f>
 8013e5a:	ee07 0a90 	vmov	s15, r0
 8013e5e:	e7ad      	b.n	8013dbc <kalman_3gyro.constprop.0+0x38e0>
 8013e60:	ee77 7a89 	vadd.f32	s15, s15, s18
 8013e64:	ee17 0a90 	vmov	r0, s15
 8013e68:	f7ec fb72 	bl	8000550 <__aeabi_f2d>
 8013e6c:	ec41 0b10 	vmov	d0, r0, r1
 8013e70:	f005 f8d2 	bl	8019018 <floor>
 8013e74:	ec51 0b10 	vmov	r0, r1, d0
 8013e78:	f7ec fe72 	bl	8000b60 <__aeabi_d2f>
 8013e7c:	ee07 0a90 	vmov	s15, r0
 8013e80:	e775      	b.n	8013d6e <kalman_3gyro.constprop.0+0x3892>
 8013e82:	eef0 7a6a 	vmov.f32	s15, s21
 8013e86:	e772      	b.n	8013d6e <kalman_3gyro.constprop.0+0x3892>
 8013e88:	eef0 7a6a 	vmov.f32	s15, s21
 8013e8c:	e746      	b.n	8013d1c <kalman_3gyro.constprop.0+0x3840>
 8013e8e:	eef0 7a6a 	vmov.f32	s15, s21
 8013e92:	e793      	b.n	8013dbc <kalman_3gyro.constprop.0+0x38e0>
 8013e94:	2200      	movs	r2, #0
 8013e96:	9921      	ldr	r1, [sp, #132]	; 0x84
 8013e98:	780b      	ldrb	r3, [r1, #0]
 8013e9a:	ed91 7a03 	vldr	s14, [r1, #12]
 8013e9e:	edd1 6a01 	vldr	s13, [r1, #4]
 8013ea2:	edd1 7a02 	vldr	s15, [r1, #8]
 8013ea6:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	f040 8148 	bne.w	8014140 <kalman_3gyro.constprop.0+0x3c64>
 8013eb0:	ed5f 7a84 	vldr	s15, [pc, #-528]	; 8013ca4 <kalman_3gyro.constprop.0+0x37c8>
 8013eb4:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8013eb8:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 8013ebc:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 8013ec6:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 8013eca:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8013ece:	f006 fefc 	bl	801acca <memset>
 8013ed2:	ed1f 9a8b 	vldr	s18, [pc, #-556]	; 8013ca8 <kalman_3gyro.constprop.0+0x37cc>
 8013ed6:	eddb 7a02 	vldr	s15, [fp, #8]
 8013eda:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8013ede:	ed1f 1a8d 	vldr	s2, [pc, #-564]	; 8013cac <kalman_3gyro.constprop.0+0x37d0>
 8013ee2:	ed1f 7a8d 	vldr	s14, [pc, #-564]	; 8013cb0 <kalman_3gyro.constprop.0+0x37d4>
 8013ee6:	ed5f 1a8d 	vldr	s3, [pc, #-564]	; 8013cb4 <kalman_3gyro.constprop.0+0x37d8>
 8013eea:	ed1f 2a8d 	vldr	s4, [pc, #-564]	; 8013cb8 <kalman_3gyro.constprop.0+0x37dc>
 8013eee:	ed1f 5a8d 	vldr	s10, [pc, #-564]	; 8013cbc <kalman_3gyro.constprop.0+0x37e0>
 8013ef2:	ed5f 2a8d 	vldr	s5, [pc, #-564]	; 8013cc0 <kalman_3gyro.constprop.0+0x37e4>
 8013ef6:	ed1f 3a8d 	vldr	s6, [pc, #-564]	; 8013cc4 <kalman_3gyro.constprop.0+0x37e8>
 8013efa:	ed5f 3a8d 	vldr	s7, [pc, #-564]	; 8013cc8 <kalman_3gyro.constprop.0+0x37ec>
 8013efe:	ed1f 4a8d 	vldr	s8, [pc, #-564]	; 8013ccc <kalman_3gyro.constprop.0+0x37f0>
 8013f02:	ed5f 5a8d 	vldr	s11, [pc, #-564]	; 8013cd0 <kalman_3gyro.constprop.0+0x37f4>
 8013f06:	ed1f 6a8d 	vldr	s12, [pc, #-564]	; 8013cd4 <kalman_3gyro.constprop.0+0x37f8>
 8013f0a:	ed5f 6a8d 	vldr	s13, [pc, #-564]	; 8013cd8 <kalman_3gyro.constprop.0+0x37fc>
 8013f0e:	ed5f 4a8d 	vldr	s9, [pc, #-564]	; 8013cdc <kalman_3gyro.constprop.0+0x3800>
 8013f12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013f16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8013f1a:	ee27 5a85 	vmul.f32	s10, s15, s10
 8013f1e:	2500      	movs	r5, #0
 8013f20:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8013f24:	ee27 6a86 	vmul.f32	s12, s15, s12
 8013f28:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8013f2c:	ee27 8a89 	vmul.f32	s16, s15, s18
 8013f30:	ee67 0a80 	vmul.f32	s1, s15, s0
 8013f34:	ee67 1aa1 	vmul.f32	s3, s15, s3
 8013f38:	ee27 2a82 	vmul.f32	s4, s15, s4
 8013f3c:	ee67 2aa2 	vmul.f32	s5, s15, s5
 8013f40:	ee27 3a83 	vmul.f32	s6, s15, s6
 8013f44:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8013f48:	ee27 4a84 	vmul.f32	s8, s15, s8
 8013f4c:	ed1f ea9c 	vldr	s28, [pc, #-624]	; 8013ce0 <kalman_3gyro.constprop.0+0x3804>
 8013f50:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8013f54:	ee67 9a81 	vmul.f32	s19, s15, s2
 8013f58:	eef6 aa08 	vmov.f32	s21, #104	; 0x3f400000  0.750
 8013f5c:	ed1f ba9f 	vldr	s22, [pc, #-636]	; 8013ce4 <kalman_3gyro.constprop.0+0x3808>
 8013f60:	ed5f ba9f 	vldr	s23, [pc, #-636]	; 8013ce8 <kalman_3gyro.constprop.0+0x380c>
 8013f64:	eeb7 ca08 	vmov.f32	s24, #120	; 0x3fc00000  1.5
 8013f68:	eef0 ca04 	vmov.f32	s25, #4	; 0x40200000  2.5
 8013f6c:	eeb0 da08 	vmov.f32	s26, #8	; 0x40400000  3.0
 8013f70:	ed5f daa2 	vldr	s27, [pc, #-648]	; 8013cec <kalman_3gyro.constprop.0+0x3810>
 8013f74:	4bef      	ldr	r3, [pc, #956]	; (8014334 <kalman_3gyro.constprop.0+0x3e58>)
 8013f76:	48f0      	ldr	r0, [pc, #960]	; (8014338 <kalman_3gyro.constprop.0+0x3e5c>)
 8013f78:	49f0      	ldr	r1, [pc, #960]	; (801433c <kalman_3gyro.constprop.0+0x3e60>)
 8013f7a:	f8df a3f0 	ldr.w	sl, [pc, #1008]	; 801436c <kalman_3gyro.constprop.0+0x3e90>
 8013f7e:	f8df 93f0 	ldr.w	r9, [pc, #1008]	; 8014370 <kalman_3gyro.constprop.0+0x3e94>
 8013f82:	f8df 83f0 	ldr.w	r8, [pc, #1008]	; 8014374 <kalman_3gyro.constprop.0+0x3e98>
 8013f86:	f8df e3f0 	ldr.w	lr, [pc, #1008]	; 8014378 <kalman_3gyro.constprop.0+0x3e9c>
 8013f8a:	f8df c3f0 	ldr.w	ip, [pc, #1008]	; 801437c <kalman_3gyro.constprop.0+0x3ea0>
 8013f8e:	4fec      	ldr	r7, [pc, #944]	; (8014340 <kalman_3gyro.constprop.0+0x3e64>)
 8013f90:	4eec      	ldr	r6, [pc, #944]	; (8014344 <kalman_3gyro.constprop.0+0x3e68>)
 8013f92:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8013f96:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8013f9a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8013f9e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8013fa2:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8013fa6:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8013faa:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8013fae:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8013fb2:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8013fb6:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 8013fba:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 8013fbe:	edcb 1a34 	vstr	s3, [fp, #208]	; 0xd0
 8013fc2:	ed8b 2a4e 	vstr	s4, [fp, #312]	; 0x138
 8013fc6:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 8013fca:	edcb 2a50 	vstr	s5, [fp, #320]	; 0x140
 8013fce:	ed8b 3a38 	vstr	s6, [fp, #224]	; 0xe0
 8013fd2:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 8013fd6:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 8013fda:	ed8b ea35 	vstr	s28, [fp, #212]	; 0xd4
 8013fde:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 8013fe2:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 8013fe6:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 8013fea:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8013fee:	f8cb 50c0 	str.w	r5, [fp, #192]	; 0xc0
 8013ff2:	f8cb 5128 	str.w	r5, [fp, #296]	; 0x128
 8013ff6:	f8cb a13c 	str.w	sl, [fp, #316]	; 0x13c
 8013ffa:	f8cb 00dc 	str.w	r0, [fp, #220]	; 0xdc
 8013ffe:	f8cb 00e4 	str.w	r0, [fp, #228]	; 0xe4
 8014002:	f8cb 9144 	str.w	r9, [fp, #324]	; 0x144
 8014006:	f8cb 814c 	str.w	r8, [fp, #332]	; 0x14c
 801400a:	f8cb e0ec 	str.w	lr, [fp, #236]	; 0xec
 801400e:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 8014012:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 8014016:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 801401a:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 801401e:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 8014022:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 8014026:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 801402a:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 801402e:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 8014032:	ed8b 9a3d 	vstr	s18, [fp, #244]	; 0xf4
 8014036:	ed8b 8a42 	vstr	s16, [fp, #264]	; 0x108
 801403a:	ed8b 8a5c 	vstr	s16, [fp, #368]	; 0x170
 801403e:	ed8b 0a66 	vstr	s0, [fp, #408]	; 0x198
 8014042:	edcb 0a44 	vstr	s1, [fp, #272]	; 0x110
 8014046:	edcb 0a5e 	vstr	s1, [fp, #376]	; 0x178
 801404a:	ed8b 1a65 	vstr	s2, [fp, #404]	; 0x194
 801404e:	edcb 9a46 	vstr	s19, [fp, #280]	; 0x118
 8014052:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 8014056:	edcb aa41 	vstr	s21, [fp, #260]	; 0x104
 801405a:	ed8b ba5b 	vstr	s22, [fp, #364]	; 0x16c
 801405e:	edcb ba5d 	vstr	s23, [fp, #372]	; 0x174
 8014062:	ed8b ca45 	vstr	s24, [fp, #276]	; 0x114
 8014066:	edcb ca61 	vstr	s25, [fp, #388]	; 0x184
 801406a:	ed8b da63 	vstr	s26, [fp, #396]	; 0x18c
 801406e:	edcb da67 	vstr	s27, [fp, #412]	; 0x19c
 8014072:	f8cb 1154 	str.w	r1, [fp, #340]	; 0x154
 8014076:	f8cb 110c 	str.w	r1, [fp, #268]	; 0x10c
 801407a:	f8cb c15c 	str.w	ip, [fp, #348]	; 0x15c
 801407e:	f8cb 70fc 	str.w	r7, [fp, #252]	; 0xfc
 8014082:	f8cb 6164 	str.w	r6, [fp, #356]	; 0x164
 8014086:	f8cb 217c 	str.w	r2, [fp, #380]	; 0x17c
 801408a:	f8cb 211c 	str.w	r2, [fp, #284]	; 0x11c
 801408e:	f8cb 2124 	str.w	r2, [fp, #292]	; 0x124
 8014092:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8014096:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801409a:	b973      	cbnz	r3, 80140ba <kalman_3gyro.constprop.0+0x3bde>
 801409c:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 80140a0:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 80140a4:	6811      	ldr	r1, [r2, #0]
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 80140b2:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 80140b6:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 80140ba:	2300      	movs	r3, #0
 80140bc:	f88b 3001 	strb.w	r3, [fp, #1]
 80140c0:	f7fc bb16 	b.w	80106f0 <kalman_3gyro.constprop.0+0x214>
 80140c4:	ed9b ca4b 	vldr	s24, [fp, #300]	; 0x12c
 80140c8:	eddd 5a0d 	vldr	s11, [sp, #52]	; 0x34
 80140cc:	ed9d 5a01 	vldr	s10, [sp, #4]
 80140d0:	ee65 5a85 	vmul.f32	s11, s11, s10
 80140d4:	ee2a aa0c 	vmul.f32	s20, s20, s24
 80140d8:	edcd 5a0d 	vstr	s11, [sp, #52]	; 0x34
 80140dc:	f7fd be08 	b.w	8011cf0 <kalman_3gyro.constprop.0+0x1814>
 80140e0:	eddf 7a99 	vldr	s15, [pc, #612]	; 8014348 <kalman_3gyro.constprop.0+0x3e6c>
 80140e4:	f7fc bb68 	b.w	80107b8 <kalman_3gyro.constprop.0+0x2dc>
 80140e8:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 80140ec:	f7fd be28 	b.w	8011d40 <kalman_3gyro.constprop.0+0x1864>
 80140f0:	ed9f 6a96 	vldr	s12, [pc, #600]	; 801434c <kalman_3gyro.constprop.0+0x3e70>
 80140f4:	ed9f 5a96 	vldr	s10, [pc, #600]	; 8014350 <kalman_3gyro.constprop.0+0x3e74>
 80140f8:	eddf 5a96 	vldr	s11, [pc, #600]	; 8014354 <kalman_3gyro.constprop.0+0x3e78>
 80140fc:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8014358 <kalman_3gyro.constprop.0+0x3e7c>
 8014100:	ed9f 9a96 	vldr	s18, [pc, #600]	; 801435c <kalman_3gyro.constprop.0+0x3e80>
 8014104:	ee68 8a89 	vmul.f32	s17, s17, s18
 8014108:	f7fe b86e 	b.w	80121e8 <kalman_3gyro.constprop.0+0x1d0c>
 801410c:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8014110:	2a00      	cmp	r2, #0
 8014112:	f340 8159 	ble.w	80143c8 <kalman_3gyro.constprop.0+0x3eec>
 8014116:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 801411a:	ed9d 7a1d 	vldr	s14, [sp, #116]	; 0x74
 801411e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014126:	f340 814f 	ble.w	80143c8 <kalman_3gyro.constprop.0+0x3eec>
 801412a:	3a01      	subs	r2, #1
 801412c:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8014130:	f7fe b954 	b.w	80123dc <kalman_3gyro.constprop.0+0x1f00>
 8014134:	eeb0 aa69 	vmov.f32	s20, s19
 8014138:	eeb0 ba69 	vmov.f32	s22, s19
 801413c:	f7ff b9a5 	b.w	801348a <kalman_3gyro.constprop.0+0x2fae>
 8014140:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014144:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014148:	eee7 7a07 	vfma.f32	s15, s14, s14
 801414c:	eef1 6ae7 	vsqrt.f32	s13, s15
 8014150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014154:	e6ae      	b.n	8013eb4 <kalman_3gyro.constprop.0+0x39d8>
 8014156:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 801415a:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 801415e:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
 8014162:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 8014166:	f7fe b8d6 	b.w	8012316 <kalman_3gyro.constprop.0+0x1e3a>
 801416a:	eddb 5a49 	vldr	s11, [fp, #292]	; 0x124
 801416e:	edcd 5a01 	vstr	s11, [sp, #4]
 8014172:	f7fd bb9d 	b.w	80118b0 <kalman_3gyro.constprop.0+0x13d4>
 8014176:	ed9b ca63 	vldr	s24, [fp, #396]	; 0x18c
 801417a:	e7a5      	b.n	80140c8 <kalman_3gyro.constprop.0+0x3bec>
 801417c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014180:	ee17 0a90 	vmov	r0, s15
 8014184:	f7ec f9e4 	bl	8000550 <__aeabi_f2d>
 8014188:	ec41 0b10 	vmov	d0, r0, r1
 801418c:	f004 fec0 	bl	8018f10 <ceil>
 8014190:	ec51 0b10 	vmov	r0, r1, d0
 8014194:	f7ec fce4 	bl	8000b60 <__aeabi_d2f>
 8014198:	ee08 0a10 	vmov	s16, r0
 801419c:	f7fc bd47 	b.w	8010c2e <kalman_3gyro.constprop.0+0x752>
 80141a0:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80141a4:	ee17 0a90 	vmov	r0, s15
 80141a8:	f7ec f9d2 	bl	8000550 <__aeabi_f2d>
 80141ac:	ec41 0b10 	vmov	d0, r0, r1
 80141b0:	f004 feae 	bl	8018f10 <ceil>
 80141b4:	ec51 0b10 	vmov	r0, r1, d0
 80141b8:	f7ec fcd2 	bl	8000b60 <__aeabi_d2f>
 80141bc:	ee0d 0a90 	vmov	s27, r0
 80141c0:	f7fc bd58 	b.w	8010c74 <kalman_3gyro.constprop.0+0x798>
 80141c4:	ee7c 7a67 	vsub.f32	s15, s24, s15
 80141c8:	ee17 0a90 	vmov	r0, s15
 80141cc:	f7ec f9c0 	bl	8000550 <__aeabi_f2d>
 80141d0:	ec41 0b10 	vmov	d0, r0, r1
 80141d4:	f004 fe9c 	bl	8018f10 <ceil>
 80141d8:	ec51 0b10 	vmov	r0, r1, d0
 80141dc:	f7ec fcc0 	bl	8000b60 <__aeabi_d2f>
 80141e0:	ee0c 0a10 	vmov	s24, r0
 80141e4:	f7fc bdac 	b.w	8010d40 <kalman_3gyro.constprop.0+0x864>
 80141e8:	ee7b 7ae7 	vsub.f32	s15, s23, s15
 80141ec:	ee17 0a90 	vmov	r0, s15
 80141f0:	f7ec f9ae 	bl	8000550 <__aeabi_f2d>
 80141f4:	ec41 0b10 	vmov	d0, r0, r1
 80141f8:	f004 fe8a 	bl	8018f10 <ceil>
 80141fc:	ec51 0b10 	vmov	r0, r1, d0
 8014200:	f7ec fcae 	bl	8000b60 <__aeabi_d2f>
 8014204:	ee0b 0a90 	vmov	s23, r0
 8014208:	f7fc bdbd 	b.w	8010d86 <kalman_3gyro.constprop.0+0x8aa>
 801420c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014210:	f6fd aeb2 	blt.w	8011f78 <kalman_3gyro.constprop.0+0x1a9c>
 8014214:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8014354 <kalman_3gyro.constprop.0+0x3e78>
 8014218:	eef4 7ac7 	vcmpe.f32	s15, s14
 801421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014220:	f140 81fc 	bpl.w	801461c <kalman_3gyro.constprop.0+0x4140>
 8014224:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8014360 <kalman_3gyro.constprop.0+0x3e84>
 8014228:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8014364 <kalman_3gyro.constprop.0+0x3e88>
 801422c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014230:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 8014368 <kalman_3gyro.constprop.0+0x3e8c>
 8014234:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801423c:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014240:	f7fd bea4 	b.w	8011f8c <kalman_3gyro.constprop.0+0x1ab0>
 8014244:	ee7c 7a67 	vsub.f32	s15, s24, s15
 8014248:	ee17 0a90 	vmov	r0, s15
 801424c:	f7ec f980 	bl	8000550 <__aeabi_f2d>
 8014250:	ec41 0b10 	vmov	d0, r0, r1
 8014254:	f004 fe5c 	bl	8018f10 <ceil>
 8014258:	ec51 0b10 	vmov	r0, r1, d0
 801425c:	f7ec fc80 	bl	8000b60 <__aeabi_d2f>
 8014260:	ee0c 0a10 	vmov	s24, r0
 8014264:	f7fc bcc0 	b.w	8010be8 <kalman_3gyro.constprop.0+0x70c>
 8014268:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801426c:	ee7e 7a46 	vsub.f32	s15, s28, s12
 8014270:	eeb0 7ae7 	vabs.f32	s14, s15
 8014274:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014278:	eef4 7ac6 	vcmpe.f32	s15, s12
 801427c:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 8014280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014284:	edcd 6a77 	vstr	s13, [sp, #476]	; 0x1dc
 8014288:	f77e a879 	ble.w	801237e <kalman_3gyro.constprop.0+0x1ea2>
 801428c:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8014290:	ee67 6a07 	vmul.f32	s13, s14, s14
 8014294:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801429c:	f77e a86f 	ble.w	801237e <kalman_3gyro.constprop.0+0x1ea2>
 80142a0:	ed9d 6a71 	vldr	s12, [sp, #452]	; 0x1c4
 80142a4:	eddd 6a72 	vldr	s13, [sp, #456]	; 0x1c8
 80142a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80142ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80142b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80142b4:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 80142b8:	ed8d 6a71 	vstr	s12, [sp, #452]	; 0x1c4
 80142bc:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 80142c0:	f7fe b85d 	b.w	801237e <kalman_3gyro.constprop.0+0x1ea2>
 80142c4:	f89d 20a0 	ldrb.w	r2, [sp, #160]	; 0xa0
 80142c8:	2a01      	cmp	r2, #1
 80142ca:	d002      	beq.n	80142d2 <kalman_3gyro.constprop.0+0x3df6>
 80142cc:	2b01      	cmp	r3, #1
 80142ce:	f47e a83c 	bne.w	801234a <kalman_3gyro.constprop.0+0x1e6e>
 80142d2:	eddd 7a12 	vldr	s15, [sp, #72]	; 0x48
 80142d6:	fe87 4a84 	vmaxnm.f32	s8, s15, s8
 80142da:	ed8d 4a6d 	vstr	s8, [sp, #436]	; 0x1b4
 80142de:	ed8d 4a6e 	vstr	s8, [sp, #440]	; 0x1b8
 80142e2:	ed8d 4a6f 	vstr	s8, [sp, #444]	; 0x1bc
 80142e6:	f7fe b830 	b.w	801234a <kalman_3gyro.constprop.0+0x1e6e>
 80142ea:	ee78 7a67 	vsub.f32	s15, s16, s15
 80142ee:	ee17 0a90 	vmov	r0, s15
 80142f2:	f7ec f92d 	bl	8000550 <__aeabi_f2d>
 80142f6:	ec41 0b10 	vmov	d0, r0, r1
 80142fa:	f004 fe09 	bl	8018f10 <ceil>
 80142fe:	ec51 0b10 	vmov	r0, r1, d0
 8014302:	f7ec fc2d 	bl	8000b60 <__aeabi_d2f>
 8014306:	ee08 0a10 	vmov	s16, r0
 801430a:	f7fc bd5f 	b.w	8010dcc <kalman_3gyro.constprop.0+0x8f0>
 801430e:	ee7b 7ae7 	vsub.f32	s15, s23, s15
 8014312:	ee17 0a90 	vmov	r0, s15
 8014316:	f7ec f91b 	bl	8000550 <__aeabi_f2d>
 801431a:	ec41 0b10 	vmov	d0, r0, r1
 801431e:	f004 fdf7 	bl	8018f10 <ceil>
 8014322:	ec51 0b10 	vmov	r0, r1, d0
 8014326:	f7ec fc1b 	bl	8000b60 <__aeabi_d2f>
 801432a:	ee0b 0a90 	vmov	s23, r0
 801432e:	f7fc bdd5 	b.w	8010edc <kalman_3gyro.constprop.0+0xa00>
 8014332:	bf00      	nop
 8014334:	40a00000 	.word	0x40a00000
 8014338:	3eb33333 	.word	0x3eb33333
 801433c:	3f99999a 	.word	0x3f99999a
 8014340:	3f19999a 	.word	0x3f19999a
 8014344:	3fb9999a 	.word	0x3fb9999a
 8014348:	bf666666 	.word	0xbf666666
 801434c:	391d4951 	.word	0x391d4951
 8014350:	383cbe62 	.word	0x383cbe62
 8014354:	3c75c28f 	.word	0x3c75c28f
 8014358:	469c3e00 	.word	0x469c3e00
 801435c:	43168000 	.word	0x43168000
 8014360:	3c23d70a 	.word	0x3c23d70a
 8014364:	3f19999a 	.word	0x3f19999a
 8014368:	43480000 	.word	0x43480000
 801436c:	3f866666 	.word	0x3f866666
 8014370:	3f8ccccd 	.word	0x3f8ccccd
 8014374:	3f933333 	.word	0x3f933333
 8014378:	3ebd70a4 	.word	0x3ebd70a4
 801437c:	3fa66666 	.word	0x3fa66666
 8014380:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014384:	ee17 0a90 	vmov	r0, s15
 8014388:	f7ec f8e2 	bl	8000550 <__aeabi_f2d>
 801438c:	ec41 0b10 	vmov	d0, r0, r1
 8014390:	f004 fdbe 	bl	8018f10 <ceil>
 8014394:	ec51 0b10 	vmov	r0, r1, d0
 8014398:	f7ec fbe2 	bl	8000b60 <__aeabi_d2f>
 801439c:	ee08 0a10 	vmov	s16, r0
 80143a0:	f7fc bdbf 	b.w	8010f22 <kalman_3gyro.constprop.0+0xa46>
 80143a4:	ee7c 7a67 	vsub.f32	s15, s24, s15
 80143a8:	ee17 0a90 	vmov	r0, s15
 80143ac:	f7ec f8d0 	bl	8000550 <__aeabi_f2d>
 80143b0:	ec41 0b10 	vmov	d0, r0, r1
 80143b4:	f004 fdac 	bl	8018f10 <ceil>
 80143b8:	ec51 0b10 	vmov	r0, r1, d0
 80143bc:	f7ec fbd0 	bl	8000b60 <__aeabi_d2f>
 80143c0:	ee0c 0a10 	vmov	s24, r0
 80143c4:	f7fc bd67 	b.w	8010e96 <kalman_3gyro.constprop.0+0x9ba>
 80143c8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80143cc:	ed9d 7a14 	vldr	s14, [sp, #80]	; 0x50
 80143d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80143d4:	eeb4 7aea 	vcmpe.f32	s14, s21
 80143d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143dc:	f77d affe 	ble.w	80123dc <kalman_3gyro.constprop.0+0x1f00>
 80143e0:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 80143e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143e8:	eef4 7acb 	vcmpe.f32	s15, s22
 80143ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f0:	f77d aff4 	ble.w	80123dc <kalman_3gyro.constprop.0+0x1f00>
 80143f4:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 80143f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80143fc:	eef4 7acf 	vcmpe.f32	s15, s30
 8014400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014404:	f140 8703 	bpl.w	801520e <kalman_3gyro.constprop.0+0x4d32>
 8014408:	2200      	movs	r2, #0
 801440a:	3303      	adds	r3, #3
 801440c:	f7ff ba3b 	b.w	8013886 <kalman_3gyro.constprop.0+0x33aa>
 8014410:	460b      	mov	r3, r1
 8014412:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8014416:	f8db 01bc 	ldr.w	r0, [fp, #444]	; 0x1bc
 801441a:	9280      	str	r2, [sp, #512]	; 0x200
 801441c:	2200      	movs	r2, #0
 801441e:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8014422:	907f      	str	r0, [sp, #508]	; 0x1fc
 8014424:	9181      	str	r1, [sp, #516]	; 0x204
 8014426:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 801442a:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801442e:	f7fe ba98 	b.w	8012962 <kalman_3gyro.constprop.0+0x2486>
 8014432:	a934      	add	r1, sp, #208	; 0xd0
 8014434:	a852      	add	r0, sp, #328	; 0x148
 8014436:	f7fb f86f 	bl	800f518 <b_dcm2q>
 801443a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801443e:	4619      	mov	r1, r3
 8014440:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8014444:	ed8b 9a72 	vstr	s18, [fp, #456]	; 0x1c8
 8014448:	f44f 72a2 	mov.w	r2, #324	; 0x144
 801444c:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8014450:	f006 fc3b 	bl	801acca <memset>
 8014454:	4bda      	ldr	r3, [pc, #872]	; (80147c0 <kalman_3gyro.constprop.0+0x42e4>)
 8014456:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 801445a:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 801445e:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8014462:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8014466:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 801446a:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801446e:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8014472:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8014476:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 801447a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801447c:	781a      	ldrb	r2, [r3, #0]
 801447e:	ee07 2a90 	vmov	s15, r2
 8014482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014486:	eef5 7a40 	vcmp.f32	s15, #0.0
 801448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801448e:	f040 84bf 	bne.w	8014e10 <kalman_3gyro.constprop.0+0x4934>
 8014492:	eef0 3a49 	vmov.f32	s7, s18
 8014496:	2200      	movs	r2, #0
 8014498:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801449c:	eddb ea02 	vldr	s29, [fp, #8]
 80144a0:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
 80144a4:	2301      	movs	r3, #1
 80144a6:	f88b 2000 	strb.w	r2, [fp]
 80144aa:	f7fd bc5c 	b.w	8011d66 <kalman_3gyro.constprop.0+0x188a>
 80144ae:	eddb 5a4e 	vldr	s11, [fp, #312]	; 0x138
 80144b2:	eef4 5ac8 	vcmpe.f32	s11, s16
 80144b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ba:	f340 85c7 	ble.w	801504c <kalman_3gyro.constprop.0+0x4b70>
 80144be:	eddb 3a4d 	vldr	s7, [fp, #308]	; 0x134
 80144c2:	ed9b 4a4f 	vldr	s8, [fp, #316]	; 0x13c
 80144c6:	ee38 3a64 	vsub.f32	s6, s16, s9
 80144ca:	ee34 4a63 	vsub.f32	s8, s8, s7
 80144ce:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80144d2:	ee64 4a03 	vmul.f32	s9, s8, s6
 80144d6:	ee84 caa5 	vdiv.f32	s24, s9, s11
 80144da:	ee3c ca23 	vadd.f32	s24, s24, s7
 80144de:	eddb 5a50 	vldr	s11, [fp, #320]	; 0x140
 80144e2:	eef4 5ac8 	vcmpe.f32	s11, s16
 80144e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144ea:	f63d aa29 	bhi.w	8011940 <kalman_3gyro.constprop.0+0x1464>
 80144ee:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 80144f2:	eef4 4ac8 	vcmpe.f32	s9, s16
 80144f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144fa:	f340 849d 	ble.w	8014e38 <kalman_3gyro.constprop.0+0x495c>
 80144fe:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8014502:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8014506:	ee38 3a65 	vsub.f32	s6, s16, s11
 801450a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801450e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014512:	ee24 4a03 	vmul.f32	s8, s8, s6
 8014516:	ee84 ca25 	vdiv.f32	s24, s8, s11
 801451a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801451e:	eddb 5a54 	vldr	s11, [fp, #336]	; 0x150
 8014522:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801452a:	f63d aa29 	bhi.w	8011980 <kalman_3gyro.constprop.0+0x14a4>
 801452e:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8014532:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801453a:	f340 8489 	ble.w	8014e50 <kalman_3gyro.constprop.0+0x4974>
 801453e:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8014542:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8014546:	ee38 3a65 	vsub.f32	s6, s16, s11
 801454a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801454e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014552:	ee24 4a03 	vmul.f32	s8, s8, s6
 8014556:	ee84 ca25 	vdiv.f32	s24, s8, s11
 801455a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801455e:	eddb 5a58 	vldr	s11, [fp, #352]	; 0x160
 8014562:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456a:	f63d aa29 	bhi.w	80119c0 <kalman_3gyro.constprop.0+0x14e4>
 801456e:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8014572:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801457a:	f340 8471 	ble.w	8014e60 <kalman_3gyro.constprop.0+0x4984>
 801457e:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8014582:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8014586:	ee38 3a65 	vsub.f32	s6, s16, s11
 801458a:	ee34 4a63 	vsub.f32	s8, s8, s7
 801458e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014592:	ee24 4a03 	vmul.f32	s8, s8, s6
 8014596:	ee84 ca25 	vdiv.f32	s24, s8, s11
 801459a:	ee3c ca23 	vadd.f32	s24, s24, s7
 801459e:	eddb 5a5c 	vldr	s11, [fp, #368]	; 0x170
 80145a2:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80145a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145aa:	f6fd aa29 	blt.w	8011a00 <kalman_3gyro.constprop.0+0x1524>
 80145ae:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 80145b2:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80145b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ba:	f57d aa29 	bpl.w	8011a10 <kalman_3gyro.constprop.0+0x1534>
 80145be:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 80145c2:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 80145c6:	ee38 3a65 	vsub.f32	s6, s16, s11
 80145ca:	ee34 4a63 	vsub.f32	s8, s8, s7
 80145ce:	ee74 4ae5 	vsub.f32	s9, s9, s11
 80145d2:	ee64 5a03 	vmul.f32	s11, s8, s6
 80145d6:	ee85 caa4 	vdiv.f32	s24, s11, s9
 80145da:	ee3c ca23 	vadd.f32	s24, s24, s7
 80145de:	eddb 5a60 	vldr	s11, [fp, #384]	; 0x180
 80145e2:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80145e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ea:	f6ff ad6d 	blt.w	80140c8 <kalman_3gyro.constprop.0+0x3bec>
 80145ee:	eeb4 8ac5 	vcmpe.f32	s16, s10
 80145f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f6:	f57f ad67 	bpl.w	80140c8 <kalman_3gyro.constprop.0+0x3bec>
 80145fa:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 80145fe:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8014602:	ee78 3a65 	vsub.f32	s7, s16, s11
 8014606:	ee74 4ac4 	vsub.f32	s9, s9, s8
 801460a:	ee75 5a65 	vsub.f32	s11, s10, s11
 801460e:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8014612:	ee85 ca25 	vdiv.f32	s24, s10, s11
 8014616:	ee3c ca04 	vadd.f32	s24, s24, s8
 801461a:	e555      	b.n	80140c8 <kalman_3gyro.constprop.0+0x3bec>
 801461c:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80147c4 <kalman_3gyro.constprop.0+0x42e8>
 8014620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014628:	f57d acb8 	bpl.w	8011f9c <kalman_3gyro.constprop.0+0x1ac0>
 801462c:	eddf 6a66 	vldr	s13, [pc, #408]	; 80147c8 <kalman_3gyro.constprop.0+0x42ec>
 8014630:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80147cc <kalman_3gyro.constprop.0+0x42f0>
 8014634:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014638:	ed9f 6a65 	vldr	s12, [pc, #404]	; 80147d0 <kalman_3gyro.constprop.0+0x42f4>
 801463c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8014640:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80147d4 <kalman_3gyro.constprop.0+0x42f8>
 8014644:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014648:	eddf 6a63 	vldr	s13, [pc, #396]	; 80147d8 <kalman_3gyro.constprop.0+0x42fc>
 801464c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014654:	f6fd acb8 	blt.w	8011fc8 <kalman_3gyro.constprop.0+0x1aec>
 8014658:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80147dc <kalman_3gyro.constprop.0+0x4300>
 801465c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014664:	f57d acb8 	bpl.w	8011fd8 <kalman_3gyro.constprop.0+0x1afc>
 8014668:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80147d8 <kalman_3gyro.constprop.0+0x42fc>
 801466c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8014670:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8014674:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8014678:	ee66 6a87 	vmul.f32	s13, s13, s14
 801467c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8014680:	eea6 7a86 	vfma.f32	s14, s13, s12
 8014684:	eddf 6a56 	vldr	s13, [pc, #344]	; 80147e0 <kalman_3gyro.constprop.0+0x4304>
 8014688:	eef4 7ae6 	vcmpe.f32	s15, s13
 801468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014690:	f6fd acb8 	blt.w	8012004 <kalman_3gyro.constprop.0+0x1b28>
 8014694:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014698:	eef4 7ac7 	vcmpe.f32	s15, s14
 801469c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a0:	f57d acb7 	bpl.w	8012012 <kalman_3gyro.constprop.0+0x1b36>
 80146a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80147e0 <kalman_3gyro.constprop.0+0x4304>
 80146a8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80147e4 <kalman_3gyro.constprop.0+0x4308>
 80146ac:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80146b0:	ed9f 6a4d 	vldr	s12, [pc, #308]	; 80147e8 <kalman_3gyro.constprop.0+0x430c>
 80146b4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80146b8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80147ec <kalman_3gyro.constprop.0+0x4310>
 80146bc:	eea6 7a86 	vfma.f32	s14, s13, s12
 80146c0:	f7fd bcb5 	b.w	801202e <kalman_3gyro.constprop.0+0x1b52>
 80146c4:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80147c4 <kalman_3gyro.constprop.0+0x42e8>
 80146c8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80146cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146d0:	f57d acef 	bpl.w	80120b2 <kalman_3gyro.constprop.0+0x1bd6>
 80146d4:	eddf 4a3c 	vldr	s9, [pc, #240]	; 80147c8 <kalman_3gyro.constprop.0+0x42ec>
 80146d8:	eddf 6a45 	vldr	s13, [pc, #276]	; 80147f0 <kalman_3gyro.constprop.0+0x4314>
 80146dc:	ee77 4ae4 	vsub.f32	s9, s15, s9
 80146e0:	ed9f 4a3b 	vldr	s8, [pc, #236]	; 80147d0 <kalman_3gyro.constprop.0+0x42f4>
 80146e4:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80146e8:	eddf 6a42 	vldr	s13, [pc, #264]	; 80147f4 <kalman_3gyro.constprop.0+0x4318>
 80146ec:	eee4 6a84 	vfma.f32	s13, s9, s8
 80146f0:	eeb0 9a66 	vmov.f32	s18, s13
 80146f4:	eddf 6a38 	vldr	s13, [pc, #224]	; 80147d8 <kalman_3gyro.constprop.0+0x42fc>
 80146f8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80146fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014700:	f6fd acef 	blt.w	80120e2 <kalman_3gyro.constprop.0+0x1c06>
 8014704:	eddf 6a35 	vldr	s13, [pc, #212]	; 80147dc <kalman_3gyro.constprop.0+0x4300>
 8014708:	eef4 7ae6 	vcmpe.f32	s15, s13
 801470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014710:	f57d acef 	bpl.w	80120f2 <kalman_3gyro.constprop.0+0x1c16>
 8014714:	eddf 4a30 	vldr	s9, [pc, #192]	; 80147d8 <kalman_3gyro.constprop.0+0x42fc>
 8014718:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801471c:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8014720:	eeb3 4a04 	vmov.f32	s8, #52	; 0x41a00000  20.0
 8014724:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8014728:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801472c:	eee4 6a84 	vfma.f32	s13, s9, s8
 8014730:	eeb0 9a66 	vmov.f32	s18, s13
 8014734:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80147e0 <kalman_3gyro.constprop.0+0x4304>
 8014738:	eef4 7ae6 	vcmpe.f32	s15, s13
 801473c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014740:	f6fd acef 	blt.w	8012122 <kalman_3gyro.constprop.0+0x1c46>
 8014744:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014748:	eef4 7ae6 	vcmpe.f32	s15, s13
 801474c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014750:	f57d acef 	bpl.w	8012132 <kalman_3gyro.constprop.0+0x1c56>
 8014754:	eddf 4a22 	vldr	s9, [pc, #136]	; 80147e0 <kalman_3gyro.constprop.0+0x4304>
 8014758:	eddf 6a27 	vldr	s13, [pc, #156]	; 80147f8 <kalman_3gyro.constprop.0+0x431c>
 801475c:	ee77 4ae4 	vsub.f32	s9, s15, s9
 8014760:	ed9f 4a21 	vldr	s8, [pc, #132]	; 80147e8 <kalman_3gyro.constprop.0+0x430c>
 8014764:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8014768:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 801476c:	eee4 6a84 	vfma.f32	s13, s9, s8
 8014770:	eeb0 9a66 	vmov.f32	s18, s13
 8014774:	e4c6      	b.n	8014104 <kalman_3gyro.constprop.0+0x3c28>
 8014776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477a:	f57d ac7a 	bpl.w	8012072 <kalman_3gyro.constprop.0+0x1b96>
 801477e:	eddf 6a12 	vldr	s13, [pc, #72]	; 80147c8 <kalman_3gyro.constprop.0+0x42ec>
 8014782:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801478a:	da9b      	bge.n	80146c4 <kalman_3gyro.constprop.0+0x41e8>
 801478c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8014790:	f7fd bc87 	b.w	80120a2 <kalman_3gyro.constprop.0+0x1bc6>
 8014794:	9b01      	ldr	r3, [sp, #4]
 8014796:	e63c      	b.n	8014412 <kalman_3gyro.constprop.0+0x3f36>
 8014798:	eddb 5a32 	vldr	s11, [fp, #200]	; 0xc8
 801479c:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80147a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a4:	da2e      	bge.n	8014804 <kalman_3gyro.constprop.0+0x4328>
 80147a6:	eddf 5a15 	vldr	s11, [pc, #84]	; 80147fc <kalman_3gyro.constprop.0+0x4320>
 80147aa:	edcd 5a01 	vstr	s11, [sp, #4]
 80147ae:	eddb 5a34 	vldr	s11, [fp, #208]	; 0xd0
 80147b2:	eeb4 8ae5 	vcmpe.f32	s16, s11
 80147b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ba:	db3d      	blt.n	8014838 <kalman_3gyro.constprop.0+0x435c>
 80147bc:	e366      	b.n	8014e8c <kalman_3gyro.constprop.0+0x49b0>
 80147be:	bf00      	nop
 80147c0:	40a00000 	.word	0x40a00000
 80147c4:	3cf5c28f 	.word	0x3cf5c28f
 80147c8:	3c75c28f 	.word	0x3c75c28f
 80147cc:	3ecccccc 	.word	0x3ecccccc
 80147d0:	42855556 	.word	0x42855556
 80147d4:	3fcccccd 	.word	0x3fcccccd
 80147d8:	3d4ccccd 	.word	0x3d4ccccd
 80147dc:	3dcccccd 	.word	0x3dcccccd
 80147e0:	3e4ccccd 	.word	0x3e4ccccd
 80147e4:	43f00000 	.word	0x43f00000
 80147e8:	40555555 	.word	0x40555555
 80147ec:	42ee0000 	.word	0x42ee0000
 80147f0:	3dccccd0 	.word	0x3dccccd0
 80147f4:	3f866666 	.word	0x3f866666
 80147f8:	42200000 	.word	0x42200000
 80147fc:	00000000 	.word	0x00000000
 8014800:	eef0 5a64 	vmov.f32	s11, s9
 8014804:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8014808:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801480c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014810:	f140 8336 	bpl.w	8014e80 <kalman_3gyro.constprop.0+0x49a4>
 8014814:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8014818:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 801481c:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014820:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014824:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014828:	ee64 4a03 	vmul.f32	s9, s8, s6
 801482c:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014830:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014834:	edcd 5a01 	vstr	s11, [sp, #4]
 8014838:	eddb 5a36 	vldr	s11, [fp, #216]	; 0xd8
 801483c:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8014840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014844:	f2c0 833c 	blt.w	8014ec0 <kalman_3gyro.constprop.0+0x49e4>
 8014848:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 801484c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8014850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014854:	f140 83ed 	bpl.w	8015032 <kalman_3gyro.constprop.0+0x4b56>
 8014858:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 801485c:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8014860:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014864:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014868:	ee74 5ae5 	vsub.f32	s11, s9, s11
 801486c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014870:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014874:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014878:	edcd 5a01 	vstr	s11, [sp, #4]
 801487c:	eddb 5a3a 	vldr	s11, [fp, #232]	; 0xe8
 8014880:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014888:	f200 833c 	bhi.w	8014f04 <kalman_3gyro.constprop.0+0x4a28>
 801488c:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 8014890:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014898:	f340 83c5 	ble.w	8015026 <kalman_3gyro.constprop.0+0x4b4a>
 801489c:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 80148a0:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 80148a4:	ee38 3a65 	vsub.f32	s6, s16, s11
 80148a8:	ee34 4a63 	vsub.f32	s8, s8, s7
 80148ac:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80148b0:	ee64 4a03 	vmul.f32	s9, s8, s6
 80148b4:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 80148b8:	ee74 5a23 	vadd.f32	s11, s8, s7
 80148bc:	edcd 5a01 	vstr	s11, [sp, #4]
 80148c0:	eddb 5a3e 	vldr	s11, [fp, #248]	; 0xf8
 80148c4:	eef4 5ac8 	vcmpe.f32	s11, s16
 80148c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148cc:	f200 833b 	bhi.w	8014f46 <kalman_3gyro.constprop.0+0x4a6a>
 80148d0:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 80148d4:	eef4 4ac8 	vcmpe.f32	s9, s16
 80148d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148dc:	f340 839d 	ble.w	801501a <kalman_3gyro.constprop.0+0x4b3e>
 80148e0:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 80148e4:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 80148e8:	ee38 3a65 	vsub.f32	s6, s16, s11
 80148ec:	ee34 4a63 	vsub.f32	s8, s8, s7
 80148f0:	ee74 5ae5 	vsub.f32	s11, s9, s11
 80148f4:	ee64 4a03 	vmul.f32	s9, s8, s6
 80148f8:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 80148fc:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014900:	edcd 5a01 	vstr	s11, [sp, #4]
 8014904:	eddb 5a42 	vldr	s11, [fp, #264]	; 0x108
 8014908:	eeb4 8ae5 	vcmpe.f32	s16, s11
 801490c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014910:	f2c0 833a 	blt.w	8014f88 <kalman_3gyro.constprop.0+0x4aac>
 8014914:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8014918:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801491c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014920:	f140 833a 	bpl.w	8014f98 <kalman_3gyro.constprop.0+0x4abc>
 8014924:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 8014928:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 801492c:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014930:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014934:	ee74 4ae5 	vsub.f32	s9, s9, s11
 8014938:	ee64 5a03 	vmul.f32	s11, s8, s6
 801493c:	ee85 4aa4 	vdiv.f32	s8, s11, s9
 8014940:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014944:	edcd 5a01 	vstr	s11, [sp, #4]
 8014948:	eddb 5a46 	vldr	s11, [fp, #280]	; 0x118
 801494c:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8014950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014954:	f6fc afac 	blt.w	80118b0 <kalman_3gyro.constprop.0+0x13d4>
 8014958:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014960:	f57c afa6 	bpl.w	80118b0 <kalman_3gyro.constprop.0+0x13d4>
 8014964:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8014968:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 801496c:	ee78 3a65 	vsub.f32	s7, s16, s11
 8014970:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8014974:	ee75 5a65 	vsub.f32	s11, s10, s11
 8014978:	ee24 5aa3 	vmul.f32	s10, s9, s7
 801497c:	eec5 4a25 	vdiv.f32	s9, s10, s11
 8014980:	ee74 5a84 	vadd.f32	s11, s9, s8
 8014984:	edcd 5a01 	vstr	s11, [sp, #4]
 8014988:	f7fc bf92 	b.w	80118b0 <kalman_3gyro.constprop.0+0x13d4>
 801498c:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8014990:	eef4 7acf 	vcmpe.f32	s15, s30
 8014994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014998:	dd2c      	ble.n	80149f4 <kalman_3gyro.constprop.0+0x4518>
 801499a:	eddd 7a14 	vldr	s15, [sp, #80]	; 0x50
 801499e:	eef4 7aea 	vcmpe.f32	s15, s21
 80149a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149a6:	dd25      	ble.n	80149f4 <kalman_3gyro.constprop.0+0x4518>
 80149a8:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 80149ac:	eef4 7acb 	vcmpe.f32	s15, s22
 80149b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b4:	dd1e      	ble.n	80149f4 <kalman_3gyro.constprop.0+0x4518>
 80149b6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80149ba:	eddd 5a1e 	vldr	s11, [sp, #120]	; 0x78
 80149be:	eef4 5ae7 	vcmpe.f32	s11, s15
 80149c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c6:	d515      	bpl.n	80149f4 <kalman_3gyro.constprop.0+0x4518>
 80149c8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80149cc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80149d0:	ee37 7a26 	vadd.f32	s14, s14, s13
 80149d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80149d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149dc:	d50a      	bpl.n	80149f4 <kalman_3gyro.constprop.0+0x4518>
 80149de:	2300      	movs	r3, #0
 80149e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80149e4:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 80149e8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80149ec:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 80149f0:	f7fd bf22 	b.w	8012838 <kalman_3gyro.constprop.0+0x235c>
 80149f4:	eddd 7a3f 	vldr	s15, [sp, #252]	; 0xfc
 80149f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80149fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a00:	dd0b      	ble.n	8014a1a <kalman_3gyro.constprop.0+0x453e>
 8014a02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8014a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0e:	f100 8421 	bmi.w	8015254 <kalman_3gyro.constprop.0+0x4d78>
 8014a12:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8014a16:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8014a20:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8014a24:	f7fd bf08 	b.w	8012838 <kalman_3gyro.constprop.0+0x235c>
 8014a28:	2301      	movs	r3, #1
 8014a2a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014a2e:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8014a32:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8014a36:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8014a3a:	edd2 5a00 	vldr	s11, [r2]
 8014a3e:	ed93 7a00 	vldr	s14, [r3]
 8014a42:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8014a46:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8014a4a:	ed92 5a00 	vldr	s10, [r2]
 8014a4e:	edd3 6a00 	vldr	s13, [r3]
 8014a52:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8014a56:	ee67 4a07 	vmul.f32	s9, s14, s14
 8014a5a:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 8014a5e:	f20b 621c 	addw	r2, fp, #1564	; 0x61c
 8014a62:	ed92 6a00 	vldr	s12, [r2]
 8014a66:	edd3 7a00 	vldr	s15, [r3]
 8014a6a:	eea5 4a05 	vfma.f32	s8, s10, s10
 8014a6e:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8014a72:	eea6 4a06 	vfma.f32	s8, s12, s12
 8014a76:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8014a7a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8014a7e:	eef1 2ac4 	vsqrt.f32	s5, s8
 8014a82:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8014a86:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8014a8a:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8014a8e:	ee25 5a04 	vmul.f32	s10, s10, s8
 8014a92:	ee27 7a24 	vmul.f32	s14, s14, s9
 8014a96:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8014a9a:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014a9e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8014aa2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8014aa6:	ad64      	add	r5, sp, #400	; 0x190
 8014aa8:	462f      	mov	r7, r5
 8014aaa:	aa5b      	add	r2, sp, #364	; 0x16c
 8014aac:	a92b      	add	r1, sp, #172	; 0xac
 8014aae:	a831      	add	r0, sp, #196	; 0xc4
 8014ab0:	ae5b      	add	r6, sp, #364	; 0x16c
 8014ab2:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
 8014ab6:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
 8014aba:	ed8d 5a2b 	vstr	s10, [sp, #172]	; 0xac
 8014abe:	edcd 5a2c 	vstr	s11, [sp, #176]	; 0xb0
 8014ac2:	ed8d 6a2d 	vstr	s12, [sp, #180]	; 0xb4
 8014ac6:	edcd 6a31 	vstr	s13, [sp, #196]	; 0xc4
 8014aca:	f7fa fc85 	bl	800f3d8 <getRotationMatrix>
 8014ace:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ad2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ad6:	6836      	ldr	r6, [r6, #0]
 8014ad8:	f20d 44cc 	addw	r4, sp, #1228	; 0x4cc
 8014adc:	602e      	str	r6, [r5, #0]
 8014ade:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ae2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ae6:	eddd 7a64 	vldr	s15, [sp, #400]	; 0x190
 8014aea:	ed9d 7a65 	vldr	s14, [sp, #404]	; 0x194
 8014aee:	eef0 7ae7 	vabs.f32	s15, s15
 8014af2:	eeb0 7ac7 	vabs.f32	s14, s14
 8014af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014afe:	6026      	str	r6, [r4, #0]
 8014b00:	f100 81b2 	bmi.w	8014e68 <kalman_3gyro.constprop.0+0x498c>
 8014b04:	2604      	movs	r6, #4
 8014b06:	2300      	movs	r3, #0
 8014b08:	2403      	movs	r4, #3
 8014b0a:	4632      	mov	r2, r6
 8014b0c:	2006      	movs	r0, #6
 8014b0e:	2707      	movs	r7, #7
 8014b10:	f04f 0c01 	mov.w	ip, #1
 8014b14:	9302      	str	r3, [sp, #8]
 8014b16:	ed9d 7a66 	vldr	s14, [sp, #408]	; 0x198
 8014b1a:	eeb0 7ac7 	vabs.f32	s14, s14
 8014b1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b26:	f340 8271 	ble.w	801500c <kalman_3gyro.constprop.0+0x4b30>
 8014b2a:	2306      	movs	r3, #6
 8014b2c:	2604      	movs	r6, #4
 8014b2e:	2008      	movs	r0, #8
 8014b30:	9303      	str	r3, [sp, #12]
 8014b32:	2302      	movs	r3, #2
 8014b34:	4632      	mov	r2, r6
 8014b36:	2707      	movs	r7, #7
 8014b38:	2405      	movs	r4, #5
 8014b3a:	f04f 0e00 	mov.w	lr, #0
 8014b3e:	f04f 0c01 	mov.w	ip, #1
 8014b42:	9007      	str	r0, [sp, #28]
 8014b44:	9302      	str	r3, [sp, #8]
 8014b46:	ab64      	add	r3, sp, #400	; 0x190
 8014b48:	441a      	add	r2, r3
 8014b4a:	9b07      	ldr	r3, [sp, #28]
 8014b4c:	a964      	add	r1, sp, #400	; 0x190
 8014b4e:	440b      	add	r3, r1
 8014b50:	edd2 6a00 	vldr	s13, [r2]
 8014b54:	ed93 7a00 	vldr	s14, [r3]
 8014b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014b5c:	f20d 43cc 	addw	r3, sp, #1228	; 0x4cc
 8014b60:	461d      	mov	r5, r3
 8014b62:	eb03 028c 	add.w	r2, r3, ip, lsl #2
 8014b66:	edc2 7a00 	vstr	s15, [r2]
 8014b6a:	eb03 018e 	add.w	r1, r3, lr, lsl #2
 8014b6e:	9b02      	ldr	r3, [sp, #8]
 8014b70:	ed91 7a00 	vldr	s14, [r1]
 8014b74:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8014b78:	edd3 7a00 	vldr	s15, [r3]
 8014b7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014b80:	edc1 6a00 	vstr	s13, [r1]
 8014b84:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8014b88:	eb05 0184 	add.w	r1, r5, r4, lsl #2
 8014b8c:	ed92 6a00 	vldr	s12, [r2]
 8014b90:	ed91 7a00 	vldr	s14, [r1]
 8014b94:	edd3 7a00 	vldr	s15, [r3]
 8014b98:	eee6 7a47 	vfms.f32	s15, s12, s14
 8014b9c:	edc3 7a00 	vstr	s15, [r3]
 8014ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ba2:	ed91 7a00 	vldr	s14, [r1]
 8014ba6:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8014baa:	edd2 7a00 	vldr	s15, [r2]
 8014bae:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014bb2:	edc2 7a00 	vstr	s15, [r2]
 8014bb6:	eb05 0180 	add.w	r1, r5, r0, lsl #2
 8014bba:	eb05 0287 	add.w	r2, r5, r7, lsl #2
 8014bbe:	edd1 5a00 	vldr	s11, [r1]
 8014bc2:	ed92 7a00 	vldr	s14, [r2]
 8014bc6:	eea6 7a65 	vfms.f32	s14, s12, s11
 8014bca:	ed82 7a00 	vstr	s14, [r2]
 8014bce:	9a03      	ldr	r2, [sp, #12]
 8014bd0:	ed91 6a00 	vldr	s12, [r1]
 8014bd4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8014bd8:	ed92 7a00 	vldr	s14, [r2]
 8014bdc:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8014be0:	ed82 7a00 	vstr	s14, [r2]
 8014be4:	ed93 7a00 	vldr	s14, [r3]
 8014be8:	eef0 7ae7 	vabs.f32	s15, s15
 8014bec:	eeb0 7ac7 	vabs.f32	s14, s14
 8014bf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014bfa:	ea4f 0184 	mov.w	r1, r4, lsl #2
 8014bfe:	9106      	str	r1, [sp, #24]
 8014c00:	9c02      	ldr	r4, [sp, #8]
 8014c02:	ea4f 0182 	mov.w	r1, r2, lsl #2
 8014c06:	ea4f 0280 	mov.w	r2, r0, lsl #2
 8014c0a:	9207      	str	r2, [sp, #28]
 8014c0c:	9a03      	ldr	r2, [sp, #12]
 8014c0e:	ea4f 0484 	mov.w	r4, r4, lsl #2
 8014c12:	9403      	str	r4, [sp, #12]
 8014c14:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8014c18:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8014c1c:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8014c20:	ea4f 0586 	mov.w	r5, r6, lsl #2
 8014c24:	ea4f 0487 	mov.w	r4, r7, lsl #2
 8014c28:	dd09      	ble.n	8014c3e <kalman_3gyro.constprop.0+0x4762>
 8014c2a:	4663      	mov	r3, ip
 8014c2c:	46f4      	mov	ip, lr
 8014c2e:	460d      	mov	r5, r1
 8014c30:	469e      	mov	lr, r3
 8014c32:	4614      	mov	r4, r2
 8014c34:	4603      	mov	r3, r0
 8014c36:	00b1      	lsls	r1, r6, #2
 8014c38:	00ba      	lsls	r2, r7, #2
 8014c3a:	ea4f 008c 	mov.w	r0, ip, lsl #2
 8014c3e:	f20d 46cc 	addw	r6, sp, #1228	; 0x4cc
 8014c42:	4431      	add	r1, r6
 8014c44:	1975      	adds	r5, r6, r5
 8014c46:	ed91 7a00 	vldr	s14, [r1]
 8014c4a:	edd5 7a00 	vldr	s15, [r5]
 8014c4e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8014c52:	edc1 2a00 	vstr	s5, [r1]
 8014c56:	4631      	mov	r1, r6
 8014c58:	4432      	add	r2, r6
 8014c5a:	4421      	add	r1, r4
 8014c5c:	edd1 7a00 	vldr	s15, [r1]
 8014c60:	ed92 2a00 	vldr	s4, [r2]
 8014c64:	eea2 2ae7 	vfms.f32	s4, s5, s15
 8014c68:	ed82 2a00 	vstr	s4, [r2]
 8014c6c:	f50d 62f8 	add.w	r2, sp, #1984	; 0x7c0
 8014c70:	4616      	mov	r6, r2
 8014c72:	9105      	str	r1, [sp, #20]
 8014c74:	1811      	adds	r1, r2, r0
 8014c76:	9a03      	ldr	r2, [sp, #12]
 8014c78:	18f7      	adds	r7, r6, r3
 8014c7a:	18b2      	adds	r2, r6, r2
 8014c7c:	f20d 46cc 	addw	r6, sp, #1228	; 0x4cc
 8014c80:	4430      	add	r0, r6
 8014c82:	ed90 1a00 	vldr	s2, [r0]
 8014c86:	9802      	ldr	r0, [sp, #8]
 8014c88:	f50d 64f8 	add.w	r4, sp, #1984	; 0x7c0
 8014c8c:	4433      	add	r3, r6
 8014c8e:	eb04 0680 	add.w	r6, r4, r0, lsl #2
 8014c92:	f50d 60f8 	add.w	r0, sp, #1984	; 0x7c0
 8014c96:	9504      	str	r5, [sp, #16]
 8014c98:	f5a1 61cf 	sub.w	r1, r1, #1656	; 0x678
 8014c9c:	eb00 058c 	add.w	r5, r0, ip, lsl #2
 8014ca0:	f50d 6cf8 	add.w	ip, sp, #1984	; 0x7c0
 8014ca4:	edd1 4a00 	vldr	s9, [r1]
 8014ca8:	f5a2 62cf 	sub.w	r2, r2, #1656	; 0x678
 8014cac:	eb0c 018e 	add.w	r1, ip, lr, lsl #2
 8014cb0:	ed92 5a00 	vldr	s10, [r2]
 8014cb4:	4634      	mov	r4, r6
 8014cb6:	4628      	mov	r0, r5
 8014cb8:	460a      	mov	r2, r1
 8014cba:	f5a4 64cc 	sub.w	r4, r4, #1632	; 0x660
 8014cbe:	f2a5 656c 	subw	r5, r5, #1644	; 0x66c
 8014cc2:	f5a0 60cc 	sub.w	r0, r0, #1632	; 0x660
 8014cc6:	f2a1 616c 	subw	r1, r1, #1644	; 0x66c
 8014cca:	f5a2 62cc 	sub.w	r2, r2, #1632	; 0x660
 8014cce:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 8014cd2:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8014cd6:	edd3 1a00 	vldr	s3, [r3]
 8014cda:	ed94 7a00 	vldr	s14, [r4]
 8014cde:	edd6 5a00 	vldr	s11, [r6]
 8014ce2:	ed95 6a00 	vldr	s12, [r5]
 8014ce6:	edd0 7a00 	vldr	s15, [r0]
 8014cea:	edd1 6a00 	vldr	s13, [r1]
 8014cee:	ed92 4a00 	vldr	s8, [r2]
 8014cf2:	edd7 3a00 	vldr	s7, [r7]
 8014cf6:	eee1 4a45 	vfms.f32	s9, s2, s10
 8014cfa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 8014cfe:	eea1 6a65 	vfms.f32	s12, s2, s11
 8014d02:	eee7 7a41 	vfms.f32	s15, s14, s2
 8014d06:	eee1 3ac5 	vfms.f32	s7, s3, s10
 8014d0a:	eee1 6ae5 	vfms.f32	s13, s3, s11
 8014d0e:	eea7 4a61 	vfms.f32	s8, s14, s3
 8014d12:	eee4 3ae2 	vfms.f32	s7, s9, s5
 8014d16:	eec3 1a02 	vdiv.f32	s3, s6, s4
 8014d1a:	eee2 6ac6 	vfms.f32	s13, s5, s12
 8014d1e:	eea2 4ae7 	vfms.f32	s8, s5, s15
 8014d22:	9905      	ldr	r1, [sp, #20]
 8014d24:	9d04      	ldr	r5, [sp, #16]
 8014d26:	ed91 2a00 	vldr	s4, [r1]
 8014d2a:	ee61 6aa6 	vmul.f32	s13, s3, s13
 8014d2e:	ee61 3aa3 	vmul.f32	s7, s3, s7
 8014d32:	ee21 4a84 	vmul.f32	s8, s3, s8
 8014d36:	ed95 1a00 	vldr	s2, [r5]
 8014d3a:	9b07      	ldr	r3, [sp, #28]
 8014d3c:	f20d 41cc 	addw	r1, sp, #1228	; 0x4cc
 8014d40:	440b      	add	r3, r1
 8014d42:	edd3 2a00 	vldr	s5, [r3]
 8014d46:	9b06      	ldr	r3, [sp, #24]
 8014d48:	eec3 1a01 	vdiv.f32	s3, s6, s2
 8014d4c:	440b      	add	r3, r1
 8014d4e:	461c      	mov	r4, r3
 8014d50:	460b      	mov	r3, r1
 8014d52:	eea2 6a66 	vfms.f32	s12, s4, s13
 8014d56:	eee3 4ac2 	vfms.f32	s9, s7, s4
 8014d5a:	eee4 7a42 	vfms.f32	s15, s8, s4
 8014d5e:	9a03      	ldr	r2, [sp, #12]
 8014d60:	ed94 2a00 	vldr	s4, [r4]
 8014d64:	4413      	add	r3, r2
 8014d66:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8014d6a:	ee64 4aa1 	vmul.f32	s9, s9, s3
 8014d6e:	ee21 6a86 	vmul.f32	s12, s3, s12
 8014d72:	eee2 5ae6 	vfms.f32	s11, s5, s13
 8014d76:	edd3 1a00 	vldr	s3, [r3]
 8014d7a:	eea3 5ae2 	vfms.f32	s10, s7, s5
 8014d7e:	eea4 7a62 	vfms.f32	s14, s8, s5
 8014d82:	eea4 5ac2 	vfms.f32	s10, s9, s4
 8014d86:	eec3 2a21 	vdiv.f32	s5, s6, s3
 8014d8a:	eea7 7ac2 	vfms.f32	s14, s15, s4
 8014d8e:	eee2 5a46 	vfms.f32	s11, s4, s12
 8014d92:	ee27 7a22 	vmul.f32	s14, s14, s5
 8014d96:	ee22 5a85 	vmul.f32	s10, s5, s10
 8014d9a:	ee62 5aa5 	vmul.f32	s11, s5, s11
 8014d9e:	a85b      	add	r0, sp, #364	; 0x16c
 8014da0:	a93c      	add	r1, sp, #240	; 0xf0
 8014da2:	edcd 3a5d 	vstr	s7, [sp, #372]	; 0x174
 8014da6:	edcd 4a5c 	vstr	s9, [sp, #368]	; 0x170
 8014daa:	edcd 6a60 	vstr	s13, [sp, #384]	; 0x180
 8014dae:	ed8d 7a61 	vstr	s14, [sp, #388]	; 0x184
 8014db2:	edcd 7a62 	vstr	s15, [sp, #392]	; 0x188
 8014db6:	ed8d 5a5b 	vstr	s10, [sp, #364]	; 0x16c
 8014dba:	edcd 5a5e 	vstr	s11, [sp, #376]	; 0x178
 8014dbe:	ed8d 6a5f 	vstr	s12, [sp, #380]	; 0x17c
 8014dc2:	ed8d 4a63 	vstr	s8, [sp, #396]	; 0x18c
 8014dc6:	f7fa fba7 	bl	800f518 <b_dcm2q>
 8014dca:	eddd 6a3d 	vldr	s13, [sp, #244]	; 0xf4
 8014dce:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 8014dd2:	eddd 7a3c 	vldr	s15, [sp, #240]	; 0xf0
 8014dd6:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8014dda:	ee37 7a07 	vadd.f32	s14, s14, s14
 8014dde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014de2:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8014de6:	edcd 6a2c 	vstr	s13, [sp, #176]	; 0xb0
 8014dea:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8014dee:	edcd 7a2b 	vstr	s15, [sp, #172]	; 0xac
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	f43d ad23 	beq.w	801283e <kalman_3gyro.constprop.0+0x2362>
 8014df8:	2200      	movs	r2, #0
 8014dfa:	9b01      	ldr	r3, [sp, #4]
 8014dfc:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8014e00:	f8ad 20a6 	strh.w	r2, [sp, #166]	; 0xa6
 8014e04:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 8014e08:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8014e0c:	f7fd bda9 	b.w	8012962 <kalman_3gyro.constprop.0+0x2486>
 8014e10:	edd3 7a02 	vldr	s15, [r3, #8]
 8014e14:	ed93 7a01 	vldr	s14, [r3, #4]
 8014e18:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014e1c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014e20:	ed93 7a03 	vldr	s14, [r3, #12]
 8014e24:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014e28:	eef1 6ae7 	vsqrt.f32	s13, s15
 8014e2c:	eec7 3a26 	vdiv.f32	s7, s14, s13
 8014e30:	edcb 3a72 	vstr	s7, [fp, #456]	; 0x1c8
 8014e34:	f7ff bb2f 	b.w	8014496 <kalman_3gyro.constprop.0+0x3fba>
 8014e38:	eef0 5a64 	vmov.f32	s11, s9
 8014e3c:	f7fc bd88 	b.w	8011950 <kalman_3gyro.constprop.0+0x1474>
 8014e40:	eef0 5a64 	vmov.f32	s11, s9
 8014e44:	f7ff bbb3 	b.w	80145ae <kalman_3gyro.constprop.0+0x40d2>
 8014e48:	eef0 5a64 	vmov.f32	s11, s9
 8014e4c:	f7ff bb6f 	b.w	801452e <kalman_3gyro.constprop.0+0x4052>
 8014e50:	eef0 5a64 	vmov.f32	s11, s9
 8014e54:	f7fc bd9c 	b.w	8011990 <kalman_3gyro.constprop.0+0x14b4>
 8014e58:	eef0 5a64 	vmov.f32	s11, s9
 8014e5c:	f7ff bb87 	b.w	801456e <kalman_3gyro.constprop.0+0x4092>
 8014e60:	eef0 5a64 	vmov.f32	s11, s9
 8014e64:	f7fc bdb4 	b.w	80119d0 <kalman_3gyro.constprop.0+0x14f4>
 8014e68:	2200      	movs	r2, #0
 8014e6a:	2404      	movs	r4, #4
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	eef0 7a47 	vmov.f32	s15, s14
 8014e72:	4694      	mov	ip, r2
 8014e74:	2603      	movs	r6, #3
 8014e76:	2007      	movs	r0, #7
 8014e78:	2706      	movs	r7, #6
 8014e7a:	9407      	str	r4, [sp, #28]
 8014e7c:	9302      	str	r3, [sp, #8]
 8014e7e:	e64a      	b.n	8014b16 <kalman_3gyro.constprop.0+0x463a>
 8014e80:	eef0 5a64 	vmov.f32	s11, s9
 8014e84:	eddf 4ae9 	vldr	s9, [pc, #932]	; 801522c <kalman_3gyro.constprop.0+0x4d50>
 8014e88:	edcd 4a01 	vstr	s9, [sp, #4]
 8014e8c:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 8014e90:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8014e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e98:	f140 80ce 	bpl.w	8015038 <kalman_3gyro.constprop.0+0x4b5c>
 8014e9c:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 8014ea0:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 8014ea4:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014ea8:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014eac:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014eb0:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014eb4:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014eb8:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014ebc:	edcd 5a01 	vstr	s11, [sp, #4]
 8014ec0:	eddb 5a38 	vldr	s11, [fp, #224]	; 0xe0
 8014ec4:	eeb4 8ae5 	vcmpe.f32	s16, s11
 8014ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ecc:	f6ff acd6 	blt.w	801487c <kalman_3gyro.constprop.0+0x43a0>
 8014ed0:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 8014ed4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8014ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014edc:	f140 80a6 	bpl.w	801502c <kalman_3gyro.constprop.0+0x4b50>
 8014ee0:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 8014ee4:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 8014ee8:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014eec:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014ef0:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014ef4:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014ef8:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014efc:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014f00:	edcd 5a01 	vstr	s11, [sp, #4]
 8014f04:	eddb 5a3c 	vldr	s11, [fp, #240]	; 0xf0
 8014f08:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f10:	f63f acd6 	bhi.w	80148c0 <kalman_3gyro.constprop.0+0x43e4>
 8014f14:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8014f18:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f20:	dd7e      	ble.n	8015020 <kalman_3gyro.constprop.0+0x4b44>
 8014f22:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8014f26:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 8014f2a:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014f2e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014f32:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014f36:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014f3a:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014f3e:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014f42:	edcd 5a01 	vstr	s11, [sp, #4]
 8014f46:	eddb 5a40 	vldr	s11, [fp, #256]	; 0x100
 8014f4a:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f52:	f63f acd7 	bhi.w	8014904 <kalman_3gyro.constprop.0+0x4428>
 8014f56:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 8014f5a:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f62:	dd6c      	ble.n	801503e <kalman_3gyro.constprop.0+0x4b62>
 8014f64:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 8014f68:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8014f6c:	ee38 3a65 	vsub.f32	s6, s16, s11
 8014f70:	ee34 4a63 	vsub.f32	s8, s8, s7
 8014f74:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8014f78:	ee64 4a03 	vmul.f32	s9, s8, s6
 8014f7c:	ee84 4aa5 	vdiv.f32	s8, s9, s11
 8014f80:	ee74 5a23 	vadd.f32	s11, s8, s7
 8014f84:	edcd 5a01 	vstr	s11, [sp, #4]
 8014f88:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8014f8c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8014f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f94:	f63f acd8 	bhi.w	8014948 <kalman_3gyro.constprop.0+0x446c>
 8014f98:	eddb 5a46 	vldr	s11, [fp, #280]	; 0x118
 8014f9c:	eef4 5ac8 	vcmpe.f32	s11, s16
 8014fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fa4:	f77f acd8 	ble.w	8014958 <kalman_3gyro.constprop.0+0x447c>
 8014fa8:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8014fac:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8014fb0:	ee78 3a64 	vsub.f32	s7, s16, s9
 8014fb4:	ee35 5a44 	vsub.f32	s10, s10, s8
 8014fb8:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8014fbc:	ee25 5a23 	vmul.f32	s10, s10, s7
 8014fc0:	eec5 4a25 	vdiv.f32	s9, s10, s11
 8014fc4:	ee74 5a84 	vadd.f32	s11, s9, s8
 8014fc8:	edcd 5a01 	vstr	s11, [sp, #4]
 8014fcc:	f7fc bc70 	b.w	80118b0 <kalman_3gyro.constprop.0+0x13d4>
 8014fd0:	eddf 7a97 	vldr	s15, [pc, #604]	; 8015230 <kalman_3gyro.constprop.0+0x4d54>
 8014fd4:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8015234 <kalman_3gyro.constprop.0+0x4d58>
 8014fd8:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8014fdc:	3301      	adds	r3, #1
 8014fde:	b29b      	uxth	r3, r3
 8014fe0:	2b31      	cmp	r3, #49	; 0x31
 8014fe2:	bf98      	it	ls
 8014fe4:	eef0 7a47 	vmovls.f32	s15, s14
 8014fe8:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8014fec:	f7fd bc16 	b.w	801281c <kalman_3gyro.constprop.0+0x2340>
 8014ff0:	2a0a      	cmp	r2, #10
 8014ff2:	d031      	beq.n	8015058 <kalman_3gyro.constprop.0+0x4b7c>
 8014ff4:	2100      	movs	r1, #0
 8014ff6:	3201      	adds	r2, #1
 8014ff8:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8014ffc:	f8ad 10a6 	strh.w	r1, [sp, #166]	; 0xa6
 8015000:	f88d 10a8 	strb.w	r1, [sp, #168]	; 0xa8
 8015004:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 8015008:	f7fd bcab 	b.w	8012962 <kalman_3gyro.constprop.0+0x2486>
 801500c:	2308      	movs	r3, #8
 801500e:	9303      	str	r3, [sp, #12]
 8015010:	2305      	movs	r3, #5
 8015012:	f04f 0e02 	mov.w	lr, #2
 8015016:	9309      	str	r3, [sp, #36]	; 0x24
 8015018:	e595      	b.n	8014b46 <kalman_3gyro.constprop.0+0x466a>
 801501a:	eef0 5a64 	vmov.f32	s11, s9
 801501e:	e79a      	b.n	8014f56 <kalman_3gyro.constprop.0+0x4a7a>
 8015020:	eef0 5a64 	vmov.f32	s11, s9
 8015024:	e454      	b.n	80148d0 <kalman_3gyro.constprop.0+0x43f4>
 8015026:	eef0 5a64 	vmov.f32	s11, s9
 801502a:	e773      	b.n	8014f14 <kalman_3gyro.constprop.0+0x4a38>
 801502c:	eef0 5a64 	vmov.f32	s11, s9
 8015030:	e42c      	b.n	801488c <kalman_3gyro.constprop.0+0x43b0>
 8015032:	eef0 5a64 	vmov.f32	s11, s9
 8015036:	e74b      	b.n	8014ed0 <kalman_3gyro.constprop.0+0x49f4>
 8015038:	eef0 5a64 	vmov.f32	s11, s9
 801503c:	e404      	b.n	8014848 <kalman_3gyro.constprop.0+0x436c>
 801503e:	eef0 5a64 	vmov.f32	s11, s9
 8015042:	e467      	b.n	8014914 <kalman_3gyro.constprop.0+0x4438>
 8015044:	f50b 6a97 	add.w	sl, fp, #1208	; 0x4b8
 8015048:	f7fe bd1f 	b.w	8013a8a <kalman_3gyro.constprop.0+0x35ae>
 801504c:	eef0 4a65 	vmov.f32	s9, s11
 8015050:	ed9f ca76 	vldr	s24, [pc, #472]	; 801522c <kalman_3gyro.constprop.0+0x4d50>
 8015054:	f7fc bc5c 	b.w	8011910 <kalman_3gyro.constprop.0+0x1434>
 8015058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801505a:	f240 1501 	movw	r5, #257	; 0x101
 801505e:	edd2 5a00 	vldr	s11, [r2]
 8015062:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015064:	ed92 3a00 	vldr	s6, [r2]
 8015068:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801506a:	ee75 5a83 	vadd.f32	s11, s11, s6
 801506e:	edd2 4a00 	vldr	s9, [r2]
 8015072:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015074:	ed94 3a00 	vldr	s6, [r4]
 8015078:	edd2 3a00 	vldr	s7, [r2]
 801507c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801507e:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8015082:	edd2 7a00 	vldr	s15, [r2]
 8015086:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8015088:	edd0 3a00 	vldr	s7, [r0]
 801508c:	ed92 4a00 	vldr	s8, [r2]
 8015090:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015094:	ed91 4a00 	vldr	s8, [r1]
 8015098:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801509a:	ee75 5a83 	vadd.f32	s11, s11, s6
 801509e:	ed92 3a00 	vldr	s6, [r2]
 80150a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80150a4:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80150a8:	edd2 3a00 	vldr	s7, [r2]
 80150ac:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80150ae:	ee77 7a84 	vadd.f32	s15, s15, s8
 80150b2:	ed92 4a00 	vldr	s8, [r2]
 80150b6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80150b8:	ee75 5a83 	vadd.f32	s11, s11, s6
 80150bc:	ed92 3a00 	vldr	s6, [r2]
 80150c0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80150c2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80150c6:	edd2 3a00 	vldr	s7, [r2]
 80150ca:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80150cc:	ee77 7a84 	vadd.f32	s15, s15, s8
 80150d0:	ed92 4a00 	vldr	s8, [r2]
 80150d4:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 80150d8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80150dc:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 80150e0:	edd1 3a00 	vldr	s7, [r1]
 80150e4:	ee75 5a83 	vadd.f32	s11, s11, s6
 80150e8:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 80150ec:	ed90 3a00 	vldr	s6, [r0]
 80150f0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80150f4:	ed92 4a00 	vldr	s8, [r2]
 80150f8:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 80150fc:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8015100:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8015104:	edd1 3a00 	vldr	s7, [r1]
 8015108:	ee75 5a83 	vadd.f32	s11, s11, s6
 801510c:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8015110:	ed90 3a00 	vldr	s6, [r0]
 8015114:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015118:	ed92 4a00 	vldr	s8, [r2]
 801511c:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8015120:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8015124:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 8015128:	edd1 3a00 	vldr	s7, [r1]
 801512c:	ee75 5a83 	vadd.f32	s11, s11, s6
 8015130:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 8015134:	ed90 3a00 	vldr	s6, [r0]
 8015138:	ee77 7a84 	vadd.f32	s15, s15, s8
 801513c:	ed92 4a00 	vldr	s8, [r2]
 8015140:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8015144:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8015148:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 801514c:	edd0 3a00 	vldr	s7, [r0]
 8015150:	ee75 5a83 	vadd.f32	s11, s11, s6
 8015154:	edd4 2a00 	vldr	s5, [r4]
 8015158:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 801515c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015160:	ed92 4a00 	vldr	s8, [r2]
 8015164:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 8015168:	ed91 3a00 	vldr	s6, [r1]
 801516c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8015170:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 8015174:	edd1 3a00 	vldr	s7, [r1]
 8015178:	f60b 020c 	addw	r2, fp, #2060	; 0x80c
 801517c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8015180:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015184:	ed92 4a00 	vldr	s8, [r2]
 8015188:	ee74 4a83 	vadd.f32	s9, s9, s6
 801518c:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8015190:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015194:	ee64 4a85 	vmul.f32	s9, s9, s10
 8015198:	ee65 5a85 	vmul.f32	s11, s11, s10
 801519c:	ee67 7a85 	vmul.f32	s15, s15, s10
 80151a0:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 80151a4:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
 80151a8:	edc0 4a00 	vstr	s9, [r0]
 80151ac:	f89b 1001 	ldrb.w	r1, [fp, #1]
 80151b0:	f20d 40cc 	addw	r0, sp, #1228	; 0x4cc
 80151b4:	edc0 5a00 	vstr	s11, [r0]
 80151b8:	3201      	adds	r2, #1
 80151ba:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 80151be:	ed8d 7a7f 	vstr	s14, [sp, #508]	; 0x1fc
 80151c2:	edcd 6a80 	vstr	s13, [sp, #512]	; 0x200
 80151c6:	ed8d 6a81 	vstr	s12, [sp, #516]	; 0x204
 80151ca:	edc0 7a00 	vstr	s15, [r0]
 80151ce:	f88d 30a8 	strb.w	r3, [sp, #168]	; 0xa8
 80151d2:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
 80151d6:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 80151da:	2900      	cmp	r1, #0
 80151dc:	f43d abc1 	beq.w	8012962 <kalman_3gyro.constprop.0+0x2486>
 80151e0:	2200      	movs	r2, #0
 80151e2:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 80151e6:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 80151ea:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 80151ee:	f88b 2001 	strb.w	r2, [fp, #1]
 80151f2:	f7fd bbb6 	b.w	8012962 <kalman_3gyro.constprop.0+0x2486>
 80151f6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80151fa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80151fe:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8015202:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8015206:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801520a:	f7fd bb15 	b.w	8012838 <kalman_3gyro.constprop.0+0x235c>
 801520e:	2a00      	cmp	r2, #0
 8015210:	f340 8120 	ble.w	8015454 <kalman_3gyro.constprop.0+0x4f78>
 8015214:	2300      	movs	r3, #0
 8015216:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 801521a:	f88d 30a2 	strb.w	r3, [sp, #162]	; 0xa2
 801521e:	f88d 30a9 	strb.w	r3, [sp, #169]	; 0xa9
 8015222:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 8015226:	f7fd b8d9 	b.w	80123dc <kalman_3gyro.constprop.0+0x1f00>
 801522a:	bf00      	nop
 801522c:	00000000 	.word	0x00000000
 8015230:	3e4cccce 	.word	0x3e4cccce
 8015234:	3eaaaaab 	.word	0x3eaaaaab
 8015238:	3e999998 	.word	0x3e999998
 801523c:	3f99999a 	.word	0x3f99999a
 8015240:	3dccccd0 	.word	0x3dccccd0
 8015244:	3f8ccccd 	.word	0x3f8ccccd
 8015248:	3e4ccccd 	.word	0x3e4ccccd
 801524c:	3d088889 	.word	0x3d088889
 8015250:	3d0d3dcb 	.word	0x3d0d3dcb
 8015254:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015258:	eef4 7ac7 	vcmpe.f32	s15, s14
 801525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015260:	d55a      	bpl.n	8015318 <kalman_3gyro.constprop.0+0x4e3c>
 8015262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015266:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8015240 <kalman_3gyro.constprop.0+0x4d64>
 801526a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 801526e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015272:	eef0 5a66 	vmov.f32	s11, s13
 8015276:	eef4 7ae6 	vcmpe.f32	s15, s13
 801527a:	eee7 5a06 	vfma.f32	s11, s14, s12
 801527e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015282:	eeb0 7a65 	vmov.f32	s14, s11
 8015286:	db5a      	blt.n	801533e <kalman_3gyro.constprop.0+0x4e62>
 8015288:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801528c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015294:	d55a      	bpl.n	801534c <kalman_3gyro.constprop.0+0x4e70>
 8015296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801529a:	ed1f 6a19 	vldr	s12, [pc, #-100]	; 8015238 <kalman_3gyro.constprop.0+0x4d5c>
 801529e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80152a2:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 801523c <kalman_3gyro.constprop.0+0x4d60>
 80152a6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80152aa:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80152ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 80152b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152b6:	db5a      	blt.n	801536e <kalman_3gyro.constprop.0+0x4e92>
 80152b8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80152bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80152c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c4:	d55a      	bpl.n	801537c <kalman_3gyro.constprop.0+0x4ea0>
 80152c6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80152ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80152ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80152d2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80152d6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80152da:	ee68 8a87 	vmul.f32	s17, s17, s14
 80152de:	f7ff bb9c 	b.w	8014a1a <kalman_3gyro.constprop.0+0x453e>
 80152e2:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 80152e6:	2b27      	cmp	r3, #39	; 0x27
 80152e8:	d855      	bhi.n	8015396 <kalman_3gyro.constprop.0+0x4eba>
 80152ea:	ed8d 5a7f 	vstr	s10, [sp, #508]	; 0x1fc
 80152ee:	edcd 5a80 	vstr	s11, [sp, #512]	; 0x200
 80152f2:	ed8d 6a81 	vstr	s12, [sp, #516]	; 0x204
 80152f6:	2201      	movs	r2, #1
 80152f8:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 80152fc:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8015300:	4413      	add	r3, r2
 8015302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015306:	bf0c      	ite	eq
 8015308:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 801530c:	b29b      	uxthne	r3, r3
 801530e:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8015312:	9b01      	ldr	r3, [sp, #4]
 8015314:	f7fd bb25 	b.w	8012962 <kalman_3gyro.constprop.0+0x2486>
 8015318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801531c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015324:	d5b0      	bpl.n	8015288 <kalman_3gyro.constprop.0+0x4dac>
 8015326:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801532a:	ed5f 6a3b 	vldr	s13, [pc, #-236]	; 8015240 <kalman_3gyro.constprop.0+0x4d64>
 801532e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8015332:	ee67 6a26 	vmul.f32	s13, s14, s13
 8015336:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8015244 <kalman_3gyro.constprop.0+0x4d68>
 801533a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801533e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015342:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801534a:	dbae      	blt.n	80152aa <kalman_3gyro.constprop.0+0x4dce>
 801534c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015358:	d5ae      	bpl.n	80152b8 <kalman_3gyro.constprop.0+0x4ddc>
 801535a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801535e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015362:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8015366:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801536a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801536e:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8015372:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801537a:	dbae      	blt.n	80152da <kalman_3gyro.constprop.0+0x4dfe>
 801537c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8015380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015384:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8015248 <kalman_3gyro.constprop.0+0x4d6c>
 8015388:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801538c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8015390:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015394:	e7a1      	b.n	80152da <kalman_3gyro.constprop.0+0x4dfe>
 8015396:	9b08      	ldr	r3, [sp, #32]
 8015398:	6999      	ldr	r1, [r3, #24]
 801539a:	69da      	ldr	r2, [r3, #28]
 801539c:	6a1b      	ldr	r3, [r3, #32]
 801539e:	917f      	str	r1, [sp, #508]	; 0x1fc
 80153a0:	9280      	str	r2, [sp, #512]	; 0x200
 80153a2:	9381      	str	r3, [sp, #516]	; 0x204
 80153a4:	e7a7      	b.n	80152f6 <kalman_3gyro.constprop.0+0x4e1a>
 80153a6:	f04f 30ff 	mov.w	r0, #4294967295
 80153aa:	ed1f 4a58 	vldr	s8, [pc, #-352]	; 801524c <kalman_3gyro.constprop.0+0x4d70>
 80153ae:	ed5f 4a58 	vldr	s9, [pc, #-352]	; 8015250 <kalman_3gyro.constprop.0+0x4d74>
 80153b2:	ac31      	add	r4, sp, #196	; 0xc4
 80153b4:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 80153b8:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 80153bc:	eef0 7a66 	vmov.f32	s15, s13
 80153c0:	461a      	mov	r2, r3
 80153c2:	3001      	adds	r0, #1
 80153c4:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 80153c8:	320c      	adds	r2, #12
 80153ca:	428a      	cmp	r2, r1
 80153cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80153d0:	d1f8      	bne.n	80153c4 <kalman_3gyro.constprop.0+0x4ee8>
 80153d2:	ee27 7a84 	vmul.f32	s14, s15, s8
 80153d6:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80153da:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80153de:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 80153e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80153e6:	330c      	adds	r3, #12
 80153e8:	428b      	cmp	r3, r1
 80153ea:	eee7 6aa7 	vfma.f32	s13, s15, s15
 80153ee:	d1f6      	bne.n	80153de <kalman_3gyro.constprop.0+0x4f02>
 80153f0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80153f4:	2802      	cmp	r0, #2
 80153f6:	ece4 6a01 	vstmia	r4!, {s13}
 80153fa:	f103 0104 	add.w	r1, r3, #4
 80153fe:	d1d9      	bne.n	80153b4 <kalman_3gyro.constprop.0+0x4ed8>
 8015400:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 8015404:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 8015408:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 801540c:	ee74 7aa6 	vadd.f32	s15, s9, s13
 8015410:	eeb1 4ae4 	vsqrt.f32	s8, s9
 8015414:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015418:	eef1 4ae6 	vsqrt.f32	s9, s13
 801541c:	eef1 6ac7 	vsqrt.f32	s13, s14
 8015420:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8015424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801542c:	ed8d 4a31 	vstr	s8, [sp, #196]	; 0xc4
 8015430:	edcd 4a32 	vstr	s9, [sp, #200]	; 0xc8
 8015434:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8015438:	f57d aa5f 	bpl.w	80128fa <kalman_3gyro.constprop.0+0x241e>
 801543c:	2200      	movs	r2, #0
 801543e:	ed8d 5a7f 	vstr	s10, [sp, #508]	; 0x1fc
 8015442:	edcd 5a80 	vstr	s11, [sp, #512]	; 0x200
 8015446:	ed8d 6a81 	vstr	s12, [sp, #516]	; 0x204
 801544a:	9b01      	ldr	r3, [sp, #4]
 801544c:	f88b 2001 	strb.w	r2, [fp, #1]
 8015450:	f7fd ba87 	b.w	8012962 <kalman_3gyro.constprop.0+0x2486>
 8015454:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8015458:	eddd 6a6d 	vldr	s13, [sp, #436]	; 0x1b4
 801545c:	ed9d 7a6e 	vldr	s14, [sp, #440]	; 0x1b8
 8015460:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 8015464:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015468:	ee27 7a06 	vmul.f32	s14, s14, s12
 801546c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015470:	edcd 6a6d 	vstr	s13, [sp, #436]	; 0x1b4
 8015474:	ed8d 7a6e 	vstr	s14, [sp, #440]	; 0x1b8
 8015478:	edcd 7a6f 	vstr	s15, [sp, #444]	; 0x1bc
 801547c:	f7fc bfae 	b.w	80123dc <kalman_3gyro.constprop.0+0x1f00>

08015480 <iNemoEngine_API_Update>:
 8015480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015484:	ed2d 8b10 	vpush	{d8-d15}
 8015488:	4604      	mov	r4, r0
 801548a:	460d      	mov	r5, r1
 801548c:	4617      	mov	r7, r2
 801548e:	eef0 8a40 	vmov.f32	s17, s0
 8015492:	b0c3      	sub	sp, #268	; 0x10c
 8015494:	2b00      	cmp	r3, #0
 8015496:	f000 824e 	beq.w	8015936 <iNemoEngine_API_Update+0x4b6>
 801549a:	461e      	mov	r6, r3
 801549c:	463a      	mov	r2, r7
 801549e:	46b8      	mov	r8, r7
 80154a0:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 80154a4:	f10d 0ed4 	add.w	lr, sp, #212	; 0xd4
 80154a8:	6851      	ldr	r1, [r2, #4]
 80154aa:	6892      	ldr	r2, [r2, #8]
 80154ac:	f10d 0cc8 	add.w	ip, sp, #200	; 0xc8
 80154b0:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
 80154b4:	6838      	ldr	r0, [r7, #0]
 80154b6:	6879      	ldr	r1, [r7, #4]
 80154b8:	68ba      	ldr	r2, [r7, #8]
 80154ba:	f894 7978 	ldrb.w	r7, [r4, #2424]	; 0x978
 80154be:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80154c2:	f858 0f18 	ldr.w	r0, [r8, #24]!
 80154c6:	ab38      	add	r3, sp, #224	; 0xe0
 80154c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80154cc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80154d0:	c307      	stmia	r3!, {r0, r1, r2}
 80154d2:	b12f      	cbz	r7, 80154e0 <iNemoEngine_API_Update+0x60>
 80154d4:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 80154d8:	7923      	ldrb	r3, [r4, #4]
 80154da:	429a      	cmp	r2, r3
 80154dc:	f080 8291 	bcs.w	8015a02 <iNemoEngine_API_Update+0x582>
 80154e0:	2300      	movs	r3, #0
 80154e2:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 80154e6:	f10d 081c 	add.w	r8, sp, #28
 80154ea:	4649      	mov	r1, r9
 80154ec:	4640      	mov	r0, r8
 80154ee:	aa35      	add	r2, sp, #212	; 0xd4
 80154f0:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 80154f4:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
 80154f8:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 80154fc:	f7f9 fc58 	bl	800edb0 <rotVect>
 8015500:	aa38      	add	r2, sp, #224	; 0xe0
 8015502:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8015506:	a80a      	add	r0, sp, #40	; 0x28
 8015508:	f7f9 fc52 	bl	800edb0 <rotVect>
 801550c:	4650      	mov	r0, sl
 801550e:	aa32      	add	r2, sp, #200	; 0xc8
 8015510:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8015514:	f7f9 fc4c 	bl	800edb0 <rotVect>
 8015518:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801551c:	b923      	cbnz	r3, 8015528 <iNemoEngine_API_Update+0xa8>
 801551e:	2200      	movs	r2, #0
 8015520:	4b88      	ldr	r3, [pc, #544]	; (8015744 <iNemoEngine_API_Update+0x2c4>)
 8015522:	920d      	str	r2, [sp, #52]	; 0x34
 8015524:	930e      	str	r3, [sp, #56]	; 0x38
 8015526:	930f      	str	r3, [sp, #60]	; 0x3c
 8015528:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 801552c:	2f09      	cmp	r7, #9
 801552e:	d851      	bhi.n	80155d4 <iNemoEngine_API_Update+0x154>
 8015530:	eddd aa08 	vldr	s21, [sp, #32]
 8015534:	ed9d ba07 	vldr	s22, [sp, #28]
 8015538:	ee6a 7aaa 	vmul.f32	s15, s21, s21
 801553c:	ed9d 9a09 	vldr	s18, [sp, #36]	; 0x24
 8015540:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8015544:	eee9 7a09 	vfma.f32	s15, s18, s18
 8015548:	ee17 0a90 	vmov	r0, s15
 801554c:	f7eb f800 	bl	8000550 <__aeabi_f2d>
 8015550:	ec41 0b10 	vmov	d0, r0, r1
 8015554:	f003 fe90 	bl	8019278 <sqrt>
 8015558:	ec51 0b10 	vmov	r0, r1, d0
 801555c:	f7eb fb00 	bl	8000b60 <__aeabi_d2f>
 8015560:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8015564:	eddd 9a0e 	vldr	s19, [sp, #56]	; 0x38
 8015568:	ee07 0a90 	vmov	s15, r0
 801556c:	ed9d aa0d 	vldr	s20, [sp, #52]	; 0x34
 8015570:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 8015574:	ee29 7aa9 	vmul.f32	s14, s19, s19
 8015578:	ee2b ba27 	vmul.f32	s22, s22, s15
 801557c:	eeaa 7a0a 	vfma.f32	s14, s20, s20
 8015580:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8015584:	ee69 7a27 	vmul.f32	s15, s18, s15
 8015588:	ed9d 9a0f 	vldr	s18, [sp, #60]	; 0x3c
 801558c:	eea9 7a09 	vfma.f32	s14, s18, s18
 8015590:	ee17 0a10 	vmov	r0, s14
 8015594:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
 8015598:	ed8d ba07 	vstr	s22, [sp, #28]
 801559c:	edcd aa08 	vstr	s21, [sp, #32]
 80155a0:	f7ea ffd6 	bl	8000550 <__aeabi_f2d>
 80155a4:	ec41 0b10 	vmov	d0, r0, r1
 80155a8:	f003 fe66 	bl	8019278 <sqrt>
 80155ac:	ec51 0b10 	vmov	r0, r1, d0
 80155b0:	f7eb fad6 	bl	8000b60 <__aeabi_d2f>
 80155b4:	ee07 0a90 	vmov	s15, r0
 80155b8:	eecb 7aa7 	vdiv.f32	s15, s23, s15
 80155bc:	ee2a aa27 	vmul.f32	s20, s20, s15
 80155c0:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80155c4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80155c8:	ed8d aa0d 	vstr	s20, [sp, #52]	; 0x34
 80155cc:	edcd 9a0e 	vstr	s19, [sp, #56]	; 0x38
 80155d0:	ed8d 9a0f 	vstr	s18, [sp, #60]	; 0x3c
 80155d4:	7923      	ldrb	r3, [r4, #4]
 80155d6:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 80155da:	429a      	cmp	r2, r3
 80155dc:	f080 80d6 	bcs.w	801578c <iNemoEngine_API_Update+0x30c>
 80155e0:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 80155e4:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 80155e8:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 80155ec:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 80155f0:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 80155f4:	3701      	adds	r7, #1
 80155f6:	4649      	mov	r1, r9
 80155f8:	4640      	mov	r0, r8
 80155fa:	aa35      	add	r2, sp, #212	; 0xd4
 80155fc:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8015600:	9302      	str	r3, [sp, #8]
 8015602:	f7f9 fbd5 	bl	800edb0 <rotVect>
 8015606:	9b02      	ldr	r3, [sp, #8]
 8015608:	f8db 1000 	ldr.w	r1, [fp]
 801560c:	6818      	ldr	r0, [r3, #0]
 801560e:	f8da 2000 	ldr.w	r2, [sl]
 8015612:	6833      	ldr	r3, [r6, #0]
 8015614:	60e8      	str	r0, [r5, #12]
 8015616:	6129      	str	r1, [r5, #16]
 8015618:	61ab      	str	r3, [r5, #24]
 801561a:	616a      	str	r2, [r5, #20]
 801561c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8015620:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8015624:	e9cd 3200 	strd	r3, r2, [sp]
 8015628:	4641      	mov	r1, r8
 801562a:	462a      	mov	r2, r5
 801562c:	f105 031c 	add.w	r3, r5, #28
 8015630:	f105 000c 	add.w	r0, r5, #12
 8015634:	f7fa fe82 	bl	801033c <output_update>
 8015638:	edd5 8a00 	vldr	s17, [r5]
 801563c:	eeb0 0a68 	vmov.f32	s0, s17
 8015640:	f003 fdae 	bl	80191a0 <sinf>
 8015644:	edd5 9a01 	vldr	s19, [r5, #4]
 8015648:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8015748 <iNemoEngine_API_Update+0x2c8>
 801564c:	eef0 6ae9 	vabs.f32	s13, s19
 8015650:	ee20 9a00 	vmul.f32	s18, s0, s0
 8015654:	eddf 7a3d 	vldr	s15, [pc, #244]	; 801574c <iNemoEngine_API_Update+0x2cc>
 8015658:	eef4 6ac7 	vcmpe.f32	s13, s14
 801565c:	eee9 7a27 	vfma.f32	s15, s18, s15
 8015660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015664:	eeb0 9a67 	vmov.f32	s18, s15
 8015668:	d567      	bpl.n	801573a <iNemoEngine_API_Update+0x2ba>
 801566a:	eeb0 0a69 	vmov.f32	s0, s19
 801566e:	f003 fdd9 	bl	8019224 <tanf>
 8015672:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015676:	eea0 8a09 	vfma.f32	s16, s0, s18
 801567a:	eef1 7ac8 	vsqrt.f32	s15, s16
 801567e:	eddf 6a34 	vldr	s13, [pc, #208]	; 8015750 <iNemoEngine_API_Update+0x2d0>
 8015682:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015686:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8015764 <iNemoEngine_API_Update+0x2e4>
 801568a:	fec7 7ae6 	vminnm.f32	s15, s15, s13
 801568e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8015692:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8015696:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801569a:	bbbb      	cbnz	r3, 801570c <iNemoEngine_API_Update+0x28c>
 801569c:	4c2d      	ldr	r4, [pc, #180]	; (8015754 <iNemoEngine_API_Update+0x2d4>)
 801569e:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 80156a2:	edd5 0a08 	vldr	s1, [r5, #32]
 80156a6:	ed95 0a07 	vldr	s0, [r5, #28]
 80156aa:	6820      	ldr	r0, [r4, #0]
 80156ac:	f7f9 fc50 	bl	800ef50 <findDirection>
 80156b0:	ed95 7a03 	vldr	s14, [r5, #12]
 80156b4:	edd5 6a04 	vldr	s13, [r5, #16]
 80156b8:	ed95 9a05 	vldr	s18, [r5, #20]
 80156bc:	edd5 7a06 	vldr	s15, [r5, #24]
 80156c0:	6020      	str	r0, [r4, #0]
 80156c2:	2805      	cmp	r0, #5
 80156c4:	f200 8365 	bhi.w	8015d92 <iNemoEngine_API_Update+0x912>
 80156c8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80156cc:	0137000a 	.word	0x0137000a
 80156d0:	01690006 	.word	0x01690006
 80156d4:	000a0006 	.word	0x000a0006
 80156d8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015758 <iNemoEngine_API_Update+0x2d8>
 80156dc:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80156e0:	eddf 7a29 	vldr	s15, [pc, #164]	; 8015788 <iNemoEngine_API_Update+0x308>
 80156e4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80156e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156ec:	bfa8      	it	ge
 80156ee:	ee78 8ae7 	vsubge.f32	s17, s17, s15
 80156f2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80156f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156fa:	f100 8111 	bmi.w	8015920 <iNemoEngine_API_Update+0x4a0>
 80156fe:	edc5 8a0d 	vstr	s17, [r5, #52]	; 0x34
 8015702:	b043      	add	sp, #268	; 0x10c
 8015704:	ecbd 8b10 	vpop	{d8-d15}
 8015708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801570c:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8015710:	ed95 9a05 	vldr	s18, [r5, #20]
 8015714:	4c0f      	ldr	r4, [pc, #60]	; (8015754 <iNemoEngine_API_Update+0x2d4>)
 8015716:	eeb1 1a41 	vneg.f32	s2, s2
 801571a:	edd5 0a07 	vldr	s1, [r5, #28]
 801571e:	ed95 0a08 	vldr	s0, [r5, #32]
 8015722:	6820      	ldr	r0, [r4, #0]
 8015724:	f7f9 fc14 	bl	800ef50 <findDirection>
 8015728:	eeb1 9a49 	vneg.f32	s18, s18
 801572c:	ed95 7a04 	vldr	s14, [r5, #16]
 8015730:	edd5 6a03 	vldr	s13, [r5, #12]
 8015734:	edd5 7a06 	vldr	s15, [r5, #24]
 8015738:	e7c2      	b.n	80156c0 <iNemoEngine_API_Update+0x240>
 801573a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801575c <iNemoEngine_API_Update+0x2dc>
 801573e:	eea9 8a27 	vfma.f32	s16, s18, s15
 8015742:	e79a      	b.n	801567a <iNemoEngine_API_Update+0x1fa>
 8015744:	3f333333 	.word	0x3f333333
 8015748:	3fbc430e 	.word	0x3fbc430e
 801574c:	00000000 	.word	0x00000000
 8015750:	40490fdb 	.word	0x40490fdb
 8015754:	20000138 	.word	0x20000138
 8015758:	43340000 	.word	0x43340000
 801575c:	42c6ab07 	.word	0x42c6ab07
 8015760:	3c03126f 	.word	0x3c03126f
 8015764:	3c8efa35 	.word	0x3c8efa35
 8015768:	3b656042 	.word	0x3b656042
 801576c:	3ed93dd9 	.word	0x3ed93dd9
 8015770:	3fb50481 	.word	0x3fb50481
 8015774:	3e4ccccd 	.word	0x3e4ccccd
 8015778:	42c80000 	.word	0x42c80000
 801577c:	3a83126f 	.word	0x3a83126f
 8015780:	3d4ccccd 	.word	0x3d4ccccd
 8015784:	3f333333 	.word	0x3f333333
 8015788:	43b40000 	.word	0x43b40000
 801578c:	ee07 3a90 	vmov	s15, r3
 8015790:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8015794:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8015798:	f04f 0c00 	mov.w	ip, #0
 801579c:	2700      	movs	r7, #0
 801579e:	ed5f 6a10 	vldr	s13, [pc, #-64]	; 8015760 <iNemoEngine_API_Update+0x2e0>
 80157a2:	ee21 1a28 	vmul.f32	s2, s2, s17
 80157a6:	f8a4 c950 	strh.w	ip, [r4, #2384]	; 0x950
 80157aa:	f604 1c5c 	addw	ip, r4, #2396	; 0x95c
 80157ae:	eddc 5a00 	vldr	s11, [ip]
 80157b2:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 80157b6:	f8cc 7000 	str.w	r7, [ip]
 80157ba:	edd3 4a00 	vldr	s9, [r3]
 80157be:	601f      	str	r7, [r3, #0]
 80157c0:	f604 1364 	addw	r3, r4, #2404	; 0x964
 80157c4:	ed5f 7a19 	vldr	s15, [pc, #-100]	; 8015764 <iNemoEngine_API_Update+0x2e4>
 80157c8:	ed93 5a00 	vldr	s10, [r3]
 80157cc:	ee86 7a81 	vdiv.f32	s14, s13, s2
 80157d0:	ee64 4aa7 	vmul.f32	s9, s9, s15
 80157d4:	ee25 5a27 	vmul.f32	s10, s10, s15
 80157d8:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80157dc:	ed1f 4a1e 	vldr	s8, [pc, #-120]	; 8015768 <iNemoEngine_API_Update+0x2e8>
 80157e0:	eef1 7ac7 	vsqrt.f32	s15, s14
 80157e4:	ed5f 6a1f 	vldr	s13, [pc, #-124]	; 801576c <iNemoEngine_API_Update+0x2ec>
 80157e8:	ed1f 6a1f 	vldr	s12, [pc, #-124]	; 8015770 <iNemoEngine_API_Update+0x2f0>
 80157ec:	ed1f 7a1f 	vldr	s14, [pc, #-124]	; 8015774 <iNemoEngine_API_Update+0x2f4>
 80157f0:	601f      	str	r7, [r3, #0]
 80157f2:	7963      	ldrb	r3, [r4, #5]
 80157f4:	af29      	add	r7, sp, #164	; 0xa4
 80157f6:	f10d 0898 	add.w	r8, sp, #152	; 0x98
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8015800:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8015804:	eec4 2a27 	vdiv.f32	s5, s8, s15
 8015808:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 801580c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8015810:	edcd 4a2d 	vstr	s9, [sp, #180]	; 0xb4
 8015814:	ed8d 5a2e 	vstr	s10, [sp, #184]	; 0xb8
 8015818:	edcd 5a2c 	vstr	s11, [sp, #176]	; 0xb0
 801581c:	ee27 6a86 	vmul.f32	s12, s15, s12
 8015820:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015824:	f000 812e 	beq.w	8015a84 <iNemoEngine_API_Update+0x604>
 8015828:	2b02      	cmp	r3, #2
 801582a:	f000 8122 	beq.w	8015a72 <iNemoEngine_API_Update+0x5f2>
 801582e:	2b00      	cmp	r3, #0
 8015830:	f000 80ef 	beq.w	8015a12 <iNemoEngine_API_Update+0x592>
 8015834:	ed94 5a05 	vldr	s10, [r4, #20]
 8015838:	ed5f 0a31 	vldr	s1, [pc, #-196]	; 8015778 <iNemoEngine_API_Update+0x2f8>
 801583c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8015840:	ee65 0a20 	vmul.f32	s1, s10, s1
 8015844:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015848:	ed1f 0a34 	vldr	s0, [pc, #-208]	; 801577c <iNemoEngine_API_Update+0x2fc>
 801584c:	8863      	ldrh	r3, [r4, #2]
 801584e:	1e5a      	subs	r2, r3, #1
 8015850:	2a12      	cmp	r2, #18
 8015852:	f200 80e7 	bhi.w	8015a24 <iNemoEngine_API_Update+0x5a4>
 8015856:	3301      	adds	r3, #1
 8015858:	b21a      	sxth	r2, r3
 801585a:	b29b      	uxth	r3, r3
 801585c:	2b03      	cmp	r3, #3
 801585e:	8062      	strh	r2, [r4, #2]
 8015860:	f240 8115 	bls.w	8015a8e <iNemoEngine_API_Update+0x60e>
 8015864:	ee05 2a90 	vmov	s11, r2
 8015868:	ed1f 5a3b 	vldr	s10, [pc, #-236]	; 8015780 <iNemoEngine_API_Update+0x300>
 801586c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8015870:	ee65 5a85 	vmul.f32	s11, s11, s10
 8015874:	ed94 5a0d 	vldr	s10, [r4, #52]	; 0x34
 8015878:	ed5f 4a3e 	vldr	s9, [pc, #-248]	; 8015784 <iNemoEngine_API_Update+0x304>
 801587c:	ee26 6a05 	vmul.f32	s12, s12, s10
 8015880:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8015884:	ee82 5aa5 	vdiv.f32	s10, s5, s11
 8015888:	ee26 6a25 	vmul.f32	s12, s12, s11
 801588c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015890:	ed8d 5a20 	vstr	s10, [sp, #128]	; 0x80
 8015894:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8015898:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801589c:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 80158a0:	ed8d 6a24 	vstr	s12, [sp, #144]	; 0x90
 80158a4:	ed8d 7a25 	vstr	s14, [sp, #148]	; 0x94
 80158a8:	aa1c      	add	r2, sp, #112	; 0x70
 80158aa:	af18      	add	r7, sp, #96	; 0x60
 80158ac:	e9cd 7200 	strd	r7, r2, [sp]
 80158b0:	4641      	mov	r1, r8
 80158b2:	4620      	mov	r0, r4
 80158b4:	ab14      	add	r3, sp, #80	; 0x50
 80158b6:	aa20      	add	r2, sp, #128	; 0x80
 80158b8:	f7fa fe10 	bl	80104dc <kalman_3gyro.constprop.0>
 80158bc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80158be:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80158c2:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 80158c6:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 80158ca:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 80158ce:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 80158d2:	f8c7 a000 	str.w	sl, [r7]
 80158d6:	f604 1744 	addw	r7, r4, #2372	; 0x944
 80158da:	f8c7 e000 	str.w	lr, [r7]
 80158de:	f604 1748 	addw	r7, r4, #2376	; 0x948
 80158e2:	f8c7 c000 	str.w	ip, [r7]
 80158e6:	f8dd e064 	ldr.w	lr, [sp, #100]	; 0x64
 80158ea:	6030      	str	r0, [r6, #0]
 80158ec:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 80158f0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80158f2:	60f3      	str	r3, [r6, #12]
 80158f4:	6071      	str	r1, [r6, #4]
 80158f6:	60b2      	str	r2, [r6, #8]
 80158f8:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 80158fc:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8015900:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8015904:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8015908:	ed94 8a75 	vldr	s16, [r4, #468]	; 0x1d4
 801590c:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8015910:	edc3 7a00 	vstr	s15, [r3]
 8015914:	f8cb e000 	str.w	lr, [fp]
 8015918:	f8ca c000 	str.w	ip, [sl]
 801591c:	6030      	str	r0, [r6, #0]
 801591e:	e669      	b.n	80155f4 <iNemoEngine_API_Update+0x174>
 8015920:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 8015788 <iNemoEngine_API_Update+0x308>
 8015924:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8015928:	edc5 8a0d 	vstr	s17, [r5, #52]	; 0x34
 801592c:	b043      	add	sp, #268	; 0x10c
 801592e:	ecbd 8b10 	vpop	{d8-d15}
 8015932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015936:	ae10      	add	r6, sp, #64	; 0x40
 8015938:	e5b0      	b.n	801549c <iNemoEngine_API_Update+0x1c>
 801593a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801593e:	eea7 6a07 	vfma.f32	s12, s14, s14
 8015942:	eea6 6ae6 	vfms.f32	s12, s13, s13
 8015946:	ee29 8a27 	vmul.f32	s16, s18, s15
 801594a:	eea9 6a49 	vfms.f32	s12, s18, s18
 801594e:	eea7 8a26 	vfma.f32	s16, s14, s13
 8015952:	ee16 0a10 	vmov	r0, s12
 8015956:	f7ea fdfb 	bl	8000550 <__aeabi_f2d>
 801595a:	ee78 7a08 	vadd.f32	s15, s16, s16
 801595e:	4602      	mov	r2, r0
 8015960:	460b      	mov	r3, r1
 8015962:	ee17 0a90 	vmov	r0, s15
 8015966:	ec43 2b18 	vmov	d8, r2, r3
 801596a:	f7ea fdf1 	bl	8000550 <__aeabi_f2d>
 801596e:	eeb0 1a48 	vmov.f32	s2, s16
 8015972:	eef0 1a68 	vmov.f32	s3, s17
 8015976:	ec41 0b10 	vmov	d0, r0, r1
 801597a:	f003 fc7b 	bl	8019274 <atan2>
 801597e:	a346      	add	r3, pc, #280	; (adr r3, 8015a98 <iNemoEngine_API_Update+0x618>)
 8015980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015984:	ec51 0b10 	vmov	r0, r1, d0
 8015988:	f7ea fe3a 	bl	8000600 <__aeabi_dmul>
 801598c:	2200      	movs	r2, #0
 801598e:	4b44      	ldr	r3, [pc, #272]	; (8015aa0 <iNemoEngine_API_Update+0x620>)
 8015990:	f7ea fc7e 	bl	8000290 <__aeabi_dsub>
 8015994:	f7eb f8e4 	bl	8000b60 <__aeabi_d2f>
 8015998:	ee08 0a90 	vmov	s17, r0
 801599c:	e6a0      	b.n	80156e0 <iNemoEngine_API_Update+0x260>
 801599e:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80159a2:	eea7 6a07 	vfma.f32	s12, s14, s14
 80159a6:	eea6 6ae6 	vfms.f32	s12, s13, s13
 80159aa:	ee29 8a27 	vmul.f32	s16, s18, s15
 80159ae:	eea9 6a49 	vfms.f32	s12, s18, s18
 80159b2:	eea7 8a26 	vfma.f32	s16, s14, s13
 80159b6:	ee16 0a10 	vmov	r0, s12
 80159ba:	f7ea fdc9 	bl	8000550 <__aeabi_f2d>
 80159be:	ee78 7a08 	vadd.f32	s15, s16, s16
 80159c2:	4602      	mov	r2, r0
 80159c4:	460b      	mov	r3, r1
 80159c6:	ee17 0a90 	vmov	r0, s15
 80159ca:	ec43 2b18 	vmov	d8, r2, r3
 80159ce:	f7ea fdbf 	bl	8000550 <__aeabi_f2d>
 80159d2:	eeb0 1a48 	vmov.f32	s2, s16
 80159d6:	eef0 1a68 	vmov.f32	s3, s17
 80159da:	ec41 0b10 	vmov	d0, r0, r1
 80159de:	f003 fc49 	bl	8019274 <atan2>
 80159e2:	a32d      	add	r3, pc, #180	; (adr r3, 8015a98 <iNemoEngine_API_Update+0x618>)
 80159e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e8:	ec51 0b10 	vmov	r0, r1, d0
 80159ec:	f7ea fe08 	bl	8000600 <__aeabi_dmul>
 80159f0:	2200      	movs	r2, #0
 80159f2:	4b2b      	ldr	r3, [pc, #172]	; (8015aa0 <iNemoEngine_API_Update+0x620>)
 80159f4:	f7ea fc4e 	bl	8000294 <__adddf3>
 80159f8:	f7eb f8b2 	bl	8000b60 <__aeabi_d2f>
 80159fc:	ee08 0a90 	vmov	s17, r0
 8015a00:	e66e      	b.n	80156e0 <iNemoEngine_API_Update+0x260>
 8015a02:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	dd5c      	ble.n	8015ac4 <iNemoEngine_API_Update+0x644>
 8015a0a:	3b01      	subs	r3, #1
 8015a0c:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 8015a10:	e566      	b.n	80154e0 <iNemoEngine_API_Update+0x60>
 8015a12:	8863      	ldrh	r3, [r4, #2]
 8015a14:	eddf 0a29 	vldr	s1, [pc, #164]	; 8015abc <iNemoEngine_API_Update+0x63c>
 8015a18:	1e5a      	subs	r2, r3, #1
 8015a1a:	2a12      	cmp	r2, #18
 8015a1c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8015aa4 <iNemoEngine_API_Update+0x624>
 8015a20:	f67f af19 	bls.w	8015856 <iNemoEngine_API_Update+0x3d6>
 8015a24:	eddf 5a20 	vldr	s11, [pc, #128]	; 8015aa8 <iNemoEngine_API_Update+0x628>
 8015a28:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8015a2c:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 8015a30:	ee34 4a25 	vadd.f32	s8, s8, s11
 8015a34:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8015a38:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8015a3c:	ed9f 3a1b 	vldr	s6, [pc, #108]	; 8015aac <iNemoEngine_API_Update+0x62c>
 8015a40:	ee64 4aa6 	vmul.f32	s9, s9, s13
 8015a44:	eec2 3a84 	vdiv.f32	s7, s5, s8
 8015a48:	ee65 6a26 	vmul.f32	s13, s10, s13
 8015a4c:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015a50:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015a54:	2300      	movs	r3, #0
 8015a56:	edcd 7a23 	vstr	s15, [sp, #140]	; 0x8c
 8015a5a:	edcd 3a20 	vstr	s7, [sp, #128]	; 0x80
 8015a5e:	edcd 4a21 	vstr	s9, [sp, #132]	; 0x84
 8015a62:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 8015a66:	ed8d 6a24 	vstr	s12, [sp, #144]	; 0x90
 8015a6a:	ed8d 7a25 	vstr	s14, [sp, #148]	; 0x94
 8015a6e:	8063      	strh	r3, [r4, #2]
 8015a70:	e71a      	b.n	80158a8 <iNemoEngine_API_Update+0x428>
 8015a72:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8015a76:	edd4 0a05 	vldr	s1, [r4, #20]
 8015a7a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015a7e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8015ab0 <iNemoEngine_API_Update+0x630>
 8015a82:	e6e3      	b.n	801584c <iNemoEngine_API_Update+0x3cc>
 8015a84:	edd4 0a05 	vldr	s1, [r4, #20]
 8015a88:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8015ab4 <iNemoEngine_API_Update+0x634>
 8015a8c:	e6de      	b.n	801584c <iNemoEngine_API_Update+0x3cc>
 8015a8e:	eddf 5a0a 	vldr	s11, [pc, #40]	; 8015ab8 <iNemoEngine_API_Update+0x638>
 8015a92:	e6ef      	b.n	8015874 <iNemoEngine_API_Update+0x3f4>
 8015a94:	f3af 8000 	nop.w
 8015a98:	20000000 	.word	0x20000000
 8015a9c:	404ca5dc 	.word	0x404ca5dc
 8015aa0:	40568000 	.word	0x40568000
 8015aa4:	3a83126f 	.word	0x3a83126f
 8015aa8:	358637bd 	.word	0x358637bd
 8015aac:	3f333333 	.word	0x3f333333
 8015ab0:	3727c5ac 	.word	0x3727c5ac
 8015ab4:	3ac49ba6 	.word	0x3ac49ba6
 8015ab8:	3e4ccccd 	.word	0x3e4ccccd
 8015abc:	3dcccccd 	.word	0x3dcccccd
 8015ac0:	00000000 	.word	0x00000000
 8015ac4:	f504 6ccb 	add.w	ip, r4, #1624	; 0x658
 8015ac8:	ed9c 2a00 	vldr	s4, [ip]
 8015acc:	f204 6c4c 	addw	ip, r4, #1612	; 0x64c
 8015ad0:	eddc 9a00 	vldr	s19, [ip]
 8015ad4:	f504 6cc6 	add.w	ip, r4, #1584	; 0x630
 8015ad8:	ed9c 9a00 	vldr	s18, [ip]
 8015adc:	f204 6c3c 	addw	ip, r4, #1596	; 0x63c
 8015ae0:	ed9c 3a00 	vldr	s6, [ip]
 8015ae4:	f504 6ccc 	add.w	ip, r4, #1632	; 0x660
 8015ae8:	ed9c 6a00 	vldr	s12, [ip]
 8015aec:	f204 6c54 	addw	ip, r4, #1620	; 0x654
 8015af0:	eddc 0a00 	vldr	s1, [ip]
 8015af4:	f504 6b9e 	add.w	fp, r4, #1264	; 0x4f0
 8015af8:	eddb 7a00 	vldr	s15, [fp]
 8015afc:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 8015b00:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 8015b04:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8015b08:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8015b0c:	ed93 fa00 	vldr	s30, [r3]
 8015b10:	edd7 fa00 	vldr	s31, [r7]
 8015b14:	edd0 6a00 	vldr	s13, [r0]
 8015b18:	edd2 ba00 	vldr	s23, [r2]
 8015b1c:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8015b20:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 8015b24:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8015b28:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 8015b2c:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8015b30:	ed92 da00 	vldr	s26, [r2]
 8015b34:	ed91 ea00 	vldr	s28, [r1]
 8015b38:	ed97 7a00 	vldr	s14, [r7]
 8015b3c:	edd0 da00 	vldr	s27, [r0]
 8015b40:	ed93 5a00 	vldr	s10, [r3]
 8015b44:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 8015b48:	f204 47dc 	addw	r7, r4, #1244	; 0x4dc
 8015b4c:	f504 609d 	add.w	r0, r4, #1256	; 0x4e8
 8015b50:	f504 6298 	add.w	r2, r4, #1216	; 0x4c0
 8015b54:	f204 43cc 	addw	r3, r4, #1228	; 0x4cc
 8015b58:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 8015b5c:	ed91 ba00 	vldr	s22, [r1]
 8015b60:	edd7 aa00 	vldr	s21, [r7]
 8015b64:	ed90 1a00 	vldr	s2, [r0]
 8015b68:	ed92 aa00 	vldr	s20, [r2]
 8015b6c:	edd3 2a00 	vldr	s5, [r3]
 8015b70:	edcd 0a03 	vstr	s1, [sp, #12]
 8015b74:	f204 41b4 	addw	r1, r4, #1204	; 0x4b4
 8015b78:	eddc 0a00 	vldr	s1, [ip]
 8015b7c:	f204 77a4 	addw	r7, r4, #1956	; 0x7a4
 8015b80:	f504 60f9 	add.w	r0, r4, #1992	; 0x7c8
 8015b84:	f504 62f5 	add.w	r2, r4, #1960	; 0x7a8
 8015b88:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 8015b8c:	f204 4ae4 	addw	sl, r4, #1252	; 0x4e4
 8015b90:	f204 6924 	addw	r9, r4, #1572	; 0x624
 8015b94:	f504 68c5 	add.w	r8, r4, #1576	; 0x628
 8015b98:	f204 6e34 	addw	lr, r4, #1588	; 0x634
 8015b9c:	f504 6cf3 	add.w	ip, r4, #1944	; 0x798
 8015ba0:	eef8 4a00 	vmov.f32	s9, #128	; 0xc0000000 -2.0
 8015ba4:	edd1 3a00 	vldr	s7, [r1]
 8015ba8:	edd8 ca00 	vldr	s25, [r8]
 8015bac:	ed9c ca00 	vldr	s24, [ip]
 8015bb0:	edcd 7a02 	vstr	s15, [sp, #8]
 8015bb4:	edda 1a00 	vldr	s3, [sl]
 8015bb8:	ed99 4a00 	vldr	s8, [r9]
 8015bbc:	edde 5a00 	vldr	s11, [lr]
 8015bc0:	ed8d 6a04 	vstr	s12, [sp, #16]
 8015bc4:	ed97 6a00 	vldr	s12, [r7]
 8015bc8:	ed90 0a00 	vldr	s0, [r0]
 8015bcc:	edd3 ea00 	vldr	s29, [r3]
 8015bd0:	edd2 7a00 	vldr	s15, [r2]
 8015bd4:	f504 63f8 	add.w	r3, r4, #1984	; 0x7c0
 8015bd8:	ee9d 5a24 	vfnms.f32	s10, s26, s9
 8015bdc:	ee9f 7a24 	vfnms.f32	s14, s30, s9
 8015be0:	eede 7aa4 	vfnms.f32	s15, s29, s9
 8015be4:	eedf 6aa4 	vfnms.f32	s13, s31, s9
 8015be8:	edd3 ea00 	vldr	s29, [r3]
 8015bec:	f204 71bc 	addw	r1, r4, #1980	; 0x7bc
 8015bf0:	ed8d 0a05 	vstr	s0, [sp, #20]
 8015bf4:	f504 62f4 	add.w	r2, r4, #1952	; 0x7a0
 8015bf8:	ed91 0a00 	vldr	s0, [r1]
 8015bfc:	f204 73ac 	addw	r3, r4, #1964	; 0x7ac
 8015c00:	f204 71cc 	addw	r1, r4, #1996	; 0x7cc
 8015c04:	eeb0 fa00 	vmov.f32	s30, #0	; 0x40000000  2.0
 8015c08:	ed92 da00 	vldr	s26, [r2]
 8015c0c:	eedc 5aa4 	vfnms.f32	s11, s25, s9
 8015c10:	ee9c 6a24 	vfnms.f32	s12, s24, s9
 8015c14:	edd3 ca00 	vldr	s25, [r3]
 8015c18:	ed1f ca58 	vldr	s24, [pc, #-352]	; 8015abc <iNemoEngine_API_Update+0x63c>
 8015c1c:	ee77 7aae 	vadd.f32	s15, s15, s29
 8015c20:	ee75 aa2a 	vadd.f32	s21, s10, s21
 8015c24:	edd1 ea00 	vldr	s29, [r1]
 8015c28:	eeda 2a24 	vfnms.f32	s5, s20, s9
 8015c2c:	ee99 3a24 	vfnms.f32	s6, s18, s9
 8015c30:	ed9d 5a03 	vldr	s10, [sp, #12]
 8015c34:	ee76 6a8e 	vadd.f32	s13, s13, s28
 8015c38:	ee37 7a2d 	vadd.f32	s14, s14, s27
 8015c3c:	f204 73c4 	addw	r3, r4, #1988	; 0x7c4
 8015c40:	ee63 3a8c 	vmul.f32	s7, s7, s24
 8015c44:	ee24 4a0c 	vmul.f32	s8, s8, s24
 8015c48:	ee60 0a8c 	vmul.f32	s1, s1, s24
 8015c4c:	ee75 9aa9 	vadd.f32	s19, s11, s19
 8015c50:	ee36 0a00 	vadd.f32	s0, s12, s0
 8015c54:	eedd ca24 	vfnms.f32	s25, s26, s9
 8015c58:	ee33 3a05 	vadd.f32	s6, s6, s10
 8015c5c:	edd3 4a00 	vldr	s9, [r3]
 8015c60:	ed9d 5a05 	vldr	s10, [sp, #20]
 8015c64:	eddd 5a02 	vldr	s11, [sp, #8]
 8015c68:	eeeb 6a8f 	vfma.f32	s13, s23, s30
 8015c6c:	eeab 7a0f 	vfma.f32	s14, s22, s30
 8015c70:	eeee 7a8f 	vfma.f32	s15, s29, s30
 8015c74:	ee72 2aa1 	vadd.f32	s5, s5, s3
 8015c78:	f504 63fa 	add.w	r3, r4, #2000	; 0x7d0
 8015c7c:	ed93 6a00 	vldr	s12, [r3]
 8015c80:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8015c84:	ee24 7a07 	vmul.f32	s14, s8, s14
 8015c88:	eee5 2a8f 	vfma.f32	s5, s11, s30
 8015c8c:	eee1 aa0f 	vfma.f32	s21, s2, s30
 8015c90:	eddd 5a04 	vldr	s11, [sp, #16]
 8015c94:	eee2 9a0f 	vfma.f32	s19, s4, s30
 8015c98:	eea5 0a0f 	vfma.f32	s0, s10, s30
 8015c9c:	ee7c 4aa4 	vadd.f32	s9, s25, s9
 8015ca0:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8015ca4:	eea5 3a8f 	vfma.f32	s6, s11, s30
 8015ca8:	eee6 4a0f 	vfma.f32	s9, s12, s30
 8015cac:	ee6a aaa3 	vmul.f32	s21, s21, s7
 8015cb0:	ee24 6a29 	vmul.f32	s12, s8, s19
 8015cb4:	ee20 5a80 	vmul.f32	s10, s1, s0
 8015cb8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8015cbc:	ee27 7a07 	vmul.f32	s14, s14, s14
 8015cc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015cc4:	ee63 5aa2 	vmul.f32	s11, s7, s5
 8015cc8:	eea6 7a06 	vfma.f32	s14, s12, s12
 8015ccc:	eee5 7a05 	vfma.f32	s15, s10, s10
 8015cd0:	ee24 6a03 	vmul.f32	s12, s8, s6
 8015cd4:	ee60 4aa4 	vmul.f32	s9, s1, s9
 8015cd8:	eeea 6aaa 	vfma.f32	s13, s21, s21
 8015cdc:	eea6 7a06 	vfma.f32	s14, s12, s12
 8015ce0:	eee5 6aa5 	vfma.f32	s13, s11, s11
 8015ce4:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8015ce8:	f9b4 3976 	ldrsh.w	r3, [r4, #2422]	; 0x976
 8015cec:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8015cf0:	eef1 6ac7 	vsqrt.f32	s13, s14
 8015cf4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8015cf8:	ee07 3a90 	vmov	s15, r3
 8015cfc:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8015d00:	1c5a      	adds	r2, r3, #1
 8015d02:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8015d06:	ee05 2a10 	vmov	s10, r2
 8015d0a:	edd7 7a00 	vldr	s15, [r7]
 8015d0e:	f604 1068 	addw	r0, r4, #2408	; 0x968
 8015d12:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8015d16:	edd0 3a00 	vldr	s7, [r0]
 8015d1a:	ed91 4a00 	vldr	s8, [r1]
 8015d1e:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8015d22:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8015d26:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8015d2a:	eef0 7a46 	vmov.f32	s15, s12
 8015d2e:	eee5 6aa3 	vfma.f32	s13, s11, s7
 8015d32:	ee84 6a85 	vdiv.f32	s12, s9, s10
 8015d36:	eea5 7a84 	vfma.f32	s14, s11, s8
 8015d3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015d3e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015d42:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015d46:	b213      	sxth	r3, r2
 8015d48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015d4c:	edc7 7a00 	vstr	s15, [r7]
 8015d50:	edc0 6a00 	vstr	s13, [r0]
 8015d54:	ed81 7a00 	vstr	s14, [r1]
 8015d58:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8015d5c:	f47f abc0 	bne.w	80154e0 <iNemoEngine_API_Update+0x60>
 8015d60:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015d64:	2300      	movs	r3, #0
 8015d66:	2200      	movs	r2, #0
 8015d68:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015d6c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015d70:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015d74:	edc4 6a07 	vstr	s13, [r4, #28]
 8015d78:	ed84 7a08 	vstr	s14, [r4, #32]
 8015d7c:	edc4 7a06 	vstr	s15, [r4, #24]
 8015d80:	603b      	str	r3, [r7, #0]
 8015d82:	6003      	str	r3, [r0, #0]
 8015d84:	600b      	str	r3, [r1, #0]
 8015d86:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 8015d8a:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8015d8e:	f7ff bba7 	b.w	80154e0 <iNemoEngine_API_Update+0x60>
 8015d92:	ed5f 8ab5 	vldr	s17, [pc, #-724]	; 8015ac0 <iNemoEngine_API_Update+0x640>
 8015d96:	e4b2      	b.n	80156fe <iNemoEngine_API_Update+0x27e>

08015d98 <MEMS_getSensorData_I16>:
 8015d98:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8015d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015da0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8015da4:	68c5      	ldr	r5, [r0, #12]
 8015da6:	f10c 33ff 	add.w	r3, ip, #4294967295
 8015daa:	4594      	cmp	ip, r2
 8015dac:	fb04 5313 	mls	r3, r4, r3, r5
 8015db0:	fa1f f982 	uxth.w	r9, r2
 8015db4:	d933      	bls.n	8015e1e <MEMS_getSensorData_I16+0x86>
 8015db6:	ebac 0802 	sub.w	r8, ip, r2
 8015dba:	f8a1 9004 	strh.w	r9, [r1, #4]
 8015dbe:	600b      	str	r3, [r1, #0]
 8015dc0:	fa5f f888 	uxtb.w	r8, r8
 8015dc4:	f1b9 0f00 	cmp.w	r9, #0
 8015dc8:	d001      	beq.n	8015dce <MEMS_getSensorData_I16+0x36>
 8015dca:	46ce      	mov	lr, r9
 8015dcc:	e030      	b.n	8015e30 <MEMS_getSensorData_I16+0x98>
 8015dce:	ebac 0309 	sub.w	r3, ip, r9
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	8103      	strh	r3, [r0, #8]
 8015dd6:	f1b8 0f00 	cmp.w	r8, #0
 8015dda:	d01e      	beq.n	8015e1a <MEMS_getSensorData_I16+0x82>
 8015ddc:	2400      	movs	r4, #0
 8015dde:	6903      	ldr	r3, [r0, #16]
 8015de0:	f108 38ff 	add.w	r8, r8, #4294967295
 8015de4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8015de8:	f103 000a 	add.w	r0, r3, #10
 8015dec:	fa5f f888 	uxtb.w	r8, r8
 8015df0:	3202      	adds	r2, #2
 8015df2:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8015df6:	3302      	adds	r3, #2
 8015df8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8015dfc:	3308      	adds	r3, #8
 8015dfe:	f803 1c0a 	strb.w	r1, [r3, #-10]
 8015e02:	6811      	ldr	r1, [r2, #0]
 8015e04:	3208      	adds	r2, #8
 8015e06:	f843 1c08 	str.w	r1, [r3, #-8]
 8015e0a:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 8015e0e:	f823 1c04 	strh.w	r1, [r3, #-4]
 8015e12:	4283      	cmp	r3, r0
 8015e14:	f802 4c0a 	strb.w	r4, [r2, #-10]
 8015e18:	d1ee      	bne.n	8015df8 <MEMS_getSensorData_I16+0x60>
 8015e1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015e1e:	f8a1 c004 	strh.w	ip, [r1, #4]
 8015e22:	600b      	str	r3, [r1, #0]
 8015e24:	f1bc 0f00 	cmp.w	ip, #0
 8015e28:	d01c      	beq.n	8015e64 <MEMS_getSensorData_I16+0xcc>
 8015e2a:	46e6      	mov	lr, ip
 8015e2c:	f04f 0800 	mov.w	r8, #0
 8015e30:	2300      	movs	r3, #0
 8015e32:	688e      	ldr	r6, [r1, #8]
 8015e34:	6905      	ldr	r5, [r0, #16]
 8015e36:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 8015e3a:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8015e3e:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8015e42:	f8d4 7002 	ldr.w	r7, [r4, #2]
 8015e46:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8015e4a:	f8c1 7002 	str.w	r7, [r1, #2]
 8015e4e:	3301      	adds	r3, #1
 8015e50:	88e7      	ldrh	r7, [r4, #6]
 8015e52:	b2dc      	uxtb	r4, r3
 8015e54:	4574      	cmp	r4, lr
 8015e56:	4623      	mov	r3, r4
 8015e58:	80cf      	strh	r7, [r1, #6]
 8015e5a:	d3ec      	bcc.n	8015e36 <MEMS_getSensorData_I16+0x9e>
 8015e5c:	45cc      	cmp	ip, r9
 8015e5e:	d8b6      	bhi.n	8015dce <MEMS_getSensorData_I16+0x36>
 8015e60:	2300      	movs	r3, #0
 8015e62:	e7b7      	b.n	8015dd4 <MEMS_getSensorData_I16+0x3c>
 8015e64:	f8a0 c008 	strh.w	ip, [r0, #8]
 8015e68:	e7d7      	b.n	8015e1a <MEMS_getSensorData_I16+0x82>
 8015e6a:	bf00      	nop

08015e6c <MEMS_SolveLinearEq>:
 8015e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e70:	ed2d 8b0a 	vpush	{d8-d12}
 8015e74:	2400      	movs	r4, #0
 8015e76:	461e      	mov	r6, r3
 8015e78:	2300      	movs	r3, #0
 8015e7a:	460d      	mov	r5, r1
 8015e7c:	b0a9      	sub	sp, #164	; 0xa4
 8015e7e:	6033      	str	r3, [r6, #0]
 8015e80:	4621      	mov	r1, r4
 8015e82:	6014      	str	r4, [r2, #0]
 8015e84:	6054      	str	r4, [r2, #4]
 8015e86:	6094      	str	r4, [r2, #8]
 8015e88:	60d4      	str	r4, [r2, #12]
 8015e8a:	4617      	mov	r7, r2
 8015e8c:	4680      	mov	r8, r0
 8015e8e:	2240      	movs	r2, #64	; 0x40
 8015e90:	a808      	add	r0, sp, #32
 8015e92:	eeb0 8a40 	vmov.f32	s16, s0
 8015e96:	e9cd 4400 	strd	r4, r4, [sp]
 8015e9a:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8015e9e:	f004 ff14 	bl	801acca <memset>
 8015ea2:	4621      	mov	r1, r4
 8015ea4:	2240      	movs	r2, #64	; 0x40
 8015ea6:	a818      	add	r0, sp, #96	; 0x60
 8015ea8:	f004 ff0f 	bl	801acca <memset>
 8015eac:	ed95 3a03 	vldr	s6, [r5, #12]
 8015eb0:	eddf 7ae9 	vldr	s15, [pc, #932]	; 8016258 <MEMS_SolveLinearEq+0x3ec>
 8015eb4:	eeb4 3ae7 	vcmpe.f32	s6, s15
 8015eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ebc:	d478      	bmi.n	8015fb0 <MEMS_SolveLinearEq+0x144>
 8015ebe:	f898 1000 	ldrb.w	r1, [r8]
 8015ec2:	f898 2001 	ldrb.w	r2, [r8, #1]
 8015ec6:	f998 3002 	ldrsb.w	r3, [r8, #2]
 8015eca:	4291      	cmp	r1, r2
 8015ecc:	d076      	beq.n	8015fbc <MEMS_SolveLinearEq+0x150>
 8015ece:	3301      	adds	r3, #1
 8015ed0:	1a58      	subs	r0, r3, r1
 8015ed2:	fb90 f3f2 	sdiv	r3, r0, r2
 8015ed6:	fb02 0313 	mls	r3, r2, r3, r0
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	bfb8      	it	lt
 8015ede:	189b      	addlt	r3, r3, r2
 8015ee0:	b21b      	sxth	r3, r3
 8015ee2:	2900      	cmp	r1, #0
 8015ee4:	f000 81d1 	beq.w	801628a <MEMS_SolveLinearEq+0x41e>
 8015ee8:	edd5 3a00 	vldr	s7, [r5]
 8015eec:	ed95 4a01 	vldr	s8, [r5, #4]
 8015ef0:	edd5 4a02 	vldr	s9, [r5, #8]
 8015ef4:	eddf 2ad9 	vldr	s5, [pc, #868]	; 801625c <MEMS_SolveLinearEq+0x3f0>
 8015ef8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8015efc:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8015f00:	3901      	subs	r1, #1
 8015f02:	b2c9      	uxtb	r1, r1
 8015f04:	3101      	adds	r1, #1
 8015f06:	4419      	add	r1, r3
 8015f08:	fb93 f4f2 	sdiv	r4, r3, r2
 8015f0c:	fb02 3414 	mls	r4, r2, r4, r3
 8015f10:	b2e4      	uxtb	r4, r4
 8015f12:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8015f16:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 8015f1a:	ee07 0a10 	vmov	s14, r0
 8015f1e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8015f22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f26:	ee06 0a90 	vmov	s13, r0
 8015f2a:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8015f2e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015f32:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015f36:	ee07 0a90 	vmov	s15, r0
 8015f3a:	ee37 6a44 	vsub.f32	s12, s14, s8
 8015f3e:	ee66 6a88 	vmul.f32	s13, s13, s16
 8015f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015f46:	ee36 5ae3 	vsub.f32	s10, s13, s7
 8015f4a:	ee26 6a06 	vmul.f32	s12, s12, s12
 8015f4e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015f52:	eea5 6a05 	vfma.f32	s12, s10, s10
 8015f56:	ee37 5ae4 	vsub.f32	s10, s15, s9
 8015f5a:	eea5 6a05 	vfma.f32	s12, s10, s10
 8015f5e:	eeb4 6ae2 	vcmpe.f32	s12, s5
 8015f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f66:	d531      	bpl.n	8015fcc <MEMS_SolveLinearEq+0x160>
 8015f68:	3301      	adds	r3, #1
 8015f6a:	4299      	cmp	r1, r3
 8015f6c:	d1cc      	bne.n	8015f08 <MEMS_SolveLinearEq+0x9c>
 8015f6e:	eef0 7a65 	vmov.f32	s15, s11
 8015f72:	2101      	movs	r1, #1
 8015f74:	2200      	movs	r2, #0
 8015f76:	4608      	mov	r0, r1
 8015f78:	e006      	b.n	8015f88 <MEMS_SolveLinearEq+0x11c>
 8015f7a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8015f7e:	ac28      	add	r4, sp, #160	; 0xa0
 8015f80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015f84:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 8015f88:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8015f8c:	3001      	adds	r0, #1
 8015f8e:	ac28      	add	r4, sp, #160	; 0xa0
 8015f90:	b2c0      	uxtb	r0, r0
 8015f92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015f96:	2804      	cmp	r0, #4
 8015f98:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8015f9c:	4613      	mov	r3, r2
 8015f9e:	d1ec      	bne.n	8015f7a <MEMS_SolveLinearEq+0x10e>
 8015fa0:	1c48      	adds	r0, r1, #1
 8015fa2:	b2c0      	uxtb	r0, r0
 8015fa4:	2804      	cmp	r0, #4
 8015fa6:	d07c      	beq.n	80160a2 <MEMS_SolveLinearEq+0x236>
 8015fa8:	460b      	mov	r3, r1
 8015faa:	460a      	mov	r2, r1
 8015fac:	4601      	mov	r1, r0
 8015fae:	e7e4      	b.n	8015f7a <MEMS_SolveLinearEq+0x10e>
 8015fb0:	2000      	movs	r0, #0
 8015fb2:	b029      	add	sp, #164	; 0xa4
 8015fb4:	ecbd 8b0a 	vpop	{d8-d12}
 8015fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fbc:	1c5a      	adds	r2, r3, #1
 8015fbe:	fb92 f3f1 	sdiv	r3, r2, r1
 8015fc2:	fb01 2313 	mls	r3, r1, r3, r2
 8015fc6:	460a      	mov	r2, r1
 8015fc8:	b21b      	sxth	r3, r3
 8015fca:	e78a      	b.n	8015ee2 <MEMS_SolveLinearEq+0x76>
 8015fcc:	eeb1 5ac6 	vsqrt.f32	s10, s12
 8015fd0:	ee73 6ae6 	vsub.f32	s13, s7, s13
 8015fd4:	ee82 6a05 	vdiv.f32	s12, s4, s10
 8015fd8:	ee34 7a47 	vsub.f32	s14, s8, s14
 8015fdc:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8015fe0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015fe4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015fe8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015fec:	ee33 ca45 	vsub.f32	s24, s6, s10
 8015ff0:	ed9d ba00 	vldr	s22, [sp]
 8015ff4:	eddd ca03 	vldr	s25, [sp, #12]
 8015ff8:	eddd aa08 	vldr	s21, [sp, #32]
 8015ffc:	ed9d aa0a 	vldr	s20, [sp, #40]	; 0x28
 8016000:	eddd ba0b 	vldr	s23, [sp, #44]	; 0x2c
 8016004:	eddd 9a01 	vldr	s19, [sp, #4]
 8016008:	ed9d 9a02 	vldr	s18, [sp, #8]
 801600c:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8016010:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
 8016014:	eddd 0a0f 	vldr	s1, [sp, #60]	; 0x3c
 8016018:	ed9d 1a12 	vldr	s2, [sp, #72]	; 0x48
 801601c:	eddd 1a13 	vldr	s3, [sp, #76]	; 0x4c
 8016020:	ed9d 6a17 	vldr	s12, [sp, #92]	; 0x5c
 8016024:	ee35 5a43 	vsub.f32	s10, s10, s6
 8016028:	eee6 5a87 	vfma.f32	s11, s13, s14
 801602c:	eea6 aaa7 	vfma.f32	s20, s13, s15
 8016030:	eea7 0a27 	vfma.f32	s0, s14, s15
 8016034:	eeac ba26 	vfma.f32	s22, s24, s13
 8016038:	eee6 aaa6 	vfma.f32	s21, s13, s13
 801603c:	eeec 9a07 	vfma.f32	s19, s24, s14
 8016040:	eeac 9a27 	vfma.f32	s18, s24, s15
 8016044:	eee7 8a07 	vfma.f32	s17, s14, s14
 8016048:	eea7 1aa7 	vfma.f32	s2, s15, s15
 801604c:	ee3c 5a85 	vadd.f32	s10, s25, s10
 8016050:	ee7b 6ae6 	vsub.f32	s13, s23, s13
 8016054:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8016058:	ee71 7ae7 	vsub.f32	s15, s3, s15
 801605c:	ee36 6a02 	vadd.f32	s12, s12, s4
 8016060:	3301      	adds	r3, #1
 8016062:	428b      	cmp	r3, r1
 8016064:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 8016068:	ed8d ba00 	vstr	s22, [sp]
 801606c:	ed8d 5a03 	vstr	s10, [sp, #12]
 8016070:	edcd aa08 	vstr	s21, [sp, #32]
 8016074:	ed8d aa0a 	vstr	s20, [sp, #40]	; 0x28
 8016078:	edcd 6a0b 	vstr	s13, [sp, #44]	; 0x2c
 801607c:	edcd 9a01 	vstr	s19, [sp, #4]
 8016080:	ed8d 9a02 	vstr	s18, [sp, #8]
 8016084:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8016088:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
 801608c:	ed8d 7a0f 	vstr	s14, [sp, #60]	; 0x3c
 8016090:	ed8d 1a12 	vstr	s2, [sp, #72]	; 0x48
 8016094:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
 8016098:	ed8d 6a17 	vstr	s12, [sp, #92]	; 0x5c
 801609c:	f47f af34 	bne.w	8015f08 <MEMS_SolveLinearEq+0x9c>
 80160a0:	e765      	b.n	8015f6e <MEMS_SolveLinearEq+0x102>
 80160a2:	2240      	movs	r2, #64	; 0x40
 80160a4:	2100      	movs	r1, #0
 80160a6:	a818      	add	r0, sp, #96	; 0x60
 80160a8:	f004 fe0f 	bl	801acca <memset>
 80160ac:	ab08      	add	r3, sp, #32
 80160ae:	4618      	mov	r0, r3
 80160b0:	2100      	movs	r1, #0
 80160b2:	eddf 5a6b 	vldr	s11, [pc, #428]	; 8016260 <MEMS_SolveLinearEq+0x3f4>
 80160b6:	aa18      	add	r2, sp, #96	; 0x60
 80160b8:	b24c      	sxtb	r4, r1
 80160ba:	2900      	cmp	r1, #0
 80160bc:	f000 80b0 	beq.w	8016220 <MEMS_SolveLinearEq+0x3b4>
 80160c0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80160c4:	eeb0 7ae7 	vabs.f32	s14, s15
 80160c8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80160cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160d0:	f53f af6e 	bmi.w	8015fb0 <MEMS_SolveLinearEq+0x144>
 80160d4:	ed93 7a00 	vldr	s14, [r3]
 80160d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80160dc:	edc2 6a00 	vstr	s13, [r2]
 80160e0:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 80160e4:	2c01      	cmp	r4, #1
 80160e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80160ea:	f000 80a6 	beq.w	801623a <MEMS_SolveLinearEq+0x3ce>
 80160ee:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 80160f2:	eeb0 7ac6 	vabs.f32	s14, s12
 80160f6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80160fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160fe:	f53f af57 	bmi.w	8015fb0 <MEMS_SolveLinearEq+0x144>
 8016102:	ed93 7a01 	vldr	s14, [r3, #4]
 8016106:	ee37 7a67 	vsub.f32	s14, s14, s15
 801610a:	eec7 7a06 	vdiv.f32	s15, s14, s12
 801610e:	edc2 7a01 	vstr	s15, [r2, #4]
 8016112:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8016116:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 801611a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801611e:	2c02      	cmp	r4, #2
 8016120:	eea6 7a26 	vfma.f32	s14, s12, s13
 8016124:	f000 80a2 	beq.w	801626c <MEMS_SolveLinearEq+0x400>
 8016128:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801612c:	eeb0 6ac5 	vabs.f32	s12, s10
 8016130:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8016134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016138:	f53f af3a 	bmi.w	8015fb0 <MEMS_SolveLinearEq+0x144>
 801613c:	ed93 6a02 	vldr	s12, [r3, #8]
 8016140:	ee36 7a47 	vsub.f32	s14, s12, s14
 8016144:	ee87 6a05 	vdiv.f32	s12, s14, s10
 8016148:	ed82 6a02 	vstr	s12, [r2, #8]
 801614c:	ed9d 5a25 	vldr	s10, [sp, #148]	; 0x94
 8016150:	ed9d 7a24 	vldr	s14, [sp, #144]	; 0x90
 8016154:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016158:	eee7 7a26 	vfma.f32	s15, s14, s13
 801615c:	eddd 6a26 	vldr	s13, [sp, #152]	; 0x98
 8016160:	ed90 7a00 	vldr	s14, [r0]
 8016164:	eee6 7a26 	vfma.f32	s15, s12, s13
 8016168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801616c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016170:	f77f af1e 	ble.w	8015fb0 <MEMS_SolveLinearEq+0x144>
 8016174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016178:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801617c:	ed82 7a03 	vstr	s14, [r2, #12]
 8016180:	3101      	adds	r1, #1
 8016182:	2904      	cmp	r1, #4
 8016184:	f103 0310 	add.w	r3, r3, #16
 8016188:	f102 0210 	add.w	r2, r2, #16
 801618c:	f100 0014 	add.w	r0, r0, #20
 8016190:	d192      	bne.n	80160b8 <MEMS_SolveLinearEq+0x24c>
 8016192:	466a      	mov	r2, sp
 8016194:	4639      	mov	r1, r7
 8016196:	a818      	add	r0, sp, #96	; 0x60
 8016198:	f7f9 faea 	bl	800f770 <llEvaluate.constprop.0>
 801619c:	46e8      	mov	r8, sp
 801619e:	2400      	movs	r4, #0
 80161a0:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 80161a4:	eeb2 4a04 	vmov.f32	s8, #36	; 0x41200000  10.0
 80161a8:	4b2e      	ldr	r3, [pc, #184]	; (8016264 <MEMS_SolveLinearEq+0x3f8>)
 80161aa:	f10d 0910 	add.w	r9, sp, #16
 80161ae:	6033      	str	r3, [r6, #0]
 80161b0:	f10d 0b0c 	add.w	fp, sp, #12
 80161b4:	e9cd 4400 	strd	r4, r4, [sp]
 80161b8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80161bc:	466a      	mov	r2, sp
 80161be:	a904      	add	r1, sp, #16
 80161c0:	a818      	add	r0, sp, #96	; 0x60
 80161c2:	f848 ab04 	str.w	sl, [r8], #4
 80161c6:	f7f9 fad3 	bl	800f770 <llEvaluate.constprop.0>
 80161ca:	ecf9 7a01 	vldmia	r9!, {s15}
 80161ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80161d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161d6:	dd1e      	ble.n	8016216 <MEMS_SolveLinearEq+0x3aa>
 80161d8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80161dc:	edd6 7a00 	vldr	s15, [r6]
 80161e0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80161e4:	45c3      	cmp	fp, r8
 80161e6:	edc6 7a00 	vstr	s15, [r6]
 80161ea:	d1e3      	bne.n	80161b4 <MEMS_SolveLinearEq+0x348>
 80161ec:	edd5 7a03 	vldr	s15, [r5, #12]
 80161f0:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80161f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80161f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80161fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016200:	2001      	movs	r0, #1
 8016202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016206:	bf48      	it	mi
 8016208:	edc7 7a03 	vstrmi	s15, [r7, #12]
 801620c:	b029      	add	sp, #164	; 0xa4
 801620e:	ecbd 8b0a 	vpop	{d8-d12}
 8016212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016216:	45c3      	cmp	fp, r8
 8016218:	ed86 4a00 	vstr	s8, [r6]
 801621c:	d1ca      	bne.n	80161b4 <MEMS_SolveLinearEq+0x348>
 801621e:	e7e5      	b.n	80161ec <MEMS_SolveLinearEq+0x380>
 8016220:	edd0 7a00 	vldr	s15, [r0]
 8016224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801622c:	f77f aec0 	ble.w	8015fb0 <MEMS_SolveLinearEq+0x144>
 8016230:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8016234:	ed82 7a00 	vstr	s14, [r2]
 8016238:	e7a2      	b.n	8016180 <MEMS_SolveLinearEq+0x314>
 801623a:	ed90 7a00 	vldr	s14, [r0]
 801623e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016246:	f77f aeb3 	ble.w	8015fb0 <MEMS_SolveLinearEq+0x144>
 801624a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801624e:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8016252:	ed82 7a01 	vstr	s14, [r2, #4]
 8016256:	e793      	b.n	8016180 <MEMS_SolveLinearEq+0x314>
 8016258:	3dcccccd 	.word	0x3dcccccd
 801625c:	2b8cbccb 	.word	0x2b8cbccb
 8016260:	358637bd 	.word	0x358637bd
 8016264:	3dcccccd 	.word	0x3dcccccd
 8016268:	00000000 	.word	0x00000000
 801626c:	edd0 7a00 	vldr	s15, [r0]
 8016270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016278:	f77f ae9a 	ble.w	8015fb0 <MEMS_SolveLinearEq+0x144>
 801627c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016280:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8016284:	ed82 7a02 	vstr	s14, [r2, #8]
 8016288:	e77a      	b.n	8016180 <MEMS_SolveLinearEq+0x314>
 801628a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8016268 <MEMS_SolveLinearEq+0x3fc>
 801628e:	e670      	b.n	8015f72 <MEMS_SolveLinearEq+0x106>

08016290 <MEMS_EIG3>:
 8016290:	edd0 6a02 	vldr	s13, [r0, #8]
 8016294:	ed90 7a01 	vldr	s14, [r0, #4]
 8016298:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801629c:	edd0 3a04 	vldr	s7, [r0, #16]
 80162a0:	eee7 7a07 	vfma.f32	s15, s14, s14
 80162a4:	ed9f 6a51 	vldr	s12, [pc, #324]	; 80163ec <MEMS_EIG3+0x15c>
 80162a8:	eee3 7aa3 	vfma.f32	s15, s7, s7
 80162ac:	eef4 7ac6 	vcmpe.f32	s15, s12
 80162b0:	b510      	push	{r4, lr}
 80162b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b6:	ed2d 8b04 	vpush	{d8-d9}
 80162ba:	460c      	mov	r4, r1
 80162bc:	b08a      	sub	sp, #40	; 0x28
 80162be:	d509      	bpl.n	80162d4 <MEMS_EIG3+0x44>
 80162c0:	6803      	ldr	r3, [r0, #0]
 80162c2:	600b      	str	r3, [r1, #0]
 80162c4:	68c3      	ldr	r3, [r0, #12]
 80162c6:	604b      	str	r3, [r1, #4]
 80162c8:	6943      	ldr	r3, [r0, #20]
 80162ca:	608b      	str	r3, [r1, #8]
 80162cc:	b00a      	add	sp, #40	; 0x28
 80162ce:	ecbd 8b04 	vpop	{d8-d9}
 80162d2:	bd10      	pop	{r4, pc}
 80162d4:	edd0 4a00 	vldr	s9, [r0]
 80162d8:	edd0 5a03 	vldr	s11, [r0, #12]
 80162dc:	ed90 4a05 	vldr	s8, [r0, #20]
 80162e0:	ee34 8aa5 	vadd.f32	s16, s9, s11
 80162e4:	eddf 9a42 	vldr	s19, [pc, #264]	; 80163f0 <MEMS_EIG3+0x160>
 80162e8:	ee38 8a04 	vadd.f32	s16, s16, s8
 80162ec:	ee28 8a29 	vmul.f32	s16, s16, s19
 80162f0:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80162f4:	ee74 4ac8 	vsub.f32	s9, s9, s16
 80162f8:	ee25 5aa5 	vmul.f32	s10, s11, s11
 80162fc:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8016300:	eea4 5aa4 	vfma.f32	s10, s9, s9
 8016304:	eea7 5a83 	vfma.f32	s10, s15, s6
 8016308:	ee34 4a48 	vsub.f32	s8, s8, s16
 801630c:	eef0 7a45 	vmov.f32	s15, s10
 8016310:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80163f4 <MEMS_EIG3+0x164>
 8016314:	eee4 7a04 	vfma.f32	s15, s8, s8
 8016318:	ee67 7a86 	vmul.f32	s15, s15, s12
 801631c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016320:	eef1 8ae7 	vsqrt.f32	s17, s15
 8016324:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8016328:	ee66 6a26 	vmul.f32	s13, s12, s13
 801632c:	ee65 5a86 	vmul.f32	s11, s11, s12
 8016330:	ee26 7a07 	vmul.f32	s14, s12, s14
 8016334:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8016338:	ee26 6a23 	vmul.f32	s12, s12, s7
 801633c:	ee84 5a28 	vdiv.f32	s10, s8, s17
 8016340:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016344:	ee26 4a46 	vnmul.f32	s8, s12, s12
 8016348:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801634c:	eea5 4a85 	vfma.f32	s8, s11, s10
 8016350:	eec4 3aa8 	vdiv.f32	s7, s9, s17
 8016354:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8016358:	eee4 7a23 	vfma.f32	s15, s8, s7
 801635c:	eea6 5a26 	vfma.f32	s10, s12, s13
 8016360:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 8016364:	eee5 7a07 	vfma.f32	s15, s10, s14
 8016368:	eef4 7ae6 	vcmpe.f32	s15, s13
 801636c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016370:	d909      	bls.n	8016386 <MEMS_EIG3+0xf6>
 8016372:	eef4 7ac3 	vcmpe.f32	s15, s6
 8016376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801637a:	db22      	blt.n	80163c2 <MEMS_EIG3+0x132>
 801637c:	eeb0 9a40 	vmov.f32	s18, s0
 8016380:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80163f8 <MEMS_EIG3+0x168>
 8016384:	e003      	b.n	801638e <MEMS_EIG3+0xfe>
 8016386:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801638a:	ed9f 9a1c 	vldr	s18, [pc, #112]	; 80163fc <MEMS_EIG3+0x16c>
 801638e:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8016392:	eef0 6a48 	vmov.f32	s13, s16
 8016396:	eeb0 7a48 	vmov.f32	s14, s16
 801639a:	eee8 6a89 	vfma.f32	s13, s17, s18
 801639e:	eea8 7a80 	vfma.f32	s14, s17, s0
 80163a2:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80163a6:	ee76 7a87 	vadd.f32	s15, s13, s14
 80163aa:	eed8 7a06 	vfnms.f32	s15, s16, s12
 80163ae:	edc4 6a00 	vstr	s13, [r4]
 80163b2:	ed84 7a02 	vstr	s14, [r4, #8]
 80163b6:	edc4 7a01 	vstr	s15, [r4, #4]
 80163ba:	b00a      	add	sp, #40	; 0x28
 80163bc:	ecbd 8b04 	vpop	{d8-d9}
 80163c0:	bd10      	pop	{r4, pc}
 80163c2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80163c6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80163ca:	f002 ff89 	bl	80192e0 <acosf>
 80163ce:	ee60 9a29 	vmul.f32	s19, s0, s19
 80163d2:	eeb0 0a69 	vmov.f32	s0, s19
 80163d6:	f002 fea3 	bl	8019120 <cosf>
 80163da:	eeb0 9a40 	vmov.f32	s18, s0
 80163de:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8016400 <MEMS_EIG3+0x170>
 80163e2:	ee39 0a80 	vadd.f32	s0, s19, s0
 80163e6:	f002 fe9b 	bl	8019120 <cosf>
 80163ea:	e7d0      	b.n	801638e <MEMS_EIG3+0xfe>
 80163ec:	358637bd 	.word	0x358637bd
 80163f0:	3eaaaaab 	.word	0x3eaaaaab
 80163f4:	3e2aaaab 	.word	0x3e2aaaab
 80163f8:	bf000001 	.word	0xbf000001
 80163fc:	3effffff 	.word	0x3effffff
 8016400:	40060a92 	.word	0x40060a92

08016404 <MEMS_runMagCal>:
 8016404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016408:	ed2d 8b06 	vpush	{d8-d10}
 801640c:	2282      	movs	r2, #130	; 0x82
 801640e:	460c      	mov	r4, r1
 8016410:	4681      	mov	r9, r0
 8016412:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8016416:	ab36      	add	r3, sp, #216	; 0xd8
 8016418:	4608      	mov	r0, r1
 801641a:	9103      	str	r1, [sp, #12]
 801641c:	a917      	add	r1, sp, #92	; 0x5c
 801641e:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8016422:	9319      	str	r3, [sp, #100]	; 0x64
 8016424:	f7ff fcb8 	bl	8015d98 <MEMS_getSensorData_I16>
 8016428:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 801642c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016430:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016432:	f10c 31ff 	add.w	r1, ip, #4294967295
 8016436:	9105      	str	r1, [sp, #20]
 8016438:	fb01 2103 	mla	r1, r1, r3, r2
 801643c:	9208      	str	r2, [sp, #32]
 801643e:	9107      	str	r1, [sp, #28]
 8016440:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
 8016444:	f1bc 0f00 	cmp.w	ip, #0
 8016448:	f000 8407 	beq.w	8016c5a <MEMS_runMagCal+0x856>
 801644c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016450:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016454:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8016458:	fb02 f203 	mul.w	r2, r2, r3
 801645c:	31a0      	adds	r1, #160	; 0xa0
 801645e:	4291      	cmp	r1, r2
 8016460:	f080 8401 	bcs.w	8016c66 <MEMS_runMagCal+0x862>
 8016464:	3b00      	subs	r3, #0
 8016466:	bf18      	it	ne
 8016468:	2301      	movne	r3, #1
 801646a:	2200      	movs	r2, #0
 801646c:	e9c9 3301 	strd	r3, r3, [r9, #4]
 8016470:	f889 208c 	strb.w	r2, [r9, #140]	; 0x8c
 8016474:	f8c9 200c 	str.w	r2, [r9, #12]
 8016478:	2300      	movs	r3, #0
 801647a:	22ff      	movs	r2, #255	; 0xff
 801647c:	e9c9 3325 	strd	r3, r3, [r9, #148]	; 0x94
 8016480:	e9c9 3327 	strd	r3, r3, [r9, #156]	; 0x9c
 8016484:	e9c9 3329 	strd	r3, r3, [r9, #164]	; 0xa4
 8016488:	f889 208e 	strb.w	r2, [r9, #142]	; 0x8e
 801648c:	f8bd 7014 	ldrh.w	r7, [sp, #20]
 8016490:	f647 70ff 	movw	r0, #32767	; 0x7fff
 8016494:	2f03      	cmp	r7, #3
 8016496:	9704      	str	r7, [sp, #16]
 8016498:	bf28      	it	cs
 801649a:	2703      	movcs	r7, #3
 801649c:	eddf 7ace 	vldr	s15, [pc, #824]	; 80167d8 <MEMS_runMagCal+0x3d4>
 80164a0:	2200      	movs	r2, #0
 80164a2:	49ca      	ldr	r1, [pc, #808]	; (80167cc <MEMS_runMagCal+0x3c8>)
 80164a4:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 80164a8:	9702      	str	r7, [sp, #8]
 80164aa:	9f03      	ldr	r7, [sp, #12]
 80164ac:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80164b0:	4683      	mov	fp, r0
 80164b2:	4605      	mov	r5, r0
 80164b4:	4613      	mov	r3, r2
 80164b6:	4644      	mov	r4, r8
 80164b8:	468a      	mov	sl, r1
 80164ba:	460e      	mov	r6, r1
 80164bc:	edd7 5a01 	vldr	s11, [r7, #4]
 80164c0:	f8cd c018 	str.w	ip, [sp, #24]
 80164c4:	7827      	ldrb	r7, [r4, #0]
 80164c6:	3301      	adds	r3, #1
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	2f00      	cmp	r7, #0
 80164cc:	d045      	beq.n	801655a <MEMS_runMagCal+0x156>
 80164ce:	f9b4 e004 	ldrsh.w	lr, [r4, #4]
 80164d2:	edd9 6a18 	vldr	s13, [r9, #96]	; 0x60
 80164d6:	ee07 ea10 	vmov	s14, lr
 80164da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80164de:	f9b4 c002 	ldrsh.w	ip, [r4, #2]
 80164e2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80164e6:	ee06 ca90 	vmov	s13, ip
 80164ea:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80164ee:	edd9 6a17 	vldr	s13, [r9, #92]	; 0x5c
 80164f2:	ed99 5a1e 	vldr	s10, [r9, #120]	; 0x78
 80164f6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80164fa:	edd9 6a1a 	vldr	s13, [r9, #104]	; 0x68
 80164fe:	f9b4 7006 	ldrsh.w	r7, [r4, #6]
 8016502:	ee26 6a26 	vmul.f32	s12, s12, s13
 8016506:	ee27 7a05 	vmul.f32	s14, s14, s10
 801650a:	ee06 7a90 	vmov	s13, r7
 801650e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8016512:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016516:	ed99 5a19 	vldr	s10, [r9, #100]	; 0x64
 801651a:	eea6 7a06 	vfma.f32	s14, s12, s12
 801651e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8016522:	ed99 6a22 	vldr	s12, [r9, #136]	; 0x88
 8016526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801652a:	ee26 7a86 	vmul.f32	s14, s13, s12
 801652e:	45f2      	cmp	sl, lr
 8016530:	bfb8      	it	lt
 8016532:	46f2      	movlt	sl, lr
 8016534:	45f3      	cmp	fp, lr
 8016536:	bfa8      	it	ge
 8016538:	46f3      	movge	fp, lr
 801653a:	4566      	cmp	r6, ip
 801653c:	bfb8      	it	lt
 801653e:	4666      	movlt	r6, ip
 8016540:	4565      	cmp	r5, ip
 8016542:	bfa8      	it	ge
 8016544:	4665      	movge	r5, ip
 8016546:	42b9      	cmp	r1, r7
 8016548:	bfb8      	it	lt
 801654a:	4639      	movlt	r1, r7
 801654c:	42b8      	cmp	r0, r7
 801654e:	bfa8      	it	ge
 8016550:	4638      	movge	r0, r7
 8016552:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016556:	3201      	adds	r2, #1
 8016558:	b252      	sxtb	r2, r2
 801655a:	9f02      	ldr	r7, [sp, #8]
 801655c:	3408      	adds	r4, #8
 801655e:	42bb      	cmp	r3, r7
 8016560:	d9b0      	bls.n	80164c4 <MEMS_runMagCal+0xc0>
 8016562:	f8dd c018 	ldr.w	ip, [sp, #24]
 8016566:	459c      	cmp	ip, r3
 8016568:	f240 8768 	bls.w	801743c <MEMS_runMagCal+0x1038>
 801656c:	2400      	movs	r4, #0
 801656e:	9402      	str	r4, [sp, #8]
 8016570:	9c04      	ldr	r4, [sp, #16]
 8016572:	1ae4      	subs	r4, r4, r3
 8016574:	fa13 f484 	uxtah	r4, r3, r4
 8016578:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801657c:	f108 0808 	add.w	r8, r8, #8
 8016580:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8016584:	9406      	str	r4, [sp, #24]
 8016586:	781c      	ldrb	r4, [r3, #0]
 8016588:	1c57      	adds	r7, r2, #1
 801658a:	9704      	str	r7, [sp, #16]
 801658c:	2c00      	cmp	r4, #0
 801658e:	f000 808f 	beq.w	80166b0 <MEMS_runMagCal+0x2ac>
 8016592:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8016596:	f933 7c16 	ldrsh.w	r7, [r3, #-22]
 801659a:	f933 4c1e 	ldrsh.w	r4, [r3, #-30]
 801659e:	f933 2c06 	ldrsh.w	r2, [r3, #-6]
 80165a2:	ebac 0404 	sub.w	r4, ip, r4
 80165a6:	1bd2      	subs	r2, r2, r7
 80165a8:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80165ac:	ee07 2a10 	vmov	s14, r2
 80165b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80165b4:	f9b3 7004 	ldrsh.w	r7, [r3, #4]
 80165b8:	f933 ec14 	ldrsh.w	lr, [r3, #-20]
 80165bc:	f933 4c1c 	ldrsh.w	r4, [r3, #-28]
 80165c0:	f933 2c04 	ldrsh.w	r2, [r3, #-4]
 80165c4:	1b3c      	subs	r4, r7, r4
 80165c6:	eba2 020e 	sub.w	r2, r2, lr
 80165ca:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 80165ce:	ee06 2a90 	vmov	s13, r2
 80165d2:	eeb0 7ac7 	vabs.f32	s14, s14
 80165d6:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 80165da:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80165de:	eeb0 6ac6 	vabs.f32	s12, s12
 80165e2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80165e6:	ee06 7a90 	vmov	s13, r7
 80165ea:	ee37 7a06 	vadd.f32	s14, s14, s12
 80165ee:	ee06 ca10 	vmov	s12, ip
 80165f2:	ed99 5a18 	vldr	s10, [r9, #96]	; 0x60
 80165f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80165fa:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 80165fe:	f933 ec1a 	ldrsh.w	lr, [r3, #-26]
 8016602:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 8016606:	f933 8c12 	ldrsh.w	r8, [r3, #-18]
 801660a:	eba4 0e0e 	sub.w	lr, r4, lr
 801660e:	eba2 0208 	sub.w	r2, r2, r8
 8016612:	eb02 024e 	add.w	r2, r2, lr, lsl #1
 8016616:	eef8 4ac6 	vcvt.f32.s32	s9, s12
 801661a:	ee06 2a10 	vmov	s12, r2
 801661e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8016622:	ed99 5a17 	vldr	s10, [r9, #92]	; 0x5c
 8016626:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801662a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801662e:	ed99 4a1e 	vldr	s8, [r9, #120]	; 0x78
 8016632:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8016636:	ed99 5a1a 	vldr	s10, [r9, #104]	; 0x68
 801663a:	eeb0 6ac6 	vabs.f32	s12, s12
 801663e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016642:	ee66 6a84 	vmul.f32	s13, s13, s8
 8016646:	ee64 4a85 	vmul.f32	s9, s9, s10
 801664a:	ee05 4a10 	vmov	s10, r4
 801664e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8016652:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016656:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801665a:	ed99 4a19 	vldr	s8, [r9, #100]	; 0x64
 801665e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8016662:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8016666:	ee35 6a44 	vsub.f32	s12, s10, s8
 801666a:	ed99 5a22 	vldr	s10, [r9, #136]	; 0x88
 801666e:	4566      	cmp	r6, ip
 8016670:	bfb8      	it	lt
 8016672:	4666      	movlt	r6, ip
 8016674:	4565      	cmp	r5, ip
 8016676:	bfa8      	it	ge
 8016678:	4665      	movge	r5, ip
 801667a:	45ba      	cmp	sl, r7
 801667c:	bfb8      	it	lt
 801667e:	46ba      	movlt	sl, r7
 8016680:	45bb      	cmp	fp, r7
 8016682:	bfa8      	it	ge
 8016684:	46bb      	movge	fp, r7
 8016686:	42a1      	cmp	r1, r4
 8016688:	bfb8      	it	lt
 801668a:	4621      	movlt	r1, r4
 801668c:	42a0      	cmp	r0, r4
 801668e:	bfa8      	it	ge
 8016690:	4620      	movge	r0, r4
 8016692:	ee17 4a10 	vmov	r4, s14
 8016696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801669a:	ee66 6a05 	vmul.f32	s13, s12, s10
 801669e:	9a02      	ldr	r2, [sp, #8]
 80166a0:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80166a4:	42a2      	cmp	r2, r4
 80166a6:	bf38      	it	cc
 80166a8:	4622      	movcc	r2, r4
 80166aa:	9202      	str	r2, [sp, #8]
 80166ac:	f99d 2010 	ldrsb.w	r2, [sp, #16]
 80166b0:	9c06      	ldr	r4, [sp, #24]
 80166b2:	3308      	adds	r3, #8
 80166b4:	429c      	cmp	r4, r3
 80166b6:	f47f af66 	bne.w	8016586 <MEMS_runMagCal+0x182>
 80166ba:	2a00      	cmp	r2, #0
 80166bc:	f000 82e0 	beq.w	8016c80 <MEMS_runMagCal+0x87c>
 80166c0:	f5b6 4f80 	cmp.w	r6, #16384	; 0x4000
 80166c4:	f280 82db 	bge.w	8016c7e <MEMS_runMagCal+0x87a>
 80166c8:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 80166cc:	f2c0 82d7 	blt.w	8016c7e <MEMS_runMagCal+0x87a>
 80166d0:	f5ba 4f80 	cmp.w	sl, #16384	; 0x4000
 80166d4:	f280 82d3 	bge.w	8016c7e <MEMS_runMagCal+0x87a>
 80166d8:	f51b 4f80 	cmn.w	fp, #16384	; 0x4000
 80166dc:	f2c0 82cf 	blt.w	8016c7e <MEMS_runMagCal+0x87a>
 80166e0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80166e4:	f280 82cb 	bge.w	8016c7e <MEMS_runMagCal+0x87a>
 80166e8:	f510 4f80 	cmn.w	r0, #16384	; 0x4000
 80166ec:	f2c0 82c7 	blt.w	8016c7e <MEMS_runMagCal+0x87a>
 80166f0:	1b75      	subs	r5, r6, r5
 80166f2:	ebaa 0b0b 	sub.w	fp, sl, fp
 80166f6:	455d      	cmp	r5, fp
 80166f8:	462b      	mov	r3, r5
 80166fa:	bfb8      	it	lt
 80166fc:	465b      	movlt	r3, fp
 80166fe:	ee07 2a10 	vmov	s14, r2
 8016702:	1a09      	subs	r1, r1, r0
 8016704:	428b      	cmp	r3, r1
 8016706:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 801670a:	bfb8      	it	lt
 801670c:	460b      	movlt	r3, r1
 801670e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016712:	ee87 5aa6 	vdiv.f32	s10, s15, s13
 8016716:	ee87 6a25 	vdiv.f32	s12, s14, s11
 801671a:	ee07 3a90 	vmov	s15, r3
 801671e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80167d0 <MEMS_runMagCal+0x3cc>
 8016722:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016726:	ee26 7a07 	vmul.f32	s14, s12, s14
 801672a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801672e:	eef1 7ac5 	vsqrt.f32	s15, s10
 8016732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016736:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801673a:	f100 82a0 	bmi.w	8016c7e <MEMS_runMagCal+0x87a>
 801673e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8016742:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016746:	ed9f 5a23 	vldr	s10, [pc, #140]	; 80167d4 <MEMS_runMagCal+0x3d0>
 801674a:	ee67 5a25 	vmul.f32	s11, s14, s11
 801674e:	eef4 5ac5 	vcmpe.f32	s11, s10
 8016752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016756:	f300 8292 	bgt.w	8016c7e <MEMS_runMagCal+0x87a>
 801675a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801675e:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016762:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8016766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801676a:	f301 81ce 	bgt.w	8017b0a <MEMS_runMagCal+0x1706>
 801676e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8016772:	ee26 7a07 	vmul.f32	s14, s12, s14
 8016776:	eef4 6ac7 	vcmpe.f32	s13, s14
 801677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801677e:	f340 8557 	ble.w	8017230 <MEMS_runMagCal+0xe2c>
 8016782:	ee07 5a10 	vmov	s14, r5
 8016786:	ee36 6a06 	vadd.f32	s12, s12, s12
 801678a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801678e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8016792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016796:	f340 854b 	ble.w	8017230 <MEMS_runMagCal+0xe2c>
 801679a:	ee07 ba10 	vmov	s14, fp
 801679e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80167a2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80167a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167aa:	f140 8541 	bpl.w	8017230 <MEMS_runMagCal+0xe2c>
 80167ae:	ee07 1a10 	vmov	s14, r1
 80167b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80167b6:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80167ba:	2300      	movs	r3, #0
 80167bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c0:	9304      	str	r3, [sp, #16]
 80167c2:	bf48      	it	mi
 80167c4:	2301      	movmi	r3, #1
 80167c6:	9309      	str	r3, [sp, #36]	; 0x24
 80167c8:	f000 bd35 	b.w	8017236 <MEMS_runMagCal+0xe32>
 80167cc:	ffff8000 	.word	0xffff8000
 80167d0:	43020000 	.word	0x43020000
 80167d4:	447a0000 	.word	0x447a0000
 80167d8:	00000000 	.word	0x00000000
 80167dc:	41f00001 	.word	0x41f00001
 80167e0:	400ccccd 	.word	0x400ccccd
 80167e4:	3dcccccd 	.word	0x3dcccccd
 80167e8:	423c0000 	.word	0x423c0000
 80167ec:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 80167d8 <MEMS_runMagCal+0x3d4>
 80167f0:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80167dc <MEMS_runMagCal+0x3d8>
 80167f4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80167f8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80167fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016800:	dc10      	bgt.n	8016824 <MEMS_runMagCal+0x420>
 8016802:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80167e0 <MEMS_runMagCal+0x3dc>
 8016806:	eef4 7ac7 	vcmpe.f32	s15, s14
 801680a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801680e:	dc09      	bgt.n	8016824 <MEMS_runMagCal+0x420>
 8016810:	ed96 9a03 	vldr	s18, [r6, #12]
 8016814:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 80167e4 <MEMS_runMagCal+0x3e0>
 8016818:	eeb4 9ae7 	vcmpe.f32	s18, s15
 801681c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016820:	f201 850e 	bhi.w	8018240 <MEMS_runMagCal+0x1e3c>
 8016824:	ed5f 6a10 	vldr	s13, [pc, #-64]	; 80167e8 <MEMS_runMagCal+0x3e4>
 8016828:	ed96 6a03 	vldr	s12, [r6, #12]
 801682c:	2300      	movs	r3, #0
 801682e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8016832:	ed96 4a01 	vldr	s8, [r6, #4]
 8016836:	ed96 6a00 	vldr	s12, [r6]
 801683a:	edd6 4a02 	vldr	s9, [r6, #8]
 801683e:	ac2e      	add	r4, sp, #184	; 0xb8
 8016840:	e9c4 3300 	strd	r3, r3, [r4]
 8016844:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8016848:	60a3      	str	r3, [r4, #8]
 801684a:	61a3      	str	r3, [r4, #24]
 801684c:	eeb0 7a66 	vmov.f32	s14, s13
 8016850:	edc6 6a06 	vstr	s13, [r6, #24]
 8016854:	eeb0 5a66 	vmov.f32	s10, s13
 8016858:	eec6 5a08 	vdiv.f32	s11, s12, s16
 801685c:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8016860:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
 8016864:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8016868:	ee84 6a08 	vdiv.f32	s12, s8, s16
 801686c:	eec4 6a88 	vdiv.f32	s13, s9, s16
 8016870:	4ade      	ldr	r2, [pc, #888]	; (8016bec <MEMS_runMagCal+0x7e8>)
 8016872:	9211      	str	r2, [sp, #68]	; 0x44
 8016874:	eec7 4a05 	vdiv.f32	s9, s14, s10
 8016878:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 801687c:	ee72 2ae4 	vsub.f32	s5, s5, s9
 8016880:	ed9f 5adb 	vldr	s10, [pc, #876]	; 8016bf0 <MEMS_runMagCal+0x7ec>
 8016884:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8016888:	eddf 4ada 	vldr	s9, [pc, #872]	; 8016bf4 <MEMS_runMagCal+0x7f0>
 801688c:	eeb0 5ac5 	vabs.f32	s10, s10
 8016890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016894:	eeb4 5ae4 	vcmpe.f32	s10, s9
 8016898:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801689c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168a0:	eeb0 7ac7 	vabs.f32	s14, s14
 80168a4:	f101 84c2 	bmi.w	801822c <MEMS_runMagCal+0x1e28>
 80168a8:	eddf 7ad3 	vldr	s15, [pc, #844]	; 8016bf8 <MEMS_runMagCal+0x7f4>
 80168ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80168b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168b4:	f281 8413 	bge.w	80180de <MEMS_runMagCal+0x1cda>
 80168b8:	eddf 7ad0 	vldr	s15, [pc, #832]	; 8016bfc <MEMS_runMagCal+0x7f8>
 80168bc:	eef4 2ae7 	vcmpe.f32	s5, s15
 80168c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168c4:	f101 840b 	bmi.w	80180de <MEMS_runMagCal+0x1cda>
 80168c8:	eddd 7a07 	vldr	s15, [sp, #28]
 80168cc:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8016c00 <MEMS_runMagCal+0x7fc>
 80168d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168d4:	fef8 5a65 	vrinta.f32	s11, s11
 80168d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80168dc:	feb8 6a46 	vrinta.f32	s12, s12
 80168e0:	fef8 6a66 	vrinta.f32	s13, s13
 80168e4:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 80168e8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80168ec:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 80168f0:	fef8 7a67 	vrinta.f32	s15, s15
 80168f4:	ee16 5a90 	vmov	r5, s13
 80168f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80168fc:	ee15 2a90 	vmov	r2, s11
 8016900:	ee16 0a10 	vmov	r0, s12
 8016904:	f10d 0b4c 	add.w	fp, sp, #76	; 0x4c
 8016908:	af0f      	add	r7, sp, #60	; 0x3c
 801690a:	edc9 7a01 	vstr	s15, [r9, #4]
 801690e:	ab10      	add	r3, sp, #64	; 0x40
 8016910:	9700      	str	r7, [sp, #0]
 8016912:	eeb0 0a48 	vmov.f32	s0, s16
 8016916:	f8ab 2000 	strh.w	r2, [fp]
 801691a:	f8ab 0002 	strh.w	r0, [fp, #2]
 801691e:	f8ab 5004 	strh.w	r5, [fp, #4]
 8016922:	4659      	mov	r1, fp
 8016924:	ee1a 0a90 	vmov	r0, s21
 8016928:	aa2d      	add	r2, sp, #180	; 0xb4
 801692a:	f7f9 f82b 	bl	800f984 <getMagStats.constprop.0>
 801692e:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 8016932:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8016c04 <MEMS_runMagCal+0x800>
 8016936:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 801693a:	005b      	lsls	r3, r3, #1
 801693c:	ee07 3a90 	vmov	s15, r3
 8016940:	ee07 0a10 	vmov	s14, r0
 8016944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016948:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801694c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016958:	f899 508c 	ldrb.w	r5, [r9, #140]	; 0x8c
 801695c:	dc0f      	bgt.n	801697e <MEMS_runMagCal+0x57a>
 801695e:	ed97 7a00 	vldr	s14, [r7]
 8016962:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8016966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801696a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801696e:	bfc9      	itett	gt
 8016970:	f899 3040 	ldrbgt.w	r3, [r9, #64]	; 0x40
 8016974:	2301      	movle	r3, #1
 8016976:	fab3 f383 	clzgt	r3, r3
 801697a:	095b      	lsrgt	r3, r3, #5
 801697c:	9304      	str	r3, [sp, #16]
 801697e:	edd7 4a00 	vldr	s9, [r7]
 8016982:	ee68 4aa4 	vmul.f32	s9, s17, s9
 8016986:	ed9f 5aa0 	vldr	s10, [pc, #640]	; 8016c08 <MEMS_runMagCal+0x804>
 801698a:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 801698e:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8016992:	eec4 5aa2 	vdiv.f32	s11, s9, s5
 8016996:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801699a:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 801699e:	ee66 6a85 	vmul.f32	s13, s13, s10
 80169a2:	ee28 6a86 	vmul.f32	s12, s17, s12
 80169a6:	fef8 5a65 	vrinta.f32	s11, s11
 80169aa:	ee27 7a05 	vmul.f32	s14, s14, s10
 80169ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 80169b2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80169b6:	feb8 6a46 	vrinta.f32	s12, s12
 80169ba:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 80169be:	f8db 0000 	ldr.w	r0, [fp]
 80169c2:	ee16 3a90 	vmov	r3, s13
 80169c6:	f1b8 0f01 	cmp.w	r8, #1
 80169ca:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80169ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80169d2:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 80169d6:	ee15 ea90 	vmov	lr, s11
 80169da:	bf08      	it	eq
 80169dc:	20ff      	moveq	r0, #255	; 0xff
 80169de:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 80169e2:	b29a      	uxth	r2, r3
 80169e4:	ee17 1a90 	vmov	r1, s15
 80169e8:	ee17 3a10 	vmov	r3, s14
 80169ec:	ee16 aa10 	vmov	sl, s12
 80169f0:	f88d e084 	strb.w	lr, [sp, #132]	; 0x84
 80169f4:	bf08      	it	eq
 80169f6:	f88d 0084 	strbeq.w	r0, [sp, #132]	; 0x84
 80169fa:	2000      	movs	r0, #0
 80169fc:	f8bb 7004 	ldrh.w	r7, [fp, #4]
 8016a00:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8016a04:	f8ad 708a 	strh.w	r7, [sp, #138]	; 0x8a
 8016a08:	9f04      	ldr	r7, [sp, #16]
 8016a0a:	b29b      	uxth	r3, r3
 8016a0c:	b289      	uxth	r1, r1
 8016a0e:	f88d a085 	strb.w	sl, [sp, #133]	; 0x85
 8016a12:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8016a16:	f8ad 308e 	strh.w	r3, [sp, #142]	; 0x8e
 8016a1a:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 8016a1e:	f8cd c080 	str.w	ip, [sp, #128]	; 0x80
 8016a22:	f889 0000 	strb.w	r0, [r9]
 8016a26:	2f00      	cmp	r7, #0
 8016a28:	f000 8117 	beq.w	8016c5a <MEMS_runMagCal+0x856>
 8016a2c:	f899 7040 	ldrb.w	r7, [r9, #64]	; 0x40
 8016a30:	f889 0001 	strb.w	r0, [r9, #1]
 8016a34:	2f00      	cmp	r7, #0
 8016a36:	f041 80db 	bne.w	8017bf0 <MEMS_runMagCal+0x17ec>
 8016a3a:	f109 0768 	add.w	r7, r9, #104	; 0x68
 8016a3e:	ac0e      	add	r4, sp, #56	; 0x38
 8016a40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016a44:	f8bd 0090 	ldrh.w	r0, [sp, #144]	; 0x90
 8016a48:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 8016a4c:	f8bd 208e 	ldrh.w	r2, [sp, #142]	; 0x8e
 8016a50:	fb03 f101 	mul.w	r1, r3, r1
 8016a54:	fb03 f202 	mul.w	r2, r3, r2
 8016a58:	fb03 f300 	mul.w	r3, r3, r0
 8016a5c:	ee05 1a90 	vmov	s11, r1
 8016a60:	ee05 2a10 	vmov	s10, r2
 8016a64:	ee06 3a10 	vmov	s12, r3
 8016a68:	f9bd 3086 	ldrsh.w	r3, [sp, #134]	; 0x86
 8016a6c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8016c0c <MEMS_runMagCal+0x808>
 8016a70:	ee03 3a90 	vmov	s7, r3
 8016a74:	f9bd 3088 	ldrsh.w	r3, [sp, #136]	; 0x88
 8016a78:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8016a7c:	ee04 3a10 	vmov	s8, r3
 8016a80:	f9bd 308a 	ldrsh.w	r3, [sp, #138]	; 0x8a
 8016a84:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8016a88:	ee04 3a90 	vmov	s9, r3
 8016a8c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016a90:	f04f 0e01 	mov.w	lr, #1
 8016a94:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8016a98:	ee25 5a27 	vmul.f32	s10, s10, s15
 8016a9c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016aa0:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8016aa4:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8016aa8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8016aac:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8016ab0:	ae20      	add	r6, sp, #128	; 0x80
 8016ab2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016ab4:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
 8016ab8:	6830      	ldr	r0, [r6, #0]
 8016aba:	edc9 5a1a 	vstr	s11, [r9, #104]	; 0x68
 8016abe:	ed89 5a1e 	vstr	s10, [r9, #120]	; 0x78
 8016ac2:	ed89 6a22 	vstr	s12, [r9, #136]	; 0x88
 8016ac6:	edc9 3a17 	vstr	s7, [r9, #92]	; 0x5c
 8016aca:	ed89 4a18 	vstr	s8, [r9, #96]	; 0x60
 8016ace:	edc9 4a19 	vstr	s9, [r9, #100]	; 0x64
 8016ad2:	f8c9 c008 	str.w	ip, [r9, #8]
 8016ad6:	f8c9 0054 	str.w	r0, [r9, #84]	; 0x54
 8016ada:	f8c9 1048 	str.w	r1, [r9, #72]	; 0x48
 8016ade:	f8c9 204c 	str.w	r2, [r9, #76]	; 0x4c
 8016ae2:	f8c9 3050 	str.w	r3, [r9, #80]	; 0x50
 8016ae6:	f889 e040 	strb.w	lr, [r9, #64]	; 0x40
 8016aea:	f889 e059 	strb.w	lr, [r9, #89]	; 0x59
 8016aee:	f889 8012 	strb.w	r8, [r9, #18]
 8016af2:	2d00      	cmp	r5, #0
 8016af4:	f001 82a5 	beq.w	8018042 <MEMS_runMagCal+0x1c3e>
 8016af8:	9b03      	ldr	r3, [sp, #12]
 8016afa:	ed9f 3a47 	vldr	s6, [pc, #284]	; 8016c18 <MEMS_runMagCal+0x814>
 8016afe:	ed93 0a01 	vldr	s0, [r3, #4]
 8016b02:	2100      	movs	r1, #0
 8016b04:	ee20 3a03 	vmul.f32	s6, s0, s6
 8016b08:	f04f 32ff 	mov.w	r2, #4294967295
 8016b0c:	468c      	mov	ip, r1
 8016b0e:	f899 0011 	ldrb.w	r0, [r9, #17]
 8016b12:	f899 608d 	ldrb.w	r6, [r9, #141]	; 0x8d
 8016b16:	fb9c f3f6 	sdiv	r3, ip, r6
 8016b1a:	fb06 c313 	mls	r3, r6, r3, ip
 8016b1e:	b2db      	uxtb	r3, r3
 8016b20:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8016b24:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8016b28:	3101      	adds	r1, #1
 8016b2a:	ee07 ca90 	vmov	s15, ip
 8016b2e:	f102 0c01 	add.w	ip, r2, #1
 8016b32:	f9b3 20ae 	ldrsh.w	r2, [r3, #174]	; 0xae
 8016b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016b3a:	ee06 2a90 	vmov	s13, r2
 8016b3e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8016b42:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8016b46:	ee07 3a10 	vmov	s14, r3
 8016b4a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016b4e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016b52:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8016b56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016b5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016b5e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8016b62:	ee37 7a64 	vsub.f32	s14, s14, s9
 8016b66:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8016b6a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8016b6e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8016b72:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8016b76:	ee67 7a03 	vmul.f32	s15, s14, s6
 8016b7a:	fb9c f2f0 	sdiv	r2, ip, r0
 8016b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016b82:	fb00 c212 	mls	r2, r0, r2, ip
 8016b86:	ee17 ca90 	vmov	ip, s15
 8016b8a:	b209      	sxth	r1, r1
 8016b8c:	b252      	sxtb	r2, r2
 8016b8e:	eb09 0342 	add.w	r3, r9, r2, lsl #1
 8016b92:	42a9      	cmp	r1, r5
 8016b94:	f8a3 c014 	strh.w	ip, [r3, #20]
 8016b98:	468c      	mov	ip, r1
 8016b9a:	dbbc      	blt.n	8016b16 <MEMS_runMagCal+0x712>
 8016b9c:	f889 2012 	strb.w	r2, [r9, #18]
 8016ba0:	4285      	cmp	r5, r0
 8016ba2:	bf28      	it	cs
 8016ba4:	4605      	movcs	r5, r0
 8016ba6:	9400      	str	r4, [sp, #0]
 8016ba8:	463a      	mov	r2, r7
 8016baa:	ee1a 0a90 	vmov	r0, s21
 8016bae:	f889 5010 	strb.w	r5, [r9, #16]
 8016bb2:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8016bb6:	ab0d      	add	r3, sp, #52	; 0x34
 8016bb8:	f7f8 fee4 	bl	800f984 <getMagStats.constprop.0>
 8016bbc:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8016c10 <MEMS_runMagCal+0x80c>
 8016bc0:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8016bc4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016bc8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8016bcc:	eef0 7ae7 	vabs.f32	s15, s15
 8016bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bd8:	edd4 6a00 	vldr	s13, [r4]
 8016bdc:	d524      	bpl.n	8016c28 <MEMS_runMagCal+0x824>
 8016bde:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016be6:	f101 8233 	bmi.w	8018050 <MEMS_runMagCal+0x1c4c>
 8016bea:	e01d      	b.n	8016c28 <MEMS_runMagCal+0x824>
 8016bec:	41f00001 	.word	0x41f00001
 8016bf0:	3f8ccccd 	.word	0x3f8ccccd
 8016bf4:	3f266666 	.word	0x3f266666
 8016bf8:	3eb33333 	.word	0x3eb33333
 8016bfc:	3f19999a 	.word	0x3f19999a
 8016c00:	3a83126f 	.word	0x3a83126f
 8016c04:	3c23d70a 	.word	0x3c23d70a
 8016c08:	447a0000 	.word	0x447a0000
 8016c0c:	358637bd 	.word	0x358637bd
 8016c10:	423c0000 	.word	0x423c0000
 8016c14:	4423d666 	.word	0x4423d666
 8016c18:	42c80000 	.word	0x42c80000
 8016c1c:	427c0000 	.word	0x427c0000
 8016c20:	3f666666 	.word	0x3f666666
 8016c24:	3eaaaaab 	.word	0x3eaaaaab
 8016c28:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8016c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c34:	d507      	bpl.n	8016c46 <MEMS_runMagCal+0x842>
 8016c36:	eef4 6a47 	vcmp.f32	s13, s14
 8016c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c3e:	9b04      	ldr	r3, [sp, #16]
 8016c40:	bf48      	it	mi
 8016c42:	2302      	movmi	r3, #2
 8016c44:	9304      	str	r3, [sp, #16]
 8016c46:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8016c4a:	9a04      	ldr	r2, [sp, #16]
 8016c4c:	2bc8      	cmp	r3, #200	; 0xc8
 8016c4e:	f889 2058 	strb.w	r2, [r9, #88]	; 0x58
 8016c52:	d902      	bls.n	8016c5a <MEMS_runMagCal+0x856>
 8016c54:	2302      	movs	r3, #2
 8016c56:	f889 3058 	strb.w	r3, [r9, #88]	; 0x58
 8016c5a:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8016c5e:	ecbd 8b06 	vpop	{d8-d10}
 8016c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c66:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
 8016c6a:	4291      	cmp	r1, r2
 8016c6c:	f4ff abfa 	bcc.w	8016464 <MEMS_runMagCal+0x60>
 8016c70:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	f47f ac09 	bne.w	801648c <MEMS_runMagCal+0x88>
 8016c7a:	f7ff bbfd 	b.w	8016478 <MEMS_runMagCal+0x74>
 8016c7e:	2202      	movs	r2, #2
 8016c80:	2300      	movs	r3, #0
 8016c82:	9309      	str	r3, [sp, #36]	; 0x24
 8016c84:	9304      	str	r3, [sp, #16]
 8016c86:	ed1f 7a1d 	vldr	s14, [pc, #-116]	; 8016c14 <MEMS_runMagCal+0x810>
 8016c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c92:	f140 8267 	bpl.w	8017164 <MEMS_runMagCal+0xd60>
 8016c96:	ed1f 7a20 	vldr	s14, [pc, #-128]	; 8016c18 <MEMS_runMagCal+0x814>
 8016c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016c9e:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 8016ca2:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8016ca6:	2b01      	cmp	r3, #1
 8016ca8:	d911      	bls.n	8016cce <MEMS_runMagCal+0x8ca>
 8016caa:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8016cae:	ee17 3a10 	vmov	r3, s14
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	2bc7      	cmp	r3, #199	; 0xc7
 8016cb6:	f201 832a 	bhi.w	801830e <MEMS_runMagCal+0x1f0a>
 8016cba:	2300      	movs	r3, #0
 8016cbc:	21ff      	movs	r1, #255	; 0xff
 8016cbe:	f889 3058 	strb.w	r3, [r9, #88]	; 0x58
 8016cc2:	f889 308c 	strb.w	r3, [r9, #140]	; 0x8c
 8016cc6:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40
 8016cca:	f889 108e 	strb.w	r1, [r9, #142]	; 0x8e
 8016cce:	2a00      	cmp	r2, #0
 8016cd0:	f040 8254 	bne.w	801717c <MEMS_runMagCal+0xd78>
 8016cd4:	f999 0012 	ldrsb.w	r0, [r9, #18]
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	f2c0 83aa 	blt.w	8017432 <MEMS_runMagCal+0x102e>
 8016cde:	f899 1011 	ldrb.w	r1, [r9, #17]
 8016ce2:	3001      	adds	r0, #1
 8016ce4:	fbb0 f3f1 	udiv	r3, r0, r1
 8016ce8:	fb01 0013 	mls	r0, r1, r3, r0
 8016cec:	b240      	sxtb	r0, r0
 8016cee:	4604      	mov	r4, r0
 8016cf0:	fef8 7a67 	vrinta.f32	s15, s15
 8016cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016cf8:	f899 3010 	ldrb.w	r3, [r9, #16]
 8016cfc:	f889 0012 	strb.w	r0, [r9, #18]
 8016d00:	3301      	adds	r3, #1
 8016d02:	428b      	cmp	r3, r1
 8016d04:	bfa8      	it	ge
 8016d06:	460b      	movge	r3, r1
 8016d08:	ee17 0a90 	vmov	r0, s15
 8016d0c:	eb09 0644 	add.w	r6, r9, r4, lsl #1
 8016d10:	b2dd      	uxtb	r5, r3
 8016d12:	f889 5010 	strb.w	r5, [r9, #16]
 8016d16:	82b0      	strh	r0, [r6, #20]
 8016d18:	2a00      	cmp	r2, #0
 8016d1a:	f040 822f 	bne.w	801717c <MEMS_runMagCal+0xd78>
 8016d1e:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8016d22:	b120      	cbz	r0, 8016d2e <MEMS_runMagCal+0x92a>
 8016d24:	9e07      	ldr	r6, [sp, #28]
 8016d26:	f500 6296 	add.w	r2, r0, #1200	; 0x4b0
 8016d2a:	4296      	cmp	r6, r2
 8016d2c:	d395      	bcc.n	8016c5a <MEMS_runMagCal+0x856>
 8016d2e:	9a04      	ldr	r2, [sp, #16]
 8016d30:	2a01      	cmp	r2, #1
 8016d32:	d092      	beq.n	8016c5a <MEMS_runMagCal+0x856>
 8016d34:	f899 7058 	ldrb.w	r7, [r9, #88]	; 0x58
 8016d38:	1eba      	subs	r2, r7, #2
 8016d3a:	2a01      	cmp	r2, #1
 8016d3c:	f240 823a 	bls.w	80171b4 <MEMS_runMagCal+0xdb0>
 8016d40:	9b03      	ldr	r3, [sp, #12]
 8016d42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016d46:	ed93 6a01 	vldr	s12, [r3, #4]
 8016d4a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8016d4e:	ee87 5a86 	vdiv.f32	s10, s15, s12
 8016d52:	ed5f 7a4e 	vldr	s15, [pc, #-312]	; 8016c1c <MEMS_runMagCal+0x818>
 8016d56:	ee25 0a00 	vmul.f32	s0, s10, s0
 8016d5a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016d62:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8016d66:	9a08      	ldr	r2, [sp, #32]
 8016d68:	9b05      	ldr	r3, [sp, #20]
 8016d6a:	f8d9 6090 	ldr.w	r6, [r9, #144]	; 0x90
 8016d6e:	fb03 2404 	mla	r4, r3, r4, r2
 8016d72:	ee17 2a90 	vmov	r2, s15
 8016d76:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8016d7a:	3310      	adds	r3, #16
 8016d7c:	fa1f f882 	uxth.w	r8, r2
 8016d80:	42a3      	cmp	r3, r4
 8016d82:	f109 028c 	add.w	r2, r9, #140	; 0x8c
 8016d86:	ee0a 2a90 	vmov	s21, r2
 8016d8a:	f080 8206 	bcs.w	801719a <MEMS_runMagCal+0xd96>
 8016d8e:	f242 3328 	movw	r3, #9000	; 0x2328
 8016d92:	f899 008c 	ldrb.w	r0, [r9, #140]	; 0x8c
 8016d96:	429c      	cmp	r4, r3
 8016d98:	f899 508d 	ldrb.w	r5, [r9, #141]	; 0x8d
 8016d9c:	bf16      	itet	ne
 8016d9e:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8016da2:	2400      	moveq	r4, #0
 8016da4:	3c28      	subne	r4, #40	; 0x28
 8016da6:	42a8      	cmp	r0, r5
 8016da8:	f999 108e 	ldrsb.w	r1, [r9, #142]	; 0x8e
 8016dac:	f000 86e9 	beq.w	8017b82 <MEMS_runMagCal+0x177e>
 8016db0:	3101      	adds	r1, #1
 8016db2:	1a0a      	subs	r2, r1, r0
 8016db4:	fb92 f1f5 	sdiv	r1, r2, r5
 8016db8:	fb05 2111 	mls	r1, r5, r1, r2
 8016dbc:	2900      	cmp	r1, #0
 8016dbe:	bfb8      	it	lt
 8016dc0:	1949      	addlt	r1, r1, r5
 8016dc2:	b209      	sxth	r1, r1
 8016dc4:	b358      	cbz	r0, 8016e1e <MEMS_runMagCal+0xa1a>
 8016dc6:	3801      	subs	r0, #1
 8016dc8:	b280      	uxth	r0, r0
 8016dca:	3001      	adds	r0, #1
 8016dcc:	1b36      	subs	r6, r6, r4
 8016dce:	9f04      	ldr	r7, [sp, #16]
 8016dd0:	4408      	add	r0, r1
 8016dd2:	b2b6      	uxth	r6, r6
 8016dd4:	e002      	b.n	8016ddc <MEMS_runMagCal+0x9d8>
 8016dd6:	3101      	adds	r1, #1
 8016dd8:	4281      	cmp	r1, r0
 8016dda:	d01b      	beq.n	8016e14 <MEMS_runMagCal+0xa10>
 8016ddc:	fb91 f3f5 	sdiv	r3, r1, r5
 8016de0:	fb05 1313 	mls	r3, r5, r3, r1
 8016de4:	b2db      	uxtb	r3, r3
 8016de6:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8016dea:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8016dee:	4432      	add	r2, r6
 8016df0:	b212      	sxth	r2, r2
 8016df2:	2a00      	cmp	r2, #0
 8016df4:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8016df8:	daed      	bge.n	8016dd6 <MEMS_runMagCal+0x9d2>
 8016dfa:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 8016dfe:	1e5a      	subs	r2, r3, #1
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	f000 8314 	beq.w	801742e <MEMS_runMagCal+0x102a>
 8016e06:	3101      	adds	r1, #1
 8016e08:	4281      	cmp	r1, r0
 8016e0a:	f04f 0701 	mov.w	r7, #1
 8016e0e:	f889 208c 	strb.w	r2, [r9, #140]	; 0x8c
 8016e12:	d1e3      	bne.n	8016ddc <MEMS_runMagCal+0x9d8>
 8016e14:	2f01      	cmp	r7, #1
 8016e16:	f001 80cb 	beq.w	8017fb0 <MEMS_runMagCal+0x1bac>
 8016e1a:	f899 008c 	ldrb.w	r0, [r9, #140]	; 0x8c
 8016e1e:	f8c9 4090 	str.w	r4, [r9, #144]	; 0x90
 8016e22:	2800      	cmp	r0, #0
 8016e24:	f000 81bf 	beq.w	80171a6 <MEMS_runMagCal+0xda2>
 8016e28:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 8016e2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016e2e:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8016e32:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8016e36:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8016e3a:	3308      	adds	r3, #8
 8016e3c:	441c      	add	r4, r3
 8016e3e:	42a2      	cmp	r2, r4
 8016e40:	f200 86a8 	bhi.w	8017b94 <MEMS_runMagCal+0x1790>
 8016e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e46:	b923      	cbnz	r3, 8016e52 <MEMS_runMagCal+0xa4e>
 8016e48:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 8016e4c:	2b0a      	cmp	r3, #10
 8016e4e:	f240 81ae 	bls.w	80171ae <MEMS_runMagCal+0xdaa>
 8016e52:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016e56:	9302      	str	r3, [sp, #8]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	f000 81a8 	beq.w	80171ae <MEMS_runMagCal+0xdaa>
 8016e5e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8016e62:	ed5f 6a91 	vldr	s13, [pc, #-580]	; 8016c20 <MEMS_runMagCal+0x81c>
 8016e66:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 8016e6a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016e6e:	ed5f 7a93 	vldr	s15, [pc, #-588]	; 8016c24 <MEMS_runMagCal+0x820>
 8016e72:	2100      	movs	r1, #0
 8016e74:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8016e78:	ee60 4a24 	vmul.f32	s9, s0, s9
 8016e7c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8016e80:	ee26 6a27 	vmul.f32	s12, s12, s15
 8016e84:	468b      	mov	fp, r1
 8016e86:	9b04      	ldr	r3, [sp, #16]
 8016e88:	9308      	str	r3, [sp, #32]
 8016e8a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016e8c:	f812 303b 	ldrb.w	r3, [r2, fp, lsl #3]
 8016e90:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	f000 80e5 	beq.w	8017064 <MEMS_runMagCal+0xc60>
 8016e9a:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 8016e9e:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8016ea2:	ee07 0a90 	vmov	s15, r0
 8016ea6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eaa:	eef0 7ae7 	vabs.f32	s15, s15
 8016eae:	eef4 7ac5 	vcmpe.f32	s15, s10
 8016eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eb6:	f100 8216 	bmi.w	80172e6 <MEMS_runMagCal+0xee2>
 8016eba:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
 8016ebe:	f899 608c 	ldrb.w	r6, [r9, #140]	; 0x8c
 8016ec2:	2e00      	cmp	r6, #0
 8016ec4:	f000 822e 	beq.w	8017324 <MEMS_runMagCal+0xf20>
 8016ec8:	f9b9 33a6 	ldrsh.w	r3, [r9, #934]	; 0x3a6
 8016ecc:	f9b9 13a4 	ldrsh.w	r1, [r9, #932]	; 0x3a4
 8016ed0:	1b1b      	subs	r3, r3, r4
 8016ed2:	fb03 f203 	mul.w	r2, r3, r3
 8016ed6:	1a0b      	subs	r3, r1, r0
 8016ed8:	fb03 2203 	mla	r2, r3, r3, r2
 8016edc:	f9b9 33a8 	ldrsh.w	r3, [r9, #936]	; 0x3a8
 8016ee0:	1b5b      	subs	r3, r3, r5
 8016ee2:	fb03 2303 	mla	r3, r3, r3, r2
 8016ee6:	ee07 3a90 	vmov	s15, r3
 8016eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016eee:	eef4 5ae7 	vcmpe.f32	s11, s15
 8016ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ef6:	f300 80b5 	bgt.w	8017064 <MEMS_runMagCal+0xc60>
 8016efa:	fb90 f3f8 	sdiv	r3, r0, r8
 8016efe:	fb08 0313 	mls	r3, r8, r3, r0
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	bfb8      	it	lt
 8016f06:	4443      	addlt	r3, r8
 8016f08:	b21b      	sxth	r3, r3
 8016f0a:	ee07 3a90 	vmov	s15, r3
 8016f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f12:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f16:	fef8 7a67 	vrinta.f32	s15, s15
 8016f1a:	fb94 f3f8 	sdiv	r3, r4, r8
 8016f1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f22:	fb08 4313 	mls	r3, r8, r3, r4
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	bfb8      	it	lt
 8016f2a:	4443      	addlt	r3, r8
 8016f2c:	b21b      	sxth	r3, r3
 8016f2e:	edcd 7a05 	vstr	s15, [sp, #20]
 8016f32:	ee07 3a90 	vmov	s15, r3
 8016f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f3a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f3e:	fef8 7a67 	vrinta.f32	s15, s15
 8016f42:	fb95 f3f8 	sdiv	r3, r5, r8
 8016f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f4a:	fb08 5313 	mls	r3, r8, r3, r5
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	bfb8      	it	lt
 8016f52:	4443      	addlt	r3, r8
 8016f54:	b21b      	sxth	r3, r3
 8016f56:	f89d a014 	ldrb.w	sl, [sp, #20]
 8016f5a:	edcd 7a05 	vstr	s15, [sp, #20]
 8016f5e:	ee07 3a90 	vmov	s15, r3
 8016f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016f66:	ee67 7a86 	vmul.f32	s15, s15, s12
 8016f6a:	fef8 7a67 	vrinta.f32	s15, s15
 8016f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f72:	edcd 7a06 	vstr	s15, [sp, #24]
 8016f76:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8016f7a:	f1ba 0f1f 	cmp.w	sl, #31
 8016f7e:	9205      	str	r2, [sp, #20]
 8016f80:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8016f84:	f8d9 3094 	ldr.w	r3, [r9, #148]	; 0x94
 8016f88:	9206      	str	r2, [sp, #24]
 8016f8a:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
 8016f8e:	f240 8231 	bls.w	80173f4 <MEMS_runMagCal+0xff0>
 8016f92:	2101      	movs	r1, #1
 8016f94:	9f05      	ldr	r7, [sp, #20]
 8016f96:	f1aa 0220 	sub.w	r2, sl, #32
 8016f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8016f9e:	2f1f      	cmp	r7, #31
 8016fa0:	ea02 0203 	and.w	r2, r2, r3
 8016fa4:	e9d9 3127 	ldrd	r3, r1, [r9, #156]	; 0x9c
 8016fa8:	f240 822f 	bls.w	801740a <MEMS_runMagCal+0x1006>
 8016fac:	f1a7 0120 	sub.w	r1, r7, #32
 8016fb0:	2701      	movs	r7, #1
 8016fb2:	fa07 f101 	lsl.w	r1, r7, r1
 8016fb6:	ea01 0c03 	and.w	ip, r1, r3
 8016fba:	9906      	ldr	r1, [sp, #24]
 8016fbc:	e9d9 7329 	ldrd	r7, r3, [r9, #164]	; 0xa4
 8016fc0:	291f      	cmp	r1, #31
 8016fc2:	f240 822e 	bls.w	8017422 <MEMS_runMagCal+0x101e>
 8016fc6:	f1a1 0720 	sub.w	r7, r1, #32
 8016fca:	2101      	movs	r1, #1
 8016fcc:	fa01 f707 	lsl.w	r7, r1, r7
 8016fd0:	403b      	ands	r3, r7
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	f040 8131 	bne.w	801723a <MEMS_runMagCal+0xe36>
 8016fd8:	ea52 030c 	orrs.w	r3, r2, ip
 8016fdc:	f040 8132 	bne.w	8017244 <MEMS_runMagCal+0xe40>
 8016fe0:	f899 308d 	ldrb.w	r3, [r9, #141]	; 0x8d
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	4694      	mov	ip, r2
 8016fe8:	930a      	str	r3, [sp, #40]	; 0x28
 8016fea:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 8016fee:	3301      	adds	r3, #1
 8016ff0:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016ff4:	3601      	adds	r6, #1
 8016ff6:	fb92 f3fc 	sdiv	r3, r2, ip
 8016ffa:	4566      	cmp	r6, ip
 8016ffc:	bfa8      	it	ge
 8016ffe:	4666      	movge	r6, ip
 8017000:	fb0c 2c13 	mls	ip, ip, r3, r2
 8017004:	b2f6      	uxtb	r6, r6
 8017006:	fa4f fc8c 	sxtb.w	ip, ip
 801700a:	9903      	ldr	r1, [sp, #12]
 801700c:	f889 c08e 	strb.w	ip, [r9, #142]	; 0x8e
 8017010:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
 8017014:	f889 608c 	strb.w	r6, [r9, #140]	; 0x8c
 8017018:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801701a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801701e:	1a9b      	subs	r3, r3, r2
 8017020:	fb01 330b 	mla	r3, r1, fp, r3
 8017024:	eb09 0ccc 	add.w	ip, r9, ip, lsl #3
 8017028:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 801702c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801702e:	f8ac 00ae 	strh.w	r0, [ip, #174]	; 0xae
 8017032:	429e      	cmp	r6, r3
 8017034:	f8ac 40b0 	strh.w	r4, [ip, #176]	; 0xb0
 8017038:	f8ac 50b2 	strh.w	r5, [ip, #178]	; 0xb2
 801703c:	f8a9 03a4 	strh.w	r0, [r9, #932]	; 0x3a4
 8017040:	f8a9 43a6 	strh.w	r4, [r9, #934]	; 0x3a6
 8017044:	f8a9 53a8 	strh.w	r5, [r9, #936]	; 0x3a8
 8017048:	f000 8738 	beq.w	8017ebc <MEMS_runMagCal+0x1ab8>
 801704c:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8017050:	4651      	mov	r1, sl
 8017052:	ee1a 0a90 	vmov	r0, s21
 8017056:	f7f8 f979 	bl	800f34c <MEMS_setMagIndexToOne>
 801705a:	2301      	movs	r3, #1
 801705c:	9308      	str	r3, [sp, #32]
 801705e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8017062:	9302      	str	r3, [sp, #8]
 8017064:	9b02      	ldr	r3, [sp, #8]
 8017066:	f10b 0b01 	add.w	fp, fp, #1
 801706a:	fa0f fb8b 	sxth.w	fp, fp
 801706e:	459b      	cmp	fp, r3
 8017070:	4659      	mov	r1, fp
 8017072:	f6ff af0a 	blt.w	8016e8a <MEMS_runMagCal+0xa86>
 8017076:	f899 3000 	ldrb.w	r3, [r9]
 801707a:	9a08      	ldr	r2, [sp, #32]
 801707c:	431a      	orrs	r2, r3
 801707e:	b2d3      	uxtb	r3, r2
 8017080:	f889 3000 	strb.w	r3, [r9]
 8017084:	2b00      	cmp	r3, #0
 8017086:	f43f ade8 	beq.w	8016c5a <MEMS_runMagCal+0x856>
 801708a:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 801708e:	2b19      	cmp	r3, #25
 8017090:	930a      	str	r3, [sp, #40]	; 0x28
 8017092:	f67f ade2 	bls.w	8016c5a <MEMS_runMagCal+0x856>
 8017096:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801709a:	930b      	str	r3, [sp, #44]	; 0x2c
 801709c:	b123      	cbz	r3, 80170a8 <MEMS_runMagCal+0xca4>
 801709e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	f040 8541 	bne.w	8017b2a <MEMS_runMagCal+0x1726>
 80170a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	f040 870d 	bne.w	8017eca <MEMS_runMagCal+0x1ac6>
 80170b0:	2200      	movs	r2, #0
 80170b2:	f04f 0a01 	mov.w	sl, #1
 80170b6:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
 80170ba:	9b03      	ldr	r3, [sp, #12]
 80170bc:	9005      	str	r0, [sp, #20]
 80170be:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 80170c2:	9d04      	ldr	r5, [sp, #16]
 80170c4:	9006      	str	r0, [sp, #24]
 80170c6:	f8d9 009c 	ldr.w	r0, [r9, #156]	; 0x9c
 80170ca:	ed93 8a01 	vldr	s16, [r3, #4]
 80170ce:	4616      	mov	r6, r2
 80170d0:	4657      	mov	r7, sl
 80170d2:	4629      	mov	r1, r5
 80170d4:	462b      	mov	r3, r5
 80170d6:	e9cd 2220 	strd	r2, r2, [sp, #128]	; 0x80
 80170da:	e9cd 2222 	strd	r2, r2, [sp, #136]	; 0x88
 80170de:	f8d9 b0a8 	ldr.w	fp, [r9, #168]	; 0xa8
 80170e2:	9008      	str	r0, [sp, #32]
 80170e4:	9224      	str	r2, [sp, #144]	; 0x90
 80170e6:	e014      	b.n	8017112 <MEMS_runMagCal+0xd0e>
 80170e8:	9a02      	ldr	r2, [sp, #8]
 80170ea:	f1b8 0f00 	cmp.w	r8, #0
 80170ee:	bf18      	it	ne
 80170f0:	3501      	addne	r5, #1
 80170f2:	2c00      	cmp	r4, #0
 80170f4:	bf18      	it	ne
 80170f6:	3301      	addne	r3, #1
 80170f8:	2a00      	cmp	r2, #0
 80170fa:	bf18      	it	ne
 80170fc:	3101      	addne	r1, #1
 80170fe:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8017102:	b2ed      	uxtb	r5, r5
 8017104:	b2db      	uxtb	r3, r3
 8017106:	b2c9      	uxtb	r1, r1
 8017108:	f000 81a6 	beq.w	8017458 <MEMS_runMagCal+0x1054>
 801710c:	3601      	adds	r6, #1
 801710e:	fa5f fa8e 	uxtb.w	sl, lr
 8017112:	9805      	ldr	r0, [sp, #20]
 8017114:	f1a6 0220 	sub.w	r2, r6, #32
 8017118:	fa07 f202 	lsl.w	r2, r7, r2
 801711c:	ea00 0802 	and.w	r8, r0, r2
 8017120:	9808      	ldr	r0, [sp, #32]
 8017122:	2e1f      	cmp	r6, #31
 8017124:	ea02 0400 	and.w	r4, r2, r0
 8017128:	ea02 020b 	and.w	r2, r2, fp
 801712c:	9202      	str	r2, [sp, #8]
 801712e:	9a06      	ldr	r2, [sp, #24]
 8017130:	fa07 f006 	lsl.w	r0, r7, r6
 8017134:	ea02 0c00 	and.w	ip, r2, r0
 8017138:	f10a 0e01 	add.w	lr, sl, #1
 801713c:	d8d4      	bhi.n	80170e8 <MEMS_runMagCal+0xce4>
 801713e:	e9d9 4228 	ldrd	r4, r2, [r9, #160]	; 0xa0
 8017142:	4004      	ands	r4, r0
 8017144:	4010      	ands	r0, r2
 8017146:	f1bc 0f00 	cmp.w	ip, #0
 801714a:	bf18      	it	ne
 801714c:	3501      	addne	r5, #1
 801714e:	2c00      	cmp	r4, #0
 8017150:	bf0c      	ite	eq
 8017152:	461c      	moveq	r4, r3
 8017154:	1c5c      	addne	r4, r3, #1
 8017156:	2800      	cmp	r0, #0
 8017158:	bf18      	it	ne
 801715a:	3101      	addne	r1, #1
 801715c:	b2ed      	uxtb	r5, r5
 801715e:	b2e3      	uxtb	r3, r4
 8017160:	b2c9      	uxtb	r1, r1
 8017162:	e7d3      	b.n	801710c <MEMS_runMagCal+0xd08>
 8017164:	eddf 7ab7 	vldr	s15, [pc, #732]	; 8017444 <MEMS_runMagCal+0x1040>
 8017168:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 801716c:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8017170:	2b01      	cmp	r3, #1
 8017172:	f63f ada2 	bhi.w	8016cba <MEMS_runMagCal+0x8b6>
 8017176:	2a00      	cmp	r2, #0
 8017178:	f43f adac 	beq.w	8016cd4 <MEMS_runMagCal+0x8d0>
 801717c:	2200      	movs	r2, #0
 801717e:	23ff      	movs	r3, #255	; 0xff
 8017180:	9907      	ldr	r1, [sp, #28]
 8017182:	f889 208c 	strb.w	r2, [r9, #140]	; 0x8c
 8017186:	f8c9 100c 	str.w	r1, [r9, #12]
 801718a:	f889 308e 	strb.w	r3, [r9, #142]	; 0x8e
 801718e:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8017192:	ecbd 8b06 	vpop	{d8-d10}
 8017196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801719a:	f899 008c 	ldrb.w	r0, [r9, #140]	; 0x8c
 801719e:	4634      	mov	r4, r6
 80171a0:	2800      	cmp	r0, #0
 80171a2:	f47f ae41 	bne.w	8016e28 <MEMS_runMagCal+0xa24>
 80171a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	f47f ae52 	bne.w	8016e52 <MEMS_runMagCal+0xa4e>
 80171ae:	9b04      	ldr	r3, [sp, #16]
 80171b0:	9308      	str	r3, [sp, #32]
 80171b2:	e760      	b.n	8017076 <MEMS_runMagCal+0xc72>
 80171b4:	428d      	cmp	r5, r1
 80171b6:	f000 8691 	beq.w	8017edc <MEMS_runMagCal+0x1ad8>
 80171ba:	2f03      	cmp	r7, #3
 80171bc:	f47f adc0 	bne.w	8016d40 <MEMS_runMagCal+0x93c>
 80171c0:	ee07 0a90 	vmov	s15, r0
 80171c4:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8017448 <MEMS_runMagCal+0x1044>
 80171c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80171cc:	ed99 7a01 	vldr	s14, [r9, #4]
 80171d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80171d4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80171d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80171dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171e0:	f77f adae 	ble.w	8016d40 <MEMS_runMagCal+0x93c>
 80171e4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	f43f ada9 	beq.w	8016d40 <MEMS_runMagCal+0x93c>
 80171ee:	eddd 7a07 	vldr	s15, [sp, #28]
 80171f2:	330a      	adds	r3, #10
 80171f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80171f8:	ee07 3a90 	vmov	s15, r3
 80171fc:	ee67 6a26 	vmul.f32	s13, s14, s13
 8017200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017204:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801720c:	f77f ad98 	ble.w	8016d40 <MEMS_runMagCal+0x93c>
 8017210:	f899 3001 	ldrb.w	r3, [r9, #1]
 8017214:	2b00      	cmp	r3, #0
 8017216:	f47f ad93 	bne.w	8016d40 <MEMS_runMagCal+0x93c>
 801721a:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 801721e:	2b00      	cmp	r3, #0
 8017220:	f43f ad1b 	beq.w	8016c5a <MEMS_runMagCal+0x856>
 8017224:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
 8017228:	2bff      	cmp	r3, #255	; 0xff
 801722a:	f47f ad16 	bne.w	8016c5a <MEMS_runMagCal+0x856>
 801722e:	e587      	b.n	8016d40 <MEMS_runMagCal+0x93c>
 8017230:	2300      	movs	r3, #0
 8017232:	9309      	str	r3, [sp, #36]	; 0x24
 8017234:	9304      	str	r3, [sp, #16]
 8017236:	2200      	movs	r2, #0
 8017238:	e525      	b.n	8016c86 <MEMS_runMagCal+0x882>
 801723a:	b11a      	cbz	r2, 8017244 <MEMS_runMagCal+0xe40>
 801723c:	f1bc 0f00 	cmp.w	ip, #0
 8017240:	f47f af10 	bne.w	8017064 <MEMS_runMagCal+0xc60>
 8017244:	f899 308d 	ldrb.w	r3, [r9, #141]	; 0x8d
 8017248:	461a      	mov	r2, r3
 801724a:	4296      	cmp	r6, r2
 801724c:	930a      	str	r3, [sp, #40]	; 0x28
 801724e:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 8017252:	f000 8460 	beq.w	8017b16 <MEMS_runMagCal+0x1712>
 8017256:	3301      	adds	r3, #1
 8017258:	930b      	str	r3, [sp, #44]	; 0x2c
 801725a:	1b9b      	subs	r3, r3, r6
 801725c:	4611      	mov	r1, r2
 801725e:	fb93 f2f2 	sdiv	r2, r3, r2
 8017262:	fb01 3212 	mls	r2, r1, r2, r3
 8017266:	2a00      	cmp	r2, #0
 8017268:	bfb8      	it	lt
 801726a:	460b      	movlt	r3, r1
 801726c:	468c      	mov	ip, r1
 801726e:	bfb8      	it	lt
 8017270:	18d2      	addlt	r2, r2, r3
 8017272:	b212      	sxth	r2, r2
 8017274:	f106 3eff 	add.w	lr, r6, #4294967295
 8017278:	fa5f fe8e 	uxtb.w	lr, lr
 801727c:	f10e 0e01 	add.w	lr, lr, #1
 8017280:	4496      	add	lr, r2
 8017282:	e002      	b.n	801728a <MEMS_runMagCal+0xe86>
 8017284:	4572      	cmp	r2, lr
 8017286:	f43f aeb4 	beq.w	8016ff2 <MEMS_runMagCal+0xbee>
 801728a:	fb92 f3fc 	sdiv	r3, r2, ip
 801728e:	fb0c 2313 	mls	r3, ip, r3, r2
 8017292:	b2db      	uxtb	r3, r3
 8017294:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8017298:	f9b3 70ae 	ldrsh.w	r7, [r3, #174]	; 0xae
 801729c:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 80172a0:	1bc7      	subs	r7, r0, r7
 80172a2:	1a61      	subs	r1, r4, r1
 80172a4:	ee07 7a90 	vmov	s15, r7
 80172a8:	ee06 1a90 	vmov	s13, r1
 80172ac:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80172b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172b4:	1aeb      	subs	r3, r5, r3
 80172b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80172ba:	ee07 3a10 	vmov	s14, r3
 80172be:	eef0 7ae7 	vabs.f32	s15, s15
 80172c2:	eef0 6ae6 	vabs.f32	s13, s13
 80172c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80172ce:	eeb0 7ac7 	vabs.f32	s14, s14
 80172d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80172d6:	eef4 4ae7 	vcmpe.f32	s9, s15
 80172da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172de:	f102 0201 	add.w	r2, r2, #1
 80172e2:	ddcf      	ble.n	8017284 <MEMS_runMagCal+0xe80>
 80172e4:	e6be      	b.n	8017064 <MEMS_runMagCal+0xc60>
 80172e6:	ee07 4a90 	vmov	s15, r4
 80172ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172ee:	eef0 7ae7 	vabs.f32	s15, s15
 80172f2:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80172f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172fa:	f9b2 5006 	ldrsh.w	r5, [r2, #6]
 80172fe:	f77f adde 	ble.w	8016ebe <MEMS_runMagCal+0xaba>
 8017302:	ee07 5a90 	vmov	s15, r5
 8017306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801730a:	eef0 7ae7 	vabs.f32	s15, s15
 801730e:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8017312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017316:	f73f aea5 	bgt.w	8017064 <MEMS_runMagCal+0xc60>
 801731a:	f899 608c 	ldrb.w	r6, [r9, #140]	; 0x8c
 801731e:	2e00      	cmp	r6, #0
 8017320:	f47f add2 	bne.w	8016ec8 <MEMS_runMagCal+0xac4>
 8017324:	f04f 0301 	mov.w	r3, #1
 8017328:	fb90 f2f8 	sdiv	r2, r0, r8
 801732c:	f889 308c 	strb.w	r3, [r9, #140]	; 0x8c
 8017330:	9b03      	ldr	r3, [sp, #12]
 8017332:	f889 608e 	strb.w	r6, [r9, #142]	; 0x8e
 8017336:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 801733a:	fb08 0212 	mls	r2, r8, r2, r0
 801733e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017340:	2a00      	cmp	r2, #0
 8017342:	fb01 3307 	mla	r3, r1, r7, r3
 8017346:	bfb8      	it	lt
 8017348:	4442      	addlt	r2, r8
 801734a:	f8c9 3090 	str.w	r3, [r9, #144]	; 0x90
 801734e:	b213      	sxth	r3, r2
 8017350:	ee07 3a90 	vmov	s15, r3
 8017354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017358:	ee67 7a86 	vmul.f32	s15, s15, s12
 801735c:	fef8 7a67 	vrinta.f32	s15, s15
 8017360:	fb94 f3f8 	sdiv	r3, r4, r8
 8017364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017368:	f8a9 40b0 	strh.w	r4, [r9, #176]	; 0xb0
 801736c:	f8a9 43a6 	strh.w	r4, [r9, #934]	; 0x3a6
 8017370:	fb08 4413 	mls	r4, r8, r3, r4
 8017374:	2c00      	cmp	r4, #0
 8017376:	bfb8      	it	lt
 8017378:	4444      	addlt	r4, r8
 801737a:	b224      	sxth	r4, r4
 801737c:	edcd 7a02 	vstr	s15, [sp, #8]
 8017380:	ee07 4a90 	vmov	s15, r4
 8017384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017388:	ee67 7a86 	vmul.f32	s15, s15, s12
 801738c:	fef8 7a67 	vrinta.f32	s15, s15
 8017390:	fb95 f3f8 	sdiv	r3, r5, r8
 8017394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8017398:	f8a9 50b2 	strh.w	r5, [r9, #178]	; 0xb2
 801739c:	f8a9 53a8 	strh.w	r5, [r9, #936]	; 0x3a8
 80173a0:	fb08 5513 	mls	r5, r8, r3, r5
 80173a4:	2d00      	cmp	r5, #0
 80173a6:	bfb8      	it	lt
 80173a8:	4445      	addlt	r5, r8
 80173aa:	b22d      	sxth	r5, r5
 80173ac:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80173b0:	edcd 7a02 	vstr	s15, [sp, #8]
 80173b4:	ee07 5a90 	vmov	s15, r5
 80173b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80173bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80173c0:	fef8 7a67 	vrinta.f32	s15, s15
 80173c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80173c8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80173cc:	edcd 7a02 	vstr	s15, [sp, #8]
 80173d0:	f8a9 00ae 	strh.w	r0, [r9, #174]	; 0xae
 80173d4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80173d8:	f8a9 03a4 	strh.w	r0, [r9, #932]	; 0x3a4
 80173dc:	f8a9 60ac 	strh.w	r6, [r9, #172]	; 0xac
 80173e0:	ee1a 0a90 	vmov	r0, s21
 80173e4:	f7f7 ffb2 	bl	800f34c <MEMS_setMagIndexToOne>
 80173e8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80173ec:	9302      	str	r3, [sp, #8]
 80173ee:	2301      	movs	r3, #1
 80173f0:	9308      	str	r3, [sp, #32]
 80173f2:	e637      	b.n	8017064 <MEMS_runMagCal+0xc60>
 80173f4:	2301      	movs	r3, #1
 80173f6:	9f05      	ldr	r7, [sp, #20]
 80173f8:	fa03 f30a 	lsl.w	r3, r3, sl
 80173fc:	2f1f      	cmp	r7, #31
 80173fe:	ea02 0203 	and.w	r2, r2, r3
 8017402:	e9d9 3127 	ldrd	r3, r1, [r9, #156]	; 0x9c
 8017406:	f63f add1 	bhi.w	8016fac <MEMS_runMagCal+0xba8>
 801740a:	463b      	mov	r3, r7
 801740c:	2701      	movs	r7, #1
 801740e:	fa07 f303 	lsl.w	r3, r7, r3
 8017412:	ea01 0c03 	and.w	ip, r1, r3
 8017416:	9906      	ldr	r1, [sp, #24]
 8017418:	e9d9 7329 	ldrd	r7, r3, [r9, #164]	; 0xa4
 801741c:	291f      	cmp	r1, #31
 801741e:	f63f add2 	bhi.w	8016fc6 <MEMS_runMagCal+0xbc2>
 8017422:	460b      	mov	r3, r1
 8017424:	2101      	movs	r1, #1
 8017426:	fa01 f303 	lsl.w	r3, r1, r3
 801742a:	403b      	ands	r3, r7
 801742c:	e5d1      	b.n	8016fd2 <MEMS_runMagCal+0xbce>
 801742e:	2701      	movs	r7, #1
 8017430:	e4d1      	b.n	8016dd6 <MEMS_runMagCal+0x9d2>
 8017432:	2400      	movs	r4, #0
 8017434:	f899 1011 	ldrb.w	r1, [r9, #17]
 8017438:	4620      	mov	r0, r4
 801743a:	e459      	b.n	8016cf0 <MEMS_runMagCal+0x8ec>
 801743c:	2300      	movs	r3, #0
 801743e:	9302      	str	r3, [sp, #8]
 8017440:	f7ff b93b 	b.w	80166ba <MEMS_runMagCal+0x2b6>
 8017444:	477fff00 	.word	0x477fff00
 8017448:	3a83126f 	.word	0x3a83126f
 801744c:	42340000 	.word	0x42340000
 8017450:	3faccccd 	.word	0x3faccccd
 8017454:	00000000 	.word	0x00000000
 8017458:	2d05      	cmp	r5, #5
 801745a:	f240 8351 	bls.w	8017b00 <MEMS_runMagCal+0x16fc>
 801745e:	2b05      	cmp	r3, #5
 8017460:	f240 834e 	bls.w	8017b00 <MEMS_runMagCal+0x16fc>
 8017464:	2905      	cmp	r1, #5
 8017466:	f240 834b 	bls.w	8017b00 <MEMS_runMagCal+0x16fc>
 801746a:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 801746e:	f899 b08d 	ldrb.w	fp, [r9, #141]	; 0x8d
 8017472:	9302      	str	r3, [sp, #8]
 8017474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017476:	455b      	cmp	r3, fp
 8017478:	f000 85c4 	beq.w	8018004 <MEMS_runMagCal+0x1c00>
 801747c:	461a      	mov	r2, r3
 801747e:	9b02      	ldr	r3, [sp, #8]
 8017480:	46da      	mov	sl, fp
 8017482:	3301      	adds	r3, #1
 8017484:	9305      	str	r3, [sp, #20]
 8017486:	1a9b      	subs	r3, r3, r2
 8017488:	fb93 f2fb 	sdiv	r2, r3, fp
 801748c:	fb0b 3212 	mls	r2, fp, r2, r3
 8017490:	2a00      	cmp	r2, #0
 8017492:	bfb8      	it	lt
 8017494:	445a      	addlt	r2, fp
 8017496:	b212      	sxth	r2, r2
 8017498:	eb09 03c2 	add.w	r3, r9, r2, lsl #3
 801749c:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 80174a0:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 80174a4:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 80174a8:	468e      	mov	lr, r1
 80174aa:	463e      	mov	r6, r7
 80174ac:	46ac      	mov	ip, r5
 80174ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174b0:	f103 38ff 	add.w	r8, r3, #4294967295
 80174b4:	fa5f f888 	uxtb.w	r8, r8
 80174b8:	f108 0801 	add.w	r8, r8, #1
 80174bc:	4490      	add	r8, r2
 80174be:	fb92 f3fa 	sdiv	r3, r2, sl
 80174c2:	fb0a 2313 	mls	r3, sl, r3, r2
 80174c6:	b2db      	uxtb	r3, r3
 80174c8:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 80174cc:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 80174d0:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 80174d4:	42a1      	cmp	r1, r4
 80174d6:	bfb8      	it	lt
 80174d8:	4621      	movlt	r1, r4
 80174da:	45a6      	cmp	lr, r4
 80174dc:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80174e0:	bfa8      	it	ge
 80174e2:	46a6      	movge	lr, r4
 80174e4:	4285      	cmp	r5, r0
 80174e6:	bfb8      	it	lt
 80174e8:	4605      	movlt	r5, r0
 80174ea:	4584      	cmp	ip, r0
 80174ec:	bfa8      	it	ge
 80174ee:	4684      	movge	ip, r0
 80174f0:	429f      	cmp	r7, r3
 80174f2:	bfb8      	it	lt
 80174f4:	461f      	movlt	r7, r3
 80174f6:	3201      	adds	r2, #1
 80174f8:	429e      	cmp	r6, r3
 80174fa:	bfa8      	it	ge
 80174fc:	461e      	movge	r6, r3
 80174fe:	4542      	cmp	r2, r8
 8017500:	d1dd      	bne.n	80174be <MEMS_runMagCal+0x10ba>
 8017502:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017506:	ed1f 7a2f 	vldr	s14, [pc, #-188]	; 801744c <MEMS_runMagCal+0x1048>
 801750a:	eec7 8a88 	vdiv.f32	s17, s15, s16
 801750e:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 8017512:	eba1 010e 	sub.w	r1, r1, lr
 8017516:	eba5 050c 	sub.w	r5, r5, ip
 801751a:	1bbe      	subs	r6, r7, r6
 801751c:	ee28 7a87 	vmul.f32	s14, s17, s14
 8017520:	b209      	sxth	r1, r1
 8017522:	b22d      	sxth	r5, r5
 8017524:	b236      	sxth	r6, r6
 8017526:	2b00      	cmp	r3, #0
 8017528:	f040 8566 	bne.w	8017ff8 <MEMS_runMagCal+0x1bf4>
 801752c:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 8017530:	fab3 f883 	clz	r8, r3
 8017534:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017538:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801753c:	ee06 1a90 	vmov	s13, r1
 8017540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017544:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017548:	eef4 6ae7 	vcmpe.f32	s13, s15
 801754c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017550:	f300 8535 	bgt.w	8017fbe <MEMS_runMagCal+0x1bba>
 8017554:	ee06 5a10 	vmov	s12, r5
 8017558:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801755c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017564:	f100 852b 	bmi.w	8017fbe <MEMS_runMagCal+0x1bba>
 8017568:	ee05 6a90 	vmov	s11, r6
 801756c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8017570:	eef4 7ae5 	vcmpe.f32	s15, s11
 8017574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017578:	f100 8521 	bmi.w	8017fbe <MEMS_runMagCal+0x1bba>
 801757c:	428d      	cmp	r5, r1
 801757e:	462a      	mov	r2, r5
 8017580:	bfb8      	it	lt
 8017582:	460a      	movlt	r2, r1
 8017584:	428e      	cmp	r6, r1
 8017586:	4633      	mov	r3, r6
 8017588:	bfa8      	it	ge
 801758a:	460b      	movge	r3, r1
 801758c:	42b2      	cmp	r2, r6
 801758e:	bfb8      	it	lt
 8017590:	4632      	movlt	r2, r6
 8017592:	42ab      	cmp	r3, r5
 8017594:	bfa8      	it	ge
 8017596:	462b      	movge	r3, r5
 8017598:	428a      	cmp	r2, r1
 801759a:	9202      	str	r2, [sp, #8]
 801759c:	f340 855c 	ble.w	8018058 <MEMS_runMagCal+0x1c54>
 80175a0:	4299      	cmp	r1, r3
 80175a2:	bfb8      	it	lt
 80175a4:	4619      	movlt	r1, r3
 80175a6:	42aa      	cmp	r2, r5
 80175a8:	dd02      	ble.n	80175b0 <MEMS_runMagCal+0x11ac>
 80175aa:	42ab      	cmp	r3, r5
 80175ac:	bfb8      	it	lt
 80175ae:	4629      	movlt	r1, r5
 80175b0:	9a02      	ldr	r2, [sp, #8]
 80175b2:	4296      	cmp	r6, r2
 80175b4:	da02      	bge.n	80175bc <MEMS_runMagCal+0x11b8>
 80175b6:	429e      	cmp	r6, r3
 80175b8:	bfc8      	it	gt
 80175ba:	4631      	movgt	r1, r6
 80175bc:	f1b8 0f00 	cmp.w	r8, #0
 80175c0:	f000 8272 	beq.w	8017aa8 <MEMS_runMagCal+0x16a4>
 80175c4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80175c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175cc:	dc0d      	bgt.n	80175ea <MEMS_runMagCal+0x11e6>
 80175ce:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80175d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175d6:	dc08      	bgt.n	80175ea <MEMS_runMagCal+0x11e6>
 80175d8:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80175dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175e0:	bfcc      	ite	gt
 80175e2:	f04f 0801 	movgt.w	r8, #1
 80175e6:	f04f 0800 	movle.w	r8, #0
 80175ea:	ed5f 7a67 	vldr	s15, [pc, #-412]	; 8017450 <MEMS_runMagCal+0x104c>
 80175ee:	ed9d 5a02 	vldr	s10, [sp, #8]
 80175f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80175f6:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80175fa:	eeb4 5ae7 	vcmpe.f32	s10, s15
 80175fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017602:	f2c0 852c 	blt.w	801805e <MEMS_runMagCal+0x1c5a>
 8017606:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 801760a:	ee07 1a90 	vmov	s15, r1
 801760e:	ee27 5a05 	vmul.f32	s10, s14, s10
 8017612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017616:	eef4 7ac5 	vcmpe.f32	s15, s10
 801761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801761e:	f2c0 851e 	blt.w	801805e <MEMS_runMagCal+0x1c5a>
 8017622:	9a02      	ldr	r2, [sp, #8]
 8017624:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8017628:	f280 8519 	bge.w	801805e <MEMS_runMagCal+0x1c5a>
 801762c:	ee07 3a90 	vmov	s15, r3
 8017630:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8017634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017638:	ee67 7a85 	vmul.f32	s15, s15, s10
 801763c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017644:	f140 850b 	bpl.w	801805e <MEMS_runMagCal+0x1c5a>
 8017648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801764a:	455b      	cmp	r3, fp
 801764c:	f000 853f 	beq.w	80180ce <MEMS_runMagCal+0x1cca>
 8017650:	461a      	mov	r2, r3
 8017652:	9b05      	ldr	r3, [sp, #20]
 8017654:	1a9b      	subs	r3, r3, r2
 8017656:	fb93 f7fa 	sdiv	r7, r3, sl
 801765a:	fb0a 3717 	mls	r7, sl, r7, r3
 801765e:	2f00      	cmp	r7, #0
 8017660:	bfb8      	it	lt
 8017662:	445f      	addlt	r7, fp
 8017664:	b23f      	sxth	r7, r7
 8017666:	9b04      	ldr	r3, [sp, #16]
 8017668:	b27f      	sxtb	r7, r7
 801766a:	469c      	mov	ip, r3
 801766c:	f8cd 8018 	str.w	r8, [sp, #24]
 8017670:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8017674:	9305      	str	r3, [sp, #20]
 8017676:	f1c7 0e01 	rsb	lr, r7, #1
 801767a:	463a      	mov	r2, r7
 801767c:	fb92 f1fa 	sdiv	r1, r2, sl
 8017680:	3701      	adds	r7, #1
 8017682:	fb97 f3fa 	sdiv	r3, r7, sl
 8017686:	fb0a 2111 	mls	r1, sl, r1, r2
 801768a:	fb0a 7313 	mls	r3, sl, r3, r7
 801768e:	b24a      	sxtb	r2, r1
 8017690:	2a00      	cmp	r2, #0
 8017692:	bfbc      	itt	lt
 8017694:	4459      	addlt	r1, fp
 8017696:	b24a      	sxtblt	r2, r1
 8017698:	b25b      	sxtb	r3, r3
 801769a:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 801769e:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 80176a2:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 80176a6:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 80176aa:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 80176ae:	1a45      	subs	r5, r0, r1
 80176b0:	bf48      	it	mi
 80176b2:	1a09      	submi	r1, r1, r0
 80176b4:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 80176b8:	bf4c      	ite	mi
 80176ba:	b20d      	sxthmi	r5, r1
 80176bc:	b22d      	sxthpl	r5, r5
 80176be:	1a21      	subs	r1, r4, r0
 80176c0:	bf48      	it	mi
 80176c2:	1b01      	submi	r1, r0, r4
 80176c4:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 80176c8:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 80176cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80176d0:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 80176d4:	1a26      	subs	r6, r4, r0
 80176d6:	eba3 0302 	sub.w	r3, r3, r2
 80176da:	b21b      	sxth	r3, r3
 80176dc:	bf48      	it	mi
 80176de:	1b06      	submi	r6, r0, r4
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	b209      	sxth	r1, r1
 80176e4:	b236      	sxth	r6, r6
 80176e6:	dd20      	ble.n	801772a <MEMS_runMagCal+0x1326>
 80176e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80176ec:	4429      	add	r1, r5
 80176ee:	440e      	add	r6, r1
 80176f0:	fb02 f606 	mul.w	r6, r2, r6
 80176f4:	ee07 6a90 	vmov	s15, r6
 80176f8:	ee07 3a10 	vmov	s14, r3
 80176fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017700:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017704:	ee67 7a88 	vmul.f32	s15, s15, s16
 8017708:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801770c:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8017710:	ee17 3a90 	vmov	r3, s15
 8017714:	b21b      	sxth	r3, r3
 8017716:	f10c 0c01 	add.w	ip, ip, #1
 801771a:	2b96      	cmp	r3, #150	; 0x96
 801771c:	fa5f fc8c 	uxtb.w	ip, ip
 8017720:	dd03      	ble.n	801772a <MEMS_runMagCal+0x1326>
 8017722:	9b05      	ldr	r3, [sp, #20]
 8017724:	3301      	adds	r3, #1
 8017726:	b2db      	uxtb	r3, r3
 8017728:	9305      	str	r3, [sp, #20]
 801772a:	eb0e 0307 	add.w	r3, lr, r7
 801772e:	b2db      	uxtb	r3, r3
 8017730:	4598      	cmp	r8, r3
 8017732:	d8a2      	bhi.n	801767a <MEMS_runMagCal+0x1276>
 8017734:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017738:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801773c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017740:	4563      	cmp	r3, ip
 8017742:	f340 81dd 	ble.w	8017b00 <MEMS_runMagCal+0x16fc>
 8017746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017748:	b92b      	cbnz	r3, 8017756 <MEMS_runMagCal+0x1352>
 801774a:	f899 3058 	ldrb.w	r3, [r9, #88]	; 0x58
 801774e:	3b02      	subs	r3, #2
 8017750:	2b01      	cmp	r3, #1
 8017752:	f240 84f6 	bls.w	8018142 <MEMS_runMagCal+0x1d3e>
 8017756:	ae25      	add	r6, sp, #148	; 0x94
 8017758:	4630      	mov	r0, r6
 801775a:	2220      	movs	r2, #32
 801775c:	2100      	movs	r1, #0
 801775e:	f003 fab4 	bl	801acca <memset>
 8017762:	2300      	movs	r3, #0
 8017764:	f899 508c 	ldrb.w	r5, [r9, #140]	; 0x8c
 8017768:	f899 008d 	ldrb.w	r0, [r9, #141]	; 0x8d
 801776c:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 8017770:	931f      	str	r3, [sp, #124]	; 0x7c
 8017772:	f999 308e 	ldrsb.w	r3, [r9, #142]	; 0x8e
 8017776:	4285      	cmp	r5, r0
 8017778:	f103 0301 	add.w	r3, r3, #1
 801777c:	f000 84d9 	beq.w	8018132 <MEMS_runMagCal+0x1d2e>
 8017780:	1b5b      	subs	r3, r3, r5
 8017782:	fb93 f2f0 	sdiv	r2, r3, r0
 8017786:	fb00 3312 	mls	r3, r0, r2, r3
 801778a:	2b00      	cmp	r3, #0
 801778c:	bfb8      	it	lt
 801778e:	181b      	addlt	r3, r3, r0
 8017790:	b21a      	sxth	r2, r3
 8017792:	2d00      	cmp	r5, #0
 8017794:	f000 8524 	beq.w	80181e0 <MEMS_runMagCal+0x1ddc>
 8017798:	ed5f 5ad2 	vldr	s11, [pc, #-840]	; 8017454 <MEMS_runMagCal+0x1050>
 801779c:	4611      	mov	r1, r2
 801779e:	eeb0 5a65 	vmov.f32	s10, s11
 80177a2:	eef0 4a65 	vmov.f32	s9, s11
 80177a6:	1e6f      	subs	r7, r5, #1
 80177a8:	b2fc      	uxtb	r4, r7
 80177aa:	3401      	adds	r4, #1
 80177ac:	4414      	add	r4, r2
 80177ae:	fb91 f3f0 	sdiv	r3, r1, r0
 80177b2:	fb00 1313 	mls	r3, r0, r3, r1
 80177b6:	b2db      	uxtb	r3, r3
 80177b8:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 80177bc:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 80177c0:	3101      	adds	r1, #1
 80177c2:	ee06 ca90 	vmov	s13, ip
 80177c6:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 80177ca:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80177ce:	ee07 ca10 	vmov	s14, ip
 80177d2:	ee07 3a90 	vmov	s15, r3
 80177d6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80177da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80177de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177e2:	42a1      	cmp	r1, r4
 80177e4:	ee74 4aa6 	vadd.f32	s9, s9, s13
 80177e8:	ee35 5a07 	vadd.f32	s10, s10, s14
 80177ec:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80177f0:	d1dd      	bne.n	80177ae <MEMS_runMagCal+0x13aa>
 80177f2:	ee07 5a90 	vmov	s15, r5
 80177f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80177fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177fe:	ed9f 6aec 	vldr	s12, [pc, #944]	; 8017bb0 <MEMS_runMagCal+0x17ac>
 8017802:	ee87 aa27 	vdiv.f32	s20, s14, s15
 8017806:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 801780a:	ee6a 9a24 	vmul.f32	s19, s20, s9
 801780e:	ee2a 9a05 	vmul.f32	s18, s20, s10
 8017812:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8017816:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 801781a:	ee2a aa25 	vmul.f32	s20, s20, s11
 801781e:	eeb0 5a46 	vmov.f32	s10, s12
 8017822:	eef0 5a46 	vmov.f32	s11, s12
 8017826:	eef0 4a46 	vmov.f32	s9, s12
 801782a:	eeb0 4a46 	vmov.f32	s8, s12
 801782e:	eef0 3a46 	vmov.f32	s7, s12
 8017832:	b2f9      	uxtb	r1, r7
 8017834:	3101      	adds	r1, #1
 8017836:	4411      	add	r1, r2
 8017838:	fb92 f3f0 	sdiv	r3, r2, r0
 801783c:	fb00 2313 	mls	r3, r0, r3, r2
 8017840:	b2db      	uxtb	r3, r3
 8017842:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 8017846:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801784a:	3201      	adds	r2, #1
 801784c:	ee06 4a90 	vmov	s13, r4
 8017850:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8017854:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8017858:	ee07 4a10 	vmov	s14, r4
 801785c:	ee07 3a90 	vmov	s15, r3
 8017860:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017864:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801786c:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8017870:	ee37 7a49 	vsub.f32	s14, s14, s18
 8017874:	ee77 7aca 	vsub.f32	s15, s15, s20
 8017878:	4291      	cmp	r1, r2
 801787a:	eee6 3aa6 	vfma.f32	s7, s13, s13
 801787e:	eea6 4a87 	vfma.f32	s8, s13, s14
 8017882:	eea7 5a07 	vfma.f32	s10, s14, s14
 8017886:	eee6 4aa7 	vfma.f32	s9, s13, s15
 801788a:	eee7 5a27 	vfma.f32	s11, s14, s15
 801788e:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8017892:	d1d1      	bne.n	8017838 <MEMS_runMagCal+0x1434>
 8017894:	edc6 3a00 	vstr	s7, [r6]
 8017898:	ed86 4a01 	vstr	s8, [r6, #4]
 801789c:	edc6 4a02 	vstr	s9, [r6, #8]
 80178a0:	ed86 5a03 	vstr	s10, [r6, #12]
 80178a4:	edc6 5a04 	vstr	s11, [r6, #16]
 80178a8:	ed86 6a05 	vstr	s12, [r6, #20]
 80178ac:	4630      	mov	r0, r6
 80178ae:	a91a      	add	r1, sp, #104	; 0x68
 80178b0:	f7fe fcee 	bl	8016290 <MEMS_EIG3>
 80178b4:	eddd 7a1b 	vldr	s15, [sp, #108]	; 0x6c
 80178b8:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 80178bc:	eeb0 6ae7 	vabs.f32	s12, s15
 80178c0:	eef0 5ae4 	vabs.f32	s11, s9
 80178c4:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 80178c8:	fe86 7a65 	vminnm.f32	s14, s12, s11
 80178cc:	eef0 6ac5 	vabs.f32	s13, s10
 80178d0:	fe86 6a25 	vmaxnm.f32	s12, s12, s11
 80178d4:	fe87 7a66 	vminnm.f32	s14, s14, s13
 80178d8:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 80178dc:	fec6 6a86 	vmaxnm.f32	s13, s13, s12
 80178e0:	ee27 6a25 	vmul.f32	s12, s14, s11
 80178e4:	eef4 6ac6 	vcmpe.f32	s13, s12
 80178e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178ec:	f300 840e 	bgt.w	801810c <MEMS_runMagCal+0x1d08>
 80178f0:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 80178f4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80178f8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80178fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017900:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 8017904:	dd02      	ble.n	801790c <MEMS_runMagCal+0x1508>
 8017906:	2b22      	cmp	r3, #34	; 0x22
 8017908:	f240 8400 	bls.w	801810c <MEMS_runMagCal+0x1d08>
 801790c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017910:	ee07 3a10 	vmov	s14, r3
 8017914:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017918:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801791c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8017920:	eef1 7ae6 	vsqrt.f32	s15, s13
 8017924:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8017bb4 <MEMS_runMagCal+0x17b0>
 8017928:	ee68 7a27 	vmul.f32	s15, s16, s15
 801792c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017934:	f300 83ea 	bgt.w	801810c <MEMS_runMagCal+0x1d08>
 8017938:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801793c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017944:	f100 83e2 	bmi.w	801810c <MEMS_runMagCal+0x1d08>
 8017948:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8017bb8 <MEMS_runMagCal+0x17b4>
 801794c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8017950:	eddd 7a02 	vldr	s15, [sp, #8]
 8017954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017958:	eef4 7ac7 	vcmpe.f32	s15, s14
 801795c:	2300      	movs	r3, #0
 801795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017962:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8017966:	932c      	str	r3, [sp, #176]	; 0xb0
 8017968:	d408      	bmi.n	801797c <MEMS_runMagCal+0x1578>
 801796a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801796e:	ee17 3a10 	vmov	r3, s14
 8017972:	b21b      	sxth	r3, r3
 8017974:	ee07 3a90 	vmov	s15, r3
 8017978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801797c:	eddf 6a96 	vldr	s13, [pc, #600]	; 8017bd8 <MEMS_runMagCal+0x17d4>
 8017980:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8017984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801798c:	dc08      	bgt.n	80179a0 <MEMS_runMagCal+0x159c>
 801798e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017992:	ee17 3a10 	vmov	r3, s14
 8017996:	b21b      	sxth	r3, r3
 8017998:	ee07 3a90 	vmov	s15, r3
 801799c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179a0:	ee27 7a88 	vmul.f32	s14, s15, s16
 80179a4:	eddf 7a85 	vldr	s15, [pc, #532]	; 8017bbc <MEMS_runMagCal+0x17b8>
 80179a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80179ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179b0:	f340 8412 	ble.w	80181d8 <MEMS_runMagCal+0x1dd4>
 80179b4:	eddf 7a82 	vldr	s15, [pc, #520]	; 8017bc0 <MEMS_runMagCal+0x17bc>
 80179b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80179bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179c0:	f140 840a 	bpl.w	80181d8 <MEMS_runMagCal+0x1dd4>
 80179c4:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 8017bc4 <MEMS_runMagCal+0x17c0>
 80179c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80179cc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80179d0:	eee7 7a06 	vfma.f32	s15, s14, s12
 80179d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80179d8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8017bd8 <MEMS_runMagCal+0x17d4>
 80179dc:	ee68 4a29 	vmul.f32	s9, s16, s19
 80179e0:	ee28 5a09 	vmul.f32	s10, s16, s18
 80179e4:	ee68 5a0a 	vmul.f32	s11, s16, s20
 80179e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80179ec:	edc6 4a00 	vstr	s9, [r6]
 80179f0:	ed86 5a01 	vstr	s10, [r6, #4]
 80179f4:	edc6 5a02 	vstr	s11, [r6, #8]
 80179f8:	edc6 7a03 	vstr	s15, [r6, #12]
 80179fc:	edc6 7a06 	vstr	s15, [r6, #24]
 8017a00:	ed9f aa6b 	vldr	s20, [pc, #428]	; 8017bb0 <MEMS_runMagCal+0x17ac>
 8017a04:	eddf 9a70 	vldr	s19, [pc, #448]	; 8017bc8 <MEMS_runMagCal+0x17c4>
 8017a08:	ed9f 9a70 	vldr	s18, [pc, #448]	; 8017bcc <MEMS_runMagCal+0x17c8>
 8017a0c:	9c04      	ldr	r4, [sp, #16]
 8017a0e:	ab11      	add	r3, sp, #68	; 0x44
 8017a10:	eeb0 0a48 	vmov.f32	s0, s16
 8017a14:	4631      	mov	r1, r6
 8017a16:	ee1a 0a90 	vmov	r0, s21
 8017a1a:	aa2d      	add	r2, sp, #180	; 0xb4
 8017a1c:	f7fe fa26 	bl	8015e6c <MEMS_SolveLinearEq>
 8017a20:	1c63      	adds	r3, r4, #1
 8017a22:	2800      	cmp	r0, #0
 8017a24:	f43e aee2 	beq.w	80167ec <MEMS_runMagCal+0x3e8>
 8017a28:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 8017a2c:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8017a30:	eeb0 7ac3 	vabs.f32	s14, s6
 8017a34:	eef0 6ae3 	vabs.f32	s13, s7
 8017a38:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 8017a3c:	fec7 6a26 	vmaxnm.f32	s13, s14, s13
 8017a40:	eeb0 7ac4 	vabs.f32	s14, s8
 8017a44:	fec6 6a8a 	vmaxnm.f32	s13, s13, s20
 8017a48:	fe87 7a26 	vmaxnm.f32	s14, s14, s13
 8017a4c:	edd6 4a00 	vldr	s9, [r6]
 8017a50:	ed96 5a01 	vldr	s10, [r6, #4]
 8017a54:	edd6 5a02 	vldr	s11, [r6, #8]
 8017a58:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8017a5c:	ed96 6a03 	vldr	s12, [r6, #12]
 8017a60:	eeb4 7ae9 	vcmpe.f32	s14, s19
 8017a64:	ee76 6a27 	vadd.f32	s13, s12, s15
 8017a68:	ee74 4a83 	vadd.f32	s9, s9, s6
 8017a6c:	ee35 5a23 	vadd.f32	s10, s10, s7
 8017a70:	ee75 5a84 	vadd.f32	s11, s11, s8
 8017a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a78:	edc6 4a00 	vstr	s9, [r6]
 8017a7c:	ed86 5a01 	vstr	s10, [r6, #4]
 8017a80:	edc6 5a02 	vstr	s11, [r6, #8]
 8017a84:	edc6 6a03 	vstr	s13, [r6, #12]
 8017a88:	eef0 7ae7 	vabs.f32	s15, s15
 8017a8c:	d507      	bpl.n	8017a9e <MEMS_runMagCal+0x169a>
 8017a8e:	eef4 7ac9 	vcmpe.f32	s15, s18
 8017a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a96:	d502      	bpl.n	8017a9e <MEMS_runMagCal+0x169a>
 8017a98:	2c01      	cmp	r4, #1
 8017a9a:	f63e aeab 	bhi.w	80167f4 <MEMS_runMagCal+0x3f0>
 8017a9e:	b2dc      	uxtb	r4, r3
 8017aa0:	2c05      	cmp	r4, #5
 8017aa2:	d1b4      	bne.n	8017a0e <MEMS_runMagCal+0x160a>
 8017aa4:	f7fe bea6 	b.w	80167f4 <MEMS_runMagCal+0x3f0>
 8017aa8:	ed99 5a1e 	vldr	s10, [r9, #120]	; 0x78
 8017aac:	edd9 7a1a 	vldr	s15, [r9, #104]	; 0x68
 8017ab0:	edd9 4a22 	vldr	s9, [r9, #136]	; 0x88
 8017ab4:	ee77 7a85 	vadd.f32	s15, s15, s10
 8017ab8:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8017bd0 <MEMS_runMagCal+0x17cc>
 8017abc:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8017ac0:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8017ac4:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017ac8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8017acc:	fec7 7ae4 	vminnm.f32	s15, s15, s9
 8017ad0:	fec7 7a85 	vmaxnm.f32	s15, s15, s10
 8017ad4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8017ad8:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ae0:	dc0e      	bgt.n	8017b00 <MEMS_runMagCal+0x16fc>
 8017ae2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017ae6:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8017aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aee:	dc07      	bgt.n	8017b00 <MEMS_runMagCal+0x16fc>
 8017af0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8017af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017afc:	f77f ada4 	ble.w	8017648 <MEMS_runMagCal+0x1244>
 8017b00:	2300      	movs	r3, #0
 8017b02:	f889 3000 	strb.w	r3, [r9]
 8017b06:	f7ff b8a8 	b.w	8016c5a <MEMS_runMagCal+0x856>
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8017b0e:	2301      	movs	r3, #1
 8017b10:	9304      	str	r3, [sp, #16]
 8017b12:	f7ff bb90 	b.w	8017236 <MEMS_runMagCal+0xe32>
 8017b16:	3301      	adds	r3, #1
 8017b18:	fb93 f2f6 	sdiv	r2, r3, r6
 8017b1c:	fb06 3212 	mls	r2, r6, r2, r3
 8017b20:	46b4      	mov	ip, r6
 8017b22:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b24:	b212      	sxth	r2, r2
 8017b26:	f7ff bba5 	b.w	8017274 <MEMS_runMagCal+0xe70>
 8017b2a:	eddd 7a07 	vldr	s15, [sp, #28]
 8017b2e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8017bdc <MEMS_runMagCal+0x17d8>
 8017b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017b36:	ee07 3a10 	vmov	s14, r3
 8017b3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017b3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017b42:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8017b46:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8017b4a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b52:	f63f aaa9 	bhi.w	80170a8 <MEMS_runMagCal+0xca4>
 8017b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	f43f a87e 	beq.w	8016c5a <MEMS_runMagCal+0x856>
 8017b5e:	ed9d 7a0b 	vldr	s14, [sp, #44]	; 0x2c
 8017b62:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8017b66:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8017b6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017b6e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b76:	bf4c      	ite	mi
 8017b78:	2301      	movmi	r3, #1
 8017b7a:	2300      	movpl	r3, #0
 8017b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8017b7e:	f7ff ba97 	b.w	80170b0 <MEMS_runMagCal+0xcac>
 8017b82:	1c4a      	adds	r2, r1, #1
 8017b84:	fb92 f1f0 	sdiv	r1, r2, r0
 8017b88:	fb00 2111 	mls	r1, r0, r1, r2
 8017b8c:	4605      	mov	r5, r0
 8017b8e:	b209      	sxth	r1, r1
 8017b90:	f7ff b918 	b.w	8016dc4 <MEMS_runMagCal+0x9c0>
 8017b94:	2200      	movs	r2, #0
 8017b96:	23ff      	movs	r3, #255	; 0xff
 8017b98:	4641      	mov	r1, r8
 8017b9a:	ee1a 0a90 	vmov	r0, s21
 8017b9e:	f889 208c 	strb.w	r2, [r9, #140]	; 0x8c
 8017ba2:	f889 308e 	strb.w	r3, [r9, #142]	; 0x8e
 8017ba6:	f7f7 fe61 	bl	800f86c <MEMS_updateMagBufferIndex>
 8017baa:	f7ff b94b 	b.w	8016e44 <MEMS_runMagCal+0xa40>
 8017bae:	bf00      	nop
 8017bb0:	00000000 	.word	0x00000000
 8017bb4:	42960000 	.word	0x42960000
 8017bb8:	430d0000 	.word	0x430d0000
 8017bbc:	41966667 	.word	0x41966667
 8017bc0:	433c0000 	.word	0x433c0000
 8017bc4:	3c2e4c41 	.word	0x3c2e4c41
 8017bc8:	3e99999a 	.word	0x3e99999a
 8017bcc:	3f666666 	.word	0x3f666666
 8017bd0:	3eaaaaab 	.word	0x3eaaaaab
 8017bd4:	358637bd 	.word	0x358637bd
 8017bd8:	423c0000 	.word	0x423c0000
 8017bdc:	3a83126f 	.word	0x3a83126f
 8017be0:	00000000 	.word	0x00000000
 8017be4:	4b095440 	.word	0x4b095440
 8017be8:	3c23d70a 	.word	0x3c23d70a
 8017bec:	481c4000 	.word	0x481c4000
 8017bf0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8017bf4:	fb05 f303 	mul.w	r3, r5, r3
 8017bf8:	fb05 f202 	mul.w	r2, r5, r2
 8017bfc:	ee07 3a10 	vmov	s14, r3
 8017c00:	fb05 f301 	mul.w	r3, r5, r1
 8017c04:	ee06 2a90 	vmov	s13, r2
 8017c08:	ee07 3a90 	vmov	s15, r3
 8017c0c:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8017bd4 <MEMS_runMagCal+0x17d0>
 8017c10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017c14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017c1c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8017c20:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017c24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017c28:	9d03      	ldr	r5, [sp, #12]
 8017c2a:	9600      	str	r6, [sp, #0]
 8017c2c:	f109 0768 	add.w	r7, r9, #104	; 0x68
 8017c30:	e9c4 0000 	strd	r0, r0, [r4]
 8017c34:	e9c4 0002 	strd	r0, r0, [r4, #8]
 8017c38:	e9c4 0004 	strd	r0, r0, [r4, #16]
 8017c3c:	61a0      	str	r0, [r4, #24]
 8017c3e:	463a      	mov	r2, r7
 8017c40:	ed95 0a01 	vldr	s0, [r5, #4]
 8017c44:	ab0d      	add	r3, sp, #52	; 0x34
 8017c46:	f109 014a 	add.w	r1, r9, #74	; 0x4a
 8017c4a:	ac0e      	add	r4, sp, #56	; 0x38
 8017c4c:	ee1a 0a90 	vmov	r0, s21
 8017c50:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8017c54:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8017c58:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8017c5c:	f7f7 fe92 	bl	800f984 <getMagStats.constprop.0>
 8017c60:	9400      	str	r4, [sp, #0]
 8017c62:	ed95 0a01 	vldr	s0, [r5, #4]
 8017c66:	ee1a 0a90 	vmov	r0, s21
 8017c6a:	aa2d      	add	r2, sp, #180	; 0xb4
 8017c6c:	ab0d      	add	r3, sp, #52	; 0x34
 8017c6e:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8017c72:	f7f7 fe87 	bl	800f984 <getMagStats.constprop.0>
 8017c76:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 8017bd8 <MEMS_runMagCal+0x17d4>
 8017c7a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8017c7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c82:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8017c86:	eef0 7ae7 	vabs.f32	s15, s15
 8017c8a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c92:	ed94 7a00 	vldr	s14, [r4]
 8017c96:	d505      	bpl.n	8017ca4 <MEMS_runMagCal+0x18a0>
 8017c98:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ca0:	f100 81f8 	bmi.w	8018094 <MEMS_runMagCal+0x1c90>
 8017ca4:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8017ca8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cb0:	f140 81a6 	bpl.w	8018000 <MEMS_runMagCal+0x1bfc>
 8017cb4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cbc:	9b04      	ldr	r3, [sp, #16]
 8017cbe:	bfb8      	it	lt
 8017cc0:	2302      	movlt	r3, #2
 8017cc2:	edd6 6a00 	vldr	s13, [r6]
 8017cc6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8017cca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd6:	f57e afc0 	bpl.w	8016c5a <MEMS_runMagCal+0x856>
 8017cda:	f899 2058 	ldrb.w	r2, [r9, #88]	; 0x58
 8017cde:	429a      	cmp	r2, r3
 8017ce0:	f63e afbb 	bhi.w	8016c5a <MEMS_runMagCal+0x856>
 8017ce4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8017ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017cec:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cf4:	d40e      	bmi.n	8017d14 <MEMS_runMagCal+0x1910>
 8017cf6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8017cfa:	eef4 6ae7 	vcmpe.f32	s13, s15
 8017cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d02:	f140 80d5 	bpl.w	8017eb0 <MEMS_runMagCal+0x1aac>
 8017d06:	f899 2048 	ldrb.w	r2, [r9, #72]	; 0x48
 8017d0a:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	f080 80ce 	bcs.w	8017eb0 <MEMS_runMagCal+0x1aac>
 8017d14:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8017d18:	f9b9 104c 	ldrsh.w	r1, [r9, #76]	; 0x4c
 8017d1c:	f9bd c086 	ldrsh.w	ip, [sp, #134]	; 0x86
 8017d20:	f9b9 004a 	ldrsh.w	r0, [r9, #74]	; 0x4a
 8017d24:	eba1 0e06 	sub.w	lr, r1, r6
 8017d28:	eba0 030c 	sub.w	r3, r0, ip
 8017d2c:	f1be 0f00 	cmp.w	lr, #0
 8017d30:	bfb8      	it	lt
 8017d32:	f1ce 0e00 	rsblt	lr, lr, #0
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	bfb8      	it	lt
 8017d3a:	425b      	neglt	r3, r3
 8017d3c:	4573      	cmp	r3, lr
 8017d3e:	bfb8      	it	lt
 8017d40:	4673      	movlt	r3, lr
 8017d42:	f9bd 508a 	ldrsh.w	r5, [sp, #138]	; 0x8a
 8017d46:	f9b9 204e 	ldrsh.w	r2, [r9, #78]	; 0x4e
 8017d4a:	b21b      	sxth	r3, r3
 8017d4c:	eba2 0e05 	sub.w	lr, r2, r5
 8017d50:	f1be 0f00 	cmp.w	lr, #0
 8017d54:	bfb8      	it	lt
 8017d56:	f1ce 0e00 	rsblt	lr, lr, #0
 8017d5a:	4573      	cmp	r3, lr
 8017d5c:	bfb8      	it	lt
 8017d5e:	4673      	movlt	r3, lr
 8017d60:	b21b      	sxth	r3, r3
 8017d62:	ee07 3a90 	vmov	s15, r3
 8017d66:	9b03      	ldr	r3, [sp, #12]
 8017d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017d6c:	edd3 5a01 	vldr	s11, [r3, #4]
 8017d70:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8017d74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8017d78:	eef4 7ac6 	vcmpe.f32	s15, s12
 8017d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d80:	f140 8096 	bpl.w	8017eb0 <MEMS_runMagCal+0x1aac>
 8017d84:	ee37 7a26 	vadd.f32	s14, s14, s13
 8017d88:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017d8c:	ee86 2a87 	vdiv.f32	s4, s13, s14
 8017d90:	ee07 0a90 	vmov	s15, r0
 8017d94:	f8b9 3050 	ldrh.w	r3, [r9, #80]	; 0x50
 8017d98:	ee36 4a42 	vsub.f32	s8, s12, s4
 8017d9c:	ee04 3a90 	vmov	s9, r3
 8017da0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017da4:	ee03 ca90 	vmov	s7, ip
 8017da8:	f8b9 3052 	ldrh.w	r3, [r9, #82]	; 0x52
 8017dac:	ee07 1a90 	vmov	s15, r1
 8017db0:	ee05 3a10 	vmov	s10, r3
 8017db4:	f8b9 3054 	ldrh.w	r3, [r9, #84]	; 0x54
 8017db8:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017dbc:	ee05 3a90 	vmov	s11, r3
 8017dc0:	f899 3048 	ldrb.w	r3, [r9, #72]	; 0x48
 8017dc4:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8017dc8:	ee06 3a10 	vmov	s12, r3
 8017dcc:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8017dd0:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8017dd4:	ee00 3a90 	vmov	s1, r3
 8017dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017ddc:	ee64 4a84 	vmul.f32	s9, s9, s8
 8017de0:	ee03 6a90 	vmov	s7, r6
 8017de4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8017de8:	eee2 6a22 	vfma.f32	s13, s4, s5
 8017dec:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8017df0:	ee07 2a90 	vmov	s15, r2
 8017df4:	ee01 3a10 	vmov	s2, r3
 8017df8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017dfc:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 8017e00:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017e04:	eee2 4a20 	vfma.f32	s9, s4, s1
 8017e08:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017e0c:	ee25 5a04 	vmul.f32	s10, s10, s8
 8017e10:	ee16 2a90 	vmov	r2, s13
 8017e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e18:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8017e1c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8017e20:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8017e24:	ee03 5a90 	vmov	s7, r5
 8017e28:	eea2 7a03 	vfma.f32	s14, s4, s6
 8017e2c:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 8017e30:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8017e34:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017e38:	ee01 3a90 	vmov	s3, r3
 8017e3c:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8017e40:	ee65 5a84 	vmul.f32	s11, s11, s8
 8017e44:	ee26 6a04 	vmul.f32	s12, s12, s8
 8017e48:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8017e4c:	ee04 3a10 	vmov	s8, r3
 8017e50:	eea2 5a01 	vfma.f32	s10, s4, s2
 8017e54:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8017e58:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 8017e5c:	ee14 2a90 	vmov	r2, s9
 8017e60:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017e64:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8017e68:	eee2 7a23 	vfma.f32	s15, s4, s7
 8017e6c:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8017e70:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8017e74:	ee17 2a10 	vmov	r2, s14
 8017e78:	eee2 5a21 	vfma.f32	s11, s4, s3
 8017e7c:	eea2 6a04 	vfma.f32	s12, s4, s8
 8017e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e84:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 8017e88:	ee15 2a10 	vmov	r2, s10
 8017e8c:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8017e90:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8017e94:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8017e98:	ee17 2a90 	vmov	r2, s15
 8017e9c:	ee16 3a10 	vmov	r3, s12
 8017ea0:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8017ea4:	ee15 2a90 	vmov	r2, s11
 8017ea8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8017eac:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 8017eb0:	f8dd c080 	ldr.w	ip, [sp, #128]	; 0x80
 8017eb4:	f899 508c 	ldrb.w	r5, [r9, #140]	; 0x8c
 8017eb8:	f7fe bdc2 	b.w	8016a40 <MEMS_runMagCal+0x63c>
 8017ebc:	4641      	mov	r1, r8
 8017ebe:	ee1a 0a90 	vmov	r0, s21
 8017ec2:	f7f7 fcd3 	bl	800f86c <MEMS_updateMagBufferIndex>
 8017ec6:	f7ff b8c1 	b.w	801704c <MEMS_runMagCal+0xc48>
 8017eca:	eddd 7a07 	vldr	s15, [sp, #28]
 8017ece:	ed1f 7abd 	vldr	s14, [pc, #-756]	; 8017bdc <MEMS_runMagCal+0x17d8>
 8017ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017eda:	e640      	b.n	8017b5e <MEMS_runMagCal+0x175a>
 8017edc:	1c62      	adds	r2, r4, #1
 8017ede:	ed5f 6ac0 	vldr	s13, [pc, #-768]	; 8017be0 <MEMS_runMagCal+0x17dc>
 8017ee2:	fb92 f5f1 	sdiv	r5, r2, r1
 8017ee6:	ac0e      	add	r4, sp, #56	; 0x38
 8017ee8:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8017eec:	fb01 2215 	mls	r2, r1, r5, r2
 8017ef0:	fa1f fc81 	uxth.w	ip, r1
 8017ef4:	edc4 6a00 	vstr	s13, [r4]
 8017ef8:	2900      	cmp	r1, #0
 8017efa:	f000 80e1 	beq.w	80180c0 <MEMS_runMagCal+0x1cbc>
 8017efe:	b292      	uxth	r2, r2
 8017f00:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017f04:	1c56      	adds	r6, r2, #1
 8017f06:	f241 2e5c 	movw	lr, #4700	; 0x125c
 8017f0a:	eeb0 6a66 	vmov.f32	s12, s13
 8017f0e:	4615      	mov	r5, r2
 8017f10:	fa16 fc8c 	uxtah	ip, r6, ip
 8017f14:	e000      	b.n	8017f18 <MEMS_runMagCal+0x1b14>
 8017f16:	3601      	adds	r6, #1
 8017f18:	fbb5 f2f1 	udiv	r2, r5, r1
 8017f1c:	fb01 5212 	mls	r2, r1, r2, r5
 8017f20:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 8017f24:	8a95      	ldrh	r5, [r2, #20]
 8017f26:	ee07 5a90 	vmov	s15, r5
 8017f2a:	4575      	cmp	r5, lr
 8017f2c:	f5a5 5292 	sub.w	r2, r5, #4672	; 0x1240
 8017f30:	f1a2 021c 	sub.w	r2, r2, #28
 8017f34:	bf98      	it	ls
 8017f36:	ebae 0205 	subls.w	r2, lr, r5
 8017f3a:	b292      	uxth	r2, r2
 8017f3c:	fb02 f202 	mul.w	r2, r2, r2
 8017f40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8017f44:	ee07 2a90 	vmov	s15, r2
 8017f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f4c:	45b4      	cmp	ip, r6
 8017f4e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8017f52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8017f56:	4635      	mov	r5, r6
 8017f58:	d1dd      	bne.n	8017f16 <MEMS_runMagCal+0x1b12>
 8017f5a:	ee07 3a90 	vmov	s15, r3
 8017f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f62:	ed5f 5ae0 	vldr	s11, [pc, #-896]	; 8017be4 <MEMS_runMagCal+0x17e0>
 8017f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017f6a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8017f6e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8017f72:	ed5f 7ae3 	vldr	s15, [pc, #-908]	; 8017be8 <MEMS_runMagCal+0x17e4>
 8017f76:	eeb1 6ac7 	vsqrt.f32	s12, s14
 8017f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f7e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8017f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017f86:	ed84 6a00 	vstr	s12, [r4]
 8017f8a:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8017f8e:	dd45      	ble.n	801801c <MEMS_runMagCal+0x1c18>
 8017f90:	ed5f 7aea 	vldr	s15, [pc, #-936]	; 8017bec <MEMS_runMagCal+0x17e8>
 8017f94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017f98:	2302      	movs	r3, #2
 8017f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f9e:	f889 3058 	strb.w	r3, [r9, #88]	; 0x58
 8017fa2:	f77e aecd 	ble.w	8016d40 <MEMS_runMagCal+0x93c>
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	f889 3001 	strb.w	r3, [r9, #1]
 8017fac:	f7fe bec8 	b.w	8016d40 <MEMS_runMagCal+0x93c>
 8017fb0:	4641      	mov	r1, r8
 8017fb2:	ee1a 0a90 	vmov	r0, s21
 8017fb6:	f7f7 fc59 	bl	800f86c <MEMS_updateMagBufferIndex>
 8017fba:	f7fe bf2e 	b.w	8016e1a <MEMS_runMagCal+0xa16>
 8017fbe:	9b02      	ldr	r3, [sp, #8]
 8017fc0:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
 8017fc4:	eb09 0ac3 	add.w	sl, r9, r3, lsl #3
 8017fc8:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 8017fcc:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8017fd0:	4413      	add	r3, r2
 8017fd2:	4299      	cmp	r1, r3
 8017fd4:	f4bf ad94 	bcs.w	8017b00 <MEMS_runMagCal+0x16fc>
 8017fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017fde:	fb03 f301 	mul.w	r3, r3, r1
 8017fe2:	3364      	adds	r3, #100	; 0x64
 8017fe4:	4293      	cmp	r3, r2
 8017fe6:	bf38      	it	cc
 8017fe8:	4613      	movcc	r3, r2
 8017fea:	2200      	movs	r2, #0
 8017fec:	f8c9 300c 	str.w	r3, [r9, #12]
 8017ff0:	f889 2000 	strb.w	r2, [r9]
 8017ff4:	f7fe be31 	b.w	8016c5a <MEMS_runMagCal+0x856>
 8017ff8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8017ffc:	f7ff ba9c 	b.w	8017538 <MEMS_runMagCal+0x1134>
 8018000:	9b04      	ldr	r3, [sp, #16]
 8018002:	e65e      	b.n	8017cc2 <MEMS_runMagCal+0x18be>
 8018004:	4619      	mov	r1, r3
 8018006:	9b02      	ldr	r3, [sp, #8]
 8018008:	468a      	mov	sl, r1
 801800a:	3301      	adds	r3, #1
 801800c:	fb93 f2f1 	sdiv	r2, r3, r1
 8018010:	fb01 3212 	mls	r2, r1, r2, r3
 8018014:	9305      	str	r3, [sp, #20]
 8018016:	b212      	sxth	r2, r2
 8018018:	f7ff ba3e 	b.w	8017498 <MEMS_runMagCal+0x1094>
 801801c:	eddf 7abf 	vldr	s15, [pc, #764]	; 801831c <MEMS_runMagCal+0x1f18>
 8018020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018028:	d436      	bmi.n	8018098 <MEMS_runMagCal+0x1c94>
 801802a:	eddf 7abd 	vldr	s15, [pc, #756]	; 8018320 <MEMS_runMagCal+0x1f1c>
 801802e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018036:	bfc4      	itt	gt
 8018038:	2301      	movgt	r3, #1
 801803a:	f889 3001 	strbgt.w	r3, [r9, #1]
 801803e:	f7ff b8bc 	b.w	80171ba <MEMS_runMagCal+0xdb6>
 8018042:	9b03      	ldr	r3, [sp, #12]
 8018044:	f899 0011 	ldrb.w	r0, [r9, #17]
 8018048:	ed93 0a01 	vldr	s0, [r3, #4]
 801804c:	f7fe bda8 	b.w	8016ba0 <MEMS_runMagCal+0x79c>
 8018050:	2303      	movs	r3, #3
 8018052:	9304      	str	r3, [sp, #16]
 8018054:	f7fe bdf7 	b.w	8016c46 <MEMS_runMagCal+0x842>
 8018058:	4619      	mov	r1, r3
 801805a:	f7ff baa4 	b.w	80175a6 <MEMS_runMagCal+0x11a2>
 801805e:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8018062:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8018066:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801806a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801806e:	f73f ad47 	bgt.w	8017b00 <MEMS_runMagCal+0x16fc>
 8018072:	ee26 6a27 	vmul.f32	s12, s12, s15
 8018076:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801807a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801807e:	f73f ad3f 	bgt.w	8017b00 <MEMS_runMagCal+0x16fc>
 8018082:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8018086:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801808a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801808e:	f77f aadb 	ble.w	8017648 <MEMS_runMagCal+0x1244>
 8018092:	e535      	b.n	8017b00 <MEMS_runMagCal+0x16fc>
 8018094:	2303      	movs	r3, #3
 8018096:	e614      	b.n	8017cc2 <MEMS_runMagCal+0x18be>
 8018098:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8018320 <MEMS_runMagCal+0x1f1c>
 801809c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80180a0:	2300      	movs	r3, #0
 80180a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180a6:	f889 3001 	strb.w	r3, [r9, #1]
 80180aa:	f04f 0203 	mov.w	r2, #3
 80180ae:	bfc8      	it	gt
 80180b0:	2301      	movgt	r3, #1
 80180b2:	f889 2058 	strb.w	r2, [r9, #88]	; 0x58
 80180b6:	bfc8      	it	gt
 80180b8:	f889 3001 	strbgt.w	r3, [r9, #1]
 80180bc:	f7ff b880 	b.w	80171c0 <MEMS_runMagCal+0xdbc>
 80180c0:	2303      	movs	r3, #3
 80180c2:	f889 c001 	strb.w	ip, [r9, #1]
 80180c6:	f889 3058 	strb.w	r3, [r9, #88]	; 0x58
 80180ca:	f7ff b879 	b.w	80171c0 <MEMS_runMagCal+0xdbc>
 80180ce:	9b05      	ldr	r3, [sp, #20]
 80180d0:	fb93 f7fa 	sdiv	r7, r3, sl
 80180d4:	fb0a 3717 	mls	r7, sl, r7, r3
 80180d8:	b23f      	sxth	r7, r7
 80180da:	f7ff bac4 	b.w	8017666 <MEMS_runMagCal+0x1262>
 80180de:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8018324 <MEMS_runMagCal+0x1f20>
 80180e2:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80180e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80180ea:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80180ee:	ee17 2a90 	vmov	r2, s15
 80180f2:	f899 308c 	ldrb.w	r3, [r9, #140]	; 0x8c
 80180f6:	ee87 0a08 	vdiv.f32	s0, s14, s16
 80180fa:	b291      	uxth	r1, r2
 80180fc:	b113      	cbz	r3, 8018104 <MEMS_runMagCal+0x1d00>
 80180fe:	3b01      	subs	r3, #1
 8018100:	f889 308c 	strb.w	r3, [r9, #140]	; 0x8c
 8018104:	ee1a 0a90 	vmov	r0, s21
 8018108:	f7f7 fbb0 	bl	800f86c <MEMS_updateMagBufferIndex>
 801810c:	eddd 7a07 	vldr	s15, [sp, #28]
 8018110:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8018328 <MEMS_runMagCal+0x1f24>
 8018114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8018118:	ee67 7a87 	vmul.f32	s15, s15, s14
 801811c:	fef8 7a67 	vrinta.f32	s15, s15
 8018120:	2300      	movs	r3, #0
 8018122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8018126:	f889 3000 	strb.w	r3, [r9]
 801812a:	edc9 7a01 	vstr	s15, [r9, #4]
 801812e:	f7fe bd94 	b.w	8016c5a <MEMS_runMagCal+0x856>
 8018132:	fb93 f2f5 	sdiv	r2, r3, r5
 8018136:	fb05 3312 	mls	r3, r5, r2, r3
 801813a:	4628      	mov	r0, r5
 801813c:	b21a      	sxth	r2, r3
 801813e:	f7ff bb28 	b.w	8017792 <MEMS_runMagCal+0x138e>
 8018142:	edd9 6a17 	vldr	s13, [r9, #92]	; 0x5c
 8018146:	ed99 7a18 	vldr	s14, [r9, #96]	; 0x60
 801814a:	edd9 7a19 	vldr	s15, [r9, #100]	; 0x64
 801814e:	fef8 6a66 	vrinta.f32	s13, s13
 8018152:	feb8 7a47 	vrinta.f32	s14, s14
 8018156:	fef8 7a67 	vrinta.f32	s15, s15
 801815a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801815e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018162:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8018166:	ee17 0a10 	vmov	r0, s14
 801816a:	ee16 2a90 	vmov	r2, s13
 801816e:	ee17 5a90 	vmov	r5, s15
 8018172:	f10d 0b4c 	add.w	fp, sp, #76	; 0x4c
 8018176:	ac0f      	add	r4, sp, #60	; 0x3c
 8018178:	9400      	str	r4, [sp, #0]
 801817a:	4659      	mov	r1, fp
 801817c:	f8ab 2000 	strh.w	r2, [fp]
 8018180:	f8ab 0002 	strh.w	r0, [fp, #2]
 8018184:	eeb0 0a48 	vmov.f32	s0, s16
 8018188:	ee1a 0a90 	vmov	r0, s21
 801818c:	ab10      	add	r3, sp, #64	; 0x40
 801818e:	f109 0268 	add.w	r2, r9, #104	; 0x68
 8018192:	f8ab 5004 	strh.w	r5, [fp, #4]
 8018196:	f7f7 fbf5 	bl	800f984 <getMagStats.constprop.0>
 801819a:	ed94 7a00 	vldr	s14, [r4]
 801819e:	eddf 7a63 	vldr	s15, [pc, #396]	; 801832c <MEMS_runMagCal+0x1f28>
 80181a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80181a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181aa:	d50e      	bpl.n	80181ca <MEMS_runMagCal+0x1dc6>
 80181ac:	b968      	cbnz	r0, 80181ca <MEMS_runMagCal+0x1dc6>
 80181ae:	f899 3040 	ldrb.w	r3, [r9, #64]	; 0x40
 80181b2:	b32b      	cbz	r3, 8018200 <MEMS_runMagCal+0x1dfc>
 80181b4:	f899 3049 	ldrb.w	r3, [r9, #73]	; 0x49
 80181b8:	ee07 3a90 	vmov	s15, r3
 80181bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181c0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80181c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181c8:	dc1a      	bgt.n	8018200 <MEMS_runMagCal+0x1dfc>
 80181ca:	2300      	movs	r3, #0
 80181cc:	f8cb 3000 	str.w	r3, [fp]
 80181d0:	f8ab 3004 	strh.w	r3, [fp, #4]
 80181d4:	f7ff babf 	b.w	8017756 <MEMS_runMagCal+0x1352>
 80181d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80181dc:	f7ff bbfc 	b.w	80179d8 <MEMS_runMagCal+0x15d4>
 80181e0:	eddf 5a53 	vldr	s11, [pc, #332]	; 8018330 <MEMS_runMagCal+0x1f2c>
 80181e4:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 80181e8:	ed9d 5a1e 	vldr	s10, [sp, #120]	; 0x78
 80181ec:	ed9d aa1f 	vldr	s20, [sp, #124]	; 0x7c
 80181f0:	ee65 9aa4 	vmul.f32	s19, s11, s9
 80181f4:	ee25 9a85 	vmul.f32	s18, s11, s10
 80181f8:	ee25 aa8a 	vmul.f32	s20, s11, s20
 80181fc:	f7ff bb56 	b.w	80178ac <MEMS_runMagCal+0x14a8>
 8018200:	eddd 7a07 	vldr	s15, [sp, #28]
 8018204:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8018328 <MEMS_runMagCal+0x1f24>
 8018208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801820c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018210:	fef8 7a67 	vrinta.f32	s15, s15
 8018214:	2203      	movs	r2, #3
 8018216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801821a:	2300      	movs	r3, #0
 801821c:	edc9 7a01 	vstr	s15, [r9, #4]
 8018220:	f889 2058 	strb.w	r2, [r9, #88]	; 0x58
 8018224:	f889 3000 	strb.w	r3, [r9]
 8018228:	f7fe bd17 	b.w	8016c5a <MEMS_runMagCal+0x856>
 801822c:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8018334 <MEMS_runMagCal+0x1f30>
 8018230:	eef4 7ac5 	vcmpe.f32	s15, s10
 8018234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018238:	f77e ab36 	ble.w	80168a8 <MEMS_runMagCal+0x4a4>
 801823c:	f7fe bb3c 	b.w	80168b8 <MEMS_runMagCal+0x4b4>
 8018240:	2224      	movs	r2, #36	; 0x24
 8018242:	2100      	movs	r1, #0
 8018244:	a82d      	add	r0, sp, #180	; 0xb4
 8018246:	f002 fd40 	bl	801acca <memset>
 801824a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8018338 <MEMS_runMagCal+0x1f34>
 801824e:	4631      	mov	r1, r6
 8018250:	ee87 7a89 	vdiv.f32	s14, s15, s18
 8018254:	2300      	movs	r3, #0
 8018256:	a815      	add	r0, sp, #84	; 0x54
 8018258:	aa2d      	add	r2, sp, #180	; 0xb4
 801825a:	ecf1 7a01 	vldmia	r1!, {s15}
 801825e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8018262:	fef8 7a67 	vrinta.f32	s15, s15
 8018266:	4614      	mov	r4, r2
 8018268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801826c:	ed84 7a00 	vstr	s14, [r4]
 8018270:	ee17 4a90 	vmov	r4, s15
 8018274:	3301      	adds	r3, #1
 8018276:	2b03      	cmp	r3, #3
 8018278:	f102 0210 	add.w	r2, r2, #16
 801827c:	f820 4b02 	strh.w	r4, [r0], #2
 8018280:	d1eb      	bne.n	801825a <MEMS_runMagCal+0x1e56>
 8018282:	ac12      	add	r4, sp, #72	; 0x48
 8018284:	9400      	str	r4, [sp, #0]
 8018286:	ab2b      	add	r3, sp, #172	; 0xac
 8018288:	eeb0 0a48 	vmov.f32	s0, s16
 801828c:	ee1a 0a90 	vmov	r0, s21
 8018290:	a915      	add	r1, sp, #84	; 0x54
 8018292:	aa2d      	add	r2, sp, #180	; 0xb4
 8018294:	f7f7 fb76 	bl	800f984 <getMagStats.constprop.0>
 8018298:	ed96 5a06 	vldr	s10, [r6, #24]
 801829c:	ed94 7a00 	vldr	s14, [r4]
 80182a0:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
 80182a4:	eddf 5a24 	vldr	s11, [pc, #144]	; 8018338 <MEMS_runMagCal+0x1f34>
 80182a8:	ed96 6a03 	vldr	s12, [r6, #12]
 80182ac:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 80182b0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80182b4:	2300      	movs	r3, #0
 80182b6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80182ba:	ed96 6a00 	vldr	s12, [r6]
 80182be:	ed96 4a01 	vldr	s8, [r6, #4]
 80182c2:	edd6 4a02 	vldr	s9, [r6, #8]
 80182c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182ca:	ac2e      	add	r4, sp, #184	; 0xb8
 80182cc:	e9c4 3300 	strd	r3, r3, [r4]
 80182d0:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80182d4:	60a3      	str	r3, [r4, #8]
 80182d6:	61a3      	str	r3, [r4, #24]
 80182d8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80182dc:	eec6 5a08 	vdiv.f32	s11, s12, s16
 80182e0:	ee37 7a07 	vadd.f32	s14, s14, s14
 80182e4:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 80182e8:	edcd 7a31 	vstr	s15, [sp, #196]	; 0xc4
 80182ec:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80182f0:	ee84 6a08 	vdiv.f32	s12, s8, s16
 80182f4:	eec4 6a88 	vdiv.f32	s13, s9, s16
 80182f8:	d405      	bmi.n	8018306 <MEMS_runMagCal+0x1f02>
 80182fa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80182fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018302:	f57e aab7 	bpl.w	8016874 <MEMS_runMagCal+0x470>
 8018306:	eddf 2a0d 	vldr	s5, [pc, #52]	; 801833c <MEMS_runMagCal+0x1f38>
 801830a:	f7fe bab9 	b.w	8016880 <MEMS_runMagCal+0x47c>
 801830e:	f644 41f4 	movw	r1, #19700	; 0x4cf4
 8018312:	428b      	cmp	r3, r1
 8018314:	f67e acdb 	bls.w	8016cce <MEMS_runMagCal+0x8ca>
 8018318:	f7fe bccf 	b.w	8016cba <MEMS_runMagCal+0x8b6>
 801831c:	471c4000 	.word	0x471c4000
 8018320:	481c4000 	.word	0x481c4000
 8018324:	433d0000 	.word	0x433d0000
 8018328:	3a83126f 	.word	0x3a83126f
 801832c:	3ff4cccd 	.word	0x3ff4cccd
 8018330:	7f800000 	.word	0x7f800000
 8018334:	3ee66666 	.word	0x3ee66666
 8018338:	423c0000 	.word	0x423c0000
 801833c:	00000000 	.word	0x00000000

08018340 <MotionFX_GetStateSize>:
 8018340:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8018344:	4770      	bx	lr
 8018346:	bf00      	nop

08018348 <MotionFX_initialize>:
 8018348:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801834c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801834e:	f24c 2640 	movw	r6, #49728	; 0xc240
 8018352:	4d3a      	ldr	r5, [pc, #232]	; (801843c <MotionFX_initialize+0xf4>)
 8018354:	493a      	ldr	r1, [pc, #232]	; (8018440 <MotionFX_initialize+0xf8>)
 8018356:	682b      	ldr	r3, [r5, #0]
 8018358:	4604      	mov	r4, r0
 801835a:	f023 0301 	bic.w	r3, r3, #1
 801835e:	602b      	str	r3, [r5, #0]
 8018360:	680b      	ldr	r3, [r1, #0]
 8018362:	b085      	sub	sp, #20
 8018364:	4013      	ands	r3, r2
 8018366:	42b3      	cmp	r3, r6
 8018368:	d014      	beq.n	8018394 <MotionFX_initialize+0x4c>
 801836a:	f24c 2070 	movw	r0, #49776	; 0xc270
 801836e:	680b      	ldr	r3, [r1, #0]
 8018370:	4013      	ands	r3, r2
 8018372:	4283      	cmp	r3, r0
 8018374:	d00e      	beq.n	8018394 <MotionFX_initialize+0x4c>
 8018376:	4b33      	ldr	r3, [pc, #204]	; (8018444 <MotionFX_initialize+0xfc>)
 8018378:	2201      	movs	r2, #1
 801837a:	4619      	mov	r1, r3
 801837c:	601a      	str	r2, [r3, #0]
 801837e:	680b      	ldr	r3, [r1, #0]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d1fc      	bne.n	801837e <MotionFX_initialize+0x36>
 8018384:	4b30      	ldr	r3, [pc, #192]	; (8018448 <MotionFX_initialize+0x100>)
 8018386:	4931      	ldr	r1, [pc, #196]	; (801844c <MotionFX_initialize+0x104>)
 8018388:	4a31      	ldr	r2, [pc, #196]	; (8018450 <MotionFX_initialize+0x108>)
 801838a:	6019      	str	r1, [r3, #0]
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	4293      	cmp	r3, r2
 8018390:	d020      	beq.n	80183d4 <MotionFX_initialize+0x8c>
 8018392:	e7fe      	b.n	8018392 <MotionFX_initialize+0x4a>
 8018394:	4b2f      	ldr	r3, [pc, #188]	; (8018454 <MotionFX_initialize+0x10c>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	2b00      	cmp	r3, #0
 801839a:	d1ec      	bne.n	8018376 <MotionFX_initialize+0x2e>
 801839c:	4a2e      	ldr	r2, [pc, #184]	; (8018458 <MotionFX_initialize+0x110>)
 801839e:	6813      	ldr	r3, [r2, #0]
 80183a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80183a4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80183a8:	d006      	beq.n	80183b8 <MotionFX_initialize+0x70>
 80183aa:	f240 4183 	movw	r1, #1155	; 0x483
 80183ae:	6813      	ldr	r3, [r2, #0]
 80183b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80183b4:	428b      	cmp	r3, r1
 80183b6:	d1de      	bne.n	8018376 <MotionFX_initialize+0x2e>
 80183b8:	4b28      	ldr	r3, [pc, #160]	; (801845c <MotionFX_initialize+0x114>)
 80183ba:	2201      	movs	r2, #1
 80183bc:	4619      	mov	r1, r3
 80183be:	601a      	str	r2, [r3, #0]
 80183c0:	680b      	ldr	r3, [r1, #0]
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d1fc      	bne.n	80183c0 <MotionFX_initialize+0x78>
 80183c6:	4b26      	ldr	r3, [pc, #152]	; (8018460 <MotionFX_initialize+0x118>)
 80183c8:	4920      	ldr	r1, [pc, #128]	; (801844c <MotionFX_initialize+0x104>)
 80183ca:	4a21      	ldr	r2, [pc, #132]	; (8018450 <MotionFX_initialize+0x108>)
 80183cc:	6019      	str	r1, [r3, #0]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	4293      	cmp	r3, r2
 80183d2:	d1de      	bne.n	8018392 <MotionFX_initialize+0x4a>
 80183d4:	2501      	movs	r5, #1
 80183d6:	4b23      	ldr	r3, [pc, #140]	; (8018464 <MotionFX_initialize+0x11c>)
 80183d8:	4a23      	ldr	r2, [pc, #140]	; (8018468 <MotionFX_initialize+0x120>)
 80183da:	4620      	mov	r0, r4
 80183dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80183e0:	7115      	strb	r5, [r2, #4]
 80183e2:	9303      	str	r3, [sp, #12]
 80183e4:	f7f7 fbae 	bl	800fb44 <MFX_emptyAttitude>
 80183e8:	a901      	add	r1, sp, #4
 80183ea:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80183ee:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 80183f2:	f7f6 fee5 	bl	800f1c0 <updateOrientation>
 80183f6:	a903      	add	r1, sp, #12
 80183f8:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80183fc:	f7f6 fee0 	bl	800f1c0 <updateOrientation>
 8018400:	a902      	add	r1, sp, #8
 8018402:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018406:	f7f6 fedb 	bl	800f1c0 <updateOrientation>
 801840a:	4918      	ldr	r1, [pc, #96]	; (801846c <MotionFX_initialize+0x124>)
 801840c:	4a18      	ldr	r2, [pc, #96]	; (8018470 <MotionFX_initialize+0x128>)
 801840e:	4b19      	ldr	r3, [pc, #100]	; (8018474 <MotionFX_initialize+0x12c>)
 8018410:	f04f 567f 	mov.w	r6, #1069547520	; 0x3fc00000
 8018414:	6361      	str	r1, [r4, #52]	; 0x34
 8018416:	61a2      	str	r2, [r4, #24]
 8018418:	2100      	movs	r1, #0
 801841a:	f44f 7281 	mov.w	r2, #258	; 0x102
 801841e:	61e3      	str	r3, [r4, #28]
 8018420:	f240 1301 	movw	r3, #257	; 0x101
 8018424:	4f14      	ldr	r7, [pc, #80]	; (8018478 <MotionFX_initialize+0x130>)
 8018426:	4815      	ldr	r0, [pc, #84]	; (801847c <MotionFX_initialize+0x134>)
 8018428:	62a7      	str	r7, [r4, #40]	; 0x28
 801842a:	62e6      	str	r6, [r4, #44]	; 0x2c
 801842c:	6220      	str	r0, [r4, #32]
 801842e:	7365      	strb	r5, [r4, #13]
 8018430:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8018434:	80a2      	strh	r2, [r4, #4]
 8018436:	81e3      	strh	r3, [r4, #14]
 8018438:	b005      	add	sp, #20
 801843a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801843c:	e0002000 	.word	0xe0002000
 8018440:	e000ed00 	.word	0xe000ed00
 8018444:	40023008 	.word	0x40023008
 8018448:	40023000 	.word	0x40023000
 801844c:	f407a5c2 	.word	0xf407a5c2
 8018450:	b5e8b5cd 	.word	0xb5e8b5cd
 8018454:	e0042000 	.word	0xe0042000
 8018458:	5c001000 	.word	0x5c001000
 801845c:	58024c08 	.word	0x58024c08
 8018460:	58024c00 	.word	0x58024c00
 8018464:	00756e65 	.word	0x00756e65
 8018468:	20000138 	.word	0x20000138
 801846c:	3f2ac083 	.word	0x3f2ac083
 8018470:	3a51b717 	.word	0x3a51b717
 8018474:	3a378034 	.word	0x3a378034
 8018478:	3f666666 	.word	0x3f666666
 801847c:	3b378034 	.word	0x3b378034

08018480 <MotionFX_setKnobs>:
 8018480:	4b24      	ldr	r3, [pc, #144]	; (8018514 <MotionFX_setKnobs+0x94>)
 8018482:	791b      	ldrb	r3, [r3, #4]
 8018484:	b903      	cbnz	r3, 8018488 <MotionFX_setKnobs+0x8>
 8018486:	4770      	bx	lr
 8018488:	2900      	cmp	r1, #0
 801848a:	d0fc      	beq.n	8018486 <MotionFX_setKnobs+0x6>
 801848c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801848e:	4604      	mov	r4, r0
 8018490:	684a      	ldr	r2, [r1, #4]
 8018492:	6808      	ldr	r0, [r1, #0]
 8018494:	688b      	ldr	r3, [r1, #8]
 8018496:	62a0      	str	r0, [r4, #40]	; 0x28
 8018498:	6363      	str	r3, [r4, #52]	; 0x34
 801849a:	62e2      	str	r2, [r4, #44]	; 0x2c
 801849c:	7b0a      	ldrb	r2, [r1, #12]
 801849e:	460b      	mov	r3, r1
 80184a0:	7162      	strb	r2, [r4, #5]
 80184a2:	6948      	ldr	r0, [r1, #20]
 80184a4:	690d      	ldr	r5, [r1, #16]
 80184a6:	698a      	ldr	r2, [r1, #24]
 80184a8:	61e0      	str	r0, [r4, #28]
 80184aa:	4608      	mov	r0, r1
 80184ac:	6222      	str	r2, [r4, #32]
 80184ae:	460a      	mov	r2, r1
 80184b0:	61a5      	str	r5, [r4, #24]
 80184b2:	7f0d      	ldrb	r5, [r1, #28]
 80184b4:	b085      	sub	sp, #20
 80184b6:	7125      	strb	r5, [r4, #4]
 80184b8:	f891 5029 	ldrb.w	r5, [r1, #41]	; 0x29
 80184bc:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 80184c0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80184c2:	f884 1978 	strb.w	r1, [r4, #2424]	; 0x978
 80184c6:	f830 6f21 	ldrh.w	r6, [r0, #33]!
 80184ca:	f833 7f1d 	ldrh.w	r7, [r3, #29]!
 80184ce:	7885      	ldrb	r5, [r0, #2]
 80184d0:	f832 0f25 	ldrh.w	r0, [r2, #37]!
 80184d4:	7899      	ldrb	r1, [r3, #2]
 80184d6:	f8ad 7004 	strh.w	r7, [sp, #4]
 80184da:	7893      	ldrb	r3, [r2, #2]
 80184dc:	f88d 1006 	strb.w	r1, [sp, #6]
 80184e0:	f8ad 000c 	strh.w	r0, [sp, #12]
 80184e4:	a901      	add	r1, sp, #4
 80184e6:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80184ea:	f8ad 6008 	strh.w	r6, [sp, #8]
 80184ee:	f88d 500a 	strb.w	r5, [sp, #10]
 80184f2:	f88d 300e 	strb.w	r3, [sp, #14]
 80184f6:	f7f6 fe63 	bl	800f1c0 <updateOrientation>
 80184fa:	a903      	add	r1, sp, #12
 80184fc:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8018500:	f7f6 fe5e 	bl	800f1c0 <updateOrientation>
 8018504:	a902      	add	r1, sp, #8
 8018506:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801850a:	f7f6 fe59 	bl	800f1c0 <updateOrientation>
 801850e:	b005      	add	sp, #20
 8018510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018512:	bf00      	nop
 8018514:	20000138 	.word	0x20000138

08018518 <MotionFX_getKnobs>:
 8018518:	b538      	push	{r3, r4, r5, lr}
 801851a:	4b1c      	ldr	r3, [pc, #112]	; (801858c <MotionFX_getKnobs+0x74>)
 801851c:	791b      	ldrb	r3, [r3, #4]
 801851e:	b903      	cbnz	r3, 8018522 <MotionFX_getKnobs+0xa>
 8018520:	bd38      	pop	{r3, r4, r5, pc}
 8018522:	460a      	mov	r2, r1
 8018524:	2900      	cmp	r1, #0
 8018526:	d0fb      	beq.n	8018520 <MotionFX_getKnobs+0x8>
 8018528:	4604      	mov	r4, r0
 801852a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801852c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801852e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018530:	6010      	str	r0, [r2, #0]
 8018532:	6051      	str	r1, [r2, #4]
 8018534:	6093      	str	r3, [r2, #8]
 8018536:	7963      	ldrb	r3, [r4, #5]
 8018538:	f102 011d 	add.w	r1, r2, #29
 801853c:	7313      	strb	r3, [r2, #12]
 801853e:	69e0      	ldr	r0, [r4, #28]
 8018540:	6a23      	ldr	r3, [r4, #32]
 8018542:	69a5      	ldr	r5, [r4, #24]
 8018544:	6150      	str	r0, [r2, #20]
 8018546:	6115      	str	r5, [r2, #16]
 8018548:	6193      	str	r3, [r2, #24]
 801854a:	7923      	ldrb	r3, [r4, #4]
 801854c:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8018550:	7713      	strb	r3, [r2, #28]
 8018552:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018556:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 801855a:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 801855e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8018560:	f7f6 fc88 	bl	800ee74 <findAxis>
 8018564:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018568:	f102 0121 	add.w	r1, r2, #33	; 0x21
 801856c:	f7f6 fc82 	bl	800ee74 <findAxis>
 8018570:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8018574:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8018578:	f7f6 fc7c 	bl	800ee74 <findAxis>
 801857c:	2300      	movs	r3, #0
 801857e:	f882 3020 	strb.w	r3, [r2, #32]
 8018582:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8018586:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801858a:	bd38      	pop	{r3, r4, r5, pc}
 801858c:	20000138 	.word	0x20000138

08018590 <MotionFX_enable_6X>:
 8018590:	4b0e      	ldr	r3, [pc, #56]	; (80185cc <MotionFX_enable_6X+0x3c>)
 8018592:	791b      	ldrb	r3, [r3, #4]
 8018594:	b903      	cbnz	r3, 8018598 <MotionFX_enable_6X+0x8>
 8018596:	4770      	bx	lr
 8018598:	2900      	cmp	r1, #0
 801859a:	d0fc      	beq.n	8018596 <MotionFX_enable_6X+0x6>
 801859c:	b530      	push	{r4, r5, lr}
 801859e:	4604      	mov	r4, r0
 80185a0:	b099      	sub	sp, #100	; 0x64
 80185a2:	1d05      	adds	r5, r0, #4
 80185a4:	4629      	mov	r1, r5
 80185a6:	225c      	movs	r2, #92	; 0x5c
 80185a8:	a801      	add	r0, sp, #4
 80185aa:	f002 fb81 	bl	801acb0 <memcpy>
 80185ae:	4620      	mov	r0, r4
 80185b0:	f7f7 fac8 	bl	800fb44 <MFX_emptyAttitude>
 80185b4:	4628      	mov	r0, r5
 80185b6:	225c      	movs	r2, #92	; 0x5c
 80185b8:	a901      	add	r1, sp, #4
 80185ba:	f002 fb79 	bl	801acb0 <memcpy>
 80185be:	2300      	movs	r3, #0
 80185c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80185c4:	7363      	strb	r3, [r4, #13]
 80185c6:	b019      	add	sp, #100	; 0x64
 80185c8:	bd30      	pop	{r4, r5, pc}
 80185ca:	bf00      	nop
 80185cc:	20000138 	.word	0x20000138

080185d0 <MotionFX_enable_9X>:
 80185d0:	4b0e      	ldr	r3, [pc, #56]	; (801860c <MotionFX_enable_9X+0x3c>)
 80185d2:	791b      	ldrb	r3, [r3, #4]
 80185d4:	b903      	cbnz	r3, 80185d8 <MotionFX_enable_9X+0x8>
 80185d6:	4770      	bx	lr
 80185d8:	2900      	cmp	r1, #0
 80185da:	d0fc      	beq.n	80185d6 <MotionFX_enable_9X+0x6>
 80185dc:	b530      	push	{r4, r5, lr}
 80185de:	4604      	mov	r4, r0
 80185e0:	b099      	sub	sp, #100	; 0x64
 80185e2:	1d05      	adds	r5, r0, #4
 80185e4:	4629      	mov	r1, r5
 80185e6:	225c      	movs	r2, #92	; 0x5c
 80185e8:	a801      	add	r0, sp, #4
 80185ea:	f002 fb61 	bl	801acb0 <memcpy>
 80185ee:	4620      	mov	r0, r4
 80185f0:	f7f7 faa8 	bl	800fb44 <MFX_emptyAttitude>
 80185f4:	4628      	mov	r0, r5
 80185f6:	225c      	movs	r2, #92	; 0x5c
 80185f8:	a901      	add	r1, sp, #4
 80185fa:	f002 fb59 	bl	801acb0 <memcpy>
 80185fe:	2301      	movs	r3, #1
 8018600:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8018604:	7363      	strb	r3, [r4, #13]
 8018606:	b019      	add	sp, #100	; 0x64
 8018608:	bd30      	pop	{r4, r5, pc}
 801860a:	bf00      	nop
 801860c:	20000138 	.word	0x20000138

08018610 <MotionFX_update>:
 8018610:	b430      	push	{r4, r5}
 8018612:	4d06      	ldr	r5, [pc, #24]	; (801862c <MotionFX_update+0x1c>)
 8018614:	461c      	mov	r4, r3
 8018616:	792d      	ldrb	r5, [r5, #4]
 8018618:	9b02      	ldr	r3, [sp, #8]
 801861a:	b90d      	cbnz	r5, 8018620 <MotionFX_update+0x10>
 801861c:	bc30      	pop	{r4, r5}
 801861e:	4770      	bx	lr
 8018620:	ed94 0a00 	vldr	s0, [r4]
 8018624:	bc30      	pop	{r4, r5}
 8018626:	f7fc bf2b 	b.w	8015480 <iNemoEngine_API_Update>
 801862a:	bf00      	nop
 801862c:	20000138 	.word	0x20000138

08018630 <MotionFX_propagate>:
 8018630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018634:	ed2d 8b06 	vpush	{d8-d10}
 8018638:	4da5      	ldr	r5, [pc, #660]	; (80188d0 <MotionFX_propagate+0x2a0>)
 801863a:	4604      	mov	r4, r0
 801863c:	7928      	ldrb	r0, [r5, #4]
 801863e:	b0a0      	sub	sp, #128	; 0x80
 8018640:	b920      	cbnz	r0, 801864c <MotionFX_propagate+0x1c>
 8018642:	b020      	add	sp, #128	; 0x80
 8018644:	ecbd 8b06 	vpop	{d8-d10}
 8018648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801864c:	4616      	mov	r6, r2
 801864e:	4696      	mov	lr, r2
 8018650:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8018654:	460d      	mov	r5, r1
 8018656:	6851      	ldr	r1, [r2, #4]
 8018658:	6892      	ldr	r2, [r2, #8]
 801865a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
 801865e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8018662:	6830      	ldr	r0, [r6, #0]
 8018664:	6871      	ldr	r1, [r6, #4]
 8018666:	68b2      	ldr	r2, [r6, #8]
 8018668:	edd3 9a00 	vldr	s19, [r3]
 801866c:	ab10      	add	r3, sp, #64	; 0x40
 801866e:	c307      	stmia	r3!, {r0, r1, r2}
 8018670:	f85e 0f18 	ldr.w	r0, [lr, #24]!
 8018674:	af16      	add	r7, sp, #88	; 0x58
 8018676:	f8de 1004 	ldr.w	r1, [lr, #4]
 801867a:	f8de 2008 	ldr.w	r2, [lr, #8]
 801867e:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 8018682:	c707      	stmia	r7!, {r0, r1, r2}
 8018684:	4651      	mov	r1, sl
 8018686:	aa13      	add	r2, sp, #76	; 0x4c
 8018688:	a803      	add	r0, sp, #12
 801868a:	f7f6 fb91 	bl	800edb0 <rotVect>
 801868e:	aa16      	add	r2, sp, #88	; 0x58
 8018690:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8018694:	a806      	add	r0, sp, #24
 8018696:	f7f6 fb8b 	bl	800edb0 <rotVect>
 801869a:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 801869e:	2b09      	cmp	r3, #9
 80186a0:	d829      	bhi.n	80186f6 <MotionFX_propagate+0xc6>
 80186a2:	eddd 8a04 	vldr	s17, [sp, #16]
 80186a6:	ed9d 9a03 	vldr	s18, [sp, #12]
 80186aa:	ee68 7aa8 	vmul.f32	s15, s17, s17
 80186ae:	ed9d 8a05 	vldr	s16, [sp, #20]
 80186b2:	eee9 7a09 	vfma.f32	s15, s18, s18
 80186b6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80186ba:	ee17 0a90 	vmov	r0, s15
 80186be:	f7e7 ff47 	bl	8000550 <__aeabi_f2d>
 80186c2:	ec41 0b10 	vmov	d0, r0, r1
 80186c6:	f000 fdd7 	bl	8019278 <sqrt>
 80186ca:	ec51 0b10 	vmov	r0, r1, d0
 80186ce:	f7e8 fa47 	bl	8000b60 <__aeabi_d2f>
 80186d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80186d6:	ee07 0a90 	vmov	s15, r0
 80186da:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80186de:	ee29 9a27 	vmul.f32	s18, s18, s15
 80186e2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80186e6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80186ea:	ed8d 9a03 	vstr	s18, [sp, #12]
 80186ee:	edcd 8a04 	vstr	s17, [sp, #16]
 80186f2:	ed8d 8a05 	vstr	s16, [sp, #20]
 80186f6:	7923      	ldrb	r3, [r4, #4]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	f000 80d3 	beq.w	80188a4 <MotionFX_propagate+0x274>
 80186fe:	ee07 3a90 	vmov	s15, r3
 8018702:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801870a:	ee87 5a27 	vdiv.f32	s10, s14, s15
 801870e:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8018712:	edd3 7a00 	vldr	s15, [r3]
 8018716:	ed9d 6a06 	vldr	s12, [sp, #24]
 801871a:	eee5 7a06 	vfma.f32	s15, s10, s12
 801871e:	edc3 7a00 	vstr	s15, [r3]
 8018722:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8018726:	edd3 7a00 	vldr	s15, [r3]
 801872a:	eddd 6a07 	vldr	s13, [sp, #28]
 801872e:	eee5 7a26 	vfma.f32	s15, s10, s13
 8018732:	edc3 7a00 	vstr	s15, [r3]
 8018736:	f604 1364 	addw	r3, r4, #2404	; 0x964
 801873a:	edd3 5a00 	vldr	s11, [r3]
 801873e:	ed9d 7a08 	vldr	s14, [sp, #32]
 8018742:	eee5 5a07 	vfma.f32	s11, s10, s14
 8018746:	eddf 7a63 	vldr	s15, [pc, #396]	; 80188d4 <MotionFX_propagate+0x2a4>
 801874a:	edc3 5a00 	vstr	s11, [r3]
 801874e:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8018752:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8018756:	edd3 8a00 	vldr	s17, [r3]
 801875a:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 801875e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8018762:	ed93 9a00 	vldr	s18, [r3]
 8018766:	ee76 8ae8 	vsub.f32	s17, s13, s17
 801876a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 801876e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018772:	ee36 9a49 	vsub.f32	s18, s12, s18
 8018776:	ed93 8a00 	vldr	s16, [r3]
 801877a:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801877e:	ee37 8a48 	vsub.f32	s16, s14, s16
 8018782:	eee9 7a09 	vfma.f32	s15, s18, s18
 8018786:	eddf 5a54 	vldr	s11, [pc, #336]	; 80188d8 <MotionFX_propagate+0x2a8>
 801878a:	eee8 7a08 	vfma.f32	s15, s16, s16
 801878e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8018792:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8018796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801879a:	ed8d 6a06 	vstr	s12, [sp, #24]
 801879e:	edcd 6a07 	vstr	s13, [sp, #28]
 80187a2:	ed8d 7a08 	vstr	s14, [sp, #32]
 80187a6:	ee29 0a80 	vmul.f32	s0, s19, s0
 80187aa:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80187ae:	dd7e      	ble.n	80188ae <MotionFX_propagate+0x27e>
 80187b0:	eeb1 aae7 	vsqrt.f32	s20, s15
 80187b4:	ee6a 9a00 	vmul.f32	s19, s20, s0
 80187b8:	eeb0 0a69 	vmov.f32	s0, s19
 80187bc:	f000 fcf0 	bl	80191a0 <sinf>
 80187c0:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 80187c4:	ee29 9a27 	vmul.f32	s18, s18, s15
 80187c8:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80187cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80187d0:	eeb0 0a69 	vmov.f32	s0, s19
 80187d4:	ed8d 9a09 	vstr	s18, [sp, #36]	; 0x24
 80187d8:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 80187dc:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80187e0:	f000 fc9e 	bl	8019120 <cosf>
 80187e4:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 80187e8:	f604 1838 	addw	r8, r4, #2360	; 0x938
 80187ec:	4632      	mov	r2, r6
 80187ee:	4631      	mov	r1, r6
 80187f0:	a809      	add	r0, sp, #36	; 0x24
 80187f2:	f7f6 fd71 	bl	800f2d8 <qmult>
 80187f6:	edd8 7a00 	vldr	s15, [r8]
 80187fa:	f604 1934 	addw	r9, r4, #2356	; 0x934
 80187fe:	ed99 7a00 	vldr	s14, [r9]
 8018802:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8018806:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 801880a:	edd7 6a00 	vldr	s13, [r7]
 801880e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8018812:	ed96 7a00 	vldr	s14, [r6]
 8018816:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801881a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801881e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018822:	eef1 6ae7 	vsqrt.f32	s13, s15
 8018826:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801882a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801882e:	ed86 7a00 	vstr	s14, [r6]
 8018832:	ed99 7a00 	vldr	s14, [r9]
 8018836:	ee27 7a27 	vmul.f32	s14, s14, s15
 801883a:	ed89 7a00 	vstr	s14, [r9]
 801883e:	ed98 7a00 	vldr	s14, [r8]
 8018842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018846:	ed88 7a00 	vstr	s14, [r8]
 801884a:	ed97 7a00 	vldr	s14, [r7]
 801884e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018852:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8018856:	4651      	mov	r1, sl
 8018858:	3301      	adds	r3, #1
 801885a:	edc7 7a00 	vstr	s15, [r7]
 801885e:	aa13      	add	r2, sp, #76	; 0x4c
 8018860:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8018864:	a809      	add	r0, sp, #36	; 0x24
 8018866:	f7f6 faa3 	bl	800edb0 <rotVect>
 801886a:	f8d9 0000 	ldr.w	r0, [r9]
 801886e:	f8d8 1000 	ldr.w	r1, [r8]
 8018872:	683a      	ldr	r2, [r7, #0]
 8018874:	6833      	ldr	r3, [r6, #0]
 8018876:	6128      	str	r0, [r5, #16]
 8018878:	6169      	str	r1, [r5, #20]
 801887a:	60eb      	str	r3, [r5, #12]
 801887c:	61aa      	str	r2, [r5, #24]
 801887e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8018882:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8018886:	9201      	str	r2, [sp, #4]
 8018888:	9300      	str	r3, [sp, #0]
 801888a:	462a      	mov	r2, r5
 801888c:	a909      	add	r1, sp, #36	; 0x24
 801888e:	f105 031c 	add.w	r3, r5, #28
 8018892:	f105 000c 	add.w	r0, r5, #12
 8018896:	f7f7 fd51 	bl	801033c <output_update>
 801889a:	b020      	add	sp, #128	; 0x80
 801889c:	ecbd 8b06 	vpop	{d8-d10}
 80188a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188a4:	2301      	movs	r3, #1
 80188a6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80188aa:	7123      	strb	r3, [r4, #4]
 80188ac:	e72f      	b.n	801870e <MotionFX_propagate+0xde>
 80188ae:	ee29 9a00 	vmul.f32	s18, s18, s0
 80188b2:	ee68 8a80 	vmul.f32	s17, s17, s0
 80188b6:	ee28 8a00 	vmul.f32	s16, s16, s0
 80188ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80188be:	ed8d 9a09 	vstr	s18, [sp, #36]	; 0x24
 80188c2:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
 80188c6:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 80188ca:	930c      	str	r3, [sp, #48]	; 0x30
 80188cc:	e78c      	b.n	80187e8 <MotionFX_propagate+0x1b8>
 80188ce:	bf00      	nop
 80188d0:	20000138 	.word	0x20000138
 80188d4:	3c8efa35 	.word	0x3c8efa35
 80188d8:	38d1b718 	.word	0x38d1b718

080188dc <MotionFX_MagCal_init>:
 80188dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188e0:	4c46      	ldr	r4, [pc, #280]	; (80189fc <MotionFX_MagCal_init+0x120>)
 80188e2:	7923      	ldrb	r3, [r4, #4]
 80188e4:	b90b      	cbnz	r3, 80188ea <MotionFX_MagCal_init+0xe>
 80188e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188ea:	1e43      	subs	r3, r0, #1
 80188ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80188f0:	4605      	mov	r5, r0
 80188f2:	d2f8      	bcs.n	80188e6 <MotionFX_MagCal_init+0xa>
 80188f4:	2900      	cmp	r1, #0
 80188f6:	d13a      	bne.n	801896e <MotionFX_MagCal_init+0x92>
 80188f8:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 80188fc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018900:	22c8      	movs	r2, #200	; 0xc8
 8018902:	1b5b      	subs	r3, r3, r5
 8018904:	ee07 3a90 	vmov	s15, r3
 8018908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801890c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018910:	eef0 7ae7 	vabs.f32	s15, s15
 8018914:	fb92 f2f5 	sdiv	r2, r2, r5
 8018918:	eef4 7ac7 	vcmpe.f32	s15, s14
 801891c:	b2d3      	uxtb	r3, r2
 801891e:	2b0f      	cmp	r3, #15
 8018920:	bf28      	it	cs
 8018922:	230f      	movcs	r3, #15
 8018924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018928:	4a35      	ldr	r2, [pc, #212]	; (8018a00 <MotionFX_MagCal_init+0x124>)
 801892a:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 801892e:	6015      	str	r5, [r2, #0]
 8018930:	b22d      	sxth	r5, r5
 8018932:	dc0e      	bgt.n	8018952 <MotionFX_MagCal_init+0x76>
 8018934:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8018a04 <MotionFX_MagCal_init+0x128>
 8018938:	edd4 7a03 	vldr	s15, [r4, #12]
 801893c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018940:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8018a08 <MotionFX_MagCal_init+0x12c>
 8018944:	eef0 7ae7 	vabs.f32	s15, s15
 8018948:	eef4 7ac7 	vcmpe.f32	s15, s14
 801894c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018950:	dd08      	ble.n	8018964 <MotionFX_MagCal_init+0x88>
 8018952:	2300      	movs	r3, #0
 8018954:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8018958:	492c      	ldr	r1, [pc, #176]	; (8018a0c <MotionFX_MagCal_init+0x130>)
 801895a:	8165      	strh	r5, [r4, #10]
 801895c:	60e1      	str	r1, [r4, #12]
 801895e:	8223      	strh	r3, [r4, #16]
 8018960:	6163      	str	r3, [r4, #20]
 8018962:	8122      	strh	r2, [r4, #8]
 8018964:	2300      	movs	r3, #0
 8018966:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 801896a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801896e:	2600      	movs	r6, #0
 8018970:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8018974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018978:	4b25      	ldr	r3, [pc, #148]	; (8018a10 <MotionFX_MagCal_init+0x134>)
 801897a:	4631      	mov	r1, r6
 801897c:	6122      	str	r2, [r4, #16]
 801897e:	f8a4 0058 	strh.w	r0, [r4, #88]	; 0x58
 8018982:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018986:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801898a:	61a3      	str	r3, [r4, #24]
 801898c:	6166      	str	r6, [r4, #20]
 801898e:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8018992:	6566      	str	r6, [r4, #84]	; 0x54
 8018994:	83a6      	strh	r6, [r4, #28]
 8018996:	f002 f998 	bl	801acca <memset>
 801899a:	225f      	movs	r2, #95	; 0x5f
 801899c:	23ff      	movs	r3, #255	; 0xff
 801899e:	f44f 7780 	mov.w	r7, #256	; 0x100
 80189a2:	f44f 6c70 	mov.w	ip, #3840	; 0xf00
 80189a6:	f04f 0800 	mov.w	r8, #0
 80189aa:	f04f 0900 	mov.w	r9, #0
 80189ae:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 80189b2:	4631      	mov	r1, r6
 80189b4:	2230      	movs	r2, #48	; 0x30
 80189b6:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80189ba:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 80189be:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 80189c2:	e9c4 8908 	strd	r8, r9, [r4, #32]
 80189c6:	62a6      	str	r6, [r4, #40]	; 0x28
 80189c8:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 80189cc:	f8a4 c02c 	strh.w	ip, [r4, #44]	; 0x2c
 80189d0:	f002 f97b 	bl	801acca <memset>
 80189d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80189d8:	f1a5 030a 	sub.w	r3, r5, #10
 80189dc:	b29b      	uxth	r3, r3
 80189de:	2b32      	cmp	r3, #50	; 0x32
 80189e0:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 80189e4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 80189e8:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 80189ec:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 80189f0:	d884      	bhi.n	80188fc <MotionFX_MagCal_init+0x20>
 80189f2:	2301      	movs	r3, #1
 80189f4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80189f8:	e780      	b.n	80188fc <MotionFX_MagCal_init+0x20>
 80189fa:	bf00      	nop
 80189fc:	20000138 	.word	0x20000138
 8018a00:	20000000 	.word	0x20000000
 8018a04:	3dcccccd 	.word	0x3dcccccd
 8018a08:	3c23d70a 	.word	0x3c23d70a
 8018a0c:	3dcccccd 	.word	0x3dcccccd
 8018a10:	20002594 	.word	0x20002594

08018a14 <MotionFX_MagCal_run>:
 8018a14:	4a3d      	ldr	r2, [pc, #244]	; (8018b0c <MotionFX_MagCal_run+0xf8>)
 8018a16:	7913      	ldrb	r3, [r2, #4]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d076      	beq.n	8018b0a <MotionFX_MagCal_run+0xf6>
 8018a1c:	ed90 7a00 	vldr	s14, [r0]
 8018a20:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a28:	eddf 6a39 	vldr	s13, [pc, #228]	; 8018b10 <MotionFX_MagCal_run+0xfc>
 8018a2c:	bfb4      	ite	lt
 8018a2e:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8018a32:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8018a36:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018a3a:	ed90 7a01 	vldr	s14, [r0, #4]
 8018a3e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018a4c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8018b10 <MotionFX_MagCal_run+0xfc>
 8018a50:	ee17 4a90 	vmov	r4, s15
 8018a54:	bfb4      	ite	lt
 8018a56:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8018a5a:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8018a5e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018a62:	ed90 7a02 	vldr	s14, [r0, #8]
 8018a66:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8018a6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a72:	ee17 5a90 	vmov	r5, s15
 8018a76:	eddf 6a26 	vldr	s13, [pc, #152]	; 8018b10 <MotionFX_MagCal_run+0xfc>
 8018a7a:	bfac      	ite	ge
 8018a7c:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8018a80:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8018a84:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a8c:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8018a90:	4601      	mov	r1, r0
 8018a92:	ee17 0a90 	vmov	r0, s15
 8018a96:	b373      	cbz	r3, 8018af6 <MotionFX_MagCal_run+0xe2>
 8018a98:	4e1e      	ldr	r6, [pc, #120]	; (8018b14 <MotionFX_MagCal_run+0x100>)
 8018a9a:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8018a9e:	6837      	ldr	r7, [r6, #0]
 8018aa0:	00de      	lsls	r6, r3, #3
 8018aa2:	fb17 f703 	smulbb	r7, r7, r3
 8018aa6:	f8a1 73d0 	strh.w	r7, [r1, #976]	; 0x3d0
 8018aaa:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8018aae:	428c      	cmp	r4, r1
 8018ab0:	bfa8      	it	ge
 8018ab2:	460c      	movge	r4, r1
 8018ab4:	4f18      	ldr	r7, [pc, #96]	; (8018b18 <MotionFX_MagCal_run+0x104>)
 8018ab6:	4288      	cmp	r0, r1
 8018ab8:	bfa8      	it	ge
 8018aba:	4608      	movge	r0, r1
 8018abc:	42bc      	cmp	r4, r7
 8018abe:	bfb8      	it	lt
 8018ac0:	463c      	movlt	r4, r7
 8018ac2:	42bd      	cmp	r5, r7
 8018ac4:	db1f      	blt.n	8018b06 <MotionFX_MagCal_run+0xf2>
 8018ac6:	428d      	cmp	r5, r1
 8018ac8:	bfa8      	it	ge
 8018aca:	460d      	movge	r5, r1
 8018acc:	b22d      	sxth	r5, r5
 8018ace:	4912      	ldr	r1, [pc, #72]	; (8018b18 <MotionFX_MagCal_run+0x104>)
 8018ad0:	3301      	adds	r3, #1
 8018ad2:	4288      	cmp	r0, r1
 8018ad4:	bfb8      	it	lt
 8018ad6:	4608      	movlt	r0, r1
 8018ad8:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 8018adc:	b2db      	uxtb	r3, r3
 8018ade:	4416      	add	r6, r2
 8018ae0:	428b      	cmp	r3, r1
 8018ae2:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 8018ae6:	f8a6 43d2 	strh.w	r4, [r6, #978]	; 0x3d2
 8018aea:	f8a6 53d4 	strh.w	r5, [r6, #980]	; 0x3d4
 8018aee:	f8a6 03d6 	strh.w	r0, [r6, #982]	; 0x3d6
 8018af2:	d013      	beq.n	8018b1c <MotionFX_MagCal_run+0x108>
 8018af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018af6:	2601      	movs	r6, #1
 8018af8:	68c9      	ldr	r1, [r1, #12]
 8018afa:	f882 63cc 	strb.w	r6, [r2, #972]	; 0x3cc
 8018afe:	f8c2 13c8 	str.w	r1, [r2, #968]	; 0x3c8
 8018b02:	461e      	mov	r6, r3
 8018b04:	e7d1      	b.n	8018aaa <MotionFX_MagCal_run+0x96>
 8018b06:	460d      	mov	r5, r1
 8018b08:	e7e1      	b.n	8018ace <MotionFX_MagCal_run+0xba>
 8018b0a:	4770      	bx	lr
 8018b0c:	20000138 	.word	0x20000138
 8018b10:	43fa0000 	.word	0x43fa0000
 8018b14:	20000000 	.word	0x20000000
 8018b18:	ffff8002 	.word	0xffff8002
 8018b1c:	2000      	movs	r0, #0
 8018b1e:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8018b22:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 8018b26:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	f000 8155 	beq.w	8018dda <MotionFX_MagCal_run+0x3c6>
 8018b30:	e9d2 5005 	ldrd	r5, r0, [r2, #20]
 8018b34:	8a54      	ldrh	r4, [r2, #18]
 8018b36:	8a13      	ldrh	r3, [r2, #16]
 8018b38:	2900      	cmp	r1, #0
 8018b3a:	f000 814c 	beq.w	8018dd6 <MotionFX_MagCal_run+0x3c2>
 8018b3e:	2c00      	cmp	r4, #0
 8018b40:	f000 8149 	beq.w	8018dd6 <MotionFX_MagCal_run+0x3c2>
 8018b44:	42a3      	cmp	r3, r4
 8018b46:	bf28      	it	cs
 8018b48:	4623      	movcs	r3, r4
 8018b4a:	3301      	adds	r3, #1
 8018b4c:	b29b      	uxth	r3, r3
 8018b4e:	42a3      	cmp	r3, r4
 8018b50:	bf28      	it	cs
 8018b52:	4623      	movcs	r3, r4
 8018b54:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 8018b58:	f04f 0c01 	mov.w	ip, #1
 8018b5c:	195f      	adds	r7, r3, r5
 8018b5e:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8018b62:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8018b66:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8018b6a:	f8c7 e002 	str.w	lr, [r7, #2]
 8018b6e:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 8018b72:	4561      	cmp	r1, ip
 8018b74:	f8a7 e006 	strh.w	lr, [r7, #6]
 8018b78:	f000 8126 	beq.w	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018b7c:	4463      	add	r3, ip
 8018b7e:	b29b      	uxth	r3, r3
 8018b80:	42a3      	cmp	r3, r4
 8018b82:	bf28      	it	cs
 8018b84:	4623      	movcs	r3, r4
 8018b86:	195f      	adds	r7, r3, r5
 8018b88:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8018b8c:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 8018b90:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8018b94:	f8c7 e002 	str.w	lr, [r7, #2]
 8018b98:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 8018b9c:	2902      	cmp	r1, #2
 8018b9e:	f8a7 e006 	strh.w	lr, [r7, #6]
 8018ba2:	f000 8111 	beq.w	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018ba6:	4463      	add	r3, ip
 8018ba8:	b29b      	uxth	r3, r3
 8018baa:	42a3      	cmp	r3, r4
 8018bac:	bf28      	it	cs
 8018bae:	4623      	movcs	r3, r4
 8018bb0:	195f      	adds	r7, r3, r5
 8018bb2:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8018bb6:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 8018bba:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8018bbe:	f8c7 e002 	str.w	lr, [r7, #2]
 8018bc2:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 8018bc6:	2903      	cmp	r1, #3
 8018bc8:	f8a7 e006 	strh.w	lr, [r7, #6]
 8018bcc:	f000 80fc 	beq.w	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018bd0:	4463      	add	r3, ip
 8018bd2:	b29b      	uxth	r3, r3
 8018bd4:	42a3      	cmp	r3, r4
 8018bd6:	bf28      	it	cs
 8018bd8:	4623      	movcs	r3, r4
 8018bda:	195f      	adds	r7, r3, r5
 8018bdc:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8018be0:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 8018be4:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8018be8:	f8c7 e002 	str.w	lr, [r7, #2]
 8018bec:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 8018bf0:	2904      	cmp	r1, #4
 8018bf2:	f8a7 e006 	strh.w	lr, [r7, #6]
 8018bf6:	f000 80e7 	beq.w	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018bfa:	4463      	add	r3, ip
 8018bfc:	b29b      	uxth	r3, r3
 8018bfe:	42a3      	cmp	r3, r4
 8018c00:	bf28      	it	cs
 8018c02:	4623      	movcs	r3, r4
 8018c04:	195f      	adds	r7, r3, r5
 8018c06:	f800 c037 	strb.w	ip, [r0, r7, lsl #3]
 8018c0a:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 8018c0e:	eb00 07c7 	add.w	r7, r0, r7, lsl #3
 8018c12:	f8c7 e002 	str.w	lr, [r7, #2]
 8018c16:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 8018c1a:	2905      	cmp	r1, #5
 8018c1c:	f8a7 e006 	strh.w	lr, [r7, #6]
 8018c20:	f000 80d2 	beq.w	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018c24:	4463      	add	r3, ip
 8018c26:	b29b      	uxth	r3, r3
 8018c28:	42a3      	cmp	r3, r4
 8018c2a:	bf28      	it	cs
 8018c2c:	4623      	movcs	r3, r4
 8018c2e:	441d      	add	r5, r3
 8018c30:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 8018c34:	f8d2 73fa 	ldr.w	r7, [r2, #1018]	; 0x3fa
 8018c38:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8018c3c:	f8c5 7002 	str.w	r7, [r5, #2]
 8018c40:	f8b2 73fe 	ldrh.w	r7, [r2, #1022]	; 0x3fe
 8018c44:	2906      	cmp	r1, #6
 8018c46:	80ef      	strh	r7, [r5, #6]
 8018c48:	f000 80be 	beq.w	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018c4c:	4463      	add	r3, ip
 8018c4e:	b29b      	uxth	r3, r3
 8018c50:	42a3      	cmp	r3, r4
 8018c52:	bf28      	it	cs
 8018c54:	4623      	movcs	r3, r4
 8018c56:	f06f 4560 	mvn.w	r5, #3758096384	; 0xe0000000
 8018c5a:	4667      	mov	r7, ip
 8018c5c:	eb03 0c05 	add.w	ip, r3, r5
 8018c60:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018c64:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 8018c68:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018c6c:	f8cc e002 	str.w	lr, [ip, #2]
 8018c70:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 8018c74:	2907      	cmp	r1, #7
 8018c76:	f8ac e006 	strh.w	lr, [ip, #6]
 8018c7a:	f000 80a5 	beq.w	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018c7e:	443b      	add	r3, r7
 8018c80:	b29b      	uxth	r3, r3
 8018c82:	42a3      	cmp	r3, r4
 8018c84:	bf28      	it	cs
 8018c86:	4623      	movcs	r3, r4
 8018c88:	eb03 0c05 	add.w	ip, r3, r5
 8018c8c:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018c90:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8018c94:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018c98:	f8cc e002 	str.w	lr, [ip, #2]
 8018c9c:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8018ca0:	2908      	cmp	r1, #8
 8018ca2:	f8ac e006 	strh.w	lr, [ip, #6]
 8018ca6:	f000 808f 	beq.w	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018caa:	443b      	add	r3, r7
 8018cac:	b29b      	uxth	r3, r3
 8018cae:	42a3      	cmp	r3, r4
 8018cb0:	bf28      	it	cs
 8018cb2:	4623      	movcs	r3, r4
 8018cb4:	eb03 0c05 	add.w	ip, r3, r5
 8018cb8:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018cbc:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 8018cc0:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018cc4:	f8cc e002 	str.w	lr, [ip, #2]
 8018cc8:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 8018ccc:	2909      	cmp	r1, #9
 8018cce:	f8ac e006 	strh.w	lr, [ip, #6]
 8018cd2:	d079      	beq.n	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018cd4:	443b      	add	r3, r7
 8018cd6:	b29b      	uxth	r3, r3
 8018cd8:	42a3      	cmp	r3, r4
 8018cda:	bf28      	it	cs
 8018cdc:	4623      	movcs	r3, r4
 8018cde:	eb03 0c05 	add.w	ip, r3, r5
 8018ce2:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018ce6:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 8018cea:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018cee:	f8cc e002 	str.w	lr, [ip, #2]
 8018cf2:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 8018cf6:	290a      	cmp	r1, #10
 8018cf8:	f8ac e006 	strh.w	lr, [ip, #6]
 8018cfc:	d064      	beq.n	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018cfe:	443b      	add	r3, r7
 8018d00:	b29b      	uxth	r3, r3
 8018d02:	42a3      	cmp	r3, r4
 8018d04:	bf28      	it	cs
 8018d06:	4623      	movcs	r3, r4
 8018d08:	eb03 0c05 	add.w	ip, r3, r5
 8018d0c:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018d10:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8018d14:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018d18:	f8cc e002 	str.w	lr, [ip, #2]
 8018d1c:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8018d20:	290b      	cmp	r1, #11
 8018d22:	f8ac e006 	strh.w	lr, [ip, #6]
 8018d26:	d04f      	beq.n	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018d28:	443b      	add	r3, r7
 8018d2a:	b29b      	uxth	r3, r3
 8018d2c:	42a3      	cmp	r3, r4
 8018d2e:	bf28      	it	cs
 8018d30:	4623      	movcs	r3, r4
 8018d32:	eb03 0c05 	add.w	ip, r3, r5
 8018d36:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018d3a:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 8018d3e:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018d42:	f8cc e002 	str.w	lr, [ip, #2]
 8018d46:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 8018d4a:	290c      	cmp	r1, #12
 8018d4c:	f8ac e006 	strh.w	lr, [ip, #6]
 8018d50:	d03a      	beq.n	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018d52:	443b      	add	r3, r7
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	42a3      	cmp	r3, r4
 8018d58:	bf28      	it	cs
 8018d5a:	4623      	movcs	r3, r4
 8018d5c:	eb03 0c05 	add.w	ip, r3, r5
 8018d60:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018d64:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 8018d68:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018d6c:	f8cc e002 	str.w	lr, [ip, #2]
 8018d70:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 8018d74:	290d      	cmp	r1, #13
 8018d76:	f8ac e006 	strh.w	lr, [ip, #6]
 8018d7a:	d025      	beq.n	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018d7c:	443b      	add	r3, r7
 8018d7e:	b29b      	uxth	r3, r3
 8018d80:	42a3      	cmp	r3, r4
 8018d82:	bf28      	it	cs
 8018d84:	4623      	movcs	r3, r4
 8018d86:	eb03 0c05 	add.w	ip, r3, r5
 8018d8a:	f800 703c 	strb.w	r7, [r0, ip, lsl #3]
 8018d8e:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 8018d92:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8018d96:	f8cc e002 	str.w	lr, [ip, #2]
 8018d9a:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 8018d9e:	290e      	cmp	r1, #14
 8018da0:	f8ac e006 	strh.w	lr, [ip, #6]
 8018da4:	d010      	beq.n	8018dc8 <MotionFX_MagCal_run+0x3b4>
 8018da6:	443b      	add	r3, r7
 8018da8:	b29b      	uxth	r3, r3
 8018daa:	42a3      	cmp	r3, r4
 8018dac:	bf28      	it	cs
 8018dae:	4623      	movcs	r3, r4
 8018db0:	441d      	add	r5, r3
 8018db2:	f800 7035 	strb.w	r7, [r0, r5, lsl #3]
 8018db6:	f8d2 4442 	ldr.w	r4, [r2, #1090]	; 0x442
 8018dba:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8018dbe:	f8c0 4002 	str.w	r4, [r0, #2]
 8018dc2:	f8b2 4446 	ldrh.w	r4, [r2, #1094]	; 0x446
 8018dc6:	80c4      	strh	r4, [r0, #6]
 8018dc8:	3901      	subs	r1, #1
 8018dca:	b2c9      	uxtb	r1, r1
 8018dcc:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8018dd0:	f8b1 53d0 	ldrh.w	r5, [r1, #976]	; 0x3d0
 8018dd4:	4435      	add	r5, r6
 8018dd6:	8213      	strh	r3, [r2, #16]
 8018dd8:	6155      	str	r5, [r2, #20]
 8018dda:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	f43f ae88 	beq.w	8018af4 <MotionFX_MagCal_run+0xe0>
 8018de4:	8a11      	ldrh	r1, [r2, #16]
 8018de6:	8a53      	ldrh	r3, [r2, #18]
 8018de8:	428b      	cmp	r3, r1
 8018dea:	d023      	beq.n	8018e34 <MotionFX_MagCal_run+0x420>
 8018dec:	b349      	cbz	r1, 8018e42 <MotionFX_MagCal_run+0x42e>
 8018dee:	6953      	ldr	r3, [r2, #20]
 8018df0:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8018df4:	3301      	adds	r3, #1
 8018df6:	4403      	add	r3, r0
 8018df8:	1c58      	adds	r0, r3, #1
 8018dfa:	d022      	beq.n	8018e42 <MotionFX_MagCal_run+0x42e>
 8018dfc:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8018e00:	3410      	adds	r4, #16
 8018e02:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8018e04:	42a0      	cmp	r0, r4
 8018e06:	bf88      	it	hi
 8018e08:	4618      	movhi	r0, r3
 8018e0a:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 8018e0e:	bf88      	it	hi
 8018e10:	6553      	strhi	r3, [r2, #84]	; 0x54
 8018e12:	4420      	add	r0, r4
 8018e14:	4283      	cmp	r3, r0
 8018e16:	f4ff ae6d 	bcc.w	8018af4 <MotionFX_MagCal_run+0xe0>
 8018e1a:	b131      	cbz	r1, 8018e2a <MotionFX_MagCal_run+0x416>
 8018e1c:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 8018e20:	6952      	ldr	r2, [r2, #20]
 8018e22:	3901      	subs	r1, #1
 8018e24:	fb00 2111 	mls	r1, r0, r1, r2
 8018e28:	b289      	uxth	r1, r1
 8018e2a:	1a5b      	subs	r3, r3, r1
 8018e2c:	b21b      	sxth	r3, r3
 8018e2e:	42a3      	cmp	r3, r4
 8018e30:	f6ff ae60 	blt.w	8018af4 <MotionFX_MagCal_run+0xe0>
 8018e34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018e38:	4904      	ldr	r1, [pc, #16]	; (8018e4c <MotionFX_MagCal_run+0x438>)
 8018e3a:	f101 0014 	add.w	r0, r1, #20
 8018e3e:	f7fd bae1 	b.w	8016404 <MEMS_runMagCal>
 8018e42:	f242 7410 	movw	r4, #10000	; 0x2710
 8018e46:	2300      	movs	r3, #0
 8018e48:	e7db      	b.n	8018e02 <MotionFX_MagCal_run+0x3ee>
 8018e4a:	bf00      	nop
 8018e4c:	20000140 	.word	0x20000140

08018e50 <MotionFX_MagCal_getParams>:
 8018e50:	b4f0      	push	{r4, r5, r6, r7}
 8018e52:	4f1b      	ldr	r7, [pc, #108]	; (8018ec0 <MotionFX_MagCal_getParams+0x70>)
 8018e54:	b08e      	sub	sp, #56	; 0x38
 8018e56:	793b      	ldrb	r3, [r7, #4]
 8018e58:	b373      	cbz	r3, 8018eb8 <MotionFX_MagCal_getParams+0x68>
 8018e5a:	f107 0574 	add.w	r5, r7, #116	; 0x74
 8018e5e:	ac01      	add	r4, sp, #4
 8018e60:	4606      	mov	r6, r0
 8018e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018e6c:	ed9d 7a03 	vldr	s14, [sp, #12]
 8018e70:	eddd 6a02 	vldr	s13, [sp, #8]
 8018e74:	eddd 7a04 	vldr	s15, [sp, #16]
 8018e78:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8018e7c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8018e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e84:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 8018ec4 <MotionFX_MagCal_getParams+0x74>
 8018e88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018e8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8018e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e94:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018e98:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018e9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ea2:	682b      	ldr	r3, [r5, #0]
 8018ea4:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 8018ea8:	6023      	str	r3, [r4, #0]
 8018eaa:	edc6 6a00 	vstr	s13, [r6]
 8018eae:	7332      	strb	r2, [r6, #12]
 8018eb0:	ed86 7a01 	vstr	s14, [r6, #4]
 8018eb4:	edc6 7a02 	vstr	s15, [r6, #8]
 8018eb8:	b00e      	add	sp, #56	; 0x38
 8018eba:	bcf0      	pop	{r4, r5, r6, r7}
 8018ebc:	4770      	bx	lr
 8018ebe:	bf00      	nop
 8018ec0:	20000138 	.word	0x20000138
 8018ec4:	3b03126f 	.word	0x3b03126f

08018ec8 <MotionFX_GetLibVersion>:
 8018ec8:	b4f0      	push	{r4, r5, r6, r7}
 8018eca:	4b0f      	ldr	r3, [pc, #60]	; (8018f08 <MotionFX_GetLibVersion+0x40>)
 8018ecc:	b08a      	sub	sp, #40	; 0x28
 8018ece:	791f      	ldrb	r7, [r3, #4]
 8018ed0:	b1b7      	cbz	r7, 8018f00 <MotionFX_GetLibVersion+0x38>
 8018ed2:	4604      	mov	r4, r0
 8018ed4:	2712      	movs	r7, #18
 8018ed6:	4e0d      	ldr	r6, [pc, #52]	; (8018f0c <MotionFX_GetLibVersion+0x44>)
 8018ed8:	ad01      	add	r5, sp, #4
 8018eda:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018edc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018ede:	6833      	ldr	r3, [r6, #0]
 8018ee0:	ae01      	add	r6, sp, #4
 8018ee2:	f825 3b02 	strh.w	r3, [r5], #2
 8018ee6:	0c1b      	lsrs	r3, r3, #16
 8018ee8:	702b      	strb	r3, [r5, #0]
 8018eea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8018eec:	f8b6 c000 	ldrh.w	ip, [r6]
 8018ef0:	78b5      	ldrb	r5, [r6, #2]
 8018ef2:	6020      	str	r0, [r4, #0]
 8018ef4:	6061      	str	r1, [r4, #4]
 8018ef6:	60a2      	str	r2, [r4, #8]
 8018ef8:	60e3      	str	r3, [r4, #12]
 8018efa:	f8a4 c010 	strh.w	ip, [r4, #16]
 8018efe:	74a5      	strb	r5, [r4, #18]
 8018f00:	4638      	mov	r0, r7
 8018f02:	b00a      	add	sp, #40	; 0x28
 8018f04:	bcf0      	pop	{r4, r5, r6, r7}
 8018f06:	4770      	bx	lr
 8018f08:	20000138 	.word	0x20000138
 8018f0c:	0801b614 	.word	0x0801b614

08018f10 <ceil>:
 8018f10:	ec51 0b10 	vmov	r0, r1, d0
 8018f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8018f1c:	460c      	mov	r4, r1
 8018f1e:	ee10 5a10 	vmov	r5, s0
 8018f22:	ee10 8a10 	vmov	r8, s0
 8018f26:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8018f2a:	2e13      	cmp	r6, #19
 8018f2c:	dc31      	bgt.n	8018f92 <ceil+0x82>
 8018f2e:	2e00      	cmp	r6, #0
 8018f30:	da12      	bge.n	8018f58 <ceil+0x48>
 8018f32:	a335      	add	r3, pc, #212	; (adr r3, 8019008 <ceil+0xf8>)
 8018f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f38:	f7e7 f9ac 	bl	8000294 <__adddf3>
 8018f3c:	2200      	movs	r2, #0
 8018f3e:	2300      	movs	r3, #0
 8018f40:	f7e7 fdee 	bl	8000b20 <__aeabi_dcmpgt>
 8018f44:	b128      	cbz	r0, 8018f52 <ceil+0x42>
 8018f46:	2c00      	cmp	r4, #0
 8018f48:	db56      	blt.n	8018ff8 <ceil+0xe8>
 8018f4a:	432c      	orrs	r4, r5
 8018f4c:	d058      	beq.n	8019000 <ceil+0xf0>
 8018f4e:	2500      	movs	r5, #0
 8018f50:	4c2f      	ldr	r4, [pc, #188]	; (8019010 <ceil+0x100>)
 8018f52:	4621      	mov	r1, r4
 8018f54:	4628      	mov	r0, r5
 8018f56:	e026      	b.n	8018fa6 <ceil+0x96>
 8018f58:	4f2e      	ldr	r7, [pc, #184]	; (8019014 <ceil+0x104>)
 8018f5a:	4137      	asrs	r7, r6
 8018f5c:	ea01 0307 	and.w	r3, r1, r7
 8018f60:	4303      	orrs	r3, r0
 8018f62:	d020      	beq.n	8018fa6 <ceil+0x96>
 8018f64:	a328      	add	r3, pc, #160	; (adr r3, 8019008 <ceil+0xf8>)
 8018f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f6a:	f7e7 f993 	bl	8000294 <__adddf3>
 8018f6e:	2200      	movs	r2, #0
 8018f70:	2300      	movs	r3, #0
 8018f72:	f7e7 fdd5 	bl	8000b20 <__aeabi_dcmpgt>
 8018f76:	2800      	cmp	r0, #0
 8018f78:	d0eb      	beq.n	8018f52 <ceil+0x42>
 8018f7a:	2c00      	cmp	r4, #0
 8018f7c:	f04f 0500 	mov.w	r5, #0
 8018f80:	bfc2      	ittt	gt
 8018f82:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8018f86:	fa43 f606 	asrgt.w	r6, r3, r6
 8018f8a:	19a4      	addgt	r4, r4, r6
 8018f8c:	ea24 0407 	bic.w	r4, r4, r7
 8018f90:	e7df      	b.n	8018f52 <ceil+0x42>
 8018f92:	2e33      	cmp	r6, #51	; 0x33
 8018f94:	dd0b      	ble.n	8018fae <ceil+0x9e>
 8018f96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018f9a:	d104      	bne.n	8018fa6 <ceil+0x96>
 8018f9c:	ee10 2a10 	vmov	r2, s0
 8018fa0:	460b      	mov	r3, r1
 8018fa2:	f7e7 f977 	bl	8000294 <__adddf3>
 8018fa6:	ec41 0b10 	vmov	d0, r0, r1
 8018faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fae:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8018fb6:	fa23 f707 	lsr.w	r7, r3, r7
 8018fba:	4207      	tst	r7, r0
 8018fbc:	d0f3      	beq.n	8018fa6 <ceil+0x96>
 8018fbe:	a312      	add	r3, pc, #72	; (adr r3, 8019008 <ceil+0xf8>)
 8018fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fc4:	f7e7 f966 	bl	8000294 <__adddf3>
 8018fc8:	2200      	movs	r2, #0
 8018fca:	2300      	movs	r3, #0
 8018fcc:	f7e7 fda8 	bl	8000b20 <__aeabi_dcmpgt>
 8018fd0:	2800      	cmp	r0, #0
 8018fd2:	d0be      	beq.n	8018f52 <ceil+0x42>
 8018fd4:	2c00      	cmp	r4, #0
 8018fd6:	dd02      	ble.n	8018fde <ceil+0xce>
 8018fd8:	2e14      	cmp	r6, #20
 8018fda:	d103      	bne.n	8018fe4 <ceil+0xd4>
 8018fdc:	3401      	adds	r4, #1
 8018fde:	ea25 0507 	bic.w	r5, r5, r7
 8018fe2:	e7b6      	b.n	8018f52 <ceil+0x42>
 8018fe4:	2301      	movs	r3, #1
 8018fe6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018fea:	fa03 f606 	lsl.w	r6, r3, r6
 8018fee:	4435      	add	r5, r6
 8018ff0:	4545      	cmp	r5, r8
 8018ff2:	bf38      	it	cc
 8018ff4:	18e4      	addcc	r4, r4, r3
 8018ff6:	e7f2      	b.n	8018fde <ceil+0xce>
 8018ff8:	2500      	movs	r5, #0
 8018ffa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8018ffe:	e7a8      	b.n	8018f52 <ceil+0x42>
 8019000:	4625      	mov	r5, r4
 8019002:	e7a6      	b.n	8018f52 <ceil+0x42>
 8019004:	f3af 8000 	nop.w
 8019008:	8800759c 	.word	0x8800759c
 801900c:	7e37e43c 	.word	0x7e37e43c
 8019010:	3ff00000 	.word	0x3ff00000
 8019014:	000fffff 	.word	0x000fffff

08019018 <floor>:
 8019018:	ec51 0b10 	vmov	r0, r1, d0
 801901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019020:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019024:	460c      	mov	r4, r1
 8019026:	ee10 5a10 	vmov	r5, s0
 801902a:	ee10 8a10 	vmov	r8, s0
 801902e:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019032:	2e13      	cmp	r6, #19
 8019034:	dc33      	bgt.n	801909e <floor+0x86>
 8019036:	2e00      	cmp	r6, #0
 8019038:	da14      	bge.n	8019064 <floor+0x4c>
 801903a:	a335      	add	r3, pc, #212	; (adr r3, 8019110 <floor+0xf8>)
 801903c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019040:	f7e7 f928 	bl	8000294 <__adddf3>
 8019044:	2200      	movs	r2, #0
 8019046:	2300      	movs	r3, #0
 8019048:	f7e7 fd6a 	bl	8000b20 <__aeabi_dcmpgt>
 801904c:	b138      	cbz	r0, 801905e <floor+0x46>
 801904e:	2c00      	cmp	r4, #0
 8019050:	da58      	bge.n	8019104 <floor+0xec>
 8019052:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019056:	431d      	orrs	r5, r3
 8019058:	d001      	beq.n	801905e <floor+0x46>
 801905a:	2500      	movs	r5, #0
 801905c:	4c2e      	ldr	r4, [pc, #184]	; (8019118 <floor+0x100>)
 801905e:	4621      	mov	r1, r4
 8019060:	4628      	mov	r0, r5
 8019062:	e026      	b.n	80190b2 <floor+0x9a>
 8019064:	4f2d      	ldr	r7, [pc, #180]	; (801911c <floor+0x104>)
 8019066:	4137      	asrs	r7, r6
 8019068:	ea01 0307 	and.w	r3, r1, r7
 801906c:	4303      	orrs	r3, r0
 801906e:	d020      	beq.n	80190b2 <floor+0x9a>
 8019070:	a327      	add	r3, pc, #156	; (adr r3, 8019110 <floor+0xf8>)
 8019072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019076:	f7e7 f90d 	bl	8000294 <__adddf3>
 801907a:	2200      	movs	r2, #0
 801907c:	2300      	movs	r3, #0
 801907e:	f7e7 fd4f 	bl	8000b20 <__aeabi_dcmpgt>
 8019082:	2800      	cmp	r0, #0
 8019084:	d0eb      	beq.n	801905e <floor+0x46>
 8019086:	2c00      	cmp	r4, #0
 8019088:	f04f 0500 	mov.w	r5, #0
 801908c:	bfbe      	ittt	lt
 801908e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019092:	fa43 f606 	asrlt.w	r6, r3, r6
 8019096:	19a4      	addlt	r4, r4, r6
 8019098:	ea24 0407 	bic.w	r4, r4, r7
 801909c:	e7df      	b.n	801905e <floor+0x46>
 801909e:	2e33      	cmp	r6, #51	; 0x33
 80190a0:	dd0b      	ble.n	80190ba <floor+0xa2>
 80190a2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80190a6:	d104      	bne.n	80190b2 <floor+0x9a>
 80190a8:	ee10 2a10 	vmov	r2, s0
 80190ac:	460b      	mov	r3, r1
 80190ae:	f7e7 f8f1 	bl	8000294 <__adddf3>
 80190b2:	ec41 0b10 	vmov	d0, r0, r1
 80190b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190ba:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80190be:	f04f 33ff 	mov.w	r3, #4294967295
 80190c2:	fa23 f707 	lsr.w	r7, r3, r7
 80190c6:	4207      	tst	r7, r0
 80190c8:	d0f3      	beq.n	80190b2 <floor+0x9a>
 80190ca:	a311      	add	r3, pc, #68	; (adr r3, 8019110 <floor+0xf8>)
 80190cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190d0:	f7e7 f8e0 	bl	8000294 <__adddf3>
 80190d4:	2200      	movs	r2, #0
 80190d6:	2300      	movs	r3, #0
 80190d8:	f7e7 fd22 	bl	8000b20 <__aeabi_dcmpgt>
 80190dc:	2800      	cmp	r0, #0
 80190de:	d0be      	beq.n	801905e <floor+0x46>
 80190e0:	2c00      	cmp	r4, #0
 80190e2:	da02      	bge.n	80190ea <floor+0xd2>
 80190e4:	2e14      	cmp	r6, #20
 80190e6:	d103      	bne.n	80190f0 <floor+0xd8>
 80190e8:	3401      	adds	r4, #1
 80190ea:	ea25 0507 	bic.w	r5, r5, r7
 80190ee:	e7b6      	b.n	801905e <floor+0x46>
 80190f0:	2301      	movs	r3, #1
 80190f2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80190f6:	fa03 f606 	lsl.w	r6, r3, r6
 80190fa:	4435      	add	r5, r6
 80190fc:	4545      	cmp	r5, r8
 80190fe:	bf38      	it	cc
 8019100:	18e4      	addcc	r4, r4, r3
 8019102:	e7f2      	b.n	80190ea <floor+0xd2>
 8019104:	2500      	movs	r5, #0
 8019106:	462c      	mov	r4, r5
 8019108:	e7a9      	b.n	801905e <floor+0x46>
 801910a:	bf00      	nop
 801910c:	f3af 8000 	nop.w
 8019110:	8800759c 	.word	0x8800759c
 8019114:	7e37e43c 	.word	0x7e37e43c
 8019118:	bff00000 	.word	0xbff00000
 801911c:	000fffff 	.word	0x000fffff

08019120 <cosf>:
 8019120:	ee10 3a10 	vmov	r3, s0
 8019124:	b507      	push	{r0, r1, r2, lr}
 8019126:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801912a:	4a1b      	ldr	r2, [pc, #108]	; (8019198 <cosf+0x78>)
 801912c:	4293      	cmp	r3, r2
 801912e:	dc04      	bgt.n	801913a <cosf+0x1a>
 8019130:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801919c <cosf+0x7c>
 8019134:	f000 fe7c 	bl	8019e30 <__kernel_cosf>
 8019138:	e004      	b.n	8019144 <cosf+0x24>
 801913a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801913e:	db04      	blt.n	801914a <cosf+0x2a>
 8019140:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019144:	b003      	add	sp, #12
 8019146:	f85d fb04 	ldr.w	pc, [sp], #4
 801914a:	4668      	mov	r0, sp
 801914c:	f000 fd30 	bl	8019bb0 <__ieee754_rem_pio2f>
 8019150:	f000 0003 	and.w	r0, r0, #3
 8019154:	2801      	cmp	r0, #1
 8019156:	d007      	beq.n	8019168 <cosf+0x48>
 8019158:	2802      	cmp	r0, #2
 801915a:	d00e      	beq.n	801917a <cosf+0x5a>
 801915c:	b9a0      	cbnz	r0, 8019188 <cosf+0x68>
 801915e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019162:	ed9d 0a00 	vldr	s0, [sp]
 8019166:	e7e5      	b.n	8019134 <cosf+0x14>
 8019168:	eddd 0a01 	vldr	s1, [sp, #4]
 801916c:	ed9d 0a00 	vldr	s0, [sp]
 8019170:	f001 f94a 	bl	801a408 <__kernel_sinf>
 8019174:	eeb1 0a40 	vneg.f32	s0, s0
 8019178:	e7e4      	b.n	8019144 <cosf+0x24>
 801917a:	eddd 0a01 	vldr	s1, [sp, #4]
 801917e:	ed9d 0a00 	vldr	s0, [sp]
 8019182:	f000 fe55 	bl	8019e30 <__kernel_cosf>
 8019186:	e7f5      	b.n	8019174 <cosf+0x54>
 8019188:	2001      	movs	r0, #1
 801918a:	eddd 0a01 	vldr	s1, [sp, #4]
 801918e:	ed9d 0a00 	vldr	s0, [sp]
 8019192:	f001 f939 	bl	801a408 <__kernel_sinf>
 8019196:	e7d5      	b.n	8019144 <cosf+0x24>
 8019198:	3f490fd8 	.word	0x3f490fd8
 801919c:	00000000 	.word	0x00000000

080191a0 <sinf>:
 80191a0:	ee10 3a10 	vmov	r3, s0
 80191a4:	b507      	push	{r0, r1, r2, lr}
 80191a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80191aa:	4a1c      	ldr	r2, [pc, #112]	; (801921c <sinf+0x7c>)
 80191ac:	4293      	cmp	r3, r2
 80191ae:	dc05      	bgt.n	80191bc <sinf+0x1c>
 80191b0:	2000      	movs	r0, #0
 80191b2:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8019220 <sinf+0x80>
 80191b6:	f001 f927 	bl	801a408 <__kernel_sinf>
 80191ba:	e004      	b.n	80191c6 <sinf+0x26>
 80191bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80191c0:	db04      	blt.n	80191cc <sinf+0x2c>
 80191c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80191c6:	b003      	add	sp, #12
 80191c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80191cc:	4668      	mov	r0, sp
 80191ce:	f000 fcef 	bl	8019bb0 <__ieee754_rem_pio2f>
 80191d2:	f000 0003 	and.w	r0, r0, #3
 80191d6:	2801      	cmp	r0, #1
 80191d8:	d008      	beq.n	80191ec <sinf+0x4c>
 80191da:	2802      	cmp	r0, #2
 80191dc:	d00d      	beq.n	80191fa <sinf+0x5a>
 80191de:	b9b0      	cbnz	r0, 801920e <sinf+0x6e>
 80191e0:	2001      	movs	r0, #1
 80191e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80191e6:	ed9d 0a00 	vldr	s0, [sp]
 80191ea:	e7e4      	b.n	80191b6 <sinf+0x16>
 80191ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80191f0:	ed9d 0a00 	vldr	s0, [sp]
 80191f4:	f000 fe1c 	bl	8019e30 <__kernel_cosf>
 80191f8:	e7e5      	b.n	80191c6 <sinf+0x26>
 80191fa:	2001      	movs	r0, #1
 80191fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8019200:	ed9d 0a00 	vldr	s0, [sp]
 8019204:	f001 f900 	bl	801a408 <__kernel_sinf>
 8019208:	eeb1 0a40 	vneg.f32	s0, s0
 801920c:	e7db      	b.n	80191c6 <sinf+0x26>
 801920e:	eddd 0a01 	vldr	s1, [sp, #4]
 8019212:	ed9d 0a00 	vldr	s0, [sp]
 8019216:	f000 fe0b 	bl	8019e30 <__kernel_cosf>
 801921a:	e7f5      	b.n	8019208 <sinf+0x68>
 801921c:	3f490fd8 	.word	0x3f490fd8
 8019220:	00000000 	.word	0x00000000

08019224 <tanf>:
 8019224:	ee10 3a10 	vmov	r3, s0
 8019228:	b507      	push	{r0, r1, r2, lr}
 801922a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801922e:	4a0f      	ldr	r2, [pc, #60]	; (801926c <tanf+0x48>)
 8019230:	4293      	cmp	r3, r2
 8019232:	dc05      	bgt.n	8019240 <tanf+0x1c>
 8019234:	2001      	movs	r0, #1
 8019236:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8019270 <tanf+0x4c>
 801923a:	f001 f92d 	bl	801a498 <__kernel_tanf>
 801923e:	e004      	b.n	801924a <tanf+0x26>
 8019240:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019244:	db04      	blt.n	8019250 <tanf+0x2c>
 8019246:	ee30 0a40 	vsub.f32	s0, s0, s0
 801924a:	b003      	add	sp, #12
 801924c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019250:	4668      	mov	r0, sp
 8019252:	f000 fcad 	bl	8019bb0 <__ieee754_rem_pio2f>
 8019256:	eddd 0a01 	vldr	s1, [sp, #4]
 801925a:	0040      	lsls	r0, r0, #1
 801925c:	ed9d 0a00 	vldr	s0, [sp]
 8019260:	f000 0002 	and.w	r0, r0, #2
 8019264:	f1c0 0001 	rsb	r0, r0, #1
 8019268:	e7e7      	b.n	801923a <tanf+0x16>
 801926a:	bf00      	nop
 801926c:	3f490fda 	.word	0x3f490fda
 8019270:	00000000 	.word	0x00000000

08019274 <atan2>:
 8019274:	f000 b89c 	b.w	80193b0 <__ieee754_atan2>

08019278 <sqrt>:
 8019278:	b538      	push	{r3, r4, r5, lr}
 801927a:	ed2d 8b02 	vpush	{d8}
 801927e:	ec55 4b10 	vmov	r4, r5, d0
 8019282:	f000 f95f 	bl	8019544 <__ieee754_sqrt>
 8019286:	4b15      	ldr	r3, [pc, #84]	; (80192dc <sqrt+0x64>)
 8019288:	eeb0 8a40 	vmov.f32	s16, s0
 801928c:	eef0 8a60 	vmov.f32	s17, s1
 8019290:	f993 3000 	ldrsb.w	r3, [r3]
 8019294:	3301      	adds	r3, #1
 8019296:	d019      	beq.n	80192cc <sqrt+0x54>
 8019298:	4622      	mov	r2, r4
 801929a:	462b      	mov	r3, r5
 801929c:	4620      	mov	r0, r4
 801929e:	4629      	mov	r1, r5
 80192a0:	f7e7 fc48 	bl	8000b34 <__aeabi_dcmpun>
 80192a4:	b990      	cbnz	r0, 80192cc <sqrt+0x54>
 80192a6:	2200      	movs	r2, #0
 80192a8:	2300      	movs	r3, #0
 80192aa:	4620      	mov	r0, r4
 80192ac:	4629      	mov	r1, r5
 80192ae:	f7e7 fc19 	bl	8000ae4 <__aeabi_dcmplt>
 80192b2:	b158      	cbz	r0, 80192cc <sqrt+0x54>
 80192b4:	f001 fcd2 	bl	801ac5c <__errno>
 80192b8:	2321      	movs	r3, #33	; 0x21
 80192ba:	2200      	movs	r2, #0
 80192bc:	6003      	str	r3, [r0, #0]
 80192be:	2300      	movs	r3, #0
 80192c0:	4610      	mov	r0, r2
 80192c2:	4619      	mov	r1, r3
 80192c4:	f7e7 fac6 	bl	8000854 <__aeabi_ddiv>
 80192c8:	ec41 0b18 	vmov	d8, r0, r1
 80192cc:	eeb0 0a48 	vmov.f32	s0, s16
 80192d0:	eef0 0a68 	vmov.f32	s1, s17
 80192d4:	ecbd 8b02 	vpop	{d8}
 80192d8:	bd38      	pop	{r3, r4, r5, pc}
 80192da:	bf00      	nop
 80192dc:	200000ad 	.word	0x200000ad

080192e0 <acosf>:
 80192e0:	b508      	push	{r3, lr}
 80192e2:	ed2d 8b02 	vpush	{d8}
 80192e6:	eeb0 8a40 	vmov.f32	s16, s0
 80192ea:	f000 f9e3 	bl	80196b4 <__ieee754_acosf>
 80192ee:	4b13      	ldr	r3, [pc, #76]	; (801933c <acosf+0x5c>)
 80192f0:	eef0 8a40 	vmov.f32	s17, s0
 80192f4:	f993 3000 	ldrsb.w	r3, [r3]
 80192f8:	3301      	adds	r3, #1
 80192fa:	d01a      	beq.n	8019332 <acosf+0x52>
 80192fc:	eeb4 8a48 	vcmp.f32	s16, s16
 8019300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019304:	d615      	bvs.n	8019332 <acosf+0x52>
 8019306:	eeb0 0a48 	vmov.f32	s0, s16
 801930a:	f001 fc27 	bl	801ab5c <fabsf>
 801930e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019312:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801931a:	dd0a      	ble.n	8019332 <acosf+0x52>
 801931c:	f001 fc9e 	bl	801ac5c <__errno>
 8019320:	2321      	movs	r3, #33	; 0x21
 8019322:	ecbd 8b02 	vpop	{d8}
 8019326:	6003      	str	r3, [r0, #0]
 8019328:	4805      	ldr	r0, [pc, #20]	; (8019340 <acosf+0x60>)
 801932a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801932e:	f001 bc1f 	b.w	801ab70 <nanf>
 8019332:	eeb0 0a68 	vmov.f32	s0, s17
 8019336:	ecbd 8b02 	vpop	{d8}
 801933a:	bd08      	pop	{r3, pc}
 801933c:	200000ad 	.word	0x200000ad
 8019340:	0801bc3d 	.word	0x0801bc3d

08019344 <asinf>:
 8019344:	b508      	push	{r3, lr}
 8019346:	ed2d 8b02 	vpush	{d8}
 801934a:	eeb0 8a40 	vmov.f32	s16, s0
 801934e:	f000 faab 	bl	80198a8 <__ieee754_asinf>
 8019352:	4b13      	ldr	r3, [pc, #76]	; (80193a0 <asinf+0x5c>)
 8019354:	eef0 8a40 	vmov.f32	s17, s0
 8019358:	f993 3000 	ldrsb.w	r3, [r3]
 801935c:	3301      	adds	r3, #1
 801935e:	d01a      	beq.n	8019396 <asinf+0x52>
 8019360:	eeb4 8a48 	vcmp.f32	s16, s16
 8019364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019368:	d615      	bvs.n	8019396 <asinf+0x52>
 801936a:	eeb0 0a48 	vmov.f32	s0, s16
 801936e:	f001 fbf5 	bl	801ab5c <fabsf>
 8019372:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019376:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801937a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801937e:	dd0a      	ble.n	8019396 <asinf+0x52>
 8019380:	f001 fc6c 	bl	801ac5c <__errno>
 8019384:	2321      	movs	r3, #33	; 0x21
 8019386:	ecbd 8b02 	vpop	{d8}
 801938a:	6003      	str	r3, [r0, #0]
 801938c:	4805      	ldr	r0, [pc, #20]	; (80193a4 <asinf+0x60>)
 801938e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019392:	f001 bbed 	b.w	801ab70 <nanf>
 8019396:	eeb0 0a68 	vmov.f32	s0, s17
 801939a:	ecbd 8b02 	vpop	{d8}
 801939e:	bd08      	pop	{r3, pc}
 80193a0:	200000ad 	.word	0x200000ad
 80193a4:	0801bc3d 	.word	0x0801bc3d

080193a8 <atan2f>:
 80193a8:	f000 bb64 	b.w	8019a74 <__ieee754_atan2f>
 80193ac:	0000      	movs	r0, r0
	...

080193b0 <__ieee754_atan2>:
 80193b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193b4:	ec57 6b11 	vmov	r6, r7, d1
 80193b8:	4273      	negs	r3, r6
 80193ba:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80193be:	f8df e180 	ldr.w	lr, [pc, #384]	; 8019540 <__ieee754_atan2+0x190>
 80193c2:	ee11 8a10 	vmov	r8, s2
 80193c6:	4333      	orrs	r3, r6
 80193c8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80193cc:	4573      	cmp	r3, lr
 80193ce:	ec51 0b10 	vmov	r0, r1, d0
 80193d2:	d80a      	bhi.n	80193ea <__ieee754_atan2+0x3a>
 80193d4:	4244      	negs	r4, r0
 80193d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80193da:	468c      	mov	ip, r1
 80193dc:	ee10 9a10 	vmov	r9, s0
 80193e0:	4304      	orrs	r4, r0
 80193e2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80193e6:	4574      	cmp	r4, lr
 80193e8:	d907      	bls.n	80193fa <__ieee754_atan2+0x4a>
 80193ea:	4632      	mov	r2, r6
 80193ec:	463b      	mov	r3, r7
 80193ee:	f7e6 ff51 	bl	8000294 <__adddf3>
 80193f2:	ec41 0b10 	vmov	d0, r0, r1
 80193f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80193fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019402:	4334      	orrs	r4, r6
 8019404:	d103      	bne.n	801940e <__ieee754_atan2+0x5e>
 8019406:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801940a:	f001 b929 	b.w	801a660 <atan>
 801940e:	17bc      	asrs	r4, r7, #30
 8019410:	ea53 0909 	orrs.w	r9, r3, r9
 8019414:	f004 0402 	and.w	r4, r4, #2
 8019418:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801941c:	d107      	bne.n	801942e <__ieee754_atan2+0x7e>
 801941e:	2c02      	cmp	r4, #2
 8019420:	d060      	beq.n	80194e4 <__ieee754_atan2+0x134>
 8019422:	2c03      	cmp	r4, #3
 8019424:	d1e5      	bne.n	80193f2 <__ieee754_atan2+0x42>
 8019426:	a142      	add	r1, pc, #264	; (adr r1, 8019530 <__ieee754_atan2+0x180>)
 8019428:	e9d1 0100 	ldrd	r0, r1, [r1]
 801942c:	e7e1      	b.n	80193f2 <__ieee754_atan2+0x42>
 801942e:	ea52 0808 	orrs.w	r8, r2, r8
 8019432:	d106      	bne.n	8019442 <__ieee754_atan2+0x92>
 8019434:	f1bc 0f00 	cmp.w	ip, #0
 8019438:	da5f      	bge.n	80194fa <__ieee754_atan2+0x14a>
 801943a:	a13f      	add	r1, pc, #252	; (adr r1, 8019538 <__ieee754_atan2+0x188>)
 801943c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019440:	e7d7      	b.n	80193f2 <__ieee754_atan2+0x42>
 8019442:	4572      	cmp	r2, lr
 8019444:	d10f      	bne.n	8019466 <__ieee754_atan2+0xb6>
 8019446:	4293      	cmp	r3, r2
 8019448:	f104 34ff 	add.w	r4, r4, #4294967295
 801944c:	d107      	bne.n	801945e <__ieee754_atan2+0xae>
 801944e:	2c02      	cmp	r4, #2
 8019450:	d84c      	bhi.n	80194ec <__ieee754_atan2+0x13c>
 8019452:	4b35      	ldr	r3, [pc, #212]	; (8019528 <__ieee754_atan2+0x178>)
 8019454:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8019458:	e9d4 0100 	ldrd	r0, r1, [r4]
 801945c:	e7c9      	b.n	80193f2 <__ieee754_atan2+0x42>
 801945e:	2c02      	cmp	r4, #2
 8019460:	d848      	bhi.n	80194f4 <__ieee754_atan2+0x144>
 8019462:	4b32      	ldr	r3, [pc, #200]	; (801952c <__ieee754_atan2+0x17c>)
 8019464:	e7f6      	b.n	8019454 <__ieee754_atan2+0xa4>
 8019466:	4573      	cmp	r3, lr
 8019468:	d0e4      	beq.n	8019434 <__ieee754_atan2+0x84>
 801946a:	1a9b      	subs	r3, r3, r2
 801946c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8019470:	ea4f 5223 	mov.w	r2, r3, asr #20
 8019474:	da1e      	bge.n	80194b4 <__ieee754_atan2+0x104>
 8019476:	2f00      	cmp	r7, #0
 8019478:	da01      	bge.n	801947e <__ieee754_atan2+0xce>
 801947a:	323c      	adds	r2, #60	; 0x3c
 801947c:	db1e      	blt.n	80194bc <__ieee754_atan2+0x10c>
 801947e:	4632      	mov	r2, r6
 8019480:	463b      	mov	r3, r7
 8019482:	f7e7 f9e7 	bl	8000854 <__aeabi_ddiv>
 8019486:	ec41 0b10 	vmov	d0, r0, r1
 801948a:	f001 fa89 	bl	801a9a0 <fabs>
 801948e:	f001 f8e7 	bl	801a660 <atan>
 8019492:	ec51 0b10 	vmov	r0, r1, d0
 8019496:	2c01      	cmp	r4, #1
 8019498:	d013      	beq.n	80194c2 <__ieee754_atan2+0x112>
 801949a:	2c02      	cmp	r4, #2
 801949c:	d015      	beq.n	80194ca <__ieee754_atan2+0x11a>
 801949e:	2c00      	cmp	r4, #0
 80194a0:	d0a7      	beq.n	80193f2 <__ieee754_atan2+0x42>
 80194a2:	a319      	add	r3, pc, #100	; (adr r3, 8019508 <__ieee754_atan2+0x158>)
 80194a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194a8:	f7e6 fef2 	bl	8000290 <__aeabi_dsub>
 80194ac:	a318      	add	r3, pc, #96	; (adr r3, 8019510 <__ieee754_atan2+0x160>)
 80194ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194b2:	e014      	b.n	80194de <__ieee754_atan2+0x12e>
 80194b4:	a118      	add	r1, pc, #96	; (adr r1, 8019518 <__ieee754_atan2+0x168>)
 80194b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80194ba:	e7ec      	b.n	8019496 <__ieee754_atan2+0xe6>
 80194bc:	2000      	movs	r0, #0
 80194be:	2100      	movs	r1, #0
 80194c0:	e7e9      	b.n	8019496 <__ieee754_atan2+0xe6>
 80194c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80194c6:	4619      	mov	r1, r3
 80194c8:	e793      	b.n	80193f2 <__ieee754_atan2+0x42>
 80194ca:	a30f      	add	r3, pc, #60	; (adr r3, 8019508 <__ieee754_atan2+0x158>)
 80194cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194d0:	f7e6 fede 	bl	8000290 <__aeabi_dsub>
 80194d4:	4602      	mov	r2, r0
 80194d6:	460b      	mov	r3, r1
 80194d8:	a10d      	add	r1, pc, #52	; (adr r1, 8019510 <__ieee754_atan2+0x160>)
 80194da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80194de:	f7e6 fed7 	bl	8000290 <__aeabi_dsub>
 80194e2:	e786      	b.n	80193f2 <__ieee754_atan2+0x42>
 80194e4:	a10a      	add	r1, pc, #40	; (adr r1, 8019510 <__ieee754_atan2+0x160>)
 80194e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80194ea:	e782      	b.n	80193f2 <__ieee754_atan2+0x42>
 80194ec:	a10c      	add	r1, pc, #48	; (adr r1, 8019520 <__ieee754_atan2+0x170>)
 80194ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80194f2:	e77e      	b.n	80193f2 <__ieee754_atan2+0x42>
 80194f4:	2000      	movs	r0, #0
 80194f6:	2100      	movs	r1, #0
 80194f8:	e77b      	b.n	80193f2 <__ieee754_atan2+0x42>
 80194fa:	a107      	add	r1, pc, #28	; (adr r1, 8019518 <__ieee754_atan2+0x168>)
 80194fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019500:	e777      	b.n	80193f2 <__ieee754_atan2+0x42>
 8019502:	bf00      	nop
 8019504:	f3af 8000 	nop.w
 8019508:	33145c07 	.word	0x33145c07
 801950c:	3ca1a626 	.word	0x3ca1a626
 8019510:	54442d18 	.word	0x54442d18
 8019514:	400921fb 	.word	0x400921fb
 8019518:	54442d18 	.word	0x54442d18
 801951c:	3ff921fb 	.word	0x3ff921fb
 8019520:	54442d18 	.word	0x54442d18
 8019524:	3fe921fb 	.word	0x3fe921fb
 8019528:	0801b7c0 	.word	0x0801b7c0
 801952c:	0801b7d8 	.word	0x0801b7d8
 8019530:	54442d18 	.word	0x54442d18
 8019534:	c00921fb 	.word	0xc00921fb
 8019538:	54442d18 	.word	0x54442d18
 801953c:	bff921fb 	.word	0xbff921fb
 8019540:	7ff00000 	.word	0x7ff00000

08019544 <__ieee754_sqrt>:
 8019544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019548:	4e59      	ldr	r6, [pc, #356]	; (80196b0 <__ieee754_sqrt+0x16c>)
 801954a:	ee10 0a10 	vmov	r0, s0
 801954e:	ee10 3a10 	vmov	r3, s0
 8019552:	ec55 4b10 	vmov	r4, r5, d0
 8019556:	43ae      	bics	r6, r5
 8019558:	4629      	mov	r1, r5
 801955a:	462a      	mov	r2, r5
 801955c:	d110      	bne.n	8019580 <__ieee754_sqrt+0x3c>
 801955e:	ee10 2a10 	vmov	r2, s0
 8019562:	462b      	mov	r3, r5
 8019564:	f7e7 f84c 	bl	8000600 <__aeabi_dmul>
 8019568:	4602      	mov	r2, r0
 801956a:	460b      	mov	r3, r1
 801956c:	4620      	mov	r0, r4
 801956e:	4629      	mov	r1, r5
 8019570:	f7e6 fe90 	bl	8000294 <__adddf3>
 8019574:	4604      	mov	r4, r0
 8019576:	460d      	mov	r5, r1
 8019578:	ec45 4b10 	vmov	d0, r4, r5
 801957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019580:	2d00      	cmp	r5, #0
 8019582:	dc10      	bgt.n	80195a6 <__ieee754_sqrt+0x62>
 8019584:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019588:	4330      	orrs	r0, r6
 801958a:	d0f5      	beq.n	8019578 <__ieee754_sqrt+0x34>
 801958c:	b15d      	cbz	r5, 80195a6 <__ieee754_sqrt+0x62>
 801958e:	ee10 2a10 	vmov	r2, s0
 8019592:	462b      	mov	r3, r5
 8019594:	ee10 0a10 	vmov	r0, s0
 8019598:	f7e6 fe7a 	bl	8000290 <__aeabi_dsub>
 801959c:	4602      	mov	r2, r0
 801959e:	460b      	mov	r3, r1
 80195a0:	f7e7 f958 	bl	8000854 <__aeabi_ddiv>
 80195a4:	e7e6      	b.n	8019574 <__ieee754_sqrt+0x30>
 80195a6:	1509      	asrs	r1, r1, #20
 80195a8:	d07a      	beq.n	80196a0 <__ieee754_sqrt+0x15c>
 80195aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80195ae:	07ce      	lsls	r6, r1, #31
 80195b0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80195b4:	f04f 0e16 	mov.w	lr, #22
 80195b8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80195bc:	bf5c      	itt	pl
 80195be:	0fda      	lsrpl	r2, r3, #31
 80195c0:	005b      	lslpl	r3, r3, #1
 80195c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80195c6:	bf58      	it	pl
 80195c8:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80195cc:	0fda      	lsrs	r2, r3, #31
 80195ce:	106d      	asrs	r5, r5, #1
 80195d0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80195d4:	2000      	movs	r0, #0
 80195d6:	005b      	lsls	r3, r3, #1
 80195d8:	4684      	mov	ip, r0
 80195da:	eb0c 0401 	add.w	r4, ip, r1
 80195de:	4294      	cmp	r4, r2
 80195e0:	bfde      	ittt	le
 80195e2:	1b12      	suble	r2, r2, r4
 80195e4:	eb04 0c01 	addle.w	ip, r4, r1
 80195e8:	1840      	addle	r0, r0, r1
 80195ea:	f1be 0e01 	subs.w	lr, lr, #1
 80195ee:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80195f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80195f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80195fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80195fe:	d1ec      	bne.n	80195da <__ieee754_sqrt+0x96>
 8019600:	4671      	mov	r1, lr
 8019602:	2720      	movs	r7, #32
 8019604:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019608:	4562      	cmp	r2, ip
 801960a:	eb04 060e 	add.w	r6, r4, lr
 801960e:	dc02      	bgt.n	8019616 <__ieee754_sqrt+0xd2>
 8019610:	d114      	bne.n	801963c <__ieee754_sqrt+0xf8>
 8019612:	429e      	cmp	r6, r3
 8019614:	d812      	bhi.n	801963c <__ieee754_sqrt+0xf8>
 8019616:	2e00      	cmp	r6, #0
 8019618:	eb06 0e04 	add.w	lr, r6, r4
 801961c:	da45      	bge.n	80196aa <__ieee754_sqrt+0x166>
 801961e:	f1be 0f00 	cmp.w	lr, #0
 8019622:	db42      	blt.n	80196aa <__ieee754_sqrt+0x166>
 8019624:	f10c 0801 	add.w	r8, ip, #1
 8019628:	eba2 020c 	sub.w	r2, r2, ip
 801962c:	429e      	cmp	r6, r3
 801962e:	4421      	add	r1, r4
 8019630:	eba3 0306 	sub.w	r3, r3, r6
 8019634:	bf88      	it	hi
 8019636:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801963a:	46c4      	mov	ip, r8
 801963c:	0052      	lsls	r2, r2, #1
 801963e:	3f01      	subs	r7, #1
 8019640:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019644:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019648:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801964c:	d1dc      	bne.n	8019608 <__ieee754_sqrt+0xc4>
 801964e:	4313      	orrs	r3, r2
 8019650:	d006      	beq.n	8019660 <__ieee754_sqrt+0x11c>
 8019652:	1c4c      	adds	r4, r1, #1
 8019654:	bf13      	iteet	ne
 8019656:	3101      	addne	r1, #1
 8019658:	3001      	addeq	r0, #1
 801965a:	4639      	moveq	r1, r7
 801965c:	f021 0101 	bicne.w	r1, r1, #1
 8019660:	1043      	asrs	r3, r0, #1
 8019662:	07c2      	lsls	r2, r0, #31
 8019664:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019668:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801966c:	bf48      	it	mi
 801966e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8019672:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8019676:	460c      	mov	r4, r1
 8019678:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801967c:	463d      	mov	r5, r7
 801967e:	e77b      	b.n	8019578 <__ieee754_sqrt+0x34>
 8019680:	0ada      	lsrs	r2, r3, #11
 8019682:	3815      	subs	r0, #21
 8019684:	055b      	lsls	r3, r3, #21
 8019686:	2a00      	cmp	r2, #0
 8019688:	d0fa      	beq.n	8019680 <__ieee754_sqrt+0x13c>
 801968a:	02d7      	lsls	r7, r2, #11
 801968c:	d50a      	bpl.n	80196a4 <__ieee754_sqrt+0x160>
 801968e:	f1c1 0420 	rsb	r4, r1, #32
 8019692:	1e4d      	subs	r5, r1, #1
 8019694:	fa23 f404 	lsr.w	r4, r3, r4
 8019698:	408b      	lsls	r3, r1
 801969a:	1b41      	subs	r1, r0, r5
 801969c:	4322      	orrs	r2, r4
 801969e:	e784      	b.n	80195aa <__ieee754_sqrt+0x66>
 80196a0:	4608      	mov	r0, r1
 80196a2:	e7f0      	b.n	8019686 <__ieee754_sqrt+0x142>
 80196a4:	0052      	lsls	r2, r2, #1
 80196a6:	3101      	adds	r1, #1
 80196a8:	e7ef      	b.n	801968a <__ieee754_sqrt+0x146>
 80196aa:	46e0      	mov	r8, ip
 80196ac:	e7bc      	b.n	8019628 <__ieee754_sqrt+0xe4>
 80196ae:	bf00      	nop
 80196b0:	7ff00000 	.word	0x7ff00000

080196b4 <__ieee754_acosf>:
 80196b4:	b508      	push	{r3, lr}
 80196b6:	ee10 3a10 	vmov	r3, s0
 80196ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80196be:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80196c2:	ed2d 8b0c 	vpush	{d8-d13}
 80196c6:	d109      	bne.n	80196dc <__ieee754_acosf+0x28>
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8019864 <__ieee754_acosf+0x1b0>
 80196ce:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8019868 <__ieee754_acosf+0x1b4>
 80196d2:	fe30 0a08 	vselgt.f32	s0, s0, s16
 80196d6:	ecbd 8b0c 	vpop	{d8-d13}
 80196da:	bd08      	pop	{r3, pc}
 80196dc:	dd04      	ble.n	80196e8 <__ieee754_acosf+0x34>
 80196de:	ee30 8a40 	vsub.f32	s16, s0, s0
 80196e2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80196e6:	e7f6      	b.n	80196d6 <__ieee754_acosf+0x22>
 80196e8:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80196ec:	da3e      	bge.n	801976c <__ieee754_acosf+0xb8>
 80196ee:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80196f2:	f340 80b3 	ble.w	801985c <__ieee754_acosf+0x1a8>
 80196f6:	ee60 7a00 	vmul.f32	s15, s0, s0
 80196fa:	eddf 6a5c 	vldr	s13, [pc, #368]	; 801986c <__ieee754_acosf+0x1b8>
 80196fe:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8019870 <__ieee754_acosf+0x1bc>
 8019702:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 8019874 <__ieee754_acosf+0x1c0>
 8019706:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801970a:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8019878 <__ieee754_acosf+0x1c4>
 801970e:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 801987c <__ieee754_acosf+0x1c8>
 8019712:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019716:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8019880 <__ieee754_acosf+0x1cc>
 801971a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801971e:	eddf 6a59 	vldr	s13, [pc, #356]	; 8019884 <__ieee754_acosf+0x1d0>
 8019722:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019726:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8019888 <__ieee754_acosf+0x1d4>
 801972a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801972e:	eddf 6a57 	vldr	s13, [pc, #348]	; 801988c <__ieee754_acosf+0x1d8>
 8019732:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019736:	eddf 6a56 	vldr	s13, [pc, #344]	; 8019890 <__ieee754_acosf+0x1dc>
 801973a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801973e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019742:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8019894 <__ieee754_acosf+0x1e0>
 8019746:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801974a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801974e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019752:	eef0 7a66 	vmov.f32	s15, s13
 8019756:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801975a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8019898 <__ieee754_acosf+0x1e4>
 801975e:	eea0 8a66 	vfms.f32	s16, s0, s13
 8019762:	ee30 0a48 	vsub.f32	s0, s0, s16
 8019766:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801976a:	e7b4      	b.n	80196d6 <__ieee754_acosf+0x22>
 801976c:	2b00      	cmp	r3, #0
 801976e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8019772:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019776:	eddf da3d 	vldr	s27, [pc, #244]	; 801986c <__ieee754_acosf+0x1b8>
 801977a:	eddf ca3d 	vldr	s25, [pc, #244]	; 8019870 <__ieee754_acosf+0x1bc>
 801977e:	ed9f ca3e 	vldr	s24, [pc, #248]	; 8019878 <__ieee754_acosf+0x1c4>
 8019782:	eddf ba3f 	vldr	s23, [pc, #252]	; 8019880 <__ieee754_acosf+0x1cc>
 8019786:	ed9f ba3f 	vldr	s22, [pc, #252]	; 8019884 <__ieee754_acosf+0x1d0>
 801978a:	eddf 8a3f 	vldr	s17, [pc, #252]	; 8019888 <__ieee754_acosf+0x1d4>
 801978e:	ed9f da3f 	vldr	s26, [pc, #252]	; 801988c <__ieee754_acosf+0x1d8>
 8019792:	eddf aa38 	vldr	s21, [pc, #224]	; 8019874 <__ieee754_acosf+0x1c0>
 8019796:	ed9f aa3e 	vldr	s20, [pc, #248]	; 8019890 <__ieee754_acosf+0x1dc>
 801979a:	eddf 9a3e 	vldr	s19, [pc, #248]	; 8019894 <__ieee754_acosf+0x1e0>
 801979e:	da28      	bge.n	80197f2 <__ieee754_acosf+0x13e>
 80197a0:	ee30 0a09 	vadd.f32	s0, s0, s18
 80197a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80197a8:	eee0 ca2d 	vfma.f32	s25, s0, s27
 80197ac:	eee0 aa0d 	vfma.f32	s21, s0, s26
 80197b0:	eeac ca80 	vfma.f32	s24, s25, s0
 80197b4:	eeaa aa80 	vfma.f32	s20, s21, s0
 80197b8:	eeec ba00 	vfma.f32	s23, s24, s0
 80197bc:	eeea 9a00 	vfma.f32	s19, s20, s0
 80197c0:	eeab ba80 	vfma.f32	s22, s23, s0
 80197c4:	eea9 9a80 	vfma.f32	s18, s19, s0
 80197c8:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80197cc:	ee68 8a80 	vmul.f32	s17, s17, s0
 80197d0:	f000 fb2a 	bl	8019e28 <__ieee754_sqrtf>
 80197d4:	eddf 7a31 	vldr	s15, [pc, #196]	; 801989c <__ieee754_acosf+0x1e8>
 80197d8:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80197dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80197e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80197e4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80197e8:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80198a0 <__ieee754_acosf+0x1ec>
 80197ec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80197f0:	e771      	b.n	80196d6 <__ieee754_acosf+0x22>
 80197f2:	ee39 8a40 	vsub.f32	s16, s18, s0
 80197f6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80197fa:	eeb0 0a48 	vmov.f32	s0, s16
 80197fe:	f000 fb13 	bl	8019e28 <__ieee754_sqrtf>
 8019802:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8019806:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801980a:	ee10 3a10 	vmov	r3, s0
 801980e:	eeb0 6a48 	vmov.f32	s12, s16
 8019812:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8019816:	f023 030f 	bic.w	r3, r3, #15
 801981a:	eeac ca88 	vfma.f32	s24, s25, s16
 801981e:	eeaa aa88 	vfma.f32	s20, s21, s16
 8019822:	ee07 3a90 	vmov	s15, r3
 8019826:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801982a:	ee70 6a27 	vadd.f32	s13, s0, s15
 801982e:	eeec ba08 	vfma.f32	s23, s24, s16
 8019832:	eeea 9a08 	vfma.f32	s19, s20, s16
 8019836:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801983a:	eeab ba88 	vfma.f32	s22, s23, s16
 801983e:	eea9 9a88 	vfma.f32	s18, s19, s16
 8019842:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8019846:	ee68 8a88 	vmul.f32	s17, s17, s16
 801984a:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801984e:	eea0 7a26 	vfma.f32	s14, s0, s13
 8019852:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019856:	ee30 0a00 	vadd.f32	s0, s0, s0
 801985a:	e73c      	b.n	80196d6 <__ieee754_acosf+0x22>
 801985c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80198a4 <__ieee754_acosf+0x1f0>
 8019860:	e739      	b.n	80196d6 <__ieee754_acosf+0x22>
 8019862:	bf00      	nop
 8019864:	00000000 	.word	0x00000000
 8019868:	40490fdb 	.word	0x40490fdb
 801986c:	3811ef08 	.word	0x3811ef08
 8019870:	3a4f7f04 	.word	0x3a4f7f04
 8019874:	bf303361 	.word	0xbf303361
 8019878:	bd241146 	.word	0xbd241146
 801987c:	33a22168 	.word	0x33a22168
 8019880:	3e4e0aa8 	.word	0x3e4e0aa8
 8019884:	bea6b090 	.word	0xbea6b090
 8019888:	3e2aaaab 	.word	0x3e2aaaab
 801988c:	3d9dc62e 	.word	0x3d9dc62e
 8019890:	4001572d 	.word	0x4001572d
 8019894:	c019d139 	.word	0xc019d139
 8019898:	3fc90fda 	.word	0x3fc90fda
 801989c:	b3a22168 	.word	0xb3a22168
 80198a0:	40490fda 	.word	0x40490fda
 80198a4:	3fc90fdb 	.word	0x3fc90fdb

080198a8 <__ieee754_asinf>:
 80198a8:	b538      	push	{r3, r4, r5, lr}
 80198aa:	ee10 5a10 	vmov	r5, s0
 80198ae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80198b2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80198b6:	ed2d 8b04 	vpush	{d8-d9}
 80198ba:	d10c      	bne.n	80198d6 <__ieee754_asinf+0x2e>
 80198bc:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8019a34 <__ieee754_asinf+0x18c>
 80198c0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8019a38 <__ieee754_asinf+0x190>
 80198c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80198c8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80198cc:	eeb0 0a67 	vmov.f32	s0, s15
 80198d0:	ecbd 8b04 	vpop	{d8-d9}
 80198d4:	bd38      	pop	{r3, r4, r5, pc}
 80198d6:	dd04      	ble.n	80198e2 <__ieee754_asinf+0x3a>
 80198d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80198dc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80198e0:	e7f6      	b.n	80198d0 <__ieee754_asinf+0x28>
 80198e2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80198e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80198ea:	da0b      	bge.n	8019904 <__ieee754_asinf+0x5c>
 80198ec:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80198f0:	da52      	bge.n	8019998 <__ieee754_asinf+0xf0>
 80198f2:	eddf 7a52 	vldr	s15, [pc, #328]	; 8019a3c <__ieee754_asinf+0x194>
 80198f6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80198fa:	eef4 7ae8 	vcmpe.f32	s15, s17
 80198fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019902:	dce5      	bgt.n	80198d0 <__ieee754_asinf+0x28>
 8019904:	f001 f92a 	bl	801ab5c <fabsf>
 8019908:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 801990c:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8019910:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8019a40 <__ieee754_asinf+0x198>
 8019914:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8019a44 <__ieee754_asinf+0x19c>
 8019918:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8019a48 <__ieee754_asinf+0x1a0>
 801991c:	ee20 8a08 	vmul.f32	s16, s0, s16
 8019920:	eea8 7a27 	vfma.f32	s14, s16, s15
 8019924:	eddf 7a49 	vldr	s15, [pc, #292]	; 8019a4c <__ieee754_asinf+0x1a4>
 8019928:	eeb0 0a48 	vmov.f32	s0, s16
 801992c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019930:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8019a50 <__ieee754_asinf+0x1a8>
 8019934:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019938:	eddf 7a46 	vldr	s15, [pc, #280]	; 8019a54 <__ieee754_asinf+0x1ac>
 801993c:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019940:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8019a58 <__ieee754_asinf+0x1b0>
 8019944:	eea7 9a88 	vfma.f32	s18, s15, s16
 8019948:	eddf 7a44 	vldr	s15, [pc, #272]	; 8019a5c <__ieee754_asinf+0x1b4>
 801994c:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019950:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8019a60 <__ieee754_asinf+0x1b8>
 8019954:	ee29 9a08 	vmul.f32	s18, s18, s16
 8019958:	eea7 7a88 	vfma.f32	s14, s15, s16
 801995c:	eddf 7a41 	vldr	s15, [pc, #260]	; 8019a64 <__ieee754_asinf+0x1bc>
 8019960:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019964:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019968:	f000 fa5e 	bl	8019e28 <__ieee754_sqrtf>
 801996c:	4b3e      	ldr	r3, [pc, #248]	; (8019a68 <__ieee754_asinf+0x1c0>)
 801996e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8019972:	429c      	cmp	r4, r3
 8019974:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8019978:	dd3d      	ble.n	80199f6 <__ieee754_asinf+0x14e>
 801997a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8019a6c <__ieee754_asinf+0x1c4>
 801997e:	eea0 0a06 	vfma.f32	s0, s0, s12
 8019982:	eee0 7a26 	vfma.f32	s15, s0, s13
 8019986:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8019a38 <__ieee754_asinf+0x190>
 801998a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801998e:	2d00      	cmp	r5, #0
 8019990:	bfd8      	it	le
 8019992:	eeb1 0a40 	vnegle.f32	s0, s0
 8019996:	e79b      	b.n	80198d0 <__ieee754_asinf+0x28>
 8019998:	ee60 7a00 	vmul.f32	s15, s0, s0
 801999c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8019a40 <__ieee754_asinf+0x198>
 80199a0:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8019a44 <__ieee754_asinf+0x19c>
 80199a4:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8019a58 <__ieee754_asinf+0x1b0>
 80199a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80199ac:	eddf 6a27 	vldr	s13, [pc, #156]	; 8019a4c <__ieee754_asinf+0x1a4>
 80199b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80199b4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8019a50 <__ieee754_asinf+0x1a8>
 80199b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80199bc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8019a54 <__ieee754_asinf+0x1ac>
 80199c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80199c4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8019a48 <__ieee754_asinf+0x1a0>
 80199c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80199cc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8019a5c <__ieee754_asinf+0x1b4>
 80199d0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80199d4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8019a60 <__ieee754_asinf+0x1b8>
 80199d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80199dc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80199e0:	eddf 6a20 	vldr	s13, [pc, #128]	; 8019a64 <__ieee754_asinf+0x1bc>
 80199e4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80199e8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80199ec:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80199f0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80199f4:	e76c      	b.n	80198d0 <__ieee754_asinf+0x28>
 80199f6:	ee10 3a10 	vmov	r3, s0
 80199fa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80199fe:	f023 030f 	bic.w	r3, r3, #15
 8019a02:	ee07 3a10 	vmov	s14, r3
 8019a06:	eea7 8a47 	vfms.f32	s16, s14, s14
 8019a0a:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019a0e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019a12:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8019a16:	eddf 7a07 	vldr	s15, [pc, #28]	; 8019a34 <__ieee754_asinf+0x18c>
 8019a1a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8019a1e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8019a22:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8019a70 <__ieee754_asinf+0x1c8>
 8019a26:	eeb0 6a40 	vmov.f32	s12, s0
 8019a2a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019a2e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019a32:	e7aa      	b.n	801998a <__ieee754_asinf+0xe2>
 8019a34:	b33bbd2e 	.word	0xb33bbd2e
 8019a38:	3fc90fdb 	.word	0x3fc90fdb
 8019a3c:	7149f2ca 	.word	0x7149f2ca
 8019a40:	3811ef08 	.word	0x3811ef08
 8019a44:	3a4f7f04 	.word	0x3a4f7f04
 8019a48:	3e2aaaab 	.word	0x3e2aaaab
 8019a4c:	bd241146 	.word	0xbd241146
 8019a50:	3e4e0aa8 	.word	0x3e4e0aa8
 8019a54:	bea6b090 	.word	0xbea6b090
 8019a58:	3d9dc62e 	.word	0x3d9dc62e
 8019a5c:	bf303361 	.word	0xbf303361
 8019a60:	4001572d 	.word	0x4001572d
 8019a64:	c019d139 	.word	0xc019d139
 8019a68:	3f799999 	.word	0x3f799999
 8019a6c:	333bbd2e 	.word	0x333bbd2e
 8019a70:	3f490fdb 	.word	0x3f490fdb

08019a74 <__ieee754_atan2f>:
 8019a74:	ee10 2a90 	vmov	r2, s1
 8019a78:	eef0 7a40 	vmov.f32	s15, s0
 8019a7c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019a80:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019a84:	b510      	push	{r4, lr}
 8019a86:	dc06      	bgt.n	8019a96 <__ieee754_atan2f+0x22>
 8019a88:	ee10 0a10 	vmov	r0, s0
 8019a8c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8019a90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019a94:	dd04      	ble.n	8019aa0 <__ieee754_atan2f+0x2c>
 8019a96:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8019a9e:	bd10      	pop	{r4, pc}
 8019aa0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8019aa4:	d103      	bne.n	8019aae <__ieee754_atan2f+0x3a>
 8019aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019aaa:	f000 bf83 	b.w	801a9b4 <atanf>
 8019aae:	1794      	asrs	r4, r2, #30
 8019ab0:	f004 0402 	and.w	r4, r4, #2
 8019ab4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019ab8:	b93b      	cbnz	r3, 8019aca <__ieee754_atan2f+0x56>
 8019aba:	2c02      	cmp	r4, #2
 8019abc:	d05c      	beq.n	8019b78 <__ieee754_atan2f+0x104>
 8019abe:	2c03      	cmp	r4, #3
 8019ac0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8019b8c <__ieee754_atan2f+0x118>
 8019ac4:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8019ac8:	e7e7      	b.n	8019a9a <__ieee754_atan2f+0x26>
 8019aca:	b939      	cbnz	r1, 8019adc <__ieee754_atan2f+0x68>
 8019acc:	2800      	cmp	r0, #0
 8019ace:	eddf 7a30 	vldr	s15, [pc, #192]	; 8019b90 <__ieee754_atan2f+0x11c>
 8019ad2:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8019b94 <__ieee754_atan2f+0x120>
 8019ad6:	fe67 7a80 	vselge.f32	s15, s15, s0
 8019ada:	e7de      	b.n	8019a9a <__ieee754_atan2f+0x26>
 8019adc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019ae0:	d110      	bne.n	8019b04 <__ieee754_atan2f+0x90>
 8019ae2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019ae6:	f104 34ff 	add.w	r4, r4, #4294967295
 8019aea:	d107      	bne.n	8019afc <__ieee754_atan2f+0x88>
 8019aec:	2c02      	cmp	r4, #2
 8019aee:	d846      	bhi.n	8019b7e <__ieee754_atan2f+0x10a>
 8019af0:	4b29      	ldr	r3, [pc, #164]	; (8019b98 <__ieee754_atan2f+0x124>)
 8019af2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019af6:	edd4 7a00 	vldr	s15, [r4]
 8019afa:	e7ce      	b.n	8019a9a <__ieee754_atan2f+0x26>
 8019afc:	2c02      	cmp	r4, #2
 8019afe:	d841      	bhi.n	8019b84 <__ieee754_atan2f+0x110>
 8019b00:	4b26      	ldr	r3, [pc, #152]	; (8019b9c <__ieee754_atan2f+0x128>)
 8019b02:	e7f6      	b.n	8019af2 <__ieee754_atan2f+0x7e>
 8019b04:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019b08:	d0e0      	beq.n	8019acc <__ieee754_atan2f+0x58>
 8019b0a:	1a5b      	subs	r3, r3, r1
 8019b0c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8019b10:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019b14:	da1a      	bge.n	8019b4c <__ieee754_atan2f+0xd8>
 8019b16:	2a00      	cmp	r2, #0
 8019b18:	da01      	bge.n	8019b1e <__ieee754_atan2f+0xaa>
 8019b1a:	313c      	adds	r1, #60	; 0x3c
 8019b1c:	db19      	blt.n	8019b52 <__ieee754_atan2f+0xde>
 8019b1e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019b22:	f001 f81b 	bl	801ab5c <fabsf>
 8019b26:	f000 ff45 	bl	801a9b4 <atanf>
 8019b2a:	eef0 7a40 	vmov.f32	s15, s0
 8019b2e:	2c01      	cmp	r4, #1
 8019b30:	d012      	beq.n	8019b58 <__ieee754_atan2f+0xe4>
 8019b32:	2c02      	cmp	r4, #2
 8019b34:	d017      	beq.n	8019b66 <__ieee754_atan2f+0xf2>
 8019b36:	2c00      	cmp	r4, #0
 8019b38:	d0af      	beq.n	8019a9a <__ieee754_atan2f+0x26>
 8019b3a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8019ba0 <__ieee754_atan2f+0x12c>
 8019b3e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019b42:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8019ba4 <__ieee754_atan2f+0x130>
 8019b46:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019b4a:	e7a6      	b.n	8019a9a <__ieee754_atan2f+0x26>
 8019b4c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8019b90 <__ieee754_atan2f+0x11c>
 8019b50:	e7ed      	b.n	8019b2e <__ieee754_atan2f+0xba>
 8019b52:	eddf 7a15 	vldr	s15, [pc, #84]	; 8019ba8 <__ieee754_atan2f+0x134>
 8019b56:	e7ea      	b.n	8019b2e <__ieee754_atan2f+0xba>
 8019b58:	ee17 3a90 	vmov	r3, s15
 8019b5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019b60:	ee07 3a90 	vmov	s15, r3
 8019b64:	e799      	b.n	8019a9a <__ieee754_atan2f+0x26>
 8019b66:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8019ba0 <__ieee754_atan2f+0x12c>
 8019b6a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019b6e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8019ba4 <__ieee754_atan2f+0x130>
 8019b72:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019b76:	e790      	b.n	8019a9a <__ieee754_atan2f+0x26>
 8019b78:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8019ba4 <__ieee754_atan2f+0x130>
 8019b7c:	e78d      	b.n	8019a9a <__ieee754_atan2f+0x26>
 8019b7e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8019bac <__ieee754_atan2f+0x138>
 8019b82:	e78a      	b.n	8019a9a <__ieee754_atan2f+0x26>
 8019b84:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019ba8 <__ieee754_atan2f+0x134>
 8019b88:	e787      	b.n	8019a9a <__ieee754_atan2f+0x26>
 8019b8a:	bf00      	nop
 8019b8c:	c0490fdb 	.word	0xc0490fdb
 8019b90:	3fc90fdb 	.word	0x3fc90fdb
 8019b94:	bfc90fdb 	.word	0xbfc90fdb
 8019b98:	0801b7f0 	.word	0x0801b7f0
 8019b9c:	0801b7fc 	.word	0x0801b7fc
 8019ba0:	33bbbd2e 	.word	0x33bbbd2e
 8019ba4:	40490fdb 	.word	0x40490fdb
 8019ba8:	00000000 	.word	0x00000000
 8019bac:	3f490fdb 	.word	0x3f490fdb

08019bb0 <__ieee754_rem_pio2f>:
 8019bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bb2:	ee10 6a10 	vmov	r6, s0
 8019bb6:	4b8e      	ldr	r3, [pc, #568]	; (8019df0 <__ieee754_rem_pio2f+0x240>)
 8019bb8:	eef0 7a40 	vmov.f32	s15, s0
 8019bbc:	b087      	sub	sp, #28
 8019bbe:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8019bc2:	4604      	mov	r4, r0
 8019bc4:	429d      	cmp	r5, r3
 8019bc6:	dc05      	bgt.n	8019bd4 <__ieee754_rem_pio2f+0x24>
 8019bc8:	2300      	movs	r3, #0
 8019bca:	ed80 0a00 	vstr	s0, [r0]
 8019bce:	6043      	str	r3, [r0, #4]
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	e01a      	b.n	8019c0a <__ieee754_rem_pio2f+0x5a>
 8019bd4:	4b87      	ldr	r3, [pc, #540]	; (8019df4 <__ieee754_rem_pio2f+0x244>)
 8019bd6:	429d      	cmp	r5, r3
 8019bd8:	dc46      	bgt.n	8019c68 <__ieee754_rem_pio2f+0xb8>
 8019bda:	2e00      	cmp	r6, #0
 8019bdc:	f025 050f 	bic.w	r5, r5, #15
 8019be0:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8019df8 <__ieee754_rem_pio2f+0x248>
 8019be4:	4b85      	ldr	r3, [pc, #532]	; (8019dfc <__ieee754_rem_pio2f+0x24c>)
 8019be6:	dd1f      	ble.n	8019c28 <__ieee754_rem_pio2f+0x78>
 8019be8:	429d      	cmp	r5, r3
 8019bea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019bee:	d00e      	beq.n	8019c0e <__ieee754_rem_pio2f+0x5e>
 8019bf0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8019e00 <__ieee754_rem_pio2f+0x250>
 8019bf4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019bf8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019bfc:	ed80 0a00 	vstr	s0, [r0]
 8019c00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019c04:	2001      	movs	r0, #1
 8019c06:	edc4 7a01 	vstr	s15, [r4, #4]
 8019c0a:	b007      	add	sp, #28
 8019c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c0e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8019e04 <__ieee754_rem_pio2f+0x254>
 8019c12:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8019e08 <__ieee754_rem_pio2f+0x258>
 8019c16:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019c1a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019c1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019c22:	edc0 6a00 	vstr	s13, [r0]
 8019c26:	e7eb      	b.n	8019c00 <__ieee754_rem_pio2f+0x50>
 8019c28:	429d      	cmp	r5, r3
 8019c2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019c2e:	d00e      	beq.n	8019c4e <__ieee754_rem_pio2f+0x9e>
 8019c30:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8019e00 <__ieee754_rem_pio2f+0x250>
 8019c34:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019c38:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019c3c:	ed80 0a00 	vstr	s0, [r0]
 8019c40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019c44:	f04f 30ff 	mov.w	r0, #4294967295
 8019c48:	edc4 7a01 	vstr	s15, [r4, #4]
 8019c4c:	e7dd      	b.n	8019c0a <__ieee754_rem_pio2f+0x5a>
 8019c4e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8019e04 <__ieee754_rem_pio2f+0x254>
 8019c52:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8019e08 <__ieee754_rem_pio2f+0x258>
 8019c56:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019c5a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019c5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019c62:	edc0 6a00 	vstr	s13, [r0]
 8019c66:	e7eb      	b.n	8019c40 <__ieee754_rem_pio2f+0x90>
 8019c68:	4b68      	ldr	r3, [pc, #416]	; (8019e0c <__ieee754_rem_pio2f+0x25c>)
 8019c6a:	429d      	cmp	r5, r3
 8019c6c:	dc72      	bgt.n	8019d54 <__ieee754_rem_pio2f+0x1a4>
 8019c6e:	f000 ff75 	bl	801ab5c <fabsf>
 8019c72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019c76:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8019e10 <__ieee754_rem_pio2f+0x260>
 8019c7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019c7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019c86:	ee17 0a90 	vmov	r0, s15
 8019c8a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019df8 <__ieee754_rem_pio2f+0x248>
 8019c8e:	281f      	cmp	r0, #31
 8019c90:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019c94:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8019e00 <__ieee754_rem_pio2f+0x250>
 8019c98:	eeb1 6a47 	vneg.f32	s12, s14
 8019c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ca0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019ca4:	ee16 2a90 	vmov	r2, s13
 8019ca8:	dc1c      	bgt.n	8019ce4 <__ieee754_rem_pio2f+0x134>
 8019caa:	1e47      	subs	r7, r0, #1
 8019cac:	4959      	ldr	r1, [pc, #356]	; (8019e14 <__ieee754_rem_pio2f+0x264>)
 8019cae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8019cb2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019cb6:	428b      	cmp	r3, r1
 8019cb8:	d014      	beq.n	8019ce4 <__ieee754_rem_pio2f+0x134>
 8019cba:	6022      	str	r2, [r4, #0]
 8019cbc:	ed94 7a00 	vldr	s14, [r4]
 8019cc0:	2e00      	cmp	r6, #0
 8019cc2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019cc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019cca:	ed84 0a01 	vstr	s0, [r4, #4]
 8019cce:	da9c      	bge.n	8019c0a <__ieee754_rem_pio2f+0x5a>
 8019cd0:	eeb1 7a47 	vneg.f32	s14, s14
 8019cd4:	eeb1 0a40 	vneg.f32	s0, s0
 8019cd8:	ed84 7a00 	vstr	s14, [r4]
 8019cdc:	ed84 0a01 	vstr	s0, [r4, #4]
 8019ce0:	4240      	negs	r0, r0
 8019ce2:	e792      	b.n	8019c0a <__ieee754_rem_pio2f+0x5a>
 8019ce4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019ce8:	15eb      	asrs	r3, r5, #23
 8019cea:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8019cee:	2d08      	cmp	r5, #8
 8019cf0:	dde3      	ble.n	8019cba <__ieee754_rem_pio2f+0x10a>
 8019cf2:	eef0 6a40 	vmov.f32	s13, s0
 8019cf6:	eddf 7a43 	vldr	s15, [pc, #268]	; 8019e04 <__ieee754_rem_pio2f+0x254>
 8019cfa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019cfe:	ee30 0a66 	vsub.f32	s0, s0, s13
 8019d02:	eea6 0a27 	vfma.f32	s0, s12, s15
 8019d06:	eddf 7a40 	vldr	s15, [pc, #256]	; 8019e08 <__ieee754_rem_pio2f+0x258>
 8019d0a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8019d0e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8019d12:	eef0 7a40 	vmov.f32	s15, s0
 8019d16:	ee15 2a90 	vmov	r2, s11
 8019d1a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019d1e:	1a5b      	subs	r3, r3, r1
 8019d20:	2b19      	cmp	r3, #25
 8019d22:	dc04      	bgt.n	8019d2e <__ieee754_rem_pio2f+0x17e>
 8019d24:	eeb0 0a66 	vmov.f32	s0, s13
 8019d28:	edc4 5a00 	vstr	s11, [r4]
 8019d2c:	e7c6      	b.n	8019cbc <__ieee754_rem_pio2f+0x10c>
 8019d2e:	eeb0 0a66 	vmov.f32	s0, s13
 8019d32:	eddf 5a39 	vldr	s11, [pc, #228]	; 8019e18 <__ieee754_rem_pio2f+0x268>
 8019d36:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019d3a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019d3e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019e1c <__ieee754_rem_pio2f+0x26c>
 8019d42:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019d46:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019d4a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019d4e:	ed84 7a00 	vstr	s14, [r4]
 8019d52:	e7b3      	b.n	8019cbc <__ieee754_rem_pio2f+0x10c>
 8019d54:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019d58:	db06      	blt.n	8019d68 <__ieee754_rem_pio2f+0x1b8>
 8019d5a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019d5e:	edc0 7a01 	vstr	s15, [r0, #4]
 8019d62:	edc0 7a00 	vstr	s15, [r0]
 8019d66:	e733      	b.n	8019bd0 <__ieee754_rem_pio2f+0x20>
 8019d68:	15ea      	asrs	r2, r5, #23
 8019d6a:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8019e20 <__ieee754_rem_pio2f+0x270>
 8019d6e:	3a86      	subs	r2, #134	; 0x86
 8019d70:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019d74:	ee07 3a90 	vmov	s15, r3
 8019d78:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019d7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d84:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019d88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019d8c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019d90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019d94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d98:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019d9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019da0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019da4:	edcd 7a05 	vstr	s15, [sp, #20]
 8019da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dac:	d11e      	bne.n	8019dec <__ieee754_rem_pio2f+0x23c>
 8019dae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019db6:	bf14      	ite	ne
 8019db8:	2302      	movne	r3, #2
 8019dba:	2301      	moveq	r3, #1
 8019dbc:	4919      	ldr	r1, [pc, #100]	; (8019e24 <__ieee754_rem_pio2f+0x274>)
 8019dbe:	a803      	add	r0, sp, #12
 8019dc0:	9101      	str	r1, [sp, #4]
 8019dc2:	2102      	movs	r1, #2
 8019dc4:	9100      	str	r1, [sp, #0]
 8019dc6:	4621      	mov	r1, r4
 8019dc8:	f000 f892 	bl	8019ef0 <__kernel_rem_pio2f>
 8019dcc:	2e00      	cmp	r6, #0
 8019dce:	f6bf af1c 	bge.w	8019c0a <__ieee754_rem_pio2f+0x5a>
 8019dd2:	edd4 7a00 	vldr	s15, [r4]
 8019dd6:	eef1 7a67 	vneg.f32	s15, s15
 8019dda:	edc4 7a00 	vstr	s15, [r4]
 8019dde:	edd4 7a01 	vldr	s15, [r4, #4]
 8019de2:	eef1 7a67 	vneg.f32	s15, s15
 8019de6:	edc4 7a01 	vstr	s15, [r4, #4]
 8019dea:	e779      	b.n	8019ce0 <__ieee754_rem_pio2f+0x130>
 8019dec:	2303      	movs	r3, #3
 8019dee:	e7e5      	b.n	8019dbc <__ieee754_rem_pio2f+0x20c>
 8019df0:	3f490fd8 	.word	0x3f490fd8
 8019df4:	4016cbe3 	.word	0x4016cbe3
 8019df8:	3fc90f80 	.word	0x3fc90f80
 8019dfc:	3fc90fd0 	.word	0x3fc90fd0
 8019e00:	37354443 	.word	0x37354443
 8019e04:	37354400 	.word	0x37354400
 8019e08:	2e85a308 	.word	0x2e85a308
 8019e0c:	43490f80 	.word	0x43490f80
 8019e10:	3f22f984 	.word	0x3f22f984
 8019e14:	0801b808 	.word	0x0801b808
 8019e18:	2e85a300 	.word	0x2e85a300
 8019e1c:	248d3132 	.word	0x248d3132
 8019e20:	43800000 	.word	0x43800000
 8019e24:	0801b888 	.word	0x0801b888

08019e28 <__ieee754_sqrtf>:
 8019e28:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019e2c:	4770      	bx	lr
	...

08019e30 <__kernel_cosf>:
 8019e30:	ee10 3a10 	vmov	r3, s0
 8019e34:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8019e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019e3c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8019e40:	da05      	bge.n	8019e4e <__kernel_cosf+0x1e>
 8019e42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019e46:	ee17 2a90 	vmov	r2, s15
 8019e4a:	2a00      	cmp	r2, #0
 8019e4c:	d03d      	beq.n	8019eca <__kernel_cosf+0x9a>
 8019e4e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8019e52:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019ed0 <__kernel_cosf+0xa0>
 8019e56:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8019ed4 <__kernel_cosf+0xa4>
 8019e5a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8019ed8 <__kernel_cosf+0xa8>
 8019e5e:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019e62:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8019edc <__kernel_cosf+0xac>
 8019e66:	4a1e      	ldr	r2, [pc, #120]	; (8019ee0 <__kernel_cosf+0xb0>)
 8019e68:	4293      	cmp	r3, r2
 8019e6a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019e6e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8019ee4 <__kernel_cosf+0xb4>
 8019e72:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019e76:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8019ee8 <__kernel_cosf+0xb8>
 8019e7a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019e7e:	eeb0 7a66 	vmov.f32	s14, s13
 8019e82:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8019e86:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8019e8a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8019e8e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8019e92:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8019e96:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019e9a:	dc04      	bgt.n	8019ea6 <__kernel_cosf+0x76>
 8019e9c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8019ea0:	ee36 0a47 	vsub.f32	s0, s12, s14
 8019ea4:	4770      	bx	lr
 8019ea6:	4a11      	ldr	r2, [pc, #68]	; (8019eec <__kernel_cosf+0xbc>)
 8019ea8:	4293      	cmp	r3, r2
 8019eaa:	bfd6      	itet	le
 8019eac:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8019eb0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8019eb4:	ee06 3a90 	vmovle	s13, r3
 8019eb8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019ebc:	ee36 0a66 	vsub.f32	s0, s12, s13
 8019ec0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ec4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019ec8:	4770      	bx	lr
 8019eca:	eeb0 0a46 	vmov.f32	s0, s12
 8019ece:	4770      	bx	lr
 8019ed0:	ad47d74e 	.word	0xad47d74e
 8019ed4:	310f74f6 	.word	0x310f74f6
 8019ed8:	3d2aaaab 	.word	0x3d2aaaab
 8019edc:	b493f27c 	.word	0xb493f27c
 8019ee0:	3e999999 	.word	0x3e999999
 8019ee4:	37d00d01 	.word	0x37d00d01
 8019ee8:	bab60b61 	.word	0xbab60b61
 8019eec:	3f480000 	.word	0x3f480000

08019ef0 <__kernel_rem_pio2f>:
 8019ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ef4:	ed2d 8b04 	vpush	{d8-d9}
 8019ef8:	b0d7      	sub	sp, #348	; 0x15c
 8019efa:	4616      	mov	r6, r2
 8019efc:	4698      	mov	r8, r3
 8019efe:	4bbd      	ldr	r3, [pc, #756]	; (801a1f4 <__kernel_rem_pio2f+0x304>)
 8019f00:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019f02:	460d      	mov	r5, r1
 8019f04:	f108 39ff 	add.w	r9, r8, #4294967295
 8019f08:	9001      	str	r0, [sp, #4]
 8019f0a:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8019f0e:	1d33      	adds	r3, r6, #4
 8019f10:	db29      	blt.n	8019f66 <__kernel_rem_pio2f+0x76>
 8019f12:	1ef1      	subs	r1, r6, #3
 8019f14:	bf48      	it	mi
 8019f16:	1d31      	addmi	r1, r6, #4
 8019f18:	10c9      	asrs	r1, r1, #3
 8019f1a:	1c4c      	adds	r4, r1, #1
 8019f1c:	eba1 0009 	sub.w	r0, r1, r9
 8019f20:	eb07 0c09 	add.w	ip, r7, r9
 8019f24:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8019f28:	00e3      	lsls	r3, r4, #3
 8019f2a:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 801a204 <__kernel_rem_pio2f+0x314>
 8019f2e:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8019f32:	9302      	str	r3, [sp, #8]
 8019f34:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8019f36:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8019f3a:	2300      	movs	r3, #0
 8019f3c:	4563      	cmp	r3, ip
 8019f3e:	dd14      	ble.n	8019f6a <__kernel_rem_pio2f+0x7a>
 8019f40:	ab1a      	add	r3, sp, #104	; 0x68
 8019f42:	46cc      	mov	ip, r9
 8019f44:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8019f48:	f1c8 0b01 	rsb	fp, r8, #1
 8019f4c:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8019f50:	eb0b 020c 	add.w	r2, fp, ip
 8019f54:	4297      	cmp	r7, r2
 8019f56:	db29      	blt.n	8019fac <__kernel_rem_pio2f+0xbc>
 8019f58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	eddf 7aa9 	vldr	s15, [pc, #676]	; 801a204 <__kernel_rem_pio2f+0x314>
 8019f62:	2200      	movs	r2, #0
 8019f64:	e018      	b.n	8019f98 <__kernel_rem_pio2f+0xa8>
 8019f66:	2100      	movs	r1, #0
 8019f68:	e7d7      	b.n	8019f1a <__kernel_rem_pio2f+0x2a>
 8019f6a:	42d8      	cmn	r0, r3
 8019f6c:	bf54      	ite	pl
 8019f6e:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8019f72:	eef0 7a47 	vmovmi.f32	s15, s14
 8019f76:	f103 0301 	add.w	r3, r3, #1
 8019f7a:	bf5c      	itt	pl
 8019f7c:	ee07 2a90 	vmovpl	s15, r2
 8019f80:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019f84:	ecea 7a01 	vstmia	sl!, {s15}
 8019f88:	e7d8      	b.n	8019f3c <__kernel_rem_pio2f+0x4c>
 8019f8a:	ecfe 6a01 	vldmia	lr!, {s13}
 8019f8e:	3201      	adds	r2, #1
 8019f90:	ed90 7a00 	vldr	s14, [r0]
 8019f94:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019f98:	454a      	cmp	r2, r9
 8019f9a:	f1a0 0004 	sub.w	r0, r0, #4
 8019f9e:	ddf4      	ble.n	8019f8a <__kernel_rem_pio2f+0x9a>
 8019fa0:	3304      	adds	r3, #4
 8019fa2:	f10c 0c01 	add.w	ip, ip, #1
 8019fa6:	ecea 7a01 	vstmia	sl!, {s15}
 8019faa:	e7d1      	b.n	8019f50 <__kernel_rem_pio2f+0x60>
 8019fac:	ab06      	add	r3, sp, #24
 8019fae:	46ba      	mov	sl, r7
 8019fb0:	eddf 8a93 	vldr	s17, [pc, #588]	; 801a200 <__kernel_rem_pio2f+0x310>
 8019fb4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8019fb8:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801a1fc <__kernel_rem_pio2f+0x30c>
 8019fbc:	9304      	str	r3, [sp, #16]
 8019fbe:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8019fc0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019fc4:	9303      	str	r3, [sp, #12]
 8019fc6:	ab56      	add	r3, sp, #344	; 0x158
 8019fc8:	4652      	mov	r2, sl
 8019fca:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8019fce:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8019fd2:	ab06      	add	r3, sp, #24
 8019fd4:	4618      	mov	r0, r3
 8019fd6:	2a00      	cmp	r2, #0
 8019fd8:	dc51      	bgt.n	801a07e <__kernel_rem_pio2f+0x18e>
 8019fda:	4620      	mov	r0, r4
 8019fdc:	9305      	str	r3, [sp, #20]
 8019fde:	f000 fdcd 	bl	801ab7c <scalbnf>
 8019fe2:	eeb0 8a40 	vmov.f32	s16, s0
 8019fe6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8019fea:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019fee:	f000 fdbc 	bl	801ab6a <floorf>
 8019ff2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8019ff6:	2c00      	cmp	r4, #0
 8019ff8:	9b05      	ldr	r3, [sp, #20]
 8019ffa:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019ffe:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a002:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a006:	edcd 7a00 	vstr	s15, [sp]
 801a00a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a00e:	dd4b      	ble.n	801a0a8 <__kernel_rem_pio2f+0x1b8>
 801a010:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a014:	aa06      	add	r2, sp, #24
 801a016:	f1c4 0e08 	rsb	lr, r4, #8
 801a01a:	ee17 1a90 	vmov	r1, s15
 801a01e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a022:	fa42 f00e 	asr.w	r0, r2, lr
 801a026:	4401      	add	r1, r0
 801a028:	fa00 f00e 	lsl.w	r0, r0, lr
 801a02c:	1a12      	subs	r2, r2, r0
 801a02e:	f1c4 0007 	rsb	r0, r4, #7
 801a032:	9100      	str	r1, [sp, #0]
 801a034:	a906      	add	r1, sp, #24
 801a036:	fa42 fb00 	asr.w	fp, r2, r0
 801a03a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801a03e:	f1bb 0f00 	cmp.w	fp, #0
 801a042:	dd43      	ble.n	801a0cc <__kernel_rem_pio2f+0x1dc>
 801a044:	9a00      	ldr	r2, [sp, #0]
 801a046:	f04f 0e00 	mov.w	lr, #0
 801a04a:	3201      	adds	r2, #1
 801a04c:	4670      	mov	r0, lr
 801a04e:	9200      	str	r2, [sp, #0]
 801a050:	45f2      	cmp	sl, lr
 801a052:	dc6c      	bgt.n	801a12e <__kernel_rem_pio2f+0x23e>
 801a054:	2c00      	cmp	r4, #0
 801a056:	dd04      	ble.n	801a062 <__kernel_rem_pio2f+0x172>
 801a058:	2c01      	cmp	r4, #1
 801a05a:	d079      	beq.n	801a150 <__kernel_rem_pio2f+0x260>
 801a05c:	2c02      	cmp	r4, #2
 801a05e:	f000 8082 	beq.w	801a166 <__kernel_rem_pio2f+0x276>
 801a062:	f1bb 0f02 	cmp.w	fp, #2
 801a066:	d131      	bne.n	801a0cc <__kernel_rem_pio2f+0x1dc>
 801a068:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a06c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a070:	b360      	cbz	r0, 801a0cc <__kernel_rem_pio2f+0x1dc>
 801a072:	4620      	mov	r0, r4
 801a074:	f000 fd82 	bl	801ab7c <scalbnf>
 801a078:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a07c:	e026      	b.n	801a0cc <__kernel_rem_pio2f+0x1dc>
 801a07e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a082:	3a01      	subs	r2, #1
 801a084:	a942      	add	r1, sp, #264	; 0x108
 801a086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a08a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801a08e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a092:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a096:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a09a:	eca0 0a01 	vstmia	r0!, {s0}
 801a09e:	ed9c 0a00 	vldr	s0, [ip]
 801a0a2:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a0a6:	e796      	b.n	8019fd6 <__kernel_rem_pio2f+0xe6>
 801a0a8:	d107      	bne.n	801a0ba <__kernel_rem_pio2f+0x1ca>
 801a0aa:	f10a 32ff 	add.w	r2, sl, #4294967295
 801a0ae:	a906      	add	r1, sp, #24
 801a0b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801a0b4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801a0b8:	e7c1      	b.n	801a03e <__kernel_rem_pio2f+0x14e>
 801a0ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a0be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0c6:	da2f      	bge.n	801a128 <__kernel_rem_pio2f+0x238>
 801a0c8:	f04f 0b00 	mov.w	fp, #0
 801a0cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0d4:	f040 8098 	bne.w	801a208 <__kernel_rem_pio2f+0x318>
 801a0d8:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a0dc:	2200      	movs	r2, #0
 801a0de:	469c      	mov	ip, r3
 801a0e0:	45bc      	cmp	ip, r7
 801a0e2:	da48      	bge.n	801a176 <__kernel_rem_pio2f+0x286>
 801a0e4:	2a00      	cmp	r2, #0
 801a0e6:	d05f      	beq.n	801a1a8 <__kernel_rem_pio2f+0x2b8>
 801a0e8:	aa06      	add	r2, sp, #24
 801a0ea:	3c08      	subs	r4, #8
 801a0ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801a0f0:	2900      	cmp	r1, #0
 801a0f2:	d07d      	beq.n	801a1f0 <__kernel_rem_pio2f+0x300>
 801a0f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a0f8:	4620      	mov	r0, r4
 801a0fa:	9301      	str	r3, [sp, #4]
 801a0fc:	f000 fd3e 	bl	801ab7c <scalbnf>
 801a100:	9b01      	ldr	r3, [sp, #4]
 801a102:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801a200 <__kernel_rem_pio2f+0x310>
 801a106:	4619      	mov	r1, r3
 801a108:	2900      	cmp	r1, #0
 801a10a:	f280 80af 	bge.w	801a26c <__kernel_rem_pio2f+0x37c>
 801a10e:	4618      	mov	r0, r3
 801a110:	2400      	movs	r4, #0
 801a112:	2800      	cmp	r0, #0
 801a114:	f2c0 80d0 	blt.w	801a2b8 <__kernel_rem_pio2f+0x3c8>
 801a118:	a942      	add	r1, sp, #264	; 0x108
 801a11a:	4a37      	ldr	r2, [pc, #220]	; (801a1f8 <__kernel_rem_pio2f+0x308>)
 801a11c:	eddf 7a39 	vldr	s15, [pc, #228]	; 801a204 <__kernel_rem_pio2f+0x314>
 801a120:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801a124:	2100      	movs	r1, #0
 801a126:	e0bb      	b.n	801a2a0 <__kernel_rem_pio2f+0x3b0>
 801a128:	f04f 0b02 	mov.w	fp, #2
 801a12c:	e78a      	b.n	801a044 <__kernel_rem_pio2f+0x154>
 801a12e:	681a      	ldr	r2, [r3, #0]
 801a130:	b948      	cbnz	r0, 801a146 <__kernel_rem_pio2f+0x256>
 801a132:	b11a      	cbz	r2, 801a13c <__kernel_rem_pio2f+0x24c>
 801a134:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a138:	601a      	str	r2, [r3, #0]
 801a13a:	2201      	movs	r2, #1
 801a13c:	f10e 0e01 	add.w	lr, lr, #1
 801a140:	3304      	adds	r3, #4
 801a142:	4610      	mov	r0, r2
 801a144:	e784      	b.n	801a050 <__kernel_rem_pio2f+0x160>
 801a146:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801a14a:	601a      	str	r2, [r3, #0]
 801a14c:	4602      	mov	r2, r0
 801a14e:	e7f5      	b.n	801a13c <__kernel_rem_pio2f+0x24c>
 801a150:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a154:	ab06      	add	r3, sp, #24
 801a156:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a15a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a15e:	aa06      	add	r2, sp, #24
 801a160:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801a164:	e77d      	b.n	801a062 <__kernel_rem_pio2f+0x172>
 801a166:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a16a:	ab06      	add	r3, sp, #24
 801a16c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a174:	e7f3      	b.n	801a15e <__kernel_rem_pio2f+0x26e>
 801a176:	a906      	add	r1, sp, #24
 801a178:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801a17c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a180:	4302      	orrs	r2, r0
 801a182:	e7ad      	b.n	801a0e0 <__kernel_rem_pio2f+0x1f0>
 801a184:	3001      	adds	r0, #1
 801a186:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a18a:	2a00      	cmp	r2, #0
 801a18c:	d0fa      	beq.n	801a184 <__kernel_rem_pio2f+0x294>
 801a18e:	a91a      	add	r1, sp, #104	; 0x68
 801a190:	eb0a 0208 	add.w	r2, sl, r8
 801a194:	f10a 0301 	add.w	r3, sl, #1
 801a198:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a19c:	eb0a 0100 	add.w	r1, sl, r0
 801a1a0:	4299      	cmp	r1, r3
 801a1a2:	da04      	bge.n	801a1ae <__kernel_rem_pio2f+0x2be>
 801a1a4:	468a      	mov	sl, r1
 801a1a6:	e70e      	b.n	8019fc6 <__kernel_rem_pio2f+0xd6>
 801a1a8:	9b04      	ldr	r3, [sp, #16]
 801a1aa:	2001      	movs	r0, #1
 801a1ac:	e7eb      	b.n	801a186 <__kernel_rem_pio2f+0x296>
 801a1ae:	9803      	ldr	r0, [sp, #12]
 801a1b0:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a1b4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a1b8:	ee07 0a90 	vmov	s15, r0
 801a1bc:	9000      	str	r0, [sp, #0]
 801a1be:	2000      	movs	r0, #0
 801a1c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1c4:	ece2 7a01 	vstmia	r2!, {s15}
 801a1c8:	4696      	mov	lr, r2
 801a1ca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801a204 <__kernel_rem_pio2f+0x314>
 801a1ce:	4548      	cmp	r0, r9
 801a1d0:	dd06      	ble.n	801a1e0 <__kernel_rem_pio2f+0x2f0>
 801a1d2:	a842      	add	r0, sp, #264	; 0x108
 801a1d4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801a1d8:	3301      	adds	r3, #1
 801a1da:	edc0 7a00 	vstr	s15, [r0]
 801a1de:	e7df      	b.n	801a1a0 <__kernel_rem_pio2f+0x2b0>
 801a1e0:	ecfc 6a01 	vldmia	ip!, {s13}
 801a1e4:	3001      	adds	r0, #1
 801a1e6:	ed3e 7a01 	vldmdb	lr!, {s14}
 801a1ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a1ee:	e7ee      	b.n	801a1ce <__kernel_rem_pio2f+0x2de>
 801a1f0:	3b01      	subs	r3, #1
 801a1f2:	e779      	b.n	801a0e8 <__kernel_rem_pio2f+0x1f8>
 801a1f4:	0801bbcc 	.word	0x0801bbcc
 801a1f8:	0801bba0 	.word	0x0801bba0
 801a1fc:	43800000 	.word	0x43800000
 801a200:	3b800000 	.word	0x3b800000
 801a204:	00000000 	.word	0x00000000
 801a208:	9b02      	ldr	r3, [sp, #8]
 801a20a:	eeb0 0a48 	vmov.f32	s0, s16
 801a20e:	1b98      	subs	r0, r3, r6
 801a210:	f000 fcb4 	bl	801ab7c <scalbnf>
 801a214:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801a1fc <__kernel_rem_pio2f+0x30c>
 801a218:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a220:	db1b      	blt.n	801a25a <__kernel_rem_pio2f+0x36a>
 801a222:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801a200 <__kernel_rem_pio2f+0x310>
 801a226:	aa06      	add	r2, sp, #24
 801a228:	a906      	add	r1, sp, #24
 801a22a:	3408      	adds	r4, #8
 801a22c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a238:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a23c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a240:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a244:	ee10 3a10 	vmov	r3, s0
 801a248:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801a24c:	f10a 0301 	add.w	r3, sl, #1
 801a250:	ee17 2a90 	vmov	r2, s15
 801a254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801a258:	e74c      	b.n	801a0f4 <__kernel_rem_pio2f+0x204>
 801a25a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a25e:	aa06      	add	r2, sp, #24
 801a260:	ee10 3a10 	vmov	r3, s0
 801a264:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801a268:	4653      	mov	r3, sl
 801a26a:	e743      	b.n	801a0f4 <__kernel_rem_pio2f+0x204>
 801a26c:	aa42      	add	r2, sp, #264	; 0x108
 801a26e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801a272:	aa06      	add	r2, sp, #24
 801a274:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801a278:	3901      	subs	r1, #1
 801a27a:	ee07 2a90 	vmov	s15, r2
 801a27e:	9201      	str	r2, [sp, #4]
 801a280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a284:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a288:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a28c:	edc0 7a00 	vstr	s15, [r0]
 801a290:	e73a      	b.n	801a108 <__kernel_rem_pio2f+0x218>
 801a292:	ecf2 6a01 	vldmia	r2!, {s13}
 801a296:	3101      	adds	r1, #1
 801a298:	ecb6 7a01 	vldmia	r6!, {s14}
 801a29c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a2a0:	42b9      	cmp	r1, r7
 801a2a2:	dc01      	bgt.n	801a2a8 <__kernel_rem_pio2f+0x3b8>
 801a2a4:	428c      	cmp	r4, r1
 801a2a6:	daf4      	bge.n	801a292 <__kernel_rem_pio2f+0x3a2>
 801a2a8:	aa56      	add	r2, sp, #344	; 0x158
 801a2aa:	3801      	subs	r0, #1
 801a2ac:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801a2b0:	3401      	adds	r4, #1
 801a2b2:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801a2b6:	e72c      	b.n	801a112 <__kernel_rem_pio2f+0x222>
 801a2b8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a2ba:	2a02      	cmp	r2, #2
 801a2bc:	dc0a      	bgt.n	801a2d4 <__kernel_rem_pio2f+0x3e4>
 801a2be:	2a00      	cmp	r2, #0
 801a2c0:	dc61      	bgt.n	801a386 <__kernel_rem_pio2f+0x496>
 801a2c2:	d03c      	beq.n	801a33e <__kernel_rem_pio2f+0x44e>
 801a2c4:	9b00      	ldr	r3, [sp, #0]
 801a2c6:	f003 0007 	and.w	r0, r3, #7
 801a2ca:	b057      	add	sp, #348	; 0x15c
 801a2cc:	ecbd 8b04 	vpop	{d8-d9}
 801a2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2d4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a2d6:	2a03      	cmp	r2, #3
 801a2d8:	d1f4      	bne.n	801a2c4 <__kernel_rem_pio2f+0x3d4>
 801a2da:	aa2e      	add	r2, sp, #184	; 0xb8
 801a2dc:	461c      	mov	r4, r3
 801a2de:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801a2e2:	4608      	mov	r0, r1
 801a2e4:	2c00      	cmp	r4, #0
 801a2e6:	f1a0 0004 	sub.w	r0, r0, #4
 801a2ea:	dc59      	bgt.n	801a3a0 <__kernel_rem_pio2f+0x4b0>
 801a2ec:	4618      	mov	r0, r3
 801a2ee:	2801      	cmp	r0, #1
 801a2f0:	f1a1 0104 	sub.w	r1, r1, #4
 801a2f4:	dc64      	bgt.n	801a3c0 <__kernel_rem_pio2f+0x4d0>
 801a2f6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801a204 <__kernel_rem_pio2f+0x314>
 801a2fa:	2b01      	cmp	r3, #1
 801a2fc:	dc70      	bgt.n	801a3e0 <__kernel_rem_pio2f+0x4f0>
 801a2fe:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801a302:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801a306:	f1bb 0f00 	cmp.w	fp, #0
 801a30a:	d172      	bne.n	801a3f2 <__kernel_rem_pio2f+0x502>
 801a30c:	edc5 6a00 	vstr	s13, [r5]
 801a310:	ed85 7a01 	vstr	s14, [r5, #4]
 801a314:	edc5 7a02 	vstr	s15, [r5, #8]
 801a318:	e7d4      	b.n	801a2c4 <__kernel_rem_pio2f+0x3d4>
 801a31a:	aa2e      	add	r2, sp, #184	; 0xb8
 801a31c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801a320:	3b01      	subs	r3, #1
 801a322:	ed91 7a00 	vldr	s14, [r1]
 801a326:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	daf5      	bge.n	801a31a <__kernel_rem_pio2f+0x42a>
 801a32e:	f1bb 0f00 	cmp.w	fp, #0
 801a332:	d001      	beq.n	801a338 <__kernel_rem_pio2f+0x448>
 801a334:	eef1 7a67 	vneg.f32	s15, s15
 801a338:	edc5 7a00 	vstr	s15, [r5]
 801a33c:	e7c2      	b.n	801a2c4 <__kernel_rem_pio2f+0x3d4>
 801a33e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801a204 <__kernel_rem_pio2f+0x314>
 801a342:	e7f2      	b.n	801a32a <__kernel_rem_pio2f+0x43a>
 801a344:	aa2e      	add	r2, sp, #184	; 0xb8
 801a346:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801a34a:	3901      	subs	r1, #1
 801a34c:	edd0 7a00 	vldr	s15, [r0]
 801a350:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a354:	2900      	cmp	r1, #0
 801a356:	daf5      	bge.n	801a344 <__kernel_rem_pio2f+0x454>
 801a358:	f1bb 0f00 	cmp.w	fp, #0
 801a35c:	d017      	beq.n	801a38e <__kernel_rem_pio2f+0x49e>
 801a35e:	eef1 7a47 	vneg.f32	s15, s14
 801a362:	edc5 7a00 	vstr	s15, [r5]
 801a366:	a82f      	add	r0, sp, #188	; 0xbc
 801a368:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801a36c:	2101      	movs	r1, #1
 801a36e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a372:	428b      	cmp	r3, r1
 801a374:	da0e      	bge.n	801a394 <__kernel_rem_pio2f+0x4a4>
 801a376:	f1bb 0f00 	cmp.w	fp, #0
 801a37a:	d001      	beq.n	801a380 <__kernel_rem_pio2f+0x490>
 801a37c:	eef1 7a67 	vneg.f32	s15, s15
 801a380:	edc5 7a01 	vstr	s15, [r5, #4]
 801a384:	e79e      	b.n	801a2c4 <__kernel_rem_pio2f+0x3d4>
 801a386:	4619      	mov	r1, r3
 801a388:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 801a204 <__kernel_rem_pio2f+0x314>
 801a38c:	e7e2      	b.n	801a354 <__kernel_rem_pio2f+0x464>
 801a38e:	eef0 7a47 	vmov.f32	s15, s14
 801a392:	e7e6      	b.n	801a362 <__kernel_rem_pio2f+0x472>
 801a394:	ecb0 7a01 	vldmia	r0!, {s14}
 801a398:	3101      	adds	r1, #1
 801a39a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a39e:	e7e8      	b.n	801a372 <__kernel_rem_pio2f+0x482>
 801a3a0:	edd0 7a00 	vldr	s15, [r0]
 801a3a4:	3c01      	subs	r4, #1
 801a3a6:	edd0 6a01 	vldr	s13, [r0, #4]
 801a3aa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a3ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3b2:	ed80 7a00 	vstr	s14, [r0]
 801a3b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a3ba:	edc0 7a01 	vstr	s15, [r0, #4]
 801a3be:	e791      	b.n	801a2e4 <__kernel_rem_pio2f+0x3f4>
 801a3c0:	edd1 7a00 	vldr	s15, [r1]
 801a3c4:	3801      	subs	r0, #1
 801a3c6:	edd1 6a01 	vldr	s13, [r1, #4]
 801a3ca:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a3ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3d2:	ed81 7a00 	vstr	s14, [r1]
 801a3d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a3da:	edc1 7a01 	vstr	s15, [r1, #4]
 801a3de:	e786      	b.n	801a2ee <__kernel_rem_pio2f+0x3fe>
 801a3e0:	aa2e      	add	r2, sp, #184	; 0xb8
 801a3e2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801a3e6:	3b01      	subs	r3, #1
 801a3e8:	ed91 7a00 	vldr	s14, [r1]
 801a3ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a3f0:	e783      	b.n	801a2fa <__kernel_rem_pio2f+0x40a>
 801a3f2:	eef1 6a66 	vneg.f32	s13, s13
 801a3f6:	eeb1 7a47 	vneg.f32	s14, s14
 801a3fa:	eef1 7a67 	vneg.f32	s15, s15
 801a3fe:	edc5 6a00 	vstr	s13, [r5]
 801a402:	ed85 7a01 	vstr	s14, [r5, #4]
 801a406:	e785      	b.n	801a314 <__kernel_rem_pio2f+0x424>

0801a408 <__kernel_sinf>:
 801a408:	ee10 3a10 	vmov	r3, s0
 801a40c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a410:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a414:	da04      	bge.n	801a420 <__kernel_sinf+0x18>
 801a416:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a41a:	ee17 3a90 	vmov	r3, s15
 801a41e:	b35b      	cbz	r3, 801a478 <__kernel_sinf+0x70>
 801a420:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a424:	eddf 7a15 	vldr	s15, [pc, #84]	; 801a47c <__kernel_sinf+0x74>
 801a428:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801a480 <__kernel_sinf+0x78>
 801a42c:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a430:	eddf 7a14 	vldr	s15, [pc, #80]	; 801a484 <__kernel_sinf+0x7c>
 801a434:	ee60 6a07 	vmul.f32	s13, s0, s14
 801a438:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a43c:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801a488 <__kernel_sinf+0x80>
 801a440:	eea7 6a87 	vfma.f32	s12, s15, s14
 801a444:	eddf 7a11 	vldr	s15, [pc, #68]	; 801a48c <__kernel_sinf+0x84>
 801a448:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a44c:	b930      	cbnz	r0, 801a45c <__kernel_sinf+0x54>
 801a44e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801a490 <__kernel_sinf+0x88>
 801a452:	eea7 6a27 	vfma.f32	s12, s14, s15
 801a456:	eea6 0a26 	vfma.f32	s0, s12, s13
 801a45a:	4770      	bx	lr
 801a45c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801a460:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801a464:	eee0 7a86 	vfma.f32	s15, s1, s12
 801a468:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801a46c:	eddf 7a09 	vldr	s15, [pc, #36]	; 801a494 <__kernel_sinf+0x8c>
 801a470:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801a474:	ee30 0a60 	vsub.f32	s0, s0, s1
 801a478:	4770      	bx	lr
 801a47a:	bf00      	nop
 801a47c:	2f2ec9d3 	.word	0x2f2ec9d3
 801a480:	b2d72f34 	.word	0xb2d72f34
 801a484:	3638ef1b 	.word	0x3638ef1b
 801a488:	b9500d01 	.word	0xb9500d01
 801a48c:	3c088889 	.word	0x3c088889
 801a490:	be2aaaab 	.word	0xbe2aaaab
 801a494:	3e2aaaab 	.word	0x3e2aaaab

0801a498 <__kernel_tanf>:
 801a498:	b508      	push	{r3, lr}
 801a49a:	ee10 3a10 	vmov	r3, s0
 801a49e:	eef0 7a40 	vmov.f32	s15, s0
 801a4a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a4a6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801a4aa:	da17      	bge.n	801a4dc <__kernel_tanf+0x44>
 801a4ac:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801a4b0:	ee17 1a10 	vmov	r1, s14
 801a4b4:	bb41      	cbnz	r1, 801a508 <__kernel_tanf+0x70>
 801a4b6:	1c43      	adds	r3, r0, #1
 801a4b8:	4313      	orrs	r3, r2
 801a4ba:	d108      	bne.n	801a4ce <__kernel_tanf+0x36>
 801a4bc:	f000 fb4e 	bl	801ab5c <fabsf>
 801a4c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a4c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a4c8:	eeb0 0a67 	vmov.f32	s0, s15
 801a4cc:	bd08      	pop	{r3, pc}
 801a4ce:	2801      	cmp	r0, #1
 801a4d0:	d0fa      	beq.n	801a4c8 <__kernel_tanf+0x30>
 801a4d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a4d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a4da:	e7f5      	b.n	801a4c8 <__kernel_tanf+0x30>
 801a4dc:	494d      	ldr	r1, [pc, #308]	; (801a614 <__kernel_tanf+0x17c>)
 801a4de:	428a      	cmp	r2, r1
 801a4e0:	db12      	blt.n	801a508 <__kernel_tanf+0x70>
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	bfb8      	it	lt
 801a4e6:	eef1 7a40 	vneglt.f32	s15, s0
 801a4ea:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 801a618 <__kernel_tanf+0x180>
 801a4ee:	bfb8      	it	lt
 801a4f0:	eef1 0a60 	vneglt.f32	s1, s1
 801a4f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a4f8:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801a61c <__kernel_tanf+0x184>
 801a4fc:	ee70 0a60 	vsub.f32	s1, s0, s1
 801a500:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801a504:	eddf 0a46 	vldr	s1, [pc, #280]	; 801a620 <__kernel_tanf+0x188>
 801a508:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801a50c:	eddf 5a45 	vldr	s11, [pc, #276]	; 801a624 <__kernel_tanf+0x18c>
 801a510:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801a628 <__kernel_tanf+0x190>
 801a514:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801a62c <__kernel_tanf+0x194>
 801a518:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a51c:	493d      	ldr	r1, [pc, #244]	; (801a614 <__kernel_tanf+0x17c>)
 801a51e:	428a      	cmp	r2, r1
 801a520:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a524:	eddf 5a42 	vldr	s11, [pc, #264]	; 801a630 <__kernel_tanf+0x198>
 801a528:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a52c:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801a634 <__kernel_tanf+0x19c>
 801a530:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a534:	eddf 5a40 	vldr	s11, [pc, #256]	; 801a638 <__kernel_tanf+0x1a0>
 801a538:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a53c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 801a63c <__kernel_tanf+0x1a4>
 801a540:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a544:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801a640 <__kernel_tanf+0x1a8>
 801a548:	eee7 5a05 	vfma.f32	s11, s14, s10
 801a54c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801a644 <__kernel_tanf+0x1ac>
 801a550:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a554:	eddf 5a3c 	vldr	s11, [pc, #240]	; 801a648 <__kernel_tanf+0x1b0>
 801a558:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a55c:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 801a64c <__kernel_tanf+0x1b4>
 801a560:	eea5 5a87 	vfma.f32	s10, s11, s14
 801a564:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801a650 <__kernel_tanf+0x1b8>
 801a568:	eee5 5a07 	vfma.f32	s11, s10, s14
 801a56c:	eeb0 7a65 	vmov.f32	s14, s11
 801a570:	ee67 5aa6 	vmul.f32	s11, s15, s13
 801a574:	eea7 6a26 	vfma.f32	s12, s14, s13
 801a578:	eeb0 7a46 	vmov.f32	s14, s12
 801a57c:	eeb0 6a60 	vmov.f32	s12, s1
 801a580:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a584:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801a654 <__kernel_tanf+0x1bc>
 801a588:	eee6 0a26 	vfma.f32	s1, s12, s13
 801a58c:	eee5 0a87 	vfma.f32	s1, s11, s14
 801a590:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801a594:	db1d      	blt.n	801a5d2 <__kernel_tanf+0x13a>
 801a596:	ee06 0a90 	vmov	s13, r0
 801a59a:	ee27 6a07 	vmul.f32	s12, s14, s14
 801a59e:	179b      	asrs	r3, r3, #30
 801a5a0:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801a5a4:	f003 0302 	and.w	r3, r3, #2
 801a5a8:	ee37 7a00 	vadd.f32	s14, s14, s0
 801a5ac:	f1c3 0301 	rsb	r3, r3, #1
 801a5b0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801a5b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801a5b8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801a5bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801a5c0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a5c4:	ee07 3a90 	vmov	s15, r3
 801a5c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a5cc:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a5d0:	e77a      	b.n	801a4c8 <__kernel_tanf+0x30>
 801a5d2:	2801      	cmp	r0, #1
 801a5d4:	d01b      	beq.n	801a60e <__kernel_tanf+0x176>
 801a5d6:	4b20      	ldr	r3, [pc, #128]	; (801a658 <__kernel_tanf+0x1c0>)
 801a5d8:	ee17 2a10 	vmov	r2, s14
 801a5dc:	401a      	ands	r2, r3
 801a5de:	ee06 2a10 	vmov	s12, r2
 801a5e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 801a5e6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801a5ea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801a5ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801a5f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a5f6:	ee16 2a90 	vmov	r2, s13
 801a5fa:	4013      	ands	r3, r2
 801a5fc:	ee07 3a90 	vmov	s15, r3
 801a600:	eea6 7a27 	vfma.f32	s14, s12, s15
 801a604:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801a608:	eee7 7a26 	vfma.f32	s15, s14, s13
 801a60c:	e75c      	b.n	801a4c8 <__kernel_tanf+0x30>
 801a60e:	eef0 7a47 	vmov.f32	s15, s14
 801a612:	e759      	b.n	801a4c8 <__kernel_tanf+0x30>
 801a614:	3f2ca140 	.word	0x3f2ca140
 801a618:	3f490fda 	.word	0x3f490fda
 801a61c:	33222168 	.word	0x33222168
 801a620:	00000000 	.word	0x00000000
 801a624:	b79bae5f 	.word	0xb79bae5f
 801a628:	38a3f445 	.word	0x38a3f445
 801a62c:	37d95384 	.word	0x37d95384
 801a630:	3a1a26c8 	.word	0x3a1a26c8
 801a634:	3b6b6916 	.word	0x3b6b6916
 801a638:	3cb327a4 	.word	0x3cb327a4
 801a63c:	3e088889 	.word	0x3e088889
 801a640:	3895c07a 	.word	0x3895c07a
 801a644:	398137b9 	.word	0x398137b9
 801a648:	3abede48 	.word	0x3abede48
 801a64c:	3c11371f 	.word	0x3c11371f
 801a650:	3d5d0dd1 	.word	0x3d5d0dd1
 801a654:	3eaaaaab 	.word	0x3eaaaaab
 801a658:	fffff000 	.word	0xfffff000
 801a65c:	00000000 	.word	0x00000000

0801a660 <atan>:
 801a660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a664:	ec55 4b10 	vmov	r4, r5, d0
 801a668:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a66c:	4bc2      	ldr	r3, [pc, #776]	; (801a978 <atan+0x318>)
 801a66e:	46ab      	mov	fp, r5
 801a670:	429e      	cmp	r6, r3
 801a672:	dd18      	ble.n	801a6a6 <atan+0x46>
 801a674:	4bc1      	ldr	r3, [pc, #772]	; (801a97c <atan+0x31c>)
 801a676:	429e      	cmp	r6, r3
 801a678:	dc01      	bgt.n	801a67e <atan+0x1e>
 801a67a:	d109      	bne.n	801a690 <atan+0x30>
 801a67c:	b144      	cbz	r4, 801a690 <atan+0x30>
 801a67e:	4622      	mov	r2, r4
 801a680:	462b      	mov	r3, r5
 801a682:	4620      	mov	r0, r4
 801a684:	4629      	mov	r1, r5
 801a686:	f7e5 fe05 	bl	8000294 <__adddf3>
 801a68a:	4604      	mov	r4, r0
 801a68c:	460d      	mov	r5, r1
 801a68e:	e006      	b.n	801a69e <atan+0x3e>
 801a690:	f1bb 0f00 	cmp.w	fp, #0
 801a694:	f300 8131 	bgt.w	801a8fa <atan+0x29a>
 801a698:	a59b      	add	r5, pc, #620	; (adr r5, 801a908 <atan+0x2a8>)
 801a69a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a69e:	ec45 4b10 	vmov	d0, r4, r5
 801a6a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6a6:	4bb6      	ldr	r3, [pc, #728]	; (801a980 <atan+0x320>)
 801a6a8:	429e      	cmp	r6, r3
 801a6aa:	dc14      	bgt.n	801a6d6 <atan+0x76>
 801a6ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801a6b0:	429e      	cmp	r6, r3
 801a6b2:	dc0d      	bgt.n	801a6d0 <atan+0x70>
 801a6b4:	ee10 0a10 	vmov	r0, s0
 801a6b8:	4629      	mov	r1, r5
 801a6ba:	a395      	add	r3, pc, #596	; (adr r3, 801a910 <atan+0x2b0>)
 801a6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6c0:	f7e5 fde8 	bl	8000294 <__adddf3>
 801a6c4:	2200      	movs	r2, #0
 801a6c6:	4baf      	ldr	r3, [pc, #700]	; (801a984 <atan+0x324>)
 801a6c8:	f7e6 fa2a 	bl	8000b20 <__aeabi_dcmpgt>
 801a6cc:	2800      	cmp	r0, #0
 801a6ce:	d1e6      	bne.n	801a69e <atan+0x3e>
 801a6d0:	f04f 3aff 	mov.w	sl, #4294967295
 801a6d4:	e02b      	b.n	801a72e <atan+0xce>
 801a6d6:	f000 f963 	bl	801a9a0 <fabs>
 801a6da:	4bab      	ldr	r3, [pc, #684]	; (801a988 <atan+0x328>)
 801a6dc:	429e      	cmp	r6, r3
 801a6de:	ec55 4b10 	vmov	r4, r5, d0
 801a6e2:	f300 80bf 	bgt.w	801a864 <atan+0x204>
 801a6e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801a6ea:	429e      	cmp	r6, r3
 801a6ec:	f300 80a0 	bgt.w	801a830 <atan+0x1d0>
 801a6f0:	ee10 2a10 	vmov	r2, s0
 801a6f4:	ee10 0a10 	vmov	r0, s0
 801a6f8:	462b      	mov	r3, r5
 801a6fa:	4629      	mov	r1, r5
 801a6fc:	f7e5 fdca 	bl	8000294 <__adddf3>
 801a700:	2200      	movs	r2, #0
 801a702:	4ba0      	ldr	r3, [pc, #640]	; (801a984 <atan+0x324>)
 801a704:	f04f 0a00 	mov.w	sl, #0
 801a708:	f7e5 fdc2 	bl	8000290 <__aeabi_dsub>
 801a70c:	4606      	mov	r6, r0
 801a70e:	460f      	mov	r7, r1
 801a710:	2200      	movs	r2, #0
 801a712:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a716:	4620      	mov	r0, r4
 801a718:	4629      	mov	r1, r5
 801a71a:	f7e5 fdbb 	bl	8000294 <__adddf3>
 801a71e:	4602      	mov	r2, r0
 801a720:	460b      	mov	r3, r1
 801a722:	4630      	mov	r0, r6
 801a724:	4639      	mov	r1, r7
 801a726:	f7e6 f895 	bl	8000854 <__aeabi_ddiv>
 801a72a:	4604      	mov	r4, r0
 801a72c:	460d      	mov	r5, r1
 801a72e:	4622      	mov	r2, r4
 801a730:	462b      	mov	r3, r5
 801a732:	4620      	mov	r0, r4
 801a734:	4629      	mov	r1, r5
 801a736:	f7e5 ff63 	bl	8000600 <__aeabi_dmul>
 801a73a:	4602      	mov	r2, r0
 801a73c:	460b      	mov	r3, r1
 801a73e:	4680      	mov	r8, r0
 801a740:	4689      	mov	r9, r1
 801a742:	f7e5 ff5d 	bl	8000600 <__aeabi_dmul>
 801a746:	4606      	mov	r6, r0
 801a748:	460f      	mov	r7, r1
 801a74a:	a373      	add	r3, pc, #460	; (adr r3, 801a918 <atan+0x2b8>)
 801a74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a750:	f7e5 ff56 	bl	8000600 <__aeabi_dmul>
 801a754:	a372      	add	r3, pc, #456	; (adr r3, 801a920 <atan+0x2c0>)
 801a756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a75a:	f7e5 fd9b 	bl	8000294 <__adddf3>
 801a75e:	4632      	mov	r2, r6
 801a760:	463b      	mov	r3, r7
 801a762:	f7e5 ff4d 	bl	8000600 <__aeabi_dmul>
 801a766:	a370      	add	r3, pc, #448	; (adr r3, 801a928 <atan+0x2c8>)
 801a768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a76c:	f7e5 fd92 	bl	8000294 <__adddf3>
 801a770:	4632      	mov	r2, r6
 801a772:	463b      	mov	r3, r7
 801a774:	f7e5 ff44 	bl	8000600 <__aeabi_dmul>
 801a778:	a36d      	add	r3, pc, #436	; (adr r3, 801a930 <atan+0x2d0>)
 801a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a77e:	f7e5 fd89 	bl	8000294 <__adddf3>
 801a782:	4632      	mov	r2, r6
 801a784:	463b      	mov	r3, r7
 801a786:	f7e5 ff3b 	bl	8000600 <__aeabi_dmul>
 801a78a:	a36b      	add	r3, pc, #428	; (adr r3, 801a938 <atan+0x2d8>)
 801a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a790:	f7e5 fd80 	bl	8000294 <__adddf3>
 801a794:	4632      	mov	r2, r6
 801a796:	463b      	mov	r3, r7
 801a798:	f7e5 ff32 	bl	8000600 <__aeabi_dmul>
 801a79c:	a368      	add	r3, pc, #416	; (adr r3, 801a940 <atan+0x2e0>)
 801a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7a2:	f7e5 fd77 	bl	8000294 <__adddf3>
 801a7a6:	4642      	mov	r2, r8
 801a7a8:	464b      	mov	r3, r9
 801a7aa:	f7e5 ff29 	bl	8000600 <__aeabi_dmul>
 801a7ae:	4680      	mov	r8, r0
 801a7b0:	4689      	mov	r9, r1
 801a7b2:	4630      	mov	r0, r6
 801a7b4:	4639      	mov	r1, r7
 801a7b6:	a364      	add	r3, pc, #400	; (adr r3, 801a948 <atan+0x2e8>)
 801a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7bc:	f7e5 ff20 	bl	8000600 <__aeabi_dmul>
 801a7c0:	a363      	add	r3, pc, #396	; (adr r3, 801a950 <atan+0x2f0>)
 801a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7c6:	f7e5 fd63 	bl	8000290 <__aeabi_dsub>
 801a7ca:	4632      	mov	r2, r6
 801a7cc:	463b      	mov	r3, r7
 801a7ce:	f7e5 ff17 	bl	8000600 <__aeabi_dmul>
 801a7d2:	a361      	add	r3, pc, #388	; (adr r3, 801a958 <atan+0x2f8>)
 801a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d8:	f7e5 fd5a 	bl	8000290 <__aeabi_dsub>
 801a7dc:	4632      	mov	r2, r6
 801a7de:	463b      	mov	r3, r7
 801a7e0:	f7e5 ff0e 	bl	8000600 <__aeabi_dmul>
 801a7e4:	a35e      	add	r3, pc, #376	; (adr r3, 801a960 <atan+0x300>)
 801a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ea:	f7e5 fd51 	bl	8000290 <__aeabi_dsub>
 801a7ee:	4632      	mov	r2, r6
 801a7f0:	463b      	mov	r3, r7
 801a7f2:	f7e5 ff05 	bl	8000600 <__aeabi_dmul>
 801a7f6:	a35c      	add	r3, pc, #368	; (adr r3, 801a968 <atan+0x308>)
 801a7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7fc:	f7e5 fd48 	bl	8000290 <__aeabi_dsub>
 801a800:	4632      	mov	r2, r6
 801a802:	463b      	mov	r3, r7
 801a804:	f7e5 fefc 	bl	8000600 <__aeabi_dmul>
 801a808:	4602      	mov	r2, r0
 801a80a:	460b      	mov	r3, r1
 801a80c:	4640      	mov	r0, r8
 801a80e:	4649      	mov	r1, r9
 801a810:	f7e5 fd40 	bl	8000294 <__adddf3>
 801a814:	4622      	mov	r2, r4
 801a816:	462b      	mov	r3, r5
 801a818:	f7e5 fef2 	bl	8000600 <__aeabi_dmul>
 801a81c:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a820:	4602      	mov	r2, r0
 801a822:	460b      	mov	r3, r1
 801a824:	d14b      	bne.n	801a8be <atan+0x25e>
 801a826:	4620      	mov	r0, r4
 801a828:	4629      	mov	r1, r5
 801a82a:	f7e5 fd31 	bl	8000290 <__aeabi_dsub>
 801a82e:	e72c      	b.n	801a68a <atan+0x2a>
 801a830:	ee10 0a10 	vmov	r0, s0
 801a834:	2200      	movs	r2, #0
 801a836:	4b53      	ldr	r3, [pc, #332]	; (801a984 <atan+0x324>)
 801a838:	4629      	mov	r1, r5
 801a83a:	f7e5 fd29 	bl	8000290 <__aeabi_dsub>
 801a83e:	4606      	mov	r6, r0
 801a840:	460f      	mov	r7, r1
 801a842:	2200      	movs	r2, #0
 801a844:	4b4f      	ldr	r3, [pc, #316]	; (801a984 <atan+0x324>)
 801a846:	4620      	mov	r0, r4
 801a848:	4629      	mov	r1, r5
 801a84a:	f04f 0a01 	mov.w	sl, #1
 801a84e:	f7e5 fd21 	bl	8000294 <__adddf3>
 801a852:	4602      	mov	r2, r0
 801a854:	460b      	mov	r3, r1
 801a856:	4630      	mov	r0, r6
 801a858:	4639      	mov	r1, r7
 801a85a:	f7e5 fffb 	bl	8000854 <__aeabi_ddiv>
 801a85e:	4604      	mov	r4, r0
 801a860:	460d      	mov	r5, r1
 801a862:	e764      	b.n	801a72e <atan+0xce>
 801a864:	4b49      	ldr	r3, [pc, #292]	; (801a98c <atan+0x32c>)
 801a866:	429e      	cmp	r6, r3
 801a868:	da1d      	bge.n	801a8a6 <atan+0x246>
 801a86a:	ee10 0a10 	vmov	r0, s0
 801a86e:	2200      	movs	r2, #0
 801a870:	4b47      	ldr	r3, [pc, #284]	; (801a990 <atan+0x330>)
 801a872:	4629      	mov	r1, r5
 801a874:	f7e5 fd0c 	bl	8000290 <__aeabi_dsub>
 801a878:	2200      	movs	r2, #0
 801a87a:	4606      	mov	r6, r0
 801a87c:	460f      	mov	r7, r1
 801a87e:	4b44      	ldr	r3, [pc, #272]	; (801a990 <atan+0x330>)
 801a880:	4620      	mov	r0, r4
 801a882:	4629      	mov	r1, r5
 801a884:	f04f 0a02 	mov.w	sl, #2
 801a888:	f7e5 feba 	bl	8000600 <__aeabi_dmul>
 801a88c:	2200      	movs	r2, #0
 801a88e:	4b3d      	ldr	r3, [pc, #244]	; (801a984 <atan+0x324>)
 801a890:	f7e5 fd00 	bl	8000294 <__adddf3>
 801a894:	4602      	mov	r2, r0
 801a896:	460b      	mov	r3, r1
 801a898:	4630      	mov	r0, r6
 801a89a:	4639      	mov	r1, r7
 801a89c:	f7e5 ffda 	bl	8000854 <__aeabi_ddiv>
 801a8a0:	4604      	mov	r4, r0
 801a8a2:	460d      	mov	r5, r1
 801a8a4:	e743      	b.n	801a72e <atan+0xce>
 801a8a6:	462b      	mov	r3, r5
 801a8a8:	ee10 2a10 	vmov	r2, s0
 801a8ac:	2000      	movs	r0, #0
 801a8ae:	4939      	ldr	r1, [pc, #228]	; (801a994 <atan+0x334>)
 801a8b0:	f7e5 ffd0 	bl	8000854 <__aeabi_ddiv>
 801a8b4:	f04f 0a03 	mov.w	sl, #3
 801a8b8:	4604      	mov	r4, r0
 801a8ba:	460d      	mov	r5, r1
 801a8bc:	e737      	b.n	801a72e <atan+0xce>
 801a8be:	4b36      	ldr	r3, [pc, #216]	; (801a998 <atan+0x338>)
 801a8c0:	4e36      	ldr	r6, [pc, #216]	; (801a99c <atan+0x33c>)
 801a8c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a8c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801a8ca:	e9da 2300 	ldrd	r2, r3, [sl]
 801a8ce:	f7e5 fcdf 	bl	8000290 <__aeabi_dsub>
 801a8d2:	4622      	mov	r2, r4
 801a8d4:	462b      	mov	r3, r5
 801a8d6:	f7e5 fcdb 	bl	8000290 <__aeabi_dsub>
 801a8da:	4602      	mov	r2, r0
 801a8dc:	460b      	mov	r3, r1
 801a8de:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a8e2:	f7e5 fcd5 	bl	8000290 <__aeabi_dsub>
 801a8e6:	f1bb 0f00 	cmp.w	fp, #0
 801a8ea:	4604      	mov	r4, r0
 801a8ec:	460d      	mov	r5, r1
 801a8ee:	f6bf aed6 	bge.w	801a69e <atan+0x3e>
 801a8f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a8f6:	461d      	mov	r5, r3
 801a8f8:	e6d1      	b.n	801a69e <atan+0x3e>
 801a8fa:	a51d      	add	r5, pc, #116	; (adr r5, 801a970 <atan+0x310>)
 801a8fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a900:	e6cd      	b.n	801a69e <atan+0x3e>
 801a902:	bf00      	nop
 801a904:	f3af 8000 	nop.w
 801a908:	54442d18 	.word	0x54442d18
 801a90c:	bff921fb 	.word	0xbff921fb
 801a910:	8800759c 	.word	0x8800759c
 801a914:	7e37e43c 	.word	0x7e37e43c
 801a918:	e322da11 	.word	0xe322da11
 801a91c:	3f90ad3a 	.word	0x3f90ad3a
 801a920:	24760deb 	.word	0x24760deb
 801a924:	3fa97b4b 	.word	0x3fa97b4b
 801a928:	a0d03d51 	.word	0xa0d03d51
 801a92c:	3fb10d66 	.word	0x3fb10d66
 801a930:	c54c206e 	.word	0xc54c206e
 801a934:	3fb745cd 	.word	0x3fb745cd
 801a938:	920083ff 	.word	0x920083ff
 801a93c:	3fc24924 	.word	0x3fc24924
 801a940:	5555550d 	.word	0x5555550d
 801a944:	3fd55555 	.word	0x3fd55555
 801a948:	2c6a6c2f 	.word	0x2c6a6c2f
 801a94c:	bfa2b444 	.word	0xbfa2b444
 801a950:	52defd9a 	.word	0x52defd9a
 801a954:	3fadde2d 	.word	0x3fadde2d
 801a958:	af749a6d 	.word	0xaf749a6d
 801a95c:	3fb3b0f2 	.word	0x3fb3b0f2
 801a960:	fe231671 	.word	0xfe231671
 801a964:	3fbc71c6 	.word	0x3fbc71c6
 801a968:	9998ebc4 	.word	0x9998ebc4
 801a96c:	3fc99999 	.word	0x3fc99999
 801a970:	54442d18 	.word	0x54442d18
 801a974:	3ff921fb 	.word	0x3ff921fb
 801a978:	440fffff 	.word	0x440fffff
 801a97c:	7ff00000 	.word	0x7ff00000
 801a980:	3fdbffff 	.word	0x3fdbffff
 801a984:	3ff00000 	.word	0x3ff00000
 801a988:	3ff2ffff 	.word	0x3ff2ffff
 801a98c:	40038000 	.word	0x40038000
 801a990:	3ff80000 	.word	0x3ff80000
 801a994:	bff00000 	.word	0xbff00000
 801a998:	0801bbf8 	.word	0x0801bbf8
 801a99c:	0801bbd8 	.word	0x0801bbd8

0801a9a0 <fabs>:
 801a9a0:	ec51 0b10 	vmov	r0, r1, d0
 801a9a4:	ee10 2a10 	vmov	r2, s0
 801a9a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a9ac:	ec43 2b10 	vmov	d0, r2, r3
 801a9b0:	4770      	bx	lr
	...

0801a9b4 <atanf>:
 801a9b4:	b538      	push	{r3, r4, r5, lr}
 801a9b6:	ee10 5a10 	vmov	r5, s0
 801a9ba:	eef0 7a40 	vmov.f32	s15, s0
 801a9be:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a9c2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 801a9c6:	db0f      	blt.n	801a9e8 <atanf+0x34>
 801a9c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801a9cc:	dd04      	ble.n	801a9d8 <atanf+0x24>
 801a9ce:	ee70 7a00 	vadd.f32	s15, s0, s0
 801a9d2:	eeb0 0a67 	vmov.f32	s0, s15
 801a9d6:	bd38      	pop	{r3, r4, r5, pc}
 801a9d8:	2d00      	cmp	r5, #0
 801a9da:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801ab10 <atanf+0x15c>
 801a9de:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 801ab14 <atanf+0x160>
 801a9e2:	fe77 7a80 	vselgt.f32	s15, s15, s0
 801a9e6:	e7f4      	b.n	801a9d2 <atanf+0x1e>
 801a9e8:	4b4b      	ldr	r3, [pc, #300]	; (801ab18 <atanf+0x164>)
 801a9ea:	429c      	cmp	r4, r3
 801a9ec:	dc10      	bgt.n	801aa10 <atanf+0x5c>
 801a9ee:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801a9f2:	da0a      	bge.n	801aa0a <atanf+0x56>
 801a9f4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801ab1c <atanf+0x168>
 801a9f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a9fc:	ee30 7a07 	vadd.f32	s14, s0, s14
 801aa00:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801aa04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa08:	dce3      	bgt.n	801a9d2 <atanf+0x1e>
 801aa0a:	f04f 33ff 	mov.w	r3, #4294967295
 801aa0e:	e013      	b.n	801aa38 <atanf+0x84>
 801aa10:	f000 f8a4 	bl	801ab5c <fabsf>
 801aa14:	4b42      	ldr	r3, [pc, #264]	; (801ab20 <atanf+0x16c>)
 801aa16:	429c      	cmp	r4, r3
 801aa18:	dc4f      	bgt.n	801aaba <atanf+0x106>
 801aa1a:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 801aa1e:	429c      	cmp	r4, r3
 801aa20:	dc41      	bgt.n	801aaa6 <atanf+0xf2>
 801aa22:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801aa26:	2300      	movs	r3, #0
 801aa28:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801aa2c:	eea0 7a27 	vfma.f32	s14, s0, s15
 801aa30:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aa34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801aa38:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801ab24 <atanf+0x170>
 801aa3c:	1c5a      	adds	r2, r3, #1
 801aa3e:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 801ab28 <atanf+0x174>
 801aa42:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801ab2c <atanf+0x178>
 801aa46:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801ab30 <atanf+0x17c>
 801aa4a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801aa4e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801aa52:	eea7 6a25 	vfma.f32	s12, s14, s11
 801aa56:	eddf 5a37 	vldr	s11, [pc, #220]	; 801ab34 <atanf+0x180>
 801aa5a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801aa5e:	ed9f 6a36 	vldr	s12, [pc, #216]	; 801ab38 <atanf+0x184>
 801aa62:	eea5 6a87 	vfma.f32	s12, s11, s14
 801aa66:	eddf 5a35 	vldr	s11, [pc, #212]	; 801ab3c <atanf+0x188>
 801aa6a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801aa6e:	ed9f 6a34 	vldr	s12, [pc, #208]	; 801ab40 <atanf+0x18c>
 801aa72:	eea5 6a87 	vfma.f32	s12, s11, s14
 801aa76:	eddf 5a33 	vldr	s11, [pc, #204]	; 801ab44 <atanf+0x190>
 801aa7a:	eee7 5a05 	vfma.f32	s11, s14, s10
 801aa7e:	ed9f 5a32 	vldr	s10, [pc, #200]	; 801ab48 <atanf+0x194>
 801aa82:	eea5 5a87 	vfma.f32	s10, s11, s14
 801aa86:	eddf 5a31 	vldr	s11, [pc, #196]	; 801ab4c <atanf+0x198>
 801aa8a:	eee5 5a07 	vfma.f32	s11, s10, s14
 801aa8e:	eea5 0a87 	vfma.f32	s0, s11, s14
 801aa92:	ee20 0a07 	vmul.f32	s0, s0, s14
 801aa96:	eea6 0a26 	vfma.f32	s0, s12, s13
 801aa9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801aa9e:	d121      	bne.n	801aae4 <atanf+0x130>
 801aaa0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801aaa4:	e795      	b.n	801a9d2 <atanf+0x1e>
 801aaa6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801aaaa:	2301      	movs	r3, #1
 801aaac:	ee30 7a67 	vsub.f32	s14, s0, s15
 801aab0:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aab4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801aab8:	e7be      	b.n	801aa38 <atanf+0x84>
 801aaba:	4b25      	ldr	r3, [pc, #148]	; (801ab50 <atanf+0x19c>)
 801aabc:	429c      	cmp	r4, r3
 801aabe:	dc0b      	bgt.n	801aad8 <atanf+0x124>
 801aac0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 801aac4:	2302      	movs	r3, #2
 801aac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801aaca:	ee70 6a67 	vsub.f32	s13, s0, s15
 801aace:	eea0 7a27 	vfma.f32	s14, s0, s15
 801aad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801aad6:	e7af      	b.n	801aa38 <atanf+0x84>
 801aad8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801aadc:	2303      	movs	r3, #3
 801aade:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801aae2:	e7a9      	b.n	801aa38 <atanf+0x84>
 801aae4:	4a1b      	ldr	r2, [pc, #108]	; (801ab54 <atanf+0x1a0>)
 801aae6:	2d00      	cmp	r5, #0
 801aae8:	491b      	ldr	r1, [pc, #108]	; (801ab58 <atanf+0x1a4>)
 801aaea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801aaee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801aaf2:	ed93 7a00 	vldr	s14, [r3]
 801aaf6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801aafa:	ee70 7a67 	vsub.f32	s15, s0, s15
 801aafe:	ed92 0a00 	vldr	s0, [r2]
 801ab02:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ab06:	bfb8      	it	lt
 801ab08:	eef1 7a67 	vneglt.f32	s15, s15
 801ab0c:	e761      	b.n	801a9d2 <atanf+0x1e>
 801ab0e:	bf00      	nop
 801ab10:	3fc90fdb 	.word	0x3fc90fdb
 801ab14:	bfc90fdb 	.word	0xbfc90fdb
 801ab18:	3edfffff 	.word	0x3edfffff
 801ab1c:	7149f2ca 	.word	0x7149f2ca
 801ab20:	3f97ffff 	.word	0x3f97ffff
 801ab24:	3c8569d7 	.word	0x3c8569d7
 801ab28:	3d4bda59 	.word	0x3d4bda59
 801ab2c:	bd15a221 	.word	0xbd15a221
 801ab30:	be4ccccd 	.word	0xbe4ccccd
 801ab34:	3d886b35 	.word	0x3d886b35
 801ab38:	3dba2e6e 	.word	0x3dba2e6e
 801ab3c:	3e124925 	.word	0x3e124925
 801ab40:	3eaaaaab 	.word	0x3eaaaaab
 801ab44:	bd6ef16b 	.word	0xbd6ef16b
 801ab48:	bd9d8795 	.word	0xbd9d8795
 801ab4c:	bde38e38 	.word	0xbde38e38
 801ab50:	401bffff 	.word	0x401bffff
 801ab54:	0801bc18 	.word	0x0801bc18
 801ab58:	0801bc28 	.word	0x0801bc28

0801ab5c <fabsf>:
 801ab5c:	ee10 3a10 	vmov	r3, s0
 801ab60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ab64:	ee00 3a10 	vmov	s0, r3
 801ab68:	4770      	bx	lr

0801ab6a <floorf>:
 801ab6a:	febb 0a40 	vrintm.f32	s0, s0
 801ab6e:	4770      	bx	lr

0801ab70 <nanf>:
 801ab70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ab78 <nanf+0x8>
 801ab74:	4770      	bx	lr
 801ab76:	bf00      	nop
 801ab78:	7fc00000 	.word	0x7fc00000

0801ab7c <scalbnf>:
 801ab7c:	ee10 3a10 	vmov	r3, s0
 801ab80:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801ab84:	d024      	beq.n	801abd0 <scalbnf+0x54>
 801ab86:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801ab8a:	d302      	bcc.n	801ab92 <scalbnf+0x16>
 801ab8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ab90:	4770      	bx	lr
 801ab92:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801ab96:	d121      	bne.n	801abdc <scalbnf+0x60>
 801ab98:	4b29      	ldr	r3, [pc, #164]	; (801ac40 <scalbnf+0xc4>)
 801ab9a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801ac44 <scalbnf+0xc8>
 801ab9e:	4298      	cmp	r0, r3
 801aba0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801aba4:	db15      	blt.n	801abd2 <scalbnf+0x56>
 801aba6:	ee10 3a10 	vmov	r3, s0
 801abaa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801abae:	3a19      	subs	r2, #25
 801abb0:	4402      	add	r2, r0
 801abb2:	2afe      	cmp	r2, #254	; 0xfe
 801abb4:	dd14      	ble.n	801abe0 <scalbnf+0x64>
 801abb6:	ee10 3a10 	vmov	r3, s0
 801abba:	eddf 7a23 	vldr	s15, [pc, #140]	; 801ac48 <scalbnf+0xcc>
 801abbe:	eddf 6a23 	vldr	s13, [pc, #140]	; 801ac4c <scalbnf+0xd0>
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	eeb0 7a67 	vmov.f32	s14, s15
 801abc8:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801abcc:	ee27 0a27 	vmul.f32	s0, s14, s15
 801abd0:	4770      	bx	lr
 801abd2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801ac50 <scalbnf+0xd4>
 801abd6:	ee20 0a27 	vmul.f32	s0, s0, s15
 801abda:	4770      	bx	lr
 801abdc:	0dd2      	lsrs	r2, r2, #23
 801abde:	e7e7      	b.n	801abb0 <scalbnf+0x34>
 801abe0:	2a00      	cmp	r2, #0
 801abe2:	dd06      	ble.n	801abf2 <scalbnf+0x76>
 801abe4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801abe8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801abec:	ee00 3a10 	vmov	s0, r3
 801abf0:	4770      	bx	lr
 801abf2:	f112 0f16 	cmn.w	r2, #22
 801abf6:	da19      	bge.n	801ac2c <scalbnf+0xb0>
 801abf8:	f24c 3350 	movw	r3, #50000	; 0xc350
 801abfc:	4298      	cmp	r0, r3
 801abfe:	ee10 3a10 	vmov	r3, s0
 801ac02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ac06:	dd09      	ble.n	801ac1c <scalbnf+0xa0>
 801ac08:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 801ac48 <scalbnf+0xcc>
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801ac4c <scalbnf+0xd0>
 801ac12:	eef0 7a40 	vmov.f32	s15, s0
 801ac16:	fe00 0a07 	vseleq.f32	s0, s0, s14
 801ac1a:	e7dc      	b.n	801abd6 <scalbnf+0x5a>
 801ac1c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801ac50 <scalbnf+0xd4>
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801ac54 <scalbnf+0xd8>
 801ac26:	eef0 7a40 	vmov.f32	s15, s0
 801ac2a:	e7f4      	b.n	801ac16 <scalbnf+0x9a>
 801ac2c:	3219      	adds	r2, #25
 801ac2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ac32:	eddf 7a09 	vldr	s15, [pc, #36]	; 801ac58 <scalbnf+0xdc>
 801ac36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801ac3a:	ee07 3a10 	vmov	s14, r3
 801ac3e:	e7c5      	b.n	801abcc <scalbnf+0x50>
 801ac40:	ffff3cb0 	.word	0xffff3cb0
 801ac44:	4c000000 	.word	0x4c000000
 801ac48:	7149f2ca 	.word	0x7149f2ca
 801ac4c:	f149f2ca 	.word	0xf149f2ca
 801ac50:	0da24260 	.word	0x0da24260
 801ac54:	8da24260 	.word	0x8da24260
 801ac58:	33000000 	.word	0x33000000

0801ac5c <__errno>:
 801ac5c:	4b01      	ldr	r3, [pc, #4]	; (801ac64 <__errno+0x8>)
 801ac5e:	6818      	ldr	r0, [r3, #0]
 801ac60:	4770      	bx	lr
 801ac62:	bf00      	nop
 801ac64:	200000b0 	.word	0x200000b0

0801ac68 <__libc_init_array>:
 801ac68:	b570      	push	{r4, r5, r6, lr}
 801ac6a:	4d0d      	ldr	r5, [pc, #52]	; (801aca0 <__libc_init_array+0x38>)
 801ac6c:	2600      	movs	r6, #0
 801ac6e:	4c0d      	ldr	r4, [pc, #52]	; (801aca4 <__libc_init_array+0x3c>)
 801ac70:	1b64      	subs	r4, r4, r5
 801ac72:	10a4      	asrs	r4, r4, #2
 801ac74:	42a6      	cmp	r6, r4
 801ac76:	d109      	bne.n	801ac8c <__libc_init_array+0x24>
 801ac78:	4d0b      	ldr	r5, [pc, #44]	; (801aca8 <__libc_init_array+0x40>)
 801ac7a:	2600      	movs	r6, #0
 801ac7c:	4c0b      	ldr	r4, [pc, #44]	; (801acac <__libc_init_array+0x44>)
 801ac7e:	f000 fc71 	bl	801b564 <_init>
 801ac82:	1b64      	subs	r4, r4, r5
 801ac84:	10a4      	asrs	r4, r4, #2
 801ac86:	42a6      	cmp	r6, r4
 801ac88:	d105      	bne.n	801ac96 <__libc_init_array+0x2e>
 801ac8a:	bd70      	pop	{r4, r5, r6, pc}
 801ac8c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac90:	3601      	adds	r6, #1
 801ac92:	4798      	blx	r3
 801ac94:	e7ee      	b.n	801ac74 <__libc_init_array+0xc>
 801ac96:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac9a:	3601      	adds	r6, #1
 801ac9c:	4798      	blx	r3
 801ac9e:	e7f2      	b.n	801ac86 <__libc_init_array+0x1e>
 801aca0:	0801bc74 	.word	0x0801bc74
 801aca4:	0801bc74 	.word	0x0801bc74
 801aca8:	0801bc74 	.word	0x0801bc74
 801acac:	0801bc78 	.word	0x0801bc78

0801acb0 <memcpy>:
 801acb0:	440a      	add	r2, r1
 801acb2:	1e43      	subs	r3, r0, #1
 801acb4:	4291      	cmp	r1, r2
 801acb6:	d100      	bne.n	801acba <memcpy+0xa>
 801acb8:	4770      	bx	lr
 801acba:	b510      	push	{r4, lr}
 801acbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801acc0:	4291      	cmp	r1, r2
 801acc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801acc6:	d1f9      	bne.n	801acbc <memcpy+0xc>
 801acc8:	bd10      	pop	{r4, pc}

0801acca <memset>:
 801acca:	4402      	add	r2, r0
 801accc:	4603      	mov	r3, r0
 801acce:	4293      	cmp	r3, r2
 801acd0:	d100      	bne.n	801acd4 <memset+0xa>
 801acd2:	4770      	bx	lr
 801acd4:	f803 1b01 	strb.w	r1, [r3], #1
 801acd8:	e7f9      	b.n	801acce <memset+0x4>
	...

0801acdc <sniprintf>:
 801acdc:	b40c      	push	{r2, r3}
 801acde:	4b18      	ldr	r3, [pc, #96]	; (801ad40 <sniprintf+0x64>)
 801ace0:	b530      	push	{r4, r5, lr}
 801ace2:	1e0c      	subs	r4, r1, #0
 801ace4:	b09d      	sub	sp, #116	; 0x74
 801ace6:	681d      	ldr	r5, [r3, #0]
 801ace8:	da08      	bge.n	801acfc <sniprintf+0x20>
 801acea:	238b      	movs	r3, #139	; 0x8b
 801acec:	f04f 30ff 	mov.w	r0, #4294967295
 801acf0:	602b      	str	r3, [r5, #0]
 801acf2:	b01d      	add	sp, #116	; 0x74
 801acf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801acf8:	b002      	add	sp, #8
 801acfa:	4770      	bx	lr
 801acfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ad00:	9002      	str	r0, [sp, #8]
 801ad02:	9006      	str	r0, [sp, #24]
 801ad04:	a902      	add	r1, sp, #8
 801ad06:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ad0a:	bf14      	ite	ne
 801ad0c:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ad10:	4623      	moveq	r3, r4
 801ad12:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ad14:	4628      	mov	r0, r5
 801ad16:	9304      	str	r3, [sp, #16]
 801ad18:	9307      	str	r3, [sp, #28]
 801ad1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ad1e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ad22:	ab21      	add	r3, sp, #132	; 0x84
 801ad24:	9301      	str	r3, [sp, #4]
 801ad26:	f000 f869 	bl	801adfc <_svfiprintf_r>
 801ad2a:	1c43      	adds	r3, r0, #1
 801ad2c:	bfbc      	itt	lt
 801ad2e:	238b      	movlt	r3, #139	; 0x8b
 801ad30:	602b      	strlt	r3, [r5, #0]
 801ad32:	2c00      	cmp	r4, #0
 801ad34:	d0dd      	beq.n	801acf2 <sniprintf+0x16>
 801ad36:	9b02      	ldr	r3, [sp, #8]
 801ad38:	2200      	movs	r2, #0
 801ad3a:	701a      	strb	r2, [r3, #0]
 801ad3c:	e7d9      	b.n	801acf2 <sniprintf+0x16>
 801ad3e:	bf00      	nop
 801ad40:	200000b0 	.word	0x200000b0

0801ad44 <__ssputs_r>:
 801ad44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad48:	688e      	ldr	r6, [r1, #8]
 801ad4a:	4682      	mov	sl, r0
 801ad4c:	460c      	mov	r4, r1
 801ad4e:	4690      	mov	r8, r2
 801ad50:	429e      	cmp	r6, r3
 801ad52:	461f      	mov	r7, r3
 801ad54:	d838      	bhi.n	801adc8 <__ssputs_r+0x84>
 801ad56:	898a      	ldrh	r2, [r1, #12]
 801ad58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ad5c:	d032      	beq.n	801adc4 <__ssputs_r+0x80>
 801ad5e:	6825      	ldr	r5, [r4, #0]
 801ad60:	3301      	adds	r3, #1
 801ad62:	6909      	ldr	r1, [r1, #16]
 801ad64:	eba5 0901 	sub.w	r9, r5, r1
 801ad68:	6965      	ldr	r5, [r4, #20]
 801ad6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ad6e:	444b      	add	r3, r9
 801ad70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ad74:	106d      	asrs	r5, r5, #1
 801ad76:	429d      	cmp	r5, r3
 801ad78:	bf38      	it	cc
 801ad7a:	461d      	movcc	r5, r3
 801ad7c:	0553      	lsls	r3, r2, #21
 801ad7e:	d531      	bpl.n	801ade4 <__ssputs_r+0xa0>
 801ad80:	4629      	mov	r1, r5
 801ad82:	f000 fb49 	bl	801b418 <_malloc_r>
 801ad86:	4606      	mov	r6, r0
 801ad88:	b950      	cbnz	r0, 801ada0 <__ssputs_r+0x5c>
 801ad8a:	230c      	movs	r3, #12
 801ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 801ad90:	f8ca 3000 	str.w	r3, [sl]
 801ad94:	89a3      	ldrh	r3, [r4, #12]
 801ad96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad9a:	81a3      	strh	r3, [r4, #12]
 801ad9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ada0:	464a      	mov	r2, r9
 801ada2:	6921      	ldr	r1, [r4, #16]
 801ada4:	f7ff ff84 	bl	801acb0 <memcpy>
 801ada8:	89a3      	ldrh	r3, [r4, #12]
 801adaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801adae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801adb2:	81a3      	strh	r3, [r4, #12]
 801adb4:	6126      	str	r6, [r4, #16]
 801adb6:	444e      	add	r6, r9
 801adb8:	6165      	str	r5, [r4, #20]
 801adba:	eba5 0509 	sub.w	r5, r5, r9
 801adbe:	6026      	str	r6, [r4, #0]
 801adc0:	463e      	mov	r6, r7
 801adc2:	60a5      	str	r5, [r4, #8]
 801adc4:	42be      	cmp	r6, r7
 801adc6:	d900      	bls.n	801adca <__ssputs_r+0x86>
 801adc8:	463e      	mov	r6, r7
 801adca:	4632      	mov	r2, r6
 801adcc:	4641      	mov	r1, r8
 801adce:	6820      	ldr	r0, [r4, #0]
 801add0:	f000 fab8 	bl	801b344 <memmove>
 801add4:	68a3      	ldr	r3, [r4, #8]
 801add6:	6822      	ldr	r2, [r4, #0]
 801add8:	2000      	movs	r0, #0
 801adda:	1b9b      	subs	r3, r3, r6
 801addc:	4432      	add	r2, r6
 801adde:	60a3      	str	r3, [r4, #8]
 801ade0:	6022      	str	r2, [r4, #0]
 801ade2:	e7db      	b.n	801ad9c <__ssputs_r+0x58>
 801ade4:	462a      	mov	r2, r5
 801ade6:	f000 fb71 	bl	801b4cc <_realloc_r>
 801adea:	4606      	mov	r6, r0
 801adec:	2800      	cmp	r0, #0
 801adee:	d1e1      	bne.n	801adb4 <__ssputs_r+0x70>
 801adf0:	6921      	ldr	r1, [r4, #16]
 801adf2:	4650      	mov	r0, sl
 801adf4:	f000 fac0 	bl	801b378 <_free_r>
 801adf8:	e7c7      	b.n	801ad8a <__ssputs_r+0x46>
	...

0801adfc <_svfiprintf_r>:
 801adfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae00:	4698      	mov	r8, r3
 801ae02:	898b      	ldrh	r3, [r1, #12]
 801ae04:	b09d      	sub	sp, #116	; 0x74
 801ae06:	4607      	mov	r7, r0
 801ae08:	061b      	lsls	r3, r3, #24
 801ae0a:	460d      	mov	r5, r1
 801ae0c:	4614      	mov	r4, r2
 801ae0e:	d50e      	bpl.n	801ae2e <_svfiprintf_r+0x32>
 801ae10:	690b      	ldr	r3, [r1, #16]
 801ae12:	b963      	cbnz	r3, 801ae2e <_svfiprintf_r+0x32>
 801ae14:	2140      	movs	r1, #64	; 0x40
 801ae16:	f000 faff 	bl	801b418 <_malloc_r>
 801ae1a:	6028      	str	r0, [r5, #0]
 801ae1c:	6128      	str	r0, [r5, #16]
 801ae1e:	b920      	cbnz	r0, 801ae2a <_svfiprintf_r+0x2e>
 801ae20:	230c      	movs	r3, #12
 801ae22:	603b      	str	r3, [r7, #0]
 801ae24:	f04f 30ff 	mov.w	r0, #4294967295
 801ae28:	e0d1      	b.n	801afce <_svfiprintf_r+0x1d2>
 801ae2a:	2340      	movs	r3, #64	; 0x40
 801ae2c:	616b      	str	r3, [r5, #20]
 801ae2e:	2300      	movs	r3, #0
 801ae30:	f8cd 800c 	str.w	r8, [sp, #12]
 801ae34:	f04f 0901 	mov.w	r9, #1
 801ae38:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 801afe8 <_svfiprintf_r+0x1ec>
 801ae3c:	9309      	str	r3, [sp, #36]	; 0x24
 801ae3e:	2320      	movs	r3, #32
 801ae40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ae44:	2330      	movs	r3, #48	; 0x30
 801ae46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ae4a:	4623      	mov	r3, r4
 801ae4c:	469a      	mov	sl, r3
 801ae4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ae52:	b10a      	cbz	r2, 801ae58 <_svfiprintf_r+0x5c>
 801ae54:	2a25      	cmp	r2, #37	; 0x25
 801ae56:	d1f9      	bne.n	801ae4c <_svfiprintf_r+0x50>
 801ae58:	ebba 0b04 	subs.w	fp, sl, r4
 801ae5c:	d00b      	beq.n	801ae76 <_svfiprintf_r+0x7a>
 801ae5e:	465b      	mov	r3, fp
 801ae60:	4622      	mov	r2, r4
 801ae62:	4629      	mov	r1, r5
 801ae64:	4638      	mov	r0, r7
 801ae66:	f7ff ff6d 	bl	801ad44 <__ssputs_r>
 801ae6a:	3001      	adds	r0, #1
 801ae6c:	f000 80aa 	beq.w	801afc4 <_svfiprintf_r+0x1c8>
 801ae70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ae72:	445a      	add	r2, fp
 801ae74:	9209      	str	r2, [sp, #36]	; 0x24
 801ae76:	f89a 3000 	ldrb.w	r3, [sl]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	f000 80a2 	beq.w	801afc4 <_svfiprintf_r+0x1c8>
 801ae80:	2300      	movs	r3, #0
 801ae82:	f04f 32ff 	mov.w	r2, #4294967295
 801ae86:	f10a 0a01 	add.w	sl, sl, #1
 801ae8a:	9304      	str	r3, [sp, #16]
 801ae8c:	9307      	str	r3, [sp, #28]
 801ae8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ae92:	931a      	str	r3, [sp, #104]	; 0x68
 801ae94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ae98:	4654      	mov	r4, sl
 801ae9a:	2205      	movs	r2, #5
 801ae9c:	4852      	ldr	r0, [pc, #328]	; (801afe8 <_svfiprintf_r+0x1ec>)
 801ae9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aea2:	f000 fa41 	bl	801b328 <memchr>
 801aea6:	9a04      	ldr	r2, [sp, #16]
 801aea8:	b9d8      	cbnz	r0, 801aee2 <_svfiprintf_r+0xe6>
 801aeaa:	06d0      	lsls	r0, r2, #27
 801aeac:	bf44      	itt	mi
 801aeae:	2320      	movmi	r3, #32
 801aeb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aeb4:	0711      	lsls	r1, r2, #28
 801aeb6:	bf44      	itt	mi
 801aeb8:	232b      	movmi	r3, #43	; 0x2b
 801aeba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aebe:	f89a 3000 	ldrb.w	r3, [sl]
 801aec2:	2b2a      	cmp	r3, #42	; 0x2a
 801aec4:	d015      	beq.n	801aef2 <_svfiprintf_r+0xf6>
 801aec6:	9a07      	ldr	r2, [sp, #28]
 801aec8:	4654      	mov	r4, sl
 801aeca:	2000      	movs	r0, #0
 801aecc:	f04f 0c0a 	mov.w	ip, #10
 801aed0:	4621      	mov	r1, r4
 801aed2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aed6:	3b30      	subs	r3, #48	; 0x30
 801aed8:	2b09      	cmp	r3, #9
 801aeda:	d94e      	bls.n	801af7a <_svfiprintf_r+0x17e>
 801aedc:	b1b0      	cbz	r0, 801af0c <_svfiprintf_r+0x110>
 801aede:	9207      	str	r2, [sp, #28]
 801aee0:	e014      	b.n	801af0c <_svfiprintf_r+0x110>
 801aee2:	eba0 0308 	sub.w	r3, r0, r8
 801aee6:	46a2      	mov	sl, r4
 801aee8:	fa09 f303 	lsl.w	r3, r9, r3
 801aeec:	4313      	orrs	r3, r2
 801aeee:	9304      	str	r3, [sp, #16]
 801aef0:	e7d2      	b.n	801ae98 <_svfiprintf_r+0x9c>
 801aef2:	9b03      	ldr	r3, [sp, #12]
 801aef4:	1d19      	adds	r1, r3, #4
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	9103      	str	r1, [sp, #12]
 801aefc:	bfbb      	ittet	lt
 801aefe:	425b      	neglt	r3, r3
 801af00:	f042 0202 	orrlt.w	r2, r2, #2
 801af04:	9307      	strge	r3, [sp, #28]
 801af06:	9307      	strlt	r3, [sp, #28]
 801af08:	bfb8      	it	lt
 801af0a:	9204      	strlt	r2, [sp, #16]
 801af0c:	7823      	ldrb	r3, [r4, #0]
 801af0e:	2b2e      	cmp	r3, #46	; 0x2e
 801af10:	d10c      	bne.n	801af2c <_svfiprintf_r+0x130>
 801af12:	7863      	ldrb	r3, [r4, #1]
 801af14:	2b2a      	cmp	r3, #42	; 0x2a
 801af16:	d135      	bne.n	801af84 <_svfiprintf_r+0x188>
 801af18:	9b03      	ldr	r3, [sp, #12]
 801af1a:	3402      	adds	r4, #2
 801af1c:	1d1a      	adds	r2, r3, #4
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	2b00      	cmp	r3, #0
 801af22:	9203      	str	r2, [sp, #12]
 801af24:	bfb8      	it	lt
 801af26:	f04f 33ff 	movlt.w	r3, #4294967295
 801af2a:	9305      	str	r3, [sp, #20]
 801af2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aff8 <_svfiprintf_r+0x1fc>
 801af30:	2203      	movs	r2, #3
 801af32:	7821      	ldrb	r1, [r4, #0]
 801af34:	4650      	mov	r0, sl
 801af36:	f000 f9f7 	bl	801b328 <memchr>
 801af3a:	b140      	cbz	r0, 801af4e <_svfiprintf_r+0x152>
 801af3c:	2340      	movs	r3, #64	; 0x40
 801af3e:	eba0 000a 	sub.w	r0, r0, sl
 801af42:	3401      	adds	r4, #1
 801af44:	fa03 f000 	lsl.w	r0, r3, r0
 801af48:	9b04      	ldr	r3, [sp, #16]
 801af4a:	4303      	orrs	r3, r0
 801af4c:	9304      	str	r3, [sp, #16]
 801af4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af52:	2206      	movs	r2, #6
 801af54:	4825      	ldr	r0, [pc, #148]	; (801afec <_svfiprintf_r+0x1f0>)
 801af56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801af5a:	f000 f9e5 	bl	801b328 <memchr>
 801af5e:	2800      	cmp	r0, #0
 801af60:	d038      	beq.n	801afd4 <_svfiprintf_r+0x1d8>
 801af62:	4b23      	ldr	r3, [pc, #140]	; (801aff0 <_svfiprintf_r+0x1f4>)
 801af64:	bb1b      	cbnz	r3, 801afae <_svfiprintf_r+0x1b2>
 801af66:	9b03      	ldr	r3, [sp, #12]
 801af68:	3307      	adds	r3, #7
 801af6a:	f023 0307 	bic.w	r3, r3, #7
 801af6e:	3308      	adds	r3, #8
 801af70:	9303      	str	r3, [sp, #12]
 801af72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af74:	4433      	add	r3, r6
 801af76:	9309      	str	r3, [sp, #36]	; 0x24
 801af78:	e767      	b.n	801ae4a <_svfiprintf_r+0x4e>
 801af7a:	fb0c 3202 	mla	r2, ip, r2, r3
 801af7e:	460c      	mov	r4, r1
 801af80:	2001      	movs	r0, #1
 801af82:	e7a5      	b.n	801aed0 <_svfiprintf_r+0xd4>
 801af84:	2300      	movs	r3, #0
 801af86:	3401      	adds	r4, #1
 801af88:	f04f 0c0a 	mov.w	ip, #10
 801af8c:	4619      	mov	r1, r3
 801af8e:	9305      	str	r3, [sp, #20]
 801af90:	4620      	mov	r0, r4
 801af92:	f810 2b01 	ldrb.w	r2, [r0], #1
 801af96:	3a30      	subs	r2, #48	; 0x30
 801af98:	2a09      	cmp	r2, #9
 801af9a:	d903      	bls.n	801afa4 <_svfiprintf_r+0x1a8>
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d0c5      	beq.n	801af2c <_svfiprintf_r+0x130>
 801afa0:	9105      	str	r1, [sp, #20]
 801afa2:	e7c3      	b.n	801af2c <_svfiprintf_r+0x130>
 801afa4:	fb0c 2101 	mla	r1, ip, r1, r2
 801afa8:	4604      	mov	r4, r0
 801afaa:	2301      	movs	r3, #1
 801afac:	e7f0      	b.n	801af90 <_svfiprintf_r+0x194>
 801afae:	ab03      	add	r3, sp, #12
 801afb0:	462a      	mov	r2, r5
 801afb2:	a904      	add	r1, sp, #16
 801afb4:	4638      	mov	r0, r7
 801afb6:	9300      	str	r3, [sp, #0]
 801afb8:	4b0e      	ldr	r3, [pc, #56]	; (801aff4 <_svfiprintf_r+0x1f8>)
 801afba:	e000      	b.n	801afbe <_svfiprintf_r+0x1c2>
 801afbc:	bf00      	nop
 801afbe:	1c42      	adds	r2, r0, #1
 801afc0:	4606      	mov	r6, r0
 801afc2:	d1d6      	bne.n	801af72 <_svfiprintf_r+0x176>
 801afc4:	89ab      	ldrh	r3, [r5, #12]
 801afc6:	065b      	lsls	r3, r3, #25
 801afc8:	f53f af2c 	bmi.w	801ae24 <_svfiprintf_r+0x28>
 801afcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801afce:	b01d      	add	sp, #116	; 0x74
 801afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afd4:	ab03      	add	r3, sp, #12
 801afd6:	462a      	mov	r2, r5
 801afd8:	a904      	add	r1, sp, #16
 801afda:	4638      	mov	r0, r7
 801afdc:	9300      	str	r3, [sp, #0]
 801afde:	4b05      	ldr	r3, [pc, #20]	; (801aff4 <_svfiprintf_r+0x1f8>)
 801afe0:	f000 f87c 	bl	801b0dc <_printf_i>
 801afe4:	e7eb      	b.n	801afbe <_svfiprintf_r+0x1c2>
 801afe6:	bf00      	nop
 801afe8:	0801bc38 	.word	0x0801bc38
 801afec:	0801bc42 	.word	0x0801bc42
 801aff0:	00000000 	.word	0x00000000
 801aff4:	0801ad45 	.word	0x0801ad45
 801aff8:	0801bc3e 	.word	0x0801bc3e

0801affc <_printf_common>:
 801affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b000:	4616      	mov	r6, r2
 801b002:	4699      	mov	r9, r3
 801b004:	688a      	ldr	r2, [r1, #8]
 801b006:	4607      	mov	r7, r0
 801b008:	690b      	ldr	r3, [r1, #16]
 801b00a:	460c      	mov	r4, r1
 801b00c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b010:	4293      	cmp	r3, r2
 801b012:	bfb8      	it	lt
 801b014:	4613      	movlt	r3, r2
 801b016:	6033      	str	r3, [r6, #0]
 801b018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b01c:	b10a      	cbz	r2, 801b022 <_printf_common+0x26>
 801b01e:	3301      	adds	r3, #1
 801b020:	6033      	str	r3, [r6, #0]
 801b022:	6823      	ldr	r3, [r4, #0]
 801b024:	0699      	lsls	r1, r3, #26
 801b026:	bf42      	ittt	mi
 801b028:	6833      	ldrmi	r3, [r6, #0]
 801b02a:	3302      	addmi	r3, #2
 801b02c:	6033      	strmi	r3, [r6, #0]
 801b02e:	6825      	ldr	r5, [r4, #0]
 801b030:	f015 0506 	ands.w	r5, r5, #6
 801b034:	d106      	bne.n	801b044 <_printf_common+0x48>
 801b036:	f104 0a19 	add.w	sl, r4, #25
 801b03a:	68e3      	ldr	r3, [r4, #12]
 801b03c:	6832      	ldr	r2, [r6, #0]
 801b03e:	1a9b      	subs	r3, r3, r2
 801b040:	42ab      	cmp	r3, r5
 801b042:	dc29      	bgt.n	801b098 <_printf_common+0x9c>
 801b044:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b048:	1e13      	subs	r3, r2, #0
 801b04a:	6822      	ldr	r2, [r4, #0]
 801b04c:	bf18      	it	ne
 801b04e:	2301      	movne	r3, #1
 801b050:	0692      	lsls	r2, r2, #26
 801b052:	d42e      	bmi.n	801b0b2 <_printf_common+0xb6>
 801b054:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b058:	4649      	mov	r1, r9
 801b05a:	4638      	mov	r0, r7
 801b05c:	47c0      	blx	r8
 801b05e:	3001      	adds	r0, #1
 801b060:	d021      	beq.n	801b0a6 <_printf_common+0xaa>
 801b062:	6823      	ldr	r3, [r4, #0]
 801b064:	341a      	adds	r4, #26
 801b066:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 801b06a:	f003 0306 	and.w	r3, r3, #6
 801b06e:	6832      	ldr	r2, [r6, #0]
 801b070:	2600      	movs	r6, #0
 801b072:	2b04      	cmp	r3, #4
 801b074:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801b078:	bf08      	it	eq
 801b07a:	1aad      	subeq	r5, r5, r2
 801b07c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801b080:	bf14      	ite	ne
 801b082:	2500      	movne	r5, #0
 801b084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b088:	4293      	cmp	r3, r2
 801b08a:	bfc4      	itt	gt
 801b08c:	1a9b      	subgt	r3, r3, r2
 801b08e:	18ed      	addgt	r5, r5, r3
 801b090:	42b5      	cmp	r5, r6
 801b092:	d11a      	bne.n	801b0ca <_printf_common+0xce>
 801b094:	2000      	movs	r0, #0
 801b096:	e008      	b.n	801b0aa <_printf_common+0xae>
 801b098:	2301      	movs	r3, #1
 801b09a:	4652      	mov	r2, sl
 801b09c:	4649      	mov	r1, r9
 801b09e:	4638      	mov	r0, r7
 801b0a0:	47c0      	blx	r8
 801b0a2:	3001      	adds	r0, #1
 801b0a4:	d103      	bne.n	801b0ae <_printf_common+0xb2>
 801b0a6:	f04f 30ff 	mov.w	r0, #4294967295
 801b0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0ae:	3501      	adds	r5, #1
 801b0b0:	e7c3      	b.n	801b03a <_printf_common+0x3e>
 801b0b2:	18e1      	adds	r1, r4, r3
 801b0b4:	1c5a      	adds	r2, r3, #1
 801b0b6:	2030      	movs	r0, #48	; 0x30
 801b0b8:	3302      	adds	r3, #2
 801b0ba:	4422      	add	r2, r4
 801b0bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b0c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b0c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b0c8:	e7c4      	b.n	801b054 <_printf_common+0x58>
 801b0ca:	2301      	movs	r3, #1
 801b0cc:	4622      	mov	r2, r4
 801b0ce:	4649      	mov	r1, r9
 801b0d0:	4638      	mov	r0, r7
 801b0d2:	47c0      	blx	r8
 801b0d4:	3001      	adds	r0, #1
 801b0d6:	d0e6      	beq.n	801b0a6 <_printf_common+0xaa>
 801b0d8:	3601      	adds	r6, #1
 801b0da:	e7d9      	b.n	801b090 <_printf_common+0x94>

0801b0dc <_printf_i>:
 801b0dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b0e0:	460c      	mov	r4, r1
 801b0e2:	4691      	mov	r9, r2
 801b0e4:	4680      	mov	r8, r0
 801b0e6:	469a      	mov	sl, r3
 801b0e8:	7e27      	ldrb	r7, [r4, #24]
 801b0ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b0ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b0f0:	2f78      	cmp	r7, #120	; 0x78
 801b0f2:	d807      	bhi.n	801b104 <_printf_i+0x28>
 801b0f4:	2f62      	cmp	r7, #98	; 0x62
 801b0f6:	d80a      	bhi.n	801b10e <_printf_i+0x32>
 801b0f8:	2f00      	cmp	r7, #0
 801b0fa:	f000 80d8 	beq.w	801b2ae <_printf_i+0x1d2>
 801b0fe:	2f58      	cmp	r7, #88	; 0x58
 801b100:	f000 80a3 	beq.w	801b24a <_printf_i+0x16e>
 801b104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b10c:	e03a      	b.n	801b184 <_printf_i+0xa8>
 801b10e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b112:	2b15      	cmp	r3, #21
 801b114:	d8f6      	bhi.n	801b104 <_printf_i+0x28>
 801b116:	a001      	add	r0, pc, #4	; (adr r0, 801b11c <_printf_i+0x40>)
 801b118:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b11c:	0801b175 	.word	0x0801b175
 801b120:	0801b189 	.word	0x0801b189
 801b124:	0801b105 	.word	0x0801b105
 801b128:	0801b105 	.word	0x0801b105
 801b12c:	0801b105 	.word	0x0801b105
 801b130:	0801b105 	.word	0x0801b105
 801b134:	0801b189 	.word	0x0801b189
 801b138:	0801b105 	.word	0x0801b105
 801b13c:	0801b105 	.word	0x0801b105
 801b140:	0801b105 	.word	0x0801b105
 801b144:	0801b105 	.word	0x0801b105
 801b148:	0801b295 	.word	0x0801b295
 801b14c:	0801b1b9 	.word	0x0801b1b9
 801b150:	0801b277 	.word	0x0801b277
 801b154:	0801b105 	.word	0x0801b105
 801b158:	0801b105 	.word	0x0801b105
 801b15c:	0801b2b7 	.word	0x0801b2b7
 801b160:	0801b105 	.word	0x0801b105
 801b164:	0801b1b9 	.word	0x0801b1b9
 801b168:	0801b105 	.word	0x0801b105
 801b16c:	0801b105 	.word	0x0801b105
 801b170:	0801b27f 	.word	0x0801b27f
 801b174:	680b      	ldr	r3, [r1, #0]
 801b176:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b17a:	1d1a      	adds	r2, r3, #4
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	600a      	str	r2, [r1, #0]
 801b180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b184:	2301      	movs	r3, #1
 801b186:	e0a3      	b.n	801b2d0 <_printf_i+0x1f4>
 801b188:	6825      	ldr	r5, [r4, #0]
 801b18a:	6808      	ldr	r0, [r1, #0]
 801b18c:	062e      	lsls	r6, r5, #24
 801b18e:	f100 0304 	add.w	r3, r0, #4
 801b192:	d50a      	bpl.n	801b1aa <_printf_i+0xce>
 801b194:	6805      	ldr	r5, [r0, #0]
 801b196:	600b      	str	r3, [r1, #0]
 801b198:	2d00      	cmp	r5, #0
 801b19a:	da03      	bge.n	801b1a4 <_printf_i+0xc8>
 801b19c:	232d      	movs	r3, #45	; 0x2d
 801b19e:	426d      	negs	r5, r5
 801b1a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b1a4:	485e      	ldr	r0, [pc, #376]	; (801b320 <_printf_i+0x244>)
 801b1a6:	230a      	movs	r3, #10
 801b1a8:	e019      	b.n	801b1de <_printf_i+0x102>
 801b1aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b1ae:	6805      	ldr	r5, [r0, #0]
 801b1b0:	600b      	str	r3, [r1, #0]
 801b1b2:	bf18      	it	ne
 801b1b4:	b22d      	sxthne	r5, r5
 801b1b6:	e7ef      	b.n	801b198 <_printf_i+0xbc>
 801b1b8:	680b      	ldr	r3, [r1, #0]
 801b1ba:	6825      	ldr	r5, [r4, #0]
 801b1bc:	1d18      	adds	r0, r3, #4
 801b1be:	6008      	str	r0, [r1, #0]
 801b1c0:	0628      	lsls	r0, r5, #24
 801b1c2:	d501      	bpl.n	801b1c8 <_printf_i+0xec>
 801b1c4:	681d      	ldr	r5, [r3, #0]
 801b1c6:	e002      	b.n	801b1ce <_printf_i+0xf2>
 801b1c8:	0669      	lsls	r1, r5, #25
 801b1ca:	d5fb      	bpl.n	801b1c4 <_printf_i+0xe8>
 801b1cc:	881d      	ldrh	r5, [r3, #0]
 801b1ce:	2f6f      	cmp	r7, #111	; 0x6f
 801b1d0:	4853      	ldr	r0, [pc, #332]	; (801b320 <_printf_i+0x244>)
 801b1d2:	bf0c      	ite	eq
 801b1d4:	2308      	moveq	r3, #8
 801b1d6:	230a      	movne	r3, #10
 801b1d8:	2100      	movs	r1, #0
 801b1da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b1de:	6866      	ldr	r6, [r4, #4]
 801b1e0:	2e00      	cmp	r6, #0
 801b1e2:	60a6      	str	r6, [r4, #8]
 801b1e4:	bfa2      	ittt	ge
 801b1e6:	6821      	ldrge	r1, [r4, #0]
 801b1e8:	f021 0104 	bicge.w	r1, r1, #4
 801b1ec:	6021      	strge	r1, [r4, #0]
 801b1ee:	b90d      	cbnz	r5, 801b1f4 <_printf_i+0x118>
 801b1f0:	2e00      	cmp	r6, #0
 801b1f2:	d04d      	beq.n	801b290 <_printf_i+0x1b4>
 801b1f4:	4616      	mov	r6, r2
 801b1f6:	fbb5 f1f3 	udiv	r1, r5, r3
 801b1fa:	fb03 5711 	mls	r7, r3, r1, r5
 801b1fe:	5dc7      	ldrb	r7, [r0, r7]
 801b200:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b204:	462f      	mov	r7, r5
 801b206:	460d      	mov	r5, r1
 801b208:	42bb      	cmp	r3, r7
 801b20a:	d9f4      	bls.n	801b1f6 <_printf_i+0x11a>
 801b20c:	2b08      	cmp	r3, #8
 801b20e:	d10b      	bne.n	801b228 <_printf_i+0x14c>
 801b210:	6823      	ldr	r3, [r4, #0]
 801b212:	07df      	lsls	r7, r3, #31
 801b214:	d508      	bpl.n	801b228 <_printf_i+0x14c>
 801b216:	6923      	ldr	r3, [r4, #16]
 801b218:	6861      	ldr	r1, [r4, #4]
 801b21a:	4299      	cmp	r1, r3
 801b21c:	bfde      	ittt	le
 801b21e:	2330      	movle	r3, #48	; 0x30
 801b220:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b224:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b228:	1b92      	subs	r2, r2, r6
 801b22a:	6122      	str	r2, [r4, #16]
 801b22c:	464b      	mov	r3, r9
 801b22e:	aa03      	add	r2, sp, #12
 801b230:	4621      	mov	r1, r4
 801b232:	4640      	mov	r0, r8
 801b234:	f8cd a000 	str.w	sl, [sp]
 801b238:	f7ff fee0 	bl	801affc <_printf_common>
 801b23c:	3001      	adds	r0, #1
 801b23e:	d14c      	bne.n	801b2da <_printf_i+0x1fe>
 801b240:	f04f 30ff 	mov.w	r0, #4294967295
 801b244:	b004      	add	sp, #16
 801b246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b24a:	4835      	ldr	r0, [pc, #212]	; (801b320 <_printf_i+0x244>)
 801b24c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b250:	6823      	ldr	r3, [r4, #0]
 801b252:	680e      	ldr	r6, [r1, #0]
 801b254:	061f      	lsls	r7, r3, #24
 801b256:	f856 5b04 	ldr.w	r5, [r6], #4
 801b25a:	600e      	str	r6, [r1, #0]
 801b25c:	d514      	bpl.n	801b288 <_printf_i+0x1ac>
 801b25e:	07d9      	lsls	r1, r3, #31
 801b260:	bf44      	itt	mi
 801b262:	f043 0320 	orrmi.w	r3, r3, #32
 801b266:	6023      	strmi	r3, [r4, #0]
 801b268:	b91d      	cbnz	r5, 801b272 <_printf_i+0x196>
 801b26a:	6823      	ldr	r3, [r4, #0]
 801b26c:	f023 0320 	bic.w	r3, r3, #32
 801b270:	6023      	str	r3, [r4, #0]
 801b272:	2310      	movs	r3, #16
 801b274:	e7b0      	b.n	801b1d8 <_printf_i+0xfc>
 801b276:	6823      	ldr	r3, [r4, #0]
 801b278:	f043 0320 	orr.w	r3, r3, #32
 801b27c:	6023      	str	r3, [r4, #0]
 801b27e:	2378      	movs	r3, #120	; 0x78
 801b280:	4828      	ldr	r0, [pc, #160]	; (801b324 <_printf_i+0x248>)
 801b282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b286:	e7e3      	b.n	801b250 <_printf_i+0x174>
 801b288:	065e      	lsls	r6, r3, #25
 801b28a:	bf48      	it	mi
 801b28c:	b2ad      	uxthmi	r5, r5
 801b28e:	e7e6      	b.n	801b25e <_printf_i+0x182>
 801b290:	4616      	mov	r6, r2
 801b292:	e7bb      	b.n	801b20c <_printf_i+0x130>
 801b294:	680b      	ldr	r3, [r1, #0]
 801b296:	6826      	ldr	r6, [r4, #0]
 801b298:	1d1d      	adds	r5, r3, #4
 801b29a:	6960      	ldr	r0, [r4, #20]
 801b29c:	600d      	str	r5, [r1, #0]
 801b29e:	0635      	lsls	r5, r6, #24
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	d501      	bpl.n	801b2a8 <_printf_i+0x1cc>
 801b2a4:	6018      	str	r0, [r3, #0]
 801b2a6:	e002      	b.n	801b2ae <_printf_i+0x1d2>
 801b2a8:	0671      	lsls	r1, r6, #25
 801b2aa:	d5fb      	bpl.n	801b2a4 <_printf_i+0x1c8>
 801b2ac:	8018      	strh	r0, [r3, #0]
 801b2ae:	2300      	movs	r3, #0
 801b2b0:	4616      	mov	r6, r2
 801b2b2:	6123      	str	r3, [r4, #16]
 801b2b4:	e7ba      	b.n	801b22c <_printf_i+0x150>
 801b2b6:	680b      	ldr	r3, [r1, #0]
 801b2b8:	1d1a      	adds	r2, r3, #4
 801b2ba:	600a      	str	r2, [r1, #0]
 801b2bc:	2100      	movs	r1, #0
 801b2be:	681e      	ldr	r6, [r3, #0]
 801b2c0:	6862      	ldr	r2, [r4, #4]
 801b2c2:	4630      	mov	r0, r6
 801b2c4:	f000 f830 	bl	801b328 <memchr>
 801b2c8:	b108      	cbz	r0, 801b2ce <_printf_i+0x1f2>
 801b2ca:	1b80      	subs	r0, r0, r6
 801b2cc:	6060      	str	r0, [r4, #4]
 801b2ce:	6863      	ldr	r3, [r4, #4]
 801b2d0:	6123      	str	r3, [r4, #16]
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2d8:	e7a8      	b.n	801b22c <_printf_i+0x150>
 801b2da:	6923      	ldr	r3, [r4, #16]
 801b2dc:	4632      	mov	r2, r6
 801b2de:	4649      	mov	r1, r9
 801b2e0:	4640      	mov	r0, r8
 801b2e2:	47d0      	blx	sl
 801b2e4:	3001      	adds	r0, #1
 801b2e6:	d0ab      	beq.n	801b240 <_printf_i+0x164>
 801b2e8:	6823      	ldr	r3, [r4, #0]
 801b2ea:	079b      	lsls	r3, r3, #30
 801b2ec:	d413      	bmi.n	801b316 <_printf_i+0x23a>
 801b2ee:	68e0      	ldr	r0, [r4, #12]
 801b2f0:	9b03      	ldr	r3, [sp, #12]
 801b2f2:	4298      	cmp	r0, r3
 801b2f4:	bfb8      	it	lt
 801b2f6:	4618      	movlt	r0, r3
 801b2f8:	e7a4      	b.n	801b244 <_printf_i+0x168>
 801b2fa:	2301      	movs	r3, #1
 801b2fc:	4632      	mov	r2, r6
 801b2fe:	4649      	mov	r1, r9
 801b300:	4640      	mov	r0, r8
 801b302:	47d0      	blx	sl
 801b304:	3001      	adds	r0, #1
 801b306:	d09b      	beq.n	801b240 <_printf_i+0x164>
 801b308:	3501      	adds	r5, #1
 801b30a:	68e3      	ldr	r3, [r4, #12]
 801b30c:	9903      	ldr	r1, [sp, #12]
 801b30e:	1a5b      	subs	r3, r3, r1
 801b310:	42ab      	cmp	r3, r5
 801b312:	dcf2      	bgt.n	801b2fa <_printf_i+0x21e>
 801b314:	e7eb      	b.n	801b2ee <_printf_i+0x212>
 801b316:	2500      	movs	r5, #0
 801b318:	f104 0619 	add.w	r6, r4, #25
 801b31c:	e7f5      	b.n	801b30a <_printf_i+0x22e>
 801b31e:	bf00      	nop
 801b320:	0801bc49 	.word	0x0801bc49
 801b324:	0801bc5a 	.word	0x0801bc5a

0801b328 <memchr>:
 801b328:	b2c9      	uxtb	r1, r1
 801b32a:	4402      	add	r2, r0
 801b32c:	b510      	push	{r4, lr}
 801b32e:	4290      	cmp	r0, r2
 801b330:	4603      	mov	r3, r0
 801b332:	d101      	bne.n	801b338 <memchr+0x10>
 801b334:	2300      	movs	r3, #0
 801b336:	e003      	b.n	801b340 <memchr+0x18>
 801b338:	781c      	ldrb	r4, [r3, #0]
 801b33a:	3001      	adds	r0, #1
 801b33c:	428c      	cmp	r4, r1
 801b33e:	d1f6      	bne.n	801b32e <memchr+0x6>
 801b340:	4618      	mov	r0, r3
 801b342:	bd10      	pop	{r4, pc}

0801b344 <memmove>:
 801b344:	4288      	cmp	r0, r1
 801b346:	b510      	push	{r4, lr}
 801b348:	eb01 0402 	add.w	r4, r1, r2
 801b34c:	d902      	bls.n	801b354 <memmove+0x10>
 801b34e:	4284      	cmp	r4, r0
 801b350:	4623      	mov	r3, r4
 801b352:	d807      	bhi.n	801b364 <memmove+0x20>
 801b354:	1e43      	subs	r3, r0, #1
 801b356:	42a1      	cmp	r1, r4
 801b358:	d008      	beq.n	801b36c <memmove+0x28>
 801b35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b362:	e7f8      	b.n	801b356 <memmove+0x12>
 801b364:	4402      	add	r2, r0
 801b366:	4601      	mov	r1, r0
 801b368:	428a      	cmp	r2, r1
 801b36a:	d100      	bne.n	801b36e <memmove+0x2a>
 801b36c:	bd10      	pop	{r4, pc}
 801b36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b376:	e7f7      	b.n	801b368 <memmove+0x24>

0801b378 <_free_r>:
 801b378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b37a:	2900      	cmp	r1, #0
 801b37c:	d047      	beq.n	801b40e <_free_r+0x96>
 801b37e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b382:	1f0c      	subs	r4, r1, #4
 801b384:	9001      	str	r0, [sp, #4]
 801b386:	2b00      	cmp	r3, #0
 801b388:	bfb8      	it	lt
 801b38a:	18e4      	addlt	r4, r4, r3
 801b38c:	f000 f8d4 	bl	801b538 <__malloc_lock>
 801b390:	4a20      	ldr	r2, [pc, #128]	; (801b414 <_free_r+0x9c>)
 801b392:	9801      	ldr	r0, [sp, #4]
 801b394:	6813      	ldr	r3, [r2, #0]
 801b396:	4615      	mov	r5, r2
 801b398:	b933      	cbnz	r3, 801b3a8 <_free_r+0x30>
 801b39a:	6063      	str	r3, [r4, #4]
 801b39c:	6014      	str	r4, [r2, #0]
 801b39e:	b003      	add	sp, #12
 801b3a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b3a4:	f000 b8ce 	b.w	801b544 <__malloc_unlock>
 801b3a8:	42a3      	cmp	r3, r4
 801b3aa:	d90b      	bls.n	801b3c4 <_free_r+0x4c>
 801b3ac:	6821      	ldr	r1, [r4, #0]
 801b3ae:	1862      	adds	r2, r4, r1
 801b3b0:	4293      	cmp	r3, r2
 801b3b2:	bf02      	ittt	eq
 801b3b4:	681a      	ldreq	r2, [r3, #0]
 801b3b6:	685b      	ldreq	r3, [r3, #4]
 801b3b8:	1852      	addeq	r2, r2, r1
 801b3ba:	6063      	str	r3, [r4, #4]
 801b3bc:	bf08      	it	eq
 801b3be:	6022      	streq	r2, [r4, #0]
 801b3c0:	602c      	str	r4, [r5, #0]
 801b3c2:	e7ec      	b.n	801b39e <_free_r+0x26>
 801b3c4:	461a      	mov	r2, r3
 801b3c6:	685b      	ldr	r3, [r3, #4]
 801b3c8:	b10b      	cbz	r3, 801b3ce <_free_r+0x56>
 801b3ca:	42a3      	cmp	r3, r4
 801b3cc:	d9fa      	bls.n	801b3c4 <_free_r+0x4c>
 801b3ce:	6811      	ldr	r1, [r2, #0]
 801b3d0:	1855      	adds	r5, r2, r1
 801b3d2:	42a5      	cmp	r5, r4
 801b3d4:	d10b      	bne.n	801b3ee <_free_r+0x76>
 801b3d6:	6824      	ldr	r4, [r4, #0]
 801b3d8:	4421      	add	r1, r4
 801b3da:	1854      	adds	r4, r2, r1
 801b3dc:	6011      	str	r1, [r2, #0]
 801b3de:	42a3      	cmp	r3, r4
 801b3e0:	d1dd      	bne.n	801b39e <_free_r+0x26>
 801b3e2:	681c      	ldr	r4, [r3, #0]
 801b3e4:	685b      	ldr	r3, [r3, #4]
 801b3e6:	4421      	add	r1, r4
 801b3e8:	6053      	str	r3, [r2, #4]
 801b3ea:	6011      	str	r1, [r2, #0]
 801b3ec:	e7d7      	b.n	801b39e <_free_r+0x26>
 801b3ee:	d902      	bls.n	801b3f6 <_free_r+0x7e>
 801b3f0:	230c      	movs	r3, #12
 801b3f2:	6003      	str	r3, [r0, #0]
 801b3f4:	e7d3      	b.n	801b39e <_free_r+0x26>
 801b3f6:	6825      	ldr	r5, [r4, #0]
 801b3f8:	1961      	adds	r1, r4, r5
 801b3fa:	428b      	cmp	r3, r1
 801b3fc:	bf02      	ittt	eq
 801b3fe:	6819      	ldreq	r1, [r3, #0]
 801b400:	685b      	ldreq	r3, [r3, #4]
 801b402:	1949      	addeq	r1, r1, r5
 801b404:	6063      	str	r3, [r4, #4]
 801b406:	bf08      	it	eq
 801b408:	6021      	streq	r1, [r4, #0]
 801b40a:	6054      	str	r4, [r2, #4]
 801b40c:	e7c7      	b.n	801b39e <_free_r+0x26>
 801b40e:	b003      	add	sp, #12
 801b410:	bd30      	pop	{r4, r5, pc}
 801b412:	bf00      	nop
 801b414:	20001e38 	.word	0x20001e38

0801b418 <_malloc_r>:
 801b418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b41a:	1ccd      	adds	r5, r1, #3
 801b41c:	4606      	mov	r6, r0
 801b41e:	f025 0503 	bic.w	r5, r5, #3
 801b422:	3508      	adds	r5, #8
 801b424:	2d0c      	cmp	r5, #12
 801b426:	bf38      	it	cc
 801b428:	250c      	movcc	r5, #12
 801b42a:	2d00      	cmp	r5, #0
 801b42c:	db01      	blt.n	801b432 <_malloc_r+0x1a>
 801b42e:	42a9      	cmp	r1, r5
 801b430:	d903      	bls.n	801b43a <_malloc_r+0x22>
 801b432:	230c      	movs	r3, #12
 801b434:	6033      	str	r3, [r6, #0]
 801b436:	2000      	movs	r0, #0
 801b438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b43a:	f000 f87d 	bl	801b538 <__malloc_lock>
 801b43e:	4921      	ldr	r1, [pc, #132]	; (801b4c4 <_malloc_r+0xac>)
 801b440:	680a      	ldr	r2, [r1, #0]
 801b442:	4614      	mov	r4, r2
 801b444:	b99c      	cbnz	r4, 801b46e <_malloc_r+0x56>
 801b446:	4f20      	ldr	r7, [pc, #128]	; (801b4c8 <_malloc_r+0xb0>)
 801b448:	683b      	ldr	r3, [r7, #0]
 801b44a:	b923      	cbnz	r3, 801b456 <_malloc_r+0x3e>
 801b44c:	4621      	mov	r1, r4
 801b44e:	4630      	mov	r0, r6
 801b450:	f000 f862 	bl	801b518 <_sbrk_r>
 801b454:	6038      	str	r0, [r7, #0]
 801b456:	4629      	mov	r1, r5
 801b458:	4630      	mov	r0, r6
 801b45a:	f000 f85d 	bl	801b518 <_sbrk_r>
 801b45e:	1c43      	adds	r3, r0, #1
 801b460:	d123      	bne.n	801b4aa <_malloc_r+0x92>
 801b462:	230c      	movs	r3, #12
 801b464:	4630      	mov	r0, r6
 801b466:	6033      	str	r3, [r6, #0]
 801b468:	f000 f86c 	bl	801b544 <__malloc_unlock>
 801b46c:	e7e3      	b.n	801b436 <_malloc_r+0x1e>
 801b46e:	6823      	ldr	r3, [r4, #0]
 801b470:	1b5b      	subs	r3, r3, r5
 801b472:	d417      	bmi.n	801b4a4 <_malloc_r+0x8c>
 801b474:	2b0b      	cmp	r3, #11
 801b476:	d903      	bls.n	801b480 <_malloc_r+0x68>
 801b478:	6023      	str	r3, [r4, #0]
 801b47a:	441c      	add	r4, r3
 801b47c:	6025      	str	r5, [r4, #0]
 801b47e:	e004      	b.n	801b48a <_malloc_r+0x72>
 801b480:	6863      	ldr	r3, [r4, #4]
 801b482:	42a2      	cmp	r2, r4
 801b484:	bf0c      	ite	eq
 801b486:	600b      	streq	r3, [r1, #0]
 801b488:	6053      	strne	r3, [r2, #4]
 801b48a:	4630      	mov	r0, r6
 801b48c:	f000 f85a 	bl	801b544 <__malloc_unlock>
 801b490:	f104 000b 	add.w	r0, r4, #11
 801b494:	1d23      	adds	r3, r4, #4
 801b496:	f020 0007 	bic.w	r0, r0, #7
 801b49a:	1ac2      	subs	r2, r0, r3
 801b49c:	d0cc      	beq.n	801b438 <_malloc_r+0x20>
 801b49e:	1a1b      	subs	r3, r3, r0
 801b4a0:	50a3      	str	r3, [r4, r2]
 801b4a2:	e7c9      	b.n	801b438 <_malloc_r+0x20>
 801b4a4:	4622      	mov	r2, r4
 801b4a6:	6864      	ldr	r4, [r4, #4]
 801b4a8:	e7cc      	b.n	801b444 <_malloc_r+0x2c>
 801b4aa:	1cc4      	adds	r4, r0, #3
 801b4ac:	f024 0403 	bic.w	r4, r4, #3
 801b4b0:	42a0      	cmp	r0, r4
 801b4b2:	d0e3      	beq.n	801b47c <_malloc_r+0x64>
 801b4b4:	1a21      	subs	r1, r4, r0
 801b4b6:	4630      	mov	r0, r6
 801b4b8:	f000 f82e 	bl	801b518 <_sbrk_r>
 801b4bc:	3001      	adds	r0, #1
 801b4be:	d1dd      	bne.n	801b47c <_malloc_r+0x64>
 801b4c0:	e7cf      	b.n	801b462 <_malloc_r+0x4a>
 801b4c2:	bf00      	nop
 801b4c4:	20001e38 	.word	0x20001e38
 801b4c8:	20001e3c 	.word	0x20001e3c

0801b4cc <_realloc_r>:
 801b4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4ce:	4607      	mov	r7, r0
 801b4d0:	4614      	mov	r4, r2
 801b4d2:	460e      	mov	r6, r1
 801b4d4:	b921      	cbnz	r1, 801b4e0 <_realloc_r+0x14>
 801b4d6:	4611      	mov	r1, r2
 801b4d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b4dc:	f7ff bf9c 	b.w	801b418 <_malloc_r>
 801b4e0:	b922      	cbnz	r2, 801b4ec <_realloc_r+0x20>
 801b4e2:	4625      	mov	r5, r4
 801b4e4:	f7ff ff48 	bl	801b378 <_free_r>
 801b4e8:	4628      	mov	r0, r5
 801b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4ec:	f000 f830 	bl	801b550 <_malloc_usable_size_r>
 801b4f0:	42a0      	cmp	r0, r4
 801b4f2:	d20f      	bcs.n	801b514 <_realloc_r+0x48>
 801b4f4:	4621      	mov	r1, r4
 801b4f6:	4638      	mov	r0, r7
 801b4f8:	f7ff ff8e 	bl	801b418 <_malloc_r>
 801b4fc:	4605      	mov	r5, r0
 801b4fe:	2800      	cmp	r0, #0
 801b500:	d0f2      	beq.n	801b4e8 <_realloc_r+0x1c>
 801b502:	4631      	mov	r1, r6
 801b504:	4622      	mov	r2, r4
 801b506:	f7ff fbd3 	bl	801acb0 <memcpy>
 801b50a:	4631      	mov	r1, r6
 801b50c:	4638      	mov	r0, r7
 801b50e:	f7ff ff33 	bl	801b378 <_free_r>
 801b512:	e7e9      	b.n	801b4e8 <_realloc_r+0x1c>
 801b514:	4635      	mov	r5, r6
 801b516:	e7e7      	b.n	801b4e8 <_realloc_r+0x1c>

0801b518 <_sbrk_r>:
 801b518:	b538      	push	{r3, r4, r5, lr}
 801b51a:	2300      	movs	r3, #0
 801b51c:	4d05      	ldr	r5, [pc, #20]	; (801b534 <_sbrk_r+0x1c>)
 801b51e:	4604      	mov	r4, r0
 801b520:	4608      	mov	r0, r1
 801b522:	602b      	str	r3, [r5, #0]
 801b524:	f7e7 f950 	bl	80027c8 <_sbrk>
 801b528:	1c43      	adds	r3, r0, #1
 801b52a:	d102      	bne.n	801b532 <_sbrk_r+0x1a>
 801b52c:	682b      	ldr	r3, [r5, #0]
 801b52e:	b103      	cbz	r3, 801b532 <_sbrk_r+0x1a>
 801b530:	6023      	str	r3, [r4, #0]
 801b532:	bd38      	pop	{r3, r4, r5, pc}
 801b534:	200029b8 	.word	0x200029b8

0801b538 <__malloc_lock>:
 801b538:	4801      	ldr	r0, [pc, #4]	; (801b540 <__malloc_lock+0x8>)
 801b53a:	f000 b811 	b.w	801b560 <__retarget_lock_acquire_recursive>
 801b53e:	bf00      	nop
 801b540:	200029c0 	.word	0x200029c0

0801b544 <__malloc_unlock>:
 801b544:	4801      	ldr	r0, [pc, #4]	; (801b54c <__malloc_unlock+0x8>)
 801b546:	f000 b80c 	b.w	801b562 <__retarget_lock_release_recursive>
 801b54a:	bf00      	nop
 801b54c:	200029c0 	.word	0x200029c0

0801b550 <_malloc_usable_size_r>:
 801b550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b554:	1f18      	subs	r0, r3, #4
 801b556:	2b00      	cmp	r3, #0
 801b558:	bfbc      	itt	lt
 801b55a:	580b      	ldrlt	r3, [r1, r0]
 801b55c:	18c0      	addlt	r0, r0, r3
 801b55e:	4770      	bx	lr

0801b560 <__retarget_lock_acquire_recursive>:
 801b560:	4770      	bx	lr

0801b562 <__retarget_lock_release_recursive>:
 801b562:	4770      	bx	lr

0801b564 <_init>:
 801b564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b566:	bf00      	nop
 801b568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b56a:	bc08      	pop	{r3}
 801b56c:	469e      	mov	lr, r3
 801b56e:	4770      	bx	lr

0801b570 <_fini>:
 801b570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b572:	bf00      	nop
 801b574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b576:	bc08      	pop	{r3}
 801b578:	469e      	mov	lr, r3
 801b57a:	4770      	bx	lr
