
STM32WobbleBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057ec  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005a20  08005a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005b70  08005b70  00015b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005b74  08005b74  00015b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  08005b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000100  2000000c  08005b81  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000010c  08005b81  0002010c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001eb79  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f23  00000000  00000000  0003ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000df0  00000000  00000000  00041ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d08  00000000  00000000  000428d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003156e  00000000  00000000  000435d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000139af  00000000  00000000  00074b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013515f  00000000  00000000  000884f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001bd654  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003974  00000000  00000000  001bd6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	08005a08 	.word	0x08005a08

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	08005a08 	.word	0x08005a08

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295
 8000294:	f04f 30ff 	movne.w	r0, #4294967295
 8000298:	f000 b980 	b.w	800059c <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002b8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ba:	4604      	mov	r4, r0
 80002bc:	4688      	mov	r8, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	f040 8084 	bne.w	80003cc <__udivmoddi4+0x118>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4617      	mov	r7, r2
 80002c8:	d943      	bls.n	8000352 <__udivmoddi4+0x9e>
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	b142      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002d0:	f1c2 0020 	rsb	r0, r2, #32
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	fa24 f000 	lsr.w	r0, r4, r0
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea40 0801 	orr.w	r8, r0, r1
 80002e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002e6:	0c23      	lsrs	r3, r4, #16
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fbb8 f6fc 	udiv	r6, r8, ip
 80002f0:	fb0c 8116 	mls	r1, ip, r6, r8
 80002f4:	fb06 f00e 	mul.w	r0, r6, lr
 80002f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002fc:	4298      	cmp	r0, r3
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x5c>
 8000300:	18fb      	adds	r3, r7, r3
 8000302:	f106 31ff 	add.w	r1, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x5a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 8131 	bhi.w	8000570 <__udivmoddi4+0x2bc>
 800030e:	460e      	mov	r6, r1
 8000310:	1a19      	subs	r1, r3, r0
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fc 	udiv	r0, r1, ip
 8000318:	fb0c 1110 	mls	r1, ip, r0, r1
 800031c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000320:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000324:	45a6      	cmp	lr, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x84>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x82>
 8000330:	45a6      	cmp	lr, r4
 8000332:	f200 811a 	bhi.w	800056a <__udivmoddi4+0x2b6>
 8000336:	4618      	mov	r0, r3
 8000338:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033c:	eba4 040e 	sub.w	r4, r4, lr
 8000340:	2600      	movs	r6, #0
 8000342:	b11d      	cbz	r5, 800034c <__udivmoddi4+0x98>
 8000344:	40d4      	lsrs	r4, r2
 8000346:	2300      	movs	r3, #0
 8000348:	e9c5 4300 	strd	r4, r3, [r5]
 800034c:	4631      	mov	r1, r6
 800034e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000352:	b902      	cbnz	r2, 8000356 <__udivmoddi4+0xa2>
 8000354:	deff      	udf	#255	; 0xff
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	2a00      	cmp	r2, #0
 800035c:	d152      	bne.n	8000404 <__udivmoddi4+0x150>
 800035e:	1bcb      	subs	r3, r1, r7
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	fa1f f887 	uxth.w	r8, r7
 8000368:	2601      	movs	r6, #1
 800036a:	0c21      	lsrs	r1, r4, #16
 800036c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000370:	fb0e 301c 	mls	r0, lr, ip, r3
 8000374:	fb08 f90c 	mul.w	r9, r8, ip
 8000378:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800037c:	4589      	cmp	r9, r1
 800037e:	d90b      	bls.n	8000398 <__udivmoddi4+0xe4>
 8000380:	1879      	adds	r1, r7, r1
 8000382:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000386:	bf2c      	ite	cs
 8000388:	2001      	movcs	r0, #1
 800038a:	2000      	movcc	r0, #0
 800038c:	4589      	cmp	r9, r1
 800038e:	d902      	bls.n	8000396 <__udivmoddi4+0xe2>
 8000390:	2800      	cmp	r0, #0
 8000392:	f000 80f0 	beq.w	8000576 <__udivmoddi4+0x2c2>
 8000396:	469c      	mov	ip, r3
 8000398:	eba1 0109 	sub.w	r1, r1, r9
 800039c:	b2a3      	uxth	r3, r4
 800039e:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a6:	fb08 f800 	mul.w	r8, r8, r0
 80003aa:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003ae:	45a0      	cmp	r8, r4
 80003b0:	d907      	bls.n	80003c2 <__udivmoddi4+0x10e>
 80003b2:	193c      	adds	r4, r7, r4
 80003b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b8:	d202      	bcs.n	80003c0 <__udivmoddi4+0x10c>
 80003ba:	45a0      	cmp	r8, r4
 80003bc:	f200 80d2 	bhi.w	8000564 <__udivmoddi4+0x2b0>
 80003c0:	4618      	mov	r0, r3
 80003c2:	eba4 0408 	sub.w	r4, r4, r8
 80003c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ca:	e7ba      	b.n	8000342 <__udivmoddi4+0x8e>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d909      	bls.n	80003e4 <__udivmoddi4+0x130>
 80003d0:	2d00      	cmp	r5, #0
 80003d2:	f000 80be 	beq.w	8000552 <__udivmoddi4+0x29e>
 80003d6:	2600      	movs	r6, #0
 80003d8:	e9c5 0100 	strd	r0, r1, [r5]
 80003dc:	4630      	mov	r0, r6
 80003de:	4631      	mov	r1, r6
 80003e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003e4:	fab3 f683 	clz	r6, r3
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d14d      	bne.n	8000488 <__udivmoddi4+0x1d4>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f0c0 80b3 	bcc.w	8000558 <__udivmoddi4+0x2a4>
 80003f2:	4282      	cmp	r2, r0
 80003f4:	f240 80b0 	bls.w	8000558 <__udivmoddi4+0x2a4>
 80003f8:	4630      	mov	r0, r6
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a6      	beq.n	800034c <__udivmoddi4+0x98>
 80003fe:	e9c5 4800 	strd	r4, r8, [r5]
 8000402:	e7a3      	b.n	800034c <__udivmoddi4+0x98>
 8000404:	4097      	lsls	r7, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa01 f002 	lsl.w	r0, r1, r2
 800040e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000412:	40d9      	lsrs	r1, r3
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	fa1f f887 	uxth.w	r8, r7
 800041c:	4094      	lsls	r4, r2
 800041e:	4303      	orrs	r3, r0
 8000420:	fbb1 f0fe 	udiv	r0, r1, lr
 8000424:	0c1e      	lsrs	r6, r3, #16
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	fb00 fc08 	mul.w	ip, r0, r8
 800042e:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000432:	458c      	cmp	ip, r1
 8000434:	d90e      	bls.n	8000454 <__udivmoddi4+0x1a0>
 8000436:	1879      	adds	r1, r7, r1
 8000438:	f100 36ff 	add.w	r6, r0, #4294967295
 800043c:	bf2c      	ite	cs
 800043e:	f04f 0901 	movcs.w	r9, #1
 8000442:	f04f 0900 	movcc.w	r9, #0
 8000446:	458c      	cmp	ip, r1
 8000448:	d903      	bls.n	8000452 <__udivmoddi4+0x19e>
 800044a:	f1b9 0f00 	cmp.w	r9, #0
 800044e:	f000 8096 	beq.w	800057e <__udivmoddi4+0x2ca>
 8000452:	4630      	mov	r0, r6
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	b29b      	uxth	r3, r3
 800045a:	fbb1 f6fe 	udiv	r6, r1, lr
 800045e:	fb0e 1116 	mls	r1, lr, r6, r1
 8000462:	fb06 fc08 	mul.w	ip, r6, r8
 8000466:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800046a:	458c      	cmp	ip, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x1ca>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f106 33ff 	add.w	r3, r6, #4294967295
 8000474:	d202      	bcs.n	800047c <__udivmoddi4+0x1c8>
 8000476:	458c      	cmp	ip, r1
 8000478:	f200 8088 	bhi.w	800058c <__udivmoddi4+0x2d8>
 800047c:	461e      	mov	r6, r3
 800047e:	eba1 030c 	sub.w	r3, r1, ip
 8000482:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000486:	e770      	b.n	800036a <__udivmoddi4+0xb6>
 8000488:	f1c6 0720 	rsb	r7, r6, #32
 800048c:	fa03 f406 	lsl.w	r4, r3, r6
 8000490:	fa02 fc06 	lsl.w	ip, r2, r6
 8000494:	fa01 fe06 	lsl.w	lr, r1, r6
 8000498:	40fa      	lsrs	r2, r7
 800049a:	fa20 f807 	lsr.w	r8, r0, r7
 800049e:	40f9      	lsrs	r1, r7
 80004a0:	fa00 f306 	lsl.w	r3, r0, r6
 80004a4:	4322      	orrs	r2, r4
 80004a6:	ea48 040e 	orr.w	r4, r8, lr
 80004aa:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80004ae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b2:	fa1f f982 	uxth.w	r9, r2
 80004b6:	fbb1 faf8 	udiv	sl, r1, r8
 80004ba:	fb08 111a 	mls	r1, r8, sl, r1
 80004be:	fb0a f009 	mul.w	r0, sl, r9
 80004c2:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 80004c6:	4570      	cmp	r0, lr
 80004c8:	d90e      	bls.n	80004e8 <__udivmoddi4+0x234>
 80004ca:	eb12 0e0e 	adds.w	lr, r2, lr
 80004ce:	f10a 31ff 	add.w	r1, sl, #4294967295
 80004d2:	bf2c      	ite	cs
 80004d4:	f04f 0b01 	movcs.w	fp, #1
 80004d8:	f04f 0b00 	movcc.w	fp, #0
 80004dc:	4570      	cmp	r0, lr
 80004de:	d902      	bls.n	80004e6 <__udivmoddi4+0x232>
 80004e0:	f1bb 0f00 	cmp.w	fp, #0
 80004e4:	d04e      	beq.n	8000584 <__udivmoddi4+0x2d0>
 80004e6:	468a      	mov	sl, r1
 80004e8:	ebae 0e00 	sub.w	lr, lr, r0
 80004ec:	b2a4      	uxth	r4, r4
 80004ee:	fbbe f0f8 	udiv	r0, lr, r8
 80004f2:	fb08 ee10 	mls	lr, r8, r0, lr
 80004f6:	fb00 f909 	mul.w	r9, r0, r9
 80004fa:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004fe:	45f1      	cmp	r9, lr
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x25e>
 8000502:	eb12 0e0e 	adds.w	lr, r2, lr
 8000506:	f100 31ff 	add.w	r1, r0, #4294967295
 800050a:	d201      	bcs.n	8000510 <__udivmoddi4+0x25c>
 800050c:	45f1      	cmp	r9, lr
 800050e:	d840      	bhi.n	8000592 <__udivmoddi4+0x2de>
 8000510:	4608      	mov	r0, r1
 8000512:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000516:	ebae 0e09 	sub.w	lr, lr, r9
 800051a:	fba0 890c 	umull	r8, r9, r0, ip
 800051e:	45ce      	cmp	lr, r9
 8000520:	4641      	mov	r1, r8
 8000522:	464c      	mov	r4, r9
 8000524:	d302      	bcc.n	800052c <__udivmoddi4+0x278>
 8000526:	d106      	bne.n	8000536 <__udivmoddi4+0x282>
 8000528:	4543      	cmp	r3, r8
 800052a:	d204      	bcs.n	8000536 <__udivmoddi4+0x282>
 800052c:	3801      	subs	r0, #1
 800052e:	ebb8 010c 	subs.w	r1, r8, ip
 8000532:	eb69 0402 	sbc.w	r4, r9, r2
 8000536:	b37d      	cbz	r5, 8000598 <__udivmoddi4+0x2e4>
 8000538:	1a5a      	subs	r2, r3, r1
 800053a:	eb6e 0e04 	sbc.w	lr, lr, r4
 800053e:	40f2      	lsrs	r2, r6
 8000540:	fa0e f707 	lsl.w	r7, lr, r7
 8000544:	fa2e f306 	lsr.w	r3, lr, r6
 8000548:	2600      	movs	r6, #0
 800054a:	4317      	orrs	r7, r2
 800054c:	e9c5 7300 	strd	r7, r3, [r5]
 8000550:	e6fc      	b.n	800034c <__udivmoddi4+0x98>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e6f9      	b.n	800034c <__udivmoddi4+0x98>
 8000558:	1a84      	subs	r4, r0, r2
 800055a:	eb61 0103 	sbc.w	r1, r1, r3
 800055e:	2001      	movs	r0, #1
 8000560:	4688      	mov	r8, r1
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x146>
 8000564:	3802      	subs	r0, #2
 8000566:	443c      	add	r4, r7
 8000568:	e72b      	b.n	80003c2 <__udivmoddi4+0x10e>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e6e3      	b.n	8000338 <__udivmoddi4+0x84>
 8000570:	3e02      	subs	r6, #2
 8000572:	443b      	add	r3, r7
 8000574:	e6cc      	b.n	8000310 <__udivmoddi4+0x5c>
 8000576:	f1ac 0c02 	sub.w	ip, ip, #2
 800057a:	4439      	add	r1, r7
 800057c:	e70c      	b.n	8000398 <__udivmoddi4+0xe4>
 800057e:	3802      	subs	r0, #2
 8000580:	4439      	add	r1, r7
 8000582:	e767      	b.n	8000454 <__udivmoddi4+0x1a0>
 8000584:	f1aa 0a02 	sub.w	sl, sl, #2
 8000588:	4496      	add	lr, r2
 800058a:	e7ad      	b.n	80004e8 <__udivmoddi4+0x234>
 800058c:	3e02      	subs	r6, #2
 800058e:	4439      	add	r1, r7
 8000590:	e775      	b.n	800047e <__udivmoddi4+0x1ca>
 8000592:	3802      	subs	r0, #2
 8000594:	4496      	add	lr, r2
 8000596:	e7bc      	b.n	8000512 <__udivmoddi4+0x25e>
 8000598:	462e      	mov	r6, r5
 800059a:	e6d7      	b.n	800034c <__udivmoddi4+0x98>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005bc:	4a2a      	ldr	r2, [pc, #168]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005c6:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005da:	4a23      	ldr	r2, [pc, #140]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <MX_GPIO_Init+0xc8>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <MX_GPIO_Init+0xc8>)
 8000604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000608:	f003 0301 	and.w	r3, r3, #1
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2180      	movs	r1, #128	; 0x80
 8000614:	4815      	ldr	r0, [pc, #84]	; (800066c <MX_GPIO_Init+0xcc>)
 8000616:	f000 fe59 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButtonInterrupt_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_GPIO_Init+0xd0>)
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UserCalibrationButtonInterrupt_GPIO_Port, &GPIO_InitStruct);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4811      	ldr	r0, [pc, #68]	; (8000674 <MX_GPIO_Init+0xd4>)
 8000630:	f000 fc74 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationLED_Pin;
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UserCalibrationLED_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4619      	mov	r1, r3
 800064a:	4808      	ldr	r0, [pc, #32]	; (800066c <MX_GPIO_Init+0xcc>)
 800064c:	f000 fc66 	bl	8000f1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 1, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2101      	movs	r1, #1
 8000654:	2018      	movs	r0, #24
 8000656:	f000 fc2c 	bl	8000eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800065a:	2018      	movs	r0, #24
 800065c:	f000 fc43 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	46020c00 	.word	0x46020c00
 800066c:	42021c00 	.word	0x42021c00
 8000670:	10110000 	.word	0x10110000
 8000674:	42020800 	.word	0x42020800

08000678 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <MX_I2C2_Init+0x74>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <MX_I2C2_Init+0x78>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <MX_I2C2_Init+0x74>)
 8000684:	4a1b      	ldr	r2, [pc, #108]	; (80006f4 <MX_I2C2_Init+0x7c>)
 8000686:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000688:	4b18      	ldr	r3, [pc, #96]	; (80006ec <MX_I2C2_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068e:	4b17      	ldr	r3, [pc, #92]	; (80006ec <MX_I2C2_Init+0x74>)
 8000690:	2201      	movs	r2, #1
 8000692:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_I2C2_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <MX_I2C2_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C2_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C2_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C2_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006b2:	480e      	ldr	r0, [pc, #56]	; (80006ec <MX_I2C2_Init+0x74>)
 80006b4:	f000 fe53 	bl	800135e <HAL_I2C_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006be:	f000 f935 	bl	800092c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_I2C2_Init+0x74>)
 80006c6:	f000 fed9 	bl	800147c <HAL_I2CEx_ConfigAnalogFilter>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006d0:	f000 f92c 	bl	800092c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006d4:	2100      	movs	r1, #0
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_I2C2_Init+0x74>)
 80006d8:	f000 ff1b 	bl	8001512 <HAL_I2CEx_ConfigDigitalFilter>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006e2:	f000 f923 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000002c 	.word	0x2000002c
 80006f0:	40005800 	.word	0x40005800
 80006f4:	30909dec 	.word	0x30909dec

080006f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b0ba      	sub	sp, #232	; 0xe8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000710:	f107 0314 	add.w	r3, r7, #20
 8000714:	22c0      	movs	r2, #192	; 0xc0
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f005 f96d 	bl	80059f8 <memset>
  if(i2cHandle->Instance==I2C2)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <HAL_I2C_MspInit+0xbc>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d140      	bne.n	80007aa <HAL_I2C_MspInit+0xb2>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800072c:	2300      	movs	r3, #0
 800072e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4618      	mov	r0, r3
 8000736:	f002 f981 	bl	8002a3c <HAL_RCCEx_PeriphCLKConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000740:	f000 f8f4 	bl	800092c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000744:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_I2C_MspInit+0xc0>)
 8000746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800074a:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <HAL_I2C_MspInit+0xc0>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_I2C_MspInit+0xc0>)
 8000756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = AccelGyroI2CClock_Pin|AccelGyroI2CData_Pin;
 8000762:	2330      	movs	r3, #48	; 0x30
 8000764:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000768:	2312      	movs	r3, #18
 800076a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800077a:	2304      	movs	r3, #4
 800077c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000780:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000784:	4619      	mov	r1, r3
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <HAL_I2C_MspInit+0xc4>)
 8000788:	f000 fbc8 	bl	8000f1c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <HAL_I2C_MspInit+0xc0>)
 800078e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000792:	4a09      	ldr	r2, [pc, #36]	; (80007b8 <HAL_I2C_MspInit+0xc0>)
 8000794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000798:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_I2C_MspInit+0xc0>)
 800079e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80007a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007aa:	bf00      	nop
 80007ac:	37e8      	adds	r7, #232	; 0xe8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40005800 	.word	0x40005800
 80007b8:	46020c00 	.word	0x46020c00
 80007bc:	42021c00 	.word	0x42021c00

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c4:	f000 fa16 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c8:	f000 f808 	bl	80007dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007cc:	f7ff fee8 	bl	80005a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007d0:	f000 f936 	bl	8000a40 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80007d4:	f7ff ff50 	bl	8000678 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <main+0x18>
	...

080007dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b09e      	sub	sp, #120	; 0x78
 80007e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	f107 0318 	add.w	r3, r7, #24
 80007e6:	2260      	movs	r2, #96	; 0x60
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f005 f904 	bl	80059f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
 80007fe:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000800:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000804:	f000 fed2 	bl	80015ac <HAL_PWREx_ControlVoltageScaling>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800080e:	f000 f88d 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000812:	2310      	movs	r3, #16
 8000814:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800081a:	2310      	movs	r3, #16
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800081e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000828:	2301      	movs	r3, #1
 800082a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000834:	2350      	movs	r3, #80	; 0x50
 8000836:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800083c:	2302      	movs	r3, #2
 800083e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000844:	2300      	movs	r3, #0
 8000846:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	4618      	mov	r0, r3
 8000852:	f000 ff3d 	bl	80016d0 <HAL_RCC_OscConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800085c:	f000 f866 	bl	800092c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000860:	231f      	movs	r3, #31
 8000862:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	2303      	movs	r3, #3
 8000866:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	2104      	movs	r1, #4
 800087c:	4618      	mov	r0, r3
 800087e:	f001 fd97 	bl	80023b0 <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000888:	f000 f850 	bl	800092c <Error_Handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <SystemClock_Config+0xc8>)
 800088e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <SystemClock_Config+0xc8>)
 8000894:	f023 0304 	bic.w	r3, r3, #4
 8000898:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800089c:	bf00      	nop
 800089e:	3778      	adds	r7, #120	; 0x78
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	46020c00 	.word	0x46020c00

080008a8 <HAL_GPIO_EXTI_Rising_Callback>:
// When the button's signal goes from a low to a high state
// which is what happens when you push a button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButtonInterrupt_Pin)
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b8:	d128      	bne.n	800090c <HAL_GPIO_EXTI_Rising_Callback+0x64>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 80008bc:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d105      	bne.n	80008d2 <HAL_GPIO_EXTI_Rising_Callback+0x2a>
		{
			iIsUserCalibrationLEDOn = 1;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e004      	b.n	80008dc <HAL_GPIO_EXTI_Rising_Callback+0x34>
		}
		else
		{
			iIsUserCalibrationLEDOn = 0;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 80008da:	60fb      	str	r3, [r7, #12]
		}

		// Send the message via virtual COM port
		// It uses the UART1 of STLINK's virtual com port and we
		// are transmitting the serial data with this call
		uint16_t iMessageLength = (uint16_t)strlen(cMessage);
 80008dc:	68f8      	ldr	r0, [r7, #12]
 80008de:	f7ff fcc9 	bl	8000274 <strlen>
 80008e2:	4603      	mov	r3, r0
 80008e4:	817b      	strh	r3, [r7, #10]
		if(HAL_UART_Transmit(&huart1, cMessage, iMessageLength, 100) != HAL_OK)
 80008e6:	897a      	ldrh	r2, [r7, #10]
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	68f9      	ldr	r1, [r7, #12]
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 80008ee:	f004 fb8f 	bl	8005010 <HAL_UART_Transmit>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_GPIO_EXTI_Rising_Callback+0x54>
		{
			Error_Handler();
 80008f8:	f000 f818 	bl	800092c <Error_Handler>
		}

		HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, iIsUserCalibrationLEDOn);
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	2180      	movs	r1, #128	; 0x80
 8000906:	4808      	ldr	r0, [pc, #32]	; (8000928 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8000908:	f000 fce0 	bl	80012cc <HAL_GPIO_WritePin>
	}
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	08005a20 	.word	0x08005a20
 8000918:	20000028 	.word	0x20000028
 800091c:	08005a24 	.word	0x08005a24
 8000920:	08005a44 	.word	0x08005a44
 8000924:	20000078 	.word	0x20000078
 8000928:	42021c00 	.word	0x42021c00

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	e7fe      	b.n	8000934 <Error_Handler+0x8>
	...

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_MspInit+0x30>)
 8000940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x30>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x30>)
 8000950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800095c:	f000 fea8 	bl	80016b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	46020c00 	.word	0x46020c00

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000970:	e7fe      	b.n	8000970 <NMI_Handler+0x4>

08000972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000976:	e7fe      	b.n	8000976 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	e7fe      	b.n	800097c <MemManage_Handler+0x4>

0800097e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <UsageFault_Handler+0x4>

0800098a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b8:	f000 f980 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}

080009c0 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButtonInterrupt_Pin);
 80009c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009c8:	f000 fc98 	bl	80012fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <SystemInit+0x68>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <SystemInit+0x68>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <SystemInit+0x6c>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <SystemInit+0x6c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <SystemInit+0x6c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <SystemInit+0x6c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <SystemInit+0x6c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <SystemInit+0x6c>)
 8000a02:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a06:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a0c:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <SystemInit+0x6c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <SystemInit+0x6c>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <SystemInit+0x6c>)
 8000a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <SystemInit+0x6c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SystemInit+0x68>)
 8000a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a2a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00
 8000a3c:	46020c00 	.word	0x46020c00

08000a40 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <MX_USART1_UART_Init+0x94>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a76:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7c:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a8a:	f004 fa71 	bl	8004f70 <HAL_UART_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a94:	f7ff ff4a 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000a9c:	f004 febe 	bl	800581c <HAL_UARTEx_SetTxFifoThreshold>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000aa6:	f7ff ff41 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000aae:	f004 fef3 	bl	8005898 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab8:	f7ff ff38 	bl	800092c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_USART1_UART_Init+0x90>)
 8000abe:	f004 fe74 	bl	80057aa <HAL_UARTEx_DisableFifoMode>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac8:	f7ff ff30 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000078 	.word	0x20000078
 8000ad4:	40013800 	.word	0x40013800

08000ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0ba      	sub	sp, #232	; 0xe8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	22c0      	movs	r2, #192	; 0xc0
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f004 ff7d 	bl	80059f8 <memset>
  if(uartHandle->Instance==USART1)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <HAL_UART_MspInit+0xbc>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d141      	bne.n	8000b8c <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4618      	mov	r0, r3
 8000b16:	f001 ff91 	bl	8002a3c <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b20:	f7ff ff04 	bl	800092c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <HAL_UART_MspInit+0xc0>)
 8000b26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b2a:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <HAL_UART_MspInit+0xc0>)
 8000b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b30:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <HAL_UART_MspInit+0xc0>)
 8000b36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_UART_MspInit+0xc0>)
 8000b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <HAL_UART_MspInit+0xc0>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_UART_MspInit+0xc0>)
 8000b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000b60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b7a:	2307      	movs	r3, #7
 8000b7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <HAL_UART_MspInit+0xc4>)
 8000b88:	f000 f9c8 	bl	8000f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	37e8      	adds	r7, #232	; 0xe8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40013800 	.word	0x40013800
 8000b98:	46020c00 	.word	0x46020c00
 8000b9c:	42020000 	.word	0x42020000

08000ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ba4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000baa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
	ldr	r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <LoopForever+0x16>)
	cmp	r2, r3
 8000bc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bca:	f7ff ff01 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f004 feef 	bl	80059b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd2:	f7ff fdf5 	bl	80007c0 <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000bd8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000bdc:	08005b78 	.word	0x08005b78
	ldr	r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000be4:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000be8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bec:	2000010c 	.word	0x2000010c

08000bf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_Init+0x4c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <HAL_Init+0x4c>)
 8000bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f000 f949 	bl	8000e9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c0a:	f001 fd33 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <HAL_Init+0x50>)
 8000c12:	6a1b      	ldr	r3, [r3, #32]
 8000c14:	f003 030f 	and.w	r3, r3, #15
 8000c18:	490b      	ldr	r1, [pc, #44]	; (8000c48 <HAL_Init+0x54>)
 8000c1a:	5ccb      	ldrb	r3, [r1, r3]
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_Init+0x58>)
 8000c22:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c24:	200f      	movs	r0, #15
 8000c26:	f000 f813 	bl	8000c50 <HAL_InitTick>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e002      	b.n	8000c3a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c34:	f7ff fe80 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40022000 	.word	0x40022000
 8000c44:	46020c00 	.word	0x46020c00
 8000c48:	08005a68 	.word	0x08005a68
 8000c4c:	20000000 	.word	0x20000000

08000c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <HAL_InitTick+0x60>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d101      	bne.n	8000c64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e021      	b.n	8000ca8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_InitTick+0x64>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_InitTick+0x60>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f941 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295
 8000c98:	f000 f90b 	bl	8000eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	; (8000cb8 <HAL_InitTick+0x68>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	20000108 	.word	0x20000108

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000108 	.word	0x20000108

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2e:	4a04      	ldr	r2, [pc, #16]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	60d3      	str	r3, [r2, #12]
}
 8000d34:	bf00      	nop
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	db0b      	blt.n	8000d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	f003 021f 	and.w	r2, r3, #31
 8000d78:	4907      	ldr	r1, [pc, #28]	; (8000d98 <__NVIC_EnableIRQ+0x38>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	2001      	movs	r0, #1
 8000d82:	fa00 f202 	lsl.w	r2, r0, r2
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e68:	d301      	bcc.n	8000e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00f      	b.n	8000e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <SysTick_Config+0x40>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e76:	210f      	movs	r1, #15
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f7ff ff8e 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <SysTick_Config+0x40>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e86:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <SysTick_Config+0x40>)
 8000e88:	2207      	movs	r2, #7
 8000e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	e000e010 	.word	0xe000e010

08000e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff29 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
 8000ebe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff40 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff90 	bl	8000df0 <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff33 	bl	8000d60 <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa4 	bl	8000e58 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f2e:	e1ba      	b.n	80012a6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	2101      	movs	r1, #1
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 81aa 	beq.w	80012a0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a55      	ldr	r2, [pc, #340]	; (80010a4 <HAL_GPIO_Init+0x188>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d15d      	bne.n	8001010 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69fa      	ldr	r2, [r7, #28]
 8000f82:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f84:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <HAL_GPIO_Init+0x18c>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f8c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f8e:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_GPIO_Init+0x18c>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220b      	movs	r2, #11
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	69f9      	ldr	r1, [r7, #28]
 8000fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	4313      	orrs	r3, r2
 8001006:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e067      	b.n	80010e0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x104>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b12      	cmp	r3, #18
 800101e:	d145      	bne.n	80010ac <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	4013      	ands	r3, r2
 8001042:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	f003 020f 	and.w	r2, r3, #15
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	4313      	orrs	r3, r2
 800105c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	08da      	lsrs	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3208      	adds	r2, #8
 8001066:	69f9      	ldr	r1, [r7, #28]
 8001068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	4013      	ands	r3, r2
 8001082:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0203 	and.w	r2, r3, #3
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	4313      	orrs	r3, r2
 8001098:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e01e      	b.n	80010e0 <HAL_GPIO_Init+0x1c4>
 80010a2:	bf00      	nop
 80010a4:	46020000 	.word	0x46020000
 80010a8:	08005ac0 	.word	0x08005ac0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0203 	and.w	r2, r3, #3
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00b      	beq.n	8001100 <HAL_GPIO_Init+0x1e4>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	4013      	ands	r3, r2
 8001116:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	4313      	orrs	r3, r2
 8001128:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8001136:	2201      	movs	r2, #1
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	4013      	ands	r3, r2
 8001144:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	4313      	orrs	r3, r2
 800115a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d017      	beq.n	800119a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	4013      	ands	r3, r2
 8001180:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69fa      	ldr	r2, [r7, #28]
 8001190:	4313      	orrs	r3, r2
 8001192:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d07c      	beq.n	80012a0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011a6:	4a47      	ldr	r2, [pc, #284]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	3318      	adds	r3, #24
 80011ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0a9a      	lsrs	r2, r3, #10
 80011ce:	4b3e      	ldr	r3, [pc, #248]	; (80012c8 <HAL_GPIO_Init+0x3ac>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	f002 0203 	and.w	r2, r2, #3
 80011d8:	00d2      	lsls	r2, r2, #3
 80011da:	4093      	lsls	r3, r2
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011e2:	4938      	ldr	r1, [pc, #224]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3318      	adds	r3, #24
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80011f0:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 80011f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69fa      	ldr	r2, [r7, #28]
 80011fe:	4013      	ands	r3, r2
 8001200:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x2fa>
        {
          tmp |= iocurrent;
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8001216:	4a2b      	ldr	r2, [pc, #172]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        tmp = EXTI->EMR1;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 8001220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001224:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	4013      	ands	r3, r2
 800122e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x328>
        {
          tmp |= iocurrent;
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001244:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	4013      	ands	r3, r2
 800125a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x354>
        {
          tmp |= iocurrent;
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	4013      	ands	r3, r2
 8001284:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x37e>
        {
          tmp |= iocurrent;
 8001292:	69fa      	ldr	r2, [r7, #28]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_GPIO_Init+0x3a8>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	6053      	str	r3, [r2, #4]
      }
    }
    position++;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f47f ae3d 	bne.w	8000f30 <HAL_GPIO_Init+0x14>
  }
}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	3724      	adds	r7, #36	; 0x24
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	46022000 	.word	0x46022000
 80012c8:	002f7f7f 	.word	0x002f7f7f

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001308:	68da      	ldr	r2, [r3, #12]
 800130a:	88fb      	ldrh	r3, [r7, #6]
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d006      	beq.n	8001320 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001318:	88fb      	ldrh	r3, [r7, #6]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fac4 	bl	80008a8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	4013      	ands	r3, r2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f807 	bl	8001348 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	46022000 	.word	0x46022000

08001348 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e081      	b.n	8001474 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d106      	bne.n	800138a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff f9b7 	bl	80006f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2224      	movs	r2, #36	; 0x24
 800138e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0201 	bic.w	r2, r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d107      	bne.n	80013d8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	e006      	b.n	80013e6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d104      	bne.n	80013f8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800140a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68da      	ldr	r2, [r3, #12]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800141a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	691a      	ldr	r2, [r3, #16]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	ea42 0103 	orr.w	r1, r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	021a      	lsls	r2, r3, #8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69d9      	ldr	r1, [r3, #28]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1a      	ldr	r2, [r3, #32]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b20      	cmp	r3, #32
 8001490:	d138      	bne.n	8001504 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800149c:	2302      	movs	r3, #2
 800149e:	e032      	b.n	8001506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2224      	movs	r2, #36	; 0x24
 80014ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f022 0201 	bic.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6819      	ldr	r1, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2220      	movs	r2, #32
 80014f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001500:	2300      	movs	r3, #0
 8001502:	e000      	b.n	8001506 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001504:	2302      	movs	r3, #2
  }
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001512:	b480      	push	{r7}
 8001514:	b085      	sub	sp, #20
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b20      	cmp	r3, #32
 8001526:	d139      	bne.n	800159c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001532:	2302      	movs	r3, #2
 8001534:	e033      	b.n	800159e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2224      	movs	r2, #36	; 0x24
 8001542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001564:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001598:	2300      	movs	r3, #0
 800159a:	e000      	b.n	800159e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800159c:	2302      	movs	r3, #2
  }
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80015b4:	4b34      	ldr	r3, [pc, #208]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015bc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d101      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e057      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d0:	d90a      	bls.n	80015e8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80015d2:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4313      	orrs	r3, r2
 80015de:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80015e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e4:	60d3      	str	r3, [r2, #12]
 80015e6:	e007      	b.n	80015f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80015e8:	4b27      	ldr	r3, [pc, #156]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80015f0:	4925      	ldr	r1, [pc, #148]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is rised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a24      	ldr	r2, [pc, #144]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	099b      	lsrs	r3, r3, #6
 8001604:	2232      	movs	r2, #50	; 0x32
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	4a21      	ldr	r2, [pc, #132]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	099b      	lsrs	r3, r3, #6
 8001612:	3301      	adds	r3, #1
 8001614:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001616:	e002      	b.n	800161e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3b01      	subs	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <HAL_PWREx_ControlVoltageScaling+0x84>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f3      	bne.n	8001618 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01b      	beq.n	800166e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is rised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	099b      	lsrs	r3, r3, #6
 8001642:	2232      	movs	r2, #50	; 0x32
 8001644:	fb02 f303 	mul.w	r3, r2, r3
 8001648:	4a11      	ldr	r2, [pc, #68]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800164a:	fba2 2303 	umull	r2, r3, r2, r3
 800164e:	099b      	lsrs	r3, r3, #6
 8001650:	3301      	adds	r3, #1
 8001652:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001654:	e002      	b.n	800165c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b01      	subs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800165e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d102      	bne.n	800166e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f3      	bne.n	8001656 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e000      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	46020800 	.word	0x46020800
 800168c:	20000000 	.word	0x20000000
 8001690:	10624dd3 	.word	0x10624dd3

08001694 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_PWREx_GetVoltageRange+0x18>)
 800169a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	46020800 	.word	0x46020800

080016b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	46020800 	.word	0x46020800

080016d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f000 be58 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ea:	4ba2      	ldr	r3, [pc, #648]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f4:	4b9f      	ldr	r3, [pc, #636]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 816f 	beq.w	80019ea <HAL_RCC_OscConfig+0x31a>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_RCC_OscConfig+0x52>
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	2b0c      	cmp	r3, #12
 8001716:	f040 80e1 	bne.w	80018dc <HAL_RCC_OscConfig+0x20c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	2b01      	cmp	r3, #1
 800171e:	f040 80dd 	bne.w	80018dc <HAL_RCC_OscConfig+0x20c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001722:	4b94      	ldr	r3, [pc, #592]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_RCC_OscConfig+0x6c>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d102      	bne.n	800173c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	f000 be2f 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001740:	4b8c      	ldr	r3, [pc, #560]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d004      	beq.n	8001756 <HAL_RCC_OscConfig+0x86>
 800174c:	4b89      	ldr	r3, [pc, #548]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001754:	e005      	b.n	8001762 <HAL_RCC_OscConfig+0x92>
 8001756:	4b87      	ldr	r3, [pc, #540]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800175c:	041b      	lsls	r3, r3, #16
 800175e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001762:	4293      	cmp	r3, r2
 8001764:	d255      	bcs.n	8001812 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10a      	bne.n	8001782 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	4618      	mov	r0, r3
 8001772:	f001 f8dd 	bl	8002930 <RCC_SetFlashLatencyFromMSIRange>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d002      	beq.n	8001782 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f000 be0c 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001782:	4b7c      	ldr	r3, [pc, #496]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4a7b      	ldr	r2, [pc, #492]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800178c:	6093      	str	r3, [r2, #8]
 800178e:	4b79      	ldr	r3, [pc, #484]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	4976      	ldr	r1, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800179c:	4313      	orrs	r3, r2
 800179e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80017a8:	d309      	bcc.n	80017be <HAL_RCC_OscConfig+0xee>
 80017aa:	4b72      	ldr	r3, [pc, #456]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	f023 021f 	bic.w	r2, r3, #31
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	496f      	ldr	r1, [pc, #444]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	60cb      	str	r3, [r1, #12]
 80017bc:	e07e      	b.n	80018bc <HAL_RCC_OscConfig+0x1ec>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	da0a      	bge.n	80017dc <HAL_RCC_OscConfig+0x10c>
 80017c6:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	015b      	lsls	r3, r3, #5
 80017d4:	4967      	ldr	r1, [pc, #412]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60cb      	str	r3, [r1, #12]
 80017da:	e06f      	b.n	80018bc <HAL_RCC_OscConfig+0x1ec>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e4:	d30a      	bcc.n	80017fc <HAL_RCC_OscConfig+0x12c>
 80017e6:	4b63      	ldr	r3, [pc, #396]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	029b      	lsls	r3, r3, #10
 80017f4:	495f      	ldr	r1, [pc, #380]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60cb      	str	r3, [r1, #12]
 80017fa:	e05f      	b.n	80018bc <HAL_RCC_OscConfig+0x1ec>
 80017fc:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	03db      	lsls	r3, r3, #15
 800180a:	495a      	ldr	r1, [pc, #360]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800180c:	4313      	orrs	r3, r2
 800180e:	60cb      	str	r3, [r1, #12]
 8001810:	e054      	b.n	80018bc <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001812:	4b58      	ldr	r3, [pc, #352]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	4a57      	ldr	r2, [pc, #348]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001818:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800181c:	6093      	str	r3, [r2, #8]
 800181e:	4b55      	ldr	r3, [pc, #340]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	4952      	ldr	r1, [pc, #328]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800182c:	4313      	orrs	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001834:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001838:	d309      	bcc.n	800184e <HAL_RCC_OscConfig+0x17e>
 800183a:	4b4e      	ldr	r3, [pc, #312]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f023 021f 	bic.w	r2, r3, #31
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	494b      	ldr	r1, [pc, #300]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001848:	4313      	orrs	r3, r2
 800184a:	60cb      	str	r3, [r1, #12]
 800184c:	e028      	b.n	80018a0 <HAL_RCC_OscConfig+0x1d0>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	2b00      	cmp	r3, #0
 8001854:	da0a      	bge.n	800186c <HAL_RCC_OscConfig+0x19c>
 8001856:	4b47      	ldr	r3, [pc, #284]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	015b      	lsls	r3, r3, #5
 8001864:	4943      	ldr	r1, [pc, #268]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001866:	4313      	orrs	r3, r2
 8001868:	60cb      	str	r3, [r1, #12]
 800186a:	e019      	b.n	80018a0 <HAL_RCC_OscConfig+0x1d0>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001874:	d30a      	bcc.n	800188c <HAL_RCC_OscConfig+0x1bc>
 8001876:	4b3f      	ldr	r3, [pc, #252]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	029b      	lsls	r3, r3, #10
 8001884:	493b      	ldr	r1, [pc, #236]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	60cb      	str	r3, [r1, #12]
 800188a:	e009      	b.n	80018a0 <HAL_RCC_OscConfig+0x1d0>
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	03db      	lsls	r3, r3, #15
 800189a:	4936      	ldr	r1, [pc, #216]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 f840 	bl	8002930 <RCC_SetFlashLatencyFromMSIRange>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f000 bd6f 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80018bc:	f000 ffe2 	bl	8002884 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <HAL_RCC_OscConfig+0x2a8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff f9c3 	bl	8000c50 <HAL_InitTick>
 80018ca:	4603      	mov	r3, r0
 80018cc:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK)
 80018ce:	7ffb      	ldrb	r3, [r7, #31]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 8089 	beq.w	80019e8 <HAL_RCC_OscConfig+0x318>
        {
          return status;
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	f000 bd5f 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d066      	beq.n	80019b2 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80018e4:	4b23      	ldr	r3, [pc, #140]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a22      	ldr	r2, [pc, #136]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80018f0:	f7ff f9f8 	bl	8000ce4 <HAL_GetTick>
 80018f4:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80018f6:	e009      	b.n	800190c <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f8:	f7ff f9f4 	bl	8000ce4 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d902      	bls.n	800190c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	f000 bd47 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ef      	beq.n	80018f8 <HAL_RCC_OscConfig+0x228>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a15      	ldr	r2, [pc, #84]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800191e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001922:	6093      	str	r3, [r2, #8]
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	4910      	ldr	r1, [pc, #64]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800193e:	d309      	bcc.n	8001954 <HAL_RCC_OscConfig+0x284>
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f023 021f 	bic.w	r2, r3, #31
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4909      	ldr	r1, [pc, #36]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800194e:	4313      	orrs	r3, r2
 8001950:	60cb      	str	r3, [r1, #12]
 8001952:	e04a      	b.n	80019ea <HAL_RCC_OscConfig+0x31a>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2b00      	cmp	r3, #0
 800195a:	da0f      	bge.n	800197c <HAL_RCC_OscConfig+0x2ac>
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	4902      	ldr	r1, [pc, #8]	; (8001974 <HAL_RCC_OscConfig+0x2a4>)
 800196c:	4313      	orrs	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e03b      	b.n	80019ea <HAL_RCC_OscConfig+0x31a>
 8001972:	bf00      	nop
 8001974:	46020c00 	.word	0x46020c00
 8001978:	20000004 	.word	0x20000004
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001984:	d30a      	bcc.n	800199c <HAL_RCC_OscConfig+0x2cc>
 8001986:	4b94      	ldr	r3, [pc, #592]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	029b      	lsls	r3, r3, #10
 8001994:	4990      	ldr	r1, [pc, #576]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001996:	4313      	orrs	r3, r2
 8001998:	60cb      	str	r3, [r1, #12]
 800199a:	e026      	b.n	80019ea <HAL_RCC_OscConfig+0x31a>
 800199c:	4b8e      	ldr	r3, [pc, #568]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	03db      	lsls	r3, r3, #15
 80019aa:	498b      	ldr	r1, [pc, #556]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
 80019b0:	e01b      	b.n	80019ea <HAL_RCC_OscConfig+0x31a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80019b2:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a88      	ldr	r2, [pc, #544]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80019be:	f7ff f991 	bl	8000ce4 <HAL_GetTick>
 80019c2:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80019c4:	e009      	b.n	80019da <HAL_RCC_OscConfig+0x30a>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019c6:	f7ff f98d 	bl	8000ce4 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d902      	bls.n	80019da <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	f000 bce0 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80019da:	4b7f      	ldr	r3, [pc, #508]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1ef      	bne.n	80019c6 <HAL_RCC_OscConfig+0x2f6>
 80019e6:	e000      	b.n	80019ea <HAL_RCC_OscConfig+0x31a>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 808d 	beq.w	8001b12 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x33a>
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d10f      	bne.n	8001a24 <HAL_RCC_OscConfig+0x354>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x354>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	4b73      	ldr	r3, [pc, #460]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d07c      	beq.n	8001b10 <HAL_RCC_OscConfig+0x440>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d178      	bne.n	8001b10 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f000 bcbb 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2c:	d106      	bne.n	8001a3c <HAL_RCC_OscConfig+0x36c>
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a69      	ldr	r2, [pc, #420]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e03b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3e4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d112      	bne.n	8001a6c <HAL_RCC_OscConfig+0x39c>
 8001a46:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a63      	ldr	r2, [pc, #396]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b61      	ldr	r3, [pc, #388]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a60      	ldr	r2, [pc, #384]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b5e      	ldr	r3, [pc, #376]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a5d      	ldr	r2, [pc, #372]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e023      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3e4>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001a74:	d112      	bne.n	8001a9c <HAL_RCC_OscConfig+0x3cc>
 8001a76:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a57      	ldr	r2, [pc, #348]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b55      	ldr	r3, [pc, #340]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a54      	ldr	r2, [pc, #336]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a51      	ldr	r2, [pc, #324]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3e4>
 8001a9c:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b4b      	ldr	r3, [pc, #300]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d014      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x416>
      {
        tickstart = HAL_GetTick();
 8001abc:	f7ff f912 	bl	8000ce4 <HAL_GetTick>
 8001ac0:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ac2:	e009      	b.n	8001ad8 <HAL_RCC_OscConfig+0x408>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff f90e 	bl	8000ce4 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d902      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	f000 bc61 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad8:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0ef      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x3f4>
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x442>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001ae6:	f7ff f8fd 	bl	8000ce4 <HAL_GetTick>
 8001aea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aee:	f7ff f8f9 	bl	8000ce4 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b64      	cmp	r3, #100	; 0x64
 8001afa:	d902      	bls.n	8001b02 <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f000 bc4c 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1ef      	bne.n	8001aee <HAL_RCC_OscConfig+0x41e>
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x442>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d064      	beq.n	8001be8 <HAL_RCC_OscConfig+0x518>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_OscConfig+0x460>
 8001b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d11a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x490>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d117      	bne.n	8001b60 <HAL_RCC_OscConfig+0x490>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b30:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_RCC_OscConfig+0x47a>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	f000 bc28 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	041b      	lsls	r3, r3, #16
 8001b58:	491f      	ldr	r1, [pc, #124]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5e:	e043      	b.n	8001be8 <HAL_RCC_OscConfig+0x518>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d024      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b74:	f7ff f8b6 	bl	8000ce4 <HAL_GetTick>
 8001b78:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b7a:	e009      	b.n	8001b90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f8b2 	bl	8000ce4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	6a3b      	ldr	r3, [r7, #32]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d902      	bls.n	8001b90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	f000 bc05 	b.w	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0ef      	beq.n	8001b7c <HAL_RCC_OscConfig+0x4ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	490b      	ldr	r1, [pc, #44]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	610b      	str	r3, [r1, #16]
 8001bb0:	e01a      	b.n	8001be8 <HAL_RCC_OscConfig+0x518>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_RCC_OscConfig+0x508>)
 8001bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bbc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001bbe:	f7ff f891 	bl	8000ce4 <HAL_GetTick>
 8001bc2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x50c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f88d 	bl	8000ce4 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d903      	bls.n	8001bdc <HAL_RCC_OscConfig+0x50c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e3e0      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
 8001bd8:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bdc:	4baf      	ldr	r3, [pc, #700]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0308 	and.w	r3, r3, #8
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80c7 	beq.w	8001d84 <HAL_RCC_OscConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfc:	4ba7      	ldr	r3, [pc, #668]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d111      	bne.n	8001c2e <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4ba4      	ldr	r3, [pc, #656]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c10:	4aa2      	ldr	r2, [pc, #648]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c1a:	4ba0      	ldr	r3, [pc, #640]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	617b      	str	r3, [r7, #20]
 8001c26:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c2e:	4b9c      	ldr	r3, [pc, #624]	; (8001ea0 <HAL_RCC_OscConfig+0x7d0>)
 8001c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d118      	bne.n	8001c6c <HAL_RCC_OscConfig+0x59c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001c3a:	4b99      	ldr	r3, [pc, #612]	; (8001ea0 <HAL_RCC_OscConfig+0x7d0>)
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3e:	4a98      	ldr	r2, [pc, #608]	; (8001ea0 <HAL_RCC_OscConfig+0x7d0>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c46:	f7ff f84d 	bl	8000ce4 <HAL_GetTick>
 8001c4a:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x590>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c4e:	f7ff f849 	bl	8000ce4 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e39c      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001c60:	4b8f      	ldr	r3, [pc, #572]	; (8001ea0 <HAL_RCC_OscConfig+0x7d0>)
 8001c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x57e>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d05f      	beq.n	8001d34 <HAL_RCC_OscConfig+0x664>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001c74:	4b89      	ldr	r3, [pc, #548]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001c76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c7a:	61bb      	str	r3, [r7, #24]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699a      	ldr	r2, [r3, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d037      	beq.n	8001cfa <HAL_RCC_OscConfig+0x62a>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d006      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x5d2>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5d2>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e37b      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x614>
        {
          __HAL_RCC_LSI_DISABLE();
 8001cac:	4b7b      	ldr	r3, [pc, #492]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb2:	4a7a      	ldr	r2, [pc, #488]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001cb4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001cb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001cbc:	f7ff f812 	bl	8000ce4 <HAL_GetTick>
 8001cc0:	6238      	str	r0, [r7, #32]

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x606>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff f80e 	bl	8000ce4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x606>
            {
              return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e361      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001cd6:	4b71      	ldr	r3, [pc, #452]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1ef      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x5f4>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001ce4:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001ce6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	496a      	ldr	r1, [pc, #424]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001cfa:	4b68      	ldr	r3, [pc, #416]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d00:	4a66      	ldr	r2, [pc, #408]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001d0a:	f7fe ffeb 	bl	8000ce4 <HAL_GetTick>
 8001d0e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x654>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d12:	f7fe ffe7 	bl	8000ce4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x654>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e33a      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001d24:	4b5d      	ldr	r3, [pc, #372]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0ef      	beq.n	8001d12 <HAL_RCC_OscConfig+0x642>
 8001d32:	e01b      	b.n	8001d6c <HAL_RCC_OscConfig+0x69c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001d34:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d3a:	4a58      	ldr	r2, [pc, #352]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001d3c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001d40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001d44:	f7fe ffce 	bl	8000ce4 <HAL_GetTick>
 8001d48:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x68e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4c:	f7fe ffca 	bl	8000ce4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x68e>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e31d      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ef      	bne.n	8001d4c <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x6b4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d74:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7a:	4a48      	ldr	r2, [pc, #288]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8112 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x8e6>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d111      	bne.n	8001dca <HAL_RCC_OscConfig+0x6fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dac:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001dae:	f043 0304 	orr.w	r3, r3, #4
 8001db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001db8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001dca:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <HAL_RCC_OscConfig+0x7d0>)
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_RCC_OscConfig+0x738>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <HAL_RCC_OscConfig+0x7d0>)
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dda:	4a31      	ldr	r2, [pc, #196]	; (8001ea0 <HAL_RCC_OscConfig+0x7d0>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7fe ff7f 	bl	8000ce4 <HAL_GetTick>
 8001de6:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x72c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7fe ff7b 	bl	8000ce4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x72c>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e2ce      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCC_OscConfig+0x7d0>)
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x71a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01f      	beq.n	8001e54 <HAL_RCC_OscConfig+0x784>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d010      	beq.n	8001e42 <HAL_RCC_OscConfig+0x772>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e20:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e26:	4a1d      	ldr	r2, [pc, #116]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e30:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e36:	4a19      	ldr	r2, [pc, #100]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e52:	e00f      	b.n	8001e74 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e5a:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e64:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_RCC_OscConfig+0x7cc>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d058      	beq.n	8001f2e <HAL_RCC_OscConfig+0x85e>
    {
      tickstart = HAL_GetTick();
 8001e7c:	f7fe ff32 	bl	8000ce4 <HAL_GetTick>
 8001e80:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e82:	e00f      	b.n	8001ea4 <HAL_RCC_OscConfig+0x7d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7fe ff2e 	bl	8000ce4 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d906      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e27f      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
 8001e9a:	bf00      	nop
 8001e9c:	46020c00 	.word	0x46020c00
 8001ea0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea4:	4ba4      	ldr	r3, [pc, #656]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0e8      	beq.n	8001e84 <HAL_RCC_OscConfig+0x7b4>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d01b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x826>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ebe:	4b9e      	ldr	r3, [pc, #632]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ec4:	4a9c      	ldr	r2, [pc, #624]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x816>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed0:	f7fe ff08 	bl	8000ce4 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x816>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e259      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ee6:	4b94      	ldr	r3, [pc, #592]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ed      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x800>
 8001ef4:	e053      	b.n	8001f9e <HAL_RCC_OscConfig+0x8ce>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ef6:	4b90      	ldr	r3, [pc, #576]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001ef8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001efc:	4a8e      	ldr	r2, [pc, #568]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_OscConfig+0x84e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7fe feec 	bl	8000ce4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x84e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e23d      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f1e:	4b86      	ldr	r3, [pc, #536]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ed      	bne.n	8001f08 <HAL_RCC_OscConfig+0x838>
 8001f2c:	e037      	b.n	8001f9e <HAL_RCC_OscConfig+0x8ce>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001f2e:	f7fe fed9 	bl	8000ce4 <HAL_GetTick>
 8001f32:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x87c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe fed5 	bl	8000ce4 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	6a3b      	ldr	r3, [r7, #32]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x87c>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e226      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f4c:	4b7a      	ldr	r3, [pc, #488]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1ed      	bne.n	8001f36 <HAL_RCC_OscConfig+0x866>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001f5a:	4b77      	ldr	r3, [pc, #476]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001f5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d01a      	beq.n	8001f9e <HAL_RCC_OscConfig+0x8ce>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001f68:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f6e:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x8c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7a:	f7fe feb3 	bl	8000ce4 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x8c0>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e204      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001f90:	4b69      	ldr	r3, [pc, #420]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001f92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ed      	bne.n	8001f7a <HAL_RCC_OscConfig+0x8aa>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f9e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x8e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa6:	4b64      	ldr	r3, [pc, #400]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fac:	4a62      	ldr	r2, [pc, #392]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001fae:	f023 0304 	bic.w	r3, r3, #4
 8001fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d036      	beq.n	8002030 <HAL_RCC_OscConfig+0x960>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <HAL_RCC_OscConfig+0x92e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a5a      	ldr	r2, [pc, #360]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001fd6:	f7fe fe85 	bl	8000ce4 <HAL_GetTick>
 8001fda:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x920>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fde:	f7fe fe81 	bl	8000ce4 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	6a3b      	ldr	r3, [r7, #32]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x920>
        {
          return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e1d4      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ff0:	4b51      	ldr	r3, [pc, #324]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x90e>
 8001ffc:	e018      	b.n	8002030 <HAL_RCC_OscConfig+0x960>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001ffe:	4b4e      	ldr	r3, [pc, #312]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a4d      	ldr	r2, [pc, #308]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8002004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002008:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800200a:	f7fe fe6b 	bl	8000ce4 <HAL_GetTick>
 800200e:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x954>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002012:	f7fe fe67 	bl	8000ce4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x954>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1ba      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002024:	4b44      	ldr	r3, [pc, #272]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x942>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002038:	2b00      	cmp	r3, #0
 800203a:	d036      	beq.n	80020aa <HAL_RCC_OscConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	2b00      	cmp	r3, #0
 8002042:	d019      	beq.n	8002078 <HAL_RCC_OscConfig+0x9a8>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8002044:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a3b      	ldr	r2, [pc, #236]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 800204a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800204e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002050:	f7fe fe48 	bl	8000ce4 <HAL_GetTick>
 8002054:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x99a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8002058:	f7fe fe44 	bl	8000ce4 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x99a>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e197      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x988>
 8002076:	e018      	b.n	80020aa <HAL_RCC_OscConfig+0x9da>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 800207e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002082:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002084:	f7fe fe2e 	bl	8000ce4 <HAL_GetTick>
 8002088:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x9ce>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800208c:	f7fe fe2a 	bl	8000ce4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e17d      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x9bc>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d07f      	beq.n	80021b6 <HAL_RCC_OscConfig+0xae6>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d062      	beq.n	8002184 <HAL_RCC_OscConfig+0xab4>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 80020c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020c8:	6093      	str	r3, [r2, #8]
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	4918      	ldr	r1, [pc, #96]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80020e4:	d309      	bcc.n	80020fa <HAL_RCC_OscConfig+0xa2a>
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f023 021f 	bic.w	r2, r3, #31
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4911      	ldr	r1, [pc, #68]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
 80020f8:	e02a      	b.n	8002150 <HAL_RCC_OscConfig+0xa80>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	da0a      	bge.n	8002118 <HAL_RCC_OscConfig+0xa48>
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	015b      	lsls	r3, r3, #5
 8002110:	4909      	ldr	r1, [pc, #36]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8002112:	4313      	orrs	r3, r2
 8002114:	60cb      	str	r3, [r1, #12]
 8002116:	e01b      	b.n	8002150 <HAL_RCC_OscConfig+0xa80>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d30c      	bcc.n	800213c <HAL_RCC_OscConfig+0xa6c>
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	029b      	lsls	r3, r3, #10
 8002130:	4901      	ldr	r1, [pc, #4]	; (8002138 <HAL_RCC_OscConfig+0xa68>)
 8002132:	4313      	orrs	r3, r2
 8002134:	60cb      	str	r3, [r1, #12]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xa80>
 8002138:	46020c00 	.word	0x46020c00
 800213c:	4b99      	ldr	r3, [pc, #612]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	03db      	lsls	r3, r3, #15
 800214a:	4996      	ldr	r1, [pc, #600]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002150:	4b94      	ldr	r3, [pc, #592]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a93      	ldr	r2, [pc, #588]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800215c:	f7fe fdc2 	bl	8000ce4 <HAL_GetTick>
 8002160:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0xaa6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002164:	f7fe fdbe 	bl	8000ce4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0xaa6>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e111      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8002176:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0xa94>
 8002182:	e018      	b.n	80021b6 <HAL_RCC_OscConfig+0xae6>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8002184:	4b87      	ldr	r3, [pc, #540]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a86      	ldr	r2, [pc, #536]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800218a:	f023 0310 	bic.w	r3, r3, #16
 800218e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8002190:	f7fe fda8 	bl	8000ce4 <HAL_GetTick>
 8002194:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0xada>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8002198:	f7fe fda4 	bl	8000ce4 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0xada>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e0f7      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80021aa:	4b7e      	ldr	r3, [pc, #504]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0xac8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80ec 	beq.w	8002398 <HAL_RCC_OscConfig+0xcc8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c0:	4b78      	ldr	r3, [pc, #480]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b0c      	cmp	r3, #12
 80021ca:	f000 80e3 	beq.w	8002394 <HAL_RCC_OscConfig+0xcc4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	f040 80be 	bne.w	8002354 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b72      	ldr	r3, [pc, #456]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a71      	ldr	r2, [pc, #452]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80021e4:	f7fe fd7e 	bl	8000ce4 <HAL_GetTick>
 80021e8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xb2e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe fd7a 	bl	8000ce4 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xb2e>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0cd      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80021fe:	4b69      	ldr	r3, [pc, #420]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0xb1c>
          }
        }

        /* Enable PWR CLK */
        __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800220c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002210:	4a64      	ldr	r2, [pc, #400]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800221a:	4b62      	ldr	r3, [pc, #392]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8002228:	4b5f      	ldr	r3, [pc, #380]	; (80023a8 <HAL_RCC_OscConfig+0xcd8>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002230:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002234:	d102      	bne.n	800223c <HAL_RCC_OscConfig+0xb6c>
        {
          pwrboosten = SET;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800223c:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <HAL_RCC_OscConfig+0xcd8>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a59      	ldr	r2, [pc, #356]	; (80023a8 <HAL_RCC_OscConfig+0xcd8>)
 8002242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002246:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8002248:	4b56      	ldr	r3, [pc, #344]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002250:	f023 0303 	bic.w	r3, r3, #3
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800225c:	3a01      	subs	r2, #1
 800225e:	0212      	lsls	r2, r2, #8
 8002260:	4311      	orrs	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002266:	430a      	orrs	r2, r1
 8002268:	494e      	ldr	r1, [pc, #312]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800226a:	4313      	orrs	r3, r2
 800226c:	628b      	str	r3, [r1, #40]	; 0x28
 800226e:	4b4d      	ldr	r3, [pc, #308]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002272:	4b4e      	ldr	r3, [pc, #312]	; (80023ac <HAL_RCC_OscConfig+0xcdc>)
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800227a:	3a01      	subs	r2, #1
 800227c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002284:	3a01      	subs	r2, #1
 8002286:	0252      	lsls	r2, r2, #9
 8002288:	b292      	uxth	r2, r2
 800228a:	4311      	orrs	r1, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002290:	3a01      	subs	r2, #1
 8002292:	0412      	lsls	r2, r2, #16
 8002294:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800229e:	3a01      	subs	r2, #1
 80022a0:	0612      	lsls	r2, r2, #24
 80022a2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80022a6:	430a      	orrs	r2, r1
 80022a8:	493e      	ldr	r1, [pc, #248]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022ae:	4b3d      	ldr	r3, [pc, #244]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	4a3c      	ldr	r2, [pc, #240]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80022b4:	f023 0310 	bic.w	r3, r3, #16
 80022b8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80022ba:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022ca:	00d2      	lsls	r2, r2, #3
 80022cc:	4935      	ldr	r1, [pc, #212]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80022d2:	4b34      	ldr	r3, [pc, #208]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	4a33      	ldr	r2, [pc, #204]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	f023 020c 	bic.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ea:	492e      	ldr	r1, [pc, #184]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80022f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCC_OscConfig+0xc34>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80022f8:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_OscConfig+0xcd8>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a2a      	ldr	r2, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0xcd8>)
 80022fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002302:	60d3      	str	r3, [r2, #12]
        }

        /*Disable PWR clk */
        __HAL_RCC_PWR_CLK_DISABLE();
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230a:	4a26      	ldr	r2, [pc, #152]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800230c:	f023 0304 	bic.w	r3, r3, #4
 8002310:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800231a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1f      	ldr	r2, [pc, #124]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800232c:	f7fe fcda 	bl	8000ce4 <HAL_GetTick>
 8002330:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fcd6 	bl	8000ce4 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e029      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0xc64>
 8002352:	e021      	b.n	8002398 <HAL_RCC_OscConfig+0xcc8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a12      	ldr	r2, [pc, #72]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 800235a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235e:	6013      	str	r3, [r2, #0]

        /* Disable main PLL outputs to save power if no PLLs on */
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
 8002360:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002364:	4a0f      	ldr	r2, [pc, #60]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002366:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800236a:	6293      	str	r3, [r2, #40]	; 0x28

        tickstart = HAL_GetTick();
 800236c:	f7fe fcba 	bl	8000ce4 <HAL_GetTick>
 8002370:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002372:	e008      	b.n	8002386 <HAL_RCC_OscConfig+0xcb6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002374:	f7fe fcb6 	bl	8000ce4 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_OscConfig+0xcb6>
          {
            return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e009      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_RCC_OscConfig+0xcd4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f0      	bne.n	8002374 <HAL_RCC_OscConfig+0xca4>
 8002392:	e001      	b.n	8002398 <HAL_RCC_OscConfig+0xcc8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0xcca>
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3730      	adds	r7, #48	; 0x30
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	46020c00 	.word	0x46020c00
 80023a8:	46020800 	.word	0x46020800
 80023ac:	80800000 	.word	0x80800000

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e146      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4ba5      	ldr	r3, [pc, #660]	; (800265c <HAL_RCC_ClockConfig+0x2ac>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d910      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4ba2      	ldr	r3, [pc, #648]	; (800265c <HAL_RCC_ClockConfig+0x2ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 020f 	bic.w	r2, r3, #15
 80023da:	49a0      	ldr	r1, [pc, #640]	; (800265c <HAL_RCC_ClockConfig+0x2ac>)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	4313      	orrs	r3, r2
 80023e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b9e      	ldr	r3, [pc, #632]	; (800265c <HAL_RCC_ClockConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e12e      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 80be 	beq.w	800257e <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d137      	bne.n	800247a <HAL_RCC_ClockConfig+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240a:	4b95      	ldr	r3, [pc, #596]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 800240c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002410:	4a93      	ldr	r2, [pc, #588]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800241a:	4b91      	ldr	r3, [pc, #580]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 800241c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
      tickstart = HAL_GetTick();
 8002428:	f7fe fc5c 	bl	8000ce4 <HAL_GetTick>
 800242c:	6178      	str	r0, [r7, #20]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800242e:	4b8d      	ldr	r3, [pc, #564]	; (8002664 <HAL_RCC_ClockConfig+0x2b4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00f      	beq.n	800245a <HAL_RCC_ClockConfig+0xaa>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_ClockConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800243c:	f7fe fc52 	bl	8000ce4 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x9e>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e101      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800244e:	4b85      	ldr	r3, [pc, #532]	; (8002664 <HAL_RCC_ClockConfig+0x2b4>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_ClockConfig+0x8c>
          }
        }
      }

      __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b81      	ldr	r3, [pc, #516]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002460:	4a7f      	ldr	r2, [pc, #508]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 8002462:	f023 0304 	bic.w	r3, r3, #4
 8002466:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800246a:	4b7d      	ldr	r3, [pc, #500]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d121      	bne.n	80024ba <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0eb      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xe2>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002482:	4b77      	ldr	r3, [pc, #476]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d115      	bne.n	80024ba <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0df      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0xfa>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800249a:	4b71      	ldr	r3, [pc, #452]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0d3      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e0cb      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80024ba:	4b69      	ldr	r3, [pc, #420]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f023 0203 	bic.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4966      	ldr	r1, [pc, #408]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80024cc:	f7fe fc0a 	bl	8000ce4 <HAL_GetTick>
 80024d0:	6178      	str	r0, [r7, #20]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d112      	bne.n	8002500 <HAL_RCC_ClockConfig+0x150>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x142>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7fe fc02 	bl	8000ce4 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e0af      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f2:	4b5b      	ldr	r3, [pc, #364]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d1ee      	bne.n	80024dc <HAL_RCC_ClockConfig+0x12c>
 80024fe:	e03e      	b.n	800257e <HAL_RCC_ClockConfig+0x1ce>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d112      	bne.n	800252e <HAL_RCC_ClockConfig+0x17e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002508:	e00a      	b.n	8002520 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250a:	f7fe fbeb 	bl	8000ce4 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	f241 3288 	movw	r2, #5000	; 0x1388
 8002518:	4293      	cmp	r3, r2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e098      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002520:	4b4f      	ldr	r3, [pc, #316]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	f003 030c 	and.w	r3, r3, #12
 8002528:	2b08      	cmp	r3, #8
 800252a:	d1ee      	bne.n	800250a <HAL_RCC_ClockConfig+0x15a>
 800252c:	e027      	b.n	800257e <HAL_RCC_ClockConfig+0x1ce>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11d      	bne.n	8002572 <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002536:	e00a      	b.n	800254e <HAL_RCC_ClockConfig+0x19e>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002538:	f7fe fbd4 	bl	8000ce4 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	f241 3288 	movw	r2, #5000	; 0x1388
 8002546:	4293      	cmp	r3, r2
 8002548:	d901      	bls.n	800254e <HAL_RCC_ClockConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e081      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ee      	bne.n	8002538 <HAL_RCC_ClockConfig+0x188>
 800255a:	e010      	b.n	800257e <HAL_RCC_ClockConfig+0x1ce>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255c:	f7fe fbc2 	bl	8000ce4 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e06f      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002572:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d1ee      	bne.n	800255c <HAL_RCC_ClockConfig+0x1ac>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d008      	beq.n	800259c <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800258a:	4b35      	ldr	r3, [pc, #212]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	f023 020f 	bic.w	r2, r3, #15
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4932      	ldr	r1, [pc, #200]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 8002598:	4313      	orrs	r3, r2
 800259a:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	492a      	ldr	r1, [pc, #168]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80025c6:	4b26      	ldr	r3, [pc, #152]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	4922      	ldr	r1, [pc, #136]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d008      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x248>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80025e6:	4b1e      	ldr	r3, [pc, #120]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	491b      	ldr	r1, [pc, #108]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	624b      	str	r3, [r1, #36]	; 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_RCC_ClockConfig+0x2ac>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d210      	bcs.n	8002628 <HAL_RCC_ClockConfig+0x278>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_RCC_ClockConfig+0x2ac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f023 020f 	bic.w	r2, r3, #15
 800260e:	4913      	ldr	r1, [pc, #76]	; (800265c <HAL_RCC_ClockConfig+0x2ac>)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <HAL_RCC_ClockConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d001      	beq.n	8002628 <HAL_RCC_ClockConfig+0x278>
    {
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e014      	b.n	8002652 <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002628:	f000 f824 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_RCC_ClockConfig+0x2b0>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	490c      	ldr	r1, [pc, #48]	; (8002668 <HAL_RCC_ClockConfig+0x2b8>)
 8002638:	5ccb      	ldrb	r3, [r1, r3]
 800263a:	fa22 f303 	lsr.w	r3, r2, r3
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <HAL_RCC_ClockConfig+0x2bc>)
 8002640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_RCC_ClockConfig+0x2c0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fe fb02 	bl	8000c50 <HAL_InitTick>
 800264c:	4603      	mov	r3, r0
 800264e:	74fb      	strb	r3, [r7, #19]

  return status;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40022000 	.word	0x40022000
 8002660:	46020c00 	.word	0x46020c00
 8002664:	46020800 	.word	0x46020800
 8002668:	08005a68 	.word	0x08005a68
 800266c:	20000000 	.word	0x20000000
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	b08b      	sub	sp, #44	; 0x2c
 8002678:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b7b      	ldr	r3, [pc, #492]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800268c:	4b78      	ldr	r3, [pc, #480]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d005      	beq.n	80026a8 <HAL_RCC_GetSysClockFreq+0x34>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d121      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d11e      	bne.n	80026e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80026a8:	4b71      	ldr	r3, [pc, #452]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80026b4:	4b6e      	ldr	r3, [pc, #440]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80026ba:	0b1b      	lsrs	r3, r3, #12
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24
 80026c2:	e005      	b.n	80026d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80026c4:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	0f1b      	lsrs	r3, r3, #28
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026d0:	4a68      	ldr	r2, [pc, #416]	; (8002874 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d110      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80026e4:	e00d      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026e6:	4b62      	ldr	r3, [pc, #392]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d102      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026f2:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_GetSysClockFreq+0x204>)
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	e004      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026fe:	4b5e      	ldr	r3, [pc, #376]	; (8002878 <HAL_RCC_GetSysClockFreq+0x204>)
 8002700:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	f040 80ac 	bne.w	8002862 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800270a:	4b59      	ldr	r3, [pc, #356]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002714:	4b56      	ldr	r3, [pc, #344]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	3301      	adds	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002722:	4b53      	ldr	r3, [pc, #332]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800272e:	4b50      	ldr	r3, [pc, #320]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002732:	08db      	lsrs	r3, r3, #3
 8002734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002746:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f000 8086 	beq.w	800285e <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d003      	beq.n	8002760 <HAL_RCC_GetSysClockFreq+0xec>
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d022      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x130>
 800275e:	e043      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	ee07 3a90 	vmov	s15, r3
 8002766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276a:	eddf 6a44 	vldr	s13, [pc, #272]	; 800287c <HAL_RCC_GetSysClockFreq+0x208>
 800276e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002772:	4b3f      	ldr	r3, [pc, #252]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277a:	ee07 3a90 	vmov	s15, r3
 800277e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002782:	ed97 6a01 	vldr	s12, [r7, #4]
 8002786:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002880 <HAL_RCC_GetSysClockFreq+0x20c>
 800278a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800278e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002796:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80027a2:	e046      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ae:	eddf 6a33 	vldr	s13, [pc, #204]	; 800287c <HAL_RCC_GetSysClockFreq+0x208>
 80027b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027be:	ee07 3a90 	vmov	s15, r3
 80027c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80027c6:	ed97 6a01 	vldr	s12, [r7, #4]
 80027ca:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002880 <HAL_RCC_GetSysClockFreq+0x20c>
 80027ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80027d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027da:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80027e6:	e024      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	ee07 3a90 	vmov	s15, r3
 80027ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	ee07 3a90 	vmov	s15, r3
 80027f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002800:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002810:	ed97 6a01 	vldr	s12, [r7, #4]
 8002814:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002880 <HAL_RCC_GetSysClockFreq+0x20c>
 8002818:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800281c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002824:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002830:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002832:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	0e1b      	lsrs	r3, r3, #24
 8002838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800283c:	3301      	adds	r3, #1
 800283e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800284a:	edd7 6a07 	vldr	s13, [r7, #28]
 800284e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002856:	ee17 3a90 	vmov	r3, s15
 800285a:	623b      	str	r3, [r7, #32]
 800285c:	e001      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002862:	6a3b      	ldr	r3, [r7, #32]
}
 8002864:	4618      	mov	r0, r3
 8002866:	372c      	adds	r7, #44	; 0x2c
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	46020c00 	.word	0x46020c00
 8002874:	08005a80 	.word	0x08005a80
 8002878:	00f42400 	.word	0x00f42400
 800287c:	4b742400 	.word	0x4b742400
 8002880:	46000000 	.word	0x46000000

08002884 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002888:	f7ff fef4 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b07      	ldr	r3, [pc, #28]	; (80028ac <HAL_RCC_GetHCLKFreq+0x28>)
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	4906      	ldr	r1, [pc, #24]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002898:	5ccb      	ldrb	r3, [r1, r3]
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80028a0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x30>)
 80028a4:	681b      	ldr	r3, [r3, #0]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	46020c00 	.word	0x46020c00
 80028b0:	08005a68 	.word	0x08005a68
 80028b4:	20000000 	.word	0x20000000

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80028bc:	f7ff ffe2 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	4903      	ldr	r1, [pc, #12]	; (80028dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	46020c00 	.word	0x46020c00
 80028dc:	08005a78 	.word	0x08005a78

080028e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80028e4:	f7ff ffce 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b05      	ldr	r3, [pc, #20]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4903      	ldr	r1, [pc, #12]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	46020c00 	.word	0x46020c00
 8002904:	08005a78 	.word	0x08005a78

08002908 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800290c:	f7ff ffba 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 8002910:	4602      	mov	r2, r0
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	4903      	ldr	r1, [pc, #12]	; (800292c <HAL_RCC_GetPCLK3Freq+0x24>)
 800291e:	5ccb      	ldrb	r3, [r1, r3]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	46020c00 	.word	0x46020c00
 800292c:	08005a78 	.word	0x08005a78

08002930 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002938:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800293a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002946:	f7fe fea5 	bl	8001694 <HAL_PWREx_GetVoltageRange>
 800294a:	6178      	str	r0, [r7, #20]
 800294c:	e019      	b.n	8002982 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	4b39      	ldr	r3, [pc, #228]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002950:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002954:	4a37      	ldr	r2, [pc, #220]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002956:	f043 0304 	orr.w	r3, r3, #4
 800295a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800295e:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800296c:	f7fe fe92 	bl	8001694 <HAL_PWREx_GetVoltageRange>
 8002970:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002972:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002978:	4a2e      	ldr	r2, [pc, #184]	; (8002a34 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800297a:	f023 0304 	bic.w	r3, r3, #4
 800297e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002988:	d003      	beq.n	8002992 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002990:	d109      	bne.n	80029a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002998:	d202      	bcs.n	80029a0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800299a:	2301      	movs	r3, #1
 800299c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800299e:	e033      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80029a4:	e030      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ac:	d208      	bcs.n	80029c0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b4:	d102      	bne.n	80029bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80029b6:	2303      	movs	r3, #3
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e025      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e035      	b.n	8002a2c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029c6:	d90f      	bls.n	80029e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>

      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029d4:	d902      	bls.n	80029dc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80029d6:	2300      	movs	r3, #0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	e015      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80029dc:	2301      	movs	r3, #1
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	e012      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80029e2:	2300      	movs	r3, #0
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	e00f      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ee:	d109      	bne.n	8002a04 <RCC_SetFlashLatencyFromMSIRange+0xd4>

        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f6:	d102      	bne.n	80029fe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80029f8:	2301      	movs	r3, #1
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	e004      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80029fe:	2302      	movs	r3, #2
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e001      	b.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002a04:	2301      	movs	r3, #1
 8002a06:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f023 020f 	bic.w	r2, r3, #15
 8002a10:	4909      	ldr	r1, [pc, #36]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002a18:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d001      	beq.n	8002a2a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	46020c00 	.word	0x46020c00
 8002a38:	40022000 	.word	0x40022000

08002a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a44:	2300      	movs	r3, #0
 8002a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a48:	2300      	movs	r3, #0
 8002a4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002a58:	4bae      	ldr	r3, [pc, #696]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	49ab      	ldr	r1, [pc, #684]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002a7a:	4ba6      	ldr	r3, [pc, #664]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	f023 020c 	bic.w	r2, r3, #12
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a88:	49a2      	ldr	r1, [pc, #648]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002a9c:	4b9d      	ldr	r3, [pc, #628]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aaa:	499a      	ldr	r1, [pc, #616]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002abe:	4b95      	ldr	r3, [pc, #596]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ac4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002acc:	4991      	ldr	r1, [pc, #580]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002ae0:	4b8c      	ldr	r3, [pc, #560]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	4989      	ldr	r1, [pc, #548]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002b02:	4b84      	ldr	r3, [pc, #528]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b08:	f023 0207 	bic.w	r2, r3, #7
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b10:	4980      	ldr	r1, [pc, #512]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002b24:	4b7b      	ldr	r3, [pc, #492]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b32:	4978      	ldr	r1, [pc, #480]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002b46:	4b73      	ldr	r3, [pc, #460]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b54:	496f      	ldr	r1, [pc, #444]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002b68:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b76:	4967      	ldr	r1, [pc, #412]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002b8a:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b98:	495e      	ldr	r1, [pc, #376]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002bac:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002bae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bba:	4956      	ldr	r1, [pc, #344]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002bce:	4b51      	ldr	r3, [pc, #324]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bdc:	494d      	ldr	r1, [pc, #308]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002bf0:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bfe:	4945      	ldr	r1, [pc, #276]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d042      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c18:	2b80      	cmp	r3, #128	; 0x80
 8002c1a:	d028      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002c1c:	2b80      	cmp	r3, #128	; 0x80
 8002c1e:	d823      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002c20:	2b60      	cmp	r3, #96	; 0x60
 8002c22:	d026      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002c24:	2b60      	cmp	r3, #96	; 0x60
 8002c26:	d81f      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d006      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d81b      	bhi.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d009      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d00f      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002c38:	e016      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c3a:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	4a35      	ldr	r2, [pc, #212]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c46:	e015      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 f85f 	bl	8004d10 <RCCEx_PLL2_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c56:	e00d      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3328      	adds	r3, #40	; 0x28
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f002 f8ef 	bl	8004e40 <RCCEx_PLL3_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	74fb      	strb	r3, [r7, #19]
        break;
 8002c6c:	e002      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 8002c6e:	bf00      	nop
 8002c70:	e000      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 8002c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c80:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c8a:	4922      	ldr	r1, [pc, #136]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8002c92:	e001      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c94:	7cfb      	ldrb	r3, [r7, #19]
 8002c96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d04c      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cae:	d02e      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb4:	d828      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cba:	d02d      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8002cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc0:	d822      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc6:	d008      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8002cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ccc:	d81c      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8002cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd6:	d00f      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8002cd8:	e016      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	4a0d      	ldr	r2, [pc, #52]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002ce6:	e018      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	4618      	mov	r0, r3
 8002cee:	f002 f80f 	bl	8004d10 <RCCEx_PLL2_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002cf6:	e010      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3328      	adds	r3, #40	; 0x28
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 f89f 	bl	8004e40 <RCCEx_PLL3_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002d06:	e008      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	74fb      	strb	r3, [r7, #19]
        break;
 8002d0c:	e005      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
        break;
 8002d0e:	bf00      	nop
 8002d10:	e003      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002d12:	bf00      	nop
 8002d14:	46020c00 	.word	0x46020c00
        break;
 8002d18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d1a:	7cfb      	ldrb	r3, [r7, #19]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002d20:	4bb7      	ldr	r3, [pc, #732]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	49b3      	ldr	r1, [pc, #716]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8002d38:	e001      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x302>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d03e      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d50:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002d54:	d025      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8002d56:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002d5a:	d81f      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d60:	d01f      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8002d62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d66:	d819      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d6c:	d019      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8002d6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d72:	d813      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d78:	d008      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7e:	d80d      	bhi.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8002d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8002d8a:	e007      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 ffbd 	bl	8004d10 <RCCEx_PLL2_Config>
 8002d96:	4603      	mov	r3, r0
 8002d98:	74fb      	strb	r3, [r7, #19]
        break;
 8002d9a:	e003      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x368>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	74fb      	strb	r3, [r7, #19]
        break;
 8002da0:	e000      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        break;
 8002da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x388>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002daa:	4b95      	ldr	r3, [pc, #596]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002db0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002dba:	4991      	ldr	r1, [pc, #580]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8002dc2:	e001      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d036      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d81b      	bhi.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002e1d 	.word	0x08002e1d
 8002de8:	08002df9 	.word	0x08002df9
 8002dec:	08002e07 	.word	0x08002e07
 8002df0:	08002e1d 	.word	0x08002e1d
 8002df4:	08002e1d 	.word	0x08002e1d
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002df8:	4b81      	ldr	r3, [pc, #516]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	4a80      	ldr	r2, [pc, #512]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e02:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002e04:	e00b      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3328      	adds	r3, #40	; 0x28
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f002 f818 	bl	8004e40 <RCCEx_PLL3_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	74fb      	strb	r3, [r7, #19]
        break;
 8002e14:	e003      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	74fb      	strb	r3, [r7, #19]
        break;
 8002e1a:	e000      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        break;
 8002e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1e:	7cfb      	ldrb	r3, [r7, #19]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10c      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x402>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002e24:	4b76      	ldr	r3, [pc, #472]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e2a:	f023 0207 	bic.w	r2, r3, #7
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e34:	4972      	ldr	r1, [pc, #456]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8002e3c:	e001      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x406>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d042      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));

    switch (pPeriphClkInit->Adf1ClockSelection)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e58:	d025      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8002e5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e5e:	d81f      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002e60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e64:	d021      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8002e66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e6a:	d819      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e70:	d00e      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x454>
 8002e72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e76:	d813      	bhi.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d018      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x472>
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d10e      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x464>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e82:	4b5f      	ldr	r3, [pc, #380]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	4a5e      	ldr	r2, [pc, #376]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002e8e:	e00f      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3328      	adds	r3, #40	; 0x28
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 ffd3 	bl	8004e40 <RCCEx_PLL3_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	74fb      	strb	r3, [r7, #19]
        break;
 8002e9e:	e007      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ea4:	e004      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 8002ea6:	bf00      	nop
 8002ea8:	e002      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 8002eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002eb6:	4b52      	ldr	r3, [pc, #328]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ebc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec6:	494e      	ldr	r1, [pc, #312]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8002ece:	e001      	b.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x498>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed0:	7cfb      	ldrb	r3, [r7, #19]
 8002ed2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a0 	beq.w	8003022 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	747b      	strb	r3, [r7, #17]
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ee6:	4b46      	ldr	r3, [pc, #280]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d110      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef4:	4b42      	ldr	r3, [pc, #264]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efa:	4a41      	ldr	r2, [pc, #260]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002efc:	f043 0304 	orr.w	r3, r3, #4
 8002f00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002f04:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f12:	2301      	movs	r3, #1
 8002f14:	747b      	strb	r3, [r7, #17]
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1a:	4a3a      	ldr	r2, [pc, #232]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f22:	f7fd fedf 	bl	8000ce4 <HAL_GetTick>
 8002f26:	60f8      	str	r0, [r7, #12]

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f28:	e009      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2a:	f7fd fedb 	bl	8000ce4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d902      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        ret = HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	74fb      	strb	r3, [r7, #19]
        break;
 8002f3c:	e005      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x50e>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002f3e:	4b31      	ldr	r3, [pc, #196]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0ef      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      }
    }

    if (ret == HAL_OK)
 8002f4a:	7cfb      	ldrb	r3, [r7, #19]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d15b      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f50:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d01f      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d019      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x566>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f6e:	4b24      	ldr	r3, [pc, #144]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f78:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f7a:	4b21      	ldr	r3, [pc, #132]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f80:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f90:	4a1b      	ldr	r2, [pc, #108]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f9a:	4a19      	ldr	r2, [pc, #100]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d016      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x59e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fd fe9a 	bl	8000ce4 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb2:	e00b      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x590>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb4:	f7fd fe96 	bl	8000ce4 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d902      	bls.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x590>
          {
            ret = HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	74fb      	strb	r3, [r7, #19]
            break;
 8002fca:	e006      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x59e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0ec      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x578>
          }
        }
      }

      if (ret == HAL_OK)
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x5be>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fe6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002ff0:	4903      	ldr	r1, [pc, #12]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
 8002ff8:	e008      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	74bb      	strb	r3, [r7, #18]
 8002ffe:	e005      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003000:	46020c00 	.word	0x46020c00
 8003004:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003008:	7cfb      	ldrb	r3, [r7, #19]
 800300a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800300c:	7c7b      	ldrb	r3, [r7, #17]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d107      	bne.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003012:	4bab      	ldr	r3, [pc, #684]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8003014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003018:	4aa9      	ldr	r2, [pc, #676]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800301a:	f023 0304 	bic.w	r3, r3, #4
 800301e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d03a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x668>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(pPeriphClkInit->Clk48ClockSelection));

    switch (pPeriphClkInit->Clk48ClockSelection)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003034:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003038:	d01f      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x63e>
 800303a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800303e:	d819      	bhi.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8003040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003044:	d00f      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8003046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800304a:	d813      	bhi.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x638>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d016      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003050:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003054:	d10e      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      case RCC_CLK48CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3304      	adds	r3, #4
 800305a:	4618      	mov	r0, r3
 800305c:	f001 fe58 	bl	8004d10 <RCCEx_PLL2_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	74fb      	strb	r3, [r7, #19]
        break;
 8003064:	e00c      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_PLL1:
        /* Enable CLK48 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003066:	4b96      	ldr	r3, [pc, #600]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8003068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306a:	4a95      	ldr	r2, [pc, #596]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800306c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003070:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003072:	e005      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_HSI48:
        break;
      case RCC_CLK48CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	74fb      	strb	r3, [r7, #19]
        break;
 8003078:	e002      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 800307a:	bf00      	nop
 800307c:	e000      	b.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 800307e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10c      	bne.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->Clk48ClockSelection);
 8003086:	4b8e      	ldr	r3, [pc, #568]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8003088:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003096:	498a      	ldr	r1, [pc, #552]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800309e:	e001      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x668>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d027      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
 80030bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c0:	d804      	bhi.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x690>
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d007      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ca:	d006      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x69e>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	74fb      	strb	r3, [r7, #19]
        break;
 80030d0:	e004      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 80030d2:	bf00      	nop
 80030d4:	e002      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 80030d6:	bf00      	nop
 80030d8:	e000      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 80030da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030dc:	7cfb      	ldrb	r3, [r7, #19]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80030e2:	4b77      	ldr	r3, [pc, #476]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80030e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80030e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f2:	4973      	ldr	r1, [pc, #460]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80030fa:	e001      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	7cfb      	ldrb	r3, [r7, #19]
 80030fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800310c:	4b6c      	ldr	r3, [pc, #432]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800310e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003112:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800311c:	4968      	ldr	r1, [pc, #416]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d017      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800313a:	d105      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800313c:	4b60      	ldr	r3, [pc, #384]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	4a5f      	ldr	r2, [pc, #380]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8003142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003146:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003148:	4b5d      	ldr	r3, [pc, #372]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800314a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800314e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003158:	4959      	ldr	r1, [pc, #356]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800316c:	4b54      	ldr	r3, [pc, #336]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800316e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003172:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800317c:	4950      	ldr	r1, [pc, #320]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00b      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003190:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003196:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031a0:	4947      	ldr	r1, [pc, #284]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00b      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80031b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031ba:	f023 0218 	bic.w	r2, r3, #24
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80031c4:	493e      	ldr	r1, [pc, #248]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d023      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031e2:	d105      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	4a35      	ldr	r2, [pc, #212]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80031ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ee:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80031fa:	d105      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      /* Enable PLL2 Q CLK output */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003200:	4a2f      	ldr	r2, [pc, #188]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8003202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003206:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003208:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800320a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800320e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003218:	4929      	ldr	r1, [pc, #164]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d032      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003236:	d00e      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800323c:	d813      	bhi.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d014      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x830>
 8003242:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003246:	d10e      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 800324e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003252:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003254:	e00b      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x832>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	4618      	mov	r0, r3
 800325c:	f001 fd58 	bl	8004d10 <RCCEx_PLL2_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	74fb      	strb	r3, [r7, #19]
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003264:	e003      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x832>
      default:
        ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	74fb      	strb	r3, [r7, #19]
        break;
 800326a:	e000      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x832>
        break;
 800326c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800326e:	7cfb      	ldrb	r3, [r7, #19]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10c      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003274:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8003276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800327a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8003286:	4313      	orrs	r3, r2
 8003288:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800328c:	e001      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328e:	7cfb      	ldrb	r3, [r7, #19]
 8003290:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00b      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800329e:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80032a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032ae:	4904      	ldr	r1, [pc, #16]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x884>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  return status;
 80032b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	46020c00 	.word	0x46020c00

080032c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	; 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80032cc:	4bac      	ldr	r3, [pc, #688]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d4:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80032d6:	4baa      	ldr	r3, [pc, #680]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80032d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80032e0:	4ba7      	ldr	r3, [pc, #668]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	3301      	adds	r3, #1
 80032ec:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80032ee:	4ba4      	ldr	r3, [pc, #656]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80032f8:	4ba1      	ldr	r3, [pc, #644]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	08db      	lsrs	r3, r3, #3
 80032fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	ee07 3a90 	vmov	s15, r3
 800330c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003310:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8123 	beq.w	8003562 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d062      	beq.n	80033e8 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2b03      	cmp	r3, #3
 8003326:	f200 8081 	bhi.w	800342c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d024      	beq.n	800337a <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d17a      	bne.n	800342c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003340:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003584 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8003344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003348:	4b8d      	ldr	r3, [pc, #564]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800334a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800334c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003358:	ed97 6a02 	vldr	s12, [r7, #8]
 800335c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003588 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003360:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003364:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800336c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003374:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003378:	e08f      	b.n	800349a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800337a:	4b81      	ldr	r3, [pc, #516]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8003386:	4b7e      	ldr	r3, [pc, #504]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	0f1b      	lsrs	r3, r3, #28
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	e006      	b.n	80033a0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8003392:	4b7b      	ldr	r3, [pc, #492]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	0f1b      	lsrs	r3, r3, #28
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	4a7a      	ldr	r2, [pc, #488]	; (800358c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	ee07 3a90 	vmov	s15, r3
 80033b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ca:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003588 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80033ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033e6:	e058      	b.n	800349a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003584 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	4b61      	ldr	r3, [pc, #388]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800340a:	ed97 6a02 	vldr	s12, [r7, #8]
 800340e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003588 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003412:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003416:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800341a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800342a:	e036      	b.n	800349a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800342c:	4b54      	ldr	r3, [pc, #336]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8003438:	4b51      	ldr	r3, [pc, #324]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	0f1b      	lsrs	r3, r3, #28
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	e006      	b.n	8003452 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8003444:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	0f1b      	lsrs	r3, r3, #28
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4a4e      	ldr	r2, [pc, #312]	; (800358c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	ee07 3a90 	vmov	s15, r3
 8003474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003478:	ed97 6a02 	vldr	s12, [r7, #8]
 800347c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003588 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8003480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800348c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003494:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003498:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d017      	beq.n	80034d6 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80034a6:	4b36      	ldr	r3, [pc, #216]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80034a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034aa:	0a5b      	lsrs	r3, r3, #9
 80034ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b0:	ee07 3a90 	vmov	s15, r3
 80034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80034b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034bc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80034c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80034c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034cc:	ee17 2a90 	vmov	r2, s15
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e002      	b.n	80034dc <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80034dc:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d017      	beq.n	8003518 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80034e8:	4b25      	ldr	r3, [pc, #148]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80034ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80034fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034fe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003502:	edd7 6a07 	vldr	s13, [r7, #28]
 8003506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800350a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800350e:	ee17 2a90 	vmov	r2, s15
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	e002      	b.n	800351e <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d017      	beq.n	800355a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800352a:	4b15      	ldr	r3, [pc, #84]	; (8003580 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	0e1b      	lsrs	r3, r3, #24
 8003530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800353c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003540:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003544:	edd7 6a07 	vldr	s13, [r7, #28]
 8003548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800354c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003550:	ee17 2a90 	vmov	r2, s15
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	609a      	str	r2, [r3, #8]
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }
}
 8003558:	e00c      	b.n	8003574 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
}
 8003560:	e008      	b.n	8003574 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	bf00      	nop
 8003576:	3724      	adds	r7, #36	; 0x24
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	46020c00 	.word	0x46020c00
 8003584:	4b742400 	.word	0x4b742400
 8003588:	46000000 	.word	0x46000000
 800358c:	08005a80 	.word	0x08005a80

08003590 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	; 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8003598:	4bac      	ldr	r3, [pc, #688]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800359a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80035a2:	4baa      	ldr	r3, [pc, #680]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80035ac:	4ba7      	ldr	r3, [pc, #668]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	3301      	adds	r3, #1
 80035b8:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80035ba:	4ba4      	ldr	r3, [pc, #656]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	f003 0310 	and.w	r3, r3, #16
 80035c2:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80035c4:	4ba1      	ldr	r3, [pc, #644]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	08db      	lsrs	r3, r3, #3
 80035ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035dc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8123 	beq.w	800382e <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d062      	beq.n	80036b4 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	f200 8081 	bhi.w	80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d024      	beq.n	8003646 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d17a      	bne.n	80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	ee07 3a90 	vmov	s15, r3
 8003608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8003610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003614:	4b8d      	ldr	r3, [pc, #564]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003624:	ed97 6a02 	vldr	s12, [r7, #8]
 8003628:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003854 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800362c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003630:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003634:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003638:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800363c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003640:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003644:	e08f      	b.n	8003766 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003646:	4b81      	ldr	r3, [pc, #516]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8003652:	4b7e      	ldr	r3, [pc, #504]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	0f1b      	lsrs	r3, r3, #28
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	e006      	b.n	800366c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800365e:	4b7b      	ldr	r3, [pc, #492]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003664:	041b      	lsls	r3, r3, #16
 8003666:	0f1b      	lsrs	r3, r3, #28
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	4a7a      	ldr	r2, [pc, #488]	; (8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800366e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	ee07 3a90 	vmov	s15, r3
 8003680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003692:	ed97 6a02 	vldr	s12, [r7, #8]
 8003696:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003854 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800369a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800369e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80036aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036b2:	e058      	b.n	8003766 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036be:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003850 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80036c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c6:	4b61      	ldr	r3, [pc, #388]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80036d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80036da:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003854 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80036de:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80036e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80036e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80036ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036f6:	e036      	b.n	8003766 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80036f8:	4b54      	ldr	r3, [pc, #336]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8003704:	4b51      	ldr	r3, [pc, #324]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	0f1b      	lsrs	r3, r3, #28
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	e006      	b.n	800371e <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8003710:	4b4e      	ldr	r3, [pc, #312]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	0f1b      	lsrs	r3, r3, #28
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003744:	ed97 6a02 	vldr	s12, [r7, #8]
 8003748:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003854 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800374c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003758:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003764:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003766:	4b39      	ldr	r3, [pc, #228]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d017      	beq.n	80037a2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003772:	4b36      	ldr	r3, [pc, #216]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	0a5b      	lsrs	r3, r3, #9
 8003778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8003784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003788:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800378c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003798:	ee17 2a90 	vmov	r2, s15
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	e002      	b.n	80037a8 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80037a8:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d017      	beq.n	80037e4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037b4:	4b25      	ldr	r3, [pc, #148]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80037c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037ca:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80037d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037da:	ee17 2a90 	vmov	r2, s15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	e002      	b.n	80037ea <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d017      	beq.n	8003826 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80037f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fa:	0e1b      	lsrs	r3, r3, #24
 80037fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003808:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800380c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003810:	edd7 6a07 	vldr	s13, [r7, #28]
 8003814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800381c:	ee17 2a90 	vmov	r2, s15
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003824:	e00c      	b.n	8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
}
 800382c:	e008      	b.n	8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	3724      	adds	r7, #36	; 0x24
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	46020c00 	.word	0x46020c00
 8003850:	4b742400 	.word	0x4b742400
 8003854:	46000000 	.word	0x46000000
 8003858:	08005a80 	.word	0x08005a80

0800385c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003864:	4bac      	ldr	r3, [pc, #688]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800386e:	4baa      	ldr	r3, [pc, #680]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003878:	4ba7      	ldr	r3, [pc, #668]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	3301      	adds	r3, #1
 8003884:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8003886:	4ba4      	ldr	r3, [pc, #656]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003890:	4ba1      	ldr	r3, [pc, #644]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	fb02 f303 	mul.w	r3, r2, r3
 80038a0:	ee07 3a90 	vmov	s15, r3
 80038a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8123 	beq.w	8003afa <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d062      	beq.n	8003980 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	f200 8081 	bhi.w	80039c4 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d024      	beq.n	8003912 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d17a      	bne.n	80039c4 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	ee07 3a90 	vmov	s15, r3
 80038d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d8:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80038dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e0:	4b8d      	ldr	r3, [pc, #564]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e8:	ee07 3a90 	vmov	s15, r3
 80038ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80038f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80038f4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80038f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80038fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003900:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003904:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390c:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003910:	e08f      	b.n	8003a32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003912:	4b81      	ldr	r3, [pc, #516]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800391e:	4b7e      	ldr	r3, [pc, #504]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	0f1b      	lsrs	r3, r3, #28
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	e006      	b.n	8003938 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800392a:	4b7b      	ldr	r3, [pc, #492]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800392c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	0f1b      	lsrs	r3, r3, #28
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	4a7a      	ldr	r2, [pc, #488]	; (8003b24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800393a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393e:	ee07 3a90 	vmov	s15, r3
 8003942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	ee07 3a90 	vmov	s15, r3
 800394c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003962:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800397e:	e058      	b.n	8003a32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b61      	ldr	r3, [pc, #388]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80039a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039c2:	e036      	b.n	8003a32 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80039c4:	4b54      	ldr	r3, [pc, #336]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80039d0:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	0f1b      	lsrs	r3, r3, #28
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	e006      	b.n	80039ea <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 80039dc:	4b4e      	ldr	r3, [pc, #312]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80039de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80039e2:	041b      	lsls	r3, r3, #16
 80039e4:	0f1b      	lsrs	r3, r3, #28
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	4a4e      	ldr	r2, [pc, #312]	; (8003b24 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80039ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f0:	ee07 3a90 	vmov	s15, r3
 80039f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a10:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a14:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a30:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d017      	beq.n	8003a6e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003a3e:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	0a5b      	lsrs	r3, r3, #9
 8003a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003a50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a54:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003a58:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a64:	ee17 2a90 	vmov	r2, s15
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	e002      	b.n	8003a74 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003a74:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d017      	beq.n	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003a80:	4b25      	ldr	r3, [pc, #148]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a96:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003a9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003aa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aa6:	ee17 2a90 	vmov	r2, s15
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	e002      	b.n	8003ab6 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003ab6:	4b18      	ldr	r3, [pc, #96]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d017      	beq.n	8003af2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac6:	0e1b      	lsrs	r3, r3, #24
 8003ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003acc:	ee07 3a90 	vmov	s15, r3
 8003ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003ad4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ad8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003adc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae8:	ee17 2a90 	vmov	r2, s15
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003af0:	e00c      	b.n	8003b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
}
 8003af8:	e008      	b.n	8003b0c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	3724      	adds	r7, #36	; 0x24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	46020c00 	.word	0x46020c00
 8003b1c:	4b742400 	.word	0x4b742400
 8003b20:	46000000 	.word	0x46000000
 8003b24:	08005a80 	.word	0x08005a80

08003b28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08e      	sub	sp, #56	; 0x38
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b36:	d145      	bne.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003b38:	4bcc      	ldr	r3, [pc, #816]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003b44:	4bc9      	ldr	r3, [pc, #804]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d108      	bne.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b58:	d104      	bne.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
    {
      frequency = LSE_VALUE;
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8003b60:	f001 b8cd 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003b64:	4bc1      	ldr	r3, [pc, #772]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003b66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b72:	d114      	bne.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7a:	d110      	bne.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003b7c:	4bbb      	ldr	r3, [pc, #748]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003b7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b8a:	d103      	bne.n	8003b94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      {
        frequency = LSI_VALUE / 128U;
 8003b8c:	23fa      	movs	r3, #250	; 0xfa
 8003b8e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003b90:	f001 b8b5 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
      else
      {
        frequency = LSI_VALUE;
 8003b94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003b98:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003b9a:	f001 b8b0 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003b9e:	4bb3      	ldr	r3, [pc, #716]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003baa:	d107      	bne.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb2:	d103      	bne.n	8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
    {
      frequency = HSE_VALUE / 32U;
 8003bb4:	4bae      	ldr	r3, [pc, #696]	; (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb8:	f001 b8a1 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc0:	f001 b89d 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bca:	f001 806d 	beq.w	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bd4:	f201 8090 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bde:	f000 86d3 	beq.w	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003be8:	f201 8086 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bf2:	f001 8004 	beq.w	8004bfe <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bfc:	f201 807c 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c06:	f000 878b 	beq.w	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c10:	f201 8072 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c1a:	f000 8732 	beq.w	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c24:	f201 8068 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c2e:	f000 86d9 	beq.w	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c38:	f201 805e 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c42:	f000 8592 	beq.w	800476a <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4c:	f201 8054 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c56:	f000 81f6 	beq.w	8004046 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c60:	f201 804a 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6a:	f000 8194 	beq.w	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c74:	f201 8040 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c7e:	f000 847f 	beq.w	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c88:	f201 8036 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c92:	f000 842a 	beq.w	80044ea <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	f201 802c 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca6:	f000 83bd 	beq.w	8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb0:	f201 8022 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cba:	f000 80f1 	beq.w	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cc4:	f201 8018 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cce:	f000 8095 	beq.w	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd8:	f201 800e 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce2:	f000 8131 	beq.w	8003f48 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cec:	f201 8004 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cf6:	f000 855e 	beq.w	80047b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d00:	f200 87fa 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	f000 85f8 	beq.w	80048fe <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d14:	f200 87f0 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1e:	f000 859c 	beq.w	800485a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d28:	f200 87e6 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d32:	f000 84d0 	beq.w	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d3c:	f200 87dc 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	f000 849b 	beq.w	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b80      	cmp	r3, #128	; 0x80
 8003d4c:	f200 87d4 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b20      	cmp	r3, #32
 8003d54:	d84c      	bhi.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 87cd 	beq.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3b01      	subs	r3, #1
 8003d62:	2b1f      	cmp	r3, #31
 8003d64:	f200 87c8 	bhi.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0x248>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08004141 	.word	0x08004141
 8003d74:	080041af 	.word	0x080041af
 8003d78:	08004cf9 	.word	0x08004cf9
 8003d7c:	0800421d 	.word	0x0800421d
 8003d80:	08004cf9 	.word	0x08004cf9
 8003d84:	08004cf9 	.word	0x08004cf9
 8003d88:	08004cf9 	.word	0x08004cf9
 8003d8c:	0800428b 	.word	0x0800428b
 8003d90:	08004cf9 	.word	0x08004cf9
 8003d94:	08004cf9 	.word	0x08004cf9
 8003d98:	08004cf9 	.word	0x08004cf9
 8003d9c:	08004cf9 	.word	0x08004cf9
 8003da0:	08004cf9 	.word	0x08004cf9
 8003da4:	08004cf9 	.word	0x08004cf9
 8003da8:	08004cf9 	.word	0x08004cf9
 8003dac:	080042f9 	.word	0x080042f9
 8003db0:	08004cf9 	.word	0x08004cf9
 8003db4:	08004cf9 	.word	0x08004cf9
 8003db8:	08004cf9 	.word	0x08004cf9
 8003dbc:	08004cf9 	.word	0x08004cf9
 8003dc0:	08004cf9 	.word	0x08004cf9
 8003dc4:	08004cf9 	.word	0x08004cf9
 8003dc8:	08004cf9 	.word	0x08004cf9
 8003dcc:	08004cf9 	.word	0x08004cf9
 8003dd0:	08004cf9 	.word	0x08004cf9
 8003dd4:	08004cf9 	.word	0x08004cf9
 8003dd8:	08004cf9 	.word	0x08004cf9
 8003ddc:	08004cf9 	.word	0x08004cf9
 8003de0:	08004cf9 	.word	0x08004cf9
 8003de4:	08004cf9 	.word	0x08004cf9
 8003de8:	08004cf9 	.word	0x08004cf9
 8003dec:	0800436d 	.word	0x0800436d
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	f000 841d 	beq.w	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8003df8:	f000 bf7e 	b.w	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
    {
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003dfc:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003dfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e02:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d036      	beq.n	8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	2b80      	cmp	r3, #128	; 0x80
 8003e12:	d840      	bhi.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	2b60      	cmp	r3, #96	; 0x60
 8003e18:	d02c      	beq.n	8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	2b60      	cmp	r3, #96	; 0x60
 8003e1e:	d83a      	bhi.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	2b40      	cmp	r3, #64	; 0x40
 8003e24:	d009      	beq.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	2b40      	cmp	r3, #64	; 0x40
 8003e2a:	d834      	bhi.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d010      	beq.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8003e38:	e02d      	b.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff fa40 	bl	80032c4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003e48:	e028      	b.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e4a:	f107 0318 	add.w	r3, r7, #24
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7ff fb9e 	bl	8003590 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003e58:	e020      	b.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e5a:	f107 030c 	add.w	r3, r7, #12
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fcfc 	bl	800385c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003e68:	e018      	b.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 8003e6a:	bf00      	nop
 8003e6c:	46020c00 	.word	0x46020c00
 8003e70:	0007a120 	.word	0x0007a120

          case RCC_SAI1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003e74:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003e7a:	e00f      	b.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e7c:	4bab      	ldr	r3, [pc, #684]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e88:	d102      	bne.n	8003e90 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            {
              frequency = HSI_VALUE;
 8003e8a:	4ba9      	ldr	r3, [pc, #676]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8003e8e:	e005      	b.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x374>
              frequency = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003e94:	e002      	b.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          default :
          {
            frequency = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003e9a:	bf00      	nop
          }
        }
        break;
 8003e9c:	f000 bf2f 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003ea0:	4ba2      	ldr	r3, [pc, #648]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003ea2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
 8003eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	d037      	beq.n	8003f24 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d840      	bhi.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec2:	d02b      	beq.n	8003f1c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eca:	d838      	bhi.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed2:	d00b      	beq.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eda:	d830      	bhi.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00c      	beq.n	8003efc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8003eea:	e028      	b.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x416>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff f9e7 	bl	80032c4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003efa:	e023      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003efc:	f107 0318 	add.w	r3, r7, #24
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fb45 	bl	8003590 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003f0a:	e01b      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f0c:	f107 030c 	add.w	r3, r7, #12
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fca3 	bl	800385c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003f1a:	e013      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003f1c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003f22:	e00f      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f24:	4b81      	ldr	r3, [pc, #516]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f30:	d102      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
            {
              frequency = HSI_VALUE;
 8003f32:	4b7f      	ldr	r3, [pc, #508]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8003f36:	e005      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              frequency = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003f3c:	e002      	b.n	8003f44 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          default :

            frequency = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003f42:	bf00      	nop

        }
        break;
 8003f44:	f000 bedb 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      case RCC_PERIPHCLK_SAES:
        /* Get the current SAES source */
        srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003f48:	4b78      	ldr	r3, [pc, #480]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003f4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003f54:	4b75      	ldr	r3, [pc, #468]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f60:	d105      	bne.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        {
          frequency = HSI_VALUE;
 8003f68:	4b71      	ldr	r3, [pc, #452]	; (8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6c:	e011      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003f6e:	4b6f      	ldr	r3, [pc, #444]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f82:	d102      	bne.n	8003f8a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          frequency = HSI_VALUE >> 1U;
 8003f84:	4b6b      	ldr	r3, [pc, #428]	; (8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
 8003f88:	e003      	b.n	8003f92 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        /* Clock not enabled for SAES */
        else
        {
          frequency = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8003f8e:	f000 beb6 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003f92:	f000 beb4 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_CLK48:

        srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 8003f96:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f9c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fa8:	d030      	beq.n	800400c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003fb0:	d844      	bhi.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc0:	d83c      	bhi.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d014      	beq.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fce:	d008      	beq.n	8003fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8003fd0:	e034      	b.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x514>

        switch (srcclk)
        {
          case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff f974 	bl	80032c4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003fe0:	e02f      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003fe2:	f107 0318 	add.w	r3, r7, #24
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff fad2 	bl	8003590 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ff0:	e027      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003ff2:	4b4e      	ldr	r3, [pc, #312]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ffe:	d102      	bne.n	8004006 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
            {
              frequency = HSI48_VALUE;
 8004000:	4b4d      	ldr	r3, [pc, #308]	; (8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8004004:	e01d      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
              frequency = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800400a:	e01a      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800400c:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8004018:	4b44      	ldr	r3, [pc, #272]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	0e1b      	lsrs	r3, r3, #24
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	e006      	b.n	8004032 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8004024:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8004026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	0e1b      	lsrs	r3, r3, #24
 800402e:	f003 030f 	and.w	r3, r3, #15
 8004032:	4a42      	ldr	r2, [pc, #264]	; (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8004034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004038:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800403a:	e002      	b.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          default :

            frequency = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004040:	bf00      	nop

        }
        break;
 8004042:	f000 be5c 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SDMMC:
        srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8004046:	4b39      	ldr	r3, [pc, #228]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8004048:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800404c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2b00      	cmp	r3, #0
 8004056:	d157      	bne.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 8004058:	4b34      	ldr	r3, [pc, #208]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 800405a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800405e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
 8004064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004066:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800406a:	d030      	beq.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800406c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004072:	d844      	bhi.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407a:	d00b      	beq.n	8004094 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800407c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004082:	d83c      	bhi.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	2b00      	cmp	r3, #0
 8004088:	d014      	beq.n	80040b4 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004090:	d008      	beq.n	80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8004092:	e034      	b.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>

          switch (srcclk)
          {
            case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */
            {
              HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff f913 	bl	80032c4 <HAL_RCCEx_GetPLL1ClockFreq>
              frequency = pll1_clocks.PLL1_Q_Frequency;
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80040a2:	e02f      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */
            {
              HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040a4:	f107 0318 	add.w	r3, r7, #24
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fa71 	bl	8003590 <HAL_RCCEx_GetPLL2ClockFreq>
              frequency = pll2_clocks.PLL2_Q_Frequency;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80040b2:	e027      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */
            {
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80040b4:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c0:	d102      	bne.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
              {
                frequency = HSI48_VALUE;
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
              }
              else
              {
                frequency = 0U;
              }
              break;
 80040c6:	e01d      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
                frequency = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80040cc:	e01a      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
            {
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0e1b      	lsrs	r3, r3, #24
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	e006      	b.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 80040e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	0e1b      	lsrs	r3, r3, #24
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	4a11      	ldr	r2, [pc, #68]	; (800413c <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 80040f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fa:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            default :
            {
              frequency = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8004102:	bf00      	nop
            }
          }
          break;
 8004104:	f000 bdfb 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        }
        else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410e:	d108      	bne.n	8004122 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f8d5 	bl	80032c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_P_Frequency;
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800411e:	f000 bdee 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004126:	f000 bdea 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800412a:	bf00      	nop
 800412c:	46020c00 	.word	0x46020c00
 8004130:	00f42400 	.word	0x00f42400
 8004134:	007a1200 	.word	0x007a1200
 8004138:	02dc6c00 	.word	0x02dc6c00
 800413c:	08005a80 	.word	0x08005a80

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004140:	4bad      	ldr	r3, [pc, #692]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8004142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004146:	f003 0303 	and.w	r3, r3, #3
 800414a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004152:	f7fe fbc5 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8004156:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004158:	f000 bdd1 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	2b01      	cmp	r3, #1
 8004160:	d104      	bne.n	800416c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
          frequency = HAL_RCC_GetSysClockFreq();
 8004162:	f7fe fa87 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004166:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004168:	f000 bdc9 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800416c:	4ba2      	ldr	r3, [pc, #648]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004178:	d105      	bne.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	2b02      	cmp	r3, #2
 800417e:	d102      	bne.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          frequency = HSI_VALUE;
 8004180:	4b9e      	ldr	r3, [pc, #632]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
 8004184:	e011      	b.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004186:	4b9c      	ldr	r3, [pc, #624]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8004188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d106      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	2b03      	cmp	r3, #3
 8004198:	d103      	bne.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          frequency = LSE_VALUE;
 800419a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          frequency = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80041a6:	f000 bdaa 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80041aa:	f000 bda8 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80041ae:	4b92      	ldr	r3, [pc, #584]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80041b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041b4:	f003 030c 	and.w	r3, r3, #12
 80041b8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80041c0:	f7fe fb7a 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80041c4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80041c6:	f000 bd9a 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	2b04      	cmp	r3, #4
 80041ce:	d104      	bne.n	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          frequency = HAL_RCC_GetSysClockFreq();
 80041d0:	f7fe fa50 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 80041d4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80041d6:	f000 bd92 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80041da:	4b87      	ldr	r3, [pc, #540]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e6:	d105      	bne.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d102      	bne.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
          frequency = HSI_VALUE;
 80041ee:	4b83      	ldr	r3, [pc, #524]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
 80041f2:	e011      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80041f4:	4b80      	ldr	r3, [pc, #512]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80041f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d106      	bne.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8004202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004204:	2b0c      	cmp	r3, #12
 8004206:	d103      	bne.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = LSE_VALUE;
 8004208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
 800420e:	e003      	b.n	8004218 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004214:	f000 bd73 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004218:	f000 bd71 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800421c:	4b76      	ldr	r3, [pc, #472]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800421e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004222:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004226:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800422e:	f7fe fb43 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8004232:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8004234:	f000 bd63 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8004238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423a:	2b10      	cmp	r3, #16
 800423c:	d104      	bne.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = HAL_RCC_GetSysClockFreq();
 800423e:	f7fe fa19 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004242:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004244:	f000 bd5b 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8004248:	4b6b      	ldr	r3, [pc, #428]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004254:	d105      	bne.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	2b20      	cmp	r3, #32
 800425a:	d102      	bne.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HSI_VALUE;
 800425c:	4b67      	ldr	r3, [pc, #412]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
 8004260:	e011      	b.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8004262:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8004264:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d106      	bne.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	2b30      	cmp	r3, #48	; 0x30
 8004274:	d103      	bne.n	800427e <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = LSE_VALUE;
 8004276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004282:	f000 bd3c 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004286:	f000 bd3a 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800428a:	4b5b      	ldr	r3, [pc, #364]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800428c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004290:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004294:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	2b00      	cmp	r3, #0
 800429a:	d104      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800429c:	f7fe fb0c 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 80042a0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80042a2:	f000 bd2c 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b40      	cmp	r3, #64	; 0x40
 80042aa:	d104      	bne.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          frequency = HAL_RCC_GetSysClockFreq();
 80042ac:	f7fe f9e2 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 80042b0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80042b2:	f000 bd24 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80042b6:	4b50      	ldr	r3, [pc, #320]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c2:	d105      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	2b80      	cmp	r3, #128	; 0x80
 80042c8:	d102      	bne.n	80042d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HSI_VALUE;
 80042ca:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
 80042ce:	e011      	b.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80042d0:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80042d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d106      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 80042de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e0:	2bc0      	cmp	r3, #192	; 0xc0
 80042e2:	d103      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = LSE_VALUE;
 80042e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042e8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ea:	e003      	b.n	80042f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
          frequency = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042f0:	f000 bd05 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80042f4:	f000 bd03 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80042f8:	4b3f      	ldr	r3, [pc, #252]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80042fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004302:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	2b00      	cmp	r3, #0
 8004308:	d104      	bne.n	8004314 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800430a:	f7fe fad5 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 800430e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8004310:	f000 bcf5 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800431a:	d104      	bne.n	8004326 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
          frequency = HAL_RCC_GetSysClockFreq();
 800431c:	f7fe f9aa 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004320:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004322:	f000 bcec 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8004326:	4b34      	ldr	r3, [pc, #208]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d106      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800433a:	d102      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
          frequency = HSI_VALUE;
 800433c:	4b2f      	ldr	r3, [pc, #188]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
 8004340:	e012      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004342:	4b2d      	ldr	r3, [pc, #180]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8004344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	d107      	bne.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004356:	d103      	bne.n	8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          frequency = LSE_VALUE;
 8004358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
 800435e:	e003      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
          frequency = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004364:	f000 bccb 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004368:	f000 bcc9 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800436c:	4b22      	ldr	r3, [pc, #136]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800436e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800437e:	f7fe fac3 	bl	8002908 <HAL_RCC_GetPCLK3Freq>
 8004382:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004384:	f000 bcbb 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	2b01      	cmp	r3, #1
 800438c:	d104      	bne.n	8004398 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 800438e:	f7fe f971 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004392:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004394:	f000 bcb3 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004398:	4b17      	ldr	r3, [pc, #92]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a4:	d105      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d102      	bne.n	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HSI_VALUE;
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
 80043b0:	e036      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80043b2:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80043b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d106      	bne.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d103      	bne.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          frequency = LSE_VALUE;
 80043c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
 80043cc:	e028      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80043ce:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d11e      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	2b04      	cmp	r3, #4
 80043de:	d11b      	bne.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 80043ec:	4b02      	ldr	r3, [pc, #8]	; (80043f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	0e1b      	lsrs	r3, r3, #24
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	e00a      	b.n	800440e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80043f8:	46020c00 	.word	0x46020c00
 80043fc:	00f42400 	.word	0x00f42400
 8004400:	4bb0      	ldr	r3, [pc, #704]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	0e1b      	lsrs	r3, r3, #24
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	4aae      	ldr	r2, [pc, #696]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8004410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
 8004416:	e003      	b.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800441c:	f000 bc6f 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004420:	f000 bc6d 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADCDAC:

        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004424:	4ba7      	ldr	r3, [pc, #668]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800442a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800442e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004436:	d104      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        {
          frequency = HAL_RCC_GetSysClockFreq();
 8004438:	f7fe f91c 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800443c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADC */
        else
        {
          frequency = 0U;
        }
        break;
 800443e:	f000 bc5e 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004448:	d108      	bne.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800444a:	f107 0318 	add.w	r3, r7, #24
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f89e 	bl	8003590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004458:	f000 bc51 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetHCLKFreq();
 8004462:	f7fe fa0f 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 8004466:	6378      	str	r0, [r7, #52]	; 0x34
          break;
 8004468:	f000 bc49 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004472:	d118      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004474:	4b93      	ldr	r3, [pc, #588]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8004480:	4b90      	ldr	r3, [pc, #576]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	0f1b      	lsrs	r3, r3, #28
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	e006      	b.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 800448c:	4b8d      	ldr	r3, [pc, #564]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800448e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	0f1b      	lsrs	r3, r3, #28
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	4a8b      	ldr	r2, [pc, #556]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800449c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80044a2:	f000 bc2c 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80044a6:	4b87      	ldr	r3, [pc, #540]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044b2:	d106      	bne.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80044ba:	d102      	bne.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          frequency = HSE_VALUE;
 80044bc:	4b83      	ldr	r3, [pc, #524]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 80044be:	637b      	str	r3, [r7, #52]	; 0x34
 80044c0:	e011      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80044c2:	4b80      	ldr	r3, [pc, #512]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ce:	d106      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d6:	d102      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          frequency = HSI_VALUE;
 80044d8:	4b7c      	ldr	r3, [pc, #496]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
 80044dc:	e003      	b.n	80044e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          frequency = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80044e2:	f000 bc0c 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80044e6:	f000 bc0a 	b.w	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_MDF1:
        /* Get the current MDF1 source */
        srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80044ea:	4b76      	ldr	r3, [pc, #472]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80044ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	633b      	str	r3, [r7, #48]	; 0x30
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d83d      	bhi.n	8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004539 	.word	0x08004539
 8004508:	08004519 	.word	0x08004519
 800450c:	08004529 	.word	0x08004529
 8004510:	08004541 	.word	0x08004541
 8004514:	08004549 	.word	0x08004549

        switch (srcclk)
        {
          case RCC_MDF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800451c:	4618      	mov	r0, r3
 800451e:	f7fe fed1 	bl	80032c4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004526:	e02a      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff f995 	bl	800385c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004536:	e022      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 8004538:	f7fe f9a4 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 800453c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800453e:	e01e      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004540:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004544:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004546:	e01a      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004548:	4b5e      	ldr	r3, [pc, #376]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004554:	4b5b      	ldr	r3, [pc, #364]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	0e1b      	lsrs	r3, r3, #24
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	e006      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8004560:	4b58      	ldr	r3, [pc, #352]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	0e1b      	lsrs	r3, r3, #24
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	4a56      	ldr	r2, [pc, #344]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8004570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004576:	e002      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          default:

            frequency = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800457c:	bf00      	nop

        }
        break;
 800457e:	e3be      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADF1:
        /* Get the current ADF1 source */
        srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004580:	4b50      	ldr	r3, [pc, #320]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004586:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800458a:	633b      	str	r3, [r7, #48]	; 0x30
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004592:	d032      	beq.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800459a:	d846      	bhi.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045a2:	d026      	beq.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045aa:	d83e      	bhi.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045b2:	d012      	beq.n	80045da <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045ba:	d836      	bhi.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d013      	beq.n	80045ea <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d12f      	bne.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0xb02>

        switch (srcclk)
        {
          case RCC_ADF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe fe78 	bl	80032c4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80045d8:	e02a      	b.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045da:	f107 030c 	add.w	r3, r7, #12
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff f93c 	bl	800385c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80045e8:	e022      	b.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 80045ea:	f7fe f94b 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80045ee:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80045f0:	e01e      	b.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80045f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80045f8:	e01a      	b.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80045fa:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8004606:	4b2f      	ldr	r3, [pc, #188]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0e1b      	lsrs	r3, r3, #24
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	e006      	b.n	8004620 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8004612:	4b2c      	ldr	r3, [pc, #176]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	0e1b      	lsrs	r3, r3, #24
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	4a29      	ldr	r2, [pc, #164]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 8004622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004628:	e002      	b.n	8004630 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          default:

            frequency = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800462e:	bf00      	nop
        }
        break;
 8004630:	e365      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800463c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004644:	f7fe f938 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8004648:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800464a:	e358      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004652:	d103      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetSysClockFreq();
 8004654:	f7fe f80e 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004658:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800465a:	e350      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800465c:	4b19      	ldr	r3, [pc, #100]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004668:	d106      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 800466a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d102      	bne.n	8004678 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HSI_VALUE;
 8004672:	4b16      	ldr	r3, [pc, #88]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004676:	e342      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800467c:	e33f      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800467e:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004684:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004688:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004690:	f7fe f912 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8004694:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004696:	e332      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800469e:	d103      	bne.n	80046a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          frequency = HAL_RCC_GetSysClockFreq();
 80046a0:	f7fd ffe8 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 80046a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80046a6:	e32a      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80046a8:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b4:	d10c      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046bc:	d108      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
          frequency = HSI_VALUE;
 80046be:	4b03      	ldr	r3, [pc, #12]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046c2:	e31c      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80046c4:	46020c00 	.word	0x46020c00
 80046c8:	08005a80 	.word	0x08005a80
 80046cc:	00f42400 	.word	0x00f42400
          frequency = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046d4:	e313      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80046d6:	4ba9      	ldr	r3, [pc, #676]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80046d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046e0:	633b      	str	r3, [r7, #48]	; 0x30
 80046e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e4:	2bc0      	cmp	r3, #192	; 0xc0
 80046e6:	d024      	beq.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80046e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ea:	2bc0      	cmp	r3, #192	; 0xc0
 80046ec:	d839      	bhi.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	2b80      	cmp	r3, #128	; 0x80
 80046f2:	d00d      	beq.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	2b80      	cmp	r3, #128	; 0x80
 80046f8:	d833      	bhi.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d011      	beq.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 8004706:	e02c      	b.n	8004762 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>

        switch (srcclk)
        {
          case RCC_I2C3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004708:	f7fe f8fe 	bl	8002908 <HAL_RCC_GetPCLK3Freq>
 800470c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800470e:	e02b      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_HSI:
          {
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004710:	4b9a      	ldr	r3, [pc, #616]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800471c:	d102      	bne.n	8004724 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
            {
              frequency = HSI_VALUE;
 800471e:	4b98      	ldr	r3, [pc, #608]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8004722:	e021      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004728:	e01e      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_SYSCLK:
          {
            frequency = HAL_RCC_GetSysClockFreq();
 800472a:	f7fd ffa3 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 800472e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004730:	e01a      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_MSIK:
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004732:	4b92      	ldr	r3, [pc, #584]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800473e:	4b8f      	ldr	r3, [pc, #572]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	0f1b      	lsrs	r3, r3, #28
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	e006      	b.n	8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
 800474a:	4b8c      	ldr	r3, [pc, #560]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800474c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004750:	041b      	lsls	r3, r3, #16
 8004752:	0f1b      	lsrs	r3, r3, #28
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	4a8a      	ldr	r2, [pc, #552]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 800475a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004760:	e002      	b.n	8004768 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          default:
          {
            frequency = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004766:	bf00      	nop
          }
        }
        break;
 8004768:	e2c9      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800476a:	4b84      	ldr	r3, [pc, #528]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800476c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004770:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004774:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	2b00      	cmp	r3, #0
 800477a:	d103      	bne.n	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800477c:	f7fe f89c 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8004780:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8004782:	e2bc      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8004784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004786:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800478a:	d103      	bne.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
          frequency = HAL_RCC_GetSysClockFreq();
 800478c:	f7fd ff72 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004790:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004792:	e2b4      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8004794:	4b79      	ldr	r3, [pc, #484]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a0:	d106      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a8:	d102      	bne.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
          frequency = HSI_VALUE;
 80047aa:	4b75      	ldr	r3, [pc, #468]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047ae:	e2a6      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80047b4:	e2a3      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM34:
        /* Get the current LPTIM34 source */
        srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80047b6:	4b71      	ldr	r3, [pc, #452]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80047b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80047bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d117      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047c8:	4b6c      	ldr	r3, [pc, #432]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 80047d4:	4b69      	ldr	r3, [pc, #420]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	0e1b      	lsrs	r3, r3, #24
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	e006      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
 80047e0:	4b66      	ldr	r3, [pc, #408]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80047e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047e6:	041b      	lsls	r3, r3, #16
 80047e8:	0e1b      	lsrs	r3, r3, #24
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	4a65      	ldr	r2, [pc, #404]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM34 */
        else
        {
          frequency = 0U;
        }
        break;
 80047f6:	e282      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80047f8:	4b60      	ldr	r3, [pc, #384]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80047fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004806:	d107      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 8004808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800480e:	d103      	bne.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
          frequency = LSI_VALUE;
 8004810:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
 8004816:	e01f      	b.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004818:	4b58      	ldr	r3, [pc, #352]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004824:	d106      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482c:	d102      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
          frequency = HSI_VALUE;
 800482e:	4b54      	ldr	r3, [pc, #336]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
 8004832:	e011      	b.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004834:	4b51      	ldr	r3, [pc, #324]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b02      	cmp	r3, #2
 8004840:	d107      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004848:	d103      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = LSE_VALUE;
 800484a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484e:	637b      	str	r3, [r7, #52]	; 0x34
 8004850:	e002      	b.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
          frequency = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004856:	e252      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004858:	e251      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800485a:	4b48      	ldr	r3, [pc, #288]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800485c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004860:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004864:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	2b00      	cmp	r3, #0
 800486a:	d117      	bne.n	800489c <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800486c:	4b43      	ldr	r3, [pc, #268]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
 8004878:	4b40      	ldr	r3, [pc, #256]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	0e1b      	lsrs	r3, r3, #24
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	e006      	b.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
 8004884:	4b3d      	ldr	r3, [pc, #244]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004886:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800488a:	041b      	lsls	r3, r3, #16
 800488c:	0e1b      	lsrs	r3, r3, #24
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	4a3c      	ldr	r2, [pc, #240]	; (8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 8004894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004898:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM1 */
        else
        {
          frequency = 0U;
        }
        break;
 800489a:	e230      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800489c:	4b37      	ldr	r3, [pc, #220]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800489e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048aa:	d107      	bne.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048b2:	d103      	bne.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
          frequency = LSI_VALUE;
 80048b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
 80048ba:	e01f      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80048bc:	4b2f      	ldr	r3, [pc, #188]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c8:	d106      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d0:	d102      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
          frequency = HSI_VALUE;
 80048d2:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 80048d4:	637b      	str	r3, [r7, #52]	; 0x34
 80048d6:	e011      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80048d8:	4b28      	ldr	r3, [pc, #160]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80048da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d107      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048ec:	d103      	bne.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
          frequency = LSE_VALUE;
 80048ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
 80048f4:	e002      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
          frequency = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048fa:	e200      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80048fc:	e1ff      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80048fe:	4b1f      	ldr	r3, [pc, #124]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004904:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004908:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004910:	f7fd ffd2 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8004914:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004916:	e1f2      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800491a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800491e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004926:	d107      	bne.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800492e:	d103      	bne.n	8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
          frequency = LSI_VALUE;
 8004930:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
 8004936:	e01f      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004938:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004944:	d106      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004948:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800494c:	d102      	bne.n	8004954 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HSI_VALUE;
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 8004950:	637b      	str	r3, [r7, #52]	; 0x34
 8004952:	e011      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d107      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004968:	d103      	bne.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSE_VALUE;
 800496a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800496e:	637b      	str	r3, [r7, #52]	; 0x34
 8004970:	e002      	b.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
          frequency = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004976:	e1c2      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004978:	e1c1      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800497a:	bf00      	nop
 800497c:	46020c00 	.word	0x46020c00
 8004980:	00f42400 	.word	0x00f42400
 8004984:	08005a80 	.word	0x08005a80

      case RCC_PERIPHCLK_FDCAN1:
        /* Get the current FDCAN1 kernel source */
        srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004988:	4bb0      	ldr	r3, [pc, #704]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800498a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800498e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004992:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004994:	4bad      	ldr	r3, [pc, #692]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049a0:	d105      	bne.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d102      	bne.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
        {
          frequency = HSE_VALUE;
 80049a8:	4ba9      	ldr	r3, [pc, #676]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN1 */
        else
        {
          frequency = 0U;
        }
        break;
 80049ac:	e1a7      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049b4:	d107      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fc82 	bl	80032c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049c4:	e19b      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049cc:	d107      	bne.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ce:	f107 0318 	add.w	r3, r7, #24
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fddc 	bl	8003590 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049dc:	e18f      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80049e2:	e18c      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80049e4:	4b99      	ldr	r3, [pc, #612]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80049ee:	633b      	str	r3, [r7, #48]	; 0x30
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049f6:	d028      	beq.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
 80049f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049fe:	d83c      	bhi.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a06:	d013      	beq.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8004a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a0e:	d834      	bhi.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a1c:	d004      	beq.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 8004a1e:	e02c      	b.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PCLK2:

            frequency = HAL_RCC_GetPCLK2Freq();
 8004a20:	f7fd ff5e 	bl	80028e0 <HAL_RCC_GetPCLK2Freq>
 8004a24:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004a26:	e02b      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8004a28:	f7fd fe24 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004a2c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004a2e:	e027      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a30:	4b86      	ldr	r3, [pc, #536]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3c:	d102      	bne.n	8004a44 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
            {
              frequency = HSI_VALUE;
 8004a3e:	4b84      	ldr	r3, [pc, #528]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8004a42:	e01d      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
              frequency = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004a48:	e01a      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004a4a:	4b80      	ldr	r3, [pc, #512]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8004a56:	4b7d      	ldr	r3, [pc, #500]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	0e1b      	lsrs	r3, r3, #24
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	e006      	b.n	8004a70 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8004a62:	4b7a      	ldr	r3, [pc, #488]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	0e1b      	lsrs	r3, r3, #24
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	4a78      	ldr	r2, [pc, #480]	; (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8004a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004a78:	e002      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          default:

            frequency = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004a7e:	bf00      	nop

        }
        break;
 8004a80:	e13d      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004a82:	4b72      	ldr	r3, [pc, #456]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a94:	d028      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc0>
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a9c:	d83c      	bhi.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aa4:	d013      	beq.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aac:	d834      	bhi.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0xf96>
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aba:	d004      	beq.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 8004abc:	e02c      	b.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PCLK1:

            frequency = HAL_RCC_GetPCLK1Freq();
 8004abe:	f7fd fefb 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8004ac2:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004ac4:	e02b      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8004ac6:	f7fd fdd5 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004aca:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004acc:	e027      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ace:	4b5f      	ldr	r3, [pc, #380]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ada:	d102      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            {
              frequency = HSI_VALUE;
 8004adc:	4b5c      	ldr	r3, [pc, #368]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8004ade:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8004ae0:	e01d      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xff6>
              frequency = 0U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004ae6:	e01a      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004ae8:	4b58      	ldr	r3, [pc, #352]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8004af4:	4b55      	ldr	r3, [pc, #340]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	0e1b      	lsrs	r3, r3, #24
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	e006      	b.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
 8004b00:	4b52      	ldr	r3, [pc, #328]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	0e1b      	lsrs	r3, r3, #24
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	4a51      	ldr	r2, [pc, #324]	; (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8004b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004b16:	e002      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          default:

            frequency = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004b1c:	bf00      	nop

        }
        break;
 8004b1e:	e0ee      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004b20:	4b4a      	ldr	r3, [pc, #296]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b26:	f003 0318 	and.w	r3, r3, #24
 8004b2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2e:	2b18      	cmp	r3, #24
 8004b30:	d861      	bhi.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b9d 	.word	0x08004b9d
 8004b3c:	08004bf7 	.word	0x08004bf7
 8004b40:	08004bf7 	.word	0x08004bf7
 8004b44:	08004bf7 	.word	0x08004bf7
 8004b48:	08004bf7 	.word	0x08004bf7
 8004b4c:	08004bf7 	.word	0x08004bf7
 8004b50:	08004bf7 	.word	0x08004bf7
 8004b54:	08004bf7 	.word	0x08004bf7
 8004b58:	08004ba5 	.word	0x08004ba5
 8004b5c:	08004bf7 	.word	0x08004bf7
 8004b60:	08004bf7 	.word	0x08004bf7
 8004b64:	08004bf7 	.word	0x08004bf7
 8004b68:	08004bf7 	.word	0x08004bf7
 8004b6c:	08004bf7 	.word	0x08004bf7
 8004b70:	08004bf7 	.word	0x08004bf7
 8004b74:	08004bf7 	.word	0x08004bf7
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bf7 	.word	0x08004bf7
 8004b80:	08004bf7 	.word	0x08004bf7
 8004b84:	08004bf7 	.word	0x08004bf7
 8004b88:	08004bf7 	.word	0x08004bf7
 8004b8c:	08004bf7 	.word	0x08004bf7
 8004b90:	08004bf7 	.word	0x08004bf7
 8004b94:	08004bf7 	.word	0x08004bf7
 8004b98:	08004bc7 	.word	0x08004bc7
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PCLK3:

            frequency = HAL_RCC_GetPCLK3Freq();
 8004b9c:	f7fd feb4 	bl	8002908 <HAL_RCC_GetPCLK3Freq>
 8004ba0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004ba2:	e02b      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8004ba4:	f7fd fd66 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004ba8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004baa:	e027      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004bac:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d102      	bne.n	8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
            {
              frequency = HSI_VALUE;
 8004bba:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8004bbc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8004bbe:	e01d      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
              frequency = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004bc4:	e01a      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004bc6:	4b21      	ldr	r3, [pc, #132]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x10b6>
 8004bd2:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0e1b      	lsrs	r3, r3, #24
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8004bde:	4b1b      	ldr	r3, [pc, #108]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	0e1b      	lsrs	r3, r3, #24
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 8004bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004bf4:	e002      	b.n	8004bfc <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          default:

            frequency = 0U;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004bfa:	bf00      	nop
        }
        break;
 8004bfc:	e07f      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004c00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c04:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c08:	633b      	str	r3, [r7, #48]	; 0x30
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c10:	d013      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c18:	d842      	bhi.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c20:	d01a      	beq.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c28:	d83a      	bhi.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d01b      	beq.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1140>
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c36:	d01b      	beq.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1148>
 8004c38:	e032      	b.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_PLL2:

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c3a:	f107 0318 	add.w	r3, r7, #24
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fca6 	bl	8003590 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c48:	e02d      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8004c4a:	bf00      	nop
 8004c4c:	46020c00 	.word	0x46020c00
 8004c50:	00f42400 	.word	0x00f42400
 8004c54:	08005a80 	.word	0x08005a80

          case RCC_OSPICLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fb31 	bl	80032c4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c66:	e01e      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8004c68:	f7fd fd04 	bl	8002674 <HAL_RCC_GetSysClockFreq>
 8004c6c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004c6e:	e01a      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	0e1b      	lsrs	r3, r3, #24
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	e006      	b.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
 8004c88:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8004c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	0e1b      	lsrs	r3, r3, #24
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 8004c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          default:

            frequency = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004ca4:	bf00      	nop
        }
        break;
 8004ca6:	e02a      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_DAC1:
        /* Get the current DAC1 kernel source */
        srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004ca8:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8004caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb2:	633b      	str	r3, [r7, #48]	; 0x30
        /* Check if LSE is ready and if DAC1 clock selection is LSE */
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8004cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d106      	bne.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        {
          frequency = LSE_VALUE;
 8004cc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cce:	e012      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Check if LSI is ready and if DAC1 clock selection is LSI */
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 8004cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cde:	d107      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce6:	d103      	bne.n	8004cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
        {
          frequency = LSI_VALUE;
 8004ce8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
 8004cee:	e002      	b.n	8004cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Clock not enabled for DAC1*/
        else
        {
          frequency = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8004cf4:	e003      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004cf6:	e002      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      default:
         frequency = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cfc:	bf00      	nop
    }
  }
  return (frequency);
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3738      	adds	r7, #56	; 0x38
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	46020c00 	.word	0x46020c00
 8004d0c:	08005a80 	.word	0x08005a80

08004d10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004d18:	4b47      	ldr	r3, [pc, #284]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a46      	ldr	r2, [pc, #280]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004d1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d22:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d24:	f7fb ffde 	bl	8000ce4 <HAL_GetTick>
 8004d28:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d2c:	f7fb ffda 	bl	8000ce4 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e077      	b.n	8004e2e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d3e:	4b3e      	ldr	r3, [pc, #248]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d52:	f023 0303 	bic.w	r3, r3, #3
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6811      	ldr	r1, [r2, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6852      	ldr	r2, [r2, #4]
 8004d5e:	3a01      	subs	r2, #1
 8004d60:	0212      	lsls	r2, r2, #8
 8004d62:	430a      	orrs	r2, r1
 8004d64:	4934      	ldr	r1, [pc, #208]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004d6a:	4b33      	ldr	r3, [pc, #204]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d6e:	4b33      	ldr	r3, [pc, #204]	; (8004e3c <RCCEx_PLL2_Config+0x12c>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6892      	ldr	r2, [r2, #8]
 8004d76:	3a01      	subs	r2, #1
 8004d78:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	68d2      	ldr	r2, [r2, #12]
 8004d80:	3a01      	subs	r2, #1
 8004d82:	0252      	lsls	r2, r2, #9
 8004d84:	b292      	uxth	r2, r2
 8004d86:	4311      	orrs	r1, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6912      	ldr	r2, [r2, #16]
 8004d8c:	3a01      	subs	r2, #1
 8004d8e:	0412      	lsls	r2, r2, #16
 8004d90:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004d94:	4311      	orrs	r1, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6952      	ldr	r2, [r2, #20]
 8004d9a:	3a01      	subs	r2, #1
 8004d9c:	0612      	lsls	r2, r2, #24
 8004d9e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004da2:	430a      	orrs	r2, r1
 8004da4:	4924      	ldr	r1, [pc, #144]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004daa:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	f023 020c 	bic.w	r2, r3, #12
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	4920      	ldr	r1, [pc, #128]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004dbc:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	491c      	ldr	r1, [pc, #112]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8004dca:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	4a1a      	ldr	r2, [pc, #104]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004dd0:	f023 0310 	bic.w	r3, r3, #16
 8004dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dd6:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dde:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	69d2      	ldr	r2, [r2, #28]
 8004de6:	00d2      	lsls	r2, r2, #3
 8004de8:	4913      	ldr	r1, [pc, #76]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	4a11      	ldr	r2, [pc, #68]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004df4:	f043 0310 	orr.w	r3, r3, #16
 8004df8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a0e      	ldr	r2, [pc, #56]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004e00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e04:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e06:	f7fb ff6d 	bl	8000ce4 <HAL_GetTick>
 8004e0a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e0c:	e008      	b.n	8004e20 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e0e:	f7fb ff69 	bl	8000ce4 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e006      	b.n	8004e2e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <RCCEx_PLL2_Config+0x128>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0

}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	46020c00 	.word	0x46020c00
 8004e3c:	80800000 	.word	0x80800000

08004e40 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters N & P & optionally M as well as PLL3 output clock(s)
  * @note   PLL3 is temporary disable to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004e48:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a46      	ldr	r2, [pc, #280]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e52:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e54:	f7fb ff46 	bl	8000ce4 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e5a:	e008      	b.n	8004e6e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e5c:	f7fb ff42 	bl	8000ce4 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e077      	b.n	8004f5e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e6e:	4b3e      	ldr	r3, [pc, #248]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f0      	bne.n	8004e5c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004e7a:	4b3b      	ldr	r3, [pc, #236]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6811      	ldr	r1, [r2, #0]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6852      	ldr	r2, [r2, #4]
 8004e8e:	3a01      	subs	r2, #1
 8004e90:	0212      	lsls	r2, r2, #8
 8004e92:	430a      	orrs	r2, r1
 8004e94:	4934      	ldr	r1, [pc, #208]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	630b      	str	r3, [r1, #48]	; 0x30
 8004e9a:	4b33      	ldr	r3, [pc, #204]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9e:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <RCCEx_PLL3_Config+0x12c>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	6892      	ldr	r2, [r2, #8]
 8004ea6:	3a01      	subs	r2, #1
 8004ea8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68d2      	ldr	r2, [r2, #12]
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	0252      	lsls	r2, r2, #9
 8004eb4:	b292      	uxth	r2, r2
 8004eb6:	4311      	orrs	r1, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6912      	ldr	r2, [r2, #16]
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0412      	lsls	r2, r2, #16
 8004ec0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004ec4:	4311      	orrs	r1, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6952      	ldr	r2, [r2, #20]
 8004eca:	3a01      	subs	r2, #1
 8004ecc:	0612      	lsls	r2, r2, #24
 8004ece:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	4924      	ldr	r1, [pc, #144]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004eda:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ede:	f023 020c 	bic.w	r2, r3, #12
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	4920      	ldr	r1, [pc, #128]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004eec:	4b1e      	ldr	r3, [pc, #120]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	491c      	ldr	r1, [pc, #112]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	4a1a      	ldr	r2, [pc, #104]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004f00:	f023 0310 	bic.w	r3, r3, #16
 8004f04:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	69d2      	ldr	r2, [r2, #28]
 8004f16:	00d2      	lsls	r2, r2, #3
 8004f18:	4913      	ldr	r1, [pc, #76]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	4a11      	ldr	r2, [pc, #68]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004f24:	f043 0310 	orr.w	r3, r3, #16
 8004f28:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004f2a:	4b0f      	ldr	r3, [pc, #60]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a0e      	ldr	r2, [pc, #56]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f34:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f36:	f7fb fed5 	bl	8000ce4 <HAL_GetTick>
 8004f3a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f3c:	e008      	b.n	8004f50 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f3e:	f7fb fed1 	bl	8000ce4 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e006      	b.n	8004f5e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f50:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <RCCEx_PLL3_Config+0x128>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d0f0      	beq.n	8004f3e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	46020c00 	.word	0x46020c00
 8004f6c:	80800000 	.word	0x80800000

08004f70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e042      	b.n	8005008 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fb fd9f 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2224      	movs	r2, #36	; 0x24
 8004f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0201 	bic.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f8c2 	bl	800513c <UART_SetConfig>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e022      	b.n	8005008 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa38 	bl	8005440 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	689a      	ldr	r2, [r3, #8]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fabf 	bl	8005584 <UART_CheckIdleState>
 8005006:	4603      	mov	r3, r0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08a      	sub	sp, #40	; 0x28
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005026:	2b20      	cmp	r3, #32
 8005028:	f040 8083 	bne.w	8005132 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_UART_Transmit+0x28>
 8005032:	88fb      	ldrh	r3, [r7, #6]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e07b      	b.n	8005134 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_UART_Transmit+0x3a>
 8005046:	2302      	movs	r3, #2
 8005048:	e074      	b.n	8005134 <HAL_UART_Transmit+0x124>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2221      	movs	r2, #33	; 0x21
 800505e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005062:	f7fb fe3f 	bl	8000ce4 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005080:	d108      	bne.n	8005094 <HAL_UART_Transmit+0x84>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d104      	bne.n	8005094 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	e003      	b.n	800509c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80050a4:	e02c      	b.n	8005100 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2200      	movs	r2, #0
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 fab2 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e039      	b.n	8005134 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10b      	bne.n	80050de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	461a      	mov	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	3302      	adds	r3, #2
 80050da:	61bb      	str	r3, [r7, #24]
 80050dc:	e007      	b.n	80050ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	781a      	ldrb	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	3301      	adds	r3, #1
 80050ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005106:	b29b      	uxth	r3, r3
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1cc      	bne.n	80050a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2200      	movs	r2, #0
 8005114:	2140      	movs	r1, #64	; 0x40
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 fa7f 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e006      	b.n	8005134 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800513c:	b5b0      	push	{r4, r5, r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	77fb      	strb	r3, [r7, #31]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a94      	ldr	r2, [pc, #592]	; (80053a0 <UART_SetConfig+0x264>)
 800514e:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	431a      	orrs	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69db      	ldr	r3, [r3, #28]
 8005164:	4313      	orrs	r3, r2
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b8d      	ldr	r3, [pc, #564]	; (80053a4 <UART_SetConfig+0x268>)
 8005170:	4013      	ands	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005178:	430b      	orrs	r3, r1
 800517a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a80      	ldr	r2, [pc, #512]	; (80053a0 <UART_SetConfig+0x264>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d009      	beq.n	80051b6 <UART_SetConfig+0x7a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a80      	ldr	r2, [pc, #512]	; (80053a8 <UART_SetConfig+0x26c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	4313      	orrs	r3, r2
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80051c0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051ca:	430b      	orrs	r3, r1
 80051cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	f023 010f 	bic.w	r1, r3, #15
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a70      	ldr	r2, [pc, #448]	; (80053ac <UART_SetConfig+0x270>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d102      	bne.n	80051f4 <UART_SetConfig+0xb8>
 80051ee:	2301      	movs	r3, #1
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	e029      	b.n	8005248 <UART_SetConfig+0x10c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a6d      	ldr	r2, [pc, #436]	; (80053b0 <UART_SetConfig+0x274>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d102      	bne.n	8005204 <UART_SetConfig+0xc8>
 80051fe:	2302      	movs	r3, #2
 8005200:	623b      	str	r3, [r7, #32]
 8005202:	e021      	b.n	8005248 <UART_SetConfig+0x10c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a6a      	ldr	r2, [pc, #424]	; (80053b4 <UART_SetConfig+0x278>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d102      	bne.n	8005214 <UART_SetConfig+0xd8>
 800520e:	2304      	movs	r3, #4
 8005210:	623b      	str	r3, [r7, #32]
 8005212:	e019      	b.n	8005248 <UART_SetConfig+0x10c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a67      	ldr	r2, [pc, #412]	; (80053b8 <UART_SetConfig+0x27c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d102      	bne.n	8005224 <UART_SetConfig+0xe8>
 800521e:	2308      	movs	r3, #8
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	e011      	b.n	8005248 <UART_SetConfig+0x10c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a64      	ldr	r2, [pc, #400]	; (80053bc <UART_SetConfig+0x280>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d102      	bne.n	8005234 <UART_SetConfig+0xf8>
 800522e:	2310      	movs	r3, #16
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	e009      	b.n	8005248 <UART_SetConfig+0x10c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a59      	ldr	r2, [pc, #356]	; (80053a0 <UART_SetConfig+0x264>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d102      	bne.n	8005244 <UART_SetConfig+0x108>
 800523e:	2320      	movs	r3, #32
 8005240:	623b      	str	r3, [r7, #32]
 8005242:	e001      	b.n	8005248 <UART_SetConfig+0x10c>
 8005244:	2300      	movs	r3, #0
 8005246:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a54      	ldr	r2, [pc, #336]	; (80053a0 <UART_SetConfig+0x264>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <UART_SetConfig+0x120>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a54      	ldr	r2, [pc, #336]	; (80053a8 <UART_SetConfig+0x26c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d163      	bne.n	8005324 <UART_SetConfig+0x1e8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800525c:	6a38      	ldr	r0, [r7, #32]
 800525e:	f7fe fc63 	bl	8003b28 <HAL_RCCEx_GetPeriphCLKFreq>
 8005262:	61b8      	str	r0, [r7, #24]

    /* If proper clock source reported */
    if (pclk != 0U)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 80d4 	beq.w	8005414 <UART_SetConfig+0x2d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005270:	4a53      	ldr	r2, [pc, #332]	; (80053c0 <UART_SetConfig+0x284>)
 8005272:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005276:	461a      	mov	r2, r3
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	fbb3 f3f2 	udiv	r3, r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	4413      	add	r3, r2
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	429a      	cmp	r2, r3
 800528e:	d305      	bcc.n	800529c <UART_SetConfig+0x160>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	429a      	cmp	r2, r3
 800529a:	d902      	bls.n	80052a2 <UART_SetConfig+0x166>
      {
        ret = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	77fb      	strb	r3, [r7, #31]
 80052a0:	e03f      	b.n	8005322 <UART_SetConfig+0x1e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f04f 0100 	mov.w	r1, #0
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	4a44      	ldr	r2, [pc, #272]	; (80053c0 <UART_SetConfig+0x284>)
 80052b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	f04f 0300 	mov.w	r3, #0
 80052ba:	f7fa ffe3 	bl	8000284 <__aeabi_uldivmod>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4610      	mov	r0, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	020b      	lsls	r3, r1, #8
 80052d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052d4:	0202      	lsls	r2, r0, #8
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	6849      	ldr	r1, [r1, #4]
 80052da:	0849      	lsrs	r1, r1, #1
 80052dc:	4608      	mov	r0, r1
 80052de:	f04f 0100 	mov.w	r1, #0
 80052e2:	1814      	adds	r4, r2, r0
 80052e4:	eb43 0501 	adc.w	r5, r3, r1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	461a      	mov	r2, r3
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	4620      	mov	r0, r4
 80052f4:	4629      	mov	r1, r5
 80052f6:	f7fa ffc5 	bl	8000284 <__aeabi_uldivmod>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4613      	mov	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005308:	d308      	bcc.n	800531c <UART_SetConfig+0x1e0>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005310:	d204      	bcs.n	800531c <UART_SetConfig+0x1e0>
        {
          huart->Instance->BRR = usartdiv;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	60da      	str	r2, [r3, #12]
 800531a:	e002      	b.n	8005322 <UART_SetConfig+0x1e6>
        }
        else
        {
          ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	77fb      	strb	r3, [r7, #31]
    if (pclk != 0U)
 8005320:	e078      	b.n	8005414 <UART_SetConfig+0x2d8>
 8005322:	e077      	b.n	8005414 <UART_SetConfig+0x2d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532c:	d14a      	bne.n	80053c4 <UART_SetConfig+0x288>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800532e:	6a38      	ldr	r0, [r7, #32]
 8005330:	f7fe fbfa 	bl	8003b28 <HAL_RCCEx_GetPeriphCLKFreq>
 8005334:	61b8      	str	r0, [r7, #24]

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d06b      	beq.n	8005414 <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <UART_SetConfig+0x284>)
 8005342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005346:	461a      	mov	r2, r3
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	fbb3 f3f2 	udiv	r3, r3, r2
 800534e:	005a      	lsls	r2, r3, #1
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	441a      	add	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005360:	b29b      	uxth	r3, r3
 8005362:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b0f      	cmp	r3, #15
 8005368:	d916      	bls.n	8005398 <UART_SetConfig+0x25c>
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005370:	d212      	bcs.n	8005398 <UART_SetConfig+0x25c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f023 030f 	bic.w	r3, r3, #15
 800537a:	827b      	strh	r3, [r7, #18]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	085b      	lsrs	r3, r3, #1
 8005380:	b29b      	uxth	r3, r3
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	b29a      	uxth	r2, r3
 8005388:	8a7b      	ldrh	r3, [r7, #18]
 800538a:	4313      	orrs	r3, r2
 800538c:	827b      	strh	r3, [r7, #18]
        huart->Instance->BRR = brrtemp;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	8a7a      	ldrh	r2, [r7, #18]
 8005394:	60da      	str	r2, [r3, #12]
 8005396:	e03d      	b.n	8005414 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	77fb      	strb	r3, [r7, #31]
 800539c:	e03a      	b.n	8005414 <UART_SetConfig+0x2d8>
 800539e:	bf00      	nop
 80053a0:	46002400 	.word	0x46002400
 80053a4:	cfff69f3 	.word	0xcfff69f3
 80053a8:	56002400 	.word	0x56002400
 80053ac:	40013800 	.word	0x40013800
 80053b0:	40004400 	.word	0x40004400
 80053b4:	40004800 	.word	0x40004800
 80053b8:	40004c00 	.word	0x40004c00
 80053bc:	40005000 	.word	0x40005000
 80053c0:	08005b40 	.word	0x08005b40
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80053c4:	6a38      	ldr	r0, [r7, #32]
 80053c6:	f7fe fbaf 	bl	8003b28 <HAL_RCCEx_GetPeriphCLKFreq>
 80053ca:	61b8      	str	r0, [r7, #24]

    if (pclk != 0U)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d020      	beq.n	8005414 <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	4a19      	ldr	r2, [pc, #100]	; (800543c <UART_SetConfig+0x300>)
 80053d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053dc:	461a      	mov	r2, r3
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	441a      	add	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2b0f      	cmp	r3, #15
 80053fc:	d908      	bls.n	8005410 <UART_SetConfig+0x2d4>
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005404:	d204      	bcs.n	8005410 <UART_SetConfig+0x2d4>
      {
        huart->Instance->BRR = usartdiv;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	60da      	str	r2, [r3, #12]
 800540e:	e001      	b.n	8005414 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	77fb      	strb	r3, [r7, #31]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005430:	7ffb      	ldrb	r3, [r7, #31]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3728      	adds	r7, #40	; 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bdb0      	pop	{r4, r5, r7, pc}
 800543a:	bf00      	nop
 800543c:	08005b40 	.word	0x08005b40

08005440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01a      	beq.n	8005556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800553e:	d10a      	bne.n	8005556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	605a      	str	r2, [r3, #4]
  }
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af02      	add	r7, sp, #8
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005594:	f7fb fba6 	bl	8000ce4 <HAL_GetTick>
 8005598:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d10e      	bne.n	80055c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f82f 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e025      	b.n	8005612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d10e      	bne.n	80055f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055d8:	9300      	str	r3, [sp, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f819 	bl	800561a <UART_WaitOnFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e00f      	b.n	8005612 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b09c      	sub	sp, #112	; 0x70
 800561e:	af00      	add	r7, sp, #0
 8005620:	60f8      	str	r0, [r7, #12]
 8005622:	60b9      	str	r1, [r7, #8]
 8005624:	603b      	str	r3, [r7, #0]
 8005626:	4613      	mov	r3, r2
 8005628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562a:	e0a9      	b.n	8005780 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	f000 80a5 	beq.w	8005780 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005636:	f7fb fb55 	bl	8000ce4 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005642:	429a      	cmp	r2, r3
 8005644:	d302      	bcc.n	800564c <UART_WaitOnFlagUntilTimeout+0x32>
 8005646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005648:	2b00      	cmp	r3, #0
 800564a:	d140      	bne.n	80056ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800565a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800565c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005660:	667b      	str	r3, [r7, #100]	; 0x64
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800566a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800566c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005670:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e6      	bne.n	800564c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3308      	adds	r3, #8
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	663b      	str	r3, [r7, #96]	; 0x60
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3308      	adds	r3, #8
 800569c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800569e:	64ba      	str	r2, [r7, #72]	; 0x48
 80056a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e5      	bne.n	800567e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2220      	movs	r2, #32
 80056be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e069      	b.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d051      	beq.n	8005780 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ea:	d149      	bne.n	8005780 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80056f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800570a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
 8005716:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800571a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800571c:	e841 2300 	strex	r3, r2, [r1]
 8005720:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e6      	bne.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3308      	adds	r3, #8
 800572e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	613b      	str	r3, [r7, #16]
   return(result);
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005748:	623a      	str	r2, [r7, #32]
 800574a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	69f9      	ldr	r1, [r7, #28]
 800574e:	6a3a      	ldr	r2, [r7, #32]
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	61bb      	str	r3, [r7, #24]
   return(result);
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e5      	bne.n	8005728 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2220      	movs	r2, #32
 8005760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e010      	b.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	4013      	ands	r3, r2
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	429a      	cmp	r2, r3
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	461a      	mov	r2, r3
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	429a      	cmp	r2, r3
 800579c:	f43f af46 	beq.w	800562c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3770      	adds	r7, #112	; 0x70
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80057bc:	2302      	movs	r3, #2
 80057be:	e027      	b.n	8005810 <HAL_UARTEx_DisableFifoMode+0x66>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2224      	movs	r2, #36	; 0x24
 80057cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0201 	bic.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005830:	2302      	movs	r3, #2
 8005832:	e02d      	b.n	8005890 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2224      	movs	r2, #36	; 0x24
 8005840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f84f 	bl	8005914 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d101      	bne.n	80058b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80058ac:	2302      	movs	r3, #2
 80058ae:	e02d      	b.n	800590c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2224      	movs	r2, #36	; 0x24
 80058bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0201 	bic.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f811 	bl	8005914 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2220      	movs	r2, #32
 80058fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005920:	2b00      	cmp	r3, #0
 8005922:	d108      	bne.n	8005936 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005934:	e031      	b.n	800599a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005936:	2308      	movs	r3, #8
 8005938:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800593a:	2308      	movs	r3, #8
 800593c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	0e5b      	lsrs	r3, r3, #25
 8005946:	b2db      	uxtb	r3, r3
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	0f5b      	lsrs	r3, r3, #29
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800595e:	7bbb      	ldrb	r3, [r7, #14]
 8005960:	7b3a      	ldrb	r2, [r7, #12]
 8005962:	4911      	ldr	r1, [pc, #68]	; (80059a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005964:	5c8a      	ldrb	r2, [r1, r2]
 8005966:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800596a:	7b3a      	ldrb	r2, [r7, #12]
 800596c:	490f      	ldr	r1, [pc, #60]	; (80059ac <UARTEx_SetNbDataToProcess+0x98>)
 800596e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005970:	fb93 f3f2 	sdiv	r3, r3, r2
 8005974:	b29a      	uxth	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	7b7a      	ldrb	r2, [r7, #13]
 8005980:	4909      	ldr	r1, [pc, #36]	; (80059a8 <UARTEx_SetNbDataToProcess+0x94>)
 8005982:	5c8a      	ldrb	r2, [r1, r2]
 8005984:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005988:	7b7a      	ldrb	r2, [r7, #13]
 800598a:	4908      	ldr	r1, [pc, #32]	; (80059ac <UARTEx_SetNbDataToProcess+0x98>)
 800598c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800598e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005992:	b29a      	uxth	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	08005b58 	.word	0x08005b58
 80059ac:	08005b60 	.word	0x08005b60

080059b0 <__libc_init_array>:
 80059b0:	b570      	push	{r4, r5, r6, lr}
 80059b2:	4d0d      	ldr	r5, [pc, #52]	; (80059e8 <__libc_init_array+0x38>)
 80059b4:	2600      	movs	r6, #0
 80059b6:	4c0d      	ldr	r4, [pc, #52]	; (80059ec <__libc_init_array+0x3c>)
 80059b8:	1b64      	subs	r4, r4, r5
 80059ba:	10a4      	asrs	r4, r4, #2
 80059bc:	42a6      	cmp	r6, r4
 80059be:	d109      	bne.n	80059d4 <__libc_init_array+0x24>
 80059c0:	4d0b      	ldr	r5, [pc, #44]	; (80059f0 <__libc_init_array+0x40>)
 80059c2:	2600      	movs	r6, #0
 80059c4:	4c0b      	ldr	r4, [pc, #44]	; (80059f4 <__libc_init_array+0x44>)
 80059c6:	f000 f81f 	bl	8005a08 <_init>
 80059ca:	1b64      	subs	r4, r4, r5
 80059cc:	10a4      	asrs	r4, r4, #2
 80059ce:	42a6      	cmp	r6, r4
 80059d0:	d105      	bne.n	80059de <__libc_init_array+0x2e>
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d8:	3601      	adds	r6, #1
 80059da:	4798      	blx	r3
 80059dc:	e7ee      	b.n	80059bc <__libc_init_array+0xc>
 80059de:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e2:	3601      	adds	r6, #1
 80059e4:	4798      	blx	r3
 80059e6:	e7f2      	b.n	80059ce <__libc_init_array+0x1e>
 80059e8:	08005b70 	.word	0x08005b70
 80059ec:	08005b70 	.word	0x08005b70
 80059f0:	08005b70 	.word	0x08005b70
 80059f4:	08005b74 	.word	0x08005b74

080059f8 <memset>:
 80059f8:	4402      	add	r2, r0
 80059fa:	4603      	mov	r3, r0
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d100      	bne.n	8005a02 <memset+0xa>
 8005a00:	4770      	bx	lr
 8005a02:	f803 1b01 	strb.w	r1, [r3], #1
 8005a06:	e7f9      	b.n	80059fc <memset+0x4>

08005a08 <_init>:
 8005a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0a:	bf00      	nop
 8005a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0e:	bc08      	pop	{r3}
 8005a10:	469e      	mov	lr, r3
 8005a12:	4770      	bx	lr

08005a14 <_fini>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	bf00      	nop
 8005a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1a:	bc08      	pop	{r3}
 8005a1c:	469e      	mov	lr, r3
 8005a1e:	4770      	bx	lr
