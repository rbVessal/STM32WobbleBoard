
STM32WobbleBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052dc  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005610  08005610  00015610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  08005620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  2000000c  08005629  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000c0  08005629  000200c0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018a5d  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002756  00000000  00000000  00038a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ad8  00000000  00000000  0003b1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000a20  00000000  00000000  0003bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030799  00000000  00000000  0003c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000eac2  00000000  00000000  0006ce89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131457  00000000  00000000  0007b94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001acda2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002bc4  00000000  00000000  001acdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	080054f8 	.word	0x080054f8

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	080054f8 	.word	0x080054f8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b980 	b.w	800058c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	4688      	mov	r8, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	f040 8084 	bne.w	80003bc <__udivmoddi4+0x118>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4617      	mov	r7, r2
 80002b8:	d943      	bls.n	8000342 <__udivmoddi4+0x9e>
 80002ba:	fab2 f282 	clz	r2, r2
 80002be:	b142      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	f1c2 0020 	rsb	r0, r2, #32
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	fa24 f000 	lsr.w	r0, r4, r0
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea40 0801 	orr.w	r8, r0, r1
 80002d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80002d6:	0c23      	lsrs	r3, r4, #16
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fbb8 f6fc 	udiv	r6, r8, ip
 80002e0:	fb0c 8116 	mls	r1, ip, r6, r8
 80002e4:	fb06 f00e 	mul.w	r0, r6, lr
 80002e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ec:	4298      	cmp	r0, r3
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002f0:	18fb      	adds	r3, r7, r3
 80002f2:	f106 31ff 	add.w	r1, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4298      	cmp	r0, r3
 80002fa:	f200 8131 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 80002fe:	460e      	mov	r6, r1
 8000300:	1a19      	subs	r1, r3, r0
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fc 	udiv	r0, r1, ip
 8000308:	fb0c 1110 	mls	r1, ip, r0, r1
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x84>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x82>
 8000320:	45a6      	cmp	lr, r4
 8000322:	f200 811a 	bhi.w	800055a <__udivmoddi4+0x2b6>
 8000326:	4618      	mov	r0, r3
 8000328:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032c:	eba4 040e 	sub.w	r4, r4, lr
 8000330:	2600      	movs	r6, #0
 8000332:	b11d      	cbz	r5, 800033c <__udivmoddi4+0x98>
 8000334:	40d4      	lsrs	r4, r2
 8000336:	2300      	movs	r3, #0
 8000338:	e9c5 4300 	strd	r4, r3, [r5]
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xa2>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f282 	clz	r2, r2
 800034a:	2a00      	cmp	r2, #0
 800034c:	d152      	bne.n	80003f4 <__udivmoddi4+0x150>
 800034e:	1bcb      	subs	r3, r1, r7
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f f887 	uxth.w	r8, r7
 8000358:	2601      	movs	r6, #1
 800035a:	0c21      	lsrs	r1, r4, #16
 800035c:	fbb3 fcfe 	udiv	ip, r3, lr
 8000360:	fb0e 301c 	mls	r0, lr, ip, r3
 8000364:	fb08 f90c 	mul.w	r9, r8, ip
 8000368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800036c:	4589      	cmp	r9, r1
 800036e:	d90b      	bls.n	8000388 <__udivmoddi4+0xe4>
 8000370:	1879      	adds	r1, r7, r1
 8000372:	f10c 33ff 	add.w	r3, ip, #4294967295
 8000376:	bf2c      	ite	cs
 8000378:	2001      	movcs	r0, #1
 800037a:	2000      	movcc	r0, #0
 800037c:	4589      	cmp	r9, r1
 800037e:	d902      	bls.n	8000386 <__udivmoddi4+0xe2>
 8000380:	2800      	cmp	r0, #0
 8000382:	f000 80f0 	beq.w	8000566 <__udivmoddi4+0x2c2>
 8000386:	469c      	mov	ip, r3
 8000388:	eba1 0109 	sub.w	r1, r1, r9
 800038c:	b2a3      	uxth	r3, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb08 f800 	mul.w	r8, r8, r0
 800039a:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800039e:	45a0      	cmp	r8, r4
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x10e>
 80003a2:	193c      	adds	r4, r7, r4
 80003a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x10c>
 80003aa:	45a0      	cmp	r8, r4
 80003ac:	f200 80d2 	bhi.w	8000554 <__udivmoddi4+0x2b0>
 80003b0:	4618      	mov	r0, r3
 80003b2:	eba4 0408 	sub.w	r4, r4, r8
 80003b6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003ba:	e7ba      	b.n	8000332 <__udivmoddi4+0x8e>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x130>
 80003c0:	2d00      	cmp	r5, #0
 80003c2:	f000 80be 	beq.w	8000542 <__udivmoddi4+0x29e>
 80003c6:	2600      	movs	r6, #0
 80003c8:	e9c5 0100 	strd	r0, r1, [r5]
 80003cc:	4630      	mov	r0, r6
 80003ce:	4631      	mov	r1, r6
 80003d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003d4:	fab3 f683 	clz	r6, r3
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d14d      	bne.n	8000478 <__udivmoddi4+0x1d4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	f0c0 80b3 	bcc.w	8000548 <__udivmoddi4+0x2a4>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f240 80b0 	bls.w	8000548 <__udivmoddi4+0x2a4>
 80003e8:	4630      	mov	r0, r6
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a6      	beq.n	800033c <__udivmoddi4+0x98>
 80003ee:	e9c5 4800 	strd	r4, r8, [r5]
 80003f2:	e7a3      	b.n	800033c <__udivmoddi4+0x98>
 80003f4:	4097      	lsls	r7, r2
 80003f6:	f1c2 0320 	rsb	r3, r2, #32
 80003fa:	fa01 f002 	lsl.w	r0, r1, r2
 80003fe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000402:	40d9      	lsrs	r1, r3
 8000404:	fa24 f303 	lsr.w	r3, r4, r3
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	4094      	lsls	r4, r2
 800040e:	4303      	orrs	r3, r0
 8000410:	fbb1 f0fe 	udiv	r0, r1, lr
 8000414:	0c1e      	lsrs	r6, r3, #16
 8000416:	fb0e 1110 	mls	r1, lr, r0, r1
 800041a:	fb00 fc08 	mul.w	ip, r0, r8
 800041e:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000422:	458c      	cmp	ip, r1
 8000424:	d90e      	bls.n	8000444 <__udivmoddi4+0x1a0>
 8000426:	1879      	adds	r1, r7, r1
 8000428:	f100 36ff 	add.w	r6, r0, #4294967295
 800042c:	bf2c      	ite	cs
 800042e:	f04f 0901 	movcs.w	r9, #1
 8000432:	f04f 0900 	movcc.w	r9, #0
 8000436:	458c      	cmp	ip, r1
 8000438:	d903      	bls.n	8000442 <__udivmoddi4+0x19e>
 800043a:	f1b9 0f00 	cmp.w	r9, #0
 800043e:	f000 8096 	beq.w	800056e <__udivmoddi4+0x2ca>
 8000442:	4630      	mov	r0, r6
 8000444:	eba1 010c 	sub.w	r1, r1, ip
 8000448:	b29b      	uxth	r3, r3
 800044a:	fbb1 f6fe 	udiv	r6, r1, lr
 800044e:	fb0e 1116 	mls	r1, lr, r6, r1
 8000452:	fb06 fc08 	mul.w	ip, r6, r8
 8000456:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045a:	458c      	cmp	ip, r1
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x1ca>
 800045e:	1879      	adds	r1, r7, r1
 8000460:	f106 33ff 	add.w	r3, r6, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x1c8>
 8000466:	458c      	cmp	ip, r1
 8000468:	f200 8088 	bhi.w	800057c <__udivmoddi4+0x2d8>
 800046c:	461e      	mov	r6, r3
 800046e:	eba1 030c 	sub.w	r3, r1, ip
 8000472:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000476:	e770      	b.n	800035a <__udivmoddi4+0xb6>
 8000478:	f1c6 0720 	rsb	r7, r6, #32
 800047c:	fa03 f406 	lsl.w	r4, r3, r6
 8000480:	fa02 fc06 	lsl.w	ip, r2, r6
 8000484:	fa01 fe06 	lsl.w	lr, r1, r6
 8000488:	40fa      	lsrs	r2, r7
 800048a:	fa20 f807 	lsr.w	r8, r0, r7
 800048e:	40f9      	lsrs	r1, r7
 8000490:	fa00 f306 	lsl.w	r3, r0, r6
 8000494:	4322      	orrs	r2, r4
 8000496:	ea48 040e 	orr.w	r4, r8, lr
 800049a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800049e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a2:	fa1f f982 	uxth.w	r9, r2
 80004a6:	fbb1 faf8 	udiv	sl, r1, r8
 80004aa:	fb08 111a 	mls	r1, r8, sl, r1
 80004ae:	fb0a f009 	mul.w	r0, sl, r9
 80004b2:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 80004b6:	4570      	cmp	r0, lr
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x234>
 80004ba:	eb12 0e0e 	adds.w	lr, r2, lr
 80004be:	f10a 31ff 	add.w	r1, sl, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0b01 	movcs.w	fp, #1
 80004c8:	f04f 0b00 	movcc.w	fp, #0
 80004cc:	4570      	cmp	r0, lr
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x232>
 80004d0:	f1bb 0f00 	cmp.w	fp, #0
 80004d4:	d04e      	beq.n	8000574 <__udivmoddi4+0x2d0>
 80004d6:	468a      	mov	sl, r1
 80004d8:	ebae 0e00 	sub.w	lr, lr, r0
 80004dc:	b2a4      	uxth	r4, r4
 80004de:	fbbe f0f8 	udiv	r0, lr, r8
 80004e2:	fb08 ee10 	mls	lr, r8, r0, lr
 80004e6:	fb00 f909 	mul.w	r9, r0, r9
 80004ea:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80004ee:	45f1      	cmp	r9, lr
 80004f0:	d907      	bls.n	8000502 <__udivmoddi4+0x25e>
 80004f2:	eb12 0e0e 	adds.w	lr, r2, lr
 80004f6:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fa:	d201      	bcs.n	8000500 <__udivmoddi4+0x25c>
 80004fc:	45f1      	cmp	r9, lr
 80004fe:	d840      	bhi.n	8000582 <__udivmoddi4+0x2de>
 8000500:	4608      	mov	r0, r1
 8000502:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8000506:	ebae 0e09 	sub.w	lr, lr, r9
 800050a:	fba0 890c 	umull	r8, r9, r0, ip
 800050e:	45ce      	cmp	lr, r9
 8000510:	4641      	mov	r1, r8
 8000512:	464c      	mov	r4, r9
 8000514:	d302      	bcc.n	800051c <__udivmoddi4+0x278>
 8000516:	d106      	bne.n	8000526 <__udivmoddi4+0x282>
 8000518:	4543      	cmp	r3, r8
 800051a:	d204      	bcs.n	8000526 <__udivmoddi4+0x282>
 800051c:	3801      	subs	r0, #1
 800051e:	ebb8 010c 	subs.w	r1, r8, ip
 8000522:	eb69 0402 	sbc.w	r4, r9, r2
 8000526:	b37d      	cbz	r5, 8000588 <__udivmoddi4+0x2e4>
 8000528:	1a5a      	subs	r2, r3, r1
 800052a:	eb6e 0e04 	sbc.w	lr, lr, r4
 800052e:	40f2      	lsrs	r2, r6
 8000530:	fa0e f707 	lsl.w	r7, lr, r7
 8000534:	fa2e f306 	lsr.w	r3, lr, r6
 8000538:	2600      	movs	r6, #0
 800053a:	4317      	orrs	r7, r2
 800053c:	e9c5 7300 	strd	r7, r3, [r5]
 8000540:	e6fc      	b.n	800033c <__udivmoddi4+0x98>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e6f9      	b.n	800033c <__udivmoddi4+0x98>
 8000548:	1a84      	subs	r4, r0, r2
 800054a:	eb61 0103 	sbc.w	r1, r1, r3
 800054e:	2001      	movs	r0, #1
 8000550:	4688      	mov	r8, r1
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x146>
 8000554:	3802      	subs	r0, #2
 8000556:	443c      	add	r4, r7
 8000558:	e72b      	b.n	80003b2 <__udivmoddi4+0x10e>
 800055a:	3802      	subs	r0, #2
 800055c:	443c      	add	r4, r7
 800055e:	e6e3      	b.n	8000328 <__udivmoddi4+0x84>
 8000560:	3e02      	subs	r6, #2
 8000562:	443b      	add	r3, r7
 8000564:	e6cc      	b.n	8000300 <__udivmoddi4+0x5c>
 8000566:	f1ac 0c02 	sub.w	ip, ip, #2
 800056a:	4439      	add	r1, r7
 800056c:	e70c      	b.n	8000388 <__udivmoddi4+0xe4>
 800056e:	3802      	subs	r0, #2
 8000570:	4439      	add	r1, r7
 8000572:	e767      	b.n	8000444 <__udivmoddi4+0x1a0>
 8000574:	f1aa 0a02 	sub.w	sl, sl, #2
 8000578:	4496      	add	lr, r2
 800057a:	e7ad      	b.n	80004d8 <__udivmoddi4+0x234>
 800057c:	3e02      	subs	r6, #2
 800057e:	4439      	add	r1, r7
 8000580:	e775      	b.n	800046e <__udivmoddi4+0x1ca>
 8000582:	3802      	subs	r0, #2
 8000584:	4496      	add	lr, r2
 8000586:	e7bc      	b.n	8000502 <__udivmoddi4+0x25e>
 8000588:	462e      	mov	r6, r5
 800058a:	e6d7      	b.n	800033c <__udivmoddi4+0x98>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b2c      	ldr	r3, [pc, #176]	; (8000658 <MX_GPIO_Init+0xc8>)
 80005a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ac:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <MX_GPIO_Init+0xc8>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005b6:	4b28      	ldr	r3, [pc, #160]	; (8000658 <MX_GPIO_Init+0xc8>)
 80005b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <MX_GPIO_Init+0xc8>)
 80005c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005ca:	4a23      	ldr	r2, [pc, #140]	; (8000658 <MX_GPIO_Init+0xc8>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_GPIO_Init+0xc8>)
 80005d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_GPIO_Init+0xc8>)
 80005e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005e8:	4a1b      	ldr	r2, [pc, #108]	; (8000658 <MX_GPIO_Init+0xc8>)
 80005ea:	f043 0301 	orr.w	r3, r3, #1
 80005ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <MX_GPIO_Init+0xc8>)
 80005f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80005f8:	f003 0301 	and.w	r3, r3, #1
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2180      	movs	r1, #128	; 0x80
 8000604:	4815      	ldr	r0, [pc, #84]	; (800065c <MX_GPIO_Init+0xcc>)
 8000606:	f000 fd95 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButtonInterrupt_Pin;
 800060a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <MX_GPIO_Init+0xd0>)
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UserCalibrationButtonInterrupt_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	4619      	mov	r1, r3
 800061e:	4811      	ldr	r0, [pc, #68]	; (8000664 <MX_GPIO_Init+0xd4>)
 8000620:	f000 fbb0 	bl	8000d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationLED_Pin;
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UserCalibrationLED_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	4619      	mov	r1, r3
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <MX_GPIO_Init+0xcc>)
 800063c:	f000 fba2 	bl	8000d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 1, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2101      	movs	r1, #1
 8000644:	2018      	movs	r0, #24
 8000646:	f000 fb68 	bl	8000d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800064a:	2018      	movs	r0, #24
 800064c:	f000 fb7f 	bl	8000d4e <HAL_NVIC_EnableIRQ>

}
 8000650:	bf00      	nop
 8000652:	3720      	adds	r7, #32
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	46020c00 	.word	0x46020c00
 800065c:	42021c00 	.word	0x42021c00
 8000660:	10110000 	.word	0x10110000
 8000664:	42020800 	.word	0x42020800

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 f9f6 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f806 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f7ff ff8c 	bl	8000590 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000678:	f000 f916 	bl	80008a8 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0x14>
	...

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09e      	sub	sp, #120	; 0x78
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2260      	movs	r2, #96	; 0x60
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f004 ff2a 	bl	80054e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]
 80006a2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a4:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80006a8:	f000 fd8e 	bl	80011c8 <HAL_PWREx_ControlVoltageScaling>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006b2:	f000 f86f 	bl	8000794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b6:	2310      	movs	r3, #16
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006be:	2310      	movs	r3, #16
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006cc:	2301      	movs	r3, #1
 80006ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006d8:	2350      	movs	r3, #80	; 0x50
 80006da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0318 	add.w	r3, r7, #24
 80006f4:	4618      	mov	r0, r3
 80006f6:	f000 fdf9 	bl	80012ec <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000700:	f000 f848 	bl	8000794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	231f      	movs	r3, #31
 8000706:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2303      	movs	r3, #3
 800070a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	2104      	movs	r1, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fc53 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800072c:	f000 f832 	bl	8000794 <Error_Handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SystemClock_Config+0xc8>)
 8000732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000736:	4a04      	ldr	r2, [pc, #16]	; (8000748 <SystemClock_Config+0xc8>)
 8000738:	f023 0304 	bic.w	r3, r3, #4
 800073c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000740:	bf00      	nop
 8000742:	3778      	adds	r7, #120	; 0x78
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	46020c00 	.word	0x46020c00

0800074c <HAL_GPIO_EXTI_Rising_Callback>:
// When the button's signal goes from a low to a high state
// which is what happens when you push a button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButtonInterrupt_Pin)
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800075c:	d112      	bne.n	8000784 <HAL_GPIO_EXTI_Rising_Callback+0x38>
	{
		// TODO:  Send data via virtual COM port to bring up or
		// close down the user calibration screen

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d103      	bne.n	800076e <HAL_GPIO_EXTI_Rising_Callback+0x22>
		{
			iIsUserCalibrationLEDOn = 1;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	e002      	b.n	8000774 <HAL_GPIO_EXTI_Rising_Callback+0x28>
		}
		else
		{
			iIsUserCalibrationLEDOn = 0;
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, iIsUserCalibrationLEDOn);
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	2180      	movs	r1, #128	; 0x80
 800077e:	4804      	ldr	r0, [pc, #16]	; (8000790 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8000780:	f000 fcd8 	bl	8001134 <HAL_GPIO_WritePin>
	}
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000028 	.word	0x20000028
 8000790:	42021c00 	.word	0x42021c00

08000794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000798:	b672      	cpsid	i
}
 800079a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079c:	e7fe      	b.n	800079c <Error_Handler+0x8>
	...

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_MspInit+0x30>)
 80007a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <HAL_MspInit+0x30>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_MspInit+0x30>)
 80007b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007c4:	f000 fd82 	bl	80012cc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	46020c00 	.word	0x46020c00

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x4>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000820:	f000 f980 	bl	8000b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButtonInterrupt_Pin);
 800082c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000830:	f000 fc98 	bl	8001164 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}

08000838 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <SystemInit+0x68>)
 800083e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000842:	4a17      	ldr	r2, [pc, #92]	; (80008a0 <SystemInit+0x68>)
 8000844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800084c:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <SystemInit+0x6c>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <SystemInit+0x6c>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <SystemInit+0x6c>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <SystemInit+0x6c>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <SystemInit+0x6c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <SystemInit+0x6c>)
 800086a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800086e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000872:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000874:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <SystemInit+0x6c>)
 8000876:	2200      	movs	r2, #0
 8000878:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <SystemInit+0x6c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <SystemInit+0x6c>)
 8000880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000884:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000886:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <SystemInit+0x6c>)
 8000888:	2200      	movs	r2, #0
 800088a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <SystemInit+0x68>)
 800088e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000892:	609a      	str	r2, [r3, #8]
  #endif
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00
 80008a4:	46020c00 	.word	0x46020c00

080008a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008ac:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008ae:	4a23      	ldr	r2, [pc, #140]	; (800093c <MX_USART1_UART_Init+0x94>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b2:	4b21      	ldr	r3, [pc, #132]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e4:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008f0:	4811      	ldr	r0, [pc, #68]	; (8000938 <MX_USART1_UART_Init+0x90>)
 80008f2:	f004 f94b 	bl	8004b8c <HAL_UART_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008fc:	f7ff ff4a 	bl	8000794 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_USART1_UART_Init+0x90>)
 8000904:	f004 fd02 	bl	800530c <HAL_UARTEx_SetTxFifoThreshold>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800090e:	f7ff ff41 	bl	8000794 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	4808      	ldr	r0, [pc, #32]	; (8000938 <MX_USART1_UART_Init+0x90>)
 8000916:	f004 fd37 	bl	8005388 <HAL_UARTEx_SetRxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000920:	f7ff ff38 	bl	8000794 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_USART1_UART_Init+0x90>)
 8000926:	f004 fcb8 	bl	800529a <HAL_UARTEx_DisableFifoMode>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000930:	f7ff ff30 	bl	8000794 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000002c 	.word	0x2000002c
 800093c:	40013800 	.word	0x40013800

08000940 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0ba      	sub	sp, #232	; 0xe8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	22c0      	movs	r2, #192	; 0xc0
 800095e:	2100      	movs	r1, #0
 8000960:	4618      	mov	r0, r3
 8000962:	f004 fdc1 	bl	80054e8 <memset>
  if(uartHandle->Instance==USART1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a24      	ldr	r2, [pc, #144]	; (80009fc <HAL_UART_MspInit+0xbc>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d141      	bne.n	80009f4 <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000970:	2301      	movs	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000974:	2300      	movs	r3, #0
 8000976:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fe6b 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000988:	f7ff ff04 	bl	8000794 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <HAL_UART_MspInit+0xc0>)
 800098e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000992:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <HAL_UART_MspInit+0xc0>)
 8000994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000998:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <HAL_UART_MspInit+0xc0>)
 800099e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_UART_MspInit+0xc0>)
 80009ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009b0:	4a13      	ldr	r2, [pc, #76]	; (8000a00 <HAL_UART_MspInit+0xc0>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_UART_MspInit+0xc0>)
 80009bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80009c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009e2:	2307      	movs	r3, #7
 80009e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_UART_MspInit+0xc4>)
 80009f0:	f000 f9c8 	bl	8000d84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009f4:	bf00      	nop
 80009f6:	37e8      	adds	r7, #232	; 0xe8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40013800 	.word	0x40013800
 8000a00:	46020c00 	.word	0x46020c00
 8000a04:	42020000 	.word	0x42020000

08000a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a40 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a0e:	e003      	b.n	8000a18 <LoopCopyDataInit>

08000a10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a16:	3104      	adds	r1, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a20:	d3f6      	bcc.n	8000a10 <CopyDataInit>
	ldr	r2, =_sbss
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a24:	e002      	b.n	8000a2c <LoopFillZerobss>

08000a26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a28:	f842 3b04 	str.w	r3, [r2], #4

08000a2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <LoopForever+0x16>)
	cmp	r2, r3
 8000a2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a30:	d3f9      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a32:	f7ff ff01 	bl	8000838 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a36:	f004 fd33 	bl	80054a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3a:	f7ff fe15 	bl	8000668 <main>

08000a3e <LoopForever>:

LoopForever:
    b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000a40:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000a44:	08005620 	.word	0x08005620
	ldr	r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a4c:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000a50:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a54:	200000c0 	.word	0x200000c0

08000a58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_Init+0x4c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_Init+0x4c>)
 8000a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f949 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a72:	f001 fc0d 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8000a76:	4602      	mov	r2, r0
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_Init+0x50>)
 8000a7a:	6a1b      	ldr	r3, [r3, #32]
 8000a7c:	f003 030f 	and.w	r3, r3, #15
 8000a80:	490b      	ldr	r1, [pc, #44]	; (8000ab0 <HAL_Init+0x54>)
 8000a82:	5ccb      	ldrb	r3, [r1, r3]
 8000a84:	fa22 f303 	lsr.w	r3, r2, r3
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x58>)
 8000a8a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8c:	200f      	movs	r0, #15
 8000a8e:	f000 f813 	bl	8000ab8 <HAL_InitTick>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e002      	b.n	8000aa2 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a9c:	f7ff fe80 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40022000 	.word	0x40022000
 8000aac:	46020c00 	.word	0x46020c00
 8000ab0:	08005510 	.word	0x08005510
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_InitTick+0x60>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d101      	bne.n	8000acc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	e021      	b.n	8000b10 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <HAL_InitTick+0x64>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_InitTick+0x60>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f941 	bl	8000d6a <HAL_SYSTICK_Config>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e00e      	b.n	8000b10 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d80a      	bhi.n	8000b0e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	f04f 30ff 	mov.w	r0, #4294967295
 8000b00:	f000 f90b 	bl	8000d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_InitTick+0x68>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	e000      	b.n	8000b10 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000004 	.word	0x20000004

08000b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_IncTick+0x20>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x24>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_IncTick+0x24>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008
 8000b48:	200000bc 	.word	0x200000bc

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <HAL_GetTick+0x14>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	200000bc 	.word	0x200000bc

08000b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b74:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	0a1b      	lsrs	r3, r3, #8
 8000bb6:	f003 0307 	and.w	r3, r3, #7
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db0b      	blt.n	8000bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	f003 021f 	and.w	r2, r3, #31
 8000be0:	4907      	ldr	r1, [pc, #28]	; (8000c00 <__NVIC_EnableIRQ+0x38>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	095b      	lsrs	r3, r3, #5
 8000be8:	2001      	movs	r0, #1
 8000bea:	fa00 f202 	lsl.w	r2, r0, r2
 8000bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000e100 	.word	0xe000e100

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	; (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	; (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	; 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	; 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff29 	bl	8000b64 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff40 	bl	8000bac <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff90 	bl	8000c58 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5f 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff33 	bl	8000bc8 <__NVIC_EnableIRQ>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffa4 	bl	8000cc0 <SysTick_Config>
 8000d78:	4603      	mov	r3, r0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d96:	e1ba      	b.n	800110e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4013      	ands	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 81aa 	beq.w	8001108 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a55      	ldr	r2, [pc, #340]	; (8000f0c <HAL_GPIO_Init+0x188>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d15d      	bne.n	8000e78 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0201 	and.w	r2, r3, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	69fa      	ldr	r2, [r7, #28]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000dec:	4a48      	ldr	r2, [pc, #288]	; (8000f10 <HAL_GPIO_Init+0x18c>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000df4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000df6:	4a46      	ldr	r2, [pc, #280]	; (8000f10 <HAL_GPIO_Init+0x18c>)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	08da      	lsrs	r2, r3, #3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	3208      	adds	r2, #8
 8000e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	220f      	movs	r2, #15
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69fa      	ldr	r2, [r7, #28]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	f003 0307 	and.w	r3, r3, #7
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	220b      	movs	r2, #11
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69f9      	ldr	r1, [r7, #28]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69fa      	ldr	r2, [r7, #28]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	2202      	movs	r2, #2
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69fa      	ldr	r2, [r7, #28]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e067      	b.n	8000f48 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x104>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b12      	cmp	r3, #18
 8000e86:	d145      	bne.n	8000f14 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e94:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	f003 020f 	and.w	r2, r3, #15
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	69fa      	ldr	r2, [r7, #28]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3208      	adds	r2, #8
 8000ece:	69f9      	ldr	r1, [r7, #28]
 8000ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0203 	and.w	r2, r3, #3
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	69fa      	ldr	r2, [r7, #28]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e01e      	b.n	8000f48 <HAL_GPIO_Init+0x1c4>
 8000f0a:	bf00      	nop
 8000f0c:	46020000 	.word	0x46020000
 8000f10:	08005568 	.word	0x08005568
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0203 	and.w	r2, r3, #3
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69fa      	ldr	r2, [r7, #28]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	69fa      	ldr	r2, [r7, #28]
 8000f46:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d00b      	beq.n	8000f68 <HAL_GPIO_Init+0x1e4>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d007      	beq.n	8000f68 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f5c:	2b11      	cmp	r3, #17
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	2b12      	cmp	r3, #18
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	69fa      	ldr	r2, [r7, #28]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	69fa      	ldr	r2, [r7, #28]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b03      	cmp	r3, #3
 8000fd0:	d017      	beq.n	8001002 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	2203      	movs	r2, #3
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69fa      	ldr	r2, [r7, #28]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d07c      	beq.n	8001108 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800100e:	4a47      	ldr	r2, [pc, #284]	; (800112c <HAL_GPIO_Init+0x3a8>)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3318      	adds	r3, #24
 8001016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	220f      	movs	r2, #15
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	4013      	ands	r3, r2
 8001030:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	0a9a      	lsrs	r2, r3, #10
 8001036:	4b3e      	ldr	r3, [pc, #248]	; (8001130 <HAL_GPIO_Init+0x3ac>)
 8001038:	4013      	ands	r3, r2
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	f002 0203 	and.w	r2, r2, #3
 8001040:	00d2      	lsls	r2, r2, #3
 8001042:	4093      	lsls	r3, r2
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	4313      	orrs	r3, r2
 8001048:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800104a:	4938      	ldr	r1, [pc, #224]	; (800112c <HAL_GPIO_Init+0x3a8>)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3318      	adds	r3, #24
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001058:	4b34      	ldr	r3, [pc, #208]	; (800112c <HAL_GPIO_Init+0x3a8>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43db      	mvns	r3, r3
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	4013      	ands	r3, r2
 8001068:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x2fa>
        {
          tmp |= iocurrent;
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800107e:	4a2b      	ldr	r2, [pc, #172]	; (800112c <HAL_GPIO_Init+0x3a8>)
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        tmp = EXTI->EMR1;
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <HAL_GPIO_Init+0x3a8>)
 8001088:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800108c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43db      	mvns	r3, r3
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4013      	ands	r3, r2
 8001096:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x328>
        {
          tmp |= iocurrent;
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80010ac:	4a1f      	ldr	r2, [pc, #124]	; (800112c <HAL_GPIO_Init+0x3a8>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_GPIO_Init+0x3a8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x354>
        {
          tmp |= iocurrent;
 80010d0:	69fa      	ldr	r2, [r7, #28]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <HAL_GPIO_Init+0x3a8>)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <HAL_GPIO_Init+0x3a8>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	4013      	ands	r3, r2
 80010ec:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d003      	beq.n	8001102 <HAL_GPIO_Init+0x37e>
        {
          tmp |= iocurrent;
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_GPIO_Init+0x3a8>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	6053      	str	r3, [r2, #4]
      }
    }
    position++;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa22 f303 	lsr.w	r3, r2, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	f47f ae3d 	bne.w	8000d98 <HAL_GPIO_Init+0x14>
  }
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3724      	adds	r7, #36	; 0x24
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	46022000 	.word	0x46022000
 8001130:	002f7f7f 	.word	0x002f7f7f

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8001150:	e002      	b.n	8001158 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001170:	68da      	ldr	r2, [r3, #12]
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	4013      	ands	r3, r2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800117a:	4a0c      	ldr	r2, [pc, #48]	; (80011ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fae2 	bl	800074c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	4013      	ands	r3, r2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001194:	4a05      	ldr	r2, [pc, #20]	; (80011ac <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f807 	bl	80011b0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	46022000 	.word	0x46022000

080011b0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80011d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011d8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d101      	bne.n	80011e6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e057      	b.n	8001296 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ec:	d90a      	bls.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	4a2a      	ldr	r2, [pc, #168]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80011fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001200:	60d3      	str	r3, [r2, #12]
 8001202:	e007      	b.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800120c:	4925      	ldr	r1, [pc, #148]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4313      	orrs	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is rised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a24      	ldr	r2, [pc, #144]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	099b      	lsrs	r3, r3, #6
 8001220:	2232      	movs	r2, #50	; 0x32
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	4a21      	ldr	r2, [pc, #132]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	099b      	lsrs	r3, r3, #6
 800122e:	3301      	adds	r3, #1
 8001230:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001232:	e002      	b.n	800123a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	3b01      	subs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <HAL_PWREx_ControlVoltageScaling+0x84>
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f3      	bne.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d01b      	beq.n	800128a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is rised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	099b      	lsrs	r3, r3, #6
 800125e:	2232      	movs	r2, #50	; 0x32
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	4a11      	ldr	r2, [pc, #68]	; (80012ac <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001266:	fba2 2303 	umull	r2, r3, r2, r3
 800126a:	099b      	lsrs	r3, r3, #6
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001270:	e002      	b.n	8001278 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3b01      	subs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800127a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f3      	bne.n	8001272 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d101      	bne.n	8001294 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e000      	b.n	8001296 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	46020800 	.word	0x46020800
 80012a8:	20000000 	.word	0x20000000
 80012ac:	10624dd3 	.word	0x10624dd3

080012b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80012b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	46020800 	.word	0x46020800

080012cc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	46020800 	.word	0x46020800

080012ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	f000 be58 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001306:	4ba2      	ldr	r3, [pc, #648]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001310:	4b9f      	ldr	r3, [pc, #636]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001314:	f003 0303 	and.w	r3, r3, #3
 8001318:	627b      	str	r3, [r7, #36]	; 0x24

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0310 	and.w	r3, r3, #16
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 816f 	beq.w	8001606 <HAL_RCC_OscConfig+0x31a>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_RCC_OscConfig+0x52>
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	2b0c      	cmp	r3, #12
 8001332:	f040 80e1 	bne.w	80014f8 <HAL_RCC_OscConfig+0x20c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	2b01      	cmp	r3, #1
 800133a:	f040 80dd 	bne.w	80014f8 <HAL_RCC_OscConfig+0x20c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800133e:	4b94      	ldr	r3, [pc, #592]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_RCC_OscConfig+0x6c>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	f000 be2f 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800135c:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <HAL_RCC_OscConfig+0x86>
 8001368:	4b89      	ldr	r3, [pc, #548]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001370:	e005      	b.n	800137e <HAL_RCC_OscConfig+0x92>
 8001372:	4b87      	ldr	r3, [pc, #540]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800137e:	4293      	cmp	r3, r2
 8001380:	d255      	bcs.n	800142e <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10a      	bne.n	800139e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138c:	4618      	mov	r0, r3
 800138e:	f001 f8dd 	bl	800254c <RCC_SetFlashLatencyFromMSIRange>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	f000 be0c 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800139e:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	4a7b      	ldr	r2, [pc, #492]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80013a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013a8:	6093      	str	r3, [r2, #8]
 80013aa:	4b79      	ldr	r3, [pc, #484]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	4976      	ldr	r1, [pc, #472]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80013c4:	d309      	bcc.n	80013da <HAL_RCC_OscConfig+0xee>
 80013c6:	4b72      	ldr	r3, [pc, #456]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	f023 021f 	bic.w	r2, r3, #31
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	496f      	ldr	r1, [pc, #444]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60cb      	str	r3, [r1, #12]
 80013d8:	e07e      	b.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da0a      	bge.n	80013f8 <HAL_RCC_OscConfig+0x10c>
 80013e2:	4b6b      	ldr	r3, [pc, #428]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	015b      	lsls	r3, r3, #5
 80013f0:	4967      	ldr	r1, [pc, #412]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60cb      	str	r3, [r1, #12]
 80013f6:	e06f      	b.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001400:	d30a      	bcc.n	8001418 <HAL_RCC_OscConfig+0x12c>
 8001402:	4b63      	ldr	r3, [pc, #396]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	029b      	lsls	r3, r3, #10
 8001410:	495f      	ldr	r1, [pc, #380]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001412:	4313      	orrs	r3, r2
 8001414:	60cb      	str	r3, [r1, #12]
 8001416:	e05f      	b.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
 8001418:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	03db      	lsls	r3, r3, #15
 8001426:	495a      	ldr	r1, [pc, #360]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001428:	4313      	orrs	r3, r2
 800142a:	60cb      	str	r3, [r1, #12]
 800142c:	e054      	b.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800142e:	4b58      	ldr	r3, [pc, #352]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4a57      	ldr	r2, [pc, #348]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001438:	6093      	str	r3, [r2, #8]
 800143a:	4b55      	ldr	r3, [pc, #340]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001446:	4952      	ldr	r1, [pc, #328]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001454:	d309      	bcc.n	800146a <HAL_RCC_OscConfig+0x17e>
 8001456:	4b4e      	ldr	r3, [pc, #312]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f023 021f 	bic.w	r2, r3, #31
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	494b      	ldr	r1, [pc, #300]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001464:	4313      	orrs	r3, r2
 8001466:	60cb      	str	r3, [r1, #12]
 8001468:	e028      	b.n	80014bc <HAL_RCC_OscConfig+0x1d0>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	2b00      	cmp	r3, #0
 8001470:	da0a      	bge.n	8001488 <HAL_RCC_OscConfig+0x19c>
 8001472:	4b47      	ldr	r3, [pc, #284]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	015b      	lsls	r3, r3, #5
 8001480:	4943      	ldr	r1, [pc, #268]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001482:	4313      	orrs	r3, r2
 8001484:	60cb      	str	r3, [r1, #12]
 8001486:	e019      	b.n	80014bc <HAL_RCC_OscConfig+0x1d0>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001490:	d30a      	bcc.n	80014a8 <HAL_RCC_OscConfig+0x1bc>
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a1b      	ldr	r3, [r3, #32]
 800149e:	029b      	lsls	r3, r3, #10
 80014a0:	493b      	ldr	r1, [pc, #236]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	60cb      	str	r3, [r1, #12]
 80014a6:	e009      	b.n	80014bc <HAL_RCC_OscConfig+0x1d0>
 80014a8:	4b39      	ldr	r3, [pc, #228]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	03db      	lsls	r3, r3, #15
 80014b6:	4936      	ldr	r1, [pc, #216]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10a      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 f840 	bl	800254c <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f000 bd6f 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80014d8:	f000 ffe2 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <HAL_RCC_OscConfig+0x2a8>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fae9 	bl	8000ab8 <HAL_InitTick>
 80014e6:	4603      	mov	r3, r0
 80014e8:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK)
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8089 	beq.w	8001604 <HAL_RCC_OscConfig+0x318>
        {
          return status;
 80014f2:	7ffb      	ldrb	r3, [r7, #31]
 80014f4:	f000 bd5f 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d066      	beq.n	80015ce <HAL_RCC_OscConfig+0x2e2>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a22      	ldr	r2, [pc, #136]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800150c:	f7ff fb1e 	bl	8000b4c <HAL_GetTick>
 8001510:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001512:	e009      	b.n	8001528 <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001514:	f7ff fb1a 	bl	8000b4c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d902      	bls.n	8001528 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	f000 bd47 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0ef      	beq.n	8001514 <HAL_RCC_OscConfig+0x228>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a15      	ldr	r2, [pc, #84]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800153a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800153e:	6093      	str	r3, [r2, #8]
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	4910      	ldr	r1, [pc, #64]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001556:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800155a:	d309      	bcc.n	8001570 <HAL_RCC_OscConfig+0x284>
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f023 021f 	bic.w	r2, r3, #31
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4909      	ldr	r1, [pc, #36]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800156a:	4313      	orrs	r3, r2
 800156c:	60cb      	str	r3, [r1, #12]
 800156e:	e04a      	b.n	8001606 <HAL_RCC_OscConfig+0x31a>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	2b00      	cmp	r3, #0
 8001576:	da0f      	bge.n	8001598 <HAL_RCC_OscConfig+0x2ac>
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	4902      	ldr	r1, [pc, #8]	; (8001590 <HAL_RCC_OscConfig+0x2a4>)
 8001588:	4313      	orrs	r3, r2
 800158a:	60cb      	str	r3, [r1, #12]
 800158c:	e03b      	b.n	8001606 <HAL_RCC_OscConfig+0x31a>
 800158e:	bf00      	nop
 8001590:	46020c00 	.word	0x46020c00
 8001594:	20000004 	.word	0x20000004
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a0:	d30a      	bcc.n	80015b8 <HAL_RCC_OscConfig+0x2cc>
 80015a2:	4b94      	ldr	r3, [pc, #592]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	4990      	ldr	r1, [pc, #576]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	60cb      	str	r3, [r1, #12]
 80015b6:	e026      	b.n	8001606 <HAL_RCC_OscConfig+0x31a>
 80015b8:	4b8e      	ldr	r3, [pc, #568]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	03db      	lsls	r3, r3, #15
 80015c6:	498b      	ldr	r1, [pc, #556]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	60cb      	str	r3, [r1, #12]
 80015cc:	e01b      	b.n	8001606 <HAL_RCC_OscConfig+0x31a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80015ce:	4b89      	ldr	r3, [pc, #548]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a88      	ldr	r2, [pc, #544]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80015da:	f7ff fab7 	bl	8000b4c <HAL_GetTick>
 80015de:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80015e0:	e009      	b.n	80015f6 <HAL_RCC_OscConfig+0x30a>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e2:	f7ff fab3 	bl	8000b4c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d902      	bls.n	80015f6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f000 bce0 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80015f6:	4b7f      	ldr	r3, [pc, #508]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ef      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2f6>
 8001602:	e000      	b.n	8001606 <HAL_RCC_OscConfig+0x31a>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001604:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 808d 	beq.w	800172e <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	2b08      	cmp	r3, #8
 8001618:	d005      	beq.n	8001626 <HAL_RCC_OscConfig+0x33a>
 800161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d10f      	bne.n	8001640 <HAL_RCC_OscConfig+0x354>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	2b03      	cmp	r3, #3
 8001624:	d10c      	bne.n	8001640 <HAL_RCC_OscConfig+0x354>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4b73      	ldr	r3, [pc, #460]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d07c      	beq.n	800172c <HAL_RCC_OscConfig+0x440>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d178      	bne.n	800172c <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	f000 bcbb 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001648:	d106      	bne.n	8001658 <HAL_RCC_OscConfig+0x36c>
 800164a:	4b6a      	ldr	r3, [pc, #424]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a69      	ldr	r2, [pc, #420]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	e03b      	b.n	80016d0 <HAL_RCC_OscConfig+0x3e4>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001660:	d112      	bne.n	8001688 <HAL_RCC_OscConfig+0x39c>
 8001662:	4b64      	ldr	r3, [pc, #400]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a63      	ldr	r2, [pc, #396]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a60      	ldr	r2, [pc, #384]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001674:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b5e      	ldr	r3, [pc, #376]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5d      	ldr	r2, [pc, #372]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e023      	b.n	80016d0 <HAL_RCC_OscConfig+0x3e4>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001690:	d112      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3cc>
 8001692:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a57      	ldr	r2, [pc, #348]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a54      	ldr	r2, [pc, #336]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80016a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a51      	ldr	r2, [pc, #324]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0x3e4>
 80016b8:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a4d      	ldr	r2, [pc, #308]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80016be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80016ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d014      	beq.n	8001702 <HAL_RCC_OscConfig+0x416>
      {
        tickstart = HAL_GetTick();
 80016d8:	f7ff fa38 	bl	8000b4c <HAL_GetTick>
 80016dc:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016de:	e009      	b.n	80016f4 <HAL_RCC_OscConfig+0x408>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fa34 	bl	8000b4c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	; 0x64
 80016ec:	d902      	bls.n	80016f4 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	f000 bc61 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f4:	4b3f      	ldr	r3, [pc, #252]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0ef      	beq.n	80016e0 <HAL_RCC_OscConfig+0x3f4>
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x442>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001702:	f7ff fa23 	bl	8000b4c <HAL_GetTick>
 8001706:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001708:	e009      	b.n	800171e <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170a:	f7ff fa1f 	bl	8000b4c <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b64      	cmp	r3, #100	; 0x64
 8001716:	d902      	bls.n	800171e <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	f000 bc4c 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171e:	4b35      	ldr	r3, [pc, #212]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ef      	bne.n	800170a <HAL_RCC_OscConfig+0x41e>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x442>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d064      	beq.n	8001804 <HAL_RCC_OscConfig+0x518>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	2b04      	cmp	r3, #4
 800173e:	d005      	beq.n	800174c <HAL_RCC_OscConfig+0x460>
 8001740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001742:	2b0c      	cmp	r3, #12
 8001744:	d11a      	bne.n	800177c <HAL_RCC_OscConfig+0x490>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	2b02      	cmp	r3, #2
 800174a:	d117      	bne.n	800177c <HAL_RCC_OscConfig+0x490>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001754:	2b00      	cmp	r3, #0
 8001756:	d006      	beq.n	8001766 <HAL_RCC_OscConfig+0x47a>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	f000 bc28 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001766:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	041b      	lsls	r3, r3, #16
 8001774:	491f      	ldr	r1, [pc, #124]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001776:	4313      	orrs	r3, r2
 8001778:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800177a:	e043      	b.n	8001804 <HAL_RCC_OscConfig+0x518>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d024      	beq.n	80017ce <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1a      	ldr	r2, [pc, #104]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001790:	f7ff f9dc 	bl	8000b4c <HAL_GetTick>
 8001794:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001796:	e009      	b.n	80017ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff f9d8 	bl	8000b4c <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d902      	bls.n	80017ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	f000 bc05 	b.w	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ef      	beq.n	8001798 <HAL_RCC_OscConfig+0x4ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	490b      	ldr	r1, [pc, #44]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	610b      	str	r3, [r1, #16]
 80017cc:	e01a      	b.n	8001804 <HAL_RCC_OscConfig+0x518>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80017d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80017da:	f7ff f9b7 	bl	8000b4c <HAL_GetTick>
 80017de:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCC_OscConfig+0x50c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e2:	f7ff f9b3 	bl	8000b4c <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d903      	bls.n	80017f8 <HAL_RCC_OscConfig+0x50c>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e3e0      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
 80017f4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017f8:	4baf      	ldr	r3, [pc, #700]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1ee      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80c7 	beq.w	80019a0 <HAL_RCC_OscConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001818:	4ba7      	ldr	r3, [pc, #668]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 800181a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	2b00      	cmp	r3, #0
 8001824:	d111      	bne.n	800184a <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4ba4      	ldr	r3, [pc, #656]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800182c:	4aa2      	ldr	r2, [pc, #648]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001836:	4ba0      	ldr	r3, [pc, #640]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001838:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800184a:	4b9c      	ldr	r3, [pc, #624]	; (8001abc <HAL_RCC_OscConfig+0x7d0>)
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_RCC_OscConfig+0x59c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001856:	4b99      	ldr	r3, [pc, #612]	; (8001abc <HAL_RCC_OscConfig+0x7d0>)
 8001858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185a:	4a98      	ldr	r2, [pc, #608]	; (8001abc <HAL_RCC_OscConfig+0x7d0>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7ff f973 	bl	8000b4c <HAL_GetTick>
 8001866:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x590>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff f96f 	bl	8000b4c <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	6a3b      	ldr	r3, [r7, #32]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e39c      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800187c:	4b8f      	ldr	r3, [pc, #572]	; (8001abc <HAL_RCC_OscConfig+0x7d0>)
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f003 0301 	and.w	r3, r3, #1
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x57e>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d05f      	beq.n	8001950 <HAL_RCC_OscConfig+0x664>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001890:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001896:	61bb      	str	r3, [r7, #24]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699a      	ldr	r2, [r3, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d037      	beq.n	8001916 <HAL_RCC_OscConfig+0x62a>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_RCC_OscConfig+0x5d2>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x5d2>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e37b      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d01b      	beq.n	8001900 <HAL_RCC_OscConfig+0x614>
        {
          __HAL_RCC_LSI_DISABLE();
 80018c8:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 80018ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018ce:	4a7a      	ldr	r2, [pc, #488]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 80018d0:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80018d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80018d8:	f7ff f938 	bl	8000b4c <HAL_GetTick>
 80018dc:	6238      	str	r0, [r7, #32]

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x606>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff f934 	bl	8000b4c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	6a3b      	ldr	r3, [r7, #32]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x606>
            {
              return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e361      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80018f2:	4b71      	ldr	r3, [pc, #452]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 80018f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ef      	bne.n	80018e0 <HAL_RCC_OscConfig+0x5f4>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001900:	4b6d      	ldr	r3, [pc, #436]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001902:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001906:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	496a      	ldr	r1, [pc, #424]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001910:	4313      	orrs	r3, r2
 8001912:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001918:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800191c:	4a66      	ldr	r2, [pc, #408]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 800191e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001922:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001926:	f7ff f911 	bl	8000b4c <HAL_GetTick>
 800192a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x654>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff f90d 	bl	8000b4c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x654>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e33a      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001940:	4b5d      	ldr	r3, [pc, #372]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0ef      	beq.n	800192e <HAL_RCC_OscConfig+0x642>
 800194e:	e01b      	b.n	8001988 <HAL_RCC_OscConfig+0x69c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001950:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001956:	4a58      	ldr	r2, [pc, #352]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001958:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800195c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001960:	f7ff f8f4 	bl	8000b4c <HAL_GetTick>
 8001964:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x68e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001968:	f7ff f8f0 	bl	8000b4c <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x68e>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e31d      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800197a:	4b4f      	ldr	r3, [pc, #316]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 800197c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ef      	bne.n	8001968 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001988:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x6b4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001990:	4b49      	ldr	r3, [pc, #292]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	4a48      	ldr	r2, [pc, #288]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001998:	f023 0304 	bic.w	r3, r3, #4
 800199c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 8112 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x8e6>
  {
    FlagStatus pwrclkchanged = RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b4:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 80019b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d111      	bne.n	80019e6 <HAL_RCC_OscConfig+0x6fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 80019c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c8:	4a3b      	ldr	r2, [pc, #236]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 80019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80019e0:	2301      	movs	r3, #1
 80019e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80019e6:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_RCC_OscConfig+0x7d0>)
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d118      	bne.n	8001a24 <HAL_RCC_OscConfig+0x738>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80019f2:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x7d0>)
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	4a31      	ldr	r2, [pc, #196]	; (8001abc <HAL_RCC_OscConfig+0x7d0>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fe:	f7ff f8a5 	bl	8000b4c <HAL_GetTick>
 8001a02:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x72c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a06:	f7ff f8a1 	bl	8000b4c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x72c>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e2ce      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_RCC_OscConfig+0x7d0>)
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01f      	beq.n	8001a70 <HAL_RCC_OscConfig+0x784>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d010      	beq.n	8001a5e <HAL_RCC_OscConfig+0x772>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a42:	4a1d      	ldr	r2, [pc, #116]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a52:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a5c:	e018      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a6e:	e00f      	b.n	8001a90 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a86:	4a0c      	ldr	r2, [pc, #48]	; (8001ab8 <HAL_RCC_OscConfig+0x7cc>)
 8001a88:	f023 0304 	bic.w	r3, r3, #4
 8001a8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d058      	beq.n	8001b4a <HAL_RCC_OscConfig+0x85e>
    {
      tickstart = HAL_GetTick();
 8001a98:	f7ff f858 	bl	8000b4c <HAL_GetTick>
 8001a9c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9e:	e00f      	b.n	8001ac0 <HAL_RCC_OscConfig+0x7d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff f854 	bl	8000b4c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d906      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e27f      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
 8001ab6:	bf00      	nop
 8001ab8:	46020c00 	.word	0x46020c00
 8001abc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac0:	4ba4      	ldr	r3, [pc, #656]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0e8      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x7b4>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d01b      	beq.n	8001b12 <HAL_RCC_OscConfig+0x826>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ada:	4b9e      	ldr	r3, [pc, #632]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae0:	4a9c      	ldr	r2, [pc, #624]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_OscConfig+0x816>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff f82e 	bl	8000b4c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x816>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e259      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b02:	4b94      	ldr	r3, [pc, #592]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0ed      	beq.n	8001aec <HAL_RCC_OscConfig+0x800>
 8001b10:	e053      	b.n	8001bba <HAL_RCC_OscConfig+0x8ce>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b12:	4b90      	ldr	r3, [pc, #576]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b18:	4a8e      	ldr	r2, [pc, #568]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x84e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff f812 	bl	8000b4c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x84e>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e23d      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b3a:	4b86      	ldr	r3, [pc, #536]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ed      	bne.n	8001b24 <HAL_RCC_OscConfig+0x838>
 8001b48:	e037      	b.n	8001bba <HAL_RCC_OscConfig+0x8ce>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001b4a:	f7fe ffff 	bl	8000b4c <HAL_GetTick>
 8001b4e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x87c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7fe fffb 	bl	8000b4c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x87c>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e226      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b68:	4b7a      	ldr	r3, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001b6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ed      	bne.n	8001b52 <HAL_RCC_OscConfig+0x866>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001b76:	4b77      	ldr	r3, [pc, #476]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01a      	beq.n	8001bba <HAL_RCC_OscConfig+0x8ce>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b84:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b8a:	4a72      	ldr	r2, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x8c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7fe ffd9 	bl	8000b4c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x8c0>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e204      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bac:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1ed      	bne.n	8001b96 <HAL_RCC_OscConfig+0x8aa>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x8e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc2:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc8:	4a62      	ldr	r2, [pc, #392]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d036      	beq.n	8001c4c <HAL_RCC_OscConfig+0x960>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d019      	beq.n	8001c1a <HAL_RCC_OscConfig+0x92e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001be6:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a5a      	ldr	r2, [pc, #360]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001bf2:	f7fe ffab 	bl	8000b4c <HAL_GetTick>
 8001bf6:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x920>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bfa:	f7fe ffa7 	bl	8000b4c <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x920>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1d4      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c0c:	4b51      	ldr	r3, [pc, #324]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x90e>
 8001c18:	e018      	b.n	8001c4c <HAL_RCC_OscConfig+0x960>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001c1a:	4b4e      	ldr	r3, [pc, #312]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c24:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c26:	f7fe ff91 	bl	8000b4c <HAL_GetTick>
 8001c2a:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x954>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c2e:	f7fe ff8d 	bl	8000b4c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x954>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e1ba      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c40:	4b44      	ldr	r3, [pc, #272]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x942>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d036      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCC_OscConfig+0x9a8>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001c60:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a3b      	ldr	r2, [pc, #236]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001c66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c6a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001c6c:	f7fe ff6e 	bl	8000b4c <HAL_GetTick>
 8001c70:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x99a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001c74:	f7fe ff6a 	bl	8000b4c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x99a>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e197      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x988>
 8001c92:	e018      	b.n	8001cc6 <HAL_RCC_OscConfig+0x9da>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001c94:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2e      	ldr	r2, [pc, #184]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c9e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ca0:	f7fe ff54 	bl	8000b4c <HAL_GetTick>
 8001ca4:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x9ce>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001ca8:	f7fe ff50 	bl	8000b4c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e17d      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001cba:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x9bc>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d07f      	beq.n	8001dd2 <HAL_RCC_OscConfig+0xae6>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d062      	beq.n	8001da0 <HAL_RCC_OscConfig+0xab4>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001ce0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce4:	6093      	str	r3, [r2, #8]
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	4918      	ldr	r1, [pc, #96]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001d00:	d309      	bcc.n	8001d16 <HAL_RCC_OscConfig+0xa2a>
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	f023 021f 	bic.w	r2, r3, #31
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4911      	ldr	r1, [pc, #68]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60cb      	str	r3, [r1, #12]
 8001d14:	e02a      	b.n	8001d6c <HAL_RCC_OscConfig+0xa80>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da0a      	bge.n	8001d34 <HAL_RCC_OscConfig+0xa48>
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	015b      	lsls	r3, r3, #5
 8001d2c:	4909      	ldr	r1, [pc, #36]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60cb      	str	r3, [r1, #12]
 8001d32:	e01b      	b.n	8001d6c <HAL_RCC_OscConfig+0xa80>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d30c      	bcc.n	8001d58 <HAL_RCC_OscConfig+0xa6c>
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4901      	ldr	r1, [pc, #4]	; (8001d54 <HAL_RCC_OscConfig+0xa68>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60cb      	str	r3, [r1, #12]
 8001d52:	e00b      	b.n	8001d6c <HAL_RCC_OscConfig+0xa80>
 8001d54:	46020c00 	.word	0x46020c00
 8001d58:	4b99      	ldr	r3, [pc, #612]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	03db      	lsls	r3, r3, #15
 8001d66:	4996      	ldr	r1, [pc, #600]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001d6c:	4b94      	ldr	r3, [pc, #592]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a93      	ldr	r2, [pc, #588]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001d78:	f7fe fee8 	bl	8000b4c <HAL_GetTick>
 8001d7c:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xaa6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001d80:	f7fe fee4 	bl	8000b4c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xaa6>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e111      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001d92:	4b8b      	ldr	r3, [pc, #556]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0320 	and.w	r3, r3, #32
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0xa94>
 8001d9e:	e018      	b.n	8001dd2 <HAL_RCC_OscConfig+0xae6>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001da0:	4b87      	ldr	r3, [pc, #540]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a86      	ldr	r2, [pc, #536]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001da6:	f023 0310 	bic.w	r3, r3, #16
 8001daa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001dac:	f7fe fece 	bl	8000b4c <HAL_GetTick>
 8001db0:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xada>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001db4:	f7fe feca 	bl	8000b4c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	6a3b      	ldr	r3, [r7, #32]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xada>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0f7      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001dc6:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0xac8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80ec 	beq.w	8001fb4 <HAL_RCC_OscConfig+0xcc8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ddc:	4b78      	ldr	r3, [pc, #480]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	f000 80e3 	beq.w	8001fb0 <HAL_RCC_OscConfig+0xcc4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	f040 80be 	bne.w	8001f70 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001df4:	4b72      	ldr	r3, [pc, #456]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a71      	ldr	r2, [pc, #452]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001dfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dfe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001e00:	f7fe fea4 	bl	8000b4c <HAL_GetTick>
 8001e04:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0xb2e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e08:	f7fe fea0 	bl	8000b4c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0xb2e>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0cd      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e1a:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1f0      	bne.n	8001e08 <HAL_RCC_OscConfig+0xb1c>
          }
        }

        /* Enable PWR CLK */
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b66      	ldr	r3, [pc, #408]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e2c:	4a64      	ldr	r2, [pc, #400]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e36:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001e44:	4b5f      	ldr	r3, [pc, #380]	; (8001fc4 <HAL_RCC_OscConfig+0xcd8>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e50:	d102      	bne.n	8001e58 <HAL_RCC_OscConfig+0xb6c>
        {
          pwrboosten = SET;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001e58:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <HAL_RCC_OscConfig+0xcd8>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4a59      	ldr	r2, [pc, #356]	; (8001fc4 <HAL_RCC_OscConfig+0xcd8>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e62:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001e64:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e6c:	f023 0303 	bic.w	r3, r3, #3
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e78:	3a01      	subs	r2, #1
 8001e7a:	0212      	lsls	r2, r2, #8
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e82:	430a      	orrs	r2, r1
 8001e84:	494e      	ldr	r1, [pc, #312]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	628b      	str	r3, [r1, #40]	; 0x28
 8001e8a:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8e:	4b4e      	ldr	r3, [pc, #312]	; (8001fc8 <HAL_RCC_OscConfig+0xcdc>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e96:	3a01      	subs	r2, #1
 8001e98:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ea0:	3a01      	subs	r2, #1
 8001ea2:	0252      	lsls	r2, r2, #9
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	4311      	orrs	r1, r2
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001eac:	3a01      	subs	r2, #1
 8001eae:	0412      	lsls	r2, r2, #16
 8001eb0:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001eb4:	4311      	orrs	r1, r2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001eba:	3a01      	subs	r2, #1
 8001ebc:	0612      	lsls	r2, r2, #24
 8001ebe:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	493e      	ldr	r1, [pc, #248]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001ed0:	f023 0310 	bic.w	r3, r3, #16
 8001ed4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ede:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ee6:	00d2      	lsls	r2, r2, #3
 8001ee8:	4935      	ldr	r1, [pc, #212]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001eee:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef2:	4a33      	ldr	r2, [pc, #204]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001ef4:	f043 0310 	orr.w	r3, r3, #16
 8001ef8:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001efa:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	f023 020c 	bic.w	r2, r3, #12
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	492e      	ldr	r1, [pc, #184]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_RCC_OscConfig+0xc34>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <HAL_RCC_OscConfig+0xcd8>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <HAL_RCC_OscConfig+0xcd8>)
 8001f1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f1e:	60d3      	str	r3, [r2, #12]
        }

        /*Disable PWR clk */
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f26:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f28:	f023 0304 	bic.w	r3, r3, #4
 8001f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f30:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f3a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001f48:	f7fe fe00 	bl	8000b4c <HAL_GetTick>
 8001f4c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7fe fdfc 	bl	8000b4c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e029      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0xc64>
 8001f6e:	e021      	b.n	8001fb4 <HAL_RCC_OscConfig+0xcc8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Disable main PLL outputs to save power if no PLLs on */
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001f82:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001f86:	6293      	str	r3, [r2, #40]	; 0x28

        tickstart = HAL_GetTick();
 8001f88:	f7fe fde0 	bl	8000b4c <HAL_GetTick>
 8001f8c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xcb6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe fddc 	bl	8000b4c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xcb6>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e009      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_RCC_OscConfig+0xcd4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0xca4>
 8001fae:	e001      	b.n	8001fb4 <HAL_RCC_OscConfig+0xcc8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_RCC_OscConfig+0xcca>
    }
  }
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3730      	adds	r7, #48	; 0x30
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	46020c00 	.word	0x46020c00
 8001fc4:	46020800 	.word	0x46020800
 8001fc8:	80800000 	.word	0x80800000

08001fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e146      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4ba5      	ldr	r3, [pc, #660]	; (8002278 <HAL_RCC_ClockConfig+0x2ac>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4ba2      	ldr	r3, [pc, #648]	; (8002278 <HAL_RCC_ClockConfig+0x2ac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 020f 	bic.w	r2, r3, #15
 8001ff6:	49a0      	ldr	r1, [pc, #640]	; (8002278 <HAL_RCC_ClockConfig+0x2ac>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b9e      	ldr	r3, [pc, #632]	; (8002278 <HAL_RCC_ClockConfig+0x2ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e12e      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80be 	beq.w	800219a <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d137      	bne.n	8002096 <HAL_RCC_ClockConfig+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	4b95      	ldr	r3, [pc, #596]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 8002028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202c:	4a93      	ldr	r2, [pc, #588]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 800202e:	f043 0304 	orr.w	r3, r3, #4
 8002032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002036:	4b91      	ldr	r3, [pc, #580]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
      tickstart = HAL_GetTick();
 8002044:	f7fe fd82 	bl	8000b4c <HAL_GetTick>
 8002048:	6178      	str	r0, [r7, #20]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800204a:	4b8d      	ldr	r3, [pc, #564]	; (8002280 <HAL_RCC_ClockConfig+0x2b4>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00f      	beq.n	8002076 <HAL_RCC_ClockConfig+0xaa>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_ClockConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002058:	f7fe fd78 	bl	8000b4c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_ClockConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e101      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800206a:	4b85      	ldr	r3, [pc, #532]	; (8002280 <HAL_RCC_ClockConfig+0x2b4>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_ClockConfig+0x8c>
          }
        }
      }

      __HAL_RCC_PWR_CLK_DISABLE();
 8002076:	4b81      	ldr	r3, [pc, #516]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 8002078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207c:	4a7f      	ldr	r2, [pc, #508]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 800207e:	f023 0304 	bic.w	r3, r3, #4
 8002082:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002086:	4b7d      	ldr	r3, [pc, #500]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d121      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0eb      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d107      	bne.n	80020ae <HAL_RCC_ClockConfig+0xe2>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209e:	4b77      	ldr	r3, [pc, #476]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d115      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0df      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xfa>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80020b6:	4b71      	ldr	r3, [pc, #452]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d109      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0d3      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c6:	4b6d      	ldr	r3, [pc, #436]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0cb      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80020d6:	4b69      	ldr	r3, [pc, #420]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4966      	ldr	r1, [pc, #408]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80020e8:	f7fe fd30 	bl	8000b4c <HAL_GetTick>
 80020ec:	6178      	str	r0, [r7, #20]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d112      	bne.n	800211c <HAL_RCC_ClockConfig+0x150>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x142>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7fe fd28 	bl	8000b4c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0af      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210e:	4b5b      	ldr	r3, [pc, #364]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d1ee      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x12c>
 800211a:	e03e      	b.n	800219a <HAL_RCC_ClockConfig+0x1ce>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d112      	bne.n	800214a <HAL_RCC_ClockConfig+0x17e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002124:	e00a      	b.n	800213c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002126:	f7fe fd11 	bl	8000b4c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e098      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800213c:	4b4f      	ldr	r3, [pc, #316]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	2b08      	cmp	r3, #8
 8002146:	d1ee      	bne.n	8002126 <HAL_RCC_ClockConfig+0x15a>
 8002148:	e027      	b.n	800219a <HAL_RCC_ClockConfig+0x1ce>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d11d      	bne.n	800218e <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x19e>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe fcfa 	bl	8000b4c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e081      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800216a:	4b44      	ldr	r3, [pc, #272]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ee      	bne.n	8002154 <HAL_RCC_ClockConfig+0x188>
 8002176:	e010      	b.n	800219a <HAL_RCC_ClockConfig+0x1ce>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7fe fce8 	bl	8000b4c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e06f      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800218e:	4b3b      	ldr	r3, [pc, #236]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b04      	cmp	r3, #4
 8002198:	d1ee      	bne.n	8002178 <HAL_RCC_ClockConfig+0x1ac>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80021a6:	4b35      	ldr	r3, [pc, #212]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	f023 020f 	bic.w	r2, r3, #15
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	4932      	ldr	r1, [pc, #200]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	492a      	ldr	r1, [pc, #168]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4922      	ldr	r1, [pc, #136]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_RCC_ClockConfig+0x248>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	491b      	ldr	r1, [pc, #108]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	624b      	str	r3, [r1, #36]	; 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002214:	4b18      	ldr	r3, [pc, #96]	; (8002278 <HAL_RCC_ClockConfig+0x2ac>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d210      	bcs.n	8002244 <HAL_RCC_ClockConfig+0x278>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <HAL_RCC_ClockConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 020f 	bic.w	r2, r3, #15
 800222a:	4913      	ldr	r1, [pc, #76]	; (8002278 <HAL_RCC_ClockConfig+0x2ac>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HAL_RCC_ClockConfig+0x2ac>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_ClockConfig+0x278>
    {
      return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e014      	b.n	800226e <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002244:	f000 f824 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_RCC_ClockConfig+0x2b0>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	490c      	ldr	r1, [pc, #48]	; (8002284 <HAL_RCC_ClockConfig+0x2b8>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <HAL_RCC_ClockConfig+0x2bc>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_ClockConfig+0x2c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fc28 	bl	8000ab8 <HAL_InitTick>
 8002268:	4603      	mov	r3, r0
 800226a:	74fb      	strb	r3, [r7, #19]

  return status;
 800226c:	7cfb      	ldrb	r3, [r7, #19]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3718      	adds	r7, #24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000
 800227c:	46020c00 	.word	0x46020c00
 8002280:	46020800 	.word	0x46020800
 8002284:	08005510 	.word	0x08005510
 8002288:	20000000 	.word	0x20000000
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b08b      	sub	sp, #44	; 0x2c
 8002294:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229e:	4b7b      	ldr	r3, [pc, #492]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a8:	4b78      	ldr	r3, [pc, #480]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x34>
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d121      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d11e      	bne.n	8002302 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80022c4:	4b71      	ldr	r3, [pc, #452]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80022d0:	4b6e      	ldr	r3, [pc, #440]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80022d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022d6:	0b1b      	lsrs	r3, r3, #12
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	627b      	str	r3, [r7, #36]	; 0x24
 80022de:	e005      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80022e0:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	0f1b      	lsrs	r3, r3, #28
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022ec:	4a68      	ldr	r2, [pc, #416]	; (8002490 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d110      	bne.n	800231e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002300:	e00d      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002302:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d102      	bne.n	8002314 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800230e:	4b61      	ldr	r3, [pc, #388]	; (8002494 <HAL_RCC_GetSysClockFreq+0x204>)
 8002310:	623b      	str	r3, [r7, #32]
 8002312:	e004      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b08      	cmp	r3, #8
 8002318:	d101      	bne.n	800231e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800231a:	4b5e      	ldr	r3, [pc, #376]	; (8002494 <HAL_RCC_GetSysClockFreq+0x204>)
 800231c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b0c      	cmp	r3, #12
 8002322:	f040 80ac 	bne.w	800247e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002326:	4b59      	ldr	r3, [pc, #356]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002330:	4b56      	ldr	r3, [pc, #344]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3301      	adds	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800233e:	4b53      	ldr	r3, [pc, #332]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800234a:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	08db      	lsrs	r3, r3, #3
 8002350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002362:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 8086 	beq.w	800247a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d003      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0xec>
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d022      	beq.n	80023c0 <HAL_RCC_GetSysClockFreq+0x130>
 800237a:	e043      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002386:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002498 <HAL_RCC_GetSysClockFreq+0x208>
 800238a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800239e:	ed97 6a01 	vldr	s12, [r7, #4]
 80023a2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800249c <HAL_RCC_GetSysClockFreq+0x20c>
 80023a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80023ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ba:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80023be:	e046      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ca:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002498 <HAL_RCC_GetSysClockFreq+0x208>
 80023ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80023e2:	ed97 6a01 	vldr	s12, [r7, #4]
 80023e6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800249c <HAL_RCC_GetSysClockFreq+0x20c>
 80023ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80023f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fe:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002402:	e024      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800241c:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800241e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800242c:	ed97 6a01 	vldr	s12, [r7, #4]
 8002430:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800249c <HAL_RCC_GetSysClockFreq+0x20c>
 8002434:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002438:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800243c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002440:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002448:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800244c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002452:	0e1b      	lsrs	r3, r3, #24
 8002454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002458:	3301      	adds	r3, #1
 800245a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002466:	edd7 6a07 	vldr	s13, [r7, #28]
 800246a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800246e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002472:	ee17 3a90 	vmov	r3, s15
 8002476:	623b      	str	r3, [r7, #32]
 8002478:	e001      	b.n	800247e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800247e:	6a3b      	ldr	r3, [r7, #32]
}
 8002480:	4618      	mov	r0, r3
 8002482:	372c      	adds	r7, #44	; 0x2c
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	46020c00 	.word	0x46020c00
 8002490:	08005528 	.word	0x08005528
 8002494:	00f42400 	.word	0x00f42400
 8002498:	4b742400 	.word	0x4b742400
 800249c:	46000000 	.word	0x46000000

080024a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024a4:	f7ff fef4 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80024a8:	4602      	mov	r2, r0
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <HAL_RCC_GetHCLKFreq+0x28>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	4906      	ldr	r1, [pc, #24]	; (80024cc <HAL_RCC_GetHCLKFreq+0x2c>)
 80024b4:	5ccb      	ldrb	r3, [r1, r3]
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80024bc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x30>)
 80024c0:	681b      	ldr	r3, [r3, #0]
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	46020c00 	.word	0x46020c00
 80024cc:	08005510 	.word	0x08005510
 80024d0:	20000000 	.word	0x20000000

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80024d8:	f7ff ffe2 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	46020c00 	.word	0x46020c00
 80024f8:	08005520 	.word	0x08005520

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002500:	f7ff ffce 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	46020c00 	.word	0x46020c00
 8002520:	08005520 	.word	0x08005520

08002524 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002528:	f7ff ffba 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b05      	ldr	r3, [pc, #20]	; (8002544 <HAL_RCC_GetPCLK3Freq+0x20>)
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4903      	ldr	r1, [pc, #12]	; (8002548 <HAL_RCC_GetPCLK3Freq+0x24>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002540:	4618      	mov	r0, r3
 8002542:	bd80      	pop	{r7, pc}
 8002544:	46020c00 	.word	0x46020c00
 8002548:	08005520 	.word	0x08005520

0800254c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002554:	4b3e      	ldr	r3, [pc, #248]	; (8002650 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002556:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002562:	f7fe fea5 	bl	80012b0 <HAL_PWREx_GetVoltageRange>
 8002566:	6178      	str	r0, [r7, #20]
 8002568:	e019      	b.n	800259e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b39      	ldr	r3, [pc, #228]	; (8002650 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800256c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002570:	4a37      	ldr	r2, [pc, #220]	; (8002650 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002572:	f043 0304 	orr.w	r3, r3, #4
 8002576:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800257a:	4b35      	ldr	r3, [pc, #212]	; (8002650 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800257c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002588:	f7fe fe92 	bl	80012b0 <HAL_PWREx_GetVoltageRange>
 800258c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b30      	ldr	r3, [pc, #192]	; (8002650 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002594:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002596:	f023 0304 	bic.w	r3, r3, #4
 800259a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80025a4:	d003      	beq.n	80025ae <RCC_SetFlashLatencyFromMSIRange+0x62>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025ac:	d109      	bne.n	80025c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025b4:	d202      	bcs.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80025b6:	2301      	movs	r3, #1
 80025b8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80025ba:	e033      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80025c0:	e030      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025c8:	d208      	bcs.n	80025dc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d0:	d102      	bne.n	80025d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80025d2:	2303      	movs	r3, #3
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	e025      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e035      	b.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025e2:	d90f      	bls.n	8002604 <RCC_SetFlashLatencyFromMSIRange+0xb8>

      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80025f0:	d902      	bls.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80025f2:	2300      	movs	r3, #0
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e015      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80025f8:	2301      	movs	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	e012      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	e00f      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800260a:	d109      	bne.n	8002620 <RCC_SetFlashLatencyFromMSIRange+0xd4>

        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002612:	d102      	bne.n	800261a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002614:	2301      	movs	r3, #1
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	e004      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800261a:	2302      	movs	r3, #2
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	e001      	b.n	8002624 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002620:	2301      	movs	r3, #1
 8002622:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 020f 	bic.w	r2, r3, #15
 800262c:	4909      	ldr	r1, [pc, #36]	; (8002654 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	429a      	cmp	r2, r3
 8002640:	d001      	beq.n	8002646 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	46020c00 	.word	0x46020c00
 8002654:	40022000 	.word	0x40022000

08002658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002660:	2300      	movs	r3, #0
 8002662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002664:	2300      	movs	r3, #0
 8002666:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x32>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002674:	4bae      	ldr	r3, [pc, #696]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267a:	f023 0203 	bic.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	49ab      	ldr	r1, [pc, #684]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002696:	4ba6      	ldr	r3, [pc, #664]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269c:	f023 020c 	bic.w	r2, r3, #12
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a4:	49a2      	ldr	r1, [pc, #648]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80026b8:	4b9d      	ldr	r3, [pc, #628]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	499a      	ldr	r1, [pc, #616]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00a      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80026da:	4b95      	ldr	r3, [pc, #596]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e8:	4991      	ldr	r1, [pc, #580]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80026fc:	4b8c      	ldr	r3, [pc, #560]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80026fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270a:	4989      	ldr	r1, [pc, #548]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00a      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800271e:	4b84      	ldr	r3, [pc, #528]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002724:	f023 0207 	bic.w	r2, r3, #7
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272c:	4980      	ldr	r1, [pc, #512]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002740:	4b7b      	ldr	r3, [pc, #492]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800274e:	4978      	ldr	r1, [pc, #480]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002762:	4b73      	ldr	r3, [pc, #460]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002768:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002770:	496f      	ldr	r1, [pc, #444]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002784:	4b6a      	ldr	r3, [pc, #424]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800278a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002792:	4967      	ldr	r1, [pc, #412]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80027a6:	4b62      	ldr	r3, [pc, #392]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	495e      	ldr	r1, [pc, #376]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80027c8:	4b59      	ldr	r3, [pc, #356]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d6:	4956      	ldr	r1, [pc, #344]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80027ea:	4b51      	ldr	r3, [pc, #324]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027f8:	494d      	ldr	r1, [pc, #308]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800280c:	4b48      	ldr	r3, [pc, #288]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800280e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002812:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800281a:	4945      	ldr	r1, [pc, #276]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d042      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d028      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002838:	2b80      	cmp	r3, #128	; 0x80
 800283a:	d823      	bhi.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800283c:	2b60      	cmp	r3, #96	; 0x60
 800283e:	d026      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002840:	2b60      	cmp	r3, #96	; 0x60
 8002842:	d81f      	bhi.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d006      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d81b      	bhi.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8002850:	2b20      	cmp	r3, #32
 8002852:	d00f      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002854:	e016      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002856:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	4a35      	ldr	r2, [pc, #212]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800285c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002860:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002862:	e015      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3304      	adds	r3, #4
 8002868:	4618      	mov	r0, r3
 800286a:	f002 f85f 	bl	800492c <RCCEx_PLL2_Config>
 800286e:	4603      	mov	r3, r0
 8002870:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002872:	e00d      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x238>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3328      	adds	r3, #40	; 0x28
 8002878:	4618      	mov	r0, r3
 800287a:	f002 f8ef 	bl	8004a5c <RCCEx_PLL3_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	74fb      	strb	r3, [r7, #19]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002882:	e005      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x238>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	74fb      	strb	r3, [r7, #19]
        break;
 8002888:	e002      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 800288a:	bf00      	nop
 800288c:	e000      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x238>
        break;
 800288e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002896:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002898:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800289c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a6:	4922      	ldr	r1, [pc, #136]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80028ae:	e001      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b0:	7cfb      	ldrb	r3, [r7, #19]
 80028b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d04c      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ca:	d02e      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80028cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d0:	d828      	bhi.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80028d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028d6:	d02d      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80028d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028dc:	d822      	bhi.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80028de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e2:	d008      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 80028e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e8:	d81c      	bhi.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80028ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f2:	d00f      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80028f4:	e016      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002902:	e018      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3304      	adds	r3, #4
 8002908:	4618      	mov	r0, r3
 800290a:	f002 f80f 	bl	800492c <RCCEx_PLL2_Config>
 800290e:	4603      	mov	r3, r0
 8002910:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002912:	e010      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3328      	adds	r3, #40	; 0x28
 8002918:	4618      	mov	r0, r3
 800291a:	f002 f89f 	bl	8004a5c <RCCEx_PLL3_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	74fb      	strb	r3, [r7, #19]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002922:	e008      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	74fb      	strb	r3, [r7, #19]
        break;
 8002928:	e005      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2de>
        break;
 800292a:	bf00      	nop
 800292c:	e003      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800292e:	bf00      	nop
 8002930:	46020c00 	.word	0x46020c00
        break;
 8002934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002936:	7cfb      	ldrb	r3, [r7, #19]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10c      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800293c:	4bb7      	ldr	r3, [pc, #732]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800293e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002942:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	49b3      	ldr	r1, [pc, #716]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8002954:	e001      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x302>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d03e      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800296c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002970:	d025      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x366>
 8002972:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002976:	d81f      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800297c:	d01f      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x366>
 800297e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002982:	d819      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002984:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002988:	d019      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x366>
 800298a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800298e:	d813      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002994:	d008      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299a:	d80d      	bhi.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00e      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x366>
 80029a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a4:	d00b      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x366>
 80029a6:	e007      	b.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3304      	adds	r3, #4
 80029ac:	4618      	mov	r0, r3
 80029ae:	f001 ffbd 	bl	800492c <RCCEx_PLL2_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	74fb      	strb	r3, [r7, #19]
        break;
 80029b6:	e003      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	74fb      	strb	r3, [r7, #19]
        break;
 80029bc:	e000      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        break;
 80029be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x388>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80029c6:	4b95      	ldr	r3, [pc, #596]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029d6:	4991      	ldr	r1, [pc, #580]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80029de:	e001      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d036      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d81b      	bhi.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 80029fa:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a39 	.word	0x08002a39
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a23 	.word	0x08002a23
 8002a0c:	08002a39 	.word	0x08002a39
 8002a10:	08002a39 	.word	0x08002a39
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a14:	4b81      	ldr	r3, [pc, #516]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	4a80      	ldr	r2, [pc, #512]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002a20:	e00b      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3328      	adds	r3, #40	; 0x28
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 f818 	bl	8004a5c <RCCEx_PLL3_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]
        break;
 8002a30:	e003      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	74fb      	strb	r3, [r7, #19]
        break;
 8002a36:	e000      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        break;
 8002a38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a3a:	7cfb      	ldrb	r3, [r7, #19]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10c      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x402>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002a40:	4b76      	ldr	r3, [pc, #472]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a50:	4972      	ldr	r1, [pc, #456]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8002a58:	e001      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x406>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d042      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));

    switch (pPeriphClkInit->Adf1ClockSelection)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a74:	d025      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 8002a76:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a7a:	d81f      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002a7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a80:	d021      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8002a82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a86:	d819      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a8c:	d00e      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x454>
 8002a8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a92:	d813      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d018      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x472>
 8002a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9c:	d10e      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x464>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a9e:	4b5f      	ldr	r3, [pc, #380]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	4a5e      	ldr	r2, [pc, #376]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002aaa:	e00f      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3328      	adds	r3, #40	; 0x28
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 ffd3 	bl	8004a5c <RCCEx_PLL3_Config>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	74fb      	strb	r3, [r7, #19]
        break;
 8002aba:	e007      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x474>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	74fb      	strb	r3, [r7, #19]
        break;
 8002ac0:	e004      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 8002ac2:	bf00      	nop
 8002ac4:	e002      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x474>
        break;
 8002aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002ad2:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ad4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ad8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	494e      	ldr	r1, [pc, #312]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8002aea:	e001      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 80a0 	beq.w	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	747b      	strb	r3, [r7, #17]
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d110      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002b20:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	747b      	strb	r3, [r7, #17]
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002b32:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	4a3a      	ldr	r2, [pc, #232]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b3e:	f7fe f805 	bl	8000b4c <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b44:	e009      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b46:	f7fe f801 	bl	8000b4c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d902      	bls.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        ret = HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	74fb      	strb	r3, [r7, #19]
        break;
 8002b58:	e005      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002b5a:	4b31      	ldr	r3, [pc, #196]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ef      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
      }
    }

    if (ret == HAL_OK)
 8002b66:	7cfb      	ldrb	r3, [r7, #19]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d15b      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b6c:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b76:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d01f      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d019      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x566>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b94:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002b9c:	4a1f      	ldr	r2, [pc, #124]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba6:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bac:	4a1b      	ldr	r2, [pc, #108]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bb6:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d016      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fd ffc0 	bl	8000b4c <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bce:	e00b      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd0:	f7fd ffbc 	bl	8000b4c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d902      	bls.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x590>
          {
            ret = HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	74fb      	strb	r3, [r7, #19]
            break;
 8002be6:	e006      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ec      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x578>
          }
        }
      }

      if (ret == HAL_OK)
 8002bf6:	7cfb      	ldrb	r3, [r7, #19]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x5be>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002bfc:	4b07      	ldr	r3, [pc, #28]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002c0c:	4903      	ldr	r1, [pc, #12]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
 8002c14:	e008      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c16:	7cfb      	ldrb	r3, [r7, #19]
 8002c18:	74bb      	strb	r3, [r7, #18]
 8002c1a:	e005      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8002c1c:	46020c00 	.word	0x46020c00
 8002c20:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c28:	7c7b      	ldrb	r3, [r7, #17]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d107      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4bab      	ldr	r3, [pc, #684]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c34:	4aa9      	ldr	r2, [pc, #676]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002c36:	f023 0304 	bic.w	r3, r3, #4
 8002c3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d03a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x668>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(pPeriphClkInit->Clk48ClockSelection));

    switch (pPeriphClkInit->Clk48ClockSelection)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002c54:	d01f      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x63e>
 8002c56:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002c5a:	d819      	bhi.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002c5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c60:	d00f      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8002c62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c66:	d813      	bhi.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d016      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c70:	d10e      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      case RCC_CLK48CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fe58 	bl	800492c <RCCEx_PLL2_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	74fb      	strb	r3, [r7, #19]
        break;
 8002c80:	e00c      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_PLL1:
        /* Enable CLK48 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c82:	4b96      	ldr	r3, [pc, #600]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	4a95      	ldr	r2, [pc, #596]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002c8e:	e005      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x644>
      case RCC_CLK48CLKSOURCE_HSI48:
        break;
      case RCC_CLK48CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	74fb      	strb	r3, [r7, #19]
        break;
 8002c94:	e002      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 8002c96:	bf00      	nop
 8002c98:	e000      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x644>
        break;
 8002c9a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->Clk48ClockSelection);
 8002ca2:	4b8e      	ldr	r3, [pc, #568]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002cb2:	498a      	ldr	r1, [pc, #552]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002cba:	e001      	b.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x668>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d027      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd6:	d00a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x696>
 8002cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cdc:	d804      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d007      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
 8002ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce6:	d006      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	74fb      	strb	r3, [r7, #19]
        break;
 8002cec:	e004      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 8002cee:	bf00      	nop
 8002cf0:	e002      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 8002cf2:	bf00      	nop
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        break;
 8002cf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002cfe:	4b77      	ldr	r3, [pc, #476]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	4973      	ldr	r1, [pc, #460]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8002d16:	e001      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d2e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d38:	4968      	ldr	r1, [pc, #416]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d017      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d56:	d105      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d58:	4b60      	ldr	r3, [pc, #384]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	4a5f      	ldr	r2, [pc, #380]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8002d64:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d74:	4959      	ldr	r1, [pc, #356]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8002d88:	4b54      	ldr	r3, [pc, #336]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d98:	4950      	ldr	r1, [pc, #320]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8002dac:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dbc:	4947      	ldr	r1, [pc, #284]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x790>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8002dd0:	4b42      	ldr	r3, [pc, #264]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dd6:	f023 0218 	bic.w	r2, r3, #24
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002de0:	493e      	ldr	r1, [pc, #248]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d023      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002dfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e00:	4b36      	ldr	r3, [pc, #216]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	4a35      	ldr	r2, [pc, #212]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0a:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002e16:	d105      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
    {
      /* Enable PLL2 Q CLK output */
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8002e18:	4b30      	ldr	r3, [pc, #192]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1c:	4a2f      	ldr	r2, [pc, #188]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e22:	62d3      	str	r3, [r2, #44]	; 0x2c
    }
    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8002e24:	4b2d      	ldr	r3, [pc, #180]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e34:	4929      	ldr	r1, [pc, #164]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
  }

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d032      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e52:	d00e      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e58:	d813      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x82a>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d014      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8002e5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e62:	d10e      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x82a>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e6e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8002e70:	e00b      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 fd58 	bl	800492c <RCCEx_PLL2_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	74fb      	strb	r3, [r7, #19]
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8002e80:	e003      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x832>
      default:
        ret = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	74fb      	strb	r3, [r7, #19]
        break;
 8002e86:	e000      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x832>
        break;
 8002e88:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10c      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8002e90:	4b12      	ldr	r3, [pc, #72]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ea0:	490e      	ldr	r1, [pc, #56]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8002ea8:	e001      	b.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eaa:	7cfb      	ldrb	r3, [r7, #19]
 8002eac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ec0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002eca:	4904      	ldr	r1, [pc, #16]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x884>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  return status;
 8002ed2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	46020c00 	.word	0x46020c00

08002ee0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b089      	sub	sp, #36	; 0x24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8002ee8:	4bac      	ldr	r3, [pc, #688]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ef2:	4baa      	ldr	r3, [pc, #680]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002efc:	4ba7      	ldr	r3, [pc, #668]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	3301      	adds	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8002f0a:	4ba4      	ldr	r3, [pc, #656]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002f14:	4ba1      	ldr	r3, [pc, #644]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	08db      	lsrs	r3, r3, #3
 8002f1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	fb02 f303 	mul.w	r3, r2, r3
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8123 	beq.w	800317e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d062      	beq.n	8003004 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	f200 8081 	bhi.w	8003048 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d024      	beq.n	8002f96 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d17a      	bne.n	8003048 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80031a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8002f60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f64:	4b8d      	ldr	r3, [pc, #564]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6c:	ee07 3a90 	vmov	s15, r3
 8002f70:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f74:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f78:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80031a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8002f7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f80:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f88:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f94:	e08f      	b.n	80030b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8002f96:	4b81      	ldr	r3, [pc, #516]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8002fa2:	4b7e      	ldr	r3, [pc, #504]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0f1b      	lsrs	r3, r3, #28
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	e006      	b.n	8002fbc <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8002fae:	4b7b      	ldr	r3, [pc, #492]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8002fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	0f1b      	lsrs	r3, r3, #28
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	4a7a      	ldr	r2, [pc, #488]	; (80031a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8002fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc2:	ee07 3a90 	vmov	s15, r3
 8002fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	ee07 3a90 	vmov	s15, r3
 8002fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fe6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80031a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8002fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8002ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003002:	e058      	b.n	80030b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80031a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8003012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003016:	4b61      	ldr	r3, [pc, #388]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003026:	ed97 6a02 	vldr	s12, [r7, #8]
 800302a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80031a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800302e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003032:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800303a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800303e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003046:	e036      	b.n	80030b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003048:	4b54      	ldr	r3, [pc, #336]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8003054:	4b51      	ldr	r3, [pc, #324]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	0f1b      	lsrs	r3, r3, #28
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	e006      	b.n	800306e <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8003060:	4b4e      	ldr	r3, [pc, #312]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003066:	041b      	lsls	r3, r3, #16
 8003068:	0f1b      	lsrs	r3, r3, #28
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	4a4e      	ldr	r2, [pc, #312]	; (80031a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8003070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003074:	ee07 3a90 	vmov	s15, r3
 8003078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003094:	ed97 6a02 	vldr	s12, [r7, #8]
 8003098:	eddf 5a42 	vldr	s11, [pc, #264]	; 80031a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800309c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80030ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030b4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80030b6:	4b39      	ldr	r3, [pc, #228]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d017      	beq.n	80030f2 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80030c2:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80030c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c6:	0a5b      	lsrs	r3, r3, #9
 80030c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80030d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80030d8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80030dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80030e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e8:	ee17 2a90 	vmov	r2, s15
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e002      	b.n	80030f8 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d017      	beq.n	8003134 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003104:	4b25      	ldr	r3, [pc, #148]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	0c1b      	lsrs	r3, r3, #16
 800310a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800311a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800311e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800312a:	ee17 2a90 	vmov	r2, s15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	e002      	b.n	800313a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d017      	beq.n	8003176 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003146:	4b15      	ldr	r3, [pc, #84]	; (800319c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	0e1b      	lsrs	r3, r3, #24
 800314c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003150:	ee07 3a90 	vmov	s15, r3
 8003154:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003158:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800315c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003160:	edd7 6a07 	vldr	s13, [r7, #28]
 8003164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316c:	ee17 2a90 	vmov	r2, s15
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	609a      	str	r2, [r3, #8]
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }
}
 8003174:	e00c      	b.n	8003190 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	609a      	str	r2, [r3, #8]
}
 800317c:	e008      	b.n	8003190 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
}
 8003190:	bf00      	nop
 8003192:	3724      	adds	r7, #36	; 0x24
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	46020c00 	.word	0x46020c00
 80031a0:	4b742400 	.word	0x4b742400
 80031a4:	46000000 	.word	0x46000000
 80031a8:	08005528 	.word	0x08005528

080031ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80031b4:	4bac      	ldr	r3, [pc, #688]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031bc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80031be:	4baa      	ldr	r3, [pc, #680]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80031c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80031c8:	4ba7      	ldr	r3, [pc, #668]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	0a1b      	lsrs	r3, r3, #8
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3301      	adds	r3, #1
 80031d4:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80031d6:	4ba4      	ldr	r3, [pc, #656]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80031d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80031e0:	4ba1      	ldr	r3, [pc, #644]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	08db      	lsrs	r3, r3, #3
 80031e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	fb02 f303 	mul.w	r3, r2, r3
 80031f0:	ee07 3a90 	vmov	s15, r3
 80031f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8123 	beq.w	800344a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b03      	cmp	r3, #3
 8003208:	d062      	beq.n	80032d0 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	2b03      	cmp	r3, #3
 800320e:	f200 8081 	bhi.w	8003314 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d024      	beq.n	8003262 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d17a      	bne.n	8003314 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	ee07 3a90 	vmov	s15, r3
 8003224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003228:	eddf 6a90 	vldr	s13, [pc, #576]	; 800346c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800322c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003230:	4b8d      	ldr	r3, [pc, #564]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003238:	ee07 3a90 	vmov	s15, r3
 800323c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003240:	ed97 6a02 	vldr	s12, [r7, #8]
 8003244:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003470 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003248:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800324c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003250:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003254:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800325c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003260:	e08f      	b.n	8003382 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003262:	4b81      	ldr	r3, [pc, #516]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 800326e:	4b7e      	ldr	r3, [pc, #504]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	0f1b      	lsrs	r3, r3, #28
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	e006      	b.n	8003288 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800327a:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800327c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	0f1b      	lsrs	r3, r3, #28
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	4a7a      	ldr	r2, [pc, #488]	; (8003474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003470 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80032b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80032c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032ce:	e058      	b.n	8003382 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	eddf 6a64 	vldr	s13, [pc, #400]	; 800346c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80032de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e2:	4b61      	ldr	r3, [pc, #388]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80032e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80032f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003470 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80032fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80032fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003306:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003312:	e036      	b.n	8003382 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003314:	4b54      	ldr	r3, [pc, #336]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8003320:	4b51      	ldr	r3, [pc, #324]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	0f1b      	lsrs	r3, r3, #28
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	e006      	b.n	800333a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800332c:	4b4e      	ldr	r3, [pc, #312]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800332e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	0f1b      	lsrs	r3, r3, #28
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800333c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	ee07 3a90 	vmov	s15, r3
 800334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	ee07 3a90 	vmov	s15, r3
 800335c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003360:	ed97 6a02 	vldr	s12, [r7, #8]
 8003364:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003470 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800336c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003374:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003380:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8003382:	4b39      	ldr	r3, [pc, #228]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d017      	beq.n	80033be <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	0a5b      	lsrs	r3, r3, #9
 8003394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80033a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033a4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80033a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80033ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b4:	ee17 2a90 	vmov	r2, s15
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e002      	b.n	80033c4 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80033c4:	4b28      	ldr	r3, [pc, #160]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d017      	beq.n	8003400 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80033d0:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80033d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033da:	ee07 3a90 	vmov	s15, r3
 80033de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80033e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033e6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80033ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80033ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f6:	ee17 2a90 	vmov	r2, s15
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	e002      	b.n	8003406 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003406:	4b18      	ldr	r3, [pc, #96]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d017      	beq.n	8003442 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003416:	0e1b      	lsrs	r3, r3, #24
 8003418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003424:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003428:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800342c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003438:	ee17 2a90 	vmov	r2, s15
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003440:	e00c      	b.n	800345c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]
}
 8003448:	e008      	b.n	800345c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
}
 800345c:	bf00      	nop
 800345e:	3724      	adds	r7, #36	; 0x24
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	46020c00 	.word	0x46020c00
 800346c:	4b742400 	.word	0x4b742400
 8003470:	46000000 	.word	0x46000000
 8003474:	08005528 	.word	0x08005528

08003478 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003480:	4bac      	ldr	r3, [pc, #688]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003488:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800348a:	4baa      	ldr	r3, [pc, #680]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0303 	and.w	r3, r3, #3
 8003492:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003494:	4ba7      	ldr	r3, [pc, #668]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	f003 030f 	and.w	r3, r3, #15
 800349e:	3301      	adds	r3, #1
 80034a0:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80034a2:	4ba4      	ldr	r3, [pc, #656]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f003 0310 	and.w	r3, r3, #16
 80034aa:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80034ac:	4ba1      	ldr	r3, [pc, #644]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80034ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b0:	08db      	lsrs	r3, r3, #3
 80034b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	ee07 3a90 	vmov	s15, r3
 80034c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c4:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 8123 	beq.w	8003716 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d062      	beq.n	800359c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	f200 8081 	bhi.w	80035e0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d024      	beq.n	800352e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d17a      	bne.n	80035e0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80034f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fc:	4b8d      	ldr	r3, [pc, #564]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800350c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003510:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800373c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003514:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003518:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800351c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003520:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003528:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800352c:	e08f      	b.n	800364e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800352e:	4b81      	ldr	r3, [pc, #516]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800353a:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	0f1b      	lsrs	r3, r3, #28
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	e006      	b.n	8003554 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8003546:	4b7b      	ldr	r3, [pc, #492]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800354c:	041b      	lsls	r3, r3, #16
 800354e:	0f1b      	lsrs	r3, r3, #28
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357a:	ed97 6a02 	vldr	s12, [r7, #8]
 800357e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800373c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800358e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800359a:	e058      	b.n	800364e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003738 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80035aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ae:	4b61      	ldr	r3, [pc, #388]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80035be:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c2:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800373c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80035c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80035ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80035ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80035d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035de:	e036      	b.n	800364e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80035e0:	4b54      	ldr	r3, [pc, #336]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80035ec:	4b51      	ldr	r3, [pc, #324]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	0f1b      	lsrs	r3, r3, #28
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	e006      	b.n	8003606 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 80035f8:	4b4e      	ldr	r3, [pc, #312]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80035fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	0f1b      	lsrs	r3, r3, #28
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	4a4e      	ldr	r2, [pc, #312]	; (8003740 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360c:	ee07 3a90 	vmov	s15, r3
 8003610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	ee07 3a90 	vmov	s15, r3
 800361a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800362c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003630:	eddf 5a42 	vldr	s11, [pc, #264]	; 800373c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800363c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003640:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003648:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800364c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800364e:	4b39      	ldr	r3, [pc, #228]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d017      	beq.n	800368a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800365a:	4b36      	ldr	r3, [pc, #216]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	0a5b      	lsrs	r3, r3, #9
 8003660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800366c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003670:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003674:	edd7 6a07 	vldr	s13, [r7, #28]
 8003678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003680:	ee17 2a90 	vmov	r2, s15
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e002      	b.n	8003690 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d017      	beq.n	80036cc <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80036ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036b2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80036b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c2:	ee17 2a90 	vmov	r2, s15
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	605a      	str	r2, [r3, #4]
 80036ca:	e002      	b.n	80036d2 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d017      	beq.n	800370e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80036e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e2:	0e1b      	lsrs	r3, r3, #24
 80036e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80036f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80036f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003704:	ee17 2a90 	vmov	r2, s15
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800370c:	e00c      	b.n	8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
}
 8003714:	e008      	b.n	8003728 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
}
 8003728:	bf00      	nop
 800372a:	3724      	adds	r7, #36	; 0x24
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	46020c00 	.word	0x46020c00
 8003738:	4b742400 	.word	0x4b742400
 800373c:	46000000 	.word	0x46000000
 8003740:	08005528 	.word	0x08005528

08003744 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08e      	sub	sp, #56	; 0x38
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003752:	d145      	bne.n	80037e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003754:	4bcc      	ldr	r3, [pc, #816]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800375a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003760:	4bc9      	ldr	r3, [pc, #804]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003762:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d108      	bne.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003774:	d104      	bne.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
    {
      frequency = LSE_VALUE;
 8003776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377a:	637b      	str	r3, [r7, #52]	; 0x34
 800377c:	f001 b8cd 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003780:	4bc1      	ldr	r3, [pc, #772]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800378a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800378e:	d114      	bne.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003796:	d110      	bne.n	80037ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003798:	4bbb      	ldr	r3, [pc, #748]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 800379a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800379e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037a6:	d103      	bne.n	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
      {
        frequency = LSI_VALUE / 128U;
 80037a8:	23fa      	movs	r3, #250	; 0xfa
 80037aa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80037ac:	f001 b8b5 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
      else
      {
        frequency = LSI_VALUE;
 80037b0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80037b6:	f001 b8b0 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80037ba:	4bb3      	ldr	r3, [pc, #716]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037c6:	d107      	bne.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ce:	d103      	bne.n	80037d8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
    {
      frequency = HSE_VALUE / 32U;
 80037d0:	4bae      	ldr	r3, [pc, #696]	; (8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
 80037d4:	f001 b8a1 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	637b      	str	r3, [r7, #52]	; 0x34
 80037dc:	f001 b89d 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e6:	f001 806d 	beq.w	80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1180>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037f0:	f201 8090 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fa:	f000 86d3 	beq.w	80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe60>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003804:	f201 8086 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800380e:	f001 8004 	beq.w	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x10d6>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003818:	f201 807c 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003822:	f000 878b 	beq.w	800473c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800382c:	f201 8072 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003836:	f000 8732 	beq.w	800469e <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003840:	f201 8068 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800384a:	f000 86d9 	beq.w	8004600 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003854:	f201 805e 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800385e:	f000 8592 	beq.w	8004386 <HAL_RCCEx_GetPeriphCLKFreq+0xc42>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003868:	f201 8054 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003872:	f000 81f6 	beq.w	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800387c:	f201 804a 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003886:	f000 8194 	beq.w	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003890:	f201 8040 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800389a:	f000 847f 	beq.w	800419c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038a4:	f201 8036 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ae:	f000 842a 	beq.w	8004106 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b8:	f201 802c 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c2:	f000 83bd 	beq.w	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038cc:	f201 8022 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038d6:	f000 80f1 	beq.w	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e0:	f201 8018 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ea:	f000 8095 	beq.w	8003a18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f4:	f201 800e 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	f000 8131 	beq.w	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	f201 8004 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003912:	f000 855e 	beq.w	80043d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc8e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800391c:	f200 87fa 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003926:	f000 85f8 	beq.w	800451a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003930:	f200 87f0 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393a:	f000 859c 	beq.w	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003944:	f200 87e6 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800394e:	f000 84d0 	beq.w	80042f2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003958:	f200 87dc 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b80      	cmp	r3, #128	; 0x80
 8003960:	f000 849b 	beq.w	800429a <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b80      	cmp	r3, #128	; 0x80
 8003968:	f200 87d4 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b20      	cmp	r3, #32
 8003970:	d84c      	bhi.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f000 87cd 	beq.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3b01      	subs	r3, #1
 800397e:	2b1f      	cmp	r3, #31
 8003980:	f200 87c8 	bhi.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <HAL_RCCEx_GetPeriphCLKFreq+0x248>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	08003d5d 	.word	0x08003d5d
 8003990:	08003dcb 	.word	0x08003dcb
 8003994:	08004915 	.word	0x08004915
 8003998:	08003e39 	.word	0x08003e39
 800399c:	08004915 	.word	0x08004915
 80039a0:	08004915 	.word	0x08004915
 80039a4:	08004915 	.word	0x08004915
 80039a8:	08003ea7 	.word	0x08003ea7
 80039ac:	08004915 	.word	0x08004915
 80039b0:	08004915 	.word	0x08004915
 80039b4:	08004915 	.word	0x08004915
 80039b8:	08004915 	.word	0x08004915
 80039bc:	08004915 	.word	0x08004915
 80039c0:	08004915 	.word	0x08004915
 80039c4:	08004915 	.word	0x08004915
 80039c8:	08003f15 	.word	0x08003f15
 80039cc:	08004915 	.word	0x08004915
 80039d0:	08004915 	.word	0x08004915
 80039d4:	08004915 	.word	0x08004915
 80039d8:	08004915 	.word	0x08004915
 80039dc:	08004915 	.word	0x08004915
 80039e0:	08004915 	.word	0x08004915
 80039e4:	08004915 	.word	0x08004915
 80039e8:	08004915 	.word	0x08004915
 80039ec:	08004915 	.word	0x08004915
 80039f0:	08004915 	.word	0x08004915
 80039f4:	08004915 	.word	0x08004915
 80039f8:	08004915 	.word	0x08004915
 80039fc:	08004915 	.word	0x08004915
 8003a00:	08004915 	.word	0x08004915
 8003a04:	08004915 	.word	0x08004915
 8003a08:	08003f89 	.word	0x08003f89
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	f000 841d 	beq.w	800424e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8003a14:	f000 bf7e 	b.w	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x11d0>
    {
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003a18:	4b1b      	ldr	r3, [pc, #108]	; (8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8003a1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003a1e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003a22:	633b      	str	r3, [r7, #48]	; 0x30
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	2b80      	cmp	r3, #128	; 0x80
 8003a28:	d036      	beq.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8003a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2c:	2b80      	cmp	r3, #128	; 0x80
 8003a2e:	d840      	bhi.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8003a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a32:	2b60      	cmp	r3, #96	; 0x60
 8003a34:	d02c      	beq.n	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	2b60      	cmp	r3, #96	; 0x60
 8003a3a:	d83a      	bhi.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8003a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d009      	beq.n	8003a56 <HAL_RCCEx_GetPeriphCLKFreq+0x312>
 8003a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	d834      	bhi.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 8003a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d010      	beq.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8003a54:	e02d      	b.n	8003ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fa40 	bl	8002ee0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003a64:	e028      	b.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a66:	f107 0318 	add.w	r3, r7, #24
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fb9e 	bl	80031ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003a74:	e020      	b.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fcfc 	bl	8003478 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003a84:	e018      	b.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
 8003a86:	bf00      	nop
 8003a88:	46020c00 	.word	0x46020c00
 8003a8c:	0007a120 	.word	0x0007a120

          case RCC_SAI1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003a90:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003a94:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003a96:	e00f      	b.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a98:	4bab      	ldr	r3, [pc, #684]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa4:	d102      	bne.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            {
              frequency = HSI_VALUE;
 8003aa6:	4ba9      	ldr	r3, [pc, #676]	; (8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8003aa8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8003aaa:	e005      	b.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>
              frequency = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ab0:	e002      	b.n	8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x374>

          default :
          {
            frequency = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003ab6:	bf00      	nop
          }
        }
        break;
 8003ab8:	f000 bf2f 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003abc:	4ba2      	ldr	r3, [pc, #648]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003abe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ac2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d037      	beq.n	8003b40 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d840      	bhi.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ade:	d02b      	beq.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae6:	d838      	bhi.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aee:	d00b      	beq.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af6:	d830      	bhi.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00c      	beq.n	8003b18 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b04:	d010      	beq.n	8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
 8003b06:	e028      	b.n	8003b5a <HAL_RCCEx_GetPeriphCLKFreq+0x416>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff f9e7 	bl	8002ee0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b16:	e023      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b18:	f107 0318 	add.w	r3, r7, #24
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fb45 	bl	80031ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b26:	e01b      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff fca3 	bl	8003478 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b36:	e013      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003b38:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b3e:	e00f      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b40:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b4c:	d102      	bne.n	8003b54 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
            {
              frequency = HSI_VALUE;
 8003b4e:	4b7f      	ldr	r3, [pc, #508]	; (8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8003b52:	e005      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              frequency = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b58:	e002      	b.n	8003b60 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>

          default :

            frequency = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003b5e:	bf00      	nop

        }
        break;
 8003b60:	f000 bedb 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
      case RCC_PERIPHCLK_SAES:
        /* Get the current SAES source */
        srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003b64:	4b78      	ldr	r3, [pc, #480]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003b66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b6e:	633b      	str	r3, [r7, #48]	; 0x30

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003b70:	4b75      	ldr	r3, [pc, #468]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b7c:	d105      	bne.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
        {
          frequency = HSI_VALUE;
 8003b84:	4b71      	ldr	r3, [pc, #452]	; (8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x608>)
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
 8003b88:	e011      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003b8a:	4b6f      	ldr	r3, [pc, #444]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
        {
          frequency = HSI_VALUE >> 1U;
 8003ba0:	4b6b      	ldr	r3, [pc, #428]	; (8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>)
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba4:	e003      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
        }
        /* Clock not enabled for SAES */
        else
        {
          frequency = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8003baa:	f000 beb6 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003bae:	f000 beb4 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_CLK48:

        srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bb8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bc4:	d030      	beq.n	8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003bcc:	d844      	bhi.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd4:	d00b      	beq.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x4aa>
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bdc:	d83c      	bhi.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d014      	beq.n	8003c0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
 8003be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bea:	d008      	beq.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8003bec:	e034      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x514>

        switch (srcclk)
        {
          case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff f974 	bl	8002ee0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003bfc:	e02f      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bfe:	f107 0318 	add.w	r3, r7, #24
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fad2 	bl	80031ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003c0c:	e027      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003c0e:	4b4e      	ldr	r3, [pc, #312]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1a:	d102      	bne.n	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
            {
              frequency = HSI48_VALUE;
 8003c1c:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8003c1e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 8003c20:	e01d      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
              frequency = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003c26:	e01a      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003c28:	4b47      	ldr	r3, [pc, #284]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
 8003c34:	4b44      	ldr	r3, [pc, #272]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	0e1b      	lsrs	r3, r3, #24
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	e006      	b.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 8003c40:	4b41      	ldr	r3, [pc, #260]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	0e1b      	lsrs	r3, r3, #24
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	4a42      	ldr	r2, [pc, #264]	; (8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8003c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003c56:	e002      	b.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>

          default :

            frequency = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8003c5c:	bf00      	nop

        }
        break;
 8003c5e:	f000 be5c 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SDMMC:
        srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003c62:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d157      	bne.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          srcclk = __HAL_RCC_GET_CLK48_SOURCE();
 8003c74:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c7a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c86:	d030      	beq.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8003c8e:	d844      	bhi.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c96:	d00b      	beq.n	8003cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c9e:	d83c      	bhi.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d014      	beq.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8003ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cac:	d008      	beq.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8003cae:	e034      	b.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x5d6>

          switch (srcclk)
          {
            case RCC_CLK48CLKSOURCE_PLL1: /* PLL1Q  */
            {
              HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff f913 	bl	8002ee0 <HAL_RCCEx_GetPLL1ClockFreq>
              frequency = pll1_clocks.PLL1_Q_Frequency;
 8003cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbc:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003cbe:	e02f      	b.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_PLL2: /* PLL2Q */
            {
              HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cc0:	f107 0318 	add.w	r3, r7, #24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff fa71 	bl	80031ac <HAL_RCCEx_GetPLL2ClockFreq>
              frequency = pll2_clocks.PLL2_Q_Frequency;
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003cce:	e027      	b.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_HSI48: /* HSI48 */
            {
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cdc:	d102      	bne.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
              {
                frequency = HSI48_VALUE;
 8003cde:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x610>)
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
              }
              else
              {
                frequency = 0U;
              }
              break;
 8003ce2:	e01d      	b.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
                frequency = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003ce8:	e01a      	b.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            case RCC_CLK48CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
            {
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003cea:	4b17      	ldr	r3, [pc, #92]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0e1b      	lsrs	r3, r3, #24
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	e006      	b.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x604>)
 8003d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d08:	041b      	lsls	r3, r3, #16
 8003d0a:	0e1b      	lsrs	r3, r3, #24
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	4a11      	ldr	r2, [pc, #68]	; (8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x614>)
 8003d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003d18:	e002      	b.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
            }
            default :
            {
              frequency = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8003d1e:	bf00      	nop
            }
          }
          break;
 8003d20:	f000 bdfb 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        }
        else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d2a:	d108      	bne.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7ff f8d5 	bl	8002ee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_P_Frequency;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003d3a:	f000 bdee 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003d42:	f000 bdea 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003d46:	bf00      	nop
 8003d48:	46020c00 	.word	0x46020c00
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	007a1200 	.word	0x007a1200
 8003d54:	02dc6c00 	.word	0x02dc6c00
 8003d58:	08005528 	.word	0x08005528

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d5c:	4bad      	ldr	r3, [pc, #692]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d104      	bne.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8003d6e:	f7fe fbc5 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 8003d72:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003d74:	f000 bdd1 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d104      	bne.n	8003d88 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d7e:	f7fe fa87 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8003d82:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003d84:	f000 bdc9 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8003d88:	4ba2      	ldr	r3, [pc, #648]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d94:	d105      	bne.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d102      	bne.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          frequency = HSI_VALUE;
 8003d9c:	4b9e      	ldr	r3, [pc, #632]	; (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003da0:	e011      	b.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8003da2:	4b9c      	ldr	r3, [pc, #624]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003da4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d106      	bne.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d103      	bne.n	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
          frequency = LSE_VALUE;
 8003db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dba:	637b      	str	r3, [r7, #52]	; 0x34
 8003dbc:	e003      	b.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
          frequency = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003dc2:	f000 bdaa 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003dc6:	f000 bda8 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003dca:	4b92      	ldr	r3, [pc, #584]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d104      	bne.n	8003de6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7fe fb7a 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003de0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8003de2:	f000 bd9a 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	d104      	bne.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
          frequency = HAL_RCC_GetSysClockFreq();
 8003dec:	f7fe fa50 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8003df0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003df2:	f000 bd92 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8003df6:	4b87      	ldr	r3, [pc, #540]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e02:	d105      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d102      	bne.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
          frequency = HSI_VALUE;
 8003e0a:	4b83      	ldr	r3, [pc, #524]	; (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0e:	e011      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8003e10:	4b80      	ldr	r3, [pc, #512]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003e12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	2b0c      	cmp	r3, #12
 8003e22:	d103      	bne.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          frequency = LSE_VALUE;
 8003e24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e28:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2a:	e003      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
          frequency = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e30:	f000 bd73 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003e34:	f000 bd71 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e38:	4b76      	ldr	r3, [pc, #472]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e3e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e42:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e4a:	f7fe fb43 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003e4e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8003e50:	f000 bd63 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d104      	bne.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e5a:	f7fe fa19 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8003e5e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003e60:	f000 bd5b 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8003e64:	4b6b      	ldr	r3, [pc, #428]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e70:	d105      	bne.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d102      	bne.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
          frequency = HSI_VALUE;
 8003e78:	4b67      	ldr	r3, [pc, #412]	; (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e7c:	e011      	b.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8003e7e:	4b65      	ldr	r3, [pc, #404]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d106      	bne.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2b30      	cmp	r3, #48	; 0x30
 8003e90:	d103      	bne.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = LSE_VALUE;
 8003e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e96:	637b      	str	r3, [r7, #52]	; 0x34
 8003e98:	e003      	b.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = 0U;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e9e:	f000 bd3c 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003ea2:	f000 bd3a 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003ea6:	4b5b      	ldr	r3, [pc, #364]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eb0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8003eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d104      	bne.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eb8:	f7fe fb0c 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003ebc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8003ebe:	f000 bd2c 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d104      	bne.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ec8:	f7fe f9e2 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8003ecc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003ece:	f000 bd24 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8003ed2:	4b50      	ldr	r3, [pc, #320]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ede:	d105      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	2b80      	cmp	r3, #128	; 0x80
 8003ee4:	d102      	bne.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
          frequency = HSI_VALUE;
 8003ee6:	4b4c      	ldr	r3, [pc, #304]	; (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	e011      	b.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8003eec:	4b49      	ldr	r3, [pc, #292]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	2bc0      	cmp	r3, #192	; 0xc0
 8003efe:	d103      	bne.n	8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
          frequency = LSE_VALUE;
 8003f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f04:	637b      	str	r3, [r7, #52]	; 0x34
 8003f06:	e003      	b.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
          frequency = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f0c:	f000 bd05 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003f10:	f000 bd03 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f14:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8003f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f26:	f7fe fad5 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8003f2a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8003f2c:	f000 bcf5 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f36:	d104      	bne.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f38:	f7fe f9aa 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8003f3c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003f3e:	f000 bcec 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8003f42:	4b34      	ldr	r3, [pc, #208]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f56:	d102      	bne.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
          frequency = HSI_VALUE;
 8003f58:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5c:	e012      	b.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d107      	bne.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f72:	d103      	bne.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
          frequency = LSE_VALUE;
 8003f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7a:	e003      	b.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
          frequency = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f80:	f000 bccb 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8003f84:	f000 bcc9 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003f88:	4b22      	ldr	r3, [pc, #136]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8003f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d104      	bne.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8003f9a:	f7fe fac3 	bl	8002524 <HAL_RCC_GetPCLK3Freq>
 8003f9e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8003fa0:	f000 bcbb 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d104      	bne.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 8003faa:	f7fe f971 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8003fae:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8003fb0:	f000 bcb3 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc0:	d105      	bne.n	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d102      	bne.n	8003fce <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HSI_VALUE;
 8003fc8:	4b13      	ldr	r3, [pc, #76]	; (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>)
 8003fca:	637b      	str	r3, [r7, #52]	; 0x34
 8003fcc:	e036      	b.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003fd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d106      	bne.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d103      	bne.n	8003fea <HAL_RCCEx_GetPeriphCLKFreq+0x8a6>
          frequency = LSE_VALUE;
 8003fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe8:	e028      	b.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d11e      	bne.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d11b      	bne.n	8004034 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8004008:	4b02      	ldr	r3, [pc, #8]	; (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	0e1b      	lsrs	r3, r3, #24
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	e00a      	b.n	800402a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8004014:	46020c00 	.word	0x46020c00
 8004018:	00f42400 	.word	0x00f42400
 800401c:	4bb0      	ldr	r3, [pc, #704]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800401e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	0e1b      	lsrs	r3, r3, #24
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	4aae      	ldr	r2, [pc, #696]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800402c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
 8004032:	e003      	b.n	800403c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = 0U;
 8004034:	2300      	movs	r3, #0
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004038:	f000 bc6f 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 800403c:	f000 bc6d 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADCDAC:

        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8004040:	4ba7      	ldr	r3, [pc, #668]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004042:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004046:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800404a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004052:	d104      	bne.n	800405e <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
        {
          frequency = HAL_RCC_GetSysClockFreq();
 8004054:	f7fe f91c 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8004058:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADC */
        else
        {
          frequency = 0U;
        }
        break;
 800405a:	f000 bc5e 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800405e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004064:	d108      	bne.n	8004078 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004066:	f107 0318 	add.w	r3, r7, #24
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff f89e 	bl	80031ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004074:	f000 bc51 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	2b00      	cmp	r3, #0
 800407c:	d104      	bne.n	8004088 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetHCLKFreq();
 800407e:	f7fe fa0f 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 8004082:	6378      	str	r0, [r7, #52]	; 0x34
          break;
 8004084:	f000 bc49 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800408e:	d118      	bne.n	80040c2 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004090:	4b93      	ldr	r3, [pc, #588]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800409c:	4b90      	ldr	r3, [pc, #576]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	0f1b      	lsrs	r3, r3, #28
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	e006      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 80040a8:	4b8d      	ldr	r3, [pc, #564]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80040aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	0f1b      	lsrs	r3, r3, #28
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	4a8b      	ldr	r2, [pc, #556]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 80040b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80040be:	f000 bc2c 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80040c2:	4b87      	ldr	r3, [pc, #540]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ce:	d106      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040d6:	d102      	bne.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
          frequency = HSE_VALUE;
 80040d8:	4b83      	ldr	r3, [pc, #524]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 80040da:	637b      	str	r3, [r7, #52]	; 0x34
 80040dc:	e011      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80040de:	4b80      	ldr	r3, [pc, #512]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ea:	d106      	bne.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f2:	d102      	bne.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
          frequency = HSI_VALUE;
 80040f4:	4b7c      	ldr	r3, [pc, #496]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
 80040f8:	e003      	b.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
          frequency = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040fe:	f000 bc0c 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004102:	f000 bc0a 	b.w	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_MDF1:
        /* Get the current MDF1 source */
        srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8004106:	4b76      	ldr	r3, [pc, #472]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004108:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	2b04      	cmp	r3, #4
 8004116:	d83d      	bhi.n	8004194 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004155 	.word	0x08004155
 8004124:	08004135 	.word	0x08004135
 8004128:	08004145 	.word	0x08004145
 800412c:	0800415d 	.word	0x0800415d
 8004130:	08004165 	.word	0x08004165

        switch (srcclk)
        {
          case RCC_MDF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004138:	4618      	mov	r0, r3
 800413a:	f7fe fed1 	bl	8002ee0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004142:	e02a      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004144:	f107 030c 	add.w	r3, r7, #12
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f995 	bl	8003478 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004152:	e022      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 8004154:	f7fe f9a4 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 8004158:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800415a:	e01e      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800415c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004160:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004162:	e01a      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          case RCC_MDF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004164:	4b5e      	ldr	r3, [pc, #376]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d005      	beq.n	800417c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004170:	4b5b      	ldr	r3, [pc, #364]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	0e1b      	lsrs	r3, r3, #24
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	e006      	b.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 800417c:	4b58      	ldr	r3, [pc, #352]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800417e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004182:	041b      	lsls	r3, r3, #16
 8004184:	0e1b      	lsrs	r3, r3, #24
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	4a56      	ldr	r2, [pc, #344]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800418c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004192:	e002      	b.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>

          default:

            frequency = 0U;
 8004194:	2300      	movs	r3, #0
 8004196:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004198:	bf00      	nop

        }
        break;
 800419a:	e3be      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_ADF1:
        /* Get the current ADF1 source */
        srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800419c:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800419e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80041a2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80041a6:	633b      	str	r3, [r7, #48]	; 0x30
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041ae:	d032      	beq.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041b6:	d846      	bhi.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041be:	d026      	beq.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041c6:	d83e      	bhi.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041ce:	d012      	beq.n	80041f6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d6:	d836      	bhi.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d013      	beq.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e4:	d12f      	bne.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0xb02>

        switch (srcclk)
        {
          case RCC_ADF1CLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fe78 	bl	8002ee0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_P_Frequency;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80041f4:	e02a      	b.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PLL3:

            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80041f6:	f107 030c 	add.w	r3, r7, #12
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f93c 	bl	8003478 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_Q_Frequency;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004204:	e022      	b.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_HCLK:

            frequency = HAL_RCC_GetHCLKFreq();
 8004206:	f7fe f94b 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 800420a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800420c:	e01e      	b.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_PIN:

            frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800420e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004212:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004214:	e01a      	b.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          case RCC_ADF1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004216:	4b32      	ldr	r3, [pc, #200]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8004222:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0e1b      	lsrs	r3, r3, #24
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	e006      	b.n	800423c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 800422e:	4b2c      	ldr	r3, [pc, #176]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004234:	041b      	lsls	r3, r3, #16
 8004236:	0e1b      	lsrs	r3, r3, #24
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	4a29      	ldr	r2, [pc, #164]	; (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>)
 800423e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004244:	e002      	b.n	800424c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>

          default:

            frequency = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800424a:	bf00      	nop
        }
        break;
 800424c:	e365      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800424e:	4b24      	ldr	r3, [pc, #144]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 8004250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004258:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004260:	f7fe f938 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8004264:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004266:	e358      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800426e:	d103      	bne.n	8004278 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          frequency = HAL_RCC_GetSysClockFreq();
 8004270:	f7fe f80e 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8004274:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004276:	e350      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004284:	d106      	bne.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8004286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428c:	d102      	bne.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
          frequency = HSI_VALUE;
 800428e:	4b16      	ldr	r3, [pc, #88]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 8004290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004292:	e342      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004298:	e33f      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800429a:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 800429c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80042ac:	f7fe f912 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 80042b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80042b2:	e332      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ba:	d103      	bne.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
          frequency = HAL_RCC_GetSysClockFreq();
 80042bc:	f7fd ffe8 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80042c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80042c2:	e32a      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d0:	d10c      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042d8:	d108      	bne.n	80042ec <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
          frequency = HSI_VALUE;
 80042da:	4b03      	ldr	r3, [pc, #12]	; (80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>)
 80042dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042de:	e31c      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 80042e0:	46020c00 	.word	0x46020c00
 80042e4:	08005528 	.word	0x08005528
 80042e8:	00f42400 	.word	0x00f42400
          frequency = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80042f0:	e313      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80042f2:	4ba9      	ldr	r3, [pc, #676]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80042f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	2bc0      	cmp	r3, #192	; 0xc0
 8004302:	d024      	beq.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	2bc0      	cmp	r3, #192	; 0xc0
 8004308:	d839      	bhi.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	2b80      	cmp	r3, #128	; 0x80
 800430e:	d00d      	beq.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	2b80      	cmp	r3, #128	; 0x80
 8004314:	d833      	bhi.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800431c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431e:	2b40      	cmp	r3, #64	; 0x40
 8004320:	d011      	beq.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0xc02>
 8004322:	e02c      	b.n	800437e <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>

        switch (srcclk)
        {
          case RCC_I2C3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8004324:	f7fe f8fe 	bl	8002524 <HAL_RCC_GetPCLK3Freq>
 8004328:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800432a:	e02b      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_HSI:
          {
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800432c:	4b9a      	ldr	r3, [pc, #616]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004338:	d102      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xbfc>
            {
              frequency = HSI_VALUE;
 800433a:	4b98      	ldr	r3, [pc, #608]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800433c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800433e:	e021      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004344:	e01e      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_SYSCLK:
          {
            frequency = HAL_RCC_GetSysClockFreq();
 8004346:	f7fd ffa3 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800434a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800434c:	e01a      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          case RCC_I2C3CLKSOURCE_MSIK:
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 800434e:	4b92      	ldr	r3, [pc, #584]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800435a:	4b8f      	ldr	r3, [pc, #572]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	0f1b      	lsrs	r3, r3, #28
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	e006      	b.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xc30>
 8004366:	4b8c      	ldr	r3, [pc, #560]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	0f1b      	lsrs	r3, r3, #28
 8004370:	f003 030f 	and.w	r3, r3, #15
 8004374:	4a8a      	ldr	r2, [pc, #552]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800437c:	e002      	b.n	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
          }
          default:
          {
            frequency = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004382:	bf00      	nop
          }
        }
        break;
 8004384:	e2c9      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004386:	4b84      	ldr	r3, [pc, #528]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800438c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004390:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8004392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004394:	2b00      	cmp	r3, #0
 8004396:	d103      	bne.n	80043a0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004398:	f7fe f89c 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 800439c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800439e:	e2bc      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043a6:	d103      	bne.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
          frequency = HAL_RCC_GetSysClockFreq();
 80043a8:	f7fd ff72 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80043ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80043ae:	e2b4      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80043b0:	4b79      	ldr	r3, [pc, #484]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043bc:	d106      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c4:	d102      	bne.n	80043cc <HAL_RCCEx_GetPeriphCLKFreq+0xc88>
          frequency = HSI_VALUE;
 80043c6:	4b75      	ldr	r3, [pc, #468]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 80043c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043ca:	e2a6      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80043d0:	e2a3      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM34:
        /* Get the current LPTIM34 source */
        srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80043d2:	4b71      	ldr	r3, [pc, #452]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80043d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043dc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d117      	bne.n	8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80043e4:	4b6c      	ldr	r3, [pc, #432]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 80043f0:	4b69      	ldr	r3, [pc, #420]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	0e1b      	lsrs	r3, r3, #24
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	e006      	b.n	800440a <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
 80043fc:	4b66      	ldr	r3, [pc, #408]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80043fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	0e1b      	lsrs	r3, r3, #24
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 800440c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004410:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM34 */
        else
        {
          frequency = 0U;
        }
        break;
 8004412:	e282      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004414:	4b60      	ldr	r3, [pc, #384]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800441a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800441e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004422:	d107      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 8004424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800442a:	d103      	bne.n	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
          frequency = LSI_VALUE;
 800442c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
 8004432:	e01f      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004434:	4b58      	ldr	r3, [pc, #352]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004440:	d106      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004448:	d102      	bne.n	8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
          frequency = HSI_VALUE;
 800444a:	4b54      	ldr	r3, [pc, #336]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
 800444e:	e011      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004450:	4b51      	ldr	r3, [pc, #324]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b02      	cmp	r3, #2
 800445c:	d107      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004464:	d103      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0xd2a>
          frequency = LSE_VALUE;
 8004466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
 800446c:	e002      	b.n	8004474 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
          frequency = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004472:	e252      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004474:	e251      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004476:	4b48      	ldr	r3, [pc, #288]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800447c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004480:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	2b00      	cmp	r3, #0
 8004486:	d117      	bne.n	80044b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd74>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004488:	4b43      	ldr	r3, [pc, #268]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>
 8004494:	4b40      	ldr	r3, [pc, #256]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	0e1b      	lsrs	r3, r3, #24
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	e006      	b.n	80044ae <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
 80044a0:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80044a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	0e1b      	lsrs	r3, r3, #24
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	4a3c      	ldr	r2, [pc, #240]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>)
 80044b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM1 */
        else
        {
          frequency = 0U;
        }
        break;
 80044b6:	e230      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80044b8:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80044ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c6:	d107      	bne.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ce:	d103      	bne.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
          frequency = LSI_VALUE;
 80044d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
 80044d6:	e01f      	b.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80044d8:	4b2f      	ldr	r3, [pc, #188]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e4:	d106      	bne.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ec:	d102      	bne.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
          frequency = HSI_VALUE;
 80044ee:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
 80044f2:	e011      	b.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80044f4:	4b28      	ldr	r3, [pc, #160]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 80044f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d107      	bne.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004508:	d103      	bne.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
          frequency = LSE_VALUE;
 800450a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
 8004510:	e002      	b.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
          frequency = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004516:	e200      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004518:	e1ff      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800451a:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 800451c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004520:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004524:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	2b00      	cmp	r3, #0
 800452a:	d103      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0xdf0>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800452c:	f7fd ffd2 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8004530:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPTIM2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004532:	e1f2      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004534:	4b18      	ldr	r3, [pc, #96]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004536:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800453a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800453e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004542:	d107      	bne.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800454a:	d103      	bne.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xe10>
          frequency = LSI_VALUE;
 800454c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
 8004552:	e01f      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004554:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004560:	d106      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004568:	d102      	bne.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HSI_VALUE;
 800456a:	4b0c      	ldr	r3, [pc, #48]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xe58>)
 800456c:	637b      	str	r3, [r7, #52]	; 0x34
 800456e:	e011      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xe54>)
 8004572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b02      	cmp	r3, #2
 800457c:	d107      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
 800457e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004580:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004584:	d103      	bne.n	800458e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
          frequency = LSE_VALUE;
 8004586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458a:	637b      	str	r3, [r7, #52]	; 0x34
 800458c:	e002      	b.n	8004594 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
          frequency = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004592:	e1c2      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004594:	e1c1      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004596:	bf00      	nop
 8004598:	46020c00 	.word	0x46020c00
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	08005528 	.word	0x08005528

      case RCC_PERIPHCLK_FDCAN1:
        /* Get the current FDCAN1 kernel source */
        srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80045a4:	4bb0      	ldr	r3, [pc, #704]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80045a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045aa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80045ae:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80045b0:	4bad      	ldr	r3, [pc, #692]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045bc:	d105      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
 80045be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d102      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0xe86>
        {
          frequency = HSE_VALUE;
 80045c4:	4ba9      	ldr	r3, [pc, #676]	; (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80045c6:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN1 */
        else
        {
          frequency = 0U;
        }
        break;
 80045c8:	e1a7      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045d0:	d107      	bne.n	80045e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80045d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fe fc82 	bl	8002ee0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045e0:	e19b      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
        else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045e8:	d107      	bne.n	80045fa <HAL_RCCEx_GetPeriphCLKFreq+0xeb6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045ea:	f107 0318 	add.w	r3, r7, #24
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7fe fddc 	bl	80031ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045f8:	e18f      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
          frequency = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045fe:	e18c      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004600:	4b99      	ldr	r3, [pc, #612]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004606:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800460a:	633b      	str	r3, [r7, #48]	; 0x30
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004612:	d028      	beq.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
 8004614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004616:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800461a:	d83c      	bhi.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004622:	d013      	beq.n	800464c <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800462a:	d834      	bhi.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	2b00      	cmp	r3, #0
 8004630:	d004      	beq.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004638:	d004      	beq.n	8004644 <HAL_RCCEx_GetPeriphCLKFreq+0xf00>
 800463a:	e02c      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PCLK2:

            frequency = HAL_RCC_GetPCLK2Freq();
 800463c:	f7fd ff5e 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 8004640:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8004642:	e02b      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8004644:	f7fd fe24 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8004648:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800464a:	e027      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800464c:	4b86      	ldr	r3, [pc, #536]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004658:	d102      	bne.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
            {
              frequency = HSI_VALUE;
 800465a:	4b84      	ldr	r3, [pc, #528]	; (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 800465e:	e01d      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>
              frequency = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004664:	e01a      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          case RCC_SPI1CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004666:	4b80      	ldr	r3, [pc, #512]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d005      	beq.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8004672:	4b7d      	ldr	r3, [pc, #500]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	0e1b      	lsrs	r3, r3, #24
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	e006      	b.n	800468c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800467e:	4b7a      	ldr	r3, [pc, #488]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	0e1b      	lsrs	r3, r3, #24
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	4a78      	ldr	r2, [pc, #480]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 800468e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004694:	e002      	b.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xf58>

          default:

            frequency = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800469a:	bf00      	nop

        }
        break;
 800469c:	e13d      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800469e:	4b72      	ldr	r3, [pc, #456]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80046a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046a8:	633b      	str	r3, [r7, #48]	; 0x30
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046b0:	d028      	beq.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xfc0>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046b8:	d83c      	bhi.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046c0:	d013      	beq.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xfa6>
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046c8:	d834      	bhi.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0xf96>
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d6:	d004      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf9e>
 80046d8:	e02c      	b.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PCLK1:

            frequency = HAL_RCC_GetPCLK1Freq();
 80046da:	f7fd fefb 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 80046de:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80046e0:	e02b      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 80046e2:	f7fd fdd5 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80046e6:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80046e8:	e027      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046ea:	4b5f      	ldr	r3, [pc, #380]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f6:	d102      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0xfba>
            {
              frequency = HSI_VALUE;
 80046f8:	4b5c      	ldr	r3, [pc, #368]	; (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 80046fc:	e01d      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>
              frequency = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004702:	e01a      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          case RCC_SPI2CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004704:	4b58      	ldr	r3, [pc, #352]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8004710:	4b55      	ldr	r3, [pc, #340]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	0e1b      	lsrs	r3, r3, #24
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	e006      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0xfe6>
 800471c:	4b52      	ldr	r3, [pc, #328]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800471e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	0e1b      	lsrs	r3, r3, #24
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	4a51      	ldr	r2, [pc, #324]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 800472c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004732:	e002      	b.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0xff6>

          default:

            frequency = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004738:	bf00      	nop

        }
        break;
 800473a:	e0ee      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800473c:	4b4a      	ldr	r3, [pc, #296]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800473e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004742:	f003 0318 	and.w	r3, r3, #24
 8004746:	633b      	str	r3, [r7, #48]	; 0x30
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	2b18      	cmp	r3, #24
 800474c:	d861      	bhi.n	8004812 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	080047b9 	.word	0x080047b9
 8004758:	08004813 	.word	0x08004813
 800475c:	08004813 	.word	0x08004813
 8004760:	08004813 	.word	0x08004813
 8004764:	08004813 	.word	0x08004813
 8004768:	08004813 	.word	0x08004813
 800476c:	08004813 	.word	0x08004813
 8004770:	08004813 	.word	0x08004813
 8004774:	080047c1 	.word	0x080047c1
 8004778:	08004813 	.word	0x08004813
 800477c:	08004813 	.word	0x08004813
 8004780:	08004813 	.word	0x08004813
 8004784:	08004813 	.word	0x08004813
 8004788:	08004813 	.word	0x08004813
 800478c:	08004813 	.word	0x08004813
 8004790:	08004813 	.word	0x08004813
 8004794:	080047c9 	.word	0x080047c9
 8004798:	08004813 	.word	0x08004813
 800479c:	08004813 	.word	0x08004813
 80047a0:	08004813 	.word	0x08004813
 80047a4:	08004813 	.word	0x08004813
 80047a8:	08004813 	.word	0x08004813
 80047ac:	08004813 	.word	0x08004813
 80047b0:	08004813 	.word	0x08004813
 80047b4:	080047e3 	.word	0x080047e3
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PCLK3:

            frequency = HAL_RCC_GetPCLK3Freq();
 80047b8:	f7fd feb4 	bl	8002524 <HAL_RCC_GetPCLK3Freq>
 80047bc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80047be:	e02b      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 80047c0:	f7fd fd66 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 80047c4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80047c6:	e027      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_HSI:

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047c8:	4b27      	ldr	r3, [pc, #156]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d4:	d102      	bne.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
            {
              frequency = HSI_VALUE;
 80047d6:	4b25      	ldr	r3, [pc, #148]	; (800486c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0U;
            }
            break;
 80047da:	e01d      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>
              frequency = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80047e0:	e01a      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          case RCC_SPI3CLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047e2:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x10b6>
 80047ee:	4b1e      	ldr	r3, [pc, #120]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	0e1b      	lsrs	r3, r3, #24
 80047f4:	f003 030f 	and.w	r3, r3, #15
 80047f8:	e006      	b.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 80047fa:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 80047fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004800:	041b      	lsls	r3, r3, #16
 8004802:	0e1b      	lsrs	r3, r3, #24
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	4a19      	ldr	r2, [pc, #100]	; (8004870 <HAL_RCCEx_GetPeriphCLKFreq+0x112c>)
 800480a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004810:	e002      	b.n	8004818 <HAL_RCCEx_GetPeriphCLKFreq+0x10d4>

          default:

            frequency = 0U;
 8004812:	2300      	movs	r3, #0
 8004814:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004816:	bf00      	nop
        }
        break;
 8004818:	e07f      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800481a:	4b13      	ldr	r3, [pc, #76]	; (8004868 <HAL_RCCEx_GetPeriphCLKFreq+0x1124>)
 800481c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004820:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800482c:	d013      	beq.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004834:	d842      	bhi.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800483c:	d01a      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004844:	d83a      	bhi.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0x1140>
 800484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004852:	d01b      	beq.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x1148>
 8004854:	e032      	b.n	80048bc <HAL_RCCEx_GetPeriphCLKFreq+0x1178>

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_PLL2:

            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004856:	f107 0318 	add.w	r3, r7, #24
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe fca6 	bl	80031ac <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_Q_Frequency;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004864:	e02d      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8004866:	bf00      	nop
 8004868:	46020c00 	.word	0x46020c00
 800486c:	00f42400 	.word	0x00f42400
 8004870:	08005528 	.word	0x08005528

          case RCC_OSPICLKSOURCE_PLL1:

            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004878:	4618      	mov	r0, r3
 800487a:	f7fe fb31 	bl	8002ee0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004882:	e01e      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_SYSCLK:

            frequency = HAL_RCC_GetSysClockFreq();
 8004884:	f7fd fd04 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 8004888:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800488a:	e01a      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          case RCC_OSPICLKSOURCE_MSIK:

            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800488c:	4b25      	ldr	r3, [pc, #148]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1160>
 8004898:	4b22      	ldr	r3, [pc, #136]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	0e1b      	lsrs	r3, r3, #24
 800489e:	f003 030f 	and.w	r3, r3, #15
 80048a2:	e006      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x116e>
 80048a4:	4b1f      	ldr	r3, [pc, #124]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80048a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	0e1b      	lsrs	r3, r3, #24
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	4a1d      	ldr	r2, [pc, #116]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>)
 80048b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80048ba:	e002      	b.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>

          default:

            frequency = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80048c0:	bf00      	nop
        }
        break;
 80048c2:	e02a      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      case RCC_PERIPHCLK_DAC1:
        /* Get the current DAC1 kernel source */
        srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80048c4:	4b17      	ldr	r3, [pc, #92]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80048c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ce:	633b      	str	r3, [r7, #48]	; 0x30
        /* Check if LSE is ready and if DAC1 clock selection is LSE */
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80048d0:	4b14      	ldr	r3, [pc, #80]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80048d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b02      	cmp	r3, #2
 80048dc:	d106      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d103      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
        {
          frequency = LSE_VALUE;
 80048e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
 80048ea:	e012      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Check if LSI is ready and if DAC1 clock selection is LSI */
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80048ec:	4b0d      	ldr	r3, [pc, #52]	; (8004924 <HAL_RCCEx_GetPeriphCLKFreq+0x11e0>)
 80048ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048fa:	d107      	bne.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004902:	d103      	bne.n	800490c <HAL_RCCEx_GetPeriphCLKFreq+0x11c8>
        {
          frequency = LSI_VALUE;
 8004904:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004908:	637b      	str	r3, [r7, #52]	; 0x34
 800490a:	e002      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x11ce>
        }
        /* Clock not enabled for DAC1*/
        else
        {
          frequency = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8004910:	e003      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>
 8004912:	e002      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x11d6>

      default:
         frequency = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004918:	bf00      	nop
    }
  }
  return (frequency);
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800491c:	4618      	mov	r0, r3
 800491e:	3738      	adds	r7, #56	; 0x38
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	46020c00 	.word	0x46020c00
 8004928:	08005528 	.word	0x08005528

0800492c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004934:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a46      	ldr	r2, [pc, #280]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 800493a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800493e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004940:	f7fc f904 	bl	8000b4c <HAL_GetTick>
 8004944:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004946:	e008      	b.n	800495a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004948:	f7fc f900 	bl	8000b4c <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e077      	b.n	8004a4a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800495a:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004966:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6811      	ldr	r1, [r2, #0]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6852      	ldr	r2, [r2, #4]
 800497a:	3a01      	subs	r2, #1
 800497c:	0212      	lsls	r2, r2, #8
 800497e:	430a      	orrs	r2, r1
 8004980:	4934      	ldr	r1, [pc, #208]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004982:	4313      	orrs	r3, r2
 8004984:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004986:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004988:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800498a:	4b33      	ldr	r3, [pc, #204]	; (8004a58 <RCCEx_PLL2_Config+0x12c>)
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6892      	ldr	r2, [r2, #8]
 8004992:	3a01      	subs	r2, #1
 8004994:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68d2      	ldr	r2, [r2, #12]
 800499c:	3a01      	subs	r2, #1
 800499e:	0252      	lsls	r2, r2, #9
 80049a0:	b292      	uxth	r2, r2
 80049a2:	4311      	orrs	r1, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6912      	ldr	r2, [r2, #16]
 80049a8:	3a01      	subs	r2, #1
 80049aa:	0412      	lsls	r2, r2, #16
 80049ac:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80049b0:	4311      	orrs	r1, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6952      	ldr	r2, [r2, #20]
 80049b6:	3a01      	subs	r2, #1
 80049b8:	0612      	lsls	r2, r2, #24
 80049ba:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80049be:	430a      	orrs	r2, r1
 80049c0:	4924      	ldr	r1, [pc, #144]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80049c6:	4b23      	ldr	r3, [pc, #140]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	f023 020c 	bic.w	r2, r3, #12
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	4920      	ldr	r1, [pc, #128]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80049d8:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 80049da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	491c      	ldr	r1, [pc, #112]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80049e6:	4b1b      	ldr	r3, [pc, #108]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 80049e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ea:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 80049ec:	f023 0310 	bic.w	r3, r3, #16
 80049f0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80049f2:	4b18      	ldr	r3, [pc, #96]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	69d2      	ldr	r2, [r2, #28]
 8004a02:	00d2      	lsls	r2, r2, #3
 8004a04:	4913      	ldr	r1, [pc, #76]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	4a11      	ldr	r2, [pc, #68]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004a10:	f043 0310 	orr.w	r3, r3, #16
 8004a14:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8004a16:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a0e      	ldr	r2, [pc, #56]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004a1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a20:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a22:	f7fc f893 	bl	8000b4c <HAL_GetTick>
 8004a26:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a28:	e008      	b.n	8004a3c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a2a:	f7fc f88f 	bl	8000b4c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a3c:	4b05      	ldr	r3, [pc, #20]	; (8004a54 <RCCEx_PLL2_Config+0x128>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0

}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	46020c00 	.word	0x46020c00
 8004a58:	80800000 	.word	0x80800000

08004a5c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters N & P & optionally M as well as PLL3 output clock(s)
  * @note   PLL3 is temporary disable to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8004a64:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a46      	ldr	r2, [pc, #280]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a6e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a70:	f7fc f86c 	bl	8000b4c <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a76:	e008      	b.n	8004a8a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004a78:	f7fc f868 	bl	8000b4c <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e077      	b.n	8004b7a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6811      	ldr	r1, [r2, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6852      	ldr	r2, [r2, #4]
 8004aaa:	3a01      	subs	r2, #1
 8004aac:	0212      	lsls	r2, r2, #8
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	4934      	ldr	r1, [pc, #208]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	630b      	str	r3, [r1, #48]	; 0x30
 8004ab6:	4b33      	ldr	r3, [pc, #204]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aba:	4b33      	ldr	r3, [pc, #204]	; (8004b88 <RCCEx_PLL3_Config+0x12c>)
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6892      	ldr	r2, [r2, #8]
 8004ac2:	3a01      	subs	r2, #1
 8004ac4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	68d2      	ldr	r2, [r2, #12]
 8004acc:	3a01      	subs	r2, #1
 8004ace:	0252      	lsls	r2, r2, #9
 8004ad0:	b292      	uxth	r2, r2
 8004ad2:	4311      	orrs	r1, r2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6912      	ldr	r2, [r2, #16]
 8004ad8:	3a01      	subs	r2, #1
 8004ada:	0412      	lsls	r2, r2, #16
 8004adc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004ae0:	4311      	orrs	r1, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6952      	ldr	r2, [r2, #20]
 8004ae6:	3a01      	subs	r2, #1
 8004ae8:	0612      	lsls	r2, r2, #24
 8004aea:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004aee:	430a      	orrs	r2, r1
 8004af0:	4924      	ldr	r1, [pc, #144]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8004af6:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	f023 020c 	bic.w	r2, r3, #12
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	4920      	ldr	r1, [pc, #128]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8004b08:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	491c      	ldr	r1, [pc, #112]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8004b16:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b1c:	f023 0310 	bic.w	r3, r3, #16
 8004b20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b2a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	69d2      	ldr	r2, [r2, #28]
 8004b32:	00d2      	lsls	r2, r2, #3
 8004b34:	4913      	ldr	r1, [pc, #76]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	4a11      	ldr	r2, [pc, #68]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b40:	f043 0310 	orr.w	r3, r3, #16
 8004b44:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a0e      	ldr	r2, [pc, #56]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b50:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b52:	f7fb fffb 	bl	8000b4c <HAL_GetTick>
 8004b56:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b58:	e008      	b.n	8004b6c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b5a:	f7fb fff7 	bl	8000b4c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e006      	b.n	8004b7a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <RCCEx_PLL3_Config+0x128>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	46020c00 	.word	0x46020c00
 8004b88:	80800000 	.word	0x80800000

08004b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e042      	b.n	8004c24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7fb fec5 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2224      	movs	r2, #36	; 0x24
 8004bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0201 	bic.w	r2, r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f82c 	bl	8004c2c <UART_SetConfig>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e022      	b.n	8004c24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f9a2 	bl	8004f30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fa29 	bl	8005074 <UART_CheckIdleState>
 8004c22:	4603      	mov	r3, r0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c2c:	b5b0      	push	{r4, r5, r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	77fb      	strb	r3, [r7, #31]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a94      	ldr	r2, [pc, #592]	; (8004e90 <UART_SetConfig+0x264>)
 8004c3e:	4293      	cmp	r3, r2
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	; (8004e94 <UART_SetConfig+0x268>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a80      	ldr	r2, [pc, #512]	; (8004e90 <UART_SetConfig+0x264>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d009      	beq.n	8004ca6 <UART_SetConfig+0x7a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a80      	ldr	r2, [pc, #512]	; (8004e98 <UART_SetConfig+0x26c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d004      	beq.n	8004ca6 <UART_SetConfig+0x7a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cb0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	6812      	ldr	r2, [r2, #0]
 8004cb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	f023 010f 	bic.w	r1, r3, #15
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	430a      	orrs	r2, r1
 8004cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a70      	ldr	r2, [pc, #448]	; (8004e9c <UART_SetConfig+0x270>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d102      	bne.n	8004ce4 <UART_SetConfig+0xb8>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	623b      	str	r3, [r7, #32]
 8004ce2:	e029      	b.n	8004d38 <UART_SetConfig+0x10c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a6d      	ldr	r2, [pc, #436]	; (8004ea0 <UART_SetConfig+0x274>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d102      	bne.n	8004cf4 <UART_SetConfig+0xc8>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	623b      	str	r3, [r7, #32]
 8004cf2:	e021      	b.n	8004d38 <UART_SetConfig+0x10c>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a6a      	ldr	r2, [pc, #424]	; (8004ea4 <UART_SetConfig+0x278>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d102      	bne.n	8004d04 <UART_SetConfig+0xd8>
 8004cfe:	2304      	movs	r3, #4
 8004d00:	623b      	str	r3, [r7, #32]
 8004d02:	e019      	b.n	8004d38 <UART_SetConfig+0x10c>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a67      	ldr	r2, [pc, #412]	; (8004ea8 <UART_SetConfig+0x27c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d102      	bne.n	8004d14 <UART_SetConfig+0xe8>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	623b      	str	r3, [r7, #32]
 8004d12:	e011      	b.n	8004d38 <UART_SetConfig+0x10c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a64      	ldr	r2, [pc, #400]	; (8004eac <UART_SetConfig+0x280>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d102      	bne.n	8004d24 <UART_SetConfig+0xf8>
 8004d1e:	2310      	movs	r3, #16
 8004d20:	623b      	str	r3, [r7, #32]
 8004d22:	e009      	b.n	8004d38 <UART_SetConfig+0x10c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a59      	ldr	r2, [pc, #356]	; (8004e90 <UART_SetConfig+0x264>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d102      	bne.n	8004d34 <UART_SetConfig+0x108>
 8004d2e:	2320      	movs	r3, #32
 8004d30:	623b      	str	r3, [r7, #32]
 8004d32:	e001      	b.n	8004d38 <UART_SetConfig+0x10c>
 8004d34:	2300      	movs	r3, #0
 8004d36:	623b      	str	r3, [r7, #32]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a54      	ldr	r2, [pc, #336]	; (8004e90 <UART_SetConfig+0x264>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <UART_SetConfig+0x120>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a54      	ldr	r2, [pc, #336]	; (8004e98 <UART_SetConfig+0x26c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d163      	bne.n	8004e14 <UART_SetConfig+0x1e8>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004d4c:	6a38      	ldr	r0, [r7, #32]
 8004d4e:	f7fe fcf9 	bl	8003744 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d52:	61b8      	str	r0, [r7, #24]

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80d4 	beq.w	8004f04 <UART_SetConfig+0x2d8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d60:	4a53      	ldr	r2, [pc, #332]	; (8004eb0 <UART_SetConfig+0x284>)
 8004d62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d66:	461a      	mov	r2, r3
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685a      	ldr	r2, [r3, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d305      	bcc.n	8004d8c <UART_SetConfig+0x160>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d902      	bls.n	8004d92 <UART_SetConfig+0x166>
      {
        ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e03f      	b.n	8004e12 <UART_SetConfig+0x1e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	4a44      	ldr	r2, [pc, #272]	; (8004eb0 <UART_SetConfig+0x284>)
 8004da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	f7fb fa63 	bl	8000274 <__aeabi_uldivmod>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	f04f 0200 	mov.w	r2, #0
 8004dba:	f04f 0300 	mov.w	r3, #0
 8004dbe:	020b      	lsls	r3, r1, #8
 8004dc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dc4:	0202      	lsls	r2, r0, #8
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	6849      	ldr	r1, [r1, #4]
 8004dca:	0849      	lsrs	r1, r1, #1
 8004dcc:	4608      	mov	r0, r1
 8004dce:	f04f 0100 	mov.w	r1, #0
 8004dd2:	1814      	adds	r4, r2, r0
 8004dd4:	eb43 0501 	adc.w	r5, r3, r1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	4620      	mov	r0, r4
 8004de4:	4629      	mov	r1, r5
 8004de6:	f7fb fa45 	bl	8000274 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4613      	mov	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004df8:	d308      	bcc.n	8004e0c <UART_SetConfig+0x1e0>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e00:	d204      	bcs.n	8004e0c <UART_SetConfig+0x1e0>
        {
          huart->Instance->BRR = usartdiv;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	60da      	str	r2, [r3, #12]
 8004e0a:	e002      	b.n	8004e12 <UART_SetConfig+0x1e6>
        }
        else
        {
          ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	77fb      	strb	r3, [r7, #31]
    if (pclk != 0U)
 8004e10:	e078      	b.n	8004f04 <UART_SetConfig+0x2d8>
 8004e12:	e077      	b.n	8004f04 <UART_SetConfig+0x2d8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e1c:	d14a      	bne.n	8004eb4 <UART_SetConfig+0x288>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004e1e:	6a38      	ldr	r0, [r7, #32]
 8004e20:	f7fe fc90 	bl	8003744 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e24:	61b8      	str	r0, [r7, #24]

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d06b      	beq.n	8004f04 <UART_SetConfig+0x2d8>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <UART_SetConfig+0x284>)
 8004e32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e36:	461a      	mov	r2, r3
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e3e:	005a      	lsls	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	441a      	add	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b0f      	cmp	r3, #15
 8004e58:	d916      	bls.n	8004e88 <UART_SetConfig+0x25c>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d212      	bcs.n	8004e88 <UART_SetConfig+0x25c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f023 030f 	bic.w	r3, r3, #15
 8004e6a:	827b      	strh	r3, [r7, #18]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	8a7b      	ldrh	r3, [r7, #18]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	827b      	strh	r3, [r7, #18]
        huart->Instance->BRR = brrtemp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	8a7a      	ldrh	r2, [r7, #18]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	e03d      	b.n	8004f04 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e03a      	b.n	8004f04 <UART_SetConfig+0x2d8>
 8004e8e:	bf00      	nop
 8004e90:	46002400 	.word	0x46002400
 8004e94:	cfff69f3 	.word	0xcfff69f3
 8004e98:	56002400 	.word	0x56002400
 8004e9c:	40013800 	.word	0x40013800
 8004ea0:	40004400 	.word	0x40004400
 8004ea4:	40004800 	.word	0x40004800
 8004ea8:	40004c00 	.word	0x40004c00
 8004eac:	40005000 	.word	0x40005000
 8004eb0:	080055e8 	.word	0x080055e8
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8004eb4:	6a38      	ldr	r0, [r7, #32]
 8004eb6:	f7fe fc45 	bl	8003744 <HAL_RCCEx_GetPeriphCLKFreq>
 8004eba:	61b8      	str	r0, [r7, #24]

    if (pclk != 0U)
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d020      	beq.n	8004f04 <UART_SetConfig+0x2d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	4a19      	ldr	r2, [pc, #100]	; (8004f2c <UART_SetConfig+0x300>)
 8004ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	085b      	lsrs	r3, r3, #1
 8004eda:	441a      	add	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	617b      	str	r3, [r7, #20]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b0f      	cmp	r3, #15
 8004eec:	d908      	bls.n	8004f00 <UART_SetConfig+0x2d4>
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef4:	d204      	bcs.n	8004f00 <UART_SetConfig+0x2d4>
      {
        huart->Instance->BRR = usartdiv;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	60da      	str	r2, [r3, #12]
 8004efe:	e001      	b.n	8004f04 <UART_SetConfig+0x2d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	77fb      	strb	r3, [r7, #31]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3728      	adds	r7, #40	; 0x28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bdb0      	pop	{r4, r5, r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	080055e8 	.word	0x080055e8

08004f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00a      	beq.n	8004f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d00a      	beq.n	8004f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	f003 0308 	and.w	r3, r3, #8
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01a      	beq.n	8005046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800502e:	d10a      	bne.n	8005046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	605a      	str	r2, [r3, #4]
  }
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af02      	add	r7, sp, #8
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005084:	f7fb fd62 	bl	8000b4c <HAL_GetTick>
 8005088:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b08      	cmp	r3, #8
 8005096:	d10e      	bne.n	80050b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f82f 	bl	800510a <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e025      	b.n	8005102 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d10e      	bne.n	80050e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f819 	bl	800510a <UART_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e00f      	b.n	8005102 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b09c      	sub	sp, #112	; 0x70
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	603b      	str	r3, [r7, #0]
 8005116:	4613      	mov	r3, r2
 8005118:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800511a:	e0a9      	b.n	8005270 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	f000 80a5 	beq.w	8005270 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005126:	f7fb fd11 	bl	8000b4c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005132:	429a      	cmp	r2, r3
 8005134:	d302      	bcc.n	800513c <UART_WaitOnFlagUntilTimeout+0x32>
 8005136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005138:	2b00      	cmp	r3, #0
 800513a:	d140      	bne.n	80051be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005144:	e853 3f00 	ldrex	r3, [r3]
 8005148:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800514a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005150:	667b      	str	r3, [r7, #100]	; 0x64
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800515a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800515c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005160:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005162:	e841 2300 	strex	r3, r2, [r1]
 8005166:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1e6      	bne.n	800513c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3308      	adds	r3, #8
 8005174:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	663b      	str	r3, [r7, #96]	; 0x60
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800518e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005190:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800519c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e5      	bne.n	800516e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2220      	movs	r2, #32
 80051ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e069      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d051      	beq.n	8005270 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051da:	d149      	bne.n	8005270 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
 8005206:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800520a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e6      	bne.n	80051e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	e853 3f00 	ldrex	r3, [r3]
 8005226:	613b      	str	r3, [r7, #16]
   return(result);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	f023 0301 	bic.w	r3, r3, #1
 800522e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	3308      	adds	r3, #8
 8005236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005238:	623a      	str	r2, [r7, #32]
 800523a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	69f9      	ldr	r1, [r7, #28]
 800523e:	6a3a      	ldr	r2, [r7, #32]
 8005240:	e841 2300 	strex	r3, r2, [r1]
 8005244:	61bb      	str	r3, [r7, #24]
   return(result);
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e5      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e010      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69da      	ldr	r2, [r3, #28]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4013      	ands	r3, r2
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	429a      	cmp	r2, r3
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	429a      	cmp	r2, r3
 800528c:	f43f af46 	beq.w	800511c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3770      	adds	r7, #112	; 0x70
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e027      	b.n	8005300 <HAL_UARTEx_DisableFifoMode+0x66>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2224      	movs	r2, #36	; 0x24
 80052bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0201 	bic.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005320:	2302      	movs	r3, #2
 8005322:	e02d      	b.n	8005380 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2224      	movs	r2, #36	; 0x24
 8005330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f022 0201 	bic.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	430a      	orrs	r2, r1
 800535e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f84f 	bl	8005404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800539c:	2302      	movs	r3, #2
 800539e:	e02d      	b.n	80053fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2224      	movs	r2, #36	; 0x24
 80053ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f811 	bl	8005404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005410:	2b00      	cmp	r3, #0
 8005412:	d108      	bne.n	8005426 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005424:	e031      	b.n	800548a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005426:	2308      	movs	r3, #8
 8005428:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800542a:	2308      	movs	r3, #8
 800542c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	0e5b      	lsrs	r3, r3, #25
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	0f5b      	lsrs	r3, r3, #29
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	7b3a      	ldrb	r2, [r7, #12]
 8005452:	4911      	ldr	r1, [pc, #68]	; (8005498 <UARTEx_SetNbDataToProcess+0x94>)
 8005454:	5c8a      	ldrb	r2, [r1, r2]
 8005456:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800545a:	7b3a      	ldrb	r2, [r7, #12]
 800545c:	490f      	ldr	r1, [pc, #60]	; (800549c <UARTEx_SetNbDataToProcess+0x98>)
 800545e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005460:	fb93 f3f2 	sdiv	r3, r3, r2
 8005464:	b29a      	uxth	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800546c:	7bfb      	ldrb	r3, [r7, #15]
 800546e:	7b7a      	ldrb	r2, [r7, #13]
 8005470:	4909      	ldr	r1, [pc, #36]	; (8005498 <UARTEx_SetNbDataToProcess+0x94>)
 8005472:	5c8a      	ldrb	r2, [r1, r2]
 8005474:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005478:	7b7a      	ldrb	r2, [r7, #13]
 800547a:	4908      	ldr	r1, [pc, #32]	; (800549c <UARTEx_SetNbDataToProcess+0x98>)
 800547c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800547e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005482:	b29a      	uxth	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800548a:	bf00      	nop
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	08005600 	.word	0x08005600
 800549c:	08005608 	.word	0x08005608

080054a0 <__libc_init_array>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	4d0d      	ldr	r5, [pc, #52]	; (80054d8 <__libc_init_array+0x38>)
 80054a4:	2600      	movs	r6, #0
 80054a6:	4c0d      	ldr	r4, [pc, #52]	; (80054dc <__libc_init_array+0x3c>)
 80054a8:	1b64      	subs	r4, r4, r5
 80054aa:	10a4      	asrs	r4, r4, #2
 80054ac:	42a6      	cmp	r6, r4
 80054ae:	d109      	bne.n	80054c4 <__libc_init_array+0x24>
 80054b0:	4d0b      	ldr	r5, [pc, #44]	; (80054e0 <__libc_init_array+0x40>)
 80054b2:	2600      	movs	r6, #0
 80054b4:	4c0b      	ldr	r4, [pc, #44]	; (80054e4 <__libc_init_array+0x44>)
 80054b6:	f000 f81f 	bl	80054f8 <_init>
 80054ba:	1b64      	subs	r4, r4, r5
 80054bc:	10a4      	asrs	r4, r4, #2
 80054be:	42a6      	cmp	r6, r4
 80054c0:	d105      	bne.n	80054ce <__libc_init_array+0x2e>
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c8:	3601      	adds	r6, #1
 80054ca:	4798      	blx	r3
 80054cc:	e7ee      	b.n	80054ac <__libc_init_array+0xc>
 80054ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d2:	3601      	adds	r6, #1
 80054d4:	4798      	blx	r3
 80054d6:	e7f2      	b.n	80054be <__libc_init_array+0x1e>
 80054d8:	08005618 	.word	0x08005618
 80054dc:	08005618 	.word	0x08005618
 80054e0:	08005618 	.word	0x08005618
 80054e4:	0800561c 	.word	0x0800561c

080054e8 <memset>:
 80054e8:	4402      	add	r2, r0
 80054ea:	4603      	mov	r3, r0
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d100      	bne.n	80054f2 <memset+0xa>
 80054f0:	4770      	bx	lr
 80054f2:	f803 1b01 	strb.w	r1, [r3], #1
 80054f6:	e7f9      	b.n	80054ec <memset+0x4>

080054f8 <_init>:
 80054f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fa:	bf00      	nop
 80054fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fe:	bc08      	pop	{r3}
 8005500:	469e      	mov	lr, r3
 8005502:	4770      	bx	lr

08005504 <_fini>:
 8005504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005506:	bf00      	nop
 8005508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800550a:	bc08      	pop	{r3}
 800550c:	469e      	mov	lr, r3
 800550e:	4770      	bx	lr
