
STM32WobbleBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f60  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002194  08002194  00012194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002264  08002264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002268  08002268  00012268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000009  20000000  0800226c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  2000000c  08002275  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  08002275  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d80a  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001b2e  00000000  00000000  0002d849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000678  00000000  00000000  0002f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000005d0  00000000  00000000  0002f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0002f3d5  00000000  00000000  0002ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00007397  00000000  00000000  0005f395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00128a3c  00000000  00000000  0006672c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  0018f168  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001844  00000000  00000000  0018f1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	0800217c 	.word	0x0800217c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	0800217c 	.word	0x0800217c

08000274 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027a:	f107 030c 	add.w	r3, r7, #12
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028a:	4b25      	ldr	r3, [pc, #148]	; (8000320 <MX_GPIO_Init+0xac>)
 800028c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000290:	4a23      	ldr	r2, [pc, #140]	; (8000320 <MX_GPIO_Init+0xac>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800029a:	4b21      	ldr	r3, [pc, #132]	; (8000320 <MX_GPIO_Init+0xac>)
 800029c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002a0:	f003 0304 	and.w	r3, r3, #4
 80002a4:	60bb      	str	r3, [r7, #8]
 80002a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002a8:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <MX_GPIO_Init+0xac>)
 80002aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002ae:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <MX_GPIO_Init+0xac>)
 80002b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <MX_GPIO_Init+0xac>)
 80002ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	2180      	movs	r1, #128	; 0x80
 80002ca:	4816      	ldr	r0, [pc, #88]	; (8000324 <MX_GPIO_Init+0xb0>)
 80002cc:	f000 fce4 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButtonInterrupt_Pin;
 80002d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d6:	4b14      	ldr	r3, [pc, #80]	; (8000328 <MX_GPIO_Init+0xb4>)
 80002d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UserCalibrationButtonInterrupt_GPIO_Port, &GPIO_InitStruct);
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4619      	mov	r1, r3
 80002e4:	4811      	ldr	r0, [pc, #68]	; (800032c <MX_GPIO_Init+0xb8>)
 80002e6:	f000 faff 	bl	80008e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationLED_Pin;
 80002ea:	2380      	movs	r3, #128	; 0x80
 80002ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	2301      	movs	r3, #1
 80002f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(UserCalibrationLED_GPIO_Port, &GPIO_InitStruct);
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	4619      	mov	r1, r3
 8000300:	4808      	ldr	r0, [pc, #32]	; (8000324 <MX_GPIO_Init+0xb0>)
 8000302:	f000 faf1 	bl	80008e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 1, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	2101      	movs	r1, #1
 800030a:	2018      	movs	r0, #24
 800030c:	f000 fab7 	bl	800087e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000310:	2018      	movs	r0, #24
 8000312:	f000 face 	bl	80008b2 <HAL_NVIC_EnableIRQ>

}
 8000316:	bf00      	nop
 8000318:	3720      	adds	r7, #32
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	46020c00 	.word	0x46020c00
 8000324:	42021c00 	.word	0x42021c00
 8000328:	10110000 	.word	0x10110000
 800032c:	42020800 	.word	0x42020800

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000334:	f000 f944 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000338:	f000 f804 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033c:	f7ff ff9a 	bl	8000274 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000340:	e7fe      	b.n	8000340 <main+0x10>
	...

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b09e      	sub	sp, #120	; 0x78
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	2260      	movs	r2, #96	; 0x60
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f001 ff0a 	bl	800216c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	463b      	mov	r3, r7
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]
 8000366:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000368:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800036c:	f000 fcde 	bl	8000d2c <HAL_PWREx_ControlVoltageScaling>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000376:	f000 f86f 	bl	8000458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800037a:	2310      	movs	r3, #16
 800037c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800037e:	2301      	movs	r3, #1
 8000380:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000382:	2310      	movs	r3, #16
 8000384:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000386:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	2302      	movs	r3, #2
 800038e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000390:	2301      	movs	r3, #1
 8000392:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000398:	2301      	movs	r3, #1
 800039a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800039c:	2350      	movs	r3, #80	; 0x50
 800039e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80003a0:	2302      	movs	r3, #2
 80003a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003a4:	2302      	movs	r3, #2
 80003a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003a8:	2302      	movs	r3, #2
 80003aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80003ac:	2300      	movs	r3, #0
 80003ae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fd39 	bl	8000e30 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003c4:	f000 f848 	bl	8000458 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	231f      	movs	r3, #31
 80003ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2303      	movs	r3, #3
 80003ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003e0:	463b      	mov	r3, r7
 80003e2:	2104      	movs	r1, #4
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 fb93 	bl	8001b10 <HAL_RCC_ClockConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003f0:	f000 f832 	bl	8000458 <Error_Handler>
  }
  __HAL_RCC_PWR_CLK_DISABLE();
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <SystemClock_Config+0xc8>)
 80003f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003fa:	4a04      	ldr	r2, [pc, #16]	; (800040c <SystemClock_Config+0xc8>)
 80003fc:	f023 0304 	bic.w	r3, r3, #4
 8000400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000404:	bf00      	nop
 8000406:	3778      	adds	r7, #120	; 0x78
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	46020c00 	.word	0x46020c00

08000410 <HAL_GPIO_EXTI_Rising_Callback>:
// When the button's signal goes from a low to a high state
// which is what happens when you push a button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButtonInterrupt_Pin)
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000420:	d112      	bne.n	8000448 <HAL_GPIO_EXTI_Rising_Callback+0x38>
	{
		// TODO:  Send data via virtual COM port to bring up or
		// close down the user calibration screen

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 8000422:	4b0b      	ldr	r3, [pc, #44]	; (8000450 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d103      	bne.n	8000432 <HAL_GPIO_EXTI_Rising_Callback+0x22>
		{
			iIsUserCalibrationLEDOn = 1;
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 800042c:	2201      	movs	r2, #1
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	e002      	b.n	8000438 <HAL_GPIO_EXTI_Rising_Callback+0x28>
		}
		else
		{
			iIsUserCalibrationLEDOn = 0;
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, iIsUserCalibrationLEDOn);
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	461a      	mov	r2, r3
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	4804      	ldr	r0, [pc, #16]	; (8000454 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 8000444:	f000 fc28 	bl	8000c98 <HAL_GPIO_WritePin>
	}
}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000028 	.word	0x20000028
 8000454:	42021c00 	.word	0x42021c00

08000458 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000460:	e7fe      	b.n	8000460 <Error_Handler+0x8>
	...

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800046a:	4b0a      	ldr	r3, [pc, #40]	; (8000494 <HAL_MspInit+0x30>)
 800046c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000470:	4a08      	ldr	r2, [pc, #32]	; (8000494 <HAL_MspInit+0x30>)
 8000472:	f043 0304 	orr.w	r3, r3, #4
 8000476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <HAL_MspInit+0x30>)
 800047c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	46020c00 	.word	0x46020c00

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800049c:	e7fe      	b.n	800049c <NMI_Handler+0x4>

0800049e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <HardFault_Handler+0x4>

080004a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <MemManage_Handler+0x4>

080004aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <BusFault_Handler+0x4>

080004b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <UsageFault_Handler+0x4>

080004b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ba:	bf00      	nop
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr

080004c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr

080004d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e4:	f000 f8d0 	bl	8000688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}

080004ec <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButtonInterrupt_Pin);
 80004f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80004f4:	f000 fbe8 	bl	8000cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}

080004fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <SystemInit+0x68>)
 8000502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <SystemInit+0x68>)
 8000508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800050c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <SystemInit+0x6c>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000516:	4b14      	ldr	r3, [pc, #80]	; (8000568 <SystemInit+0x6c>)
 8000518:	2200      	movs	r2, #0
 800051a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <SystemInit+0x6c>)
 800051e:	2200      	movs	r2, #0
 8000520:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <SystemInit+0x6c>)
 8000524:	2200      	movs	r2, #0
 8000526:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <SystemInit+0x6c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <SystemInit+0x6c>)
 800052e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000532:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000536:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <SystemInit+0x6c>)
 800053a:	2200      	movs	r2, #0
 800053c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <SystemInit+0x6c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a09      	ldr	r2, [pc, #36]	; (8000568 <SystemInit+0x6c>)
 8000544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000548:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <SystemInit+0x6c>)
 800054c:	2200      	movs	r2, #0
 800054e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <SystemInit+0x68>)
 8000552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000556:	609a      	str	r2, [r3, #8]
  #endif
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000ed00 	.word	0xe000ed00
 8000568:	46020c00 	.word	0x46020c00

0800056c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800056c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000570:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000572:	e003      	b.n	800057c <LoopCopyDataInit>

08000574 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000574:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000576:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000578:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057a:	3104      	adds	r1, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <LoopForever+0xa>)
	ldr	r3, =_edata
 800057e:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000580:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000582:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000584:	d3f6      	bcc.n	8000574 <CopyDataInit>
	ldr	r2, =_sbss
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000588:	e002      	b.n	8000590 <LoopFillZerobss>

0800058a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800058c:	f842 3b04 	str.w	r3, [r2], #4

08000590 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000590:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000592:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000594:	d3f9      	bcc.n	800058a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000596:	f7ff ffb1 	bl	80004fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800059a:	f001 fdc3 	bl	8002124 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059e:	f7ff fec7 	bl	8000330 <main>

080005a2 <LoopForever>:

LoopForever:
    b LoopForever
 80005a2:	e7fe      	b.n	80005a2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80005a4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80005a8:	0800226c 	.word	0x0800226c
	ldr	r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005b0:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 80005b4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80005b8:	20000030 	.word	0x20000030

080005bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005bc:	e7fe      	b.n	80005bc <ADC1_IRQHandler>
	...

080005c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <HAL_Init+0x4c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a10      	ldr	r2, [pc, #64]	; (800060c <HAL_Init+0x4c>)
 80005ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f949 	bl	8000868 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80005d6:	f001 fbfd 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 80005da:	4602      	mov	r2, r0
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_Init+0x50>)
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	f003 030f 	and.w	r3, r3, #15
 80005e4:	490b      	ldr	r1, [pc, #44]	; (8000614 <HAL_Init+0x54>)
 80005e6:	5ccb      	ldrb	r3, [r1, r3]
 80005e8:	fa22 f303 	lsr.w	r3, r2, r3
 80005ec:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <HAL_Init+0x58>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005f0:	200f      	movs	r0, #15
 80005f2:	f000 f813 	bl	800061c <HAL_InitTick>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80005fc:	2301      	movs	r3, #1
 80005fe:	e002      	b.n	8000606 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f7ff ff30 	bl	8000464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40022000 	.word	0x40022000
 8000610:	46020c00 	.word	0x46020c00
 8000614:	08002194 	.word	0x08002194
 8000618:	20000000 	.word	0x20000000

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <HAL_InitTick+0x60>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d101      	bne.n	8000630 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	e021      	b.n	8000674 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000630:	4b13      	ldr	r3, [pc, #76]	; (8000680 <HAL_InitTick+0x64>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b11      	ldr	r3, [pc, #68]	; (800067c <HAL_InitTick+0x60>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000642:	fbb2 f3f3 	udiv	r3, r2, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f941 	bl	80008ce <HAL_SYSTICK_Config>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e00e      	b.n	8000674 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d80a      	bhi.n	8000672 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800065c:	2200      	movs	r2, #0
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f000 f90b 	bl	800087e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <HAL_InitTick+0x68>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800066e:	2300      	movs	r3, #0
 8000670:	e000      	b.n	8000674 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000008 	.word	0x20000008
 8000680:	20000000 	.word	0x20000000
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_IncTick+0x20>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <HAL_IncTick+0x24>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4413      	add	r3, r2
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_IncTick+0x24>)
 800069a:	6013      	str	r3, [r2, #0]
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000008 	.word	0x20000008
 80006ac:	2000002c 	.word	0x2000002c

080006b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <HAL_GetTick+0x14>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	2000002c 	.word	0x2000002c

080006c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006fa:	4a04      	ldr	r2, [pc, #16]	; (800070c <__NVIC_SetPriorityGrouping+0x44>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	60d3      	str	r3, [r2, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <__NVIC_GetPriorityGrouping+0x18>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	f003 0307 	and.w	r3, r3, #7
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	2b00      	cmp	r3, #0
 800073c:	db0b      	blt.n	8000756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f003 021f 	and.w	r2, r3, #31
 8000744:	4907      	ldr	r1, [pc, #28]	; (8000764 <__NVIC_EnableIRQ+0x38>)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	095b      	lsrs	r3, r3, #5
 800074c:	2001      	movs	r0, #1
 800074e:	fa00 f202 	lsl.w	r2, r0, r2
 8000752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000e100 	.word	0xe000e100

08000768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	6039      	str	r1, [r7, #0]
 8000772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	db0a      	blt.n	8000792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	b2da      	uxtb	r2, r3
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <__NVIC_SetPriority+0x4c>)
 8000782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000786:	0112      	lsls	r2, r2, #4
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	440b      	add	r3, r1
 800078c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000790:	e00a      	b.n	80007a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4908      	ldr	r1, [pc, #32]	; (80007b8 <__NVIC_SetPriority+0x50>)
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	f003 030f 	and.w	r3, r3, #15
 800079e:	3b04      	subs	r3, #4
 80007a0:	0112      	lsls	r2, r2, #4
 80007a2:	b2d2      	uxtb	r2, r2
 80007a4:	440b      	add	r3, r1
 80007a6:	761a      	strb	r2, [r3, #24]
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	e000e100 	.word	0xe000e100
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f1c3 0307 	rsb	r3, r3, #7
 80007d6:	2b04      	cmp	r3, #4
 80007d8:	bf28      	it	cs
 80007da:	2304      	movcs	r3, #4
 80007dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3304      	adds	r3, #4
 80007e2:	2b06      	cmp	r3, #6
 80007e4:	d902      	bls.n	80007ec <NVIC_EncodePriority+0x30>
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3b03      	subs	r3, #3
 80007ea:	e000      	b.n	80007ee <NVIC_EncodePriority+0x32>
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43da      	mvns	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	401a      	ands	r2, r3
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43d9      	mvns	r1, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	4313      	orrs	r3, r2
         );
}
 8000816:	4618      	mov	r0, r3
 8000818:	3724      	adds	r7, #36	; 0x24
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b01      	subs	r3, #1
 8000830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000834:	d301      	bcc.n	800083a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000836:	2301      	movs	r3, #1
 8000838:	e00f      	b.n	800085a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800083a:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <SysTick_Config+0x40>)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000842:	210f      	movs	r1, #15
 8000844:	f04f 30ff 	mov.w	r0, #4294967295
 8000848:	f7ff ff8e 	bl	8000768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <SysTick_Config+0x40>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SysTick_Config+0x40>)
 8000854:	2207      	movs	r2, #7
 8000856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	e000e010 	.word	0xe000e010

08000868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f7ff ff29 	bl	80006c8 <__NVIC_SetPriorityGrouping>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b086      	sub	sp, #24
 8000882:	af00      	add	r7, sp, #0
 8000884:	4603      	mov	r3, r0
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800088c:	f7ff ff40 	bl	8000710 <__NVIC_GetPriorityGrouping>
 8000890:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	68b9      	ldr	r1, [r7, #8]
 8000896:	6978      	ldr	r0, [r7, #20]
 8000898:	f7ff ff90 	bl	80007bc <NVIC_EncodePriority>
 800089c:	4602      	mov	r2, r0
 800089e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff5f 	bl	8000768 <__NVIC_SetPriority>
}
 80008aa:	bf00      	nop
 80008ac:	3718      	adds	r7, #24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff33 	bl	800072c <__NVIC_EnableIRQ>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ffa4 	bl	8000824 <SysTick_Config>
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80008fa:	e1ba      	b.n	8000c72 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	fa01 f303 	lsl.w	r3, r1, r3
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	f000 81aa 	beq.w	8000c6c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a55      	ldr	r2, [pc, #340]	; (8000a70 <HAL_GPIO_Init+0x188>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d15d      	bne.n	80009dc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000926:	2201      	movs	r2, #1
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	69fa      	ldr	r2, [r7, #28]
 8000932:	4013      	ands	r3, r2
 8000934:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f003 0201 	and.w	r2, r3, #1
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69fa      	ldr	r2, [r7, #28]
 8000946:	4313      	orrs	r3, r2
 8000948:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000950:	4a48      	ldr	r2, [pc, #288]	; (8000a74 <HAL_GPIO_Init+0x18c>)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000958:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800095a:	4a46      	ldr	r2, [pc, #280]	; (8000a74 <HAL_GPIO_Init+0x18c>)
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	4413      	add	r3, r2
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	3208      	adds	r2, #8
 800096e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000972:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	4013      	ands	r3, r2
 8000988:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	220b      	movs	r2, #11
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	69fa      	ldr	r2, [r7, #28]
 800099a:	4313      	orrs	r3, r2
 800099c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	08da      	lsrs	r2, r3, #3
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	3208      	adds	r2, #8
 80009a6:	69f9      	ldr	r1, [r7, #28]
 80009a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	2203      	movs	r2, #3
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	2202      	movs	r2, #2
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	69fa      	ldr	r2, [r7, #28]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	69fa      	ldr	r2, [r7, #28]
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e067      	b.n	8000aac <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d003      	beq.n	80009ec <HAL_GPIO_Init+0x104>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b12      	cmp	r3, #18
 80009ea:	d145      	bne.n	8000a78 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	08da      	lsrs	r2, r3, #3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3208      	adds	r2, #8
 80009f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	f003 0307 	and.w	r3, r3, #7
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	220f      	movs	r2, #15
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43db      	mvns	r3, r3
 8000a0a:	69fa      	ldr	r2, [r7, #28]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	691b      	ldr	r3, [r3, #16]
 8000a14:	f003 020f 	and.w	r2, r3, #15
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	69fa      	ldr	r2, [r7, #28]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	08da      	lsrs	r2, r3, #3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3208      	adds	r2, #8
 8000a32:	69f9      	ldr	r1, [r7, #28]
 8000a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000a38:	693b      	ldr	r3, [r7, #16]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000a3e:	69bb      	ldr	r3, [r7, #24]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	2203      	movs	r2, #3
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0203 	and.w	r2, r3, #3
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	69fa      	ldr	r2, [r7, #28]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	69fa      	ldr	r2, [r7, #28]
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e01e      	b.n	8000aac <HAL_GPIO_Init+0x1c4>
 8000a6e:	bf00      	nop
 8000a70:	46020000 	.word	0x46020000
 8000a74:	080021e4 	.word	0x080021e4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	2203      	movs	r2, #3
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f003 0203 	and.w	r2, r3, #3
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	69fa      	ldr	r2, [r7, #28]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	69fa      	ldr	r2, [r7, #28]
 8000aaa:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d00b      	beq.n	8000acc <HAL_GPIO_Init+0x1e4>
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d007      	beq.n	8000acc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac0:	2b11      	cmp	r3, #17
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b12      	cmp	r3, #18
 8000aca:	d130      	bne.n	8000b2e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	68da      	ldr	r2, [r3, #12]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	69fa      	ldr	r2, [r7, #28]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	69fa      	ldr	r2, [r7, #28]
 8000afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000b02:	2201      	movs	r2, #1
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	69fa      	ldr	r2, [r7, #28]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	f003 0201 	and.w	r2, r3, #1
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d017      	beq.n	8000b66 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	69fa      	ldr	r2, [r7, #28]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	69fa      	ldr	r2, [r7, #28]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d07c      	beq.n	8000c6c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000b72:	4a47      	ldr	r2, [pc, #284]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3318      	adds	r3, #24
 8000b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	220f      	movs	r2, #15
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69fa      	ldr	r2, [r7, #28]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	0a9a      	lsrs	r2, r3, #10
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <HAL_GPIO_Init+0x3ac>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	f002 0203 	and.w	r2, r2, #3
 8000ba4:	00d2      	lsls	r2, r2, #3
 8000ba6:	4093      	lsls	r3, r2
 8000ba8:	69fa      	ldr	r2, [r7, #28]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000bae:	4938      	ldr	r1, [pc, #224]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	3318      	adds	r3, #24
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000bbc:	4b34      	ldr	r3, [pc, #208]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bc2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69fa      	ldr	r2, [r7, #28]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x2fa>
        {
          tmp |= iocurrent;
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000be2:	4a2b      	ldr	r2, [pc, #172]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        tmp = EXTI->EMR1;
 8000bea:	4b29      	ldr	r3, [pc, #164]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bf0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <HAL_GPIO_Init+0x328>
        {
          tmp |= iocurrent;
 8000c08:	69fa      	ldr	r2, [r7, #28]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000c10:	4a1f      	ldr	r2, [pc, #124]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x354>
        {
          tmp |= iocurrent;
 8000c34:	69fa      	ldr	r2, [r7, #28]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x37e>
        {
          tmp |= iocurrent;
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <HAL_GPIO_Init+0x3a8>)
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	6053      	str	r3, [r2, #4]
      }
    }
    position++;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f47f ae3d 	bne.w	80008fc <HAL_GPIO_Init+0x14>
  }
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	3724      	adds	r7, #36	; 0x24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	46022000 	.word	0x46022000
 8000c94:	002f7f7f 	.word	0x002f7f7f

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8000cb6:	887a      	ldrh	r2, [r7, #2]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000cd4:	68da      	ldr	r2, [r3, #12]
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000cde:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000ce0:	88fb      	ldrh	r3, [r7, #6]
 8000ce2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fb92 	bl	8000410 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000cf8:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000cfa:	88fb      	ldrh	r3, [r7, #6]
 8000cfc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f807 	bl	8000d14 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	46022000 	.word	0x46022000

08000d14 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000d34:	4b34      	ldr	r3, [pc, #208]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d3c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d101      	bne.n	8000d4a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8000d46:	2300      	movs	r3, #0
 8000d48:	e057      	b.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d50:	d90a      	bls.n	8000d68 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000d52:	4b2d      	ldr	r3, [pc, #180]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	4a2a      	ldr	r2, [pc, #168]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d64:	60d3      	str	r3, [r2, #12]
 8000d66:	e007      	b.n	8000d78 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000d70:	4925      	ldr	r1, [pc, #148]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is rised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8000d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d82:	099b      	lsrs	r3, r3, #6
 8000d84:	2232      	movs	r2, #50	; 0x32
 8000d86:	fb02 f303 	mul.w	r3, r2, r3
 8000d8a:	4a21      	ldr	r2, [pc, #132]	; (8000e10 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8000d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d90:	099b      	lsrs	r3, r3, #6
 8000d92:	3301      	adds	r3, #1
 8000d94:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000d96:	e002      	b.n	8000d9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d102      	bne.n	8000db0 <HAL_PWREx_ControlVoltageScaling+0x84>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f3      	bne.n	8000d98 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d01b      	beq.n	8000dee <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is rised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a15      	ldr	r2, [pc, #84]	; (8000e10 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	099b      	lsrs	r3, r3, #6
 8000dc2:	2232      	movs	r2, #50	; 0x32
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8000dca:	fba2 2303 	umull	r2, r3, r2, r3
 8000dce:	099b      	lsrs	r3, r3, #6
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000dd4:	e002      	b.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <HAL_PWREx_ControlVoltageScaling+0xc2>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f3      	bne.n	8000dd6 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e000      	b.n	8000dfa <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	46020800 	.word	0x46020800
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	10624dd3 	.word	0x10624dd3

08000e14 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <HAL_PWREx_GetVoltageRange+0x18>)
 8000e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	46020800 	.word	0x46020800

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f000 be58 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e4a:	4ba2      	ldr	r3, [pc, #648]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	f003 030c 	and.w	r3, r3, #12
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e54:	4b9f      	ldr	r3, [pc, #636]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 816f 	beq.w	800114a <HAL_RCC_OscConfig+0x31a>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <HAL_RCC_OscConfig+0x52>
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	2b0c      	cmp	r3, #12
 8000e76:	f040 80e1 	bne.w	800103c <HAL_RCC_OscConfig+0x20c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	f040 80dd 	bne.w	800103c <HAL_RCC_OscConfig+0x20c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e82:	4b94      	ldr	r3, [pc, #592]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <HAL_RCC_OscConfig+0x6c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d102      	bne.n	8000e9c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	f000 be2f 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea0:	4b8c      	ldr	r3, [pc, #560]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d004      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x86>
 8000eac:	4b89      	ldr	r3, [pc, #548]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000eb4:	e005      	b.n	8000ec2 <HAL_RCC_OscConfig+0x92>
 8000eb6:	4b87      	ldr	r3, [pc, #540]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d255      	bcs.n	8000f72 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10a      	bne.n	8000ee2 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 f8a1 	bl	8002018 <RCC_SetFlashLatencyFromMSIRange>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8000edc:	2301      	movs	r3, #1
 8000ede:	f000 be0c 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000ee2:	4b7c      	ldr	r3, [pc, #496]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	4a7b      	ldr	r2, [pc, #492]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000eec:	6093      	str	r3, [r2, #8]
 8000eee:	4b79      	ldr	r3, [pc, #484]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	4976      	ldr	r1, [pc, #472]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000efc:	4313      	orrs	r3, r2
 8000efe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000f08:	d309      	bcc.n	8000f1e <HAL_RCC_OscConfig+0xee>
 8000f0a:	4b72      	ldr	r3, [pc, #456]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	f023 021f 	bic.w	r2, r3, #31
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	496f      	ldr	r1, [pc, #444]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60cb      	str	r3, [r1, #12]
 8000f1c:	e07e      	b.n	800101c <HAL_RCC_OscConfig+0x1ec>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da0a      	bge.n	8000f3c <HAL_RCC_OscConfig+0x10c>
 8000f26:	4b6b      	ldr	r3, [pc, #428]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	4967      	ldr	r1, [pc, #412]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f36:	4313      	orrs	r3, r2
 8000f38:	60cb      	str	r3, [r1, #12]
 8000f3a:	e06f      	b.n	800101c <HAL_RCC_OscConfig+0x1ec>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f44:	d30a      	bcc.n	8000f5c <HAL_RCC_OscConfig+0x12c>
 8000f46:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	029b      	lsls	r3, r3, #10
 8000f54:	495f      	ldr	r1, [pc, #380]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	60cb      	str	r3, [r1, #12]
 8000f5a:	e05f      	b.n	800101c <HAL_RCC_OscConfig+0x1ec>
 8000f5c:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	03db      	lsls	r3, r3, #15
 8000f6a:	495a      	ldr	r1, [pc, #360]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	60cb      	str	r3, [r1, #12]
 8000f70:	e054      	b.n	800101c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000f72:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f7c:	6093      	str	r3, [r2, #8]
 8000f7e:	4b55      	ldr	r3, [pc, #340]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	4952      	ldr	r1, [pc, #328]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000f98:	d309      	bcc.n	8000fae <HAL_RCC_OscConfig+0x17e>
 8000f9a:	4b4e      	ldr	r3, [pc, #312]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f023 021f 	bic.w	r2, r3, #31
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	494b      	ldr	r1, [pc, #300]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	60cb      	str	r3, [r1, #12]
 8000fac:	e028      	b.n	8001000 <HAL_RCC_OscConfig+0x1d0>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da0a      	bge.n	8000fcc <HAL_RCC_OscConfig+0x19c>
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	4943      	ldr	r1, [pc, #268]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60cb      	str	r3, [r1, #12]
 8000fca:	e019      	b.n	8001000 <HAL_RCC_OscConfig+0x1d0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd4:	d30a      	bcc.n	8000fec <HAL_RCC_OscConfig+0x1bc>
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a1b      	ldr	r3, [r3, #32]
 8000fe2:	029b      	lsls	r3, r3, #10
 8000fe4:	493b      	ldr	r1, [pc, #236]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60cb      	str	r3, [r1, #12]
 8000fea:	e009      	b.n	8001000 <HAL_RCC_OscConfig+0x1d0>
 8000fec:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	03db      	lsls	r3, r3, #15
 8000ffa:	4936      	ldr	r1, [pc, #216]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if(sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10a      	bne.n	800101c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	4618      	mov	r0, r3
 800100c:	f001 f804 	bl	8002018 <RCC_SetFlashLatencyFromMSIRange>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	f000 bd6f 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800101c:	f000 ffe2 	bl	8001fe4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_RCC_OscConfig+0x2a8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff faf9 	bl	800061c <HAL_InitTick>
 800102a:	4603      	mov	r3, r0
 800102c:	77fb      	strb	r3, [r7, #31]
        if (status != HAL_OK)
 800102e:	7ffb      	ldrb	r3, [r7, #31]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 8089 	beq.w	8001148 <HAL_RCC_OscConfig+0x318>
        {
          return status;
 8001036:	7ffb      	ldrb	r3, [r7, #31]
 8001038:	f000 bd5f 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d066      	beq.n	8001112 <HAL_RCC_OscConfig+0x2e2>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001050:	f7ff fb2e 	bl	80006b0 <HAL_GetTick>
 8001054:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001056:	e009      	b.n	800106c <HAL_RCC_OscConfig+0x23c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001058:	f7ff fb2a 	bl	80006b0 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d902      	bls.n	800106c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	f000 bd47 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0ef      	beq.n	8001058 <HAL_RCC_OscConfig+0x228>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 800107e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001082:	6093      	str	r3, [r2, #8]
 8001084:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001090:	4910      	ldr	r1, [pc, #64]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 8001092:	4313      	orrs	r3, r2
 8001094:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800109e:	d309      	bcc.n	80010b4 <HAL_RCC_OscConfig+0x284>
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	f023 021f 	bic.w	r2, r3, #31
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4909      	ldr	r1, [pc, #36]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60cb      	str	r3, [r1, #12]
 80010b2:	e04a      	b.n	800114a <HAL_RCC_OscConfig+0x31a>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	da0f      	bge.n	80010dc <HAL_RCC_OscConfig+0x2ac>
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	015b      	lsls	r3, r3, #5
 80010ca:	4902      	ldr	r1, [pc, #8]	; (80010d4 <HAL_RCC_OscConfig+0x2a4>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60cb      	str	r3, [r1, #12]
 80010d0:	e03b      	b.n	800114a <HAL_RCC_OscConfig+0x31a>
 80010d2:	bf00      	nop
 80010d4:	46020c00 	.word	0x46020c00
 80010d8:	20000004 	.word	0x20000004
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e4:	d30a      	bcc.n	80010fc <HAL_RCC_OscConfig+0x2cc>
 80010e6:	4b94      	ldr	r3, [pc, #592]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	029b      	lsls	r3, r3, #10
 80010f4:	4990      	ldr	r1, [pc, #576]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60cb      	str	r3, [r1, #12]
 80010fa:	e026      	b.n	800114a <HAL_RCC_OscConfig+0x31a>
 80010fc:	4b8e      	ldr	r3, [pc, #568]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	03db      	lsls	r3, r3, #15
 800110a:	498b      	ldr	r1, [pc, #556]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 800110c:	4313      	orrs	r3, r2
 800110e:	60cb      	str	r3, [r1, #12]
 8001110:	e01b      	b.n	800114a <HAL_RCC_OscConfig+0x31a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001112:	4b89      	ldr	r3, [pc, #548]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a88      	ldr	r2, [pc, #544]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 8001118:	f023 0301 	bic.w	r3, r3, #1
 800111c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800111e:	f7ff fac7 	bl	80006b0 <HAL_GetTick>
 8001122:	6238      	str	r0, [r7, #32]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001124:	e009      	b.n	800113a <HAL_RCC_OscConfig+0x30a>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001126:	f7ff fac3 	bl	80006b0 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d902      	bls.n	800113a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	f000 bce0 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800113a:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1ef      	bne.n	8001126 <HAL_RCC_OscConfig+0x2f6>
 8001146:	e000      	b.n	800114a <HAL_RCC_OscConfig+0x31a>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001148:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 808d 	beq.w	8001272 <HAL_RCC_OscConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	2b08      	cmp	r3, #8
 800115c:	d005      	beq.n	800116a <HAL_RCC_OscConfig+0x33a>
 800115e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001160:	2b0c      	cmp	r3, #12
 8001162:	d10f      	bne.n	8001184 <HAL_RCC_OscConfig+0x354>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	2b03      	cmp	r3, #3
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x354>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116a:	4b73      	ldr	r3, [pc, #460]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d07c      	beq.n	8001270 <HAL_RCC_OscConfig+0x440>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d178      	bne.n	8001270 <HAL_RCC_OscConfig+0x440>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f000 bcbb 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118c:	d106      	bne.n	800119c <HAL_RCC_OscConfig+0x36c>
 800118e:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a69      	ldr	r2, [pc, #420]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e03b      	b.n	8001214 <HAL_RCC_OscConfig+0x3e4>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011a4:	d112      	bne.n	80011cc <HAL_RCC_OscConfig+0x39c>
 80011a6:	4b64      	ldr	r3, [pc, #400]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a63      	ldr	r2, [pc, #396]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b61      	ldr	r3, [pc, #388]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a60      	ldr	r2, [pc, #384]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b5e      	ldr	r3, [pc, #376]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a5d      	ldr	r2, [pc, #372]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e023      	b.n	8001214 <HAL_RCC_OscConfig+0x3e4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80011d4:	d112      	bne.n	80011fc <HAL_RCC_OscConfig+0x3cc>
 80011d6:	4b58      	ldr	r3, [pc, #352]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a57      	ldr	r2, [pc, #348]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b55      	ldr	r3, [pc, #340]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a54      	ldr	r2, [pc, #336]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b52      	ldr	r3, [pc, #328]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a51      	ldr	r2, [pc, #324]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e00b      	b.n	8001214 <HAL_RCC_OscConfig+0x3e4>
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a4d      	ldr	r2, [pc, #308]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 8001202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d014      	beq.n	8001246 <HAL_RCC_OscConfig+0x416>
      {
        tickstart = HAL_GetTick();
 800121c:	f7ff fa48 	bl	80006b0 <HAL_GetTick>
 8001220:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001222:	e009      	b.n	8001238 <HAL_RCC_OscConfig+0x408>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fa44 	bl	80006b0 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	; 0x64
 8001230:	d902      	bls.n	8001238 <HAL_RCC_OscConfig+0x408>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	f000 bc61 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001238:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0ef      	beq.n	8001224 <HAL_RCC_OscConfig+0x3f4>
 8001244:	e015      	b.n	8001272 <HAL_RCC_OscConfig+0x442>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001246:	f7ff fa33 	bl	80006b0 <HAL_GetTick>
 800124a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800124c:	e009      	b.n	8001262 <HAL_RCC_OscConfig+0x432>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124e:	f7ff fa2f 	bl	80006b0 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b64      	cmp	r3, #100	; 0x64
 800125a:	d902      	bls.n	8001262 <HAL_RCC_OscConfig+0x432>
          {
            return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	f000 bc4c 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1ef      	bne.n	800124e <HAL_RCC_OscConfig+0x41e>
 800126e:	e000      	b.n	8001272 <HAL_RCC_OscConfig+0x442>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d064      	beq.n	8001348 <HAL_RCC_OscConfig+0x518>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001280:	2b04      	cmp	r3, #4
 8001282:	d005      	beq.n	8001290 <HAL_RCC_OscConfig+0x460>
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	2b0c      	cmp	r3, #12
 8001288:	d11a      	bne.n	80012c0 <HAL_RCC_OscConfig+0x490>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128c:	2b02      	cmp	r3, #2
 800128e:	d117      	bne.n	80012c0 <HAL_RCC_OscConfig+0x490>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_RCC_OscConfig+0x47a>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <HAL_RCC_OscConfig+0x47a>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	f000 bc28 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	041b      	lsls	r3, r3, #16
 80012b8:	491f      	ldr	r1, [pc, #124]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012be:	e043      	b.n	8001348 <HAL_RCC_OscConfig+0x518>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d024      	beq.n	8001312 <HAL_RCC_OscConfig+0x4e2>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80012d4:	f7ff f9ec 	bl	80006b0 <HAL_GetTick>
 80012d8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012da:	e009      	b.n	80012f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012dc:	f7ff f9e8 	bl	80006b0 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d902      	bls.n	80012f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f000 bc05 	b.w	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0ef      	beq.n	80012dc <HAL_RCC_OscConfig+0x4ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	041b      	lsls	r3, r3, #16
 800130a:	490b      	ldr	r1, [pc, #44]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 800130c:	4313      	orrs	r3, r2
 800130e:	610b      	str	r3, [r1, #16]
 8001310:	e01a      	b.n	8001348 <HAL_RCC_OscConfig+0x518>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_RCC_OscConfig+0x508>)
 8001318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800131e:	f7ff f9c7 	bl	80006b0 <HAL_GetTick>
 8001322:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001324:	e00a      	b.n	800133c <HAL_RCC_OscConfig+0x50c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff f9c3 	bl	80006b0 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	6a3b      	ldr	r3, [r7, #32]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d903      	bls.n	800133c <HAL_RCC_OscConfig+0x50c>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e3e0      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
 8001338:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800133c:	4baf      	ldr	r3, [pc, #700]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ee      	bne.n	8001326 <HAL_RCC_OscConfig+0x4f6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80c7 	beq.w	80014e4 <HAL_RCC_OscConfig+0x6b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135c:	4ba7      	ldr	r3, [pc, #668]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 800135e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	2b00      	cmp	r3, #0
 8001368:	d111      	bne.n	800138e <HAL_RCC_OscConfig+0x55e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4ba4      	ldr	r3, [pc, #656]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 800136c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001370:	4aa2      	ldr	r2, [pc, #648]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001372:	f043 0304 	orr.w	r3, r3, #4
 8001376:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800137a:	4ba0      	ldr	r3, [pc, #640]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 800137c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	617b      	str	r3, [r7, #20]
 8001386:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001388:	2301      	movs	r3, #1
 800138a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800138e:	4b9c      	ldr	r3, [pc, #624]	; (8001600 <HAL_RCC_OscConfig+0x7d0>)
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d118      	bne.n	80013cc <HAL_RCC_OscConfig+0x59c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800139a:	4b99      	ldr	r3, [pc, #612]	; (8001600 <HAL_RCC_OscConfig+0x7d0>)
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	4a98      	ldr	r2, [pc, #608]	; (8001600 <HAL_RCC_OscConfig+0x7d0>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a6:	f7ff f983 	bl	80006b0 <HAL_GetTick>
 80013aa:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x590>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ae:	f7ff f97f 	bl	80006b0 <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	6a3b      	ldr	r3, [r7, #32]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x590>
        {
          return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e39c      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80013c0:	4b8f      	ldr	r3, [pc, #572]	; (8001600 <HAL_RCC_OscConfig+0x7d0>)
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0f0      	beq.n	80013ae <HAL_RCC_OscConfig+0x57e>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d05f      	beq.n	8001494 <HAL_RCC_OscConfig+0x664>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80013d4:	4b89      	ldr	r3, [pc, #548]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80013d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013da:	61bb      	str	r3, [r7, #24]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699a      	ldr	r2, [r3, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d037      	beq.n	800145a <HAL_RCC_OscConfig+0x62a>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_RCC_OscConfig+0x5d2>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_RCC_OscConfig+0x5d2>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e37b      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d01b      	beq.n	8001444 <HAL_RCC_OscConfig+0x614>
        {
          __HAL_RCC_LSI_DISABLE();
 800140c:	4b7b      	ldr	r3, [pc, #492]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 800140e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001412:	4a7a      	ldr	r2, [pc, #488]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001414:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001418:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800141c:	f7ff f948 	bl	80006b0 <HAL_GetTick>
 8001420:	6238      	str	r0, [r7, #32]

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x606>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff f944 	bl	80006b0 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x606>
            {
              return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e361      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001436:	4b71      	ldr	r3, [pc, #452]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800143c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1ef      	bne.n	8001424 <HAL_RCC_OscConfig+0x5f4>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001444:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800144a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	496a      	ldr	r1, [pc, #424]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001454:	4313      	orrs	r3, r2
 8001456:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800145a:	4b68      	ldr	r3, [pc, #416]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 800145c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001460:	4a66      	ldr	r2, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001462:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001466:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800146a:	f7ff f921 	bl	80006b0 <HAL_GetTick>
 800146e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x654>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff f91d 	bl	80006b0 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x654>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e33a      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001484:	4b5d      	ldr	r3, [pc, #372]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800148a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0ef      	beq.n	8001472 <HAL_RCC_OscConfig+0x642>
 8001492:	e01b      	b.n	80014cc <HAL_RCC_OscConfig+0x69c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001494:	4b59      	ldr	r3, [pc, #356]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800149a:	4a58      	ldr	r2, [pc, #352]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 800149c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80014a0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80014a4:	f7ff f904 	bl	80006b0 <HAL_GetTick>
 80014a8:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x68e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff f900 	bl	80006b0 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x68e>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e31d      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80014be:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80014c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ef      	bne.n	80014ac <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014cc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x6b4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d4:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80014d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014da:	4a48      	ldr	r2, [pc, #288]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8112 	beq.w	8001716 <HAL_RCC_OscConfig+0x8e6>
  {
    FlagStatus pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80014fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	2b00      	cmp	r3, #0
 8001504:	d111      	bne.n	800152a <HAL_RCC_OscConfig+0x6fa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150c:	4a3b      	ldr	r2, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001516:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001524:	2301      	movs	r3, #1
 8001526:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800152a:	4b35      	ldr	r3, [pc, #212]	; (8001600 <HAL_RCC_OscConfig+0x7d0>)
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d118      	bne.n	8001568 <HAL_RCC_OscConfig+0x738>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001536:	4b32      	ldr	r3, [pc, #200]	; (8001600 <HAL_RCC_OscConfig+0x7d0>)
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	4a31      	ldr	r2, [pc, #196]	; (8001600 <HAL_RCC_OscConfig+0x7d0>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff f8b5 	bl	80006b0 <HAL_GetTick>
 8001546:	6238      	str	r0, [r7, #32]

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x72c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff f8b1 	bl	80006b0 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x72c>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e2ce      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800155c:	4b28      	ldr	r3, [pc, #160]	; (8001600 <HAL_RCC_OscConfig+0x7d0>)
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x71a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d01f      	beq.n	80015b4 <HAL_RCC_OscConfig+0x784>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d010      	beq.n	80015a2 <HAL_RCC_OscConfig+0x772>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001582:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001586:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001596:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015a0:	e018      	b.n	80015d4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80015a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015b2:	e00f      	b.n	80015d4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80015b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015ba:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80015c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015ca:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <HAL_RCC_OscConfig+0x7cc>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d058      	beq.n	800168e <HAL_RCC_OscConfig+0x85e>
    {
      tickstart = HAL_GetTick();
 80015dc:	f7ff f868 	bl	80006b0 <HAL_GetTick>
 80015e0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015e2:	e00f      	b.n	8001604 <HAL_RCC_OscConfig+0x7d4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e4:	f7ff f864 	bl	80006b0 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d906      	bls.n	8001604 <HAL_RCC_OscConfig+0x7d4>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e27f      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
 80015fa:	bf00      	nop
 80015fc:	46020c00 	.word	0x46020c00
 8001600:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001604:	4ba4      	ldr	r3, [pc, #656]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001606:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0e8      	beq.n	80015e4 <HAL_RCC_OscConfig+0x7b4>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	2b00      	cmp	r3, #0
 800161c:	d01b      	beq.n	8001656 <HAL_RCC_OscConfig+0x826>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800161e:	4b9e      	ldr	r3, [pc, #632]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001624:	4a9c      	ldr	r2, [pc, #624]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800162a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x816>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff f83e 	bl	80006b0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	6a3b      	ldr	r3, [r7, #32]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x816>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e259      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001646:	4b94      	ldr	r3, [pc, #592]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800164c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ed      	beq.n	8001630 <HAL_RCC_OscConfig+0x800>
 8001654:	e053      	b.n	80016fe <HAL_RCC_OscConfig+0x8ce>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001656:	4b90      	ldr	r3, [pc, #576]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800165c:	4a8e      	ldr	r2, [pc, #568]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 800165e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001662:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001666:	e00a      	b.n	800167e <HAL_RCC_OscConfig+0x84e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff f822 	bl	80006b0 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x84e>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e23d      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800167e:	4b86      	ldr	r3, [pc, #536]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ed      	bne.n	8001668 <HAL_RCC_OscConfig+0x838>
 800168c:	e037      	b.n	80016fe <HAL_RCC_OscConfig+0x8ce>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800168e:	f7ff f80f 	bl	80006b0 <HAL_GetTick>
 8001692:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x87c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff f80b 	bl	80006b0 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x87c>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e226      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ac:	4b7a      	ldr	r3, [pc, #488]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80016ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ed      	bne.n	8001696 <HAL_RCC_OscConfig+0x866>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80016ba:	4b77      	ldr	r3, [pc, #476]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80016bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01a      	beq.n	80016fe <HAL_RCC_OscConfig+0x8ce>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80016c8:	4b73      	ldr	r3, [pc, #460]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80016ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ce:	4a72      	ldr	r2, [pc, #456]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80016d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80016d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x8c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7fe ffe9 	bl	80006b0 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x8c0>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e204      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016f0:	4b69      	ldr	r3, [pc, #420]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80016f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ed      	bne.n	80016da <HAL_RCC_OscConfig+0x8aa>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001702:	2b01      	cmp	r3, #1
 8001704:	d107      	bne.n	8001716 <HAL_RCC_OscConfig+0x8e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001706:	4b64      	ldr	r3, [pc, #400]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170c:	4a62      	ldr	r2, [pc, #392]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 800170e:	f023 0304 	bic.w	r3, r3, #4
 8001712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0320 	and.w	r3, r3, #32
 800171e:	2b00      	cmp	r3, #0
 8001720:	d036      	beq.n	8001790 <HAL_RCC_OscConfig+0x960>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	2b00      	cmp	r3, #0
 8001728:	d019      	beq.n	800175e <HAL_RCC_OscConfig+0x92e>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a5a      	ldr	r2, [pc, #360]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001734:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001736:	f7fe ffbb 	bl	80006b0 <HAL_GetTick>
 800173a:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x920>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173e:	f7fe ffb7 	bl	80006b0 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x920>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e1d4      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001750:	4b51      	ldr	r3, [pc, #324]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x90e>
 800175c:	e018      	b.n	8001790 <HAL_RCC_OscConfig+0x960>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800175e:	4b4e      	ldr	r3, [pc, #312]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a4d      	ldr	r2, [pc, #308]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001768:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800176a:	f7fe ffa1 	bl	80006b0 <HAL_GetTick>
 800176e:	6238      	str	r0, [r7, #32]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x954>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001772:	f7fe ff9d 	bl	80006b0 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x954>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1ba      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001784:	4b44      	ldr	r3, [pc, #272]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x942>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001798:	2b00      	cmp	r3, #0
 800179a:	d036      	beq.n	800180a <HAL_RCC_OscConfig+0x9da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d019      	beq.n	80017d8 <HAL_RCC_OscConfig+0x9a8>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80017a4:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a3b      	ldr	r2, [pc, #236]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80017b0:	f7fe ff7e 	bl	80006b0 <HAL_GetTick>
 80017b4:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x99a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80017b8:	f7fe ff7a 	bl	80006b0 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x99a>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e197      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80017ca:	4b33      	ldr	r3, [pc, #204]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d0f0      	beq.n	80017b8 <HAL_RCC_OscConfig+0x988>
 80017d6:	e018      	b.n	800180a <HAL_RCC_OscConfig+0x9da>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80017d8:	4b2f      	ldr	r3, [pc, #188]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a2e      	ldr	r2, [pc, #184]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 80017de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80017e4:	f7fe ff64 	bl	80006b0 <HAL_GetTick>
 80017e8:	6238      	str	r0, [r7, #32]

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x9ce>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80017ec:	f7fe ff60 	bl	80006b0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e17d      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x9bc>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001812:	2b00      	cmp	r3, #0
 8001814:	d07f      	beq.n	8001916 <HAL_RCC_OscConfig+0xae6>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	2b00      	cmp	r3, #0
 800181c:	d062      	beq.n	80018e4 <HAL_RCC_OscConfig+0xab4>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001824:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001828:	6093      	str	r3, [r2, #8]
 800182a:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	4918      	ldr	r1, [pc, #96]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001844:	d309      	bcc.n	800185a <HAL_RCC_OscConfig+0xa2a>
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	f023 021f 	bic.w	r2, r3, #31
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4911      	ldr	r1, [pc, #68]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001854:	4313      	orrs	r3, r2
 8001856:	60cb      	str	r3, [r1, #12]
 8001858:	e02a      	b.n	80018b0 <HAL_RCC_OscConfig+0xa80>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	2b00      	cmp	r3, #0
 8001860:	da0a      	bge.n	8001878 <HAL_RCC_OscConfig+0xa48>
 8001862:	4b0d      	ldr	r3, [pc, #52]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	015b      	lsls	r3, r3, #5
 8001870:	4909      	ldr	r1, [pc, #36]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001872:	4313      	orrs	r3, r2
 8001874:	60cb      	str	r3, [r1, #12]
 8001876:	e01b      	b.n	80018b0 <HAL_RCC_OscConfig+0xa80>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001880:	d30c      	bcc.n	800189c <HAL_RCC_OscConfig+0xa6c>
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	4901      	ldr	r1, [pc, #4]	; (8001898 <HAL_RCC_OscConfig+0xa68>)
 8001892:	4313      	orrs	r3, r2
 8001894:	60cb      	str	r3, [r1, #12]
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0xa80>
 8001898:	46020c00 	.word	0x46020c00
 800189c:	4b99      	ldr	r3, [pc, #612]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	03db      	lsls	r3, r3, #15
 80018aa:	4996      	ldr	r1, [pc, #600]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80018b0:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a93      	ldr	r2, [pc, #588]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 80018b6:	f043 0310 	orr.w	r3, r3, #16
 80018ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80018bc:	f7fe fef8 	bl	80006b0 <HAL_GetTick>
 80018c0:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0xaa6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80018c4:	f7fe fef4 	bl	80006b0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	6a3b      	ldr	r3, [r7, #32]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0xaa6>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e111      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80018d6:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0xa94>
 80018e2:	e018      	b.n	8001916 <HAL_RCC_OscConfig+0xae6>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80018e4:	4b87      	ldr	r3, [pc, #540]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a86      	ldr	r2, [pc, #536]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 80018ea:	f023 0310 	bic.w	r3, r3, #16
 80018ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80018f0:	f7fe fede 	bl	80006b0 <HAL_GetTick>
 80018f4:	6238      	str	r0, [r7, #32]

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xada>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80018f8:	f7fe feda 	bl	80006b0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xada>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0f7      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800190a:	4b7e      	ldr	r3, [pc, #504]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0320 	and.w	r3, r3, #32
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0xac8>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 80ec 	beq.w	8001af8 <HAL_RCC_OscConfig+0xcc8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001920:	4b78      	ldr	r3, [pc, #480]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b0c      	cmp	r3, #12
 800192a:	f000 80e3 	beq.w	8001af4 <HAL_RCC_OscConfig+0xcc4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001932:	2b02      	cmp	r3, #2
 8001934:	f040 80be 	bne.w	8001ab4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b72      	ldr	r3, [pc, #456]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a71      	ldr	r2, [pc, #452]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001944:	f7fe feb4 	bl	80006b0 <HAL_GetTick>
 8001948:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0xb2e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7fe feb0 	bl	80006b0 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xb2e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0cd      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800195e:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0xb1c>
          }
        }

        /* Enable PWR CLK */
        __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	4b66      	ldr	r3, [pc, #408]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 800196c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001970:	4a64      	ldr	r2, [pc, #400]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800197a:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 800197c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001988:	4b5f      	ldr	r3, [pc, #380]	; (8001b08 <HAL_RCC_OscConfig+0xcd8>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001990:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001994:	d102      	bne.n	800199c <HAL_RCC_OscConfig+0xb6c>
        {
          pwrboosten = SET;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800199c:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <HAL_RCC_OscConfig+0xcd8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4a59      	ldr	r2, [pc, #356]	; (8001b08 <HAL_RCC_OscConfig+0xcd8>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a6:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80019a8:	4b56      	ldr	r3, [pc, #344]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019b0:	f023 0303 	bic.w	r3, r3, #3
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019bc:	3a01      	subs	r2, #1
 80019be:	0212      	lsls	r2, r2, #8
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019c6:	430a      	orrs	r2, r1
 80019c8:	494e      	ldr	r1, [pc, #312]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	628b      	str	r3, [r1, #40]	; 0x28
 80019ce:	4b4d      	ldr	r3, [pc, #308]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 80019d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <HAL_RCC_OscConfig+0xcdc>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019da:	3a01      	subs	r2, #1
 80019dc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80019e4:	3a01      	subs	r2, #1
 80019e6:	0252      	lsls	r2, r2, #9
 80019e8:	b292      	uxth	r2, r2
 80019ea:	4311      	orrs	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019f0:	3a01      	subs	r2, #1
 80019f2:	0412      	lsls	r2, r2, #16
 80019f4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80019f8:	4311      	orrs	r1, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80019fe:	3a01      	subs	r2, #1
 8001a00:	0612      	lsls	r2, r2, #24
 8001a02:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001a06:	430a      	orrs	r2, r1
 8001a08:	493e      	ldr	r1, [pc, #248]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a14:	f023 0310 	bic.w	r3, r3, #16
 8001a18:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a2a:	00d2      	lsls	r2, r2, #3
 8001a2c:	4935      	ldr	r1, [pc, #212]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a36:	4a33      	ldr	r2, [pc, #204]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a38:	f043 0310 	orr.w	r3, r3, #16
 8001a3c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001a3e:	4b31      	ldr	r3, [pc, #196]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a42:	f023 020c 	bic.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	492e      	ldr	r1, [pc, #184]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0xc34>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_RCC_OscConfig+0xcd8>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a2a      	ldr	r2, [pc, #168]	; (8001b08 <HAL_RCC_OscConfig+0xcd8>)
 8001a5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a62:	60d3      	str	r3, [r2, #12]
        }

        /*Disable PWR clk */
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6a:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a6c:	f023 0304 	bic.w	r3, r3, #4
 8001a70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	4a22      	ldr	r2, [pc, #136]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001a80:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1f      	ldr	r2, [pc, #124]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a8c:	f7fe fe10 	bl	80006b0 <HAL_GetTick>
 8001a90:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7fe fe0c 	bl	80006b0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e029      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xc64>
 8001ab2:	e021      	b.n	8001af8 <HAL_RCC_OscConfig+0xcc8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001abe:	6013      	str	r3, [r2, #0]

        /* Disable main PLL outputs to save power if no PLLs on */
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	4a0f      	ldr	r2, [pc, #60]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001ac6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001aca:	6293      	str	r3, [r2, #40]	; 0x28

        tickstart = HAL_GetTick();
 8001acc:	f7fe fdf0 	bl	80006b0 <HAL_GetTick>
 8001ad0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0xcb6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7fe fdec 	bl	80006b0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xcb6>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e009      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ae6:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <HAL_RCC_OscConfig+0xcd4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xca4>
 8001af2:	e001      	b.n	8001af8 <HAL_RCC_OscConfig+0xcc8>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_RCC_OscConfig+0xcca>
    }
  }
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3730      	adds	r7, #48	; 0x30
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	46020c00 	.word	0x46020c00
 8001b08:	46020800 	.word	0x46020800
 8001b0c:	80800000 	.word	0x80800000

08001b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e146      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b24:	4ba5      	ldr	r3, [pc, #660]	; (8001dbc <HAL_RCC_ClockConfig+0x2ac>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d910      	bls.n	8001b54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4ba2      	ldr	r3, [pc, #648]	; (8001dbc <HAL_RCC_ClockConfig+0x2ac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 020f 	bic.w	r2, r3, #15
 8001b3a:	49a0      	ldr	r1, [pc, #640]	; (8001dbc <HAL_RCC_ClockConfig+0x2ac>)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b42:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <HAL_RCC_ClockConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e12e      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80be 	beq.w	8001cde <HAL_RCC_ClockConfig+0x1ce>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d137      	bne.n	8001bda <HAL_RCC_ClockConfig+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6a:	4b95      	ldr	r3, [pc, #596]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b70:	4a93      	ldr	r2, [pc, #588]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b7a:	4b91      	ldr	r3, [pc, #580]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
      tickstart = HAL_GetTick();
 8001b88:	f7fe fd92 	bl	80006b0 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001b8e:	4b8d      	ldr	r3, [pc, #564]	; (8001dc4 <HAL_RCC_ClockConfig+0x2b4>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00f      	beq.n	8001bba <HAL_RCC_ClockConfig+0xaa>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_ClockConfig+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001b9c:	f7fe fd88 	bl	80006b0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e101      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001bae:	4b85      	ldr	r3, [pc, #532]	; (8001dc4 <HAL_RCC_ClockConfig+0x2b4>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x8c>
          }
        }
      }

      __HAL_RCC_PWR_CLK_DISABLE();
 8001bba:	4b81      	ldr	r3, [pc, #516]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc0:	4a7f      	ldr	r2, [pc, #508]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001bc2:	f023 0304 	bic.w	r3, r3, #4
 8001bc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001bca:	4b7d      	ldr	r3, [pc, #500]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d121      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x10a>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0eb      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be2:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d115      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0df      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xfa>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001bfa:	4b71      	ldr	r3, [pc, #452]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d109      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e0d3      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0a:	4b6d      	ldr	r3, [pc, #436]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_ClockConfig+0x10a>
        {
          return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0cb      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001c1a:	4b69      	ldr	r3, [pc, #420]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	f023 0203 	bic.w	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4966      	ldr	r1, [pc, #408]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8001c2c:	f7fe fd40 	bl	80006b0 <HAL_GetTick>
 8001c30:	6178      	str	r0, [r7, #20]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d112      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x150>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3a:	e00a      	b.n	8001c52 <HAL_RCC_ClockConfig+0x142>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3c:	f7fe fd38 	bl	80006b0 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_ClockConfig+0x142>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e0af      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c52:	4b5b      	ldr	r3, [pc, #364]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b0c      	cmp	r3, #12
 8001c5c:	d1ee      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x12c>
 8001c5e:	e03e      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ce>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d112      	bne.n	8001c8e <HAL_RCC_ClockConfig+0x17e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6a:	f7fe fd21 	bl	80006b0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e098      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c80:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d1ee      	bne.n	8001c6a <HAL_RCC_ClockConfig+0x15a>
 8001c8c:	e027      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ce>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d11d      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x1c2>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_ClockConfig+0x19e>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7fe fd0a 	bl	80006b0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e081      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001cae:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1ee      	bne.n	8001c98 <HAL_RCC_ClockConfig+0x188>
 8001cba:	e010      	b.n	8001cde <HAL_RCC_ClockConfig+0x1ce>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7fe fcf8 	bl	80006b0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e06f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d1ee      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x1ac>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d008      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001cea:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	f023 020f 	bic.w	r2, r3, #15
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	4932      	ldr	r1, [pc, #200]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	492a      	ldr	r1, [pc, #168]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4922      	ldr	r1, [pc, #136]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	620b      	str	r3, [r1, #32]
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x248>
  {
    assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
    MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001d46:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	491b      	ldr	r1, [pc, #108]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	624b      	str	r3, [r1, #36]	; 0x24
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <HAL_RCC_ClockConfig+0x2ac>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d210      	bcs.n	8001d88 <HAL_RCC_ClockConfig+0x278>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <HAL_RCC_ClockConfig+0x2ac>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 020f 	bic.w	r2, r3, #15
 8001d6e:	4913      	ldr	r1, [pc, #76]	; (8001dbc <HAL_RCC_ClockConfig+0x2ac>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_ClockConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x278>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_ClockConfig+0x2a2>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001d88:	f000 f824 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_RCC_ClockConfig+0x2b0>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	490c      	ldr	r1, [pc, #48]	; (8001dc8 <HAL_RCC_ClockConfig+0x2b8>)
 8001d98:	5ccb      	ldrb	r3, [r1, r3]
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x2bc>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_RCC_ClockConfig+0x2c0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fc38 	bl	800061c <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	74fb      	strb	r3, [r7, #19]

  return status;
 8001db0:	7cfb      	ldrb	r3, [r7, #19]
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	46020c00 	.word	0x46020c00
 8001dc4:	46020800 	.word	0x46020800
 8001dc8:	08002194 	.word	0x08002194
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b08b      	sub	sp, #44	; 0x2c
 8001dd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de2:	4b7b      	ldr	r3, [pc, #492]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	4b78      	ldr	r3, [pc, #480]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d121      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d11e      	bne.n	8001e46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8001e08:	4b71      	ldr	r3, [pc, #452]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001e14:	4b6e      	ldr	r3, [pc, #440]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e1a:	0b1b      	lsrs	r3, r3, #12
 8001e1c:	f003 030f 	and.w	r3, r3, #15
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
 8001e22:	e005      	b.n	8001e30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001e24:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	0f1b      	lsrs	r3, r3, #28
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e30:	4a68      	ldr	r2, [pc, #416]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d110      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e44:	e00d      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d102      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e52:	4b61      	ldr	r3, [pc, #388]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e54:	623b      	str	r3, [r7, #32]
 8001e56:	e004      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e5e:	4b5e      	ldr	r3, [pc, #376]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e60:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	f040 80ac 	bne.w	8001fc2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001e6a:	4b59      	ldr	r3, [pc, #356]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001e74:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	08db      	lsrs	r3, r3, #3
 8001e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 8086 	beq.w	8001fbe <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d003      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xec>
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d022      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0x130>
 8001ebe:	e043      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eca:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001fdc <HAL_RCC_GetSysClockFreq+0x208>
 8001ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed2:	4b3f      	ldr	r3, [pc, #252]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001ee2:	ed97 6a01 	vldr	s12, [r7, #4]
 8001ee6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001fe0 <HAL_RCC_GetSysClockFreq+0x20c>
 8001eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efe:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8001f02:	e046      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0e:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001fdc <HAL_RCC_GetSysClockFreq+0x208>
 8001f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f26:	ed97 6a01 	vldr	s12, [r7, #4]
 8001f2a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001fe0 <HAL_RCC_GetSysClockFreq+0x20c>
 8001f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f42:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8001f46:	e024      	b.n	8001f92 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f70:	ed97 6a01 	vldr	s12, [r7, #4]
 8001f74:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8001fe0 <HAL_RCC_GetSysClockFreq+0x20c>
 8001f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8001f80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8001f90:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f96:	0e1b      	lsrs	r3, r3, #24
 8001f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb6:	ee17 3a90 	vmov	r3, s15
 8001fba:	623b      	str	r3, [r7, #32]
 8001fbc:	e001      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	372c      	adds	r7, #44	; 0x2c
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	46020c00 	.word	0x46020c00
 8001fd4:	080021a4 	.word	0x080021a4
 8001fd8:	00f42400 	.word	0x00f42400
 8001fdc:	4b742400 	.word	0x4b742400
 8001fe0:	46000000 	.word	0x46000000

08001fe4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001fe8:	f7ff fef4 	bl	8001dd4 <HAL_RCC_GetSysClockFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <HAL_RCC_GetHCLKFreq+0x28>)
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	4906      	ldr	r1, [pc, #24]	; (8002010 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001ff8:	5ccb      	ldrb	r3, [r1, r3]
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	4a05      	ldr	r2, [pc, #20]	; (8002014 <HAL_RCC_GetHCLKFreq+0x30>)
 8002000:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <HAL_RCC_GetHCLKFreq+0x30>)
 8002004:	681b      	ldr	r3, [r3, #0]
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	46020c00 	.word	0x46020c00
 8002010:	08002194 	.word	0x08002194
 8002014:	20000000 	.word	0x20000000

08002018 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002020:	4b3e      	ldr	r3, [pc, #248]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002022:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800202e:	f7fe fef1 	bl	8000e14 <HAL_PWREx_GetVoltageRange>
 8002032:	6178      	str	r0, [r7, #20]
 8002034:	e019      	b.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203c:	4a37      	ldr	r2, [pc, #220]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002046:	4b35      	ldr	r3, [pc, #212]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002054:	f7fe fede 	bl	8000e14 <HAL_PWREx_GetVoltageRange>
 8002058:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800205a:	4b30      	ldr	r3, [pc, #192]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800205c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002060:	4a2e      	ldr	r2, [pc, #184]	; (800211c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002062:	f023 0304 	bic.w	r3, r3, #4
 8002066:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002070:	d003      	beq.n	800207a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002078:	d109      	bne.n	800208e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002080:	d202      	bcs.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002082:	2301      	movs	r3, #1
 8002084:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002086:	e033      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800208c:	e030      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002094:	d208      	bcs.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d102      	bne.n	80020a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800209e:	2303      	movs	r3, #3
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	e025      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e035      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020ae:	d90f      	bls.n	80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>

      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80020bc:	d902      	bls.n	80020c4 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	e015      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80020c4:	2301      	movs	r3, #1
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	e012      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	e00f      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020d6:	d109      	bne.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0xd4>

        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020de:	d102      	bne.n	80020e6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80020e0:	2301      	movs	r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	e004      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e001      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80020ec:	2301      	movs	r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 020f 	bic.w	r2, r3, #15
 80020f8:	4909      	ldr	r1, [pc, #36]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002100:	4b07      	ldr	r3, [pc, #28]	; (8002120 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	46020c00 	.word	0x46020c00
 8002120:	40022000 	.word	0x40022000

08002124 <__libc_init_array>:
 8002124:	b570      	push	{r4, r5, r6, lr}
 8002126:	4d0d      	ldr	r5, [pc, #52]	; (800215c <__libc_init_array+0x38>)
 8002128:	2600      	movs	r6, #0
 800212a:	4c0d      	ldr	r4, [pc, #52]	; (8002160 <__libc_init_array+0x3c>)
 800212c:	1b64      	subs	r4, r4, r5
 800212e:	10a4      	asrs	r4, r4, #2
 8002130:	42a6      	cmp	r6, r4
 8002132:	d109      	bne.n	8002148 <__libc_init_array+0x24>
 8002134:	4d0b      	ldr	r5, [pc, #44]	; (8002164 <__libc_init_array+0x40>)
 8002136:	2600      	movs	r6, #0
 8002138:	4c0b      	ldr	r4, [pc, #44]	; (8002168 <__libc_init_array+0x44>)
 800213a:	f000 f81f 	bl	800217c <_init>
 800213e:	1b64      	subs	r4, r4, r5
 8002140:	10a4      	asrs	r4, r4, #2
 8002142:	42a6      	cmp	r6, r4
 8002144:	d105      	bne.n	8002152 <__libc_init_array+0x2e>
 8002146:	bd70      	pop	{r4, r5, r6, pc}
 8002148:	f855 3b04 	ldr.w	r3, [r5], #4
 800214c:	3601      	adds	r6, #1
 800214e:	4798      	blx	r3
 8002150:	e7ee      	b.n	8002130 <__libc_init_array+0xc>
 8002152:	f855 3b04 	ldr.w	r3, [r5], #4
 8002156:	3601      	adds	r6, #1
 8002158:	4798      	blx	r3
 800215a:	e7f2      	b.n	8002142 <__libc_init_array+0x1e>
 800215c:	08002264 	.word	0x08002264
 8002160:	08002264 	.word	0x08002264
 8002164:	08002264 	.word	0x08002264
 8002168:	08002268 	.word	0x08002268

0800216c <memset>:
 800216c:	4402      	add	r2, r0
 800216e:	4603      	mov	r3, r0
 8002170:	4293      	cmp	r3, r2
 8002172:	d100      	bne.n	8002176 <memset+0xa>
 8002174:	4770      	bx	lr
 8002176:	f803 1b01 	strb.w	r1, [r3], #1
 800217a:	e7f9      	b.n	8002170 <memset+0x4>

0800217c <_init>:
 800217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217e:	bf00      	nop
 8002180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002182:	bc08      	pop	{r3}
 8002184:	469e      	mov	lr, r3
 8002186:	4770      	bx	lr

08002188 <_fini>:
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218a:	bf00      	nop
 800218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218e:	bc08      	pop	{r3}
 8002190:	469e      	mov	lr, r3
 8002192:	4770      	bx	lr
