
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019bf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  08019d88  08019d88  00029d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a82c  0801a82c  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a82c  0801a82c  0002a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a834  0801a834  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a834  0801a834  0002a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a838  0801a838  0002a838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0801a83c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016fc  200002c0  0801aafc  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200019bc  0801aafc  000319bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004970a  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000592a  00000000  00000000  000799fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002af0  00000000  00000000  0007f328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000028d0  00000000  00000000  00081e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003058a  00000000  00000000  000846e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029f0c  00000000  00000000  000b4c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f194  00000000  00000000  000deb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001edd12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ce50  00000000  00000000  001edd68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019d6c 	.word	0x08019d6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	08019d6c 	.word	0x08019d6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
{
	// TODO Auto-generated constructor stub

}
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	/* Initialize Virtual COM Port */
	BSP_COM_Init(COM1);
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f004 fe03 	bl	8005ba4 <BSP_COM_Init>

	/* Initialize Timer */
	BSP_IP_TIM_Init();
 8000f9e:	f001 fa87 	bl	80024b0 <MX_TIM3_Init>

	/* Configure Timer to run with desired algorithm frequency */
	TIM_Config(ALGO_FREQ);
 8000fa2:	2164      	movs	r1, #100	; 0x64
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 fbed 	bl	8001784 <_ZN14WobbleBoardApp10TIM_ConfigEm>

	InitInertialSensors();
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f856 	bl	800105c <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000fb0:	f000 fe76 	bl	8001ca0 <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 ff1a 	bl	8001dee <MotionFX_manager_MagCal_start>

	/* Test if calibration data are available */
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f014 f888 	bl	80150d4 <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000fc4:	7e3b      	ldrb	r3, [r7, #24]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d132      	bne.n	8001030 <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fce:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001058 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000fd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd6:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8000fda:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe2:	ee17 2a90 	vmov	r2, s15
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000fea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fee:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001058 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8000ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ff6:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 8000ffa:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001002:	ee17 2a90 	vmov	r2, s15
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	609a      	str	r2, [r3, #8]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800100a:	edd7 7a05 	vldr	s15, [r7, #20]
 800100e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001058 <_ZN14WobbleBoardApp4InitEv+0xc8>
 8001012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001016:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 800101a:	edd7 7a07 	vldr	s15, [r7, #28]
 800101e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001022:	ee17 2a90 	vmov	r2, s15
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	60da      	str	r2, [r3, #12]

		MagCalStatus = 1;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
	}

	DWT_Init();
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 fb11 	bl	8001658 <_ZN14WobbleBoardApp8DWT_InitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 8001036:	f000 fbe3 	bl	8001800 <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	Enable9AxisMotionFusion();
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 fb92 	bl	800176c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>

	StartDataStreaming();
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 fb77 	bl	800173c <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 800104e:	bf00      	nop
 8001050:	3720      	adds	r7, #32
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	43fa0000 	.word	0x43fa0000

0800105c <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 8001064:	f000 fcb4 	bl	80019d0 <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8001068:	f000 fcba 	bl	80019e0 <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 800106c:	f000 fcc0 	bl	80019f0 <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8001070:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8001088 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 8001074:	f000 fd03 	bl	8001a7e <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8001078:	2004      	movs	r0, #4
 800107a:	f000 fd0f 	bl	8001a9c <BSP_SENSOR_ACC_SetFullScale>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	42c80000 	.word	0x42c80000

0800108c <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001092:	af00      	add	r7, sp, #0
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	6018      	str	r0, [r3, #0]
//		}
//	}
//
//	HandleMSG((TMsg *)&msg_cmd);

	if (MagCalRequest == 1U)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	bf0c      	ite	eq
 80010a6:	2301      	moveq	r3, #1
 80010a8:	2300      	movne	r3, #0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d017      	beq.n	80010e0 <_ZN14WobbleBoardApp7ProcessEv+0x54>
	{
		MagCalRequest = 0;
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2200      	movs	r2, #0
 80010b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
		MagOffset.x = 0;
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	605a      	str	r2, [r3, #4]
		MagOffset.y = 0;
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
		MagOffset.z = 0;
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 80010da:	200a      	movs	r0, #10
 80010dc:	f000 fe87 	bl	8001dee <MotionFX_manager_MagCal_start>
	}

	// When the timer counter reaches 0 then read the
	// motion sensor data
	// TODO:  Figure out why the timer elapsed callback wasn't working
	if(__HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <_ZN14WobbleBoardApp7ProcessEv+0xcc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf0c      	ite	eq
 80010ea:	2301      	moveq	r3, #1
 80010ec:	2300      	movne	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d004      	beq.n	80010fe <_ZN14WobbleBoardApp7ProcessEv+0x72>
	{
		SensorReadRequest = 1;
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if (SensorReadRequest == 1U)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b01      	cmp	r3, #1
 800110a:	bf0c      	ite	eq
 800110c:	2301      	moveq	r3, #1
 800110e:	2300      	movne	r3, #0
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d01b      	beq.n	800114e <_ZN14WobbleBoardApp7ProcessEv+0xc2>
	{
		SensorReadRequest = 0;
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		// Write the motion sensor data to the terminal
		Accelero_Sensor_Handler();
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	f000 f81a 	bl	800115c <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEv>
		Gyro_Sensor_Handler();
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	f000 f83e 	bl	80011ac <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEv>
		Magneto_Sensor_Handler();
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	f000 f862 	bl	80011fc <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv>

		/* Sensor Fusion specific part */
		FX_Data_Handler();
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	f000 f912 	bl	8001364 <_ZN14WobbleBoardApp15FX_Data_HandlerEv>

		/* Send data stream */
		Init_Streaming_Header(&msg_dat);
 8001140:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4611      	mov	r1, r2
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	f000 fadd 	bl	8001708 <_ZN14WobbleBoardApp21Init_Streaming_HeaderEP4TMsg>
		// in FX_Data Handler and add 4 to that
		//msg_dat.Len = STREAMING_MSG_LENGTH;

		//UART_SendMsg(&msg_dat);
	}
}
 800114e:	bf00      	nop
 8001150:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000145c 	.word	0x2000145c

0800115c <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEv>:
//    SensorReadRequest = 1;
//  }
//}

void WobbleBoardApp::Accelero_Sensor_Handler()
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af02      	add	r7, sp, #8
 8001162:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3310      	adds	r3, #16
 8001168:	4618      	mov	r0, r3
 800116a:	f000 fc61 	bl	8001a30 <BSP_SENSOR_ACC_GetAxes>

//	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
//	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
//	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);

	snprintf(dataOut, MAX_BUF_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f103 0044 	add.w	r0, r3, #68	; 0x44
	             (int)AccValue.x, (int)AccValue.y, (int)AccValue.z);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6919      	ldr	r1, [r3, #16]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	687a      	ldr	r2, [r7, #4]
 800117e:	6992      	ldr	r2, [r2, #24]
	snprintf(dataOut, MAX_BUF_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 8001180:	9201      	str	r2, [sp, #4]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	460b      	mov	r3, r1
 8001186:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEv+0x48>)
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	f016 fccc 	bl	8017b28 <sniprintf>
    printf("%s", dataOut);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3344      	adds	r3, #68	; 0x44
 8001194:	4619      	mov	r1, r3
 8001196:	4804      	ldr	r0, [pc, #16]	; (80011a8 <_ZN14WobbleBoardApp23Accelero_Sensor_HandlerEv+0x4c>)
 8001198:	f016 fc5a 	bl	8017a50 <iprintf>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	08019d88 	.word	0x08019d88
 80011a8:	08019db4 	.word	0x08019db4

080011ac <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEv>:

void WobbleBoardApp::Gyro_Sensor_Handler()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af02      	add	r7, sp, #8
 80011b2:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	331c      	adds	r3, #28
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fc46 	bl	8001a4a <BSP_SENSOR_GYR_GetAxes>

//	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
//	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
//	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);

	snprintf(dataOut, MAX_BUF_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f103 0044 	add.w	r0, r3, #68	; 0x44
	             (int)GyrValue.x, (int)GyrValue.y, (int)GyrValue.z);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69d9      	ldr	r1, [r3, #28]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
	snprintf(dataOut, MAX_BUF_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	460b      	mov	r3, r1
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEv+0x48>)
 80011d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011dc:	f016 fca4 	bl	8017b28 <sniprintf>
    printf("%s", dataOut);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3344      	adds	r3, #68	; 0x44
 80011e4:	4619      	mov	r1, r3
 80011e6:	4804      	ldr	r0, [pc, #16]	; (80011f8 <_ZN14WobbleBoardApp19Gyro_Sensor_HandlerEv+0x4c>)
 80011e8:	f016 fc32 	bl	8017a50 <iprintf>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	08019db8 	.word	0x08019db8
 80011f8:	08019db4 	.word	0x08019db4

080011fc <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv>:

void WobbleBoardApp::Magneto_Sensor_Handler()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08e      	sub	sp, #56	; 0x38
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3328      	adds	r3, #40	; 0x28
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fc2b 	bl	8001a64 <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d16d      	bne.n	80012f2 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0xf6>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121a:	ee07 3a90 	vmov	s15, r3
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001354 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0x158>
 8001226:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122a:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	ee07 3a90 	vmov	s15, r3
 8001236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001354 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0x158>
 800123e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001242:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001252:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001354 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0x158>
 8001256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800125a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001268:	f103 020a 	add.w	r2, r3, #10
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	635a      	str	r2, [r3, #52]	; 0x34

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 8001270:	f107 020c 	add.w	r2, r7, #12
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4611      	mov	r1, r2
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fda8 	bl	8001dd0 <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 8001280:	7e3b      	ldrb	r3, [r7, #24]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d135      	bne.n	80012f2 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0xf6>
		{
			MagCalStatus = 1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 800128c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001290:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001358 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0x15c>
 8001294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001298:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 800129c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a4:	ee17 2a90 	vmov	r2, s15
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	605a      	str	r2, [r3, #4]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 80012ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001358 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0x15c>
 80012b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 80012bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c4:	ee17 2a90 	vmov	r2, s15
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 80012cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80012d0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001358 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0x15c>
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 80012dc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80012e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012e4:	ee17 2a90 	vmov	r2, s15
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	60da      	str	r2, [r3, #12]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f000 fd8a 	bl	8001e06 <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	1ad2      	subs	r2, r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	1ad2      	subs	r2, r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	1ad2      	subs	r2, r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	631a      	str	r2, [r3, #48]	; 0x30

//	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
//	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
//	Serialize_s32(&Msg->Data[35], MagValue.z, 4);

	snprintf(dataOut, MAX_BUF_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f103 0044 	add.w	r0, r3, #68	; 0x44
	             (int)MagValue.x, (int)MagValue.y, (int)MagValue.z);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6b12      	ldr	r2, [r2, #48]	; 0x30
	snprintf(dataOut, MAX_BUF_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	460b      	mov	r3, r1
 8001334:	4a09      	ldr	r2, [pc, #36]	; (800135c <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0x160>)
 8001336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800133a:	f016 fbf5 	bl	8017b28 <sniprintf>
    printf("%s", dataOut);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3344      	adds	r3, #68	; 0x44
 8001342:	4619      	mov	r1, r3
 8001344:	4806      	ldr	r0, [pc, #24]	; (8001360 <_ZN14WobbleBoardApp22Magneto_Sensor_HandlerEv+0x164>)
 8001346:	f016 fb83 	bl	8017a50 <iprintf>
}
 800134a:	bf00      	nop
 800134c:	3730      	adds	r7, #48	; 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	3b03126f 	.word	0x3b03126f
 8001358:	43fa0000 	.word	0x43fa0000
 800135c:	08019ddc 	.word	0x08019ddc
 8001360:	08019db4 	.word	0x08019db4

08001364 <_ZN14WobbleBoardApp15FX_Data_HandlerEv>:

void WobbleBoardApp::FX_Data_Handler()
{
 8001364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001368:	b0a5      	sub	sp, #148	; 0x94
 800136a:	af06      	add	r7, sp, #24
 800136c:	6078      	str	r0, [r7, #4]
	uint32_t elapsed_time_us = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	677b      	str	r3, [r7, #116]	; 0x74
	MFX_input_t data_in;
	MFX_input_t *pdata_in = &data_in;
 8001372:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001376:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t data_out;
	MFX_output_t *pdata_out = &data_out;
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	ee07 3a90 	vmov	s15, r3
 8001386:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800138a:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001634 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d0>
 800138e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001392:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a2:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001634 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d0>
 80013a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013aa:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ba:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001634 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d0>
 80013be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013c2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	/* Convert acceleration from [mg] to [g] */
	data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8001634 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d0>
 80013d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013da:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ea:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001634 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d0>
 80013ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013f2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	ee07 3a90 	vmov	s15, r3
 80013fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001402:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001634 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d0>
 8001406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8001638 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d4>
 800141e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001422:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001432:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001638 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d4>
 8001436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800143a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	ee07 3a90 	vmov	s15, r3
 8001446:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8001638 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d4>
 800144e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001452:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	/* Run Sensor Fusion algorithm */
	DWT_Start();
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f918 	bl	800168c <_ZN14WobbleBoardApp9DWT_StartEv>
	MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800145c:	ed9f 0a77 	vldr	s0, [pc, #476]	; 800163c <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2d8>
 8001460:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001462:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001464:	f000 fc74 	bl	8001d50 <MotionFX_manager_run>
	elapsed_time_us = DWT_Stop();
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f925 	bl	80016b8 <_ZN14WobbleBoardApp8DWT_StopEv>
 800146e:	6778      	str	r0, [r7, #116]	; 0x74
//	(void)memcpy(&Msg->Data[95], (void *) & (pdata_out->heading), sizeof(float));
//	(void)memcpy(&Msg->Data[99], (void *) & (pdata_out->headingErr), sizeof(float));
//
//	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);

	if(pdata_out != nullptr)
 8001470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80d8 	beq.w	8001628 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2c4>
	{
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 800147e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001480:	68db      	ldr	r3, [r3, #12]
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f860 	bl	8000548 <__aeabi_f2d>
 8001488:	4604      	mov	r4, r0
 800148a:	460d      	mov	r5, r1
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 800148c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800148e:	691b      	ldr	r3, [r3, #16]
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f859 	bl	8000548 <__aeabi_f2d>
 8001496:	4680      	mov	r8, r0
 8001498:	4689      	mov	r9, r1
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 800149a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800149c:	695b      	ldr	r3, [r3, #20]
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f852 	bl	8000548 <__aeabi_f2d>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014b0:	e9cd 4500 	strd	r4, r5, [sp]
 80014b4:	4a62      	ldr	r2, [pc, #392]	; (8001640 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2dc>)
 80014b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ba:	4630      	mov	r0, r6
 80014bc:	f016 fb34 	bl	8017b28 <sniprintf>
	    printf("%s", dataOut);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3344      	adds	r3, #68	; 0x44
 80014c4:	4619      	mov	r1, r3
 80014c6:	485f      	ldr	r0, [pc, #380]	; (8001644 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2e0>)
 80014c8:	f016 fac2 	bl	8017a50 <iprintf>

		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 80014d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014d4:	681b      	ldr	r3, [r3, #0]
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f836 	bl	8000548 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 80014e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014e2:	685b      	ldr	r3, [r3, #4]
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f82f 	bl	8000548 <__aeabi_f2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 80014ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014f0:	689b      	ldr	r3, [r3, #8]
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f828 	bl	8000548 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001500:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001504:	e9cd 4500 	strd	r4, r5, [sp]
 8001508:	4a4f      	ldr	r2, [pc, #316]	; (8001648 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2e4>)
 800150a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800150e:	4630      	mov	r0, r6
 8001510:	f016 fb0a 	bl	8017b28 <sniprintf>
	    printf("%s", dataOut);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3344      	adds	r3, #68	; 0x44
 8001518:	4619      	mov	r1, r3
 800151a:	484a      	ldr	r0, [pc, #296]	; (8001644 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2e0>)
 800151c:	f016 fa98 	bl	8017a50 <iprintf>

		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 8001526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001528:	69db      	ldr	r3, [r3, #28]
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff f80c 	bl	8000548 <__aeabi_f2d>
 8001530:	4604      	mov	r4, r0
 8001532:	460d      	mov	r5, r1
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 8001534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001536:	6a1b      	ldr	r3, [r3, #32]
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff f805 	bl	8000548 <__aeabi_f2d>
 800153e:	4680      	mov	r8, r0
 8001540:	4689      	mov	r9, r1
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 8001542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fffe 	bl	8000548 <__aeabi_f2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001554:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001558:	e9cd 4500 	strd	r4, r5, [sp]
 800155c:	4a3b      	ldr	r2, [pc, #236]	; (800164c <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2e8>)
 800155e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001562:	4630      	mov	r0, r6
 8001564:	f016 fae0 	bl	8017b28 <sniprintf>
	    printf("%s", dataOut);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3344      	adds	r3, #68	; 0x44
 800156c:	4619      	mov	r1, r3
 800156e:	4835      	ldr	r0, [pc, #212]	; (8001644 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2e0>)
 8001570:	f016 fa6e 	bl	8017a50 <iprintf>

		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 800157a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffe2 	bl	8000548 <__aeabi_f2d>
 8001584:	4604      	mov	r4, r0
 8001586:	460d      	mov	r5, r1
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 8001588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffdb 	bl	8000548 <__aeabi_f2d>
 8001592:	4680      	mov	r8, r0
 8001594:	4689      	mov	r9, r1
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 8001596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffd4 	bl	8000548 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015ac:	e9cd 4500 	strd	r4, r5, [sp]
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2dc>)
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b6:	4630      	mov	r0, r6
 80015b8:	f016 fab6 	bl	8017b28 <sniprintf>
	    printf("%s", dataOut);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3344      	adds	r3, #68	; 0x44
 80015c0:	4619      	mov	r1, r3
 80015c2:	4820      	ldr	r0, [pc, #128]	; (8001644 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2e0>)
 80015c4:	f016 fa44 	bl	8017a50 <iprintf>

		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f103 0444 	add.w	r4, r3, #68	; 0x44
				pdata_out->heading);
 80015ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffb8 	bl	8000548 <__aeabi_f2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	e9cd 2300 	strd	r2, r3, [sp]
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2ec>)
 80015e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e6:	4620      	mov	r0, r4
 80015e8:	f016 fa9e 	bl	8017b28 <sniprintf>
	    printf("%s", dataOut);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3344      	adds	r3, #68	; 0x44
 80015f0:	4619      	mov	r1, r3
 80015f2:	4814      	ldr	r0, [pc, #80]	; (8001644 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2e0>)
 80015f4:	f016 fa2c 	bl	8017a50 <iprintf>

		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f103 0444 	add.w	r4, r3, #68	; 0x44
				pdata_out->headingErr);
 80015fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		snprintf(dataOut, MAX_BUF_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ffa0 	bl	8000548 <__aeabi_f2d>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	e9cd 2300 	strd	r2, r3, [sp]
 8001610:	4a10      	ldr	r2, [pc, #64]	; (8001654 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2f0>)
 8001612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001616:	4620      	mov	r0, r4
 8001618:	f016 fa86 	bl	8017b28 <sniprintf>
	    printf("%s", dataOut);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3344      	adds	r3, #68	; 0x44
 8001620:	4619      	mov	r1, r3
 8001622:	4808      	ldr	r0, [pc, #32]	; (8001644 <_ZN14WobbleBoardApp15FX_Data_HandlerEv+0x2e0>)
 8001624:	f016 fa14 	bl	8017a50 <iprintf>
	}
}
 8001628:	bf00      	nop
 800162a:	377c      	adds	r7, #124	; 0x7c
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001632:	bf00      	nop
 8001634:	3a83126f 	.word	0x3a83126f
 8001638:	3b03126f 	.word	0x3b03126f
 800163c:	3c23d70a 	.word	0x3c23d70a
 8001640:	08019e08 	.word	0x08019e08
 8001644:	08019db4 	.word	0x08019db4
 8001648:	08019e40 	.word	0x08019e40
 800164c:	08019e78 	.word	0x08019e78
 8001650:	08019eac 	.word	0x08019eac
 8001654:	08019ecc 	.word	0x08019ecc

08001658 <_ZN14WobbleBoardApp8DWT_InitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWT_Init()
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <_ZN14WobbleBoardApp8DWT_InitEv+0x2c>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <_ZN14WobbleBoardApp8DWT_InitEv+0x2c>)
 8001666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800166a:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <_ZN14WobbleBoardApp8DWT_InitEv+0x30>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <_ZN14WobbleBoardApp8DWT_InitEv+0x30>)
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6013      	str	r3, [r2, #0]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000edf0 	.word	0xe000edf0
 8001688:	e0001000 	.word	0xe0001000

0800168c <_ZN14WobbleBoardApp9DWT_StartEv>:

void WobbleBoardApp::DWT_Start()
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <_ZN14WobbleBoardApp9DWT_StartEv+0x28>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e0001000 	.word	0xe0001000

080016b8 <_ZN14WobbleBoardApp8DWT_StopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWT_Stop()
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 80016d4:	4b09      	ldr	r3, [pc, #36]	; (80016fc <_ZN14WobbleBoardApp8DWT_StopEv+0x44>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <_ZN14WobbleBoardApp8DWT_StopEv+0x48>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a09      	ldr	r2, [pc, #36]	; (8001704 <_ZN14WobbleBoardApp8DWT_StopEv+0x4c>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	0c9b      	lsrs	r3, r3, #18
 80016e6:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e0001000 	.word	0xe0001000
 8001700:	2000000c 	.word	0x2000000c
 8001704:	431bde83 	.word	0x431bde83

08001708 <_ZN14WobbleBoardApp21Init_Streaming_HeaderEP4TMsg>:

void WobbleBoardApp::Init_Streaming_Header(TMsg* Msg)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
	Msg->Data[0] = DataStreamingDest;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001718:	b2da      	uxtb	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	711a      	strb	r2, [r3, #4]
	Msg->Data[1] = DEV_ADDR;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2232      	movs	r2, #50	; 0x32
 8001722:	715a      	strb	r2, [r3, #5]
	Msg->Data[2] = CMD_Start_Data_Streaming;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	2208      	movs	r2, #8
 8001728:	719a      	strb	r2, [r3, #6]
	Msg->Len = 3;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2203      	movs	r2, #3
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 8001744:	f000 f95c 	bl	8001a00 <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 8001748:	f000 f962 	bl	8001a10 <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 800174c:	f000 f968 	bl	8001a20 <BSP_SENSOR_MAG_Enable>

	HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x2c>)
 8001752:	f007 fe71 	bl	8009438 <HAL_TIM_Base_Start_IT>

	DataLoggerActive = 1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000145c 	.word	0x2000145c

0800176c <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:
	MotionFX_manager_stop_9X();
	MotionFX_manager_start_6X();
}

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 8001774:	f000 fb18 	bl	8001da8 <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 8001778:	f000 fb20 	bl	8001dbc <MotionFX_manager_start_9X>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_ZN14WobbleBoardApp10TIM_ConfigEm>:

void WobbleBoardApp::TIM_Config(uint32_t Freq)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800178e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001792:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x70>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <_ZN14WobbleBoardApp10TIM_ConfigEm+0x74>)
 800179a:	fba2 2303 	umull	r2, r3, r2, r3
 800179e:	09db      	lsrs	r3, r3, #7
 80017a0:	3b01      	subs	r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 80017a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ae:	3b01      	subs	r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80017d0:	480a      	ldr	r0, [pc, #40]	; (80017fc <_ZN14WobbleBoardApp10TIM_ConfigEm+0x78>)
 80017d2:	f007 fdd9 	bl	8009388 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	bf14      	ite	ne
 80017dc:	2301      	movne	r3, #1
 80017de:	2300      	moveq	r3, #0
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <_ZN14WobbleBoardApp10TIM_ConfigEm+0x66>
  {
    Error_Handler();
 80017e6:	f000 fa55 	bl	8001c94 <Error_Handler>
  }
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	10624dd3 	.word	0x10624dd3
 80017fc:	2000145c 	.word	0x2000145c

08001800 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <UART_StartReceiveMsg+0x2c>)
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <UART_StartReceiveMsg+0x30>)
 8001808:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <UART_StartReceiveMsg+0x2c>)
 800180c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001810:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <UART_StartReceiveMsg+0x2c>)
 8001816:	2200      	movs	r2, #0
 8001818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 800181c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001820:	4903      	ldr	r1, [pc, #12]	; (8001830 <UART_StartReceiveMsg+0x30>)
 8001822:	4802      	ldr	r0, [pc, #8]	; (800182c <UART_StartReceiveMsg+0x2c>)
 8001824:	f008 fb58 	bl	8009ed8 <HAL_UART_Receive_DMA>
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200014fc 	.word	0x200014fc
 8001830:	200011c0 	.word	0x200011c0

08001834 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <MX_CRC_Init+0x3c>)
 800183a:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <MX_CRC_Init+0x40>)
 800183c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_CRC_Init+0x3c>)
 8001840:	2200      	movs	r2, #0
 8001842:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001844:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <MX_CRC_Init+0x3c>)
 8001846:	2200      	movs	r2, #0
 8001848:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_CRC_Init+0x3c>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <MX_CRC_Init+0x3c>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_CRC_Init+0x3c>)
 8001858:	2201      	movs	r2, #1
 800185a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800185c:	4804      	ldr	r0, [pc, #16]	; (8001870 <MX_CRC_Init+0x3c>)
 800185e:	f004 fc29 	bl	80060b4 <HAL_CRC_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001868:	f000 fa14 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200013c8 	.word	0x200013c8
 8001874:	40023000 	.word	0x40023000

08001878 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_CRC_MspInit+0x38>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10b      	bne.n	80018a2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_CRC_MspInit+0x3c>)
 800188c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_CRC_MspInit+0x3c>)
 8001890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001894:	6493      	str	r3, [r2, #72]	; 0x48
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_CRC_MspInit+0x3c>)
 8001898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023000 	.word	0x40023000
 80018b4:	40021000 	.word	0x40021000

080018b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_DMA_Init+0x38>)
 80018c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <MX_DMA_Init+0x38>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6493      	str	r3, [r2, #72]	; 0x48
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_DMA_Init+0x38>)
 80018cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2010      	movs	r0, #16
 80018dc:	f004 fbb3 	bl	8006046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80018e0:	2010      	movs	r0, #16
 80018e2:	f004 fbcc 	bl	800607e <HAL_NVIC_EnableIRQ>

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000

080018f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <MX_GPIO_Init+0xd4>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a2e      	ldr	r2, [pc, #184]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001910:	f043 0304 	orr.w	r3, r3, #4
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <MX_GPIO_Init+0xd4>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_GPIO_Init+0xd4>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2120      	movs	r1, #32
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f005 f91f 	bl	8006bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8001976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800197c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	480f      	ldr	r0, [pc, #60]	; (80019cc <MX_GPIO_Init+0xd8>)
 800198e:	f004 fe73 	bl	8006678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001992:	2320      	movs	r3, #32
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f004 fe64 	bl	8006678 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2028      	movs	r0, #40	; 0x28
 80019b6:	f004 fb46 	bl	8006046 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019ba:	2028      	movs	r0, #40	; 0x28
 80019bc:	f004 fb5f 	bl	800607e <HAL_NVIC_EnableIRQ>

}
 80019c0:	bf00      	nop
 80019c2:	3728      	adds	r7, #40	; 0x28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000800 	.word	0x48000800

080019d0 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 80019d4:	2102      	movs	r1, #2
 80019d6:	2000      	movs	r0, #0
 80019d8:	f003 fcd4 	bl	8005384 <IKS01A2_MOTION_SENSOR_Init>
}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}

080019e0 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 80019e4:	2101      	movs	r1, #1
 80019e6:	2000      	movs	r0, #0
 80019e8:	f003 fccc 	bl	8005384 <IKS01A2_MOTION_SENSOR_Init>
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 80019f4:	2104      	movs	r1, #4
 80019f6:	2002      	movs	r0, #2
 80019f8:	f003 fcc4 	bl	8005384 <IKS01A2_MOTION_SENSOR_Init>
}
 80019fc:	bf00      	nop
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001a04:	2102      	movs	r1, #2
 8001a06:	2000      	movs	r0, #0
 8001a08:	f003 fdb8 	bl	800557c <IKS01A2_MOTION_SENSOR_Enable>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001a14:	2101      	movs	r1, #1
 8001a16:	2000      	movs	r0, #0
 8001a18:	f003 fdb0 	bl	800557c <IKS01A2_MOTION_SENSOR_Enable>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001a24:	2104      	movs	r1, #4
 8001a26:	2002      	movs	r0, #2
 8001a28:	f003 fda8 	bl	800557c <IKS01A2_MOTION_SENSOR_Enable>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f003 fddf 	bl	8005600 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	2101      	movs	r1, #1
 8001a56:	2000      	movs	r0, #0
 8001a58:	f003 fdd2 	bl	8005600 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	2104      	movs	r1, #4
 8001a70:	2002      	movs	r0, #2
 8001a72:	f003 fdc5 	bl	8005600 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8001a88:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f003 fdfa 	bl	8005688 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f003 fe33 	bl	8005714 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	226e      	movs	r2, #110	; 0x6e
 8001ac2:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	2277      	movs	r2, #119	; 0x77
 8001aca:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3302      	adds	r3, #2
 8001ad0:	2275      	movs	r2, #117	; 0x75
 8001ad2:	701a      	strb	r2, [r3, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	226e      	movs	r2, #110	; 0x6e
 8001aec:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3301      	adds	r3, #1
 8001af2:	2277      	movs	r2, #119	; 0x77
 8001af4:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3302      	adds	r3, #2
 8001afa:	2275      	movs	r2, #117	; 0x75
 8001afc:	701a      	strb	r2, [r3, #0]
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	226e      	movs	r2, #110	; 0x6e
 8001b16:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	2265      	movs	r2, #101	; 0x65
 8001b1e:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3302      	adds	r3, #2
 8001b24:	2275      	movs	r2, #117	; 0x75
 8001b26:	701a      	strb	r2, [r3, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b3a:	f004 f92d 	bl	8005d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b3e:	f000 f819 	bl	8001b74 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b42:	f7ff fed7 	bl	80018f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b46:	f7ff feb7 	bl	80018b8 <MX_DMA_Init>
  MX_CRC_Init();
 8001b4a:	f7ff fe73 	bl	8001834 <MX_CRC_Init>
  MX_RTC_Init();
 8001b4e:	f000 f967 	bl	8001e20 <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  WobbleBoardApp* wobbleBoard = new WobbleBoardApp();
 8001b52:	f44f 70a2 	mov.w	r0, #324	; 0x144
 8001b56:	f013 faf9 	bl	801514c <_Znwj>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461c      	mov	r4, r3
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff f9ee 	bl	8000f40 <_ZN14WobbleBoardAppC1Ev>
 8001b64:	607c      	str	r4, [r7, #4]
  wobbleBoard->Init();
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fa12 	bl	8000f90 <_ZN14WobbleBoardApp4InitEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //MX_MEMS_Process();
	  wobbleBoard->Process();
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fa8d 	bl	800108c <_ZN14WobbleBoardApp7ProcessEv>
 8001b72:	e7fb      	b.n	8001b6c <main+0x38>

08001b74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b096      	sub	sp, #88	; 0x58
 8001b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	2244      	movs	r2, #68	; 0x44
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f015 fa48 	bl	8017018 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
 8001b94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b9a:	f005 fea1 	bl	80078e0 <HAL_PWREx_ControlVoltageScaling>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf14      	ite	ne
 8001ba4:	2301      	movne	r3, #1
 8001ba6:	2300      	moveq	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8001bae:	f000 f871 	bl	8001c94 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001bd0:	230a      	movs	r3, #10
 8001bd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001bd4:	2307      	movs	r3, #7
 8001bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	4618      	mov	r0, r3
 8001be6:	f005 fed1 	bl	800798c <HAL_RCC_OscConfig>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf14      	ite	ne
 8001bf0:	2301      	movne	r3, #1
 8001bf2:	2300      	moveq	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8001bfa:	f000 f84b 	bl	8001c94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bfe:	230f      	movs	r3, #15
 8001c00:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c02:	2303      	movs	r3, #3
 8001c04:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c12:	463b      	mov	r3, r7
 8001c14:	2104      	movs	r1, #4
 8001c16:	4618      	mov	r0, r3
 8001c18:	f006 fa9e 	bl	8008158 <HAL_RCC_ClockConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bf14      	ite	ne
 8001c22:	2301      	movne	r3, #1
 8001c24:	2300      	moveq	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <_Z18SystemClock_Configv+0xbc>
  {
    Error_Handler();
 8001c2c:	f000 f832 	bl	8001c94 <Error_Handler>
  }
}
 8001c30:	bf00      	nop
 8001c32:	3758      	adds	r7, #88	; 0x58
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c48:	d115      	bne.n	8001c76 <HAL_GPIO_EXTI_Callback+0x3e>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001c4c:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x50>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf0c      	ite	eq
 8001c56:	2301      	moveq	r3, #1
 8001c58:	2300      	movne	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d005      	beq.n	8001c6c <HAL_GPIO_EXTI_Callback+0x34>
		{
			iIsUserCalibrationLEDOn = 1;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x50>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x54>)
 8001c68:	60fb      	str	r3, [r7, #12]
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 8001c6a:	e004      	b.n	8001c76 <HAL_GPIO_EXTI_Callback+0x3e>
			iIsUserCalibrationLEDOn = 0;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 8001c72:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c74:	60fb      	str	r3, [r7, #12]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	08019ef4 	.word	0x08019ef4
 8001c88:	2000072c 	.word	0x2000072c
 8001c8c:	08019ef8 	.word	0x08019ef8
 8001c90:	08019f18 	.word	0x08019f18

08001c94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c98:	b672      	cpsid	i
}
 8001c9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <Error_Handler+0x8>
	...

08001ca0 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8001ca4:	f012 fc98 	bl	80145d8 <MotionFX_GetStateSize>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8001cae:	d901      	bls.n	8001cb4 <MotionFX_manager_init+0x14>
    Error_Handler();
 8001cb0:	f7ff fff0 	bl	8001c94 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8001cb4:	4821      	ldr	r0, [pc, #132]	; (8001d3c <MotionFX_manager_init+0x9c>)
 8001cb6:	f012 fc93 	bl	80145e0 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8001cba:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481e      	ldr	r0, [pc, #120]	; (8001d3c <MotionFX_manager_init+0x9c>)
 8001cc2:	f012 fd71 	bl	80147a8 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	331d      	adds	r3, #29
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fef2 	bl	8001ab6 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	3321      	adds	r3, #33	; 0x21
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff01 	bl	8001ae0 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	3325      	adds	r3, #37	; 0x25
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff10 	bl	8001b0a <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <MotionFX_manager_init+0xa4>)
 8001cf0:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <MotionFX_manager_init+0xa8>)
 8001cf8:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a13      	ldr	r2, [pc, #76]	; (8001d4c <MotionFX_manager_init+0xac>)
 8001d00:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2201      	movs	r2, #1
 8001d12:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <MotionFX_manager_init+0xa0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4619      	mov	r1, r3
 8001d22:	4806      	ldr	r0, [pc, #24]	; (8001d3c <MotionFX_manager_init+0x9c>)
 8001d24:	f012 fcf6 	bl	8014714 <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MotionFX_manager_init+0x9c>)
 8001d2c:	f012 fd78 	bl	8014820 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8001d30:	2100      	movs	r1, #0
 8001d32:	4802      	ldr	r0, [pc, #8]	; (8001d3c <MotionFX_manager_init+0x9c>)
 8001d34:	f012 fd94 	bl	8014860 <MotionFX_enable_9X>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000764 	.word	0x20000764
 8001d40:	20000004 	.word	0x20000004
 8001d44:	3ac88a48 	.word	0x3ac88a48
 8001d48:	3b83126f 	.word	0x3b83126f
 8001d4c:	3b449ba6 	.word	0x3b449ba6

08001d50 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MotionFX_manager_run+0x4c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MotionFX_manager_run+0x50>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d10e      	bne.n	8001d88 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MotionFX_manager_run+0x54>)
 8001d72:	f012 fda5 	bl	80148c0 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	9200      	str	r2, [sp, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	4808      	ldr	r0, [pc, #32]	; (8001da4 <MotionFX_manager_run+0x54>)
 8001d82:	f012 fd8d 	bl	80148a0 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 8001d86:	e004      	b.n	8001d92 <MotionFX_manager_run+0x42>
    discardedCount++;
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <MotionFX_manager_run+0x4c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <MotionFX_manager_run+0x4c>)
 8001d90:	6013      	str	r3, [r2, #0]
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000760 	.word	0x20000760
 8001da0:	20000008 	.word	0x20000008
 8001da4:	20000764 	.word	0x20000764

08001da8 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8001dac:	2100      	movs	r1, #0
 8001dae:	4802      	ldr	r0, [pc, #8]	; (8001db8 <MotionFX_manager_stop_6X+0x10>)
 8001db0:	f012 fd36 	bl	8014820 <MotionFX_enable_6X>
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000764 	.word	0x20000764

08001dbc <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4802      	ldr	r0, [pc, #8]	; (8001dcc <MotionFX_manager_start_9X+0x10>)
 8001dc4:	f012 fd4c 	bl	8014860 <MotionFX_enable_9X>
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000764 	.word	0x20000764

08001dd0 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f012 ff58 	bl	8014c90 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f013 f977 	bl	80150d4 <MotionFX_MagCal_getParams>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 8001df6:	2101      	movs	r1, #1
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f012 feb3 	bl	8014b64 <MotionFX_MagCal_init>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f012 fea7 	bl	8014b64 <MotionFX_MagCal_init>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e38:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e3a:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <MX_RTC_Init+0xb4>)
 8001e3c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e3e:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e46:	227f      	movs	r2, #127	; 0x7f
 8001e48:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e4c:	22ff      	movs	r2, #255	; 0xff
 8001e4e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e68:	4819      	ldr	r0, [pc, #100]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e6a:	f007 f837 	bl	8008edc <HAL_RTC_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001e74:	f7ff ff0e 	bl	8001c94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4619      	mov	r1, r3
 8001e92:	480f      	ldr	r0, [pc, #60]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001e94:	f007 f89d 	bl	8008fd2 <HAL_RTC_SetTime>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001e9e:	f7ff fef9 	bl	8001c94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_RTC_Init+0xb0>)
 8001eba:	f007 f927 	bl	800910c <HAL_RTC_SetDate>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001ec4:	f7ff fee6 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200013ec 	.word	0x200013ec
 8001ed4:	40002800 	.word	0x40002800

08001ed8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b0a4      	sub	sp, #144	; 0x90
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ee0:	f107 0308 	add.w	r3, r7, #8
 8001ee4:	2288      	movs	r2, #136	; 0x88
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f015 f895 	bl	8017018 <memset>
  if(rtcHandle->Instance==RTC)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <HAL_RTC_MspInit+0x5c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d118      	bne.n	8001f2a <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 fb2a 	bl	8008564 <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f16:	f7ff febd 	bl	8001c94 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_RTC_MspInit+0x60>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <HAL_RTC_MspInit+0x60>)
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3790      	adds	r7, #144	; 0x90
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40002800 	.word	0x40002800
 8001f38:	40021000 	.word	0x40021000

08001f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_MspInit+0x44>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f46:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <HAL_MspInit+0x44>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_MspInit+0x44>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_MspInit+0x44>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_MspInit+0x44>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6593      	str	r3, [r2, #88]	; 0x58
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_MspInit+0x44>)
 8001f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000

08001f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <NMI_Handler+0x4>

08001f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <HardFault_Handler+0x4>

08001f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <MemManage_Handler+0x4>

08001f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f9a:	e7fe      	b.n	8001f9a <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd0:	f003 ff3e 	bl	8005e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA1_Channel6_IRQHandler+0x10>)
 8001fde:	f004 fa6b 	bl	80064b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200014b4 	.word	0x200014b4

08001fec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <TIM3_IRQHandler+0x10>)
 8001ff2:	f007 fa91 	bl	8009518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000145c 	.word	0x2000145c

08002000 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8002004:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002008:	f004 fdec 	bl	8006be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <BSP_I2C1_Init+0x70>)
 800201c:	4a19      	ldr	r2, [pc, #100]	; (8002084 <BSP_I2C1_Init+0x74>)
 800201e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <BSP_I2C1_Init+0x78>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	4918      	ldr	r1, [pc, #96]	; (8002088 <BSP_I2C1_Init+0x78>)
 8002028:	600a      	str	r2, [r1, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d122      	bne.n	8002074 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800202e:	4814      	ldr	r0, [pc, #80]	; (8002080 <BSP_I2C1_Init+0x70>)
 8002030:	f005 f8f0 	bl	8007214 <HAL_I2C_GetState>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11c      	bne.n	8002074 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800203a:	4811      	ldr	r0, [pc, #68]	; (8002080 <BSP_I2C1_Init+0x70>)
 800203c:	f000 f8fe 	bl	800223c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d116      	bne.n	8002074 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8002046:	480e      	ldr	r0, [pc, #56]	; (8002080 <BSP_I2C1_Init+0x70>)
 8002048:	f000 f8b4 	bl	80021b4 <MX_I2C1_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002052:	f06f 0307 	mvn.w	r3, #7
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	e00c      	b.n	8002074 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800205a:	2100      	movs	r1, #0
 800205c:	4808      	ldr	r0, [pc, #32]	; (8002080 <BSP_I2C1_Init+0x70>)
 800205e:	f005 fb99 	bl	8007794 <HAL_I2CEx_ConfigAnalogFilter>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002068:	f06f 0307 	mvn.w	r3, #7
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	e001      	b.n	8002074 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8002070:	2300      	movs	r3, #0
 8002072:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20001410 	.word	0x20001410
 8002084:	40005400 	.word	0x40005400
 8002088:	200010e4 	.word	0x200010e4

0800208c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002092:	2300      	movs	r3, #0
 8002094:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8002096:	4b0f      	ldr	r3, [pc, #60]	; (80020d4 <BSP_I2C1_DeInit+0x48>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d014      	beq.n	80020c8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <BSP_I2C1_DeInit+0x48>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <BSP_I2C1_DeInit+0x48>)
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <BSP_I2C1_DeInit+0x48>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10b      	bne.n	80020c8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80020b0:	4809      	ldr	r0, [pc, #36]	; (80020d8 <BSP_I2C1_DeInit+0x4c>)
 80020b2:	f000 f909 	bl	80022c8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80020b6:	4808      	ldr	r0, [pc, #32]	; (80020d8 <BSP_I2C1_DeInit+0x4c>)
 80020b8:	f004 fe3b 	bl	8006d32 <HAL_I2C_DeInit>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80020c2:	f06f 0307 	mvn.w	r3, #7
 80020c6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80020c8:	687b      	ldr	r3, [r7, #4]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200010e4 	.word	0x200010e4
 80020d8:	20001410 	.word	0x20001410

080020dc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af04      	add	r7, sp, #16
 80020e2:	60ba      	str	r2, [r7, #8]
 80020e4:	461a      	mov	r2, r3
 80020e6:	4603      	mov	r3, r0
 80020e8:	81fb      	strh	r3, [r7, #14]
 80020ea:	460b      	mov	r3, r1
 80020ec:	81bb      	strh	r3, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80020f6:	89ba      	ldrh	r2, [r7, #12]
 80020f8:	89f9      	ldrh	r1, [r7, #14]
 80020fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fe:	9302      	str	r3, [sp, #8]
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	9301      	str	r3, [sp, #4]
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2301      	movs	r3, #1
 800210a:	480c      	ldr	r0, [pc, #48]	; (800213c <BSP_I2C1_WriteReg+0x60>)
 800210c:	f004 fe54 	bl	8006db8 <HAL_I2C_Mem_Write>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002116:	4809      	ldr	r0, [pc, #36]	; (800213c <BSP_I2C1_WriteReg+0x60>)
 8002118:	f005 f88a 	bl	8007230 <HAL_I2C_GetError>
 800211c:	4603      	mov	r3, r0
 800211e:	2b04      	cmp	r3, #4
 8002120:	d103      	bne.n	800212a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002122:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	e002      	b.n	8002130 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800212a:	f06f 0303 	mvn.w	r3, #3
 800212e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002130:	697b      	ldr	r3, [r7, #20]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20001410 	.word	0x20001410

08002140 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af04      	add	r7, sp, #16
 8002146:	60ba      	str	r2, [r7, #8]
 8002148:	461a      	mov	r2, r3
 800214a:	4603      	mov	r3, r0
 800214c:	81fb      	strh	r3, [r7, #14]
 800214e:	460b      	mov	r3, r1
 8002150:	81bb      	strh	r3, [r7, #12]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800215a:	89ba      	ldrh	r2, [r7, #12]
 800215c:	89f9      	ldrh	r1, [r7, #14]
 800215e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002162:	9302      	str	r3, [sp, #8]
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	480c      	ldr	r0, [pc, #48]	; (80021a0 <BSP_I2C1_ReadReg+0x60>)
 8002170:	f004 ff36 	bl	8006fe0 <HAL_I2C_Mem_Read>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00c      	beq.n	8002194 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800217a:	4809      	ldr	r0, [pc, #36]	; (80021a0 <BSP_I2C1_ReadReg+0x60>)
 800217c:	f005 f858 	bl	8007230 <HAL_I2C_GetError>
 8002180:	4603      	mov	r3, r0
 8002182:	2b04      	cmp	r3, #4
 8002184:	d103      	bne.n	800218e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002186:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e002      	b.n	8002194 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800218e:	f06f 0303 	mvn.w	r3, #3
 8002192:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002194:	697b      	ldr	r3, [r7, #20]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20001410 	.word	0x20001410

080021a4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80021a8:	f003 fe66 	bl	8005e78 <HAL_GetTick>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <MX_I2C1_Init+0x80>)
 80021c4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x10909CEC;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <MX_I2C1_Init+0x84>)
 80021ca:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2201      	movs	r2, #1
 80021d6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f004 fd0c 	bl	8006c14 <HAL_I2C_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002206:	2100      	movs	r1, #0
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f005 fac3 	bl	8007794 <HAL_I2CEx_ConfigAnalogFilter>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002218:	2100      	movs	r1, #0
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f005 fb05 	bl	800782a <HAL_I2CEx_ConfigDigitalFilter>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800222a:	7bfb      	ldrb	r3, [r7, #15]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3710      	adds	r7, #16
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40005400 	.word	0x40005400
 8002238:	10909cec 	.word	0x10909cec

0800223c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <I2C1_MspInit+0x84>)
 8002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002248:	4a1d      	ldr	r2, [pc, #116]	; (80022c0 <I2C1_MspInit+0x84>)
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002250:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <I2C1_MspInit+0x84>)
 8002252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	613b      	str	r3, [r7, #16]
 800225a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800225c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002262:	2312      	movs	r3, #18
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800226e:	2304      	movs	r3, #4
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	4812      	ldr	r0, [pc, #72]	; (80022c4 <I2C1_MspInit+0x88>)
 800227a:	f004 f9fd 	bl	8006678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800227e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002284:	2312      	movs	r3, #18
 8002286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002290:	2304      	movs	r3, #4
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	480a      	ldr	r0, [pc, #40]	; (80022c4 <I2C1_MspInit+0x88>)
 800229c:	f004 f9ec 	bl	8006678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <I2C1_MspInit+0x84>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <I2C1_MspInit+0x84>)
 80022a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022aa:	6593      	str	r3, [r2, #88]	; 0x58
 80022ac:	4b04      	ldr	r3, [pc, #16]	; (80022c0 <I2C1_MspInit+0x84>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80022b8:	bf00      	nop
 80022ba:	3728      	adds	r7, #40	; 0x28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48000400 	.word	0x48000400

080022c8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <I2C1_MspDeInit+0x30>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <I2C1_MspDeInit+0x30>)
 80022d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022da:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80022dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022e0:	4806      	ldr	r0, [pc, #24]	; (80022fc <I2C1_MspDeInit+0x34>)
 80022e2:	f004 fb73 	bl	80069cc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80022e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022ea:	4804      	ldr	r0, [pc, #16]	; (80022fc <I2C1_MspDeInit+0x34>)
 80022ec:	f004 fb6e 	bl	80069cc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80022f0:	bf00      	nop
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	48000400 	.word	0x48000400

08002300 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
	return 1;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <_kill>:

int _kill(int pid, int sig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800231a:	f014 fe3d 	bl	8016f98 <__errno>
 800231e:	4603      	mov	r3, r0
 8002320:	2216      	movs	r2, #22
 8002322:	601a      	str	r2, [r3, #0]
	return -1;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_exit>:

void _exit (int status)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ffe7 	bl	8002310 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002342:	e7fe      	b.n	8002342 <_exit+0x12>

08002344 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e00a      	b.n	800236c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002356:	f3af 8000 	nop.w
 800235a:	4601      	mov	r1, r0
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	60ba      	str	r2, [r7, #8]
 8002362:	b2ca      	uxtb	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	dbf0      	blt.n	8002356 <_read+0x12>
	}

return len;
 8002374:	687b      	ldr	r3, [r7, #4]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e009      	b.n	80023a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f003 fc75 	bl	8005c88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	3301      	adds	r3, #1
 80023a2:	617b      	str	r3, [r7, #20]
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	dbf1      	blt.n	8002390 <_write+0x12>
	}
	return len;
 80023ac:	687b      	ldr	r3, [r7, #4]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <_close>:

int _close(int file)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b083      	sub	sp, #12
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
	return -1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023de:	605a      	str	r2, [r3, #4]
	return 0;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_isatty>:

int _isatty(int file)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
	return 1;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
	return 0;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
	...

08002420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <_sbrk+0x5c>)
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <_sbrk+0x60>)
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <_sbrk+0x64>)
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <_sbrk+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	429a      	cmp	r2, r3
 800244e:	d207      	bcs.n	8002460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002450:	f014 fda2 	bl	8016f98 <__errno>
 8002454:	4603      	mov	r3, r0
 8002456:	220c      	movs	r2, #12
 8002458:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	e009      	b.n	8002474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <_sbrk+0x64>)
 8002470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20018000 	.word	0x20018000
 8002480:	00000400 	.word	0x00000400
 8002484:	200010e8 	.word	0x200010e8
 8002488:	200019c0 	.word	0x200019c0

0800248c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002490:	4b06      	ldr	r3, [pc, #24]	; (80024ac <SystemInit+0x20>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	4a05      	ldr	r2, [pc, #20]	; (80024ac <SystemInit+0x20>)
 8002498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800249c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b6:	f107 0310 	add.w	r3, r7, #16
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <MX_TIM3_Init+0x94>)
 80024d0:	4a1d      	ldr	r2, [pc, #116]	; (8002548 <MX_TIM3_Init+0x98>)
 80024d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <MX_TIM3_Init+0x94>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_TIM3_Init+0x94>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <MX_TIM3_Init+0x94>)
 80024e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <MX_TIM3_Init+0x94>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <MX_TIM3_Init+0x94>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024f4:	4813      	ldr	r0, [pc, #76]	; (8002544 <MX_TIM3_Init+0x94>)
 80024f6:	f006 ff47 	bl	8009388 <HAL_TIM_Base_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002500:	f7ff fbc8 	bl	8001c94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002508:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800250a:	f107 0310 	add.w	r3, r7, #16
 800250e:	4619      	mov	r1, r3
 8002510:	480c      	ldr	r0, [pc, #48]	; (8002544 <MX_TIM3_Init+0x94>)
 8002512:	f007 f920 	bl	8009756 <HAL_TIM_ConfigClockSource>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800251c:	f7ff fbba 	bl	8001c94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	4619      	mov	r1, r3
 800252c:	4805      	ldr	r0, [pc, #20]	; (8002544 <MX_TIM3_Init+0x94>)
 800252e:	f007 fb41 	bl	8009bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002538:	f7ff fbac 	bl	8001c94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	3720      	adds	r7, #32
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	2000145c 	.word	0x2000145c
 8002548:	40000400 	.word	0x40000400

0800254c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0d      	ldr	r2, [pc, #52]	; (8002590 <HAL_TIM_Base_MspInit+0x44>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d113      	bne.n	8002586 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_TIM_Base_MspInit+0x48>)
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <HAL_TIM_Base_MspInit+0x48>)
 8002564:	f043 0302 	orr.w	r3, r3, #2
 8002568:	6593      	str	r3, [r2, #88]	; 0x58
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <HAL_TIM_Base_MspInit+0x48>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	201d      	movs	r0, #29
 800257c:	f003 fd63 	bl	8006046 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002580:	201d      	movs	r0, #29
 8002582:	f003 fd7c 	bl	800607e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40000400 	.word	0x40000400
 8002594:	40021000 	.word	0x40021000

08002598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800259c:	f7ff ff76 	bl	800248c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025a0:	480c      	ldr	r0, [pc, #48]	; (80025d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80025a2:	490d      	ldr	r1, [pc, #52]	; (80025d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <LoopForever+0xe>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a8:	e002      	b.n	80025b0 <LoopCopyDataInit>

080025aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ae:	3304      	adds	r3, #4

080025b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b4:	d3f9      	bcc.n	80025aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b8:	4c0a      	ldr	r4, [pc, #40]	; (80025e4 <LoopForever+0x16>)
  movs r3, #0
 80025ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025bc:	e001      	b.n	80025c2 <LoopFillZerobss>

080025be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c0:	3204      	adds	r2, #4

080025c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c4:	d3fb      	bcc.n	80025be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c6:	f014 fced 	bl	8016fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025ca:	f7ff fab3 	bl	8001b34 <main>

080025ce <LoopForever>:

LoopForever:
    b LoopForever
 80025ce:	e7fe      	b.n	80025ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80025d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80025d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d8:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 80025dc:	0801a83c 	.word	0x0801a83c
  ldr r2, =_sbss
 80025e0:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 80025e4:	200019bc 	.word	0x200019bc

080025e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025e8:	e7fe      	b.n	80025e8 <ADC1_2_IRQHandler>
	...

080025ec <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	e04d      	b.n	80026a4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	7b1a      	ldrb	r2, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 8002644:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1a      	ldr	r2, [pc, #104]	; (80026b4 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 800264a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 800265a:	f04f 33ff 	mov.w	r3, #4294967295
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e020      	b.n	80026a4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4798      	blx	r3
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	e016      	b.n	80026a4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d112      	bne.n	80026a4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10d      	bne.n	80026a4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002688:	2301      	movs	r3, #1
 800268a:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	461a      	mov	r2, r3
 8002690:	2123      	movs	r1, #35	; 0x23
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fb55 	bl	8002d42 <LSM303AGR_ACC_Write_Reg>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d002      	beq.n	80026a4 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 800269e:	f04f 33ff 	mov.w	r3, #4294967295
 80026a2:	e000      	b.n	80026a6 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 80026a4:	68fb      	ldr	r3, [r7, #12]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	08003551 	.word	0x08003551
 80026b4:	080035b3 	.word	0x080035b3

080026b8 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	331c      	adds	r3, #28
 80026c4:	2101      	movs	r1, #1
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 f94a 	bl	8003960 <lsm303agr_xl_block_data_update_set>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 80026d2:	f04f 33ff 	mov.w	r3, #4294967295
 80026d6:	e02c      	b.n	8002732 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	331c      	adds	r3, #28
 80026dc:	2100      	movs	r1, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 faed 	bl	8003cbe <lsm303agr_xl_fifo_mode_set>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e020      	b.n	8002732 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2205      	movs	r2, #5
 80026f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	331c      	adds	r3, #28
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f001 f84e 	bl	80037a0 <lsm303agr_xl_data_rate_set>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 800270a:	f04f 33ff 	mov.w	r3, #4294967295
 800270e:	e010      	b.n	8002732 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	331c      	adds	r3, #28
 8002714:	2100      	movs	r1, #0
 8002716:	4618      	mov	r0, r3
 8002718:	f001 f8c4 	bl	80038a4 <lsm303agr_xl_full_scale_set>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002722:	f04f 33ff 	mov.w	r3, #4294967295
 8002726:	e004      	b.n	8002732 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f87c 	bl	8002840 <LSM303AGR_ACC_Disable>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	e008      	b.n	8002766 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	331c      	adds	r3, #28
 800277c:	6839      	ldr	r1, [r7, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f001 fa55 	bl	8003c2e <lsm303agr_xl_device_id_get>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e000      	b.n	8002792 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2201      	movs	r2, #1
 80027aa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2200      	movs	r2, #0
 80027b0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2210      	movs	r2, #16
 80027c8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <LSM303AGR_ACC_GetCapabilities+0x58>)
 80027dc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	43c80000 	.word	0x43c80000

080027f8 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	e014      	b.n	8002838 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f103 021c 	add.w	r2, r3, #28
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f000 ffbf 	bl	80037a0 <lsm303agr_xl_data_rate_set>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002828:	f04f 33ff 	mov.w	r3, #4294967295
 800282c:	e004      	b.n	8002838 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e01f      	b.n	8002896 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f103 021c 	add.w	r2, r3, #28
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	332a      	adds	r3, #42	; 0x2a
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f000 ffc2 	bl	80037ec <lsm303agr_xl_data_rate_get>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 800286e:	f04f 33ff 	mov.w	r3, #4294967295
 8002872:	e010      	b.n	8002896 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	331c      	adds	r3, #28
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f000 ff90 	bl	80037a0 <lsm303agr_xl_data_rate_set>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002886:	f04f 33ff 	mov.w	r3, #4294967295
 800288a:	e004      	b.n	8002896 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	331c      	adds	r3, #28
 80028b0:	f107 020b 	add.w	r2, r7, #11
 80028b4:	4611      	mov	r1, r2
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 ff3e 	bl	8003738 <lsm303agr_xl_operating_mode_get>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d002      	beq.n	80028c8 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e031      	b.n	800292c <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 80028c8:	7afb      	ldrb	r3, [r7, #11]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d01a      	beq.n	8002904 <LSM303AGR_ACC_GetSensitivity+0x66>
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	dc22      	bgt.n	8002918 <LSM303AGR_ACC_GetSensitivity+0x7a>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <LSM303AGR_ACC_GetSensitivity+0x3e>
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d00a      	beq.n	80028f0 <LSM303AGR_ACC_GetSensitivity+0x52>
 80028da:	e01d      	b.n	8002918 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fca8 	bl	8003234 <LSM303AGR_ACC_GetSensitivityHR>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01a      	beq.n	8002920 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 80028ea:	f04f 33ff 	mov.w	r3, #4294967295
 80028ee:	e01d      	b.n	800292c <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 80028f0:	6839      	ldr	r1, [r7, #0]
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fce4 	bl	80032c0 <LSM303AGR_ACC_GetSensitivityNM>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d012      	beq.n	8002924 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 80028fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002902:	e013      	b.n	800292c <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002904:	6839      	ldr	r1, [r7, #0]
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fd20 	bl	800334c <LSM303AGR_ACC_GetSensitivityLP>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e009      	b.n	800292c <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002918:	f04f 33ff 	mov.w	r3, #4294967295
 800291c:	60fb      	str	r3, [r7, #12]
      break;
 800291e:	e004      	b.n	800292a <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002920:	bf00      	nop
 8002922:	e002      	b.n	800292a <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002924:	bf00      	nop
 8002926:	e000      	b.n	800292a <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002928:	bf00      	nop
  }

  return ret;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	331c      	adds	r3, #28
 8002946:	f107 020b 	add.w	r2, r7, #11
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fef3 	bl	8003738 <lsm303agr_xl_operating_mode_get>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002958:	f04f 33ff 	mov.w	r3, #4294967295
 800295c:	e09d      	b.n	8002a9a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	331c      	adds	r3, #28
 8002962:	f107 020a 	add.w	r2, r7, #10
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f000 ff3f 	bl	80037ec <lsm303agr_xl_data_rate_get>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002974:	f04f 33ff 	mov.w	r3, #4294967295
 8002978:	e08f      	b.n	8002a9a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 800297a:	7afb      	ldrb	r3, [r7, #11]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d147      	bne.n	8002a10 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8002980:	7abb      	ldrb	r3, [r7, #10]
 8002982:	2b09      	cmp	r3, #9
 8002984:	d840      	bhi.n	8002a08 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002986:	a201      	add	r2, pc, #4	; (adr r2, 800298c <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298c:	080029b5 	.word	0x080029b5
 8002990:	080029bf 	.word	0x080029bf
 8002994:	080029c9 	.word	0x080029c9
 8002998:	080029d1 	.word	0x080029d1
 800299c:	080029d9 	.word	0x080029d9
 80029a0:	080029e1 	.word	0x080029e1
 80029a4:	080029e9 	.word	0x080029e9
 80029a8:	080029f1 	.word	0x080029f1
 80029ac:	080029f9 	.word	0x080029f9
 80029b0:	08002a01 	.word	0x08002a01
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
        break;
 80029bc:	e06c      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029c4:	601a      	str	r2, [r3, #0]
        break;
 80029c6:	e067      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4a36      	ldr	r2, [pc, #216]	; (8002aa4 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 80029cc:	601a      	str	r2, [r3, #0]
        break;
 80029ce:	e063      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4a35      	ldr	r2, [pc, #212]	; (8002aa8 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 80029d4:	601a      	str	r2, [r3, #0]
        break;
 80029d6:	e05f      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4a34      	ldr	r2, [pc, #208]	; (8002aac <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 80029dc:	601a      	str	r2, [r3, #0]
        break;
 80029de:	e05b      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	4a33      	ldr	r2, [pc, #204]	; (8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 80029e4:	601a      	str	r2, [r3, #0]
        break;
 80029e6:	e057      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4a32      	ldr	r2, [pc, #200]	; (8002ab4 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 80029ec:	601a      	str	r2, [r3, #0]
        break;
 80029ee:	e053      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4a31      	ldr	r2, [pc, #196]	; (8002ab8 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 80029f4:	601a      	str	r2, [r3, #0]
        break;
 80029f6:	e04f      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4a30      	ldr	r2, [pc, #192]	; (8002abc <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 80029fc:	601a      	str	r2, [r3, #0]
        break;
 80029fe:	e04b      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4a2f      	ldr	r2, [pc, #188]	; (8002ac0 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002a04:	601a      	str	r2, [r3, #0]
        break;
 8002a06:	e047      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	60fb      	str	r3, [r7, #12]
        break;
 8002a0e:	e043      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002a10:	7abb      	ldrb	r3, [r7, #10]
 8002a12:	2b09      	cmp	r3, #9
 8002a14:	d83c      	bhi.n	8002a90 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002a45 	.word	0x08002a45
 8002a20:	08002a4f 	.word	0x08002a4f
 8002a24:	08002a59 	.word	0x08002a59
 8002a28:	08002a61 	.word	0x08002a61
 8002a2c:	08002a69 	.word	0x08002a69
 8002a30:	08002a71 	.word	0x08002a71
 8002a34:	08002a79 	.word	0x08002a79
 8002a38:	08002a81 	.word	0x08002a81
 8002a3c:	08002a91 	.word	0x08002a91
 8002a40:	08002a89 	.word	0x08002a89
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
        break;
 8002a4c:	e024      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002a54:	601a      	str	r2, [r3, #0]
        break;
 8002a56:	e01f      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002a5c:	601a      	str	r2, [r3, #0]
        break;
 8002a5e:	e01b      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	4a11      	ldr	r2, [pc, #68]	; (8002aa8 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002a64:	601a      	str	r2, [r3, #0]
        break;
 8002a66:	e017      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	; (8002aac <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002a6c:	601a      	str	r2, [r3, #0]
        break;
 8002a6e:	e013      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002a74:	601a      	str	r2, [r3, #0]
        break;
 8002a76:	e00f      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002a7c:	601a      	str	r2, [r3, #0]
        break;
 8002a7e:	e00b      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002a84:	601a      	str	r2, [r3, #0]
        break;
 8002a86:	e007      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002a8c:	601a      	str	r2, [r3, #0]
        break;
 8002a8e:	e003      	b.n	8002a98 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002a90:	f04f 33ff 	mov.w	r3, #4294967295
 8002a94:	60fb      	str	r3, [r7, #12]
        break;
 8002a96:	bf00      	nop
    }
  }

  return ret;
 8002a98:	68fb      	ldr	r3, [r7, #12]
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	41200000 	.word	0x41200000
 8002aa8:	41c80000 	.word	0x41c80000
 8002aac:	42480000 	.word	0x42480000
 8002ab0:	42c80000 	.word	0x42c80000
 8002ab4:	43480000 	.word	0x43480000
 8002ab8:	43c80000 	.word	0x43c80000
 8002abc:	44ca8000 	.word	0x44ca8000
 8002ac0:	45a80000 	.word	0x45a80000
 8002ac4:	44a80000 	.word	0x44a80000

08002ac8 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d106      	bne.n	8002aec <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002ade:	ed97 0a00 	vldr	s0, [r7]
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fc78 	bl	80033d8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	e005      	b.n	8002af8 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002aec:	ed97 0a00 	vldr	s0, [r7]
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fcd3 	bl	800349c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002af6:	4603      	mov	r3, r0
  }
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	331c      	adds	r3, #28
 8002b12:	f107 020b 	add.w	r2, r7, #11
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fee9 	bl	80038f0 <lsm303agr_xl_full_scale_get>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002b24:	f04f 33ff 	mov.w	r3, #4294967295
 8002b28:	e023      	b.n	8002b72 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002b2a:	7afb      	ldrb	r3, [r7, #11]
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d81b      	bhi.n	8002b68 <LSM303AGR_ACC_GetFullScale+0x68>
 8002b30:	a201      	add	r2, pc, #4	; (adr r2, 8002b38 <LSM303AGR_ACC_GetFullScale+0x38>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b49 	.word	0x08002b49
 8002b3c:	08002b51 	.word	0x08002b51
 8002b40:	08002b59 	.word	0x08002b59
 8002b44:	08002b61 	.word	0x08002b61
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	601a      	str	r2, [r3, #0]
      break;
 8002b4e:	e00f      	b.n	8002b70 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2204      	movs	r2, #4
 8002b54:	601a      	str	r2, [r3, #0]
      break;
 8002b56:	e00b      	b.n	8002b70 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	601a      	str	r2, [r3, #0]
      break;
 8002b5e:	e007      	b.n	8002b70 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2210      	movs	r2, #16
 8002b64:	601a      	str	r2, [r3, #0]
      break;
 8002b66:	e003      	b.n	8002b70 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6c:	60fb      	str	r3, [r7, #12]
      break;
 8002b6e:	bf00      	nop
  }

  return ret;
 8002b70:	68fb      	ldr	r3, [r7, #12]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop

08002b7c <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	dd0b      	ble.n	8002ba4 <LSM303AGR_ACC_SetFullScale+0x28>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	dd06      	ble.n	8002ba0 <LSM303AGR_ACC_SetFullScale+0x24>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	dc01      	bgt.n	8002b9c <LSM303AGR_ACC_SetFullScale+0x20>
 8002b98:	2302      	movs	r3, #2
 8002b9a:	e004      	b.n	8002ba6 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e002      	b.n	8002ba6 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002ba4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002ba6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	331c      	adds	r3, #28
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fe77 	bl	80038a4 <lsm303agr_xl_full_scale_set>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc0:	e000      	b.n	8002bc4 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	331c      	adds	r3, #28
 8002be2:	f107 020f 	add.w	r2, r7, #15
 8002be6:	4611      	mov	r1, r2
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fda5 	bl	8003738 <lsm303agr_xl_operating_mode_get>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf8:	e04a      	b.n	8002c90 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d00c      	beq.n	8002c1a <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	dc0e      	bgt.n	8002c22 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d003      	beq.n	8002c14 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002c0c:	e009      	b.n	8002c22 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002c0e:	2310      	movs	r3, #16
 8002c10:	83fb      	strh	r3, [r7, #30]
      break;
 8002c12:	e00a      	b.n	8002c2a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002c14:	2340      	movs	r3, #64	; 0x40
 8002c16:	83fb      	strh	r3, [r7, #30]
      break;
 8002c18:	e007      	b.n	8002c2a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1e:	83fb      	strh	r3, [r7, #30]
      break;
 8002c20:	e003      	b.n	8002c2a <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002c22:	f04f 33ff 	mov.w	r3, #4294967295
 8002c26:	61bb      	str	r3, [r7, #24]
      break;
 8002c28:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c30:	d101      	bne.n	8002c36 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	e02c      	b.n	8002c90 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	331c      	adds	r3, #28
 8002c3a:	f107 0210 	add.w	r2, r7, #16
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 feb3 	bl	80039ac <lsm303agr_acceleration_raw_get>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c50:	e01e      	b.n	8002c90 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8002c52:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c56:	461a      	mov	r2, r3
 8002c58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c60:	b21a      	sxth	r2, r3
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8002c66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c70:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c74:	b21a      	sxth	r2, r3
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 8002c7a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c84:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c88:	b21a      	sxth	r2, r3
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	809a      	strh	r2, [r3, #4]

  return ret;
 8002c8e:	69bb      	ldr	r3, [r7, #24]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8002ca8:	f107 0310 	add.w	r3, r7, #16
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff8c 	bl	8002bcc <LSM303AGR_ACC_GetAxesRaw>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 8002cba:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbe:	e03c      	b.n	8002d3a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fde9 	bl	800289e <LSM303AGR_ACC_GetSensitivity>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e030      	b.n	8002d3a <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8002cd8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002cdc:	ee07 3a90 	vmov	s15, r3
 8002ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ce4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cf0:	ee17 2a90 	vmov	r2, s15
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8002cf8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d10:	ee17 2a90 	vmov	r2, s15
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8002d18:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d1c:	ee07 3a90 	vmov	s15, r3
 8002d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d30:	ee17 2a90 	vmov	r2, s15
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70fb      	strb	r3, [r7, #3]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f103 001c 	add.w	r0, r3, #28
 8002d58:	1cba      	adds	r2, r7, #2
 8002d5a:	78f9      	ldrb	r1, [r7, #3]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f000 fcd3 	bl	8003708 <lsm303agr_write_reg>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8002d68:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6c:	e000      	b.n	8002d70 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 8002d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	e04b      	b.n	8002e2c <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	7b1a      	ldrb	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	699a      	ldr	r2, [r3, #24]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8002dd0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8002dd6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002de6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e01e      	b.n	8002e2c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4798      	blx	r3
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d003      	beq.n	8002e02 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e014      	b.n	8002e2c <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d010      	beq.n	8002e2c <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10b      	bne.n	8002e2c <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	331c      	adds	r3, #28
 8002e18:	2101      	movs	r1, #1
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 ff75 	bl	8003d0a <lsm303agr_mag_i2c_interface_set>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	e000      	b.n	8002e2e <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	08003615 	.word	0x08003615
 8002e3c:	08003677 	.word	0x08003677

08002e40 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	331c      	adds	r3, #28
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fe7c 	bl	8003b4c <lsm303agr_mag_block_data_update_set>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5e:	e028      	b.n	8002eb2 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	331c      	adds	r3, #28
 8002e64:	2102      	movs	r1, #2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fdeb 	bl	8003a42 <lsm303agr_mag_operating_mode_set>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
 8002e76:	e01c      	b.n	8002eb2 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	331c      	adds	r3, #28
 8002e7c:	2103      	movs	r1, #3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fe05 	bl	8003a8e <lsm303agr_mag_data_rate_set>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	e010      	b.n	8002eb2 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	331c      	adds	r3, #28
 8002e94:	2100      	movs	r1, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 feeb 	bl	8003c72 <lsm303agr_mag_self_test_set>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	e004      	b.n	8002eb2 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f874 	bl	8002fb0 <LSM303AGR_MAG_Disable>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002ece:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed2:	e004      	b.n	8002ede <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	331c      	adds	r3, #28
 8002ef4:	6839      	ldr	r1, [r7, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 feaa 	bl	8003c50 <lsm303agr_mag_device_id_get>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	e000      	b.n	8002f0a <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2200      	movs	r2, #0
 8002f34:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2232      	movs	r2, #50	; 0x32
 8002f46:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <LSM303AGR_MAG_GetCapabilities+0x58>)
 8002f5c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	42c80000 	.word	0x42c80000

08002f70 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e010      	b.n	8002fa8 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	331c      	adds	r3, #28
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fd58 	bl	8003a42 <lsm303agr_mag_operating_mode_set>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002f98:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9c:	e004      	b.n	8002fa8 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e010      	b.n	8002fe8 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	331c      	adds	r3, #28
 8002fca:	2102      	movs	r1, #2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fd38 	bl	8003a42 <lsm303agr_mag_operating_mode_set>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	e004      	b.n	8002fe8 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8003000:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	331c      	adds	r3, #28
 8003022:	f107 020b 	add.w	r2, r7, #11
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fd57 	bl	8003adc <lsm303agr_mag_data_rate_get>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d002      	beq.n	800303a <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8003034:	f04f 33ff 	mov.w	r3, #4294967295
 8003038:	e023      	b.n	8003082 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800303a:	7afb      	ldrb	r3, [r7, #11]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d81b      	bhi.n	8003078 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	08003059 	.word	0x08003059
 800304c:	08003061 	.word	0x08003061
 8003050:	08003069 	.word	0x08003069
 8003054:	08003071 	.word	0x08003071
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4a0c      	ldr	r2, [pc, #48]	; (800308c <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 800305c:	601a      	str	r2, [r3, #0]
      break;
 800305e:	e00f      	b.n	8003080 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4a0b      	ldr	r2, [pc, #44]	; (8003090 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003064:	601a      	str	r2, [r3, #0]
      break;
 8003066:	e00b      	b.n	8003080 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 800306c:	601a      	str	r2, [r3, #0]
      break;
 800306e:	e007      	b.n	8003080 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4a09      	ldr	r2, [pc, #36]	; (8003098 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003074:	601a      	str	r2, [r3, #0]
      break;
 8003076:	e003      	b.n	8003080 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003078:	f04f 33ff 	mov.w	r3, #4294967295
 800307c:	60fb      	str	r3, [r7, #12]
      break;
 800307e:	bf00      	nop
  }

  return ret;
 8003080:	68fb      	ldr	r3, [r7, #12]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	41200000 	.word	0x41200000
 8003090:	41a00000 	.word	0x41a00000
 8003094:	42480000 	.word	0x42480000
 8003098:	42c80000 	.word	0x42c80000

0800309c <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 80030a8:	edd7 7a00 	vldr	s15, [r7]
 80030ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b8:	d801      	bhi.n	80030be <LSM303AGR_MAG_SetOutputDataRate+0x22>
 80030ba:	2300      	movs	r3, #0
 80030bc:	e016      	b.n	80030ec <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80030be:	edd7 7a00 	vldr	s15, [r7]
 80030c2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80030c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ce:	d801      	bhi.n	80030d4 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e00b      	b.n	80030ec <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80030d4:	edd7 7a00 	vldr	s15, [r7]
 80030d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003114 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 80030dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e4:	d801      	bhi.n	80030ea <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e000      	b.n	80030ec <LSM303AGR_MAG_SetOutputDataRate+0x50>
 80030ea:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 80030ec:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	331c      	adds	r3, #28
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fcc9 	bl	8003a8e <lsm303agr_mag_data_rate_set>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	e000      	b.n	800310a <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	42480000 	.word	0x42480000

08003118 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2232      	movs	r2, #50	; 0x32
 8003126:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
 800313e:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	331c      	adds	r3, #28
 800315c:	f107 0208 	add.w	r2, r7, #8
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fd18 	bl	8003b98 <lsm303agr_magnetic_raw_get>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 800316e:	f04f 33ff 	mov.w	r3, #4294967295
 8003172:	e00c      	b.n	800318e <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003174:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800317c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003184:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
 800319e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	331c      	adds	r3, #28
 80031a4:	f107 0210 	add.w	r2, r7, #16
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fcf4 	bl	8003b98 <lsm303agr_magnetic_raw_get>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d002      	beq.n	80031bc <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 80031b6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ba:	e036      	b.n	800322a <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 80031bc:	f107 030c 	add.w	r3, r7, #12
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff ff14 	bl	8002ff0 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80031c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80031d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031e0:	ee17 2a90 	vmov	r2, s15
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80031e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80031ec:	ee07 3a90 	vmov	s15, r3
 80031f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80031f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003200:	ee17 2a90 	vmov	r2, s15
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8003208:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800320c:	ee07 3a90 	vmov	s15, r3
 8003210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003214:	edd7 7a03 	vldr	s15, [r7, #12]
 8003218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800321c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003220:	ee17 2a90 	vmov	r2, s15
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	331c      	adds	r3, #28
 8003246:	f107 020b 	add.w	r2, r7, #11
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fb4f 	bl	80038f0 <lsm303agr_xl_full_scale_get>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8003258:	f04f 33ff 	mov.w	r3, #4294967295
 800325c:	e023      	b.n	80032a6 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800325e:	7afb      	ldrb	r3, [r7, #11]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d81b      	bhi.n	800329c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	0800327d 	.word	0x0800327d
 8003270:	08003285 	.word	0x08003285
 8003274:	0800328d 	.word	0x0800328d
 8003278:	08003295 	.word	0x08003295
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4a0c      	ldr	r2, [pc, #48]	; (80032b0 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003280:	601a      	str	r2, [r3, #0]
      break;
 8003282:	e00f      	b.n	80032a4 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4a0b      	ldr	r2, [pc, #44]	; (80032b4 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003288:	601a      	str	r2, [r3, #0]
      break;
 800328a:	e00b      	b.n	80032a4 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003290:	601a      	str	r2, [r3, #0]
      break;
 8003292:	e007      	b.n	80032a4 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003298:	601a      	str	r2, [r3, #0]
      break;
 800329a:	e003      	b.n	80032a4 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800329c:	f04f 33ff 	mov.w	r3, #4294967295
 80032a0:	60fb      	str	r3, [r7, #12]
      break;
 80032a2:	bf00      	nop
  }

  return ret;
 80032a4:	68fb      	ldr	r3, [r7, #12]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	3f7ae148 	.word	0x3f7ae148
 80032b4:	3ff9999a 	.word	0x3ff9999a
 80032b8:	4079999a 	.word	0x4079999a
 80032bc:	413b851f 	.word	0x413b851f

080032c0 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	331c      	adds	r3, #28
 80032d2:	f107 020b 	add.w	r2, r7, #11
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fb09 	bl	80038f0 <lsm303agr_xl_full_scale_get>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 80032e4:	f04f 33ff 	mov.w	r3, #4294967295
 80032e8:	e023      	b.n	8003332 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 80032ea:	7afb      	ldrb	r3, [r7, #11]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d81b      	bhi.n	8003328 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80032f0:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80032f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f6:	bf00      	nop
 80032f8:	08003309 	.word	0x08003309
 80032fc:	08003311 	.word	0x08003311
 8003300:	08003319 	.word	0x08003319
 8003304:	08003321 	.word	0x08003321
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4a0c      	ldr	r2, [pc, #48]	; (800333c <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 800330c:	601a      	str	r2, [r3, #0]
      break;
 800330e:	e00f      	b.n	8003330 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 8003314:	601a      	str	r2, [r3, #0]
      break;
 8003316:	e00b      	b.n	8003330 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 800331c:	601a      	str	r2, [r3, #0]
      break;
 800331e:	e007      	b.n	8003330 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	4a09      	ldr	r2, [pc, #36]	; (8003348 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 8003324:	601a      	str	r2, [r3, #0]
      break;
 8003326:	e003      	b.n	8003330 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
 800332c:	60fb      	str	r3, [r7, #12]
      break;
 800332e:	bf00      	nop
  }

  return ret;
 8003330:	68fb      	ldr	r3, [r7, #12]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	4079999a 	.word	0x4079999a
 8003340:	40fa3d71 	.word	0x40fa3d71
 8003344:	417a147b 	.word	0x417a147b
 8003348:	423b999a 	.word	0x423b999a

0800334c <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	331c      	adds	r3, #28
 800335e:	f107 020b 	add.w	r2, r7, #11
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fac3 	bl	80038f0 <lsm303agr_xl_full_scale_get>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d002      	beq.n	8003376 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003370:	f04f 33ff 	mov.w	r3, #4294967295
 8003374:	e023      	b.n	80033be <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d81b      	bhi.n	80033b4 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	08003395 	.word	0x08003395
 8003388:	0800339d 	.word	0x0800339d
 800338c:	080033a5 	.word	0x080033a5
 8003390:	080033ad 	.word	0x080033ad
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4a0c      	ldr	r2, [pc, #48]	; (80033c8 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003398:	601a      	str	r2, [r3, #0]
      break;
 800339a:	e00f      	b.n	80033bc <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 80033a0:	601a      	str	r2, [r3, #0]
      break;
 80033a2:	e00b      	b.n	80033bc <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 80033a8:	601a      	str	r2, [r3, #0]
      break;
 80033aa:	e007      	b.n	80033bc <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	4a09      	ldr	r2, [pc, #36]	; (80033d4 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 80033b0:	601a      	str	r2, [r3, #0]
      break;
 80033b2:	e003      	b.n	80033bc <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295
 80033b8:	60fb      	str	r3, [r7, #12]
      break;
 80033ba:	bf00      	nop
  }

  return ret;
 80033bc:	68fb      	ldr	r3, [r7, #12]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	417a147b 	.word	0x417a147b
 80033cc:	41fa147b 	.word	0x41fa147b
 80033d0:	427a147b 	.word	0x427a147b
 80033d4:	433b947b 	.word	0x433b947b

080033d8 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80033e4:	edd7 7a00 	vldr	s15, [r7]
 80033e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f4:	d801      	bhi.n	80033fa <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e037      	b.n	800346a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80033fa:	edd7 7a00 	vldr	s15, [r7]
 80033fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	d801      	bhi.n	8003410 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 800340c:	2302      	movs	r3, #2
 800340e:	e02c      	b.n	800346a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003410:	edd7 7a00 	vldr	s15, [r7]
 8003414:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8003418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800341c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003420:	d801      	bhi.n	8003426 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8003422:	2303      	movs	r3, #3
 8003424:	e021      	b.n	800346a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003426:	edd7 7a00 	vldr	s15, [r7]
 800342a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003490 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 800342e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003436:	d801      	bhi.n	800343c <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 8003438:	2304      	movs	r3, #4
 800343a:	e016      	b.n	800346a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 800343c:	edd7 7a00 	vldr	s15, [r7]
 8003440:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003494 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8003444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344c:	d801      	bhi.n	8003452 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800344e:	2305      	movs	r3, #5
 8003450:	e00b      	b.n	800346a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003452:	edd7 7a00 	vldr	s15, [r7]
 8003456:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003498 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800345a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003462:	d801      	bhi.n	8003468 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003464:	2306      	movs	r3, #6
 8003466:	e000      	b.n	800346a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003468:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800346a:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	331c      	adds	r3, #28
 8003470:	7bfa      	ldrb	r2, [r7, #15]
 8003472:	4611      	mov	r1, r2
 8003474:	4618      	mov	r0, r3
 8003476:	f000 f993 	bl	80037a0 <lsm303agr_xl_data_rate_set>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	e000      	b.n	8003488 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	42480000 	.word	0x42480000
 8003494:	42c80000 	.word	0x42c80000
 8003498:	43480000 	.word	0x43480000

0800349c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 80034a8:	edd7 7a00 	vldr	s15, [r7]
 80034ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b8:	d801      	bhi.n	80034be <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e037      	b.n	800352e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80034be:	edd7 7a00 	vldr	s15, [r7]
 80034c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ce:	d801      	bhi.n	80034d4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e02c      	b.n	800352e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80034d4:	edd7 7a00 	vldr	s15, [r7]
 80034d8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80034dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e4:	d801      	bhi.n	80034ea <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e021      	b.n	800352e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80034ea:	edd7 7a00 	vldr	s15, [r7]
 80034ee:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8003544 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80034f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fa:	d801      	bhi.n	8003500 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80034fc:	2304      	movs	r3, #4
 80034fe:	e016      	b.n	800352e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003500:	edd7 7a00 	vldr	s15, [r7]
 8003504:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003548 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 8003508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	d801      	bhi.n	8003516 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003512:	2305      	movs	r3, #5
 8003514:	e00b      	b.n	800352e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003516:	edd7 7a00 	vldr	s15, [r7]
 800351a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800354c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 800351e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003526:	d801      	bhi.n	800352c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 8003528:	2306      	movs	r3, #6
 800352a:	e000      	b.n	800352e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800352c:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	42480000 	.word	0x42480000
 8003548:	42c80000 	.word	0x42c80000
 800354c:	43480000 	.word	0x43480000

08003550 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	461a      	mov	r2, r3
 800355c:	460b      	mov	r3, r1
 800355e:	72fb      	strb	r3, [r7, #11]
 8003560:	4613      	mov	r3, r2
 8003562:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10e      	bne.n	800358e <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	695c      	ldr	r4, [r3, #20]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	7b1b      	ldrb	r3, [r3, #12]
 8003578:	b298      	uxth	r0, r3
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003580:	b2db      	uxtb	r3, r3
 8003582:	b299      	uxth	r1, r3
 8003584:	893b      	ldrh	r3, [r7, #8]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	47a0      	blx	r4
 800358a:	4603      	mov	r3, r0
 800358c:	e00d      	b.n	80035aa <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	695c      	ldr	r4, [r3, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	7b1b      	ldrb	r3, [r3, #12]
 8003596:	b298      	uxth	r0, r3
 8003598:	7afb      	ldrb	r3, [r7, #11]
 800359a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	b299      	uxth	r1, r3
 80035a2:	893b      	ldrh	r3, [r7, #8]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	47a0      	blx	r4
 80035a8:	4603      	mov	r3, r0
  }
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd90      	pop	{r4, r7, pc}

080035b2 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80035b2:	b590      	push	{r4, r7, lr}
 80035b4:	b087      	sub	sp, #28
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	461a      	mov	r2, r3
 80035be:	460b      	mov	r3, r1
 80035c0:	72fb      	strb	r3, [r7, #11]
 80035c2:	4613      	mov	r3, r2
 80035c4:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10e      	bne.n	80035f0 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	691c      	ldr	r4, [r3, #16]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	7b1b      	ldrb	r3, [r3, #12]
 80035da:	b298      	uxth	r0, r3
 80035dc:	7afb      	ldrb	r3, [r7, #11]
 80035de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	b299      	uxth	r1, r3
 80035e6:	893b      	ldrh	r3, [r7, #8]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	47a0      	blx	r4
 80035ec:	4603      	mov	r3, r0
 80035ee:	e00d      	b.n	800360c <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	691c      	ldr	r4, [r3, #16]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	7b1b      	ldrb	r3, [r3, #12]
 80035f8:	b298      	uxth	r0, r3
 80035fa:	7afb      	ldrb	r3, [r7, #11]
 80035fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003600:	b2db      	uxtb	r3, r3
 8003602:	b299      	uxth	r1, r3
 8003604:	893b      	ldrh	r3, [r7, #8]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	47a0      	blx	r4
 800360a:	4603      	mov	r3, r0
  }
}
 800360c:	4618      	mov	r0, r3
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	bd90      	pop	{r4, r7, pc}

08003614 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003614:	b590      	push	{r4, r7, lr}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	461a      	mov	r2, r3
 8003620:	460b      	mov	r3, r1
 8003622:	72fb      	strb	r3, [r7, #11]
 8003624:	4613      	mov	r3, r2
 8003626:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10e      	bne.n	8003652 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	695c      	ldr	r4, [r3, #20]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	7b1b      	ldrb	r3, [r3, #12]
 800363c:	b298      	uxth	r0, r3
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003644:	b2db      	uxtb	r3, r3
 8003646:	b299      	uxth	r1, r3
 8003648:	893b      	ldrh	r3, [r7, #8]
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	47a0      	blx	r4
 800364e:	4603      	mov	r3, r0
 8003650:	e00d      	b.n	800366e <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	695c      	ldr	r4, [r3, #20]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	7b1b      	ldrb	r3, [r3, #12]
 800365a:	b298      	uxth	r0, r3
 800365c:	7afb      	ldrb	r3, [r7, #11]
 800365e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003662:	b2db      	uxtb	r3, r3
 8003664:	b299      	uxth	r1, r3
 8003666:	893b      	ldrh	r3, [r7, #8]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	47a0      	blx	r4
 800366c:	4603      	mov	r3, r0
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}

08003676 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003676:	b590      	push	{r4, r7, lr}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	461a      	mov	r2, r3
 8003682:	460b      	mov	r3, r1
 8003684:	72fb      	strb	r3, [r7, #11]
 8003686:	4613      	mov	r3, r2
 8003688:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10e      	bne.n	80036b4 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	691c      	ldr	r4, [r3, #16]
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	7b1b      	ldrb	r3, [r3, #12]
 800369e:	b298      	uxth	r0, r3
 80036a0:	7afb      	ldrb	r3, [r7, #11]
 80036a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	b299      	uxth	r1, r3
 80036aa:	893b      	ldrh	r3, [r7, #8]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	47a0      	blx	r4
 80036b0:	4603      	mov	r3, r0
 80036b2:	e00d      	b.n	80036d0 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	691c      	ldr	r4, [r3, #16]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	7b1b      	ldrb	r3, [r3, #12]
 80036bc:	b298      	uxth	r0, r3
 80036be:	7afb      	ldrb	r3, [r7, #11]
 80036c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	b299      	uxth	r1, r3
 80036c8:	893b      	ldrh	r3, [r7, #8]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	47a0      	blx	r4
 80036ce:	4603      	mov	r3, r0
  }
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd90      	pop	{r4, r7, pc}

080036d8 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	607a      	str	r2, [r7, #4]
 80036e2:	461a      	mov	r2, r3
 80036e4:	460b      	mov	r3, r1
 80036e6:	72fb      	strb	r3, [r7, #11]
 80036e8:	4613      	mov	r3, r2
 80036ea:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	685c      	ldr	r4, [r3, #4]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6898      	ldr	r0, [r3, #8]
 80036f4:	893b      	ldrh	r3, [r7, #8]
 80036f6:	7af9      	ldrb	r1, [r7, #11]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	47a0      	blx	r4
 80036fc:	6178      	str	r0, [r7, #20]
  return ret;
 80036fe:	697b      	ldr	r3, [r7, #20]
}
 8003700:	4618      	mov	r0, r3
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	bd90      	pop	{r4, r7, pc}

08003708 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	461a      	mov	r2, r3
 8003714:	460b      	mov	r3, r1
 8003716:	72fb      	strb	r3, [r7, #11]
 8003718:	4613      	mov	r3, r2
 800371a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681c      	ldr	r4, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6898      	ldr	r0, [r3, #8]
 8003724:	893b      	ldrh	r3, [r7, #8]
 8003726:	7af9      	ldrb	r1, [r7, #11]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	47a0      	blx	r4
 800372c:	6178      	str	r0, [r7, #20]
  return ret;
 800372e:	697b      	ldr	r3, [r7, #20]
}
 8003730:	4618      	mov	r0, r3
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	bd90      	pop	{r4, r7, pc}

08003738 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003742:	f107 020c 	add.w	r2, r7, #12
 8003746:	2301      	movs	r3, #1
 8003748:	2120      	movs	r1, #32
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff ffc4 	bl	80036d8 <lsm303agr_read_reg>
 8003750:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d107      	bne.n	8003768 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003758:	f107 0210 	add.w	r2, r7, #16
 800375c:	2301      	movs	r3, #1
 800375e:	2123      	movs	r1, #35	; 0x23
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ffb9 	bl	80036d8 <lsm303agr_read_reg>
 8003766:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003768:	7b3b      	ldrb	r3, [r7, #12]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2202      	movs	r2, #2
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e00c      	b.n	8003796 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 800377c:	7c3b      	ldrb	r3, [r7, #16]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
 800378e:	e002      	b.n	8003796 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003796:	697b      	ldr	r3, [r7, #20]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80037ac:	f107 0208 	add.w	r2, r7, #8
 80037b0:	2301      	movs	r3, #1
 80037b2:	2120      	movs	r1, #32
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff8f 	bl	80036d8 <lsm303agr_read_reg>
 80037ba:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	7a3b      	ldrb	r3, [r7, #8]
 80037cc:	f362 1307 	bfi	r3, r2, #4, #4
 80037d0:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80037d2:	f107 0208 	add.w	r2, r7, #8
 80037d6:	2301      	movs	r3, #1
 80037d8:	2120      	movs	r1, #32
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff94 	bl	8003708 <lsm303agr_write_reg>
 80037e0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 80037e2:	68fb      	ldr	r3, [r7, #12]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 80037f6:	f107 0208 	add.w	r2, r7, #8
 80037fa:	2301      	movs	r3, #1
 80037fc:	2120      	movs	r1, #32
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff ff6a 	bl	80036d8 <lsm303agr_read_reg>
 8003804:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003806:	7a3b      	ldrb	r3, [r7, #8]
 8003808:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b09      	cmp	r3, #9
 8003810:	d83e      	bhi.n	8003890 <lsm303agr_xl_data_rate_get+0xa4>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <lsm303agr_xl_data_rate_get+0x2c>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	08003841 	.word	0x08003841
 800381c:	08003849 	.word	0x08003849
 8003820:	08003851 	.word	0x08003851
 8003824:	08003859 	.word	0x08003859
 8003828:	08003861 	.word	0x08003861
 800382c:	08003869 	.word	0x08003869
 8003830:	08003871 	.word	0x08003871
 8003834:	08003879 	.word	0x08003879
 8003838:	08003881 	.word	0x08003881
 800383c:	08003889 	.word	0x08003889
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
      break;
 8003846:	e027      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
      break;
 800384e:	e023      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2202      	movs	r2, #2
 8003854:	701a      	strb	r2, [r3, #0]
      break;
 8003856:	e01f      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2203      	movs	r2, #3
 800385c:	701a      	strb	r2, [r3, #0]
      break;
 800385e:	e01b      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	2204      	movs	r2, #4
 8003864:	701a      	strb	r2, [r3, #0]
      break;
 8003866:	e017      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	2205      	movs	r2, #5
 800386c:	701a      	strb	r2, [r3, #0]
      break;
 800386e:	e013      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2206      	movs	r2, #6
 8003874:	701a      	strb	r2, [r3, #0]
      break;
 8003876:	e00f      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2207      	movs	r2, #7
 800387c:	701a      	strb	r2, [r3, #0]
      break;
 800387e:	e00b      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2208      	movs	r2, #8
 8003884:	701a      	strb	r2, [r3, #0]
      break;
 8003886:	e007      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2209      	movs	r2, #9
 800388c:	701a      	strb	r2, [r3, #0]
      break;
 800388e:	e003      	b.n	8003898 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
      break;
 8003896:	bf00      	nop
  }

  return ret;
 8003898:	68fb      	ldr	r3, [r7, #12]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop

080038a4 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80038b0:	f107 0208 	add.w	r2, r7, #8
 80038b4:	2301      	movs	r3, #1
 80038b6:	2123      	movs	r1, #35	; 0x23
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff0d 	bl	80036d8 <lsm303agr_read_reg>
 80038be:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 80038c6:	78fb      	ldrb	r3, [r7, #3]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	7a3b      	ldrb	r3, [r7, #8]
 80038d0:	f362 1305 	bfi	r3, r2, #4, #2
 80038d4:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80038d6:	f107 0208 	add.w	r2, r7, #8
 80038da:	2301      	movs	r3, #1
 80038dc:	2123      	movs	r1, #35	; 0x23
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff12 	bl	8003708 <lsm303agr_write_reg>
 80038e4:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80038e6:	68fb      	ldr	r3, [r7, #12]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 80038fa:	f107 0208 	add.w	r2, r7, #8
 80038fe:	2301      	movs	r3, #1
 8003900:	2123      	movs	r1, #35	; 0x23
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff fee8 	bl	80036d8 <lsm303agr_read_reg>
 8003908:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 800390a:	7a3b      	ldrb	r3, [r7, #8]
 800390c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b03      	cmp	r3, #3
 8003914:	d81a      	bhi.n	800394c <lsm303agr_xl_full_scale_get+0x5c>
 8003916:	a201      	add	r2, pc, #4	; (adr r2, 800391c <lsm303agr_xl_full_scale_get+0x2c>)
 8003918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391c:	0800392d 	.word	0x0800392d
 8003920:	08003935 	.word	0x08003935
 8003924:	0800393d 	.word	0x0800393d
 8003928:	08003945 	.word	0x08003945
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
      break;
 8003932:	e00f      	b.n	8003954 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
      break;
 800393a:	e00b      	b.n	8003954 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2202      	movs	r2, #2
 8003940:	701a      	strb	r2, [r3, #0]
      break;
 8003942:	e007      	b.n	8003954 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2203      	movs	r2, #3
 8003948:	701a      	strb	r2, [r3, #0]
      break;
 800394a:	e003      	b.n	8003954 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
      break;
 8003952:	bf00      	nop
  }

  return ret;
 8003954:	68fb      	ldr	r3, [r7, #12]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop

08003960 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	460b      	mov	r3, r1
 800396a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 800396c:	f107 0208 	add.w	r2, r7, #8
 8003970:	2301      	movs	r3, #1
 8003972:	2123      	movs	r1, #35	; 0x23
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff feaf 	bl	80036d8 <lsm303agr_read_reg>
 800397a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	b2da      	uxtb	r2, r3
 800398a:	7a3b      	ldrb	r3, [r7, #8]
 800398c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003990:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003992:	f107 0208 	add.w	r2, r7, #8
 8003996:	2301      	movs	r3, #1
 8003998:	2123      	movs	r1, #35	; 0x23
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff feb4 	bl	8003708 <lsm303agr_write_reg>
 80039a0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 80039b6:	f107 020c 	add.w	r2, r7, #12
 80039ba:	2306      	movs	r3, #6
 80039bc:	2128      	movs	r1, #40	; 0x28
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fe8a 	bl	80036d8 <lsm303agr_read_reg>
 80039c4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80039c6:	7b7b      	ldrb	r3, [r7, #13]
 80039c8:	b21a      	sxth	r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	b29a      	uxth	r2, r3
 80039da:	7b3b      	ldrb	r3, [r7, #12]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	4413      	add	r3, r2
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b21a      	sxth	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80039e8:	7bfa      	ldrb	r2, [r7, #15]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	3302      	adds	r3, #2
 80039ee:	b212      	sxth	r2, r2
 80039f0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	3302      	adds	r3, #2
 80039f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	7bbb      	ldrb	r3, [r7, #14]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	3302      	adds	r3, #2
 8003a0c:	b212      	sxth	r2, r2
 8003a0e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003a10:	7c7a      	ldrb	r2, [r7, #17]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	3304      	adds	r3, #4
 8003a16:	b212      	sxth	r2, r2
 8003a18:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	7c3b      	ldrb	r3, [r7, #16]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	3304      	adds	r3, #4
 8003a34:	b212      	sxth	r2, r2
 8003a36:	801a      	strh	r2, [r3, #0]
  return ret;
 8003a38:	697b      	ldr	r3, [r7, #20]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003a4e:	f107 0208 	add.w	r2, r7, #8
 8003a52:	2301      	movs	r3, #1
 8003a54:	2160      	movs	r1, #96	; 0x60
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff fe3e 	bl	80036d8 <lsm303agr_read_reg>
 8003a5c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10f      	bne.n	8003a84 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	7a3b      	ldrb	r3, [r7, #8]
 8003a6e:	f362 0301 	bfi	r3, r2, #0, #2
 8003a72:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003a74:	f107 0208 	add.w	r2, r7, #8
 8003a78:	2301      	movs	r3, #1
 8003a7a:	2160      	movs	r1, #96	; 0x60
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fe43 	bl	8003708 <lsm303agr_write_reg>
 8003a82:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003a84:	68fb      	ldr	r3, [r7, #12]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003a9a:	f107 0208 	add.w	r2, r7, #8
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	2160      	movs	r1, #96	; 0x60
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7ff fe18 	bl	80036d8 <lsm303agr_read_reg>
 8003aa8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d10f      	bne.n	8003ad0 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	7a3b      	ldrb	r3, [r7, #8]
 8003aba:	f362 0383 	bfi	r3, r2, #2, #2
 8003abe:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003ac0:	f107 0208 	add.w	r2, r7, #8
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	2160      	movs	r1, #96	; 0x60
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fe1d 	bl	8003708 <lsm303agr_write_reg>
 8003ace:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003ae6:	f107 0208 	add.w	r2, r7, #8
 8003aea:	2301      	movs	r3, #1
 8003aec:	2160      	movs	r1, #96	; 0x60
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fdf2 	bl	80036d8 <lsm303agr_read_reg>
 8003af4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003af6:	7a3b      	ldrb	r3, [r7, #8]
 8003af8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d81a      	bhi.n	8003b38 <lsm303agr_mag_data_rate_get+0x5c>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <lsm303agr_mag_data_rate_get+0x2c>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b21 	.word	0x08003b21
 8003b10:	08003b29 	.word	0x08003b29
 8003b14:	08003b31 	.word	0x08003b31
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
      break;
 8003b1e:	e00f      	b.n	8003b40 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
      break;
 8003b26:	e00b      	b.n	8003b40 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	701a      	strb	r2, [r3, #0]
      break;
 8003b2e:	e007      	b.n	8003b40 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2203      	movs	r2, #3
 8003b34:	701a      	strb	r2, [r3, #0]
      break;
 8003b36:	e003      	b.n	8003b40 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
      break;
 8003b3e:	bf00      	nop
  }

  return ret;
 8003b40:	68fb      	ldr	r3, [r7, #12]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop

08003b4c <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b58:	f107 0208 	add.w	r2, r7, #8
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	2162      	movs	r1, #98	; 0x62
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fdb9 	bl	80036d8 <lsm303agr_read_reg>
 8003b66:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10f      	bne.n	8003b8e <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	7a3b      	ldrb	r3, [r7, #8]
 8003b78:	f362 1304 	bfi	r3, r2, #4, #1
 8003b7c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003b7e:	f107 0208 	add.w	r2, r7, #8
 8003b82:	2301      	movs	r3, #1
 8003b84:	2162      	movs	r1, #98	; 0x62
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fdbe 	bl	8003708 <lsm303agr_write_reg>
 8003b8c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003ba2:	f107 020c 	add.w	r2, r7, #12
 8003ba6:	2306      	movs	r3, #6
 8003ba8:	2168      	movs	r1, #104	; 0x68
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff fd94 	bl	80036d8 <lsm303agr_read_reg>
 8003bb0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003bb2:	7b7b      	ldrb	r3, [r7, #13]
 8003bb4:	b21a      	sxth	r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	7b3b      	ldrb	r3, [r7, #12]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	b21a      	sxth	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	b212      	sxth	r2, r2
 8003bdc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	3302      	adds	r3, #2
 8003be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	7bbb      	ldrb	r3, [r7, #14]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	3302      	adds	r3, #2
 8003bf8:	b212      	sxth	r2, r2
 8003bfa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003bfc:	7c7a      	ldrb	r2, [r7, #17]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	3304      	adds	r3, #4
 8003c02:	b212      	sxth	r2, r2
 8003c04:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	7c3b      	ldrb	r3, [r7, #16]
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	b212      	sxth	r2, r2
 8003c22:	801a      	strh	r2, [r3, #0]
  return ret;
 8003c24:	697b      	ldr	r3, [r7, #20]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003c38:	2301      	movs	r3, #1
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	210f      	movs	r1, #15
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fd4a 	bl	80036d8 <lsm303agr_read_reg>
 8003c44:	60f8      	str	r0, [r7, #12]
  return ret;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	214f      	movs	r1, #79	; 0x4f
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff fd39 	bl	80036d8 <lsm303agr_read_reg>
 8003c66:	60f8      	str	r0, [r7, #12]
  return ret;
 8003c68:	68fb      	ldr	r3, [r7, #12]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003c7e:	f107 0208 	add.w	r2, r7, #8
 8003c82:	2301      	movs	r3, #1
 8003c84:	2162      	movs	r1, #98	; 0x62
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fd26 	bl	80036d8 <lsm303agr_read_reg>
 8003c8c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	7a3b      	ldrb	r3, [r7, #8]
 8003c9e:	f362 0341 	bfi	r3, r2, #1, #1
 8003ca2:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003ca4:	f107 0208 	add.w	r2, r7, #8
 8003ca8:	2301      	movs	r3, #1
 8003caa:	2162      	movs	r1, #98	; 0x62
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff fd2b 	bl	8003708 <lsm303agr_write_reg>
 8003cb2:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003cca:	f107 0208 	add.w	r2, r7, #8
 8003cce:	2301      	movs	r3, #1
 8003cd0:	212e      	movs	r1, #46	; 0x2e
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff fd00 	bl	80036d8 <lsm303agr_read_reg>
 8003cd8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10f      	bne.n	8003d00 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	7a3b      	ldrb	r3, [r7, #8]
 8003cea:	f362 1387 	bfi	r3, r2, #6, #2
 8003cee:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 8003cf0:	f107 0208 	add.w	r2, r7, #8
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	212e      	movs	r1, #46	; 0x2e
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff fd05 	bl	8003708 <lsm303agr_write_reg>
 8003cfe:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 8003d00:	68fb      	ldr	r3, [r7, #12]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	460b      	mov	r3, r1
 8003d14:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d16:	f107 0208 	add.w	r2, r7, #8
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	2162      	movs	r1, #98	; 0x62
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fcda 	bl	80036d8 <lsm303agr_read_reg>
 8003d24:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10f      	bne.n	8003d4c <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	7a3b      	ldrb	r3, [r7, #8]
 8003d36:	f362 1345 	bfi	r3, r2, #5, #1
 8003d3a:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003d3c:	f107 0208 	add.w	r2, r7, #8
 8003d40:	2301      	movs	r3, #1
 8003d42:	2162      	movs	r1, #98	; 0x62
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff fcdf 	bl	8003708 <lsm303agr_write_reg>
 8003d4a:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 8003d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e04d      	b.n	8003e10 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	7b1a      	ldrb	r2, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <LSM6DSL_RegisterBusIO+0xc4>)
 8003db0:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1a      	ldr	r2, [pc, #104]	; (8003e20 <LSM6DSL_RegisterBusIO+0xc8>)
 8003db6:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d103      	bne.n	8003dce <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8003dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e020      	b.n	8003e10 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4798      	blx	r3
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e016      	b.n	8003e10 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d112      	bne.n	8003e10 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10d      	bne.n	8003e10 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8003df4:	230c      	movs	r3, #12
 8003df6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8003df8:	7afb      	ldrb	r3, [r7, #11]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2112      	movs	r1, #18
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fd2d 	bl	800485e <LSM6DSL_Write_Reg>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003e10:	68fb      	ldr	r3, [r7, #12]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	08004ccd 	.word	0x08004ccd
 8003e20:	08004d03 	.word	0x08004d03

08003e24 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	331c      	adds	r3, #28
 8003e30:	2101      	movs	r1, #1
 8003e32:	4618      	mov	r0, r3
 8003e34:	f001 fa59 	bl	80052ea <lsm6dsl_auto_increment_set>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	e054      	b.n	8003eee <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	331c      	adds	r3, #28
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 f980 	bl	8005150 <lsm6dsl_block_data_update_set>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d002      	beq.n	8003e5c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5a:	e048      	b.n	8003eee <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	331c      	adds	r3, #28
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 fa67 	bl	8005336 <lsm6dsl_fifo_mode_set>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	e03c      	b.n	8003eee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2204      	movs	r2, #4
 8003e78:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	331c      	adds	r3, #28
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 ffe6 	bl	8004e54 <lsm6dsl_xl_data_rate_set>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e92:	e02c      	b.n	8003eee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	331c      	adds	r3, #28
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 ff7c 	bl	8004d98 <lsm6dsl_xl_full_scale_set>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8003ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eaa:	e020      	b.n	8003eee <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2204      	movs	r2, #4
 8003eb0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	331c      	adds	r3, #28
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 f8c0 	bl	8005040 <lsm6dsl_gy_data_rate_set>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	e010      	b.n	8003eee <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	331c      	adds	r3, #28
 8003ed0:	2106      	movs	r1, #6
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 f84c 	bl	8004f70 <lsm6dsl_gy_full_scale_set>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8003ede:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee2:	e004      	b.n	8003eee <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f888 	bl	8004014 <LSM6DSL_ACC_Disable>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	e015      	b.n	8003f3c <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 fa9a 	bl	800444a <LSM6DSL_GYRO_Disable>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 8003f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003f20:	e00c      	b.n	8003f3c <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3708      	adds	r7, #8
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	331c      	adds	r3, #28
 8003f52:	6839      	ldr	r1, [r7, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f9b7 	bl	80052c8 <lsm6dsl_device_id_get>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d002      	beq.n	8003f66 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
 8003f64:	e000      	b.n	8003f68 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2201      	movs	r2, #1
 8003f84:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003f98:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	4a07      	ldr	r2, [pc, #28]	; (8003fc8 <LSM6DSL_GetCapabilities+0x58>)
 8003faa:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4a06      	ldr	r2, [pc, #24]	; (8003fc8 <LSM6DSL_GetCapabilities+0x58>)
 8003fb0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	45d02000 	.word	0x45d02000

08003fcc <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b082      	sub	sp, #8
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e014      	b.n	800400c <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f103 021c 	add.w	r2, r3, #28
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f000 ff2f 	bl	8004e54 <lsm6dsl_xl_data_rate_set>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8003ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8004000:	e004      	b.n	800400c <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 8004026:	2300      	movs	r3, #0
 8004028:	e01f      	b.n	800406a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f103 021c 	add.w	r2, r3, #28
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	332b      	adds	r3, #43	; 0x2b
 8004034:	4619      	mov	r1, r3
 8004036:	4610      	mov	r0, r2
 8004038:	f000 ff32 	bl	8004ea0 <lsm6dsl_xl_data_rate_get>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004042:	f04f 33ff 	mov.w	r3, #4294967295
 8004046:	e010      	b.n	800406a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	331c      	adds	r3, #28
 800404c:	2100      	movs	r1, #0
 800404e:	4618      	mov	r0, r3
 8004050:	f000 ff00 	bl	8004e54 <lsm6dsl_xl_data_rate_set>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800405a:	f04f 33ff 	mov.w	r3, #4294967295
 800405e:	e004      	b.n	800406a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	331c      	adds	r3, #28
 8004086:	f107 020b 	add.w	r2, r7, #11
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fea9 	bl	8004de4 <lsm6dsl_xl_full_scale_get>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
 800409c:	e023      	b.n	80040e6 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800409e:	7afb      	ldrb	r3, [r7, #11]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d81b      	bhi.n	80040dc <LSM6DSL_ACC_GetSensitivity+0x68>
 80040a4:	a201      	add	r2, pc, #4	; (adr r2, 80040ac <LSM6DSL_ACC_GetSensitivity+0x38>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040bd 	.word	0x080040bd
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	080040cd 	.word	0x080040cd
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 80040c0:	601a      	str	r2, [r3, #0]
      break;
 80040c2:	e00f      	b.n	80040e4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	4a0b      	ldr	r2, [pc, #44]	; (80040f4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 80040c8:	601a      	str	r2, [r3, #0]
      break;
 80040ca:	e00b      	b.n	80040e4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 80040d0:	601a      	str	r2, [r3, #0]
      break;
 80040d2:	e007      	b.n	80040e4 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4a09      	ldr	r2, [pc, #36]	; (80040fc <LSM6DSL_ACC_GetSensitivity+0x88>)
 80040d8:	601a      	str	r2, [r3, #0]
      break;
 80040da:	e003      	b.n	80040e4 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80040dc:	f04f 33ff 	mov.w	r3, #4294967295
 80040e0:	60fb      	str	r3, [r7, #12]
      break;
 80040e2:	bf00      	nop
  }

  return ret;
 80040e4:	68fb      	ldr	r3, [r7, #12]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	3d79db23 	.word	0x3d79db23
 80040f4:	3df9db23 	.word	0x3df9db23
 80040f8:	3e79db23 	.word	0x3e79db23
 80040fc:	3ef9db23 	.word	0x3ef9db23

08004100 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	331c      	adds	r3, #28
 8004112:	f107 020b 	add.w	r2, r7, #11
 8004116:	4611      	mov	r1, r2
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fec1 	bl	8004ea0 <lsm6dsl_xl_data_rate_get>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	e054      	b.n	80041d4 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800412a:	7afb      	ldrb	r3, [r7, #11]
 800412c:	2b0b      	cmp	r3, #11
 800412e:	d84c      	bhi.n	80041ca <LSM6DSL_ACC_GetOutputDataRate+0xca>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	08004169 	.word	0x08004169
 800413c:	0800417b 	.word	0x0800417b
 8004140:	08004183 	.word	0x08004183
 8004144:	0800418b 	.word	0x0800418b
 8004148:	08004193 	.word	0x08004193
 800414c:	0800419b 	.word	0x0800419b
 8004150:	080041a3 	.word	0x080041a3
 8004154:	080041ab 	.word	0x080041ab
 8004158:	080041b3 	.word	0x080041b3
 800415c:	080041bb 	.word	0x080041bb
 8004160:	080041c3 	.word	0x080041c3
 8004164:	08004173 	.word	0x08004173
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
      break;
 8004170:	e02f      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	4a19      	ldr	r2, [pc, #100]	; (80041dc <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004176:	601a      	str	r2, [r3, #0]
      break;
 8004178:	e02b      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	4a18      	ldr	r2, [pc, #96]	; (80041e0 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800417e:	601a      	str	r2, [r3, #0]
      break;
 8004180:	e027      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004186:	601a      	str	r2, [r3, #0]
      break;
 8004188:	e023      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800418e:	601a      	str	r2, [r3, #0]
      break;
 8004190:	e01f      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	4a15      	ldr	r2, [pc, #84]	; (80041ec <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004196:	601a      	str	r2, [r3, #0]
      break;
 8004198:	e01b      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800419e:	601a      	str	r2, [r3, #0]
      break;
 80041a0:	e017      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 80041a6:	601a      	str	r2, [r3, #0]
      break;
 80041a8:	e013      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 80041ae:	601a      	str	r2, [r3, #0]
      break;
 80041b0:	e00f      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	4a11      	ldr	r2, [pc, #68]	; (80041fc <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 80041b6:	601a      	str	r2, [r3, #0]
      break;
 80041b8:	e00b      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	4a10      	ldr	r2, [pc, #64]	; (8004200 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 80041be:	601a      	str	r2, [r3, #0]
      break;
 80041c0:	e007      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	4a0f      	ldr	r2, [pc, #60]	; (8004204 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 80041c6:	601a      	str	r2, [r3, #0]
      break;
 80041c8:	e003      	b.n	80041d2 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	60fb      	str	r3, [r7, #12]
      break;
 80041d0:	bf00      	nop
  }

  return ret;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	3fcccccd 	.word	0x3fcccccd
 80041e0:	41480000 	.word	0x41480000
 80041e4:	41d00000 	.word	0x41d00000
 80041e8:	42500000 	.word	0x42500000
 80041ec:	42d00000 	.word	0x42d00000
 80041f0:	43500000 	.word	0x43500000
 80041f4:	43d00000 	.word	0x43d00000
 80041f8:	44504000 	.word	0x44504000
 80041fc:	44cf8000 	.word	0x44cf8000
 8004200:	45502000 	.word	0x45502000
 8004204:	45d02000 	.word	0x45d02000

08004208 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800421a:	2b01      	cmp	r3, #1
 800421c:	d106      	bne.n	800422c <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800421e:	ed97 0a00 	vldr	s0, [r7]
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fb36 	bl	8004894 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8004228:	4603      	mov	r3, r0
 800422a:	e005      	b.n	8004238 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 800422c:	ed97 0a00 	vldr	s0, [r7]
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fbbb 	bl	80049ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8004236:	4603      	mov	r3, r0
  }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	331c      	adds	r3, #28
 8004252:	f107 020b 	add.w	r2, r7, #11
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fdc3 	bl	8004de4 <lsm6dsl_xl_full_scale_get>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004264:	f04f 33ff 	mov.w	r3, #4294967295
 8004268:	e023      	b.n	80042b2 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800426a:	7afb      	ldrb	r3, [r7, #11]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d81b      	bhi.n	80042a8 <LSM6DSL_ACC_GetFullScale+0x68>
 8004270:	a201      	add	r2, pc, #4	; (adr r2, 8004278 <LSM6DSL_ACC_GetFullScale+0x38>)
 8004272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004276:	bf00      	nop
 8004278:	08004289 	.word	0x08004289
 800427c:	080042a1 	.word	0x080042a1
 8004280:	08004291 	.word	0x08004291
 8004284:	08004299 	.word	0x08004299
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2202      	movs	r2, #2
 800428c:	601a      	str	r2, [r3, #0]
      break;
 800428e:	e00f      	b.n	80042b0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2204      	movs	r2, #4
 8004294:	601a      	str	r2, [r3, #0]
      break;
 8004296:	e00b      	b.n	80042b0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2208      	movs	r2, #8
 800429c:	601a      	str	r2, [r3, #0]
      break;
 800429e:	e007      	b.n	80042b0 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2210      	movs	r2, #16
 80042a4:	601a      	str	r2, [r3, #0]
      break;
 80042a6:	e003      	b.n	80042b0 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 80042a8:	f04f 33ff 	mov.w	r3, #4294967295
 80042ac:	60fb      	str	r3, [r7, #12]
      break;
 80042ae:	bf00      	nop
  }

  return ret;
 80042b0:	68fb      	ldr	r3, [r7, #12]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop

080042bc <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	dd0b      	ble.n	80042e4 <LSM6DSL_ACC_SetFullScale+0x28>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	dd06      	ble.n	80042e0 <LSM6DSL_ACC_SetFullScale+0x24>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	dc01      	bgt.n	80042dc <LSM6DSL_ACC_SetFullScale+0x20>
 80042d8:	2303      	movs	r3, #3
 80042da:	e004      	b.n	80042e6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80042dc:	2301      	movs	r3, #1
 80042de:	e002      	b.n	80042e6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e000      	b.n	80042e6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80042e4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80042e6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	331c      	adds	r3, #28
 80042ec:	7bfa      	ldrb	r2, [r7, #15]
 80042ee:	4611      	mov	r1, r2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fd51 	bl	8004d98 <lsm6dsl_xl_full_scale_set>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80042fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004300:	e000      	b.n	8004304 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	331c      	adds	r3, #28
 800431a:	f107 0208 	add.w	r2, r7, #8
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f000 ff86 	bl	8005232 <lsm6dsl_acceleration_raw_get>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295
 8004330:	e00c      	b.n	800434c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004332:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800433a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004342:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	331c      	adds	r3, #28
 8004368:	f107 0210 	add.w	r2, r7, #16
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f000 ff5f 	bl	8005232 <lsm6dsl_acceleration_raw_get>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e03c      	b.n	80043fa <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fe74 	bl	8004074 <LSM6DSL_ACC_GetSensitivity>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	e030      	b.n	80043fa <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004398:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800439c:	ee07 3a90 	vmov	s15, r3
 80043a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80043a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043b0:	ee17 2a90 	vmov	r2, s15
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80043b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80043c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d0:	ee17 2a90 	vmov	r2, s15
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80043d8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80043e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043f0:	ee17 2a90 	vmov	r2, s15
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004410:	2b01      	cmp	r3, #1
 8004412:	d101      	bne.n	8004418 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e014      	b.n	8004442 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f103 021c 	add.w	r2, r3, #28
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004424:	4619      	mov	r1, r3
 8004426:	4610      	mov	r0, r2
 8004428:	f000 fe0a 	bl	8005040 <lsm6dsl_gy_data_rate_set>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8004432:	f04f 33ff 	mov.w	r3, #4294967295
 8004436:	e004      	b.n	8004442 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 800445c:	2300      	movs	r3, #0
 800445e:	e01f      	b.n	80044a0 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f103 021c 	add.w	r2, r3, #28
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	332c      	adds	r3, #44	; 0x2c
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f000 fe0d 	bl	800508c <lsm6dsl_gy_data_rate_get>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004478:	f04f 33ff 	mov.w	r3, #4294967295
 800447c:	e010      	b.n	80044a0 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	331c      	adds	r3, #28
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fddb 	bl	8005040 <lsm6dsl_gy_data_rate_set>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004490:	f04f 33ff 	mov.w	r3, #4294967295
 8004494:	e004      	b.n	80044a0 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	331c      	adds	r3, #28
 80044ba:	f107 020b 	add.w	r2, r7, #11
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fd7b 	bl	8004fbc <lsm6dsl_gy_full_scale_get>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80044cc:	f04f 33ff 	mov.w	r3, #4294967295
 80044d0:	e02d      	b.n	800452e <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80044d2:	7afb      	ldrb	r3, [r7, #11]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d825      	bhi.n	8004524 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004505 	.word	0x08004505
 80044e4:	080044fd 	.word	0x080044fd
 80044e8:	0800450d 	.word	0x0800450d
 80044ec:	08004525 	.word	0x08004525
 80044f0:	08004515 	.word	0x08004515
 80044f4:	08004525 	.word	0x08004525
 80044f8:	0800451d 	.word	0x0800451d
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	4a0e      	ldr	r2, [pc, #56]	; (8004538 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 8004500:	601a      	str	r2, [r3, #0]
      break;
 8004502:	e013      	b.n	800452c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	4a0d      	ldr	r2, [pc, #52]	; (800453c <LSM6DSL_GYRO_GetSensitivity+0x94>)
 8004508:	601a      	str	r2, [r3, #0]
      break;
 800450a:	e00f      	b.n	800452c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	4a0c      	ldr	r2, [pc, #48]	; (8004540 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 8004510:	601a      	str	r2, [r3, #0]
      break;
 8004512:	e00b      	b.n	800452c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4a0b      	ldr	r2, [pc, #44]	; (8004544 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 8004518:	601a      	str	r2, [r3, #0]
      break;
 800451a:	e007      	b.n	800452c <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4a0a      	ldr	r2, [pc, #40]	; (8004548 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 8004520:	601a      	str	r2, [r3, #0]
      break;
 8004522:	e003      	b.n	800452c <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 8004524:	f04f 33ff 	mov.w	r3, #4294967295
 8004528:	60fb      	str	r3, [r7, #12]
      break;
 800452a:	bf00      	nop
  }

  return ret;
 800452c:	68fb      	ldr	r3, [r7, #12]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	408c0000 	.word	0x408c0000
 800453c:	410c0000 	.word	0x410c0000
 8004540:	418c0000 	.word	0x418c0000
 8004544:	420c0000 	.word	0x420c0000
 8004548:	428c0000 	.word	0x428c0000

0800454c <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	331c      	adds	r3, #28
 800455e:	f107 020b 	add.w	r2, r7, #11
 8004562:	4611      	mov	r1, r2
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fd91 	bl	800508c <lsm6dsl_gy_data_rate_get>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004570:	f04f 33ff 	mov.w	r3, #4294967295
 8004574:	e04e      	b.n	8004614 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004576:	7afb      	ldrb	r3, [r7, #11]
 8004578:	2b0a      	cmp	r3, #10
 800457a:	d846      	bhi.n	800460a <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800457c:	a201      	add	r2, pc, #4	; (adr r2, 8004584 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045b1 	.word	0x080045b1
 8004588:	080045bb 	.word	0x080045bb
 800458c:	080045c3 	.word	0x080045c3
 8004590:	080045cb 	.word	0x080045cb
 8004594:	080045d3 	.word	0x080045d3
 8004598:	080045db 	.word	0x080045db
 800459c:	080045e3 	.word	0x080045e3
 80045a0:	080045eb 	.word	0x080045eb
 80045a4:	080045f3 	.word	0x080045f3
 80045a8:	080045fb 	.word	0x080045fb
 80045ac:	08004603 	.word	0x08004603
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
      break;
 80045b8:	e02b      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	4a17      	ldr	r2, [pc, #92]	; (800461c <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 80045be:	601a      	str	r2, [r3, #0]
      break;
 80045c0:	e027      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	4a16      	ldr	r2, [pc, #88]	; (8004620 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 80045c6:	601a      	str	r2, [r3, #0]
      break;
 80045c8:	e023      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	4a15      	ldr	r2, [pc, #84]	; (8004624 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 80045ce:	601a      	str	r2, [r3, #0]
      break;
 80045d0:	e01f      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	4a14      	ldr	r2, [pc, #80]	; (8004628 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 80045d6:	601a      	str	r2, [r3, #0]
      break;
 80045d8:	e01b      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	4a13      	ldr	r2, [pc, #76]	; (800462c <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 80045de:	601a      	str	r2, [r3, #0]
      break;
 80045e0:	e017      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	4a12      	ldr	r2, [pc, #72]	; (8004630 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 80045e6:	601a      	str	r2, [r3, #0]
      break;
 80045e8:	e013      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	4a11      	ldr	r2, [pc, #68]	; (8004634 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 80045ee:	601a      	str	r2, [r3, #0]
      break;
 80045f0:	e00f      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	4a10      	ldr	r2, [pc, #64]	; (8004638 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80045f6:	601a      	str	r2, [r3, #0]
      break;
 80045f8:	e00b      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	4a0f      	ldr	r2, [pc, #60]	; (800463c <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80045fe:	601a      	str	r2, [r3, #0]
      break;
 8004600:	e007      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	4a0e      	ldr	r2, [pc, #56]	; (8004640 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 8004606:	601a      	str	r2, [r3, #0]
      break;
 8004608:	e003      	b.n	8004612 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 800460a:	f04f 33ff 	mov.w	r3, #4294967295
 800460e:	60fb      	str	r3, [r7, #12]
      break;
 8004610:	bf00      	nop
  }

  return ret;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	41480000 	.word	0x41480000
 8004620:	41d00000 	.word	0x41d00000
 8004624:	42500000 	.word	0x42500000
 8004628:	42d00000 	.word	0x42d00000
 800462c:	43500000 	.word	0x43500000
 8004630:	43d00000 	.word	0x43d00000
 8004634:	44504000 	.word	0x44504000
 8004638:	44cf8000 	.word	0x44cf8000
 800463c:	45502000 	.word	0x45502000
 8004640:	45d02000 	.word	0x45d02000

08004644 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004656:	2b01      	cmp	r3, #1
 8004658:	d106      	bne.n	8004668 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 800465a:	ed97 0a00 	vldr	s0, [r7]
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 fa26 	bl	8004ab0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004664:	4603      	mov	r3, r0
 8004666:	e005      	b.n	8004674 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004668:	ed97 0a00 	vldr	s0, [r7]
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 faab 	bl	8004bc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004672:	4603      	mov	r3, r0
  }
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	331c      	adds	r3, #28
 800468e:	f107 020b 	add.w	r2, r7, #11
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fc91 	bl	8004fbc <lsm6dsl_gy_full_scale_get>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 80046a0:	f04f 33ff 	mov.w	r3, #4294967295
 80046a4:	e030      	b.n	8004708 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80046a6:	7afb      	ldrb	r3, [r7, #11]
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d828      	bhi.n	80046fe <LSM6DSL_GYRO_GetFullScale+0x82>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <LSM6DSL_GYRO_GetFullScale+0x38>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046d9 	.word	0x080046d9
 80046b8:	080046d1 	.word	0x080046d1
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	080046ff 	.word	0x080046ff
 80046c4:	080046eb 	.word	0x080046eb
 80046c8:	080046ff 	.word	0x080046ff
 80046cc:	080046f5 	.word	0x080046f5
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	227d      	movs	r2, #125	; 0x7d
 80046d4:	601a      	str	r2, [r3, #0]
      break;
 80046d6:	e016      	b.n	8004706 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	22fa      	movs	r2, #250	; 0xfa
 80046dc:	601a      	str	r2, [r3, #0]
      break;
 80046de:	e012      	b.n	8004706 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046e6:	601a      	str	r2, [r3, #0]
      break;
 80046e8:	e00d      	b.n	8004706 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046f0:	601a      	str	r2, [r3, #0]
      break;
 80046f2:	e008      	b.n	8004706 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80046fa:	601a      	str	r2, [r3, #0]
      break;
 80046fc:	e003      	b.n	8004706 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004702:	60fb      	str	r3, [r7, #12]
      break;
 8004704:	bf00      	nop
  }

  return ret;
 8004706:	68fb      	ldr	r3, [r7, #12]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b7d      	cmp	r3, #125	; 0x7d
 800471e:	dd12      	ble.n	8004746 <LSM6DSL_GYRO_SetFullScale+0x36>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2bfa      	cmp	r3, #250	; 0xfa
 8004724:	dd0d      	ble.n	8004742 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800472c:	dd07      	ble.n	800473e <LSM6DSL_GYRO_SetFullScale+0x2e>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004734:	dc01      	bgt.n	800473a <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004736:	2304      	movs	r3, #4
 8004738:	e006      	b.n	8004748 <LSM6DSL_GYRO_SetFullScale+0x38>
 800473a:	2306      	movs	r3, #6
 800473c:	e004      	b.n	8004748 <LSM6DSL_GYRO_SetFullScale+0x38>
 800473e:	2302      	movs	r3, #2
 8004740:	e002      	b.n	8004748 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004746:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004748:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	331c      	adds	r3, #28
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	4611      	mov	r1, r2
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fc0c 	bl	8004f70 <lsm6dsl_gy_full_scale_set>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	e000      	b.n	8004766 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	331c      	adds	r3, #28
 800477c:	f107 0208 	add.w	r2, r7, #8
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fd0a 	bl	800519c <lsm6dsl_angular_rate_raw_get>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 800478e:	f04f 33ff 	mov.w	r3, #4294967295
 8004792:	e00c      	b.n	80047ae <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004794:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800479c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80047a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b086      	sub	sp, #24
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	331c      	adds	r3, #28
 80047c4:	f107 0210 	add.w	r2, r7, #16
 80047c8:	4611      	mov	r1, r2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fce6 	bl	800519c <lsm6dsl_angular_rate_raw_get>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295
 80047da:	e03c      	b.n	8004856 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fe60 	bl	80044a8 <LSM6DSL_GYRO_GetSensitivity>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 80047ee:	f04f 33ff 	mov.w	r3, #4294967295
 80047f2:	e030      	b.n	8004856 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80047f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80047f8:	ee07 3a90 	vmov	s15, r3
 80047fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004800:	edd7 7a03 	vldr	s15, [r7, #12]
 8004804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800480c:	ee17 2a90 	vmov	r2, s15
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004814:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004820:	edd7 7a03 	vldr	s15, [r7, #12]
 8004824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004828:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800482c:	ee17 2a90 	vmov	r2, s15
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004834:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004840:	edd7 7a03 	vldr	s15, [r7, #12]
 8004844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800484c:	ee17 2a90 	vmov	r2, s15
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	460b      	mov	r3, r1
 8004868:	70fb      	strb	r3, [r7, #3]
 800486a:	4613      	mov	r3, r2
 800486c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f103 001c 	add.w	r0, r3, #28
 8004874:	1cba      	adds	r2, r7, #2
 8004876:	78f9      	ldrb	r1, [r7, #3]
 8004878:	2301      	movs	r3, #1
 800487a:	f000 fa75 	bl	8004d68 <lsm6dsl_write_reg>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004884:	f04f 33ff 	mov.w	r3, #4294967295
 8004888:	e000      	b.n	800488c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80048a0:	edd7 7a00 	vldr	s15, [r7]
 80048a4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80048a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b0:	d801      	bhi.n	80048b6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 80048b2:	2301      	movs	r3, #1
 80048b4:	e058      	b.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048b6:	edd7 7a00 	vldr	s15, [r7]
 80048ba:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80048be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c6:	d801      	bhi.n	80048cc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e04d      	b.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048cc:	edd7 7a00 	vldr	s15, [r7]
 80048d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004990 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 80048d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048dc:	d801      	bhi.n	80048e2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80048de:	2303      	movs	r3, #3
 80048e0:	e042      	b.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048e2:	edd7 7a00 	vldr	s15, [r7]
 80048e6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004994 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 80048ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f2:	d801      	bhi.n	80048f8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 80048f4:	2304      	movs	r3, #4
 80048f6:	e037      	b.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 80048f8:	edd7 7a00 	vldr	s15, [r7]
 80048fc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004998 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004908:	d801      	bhi.n	800490e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 800490a:	2305      	movs	r3, #5
 800490c:	e02c      	b.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800490e:	edd7 7a00 	vldr	s15, [r7]
 8004912:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800499c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	d801      	bhi.n	8004924 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004920:	2306      	movs	r3, #6
 8004922:	e021      	b.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004924:	edd7 7a00 	vldr	s15, [r7]
 8004928:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80049a0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 800492c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004934:	d801      	bhi.n	800493a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004936:	2307      	movs	r3, #7
 8004938:	e016      	b.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 800493a:	edd7 7a00 	vldr	s15, [r7]
 800493e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80049a4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494a:	d801      	bhi.n	8004950 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 800494c:	2308      	movs	r3, #8
 800494e:	e00b      	b.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004950:	edd7 7a00 	vldr	s15, [r7]
 8004954:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80049a8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004958:	eef4 7ac7 	vcmpe.f32	s15, s14
 800495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004960:	d801      	bhi.n	8004966 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004962:	2309      	movs	r3, #9
 8004964:	e000      	b.n	8004968 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004966:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004968:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	331c      	adds	r3, #28
 800496e:	7bfa      	ldrb	r2, [r7, #15]
 8004970:	4611      	mov	r1, r2
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fa6e 	bl	8004e54 <lsm6dsl_xl_data_rate_set>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d002      	beq.n	8004984 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 800497e:	f04f 33ff 	mov.w	r3, #4294967295
 8004982:	e000      	b.n	8004986 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	42500000 	.word	0x42500000
 8004994:	42d00000 	.word	0x42d00000
 8004998:	43500000 	.word	0x43500000
 800499c:	43d00000 	.word	0x43d00000
 80049a0:	44504000 	.word	0x44504000
 80049a4:	44cf8000 	.word	0x44cf8000
 80049a8:	45502000 	.word	0x45502000

080049ac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 80049b8:	edd7 7a00 	vldr	s15, [r7]
 80049bc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80049c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c8:	d801      	bhi.n	80049ce <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e058      	b.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80049ce:	edd7 7a00 	vldr	s15, [r7]
 80049d2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80049d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049de:	d801      	bhi.n	80049e4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e04d      	b.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80049e4:	edd7 7a00 	vldr	s15, [r7]
 80049e8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004a94 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80049ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f4:	d801      	bhi.n	80049fa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80049f6:	2303      	movs	r3, #3
 80049f8:	e042      	b.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80049fa:	edd7 7a00 	vldr	s15, [r7]
 80049fe:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004a98 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0a:	d801      	bhi.n	8004a10 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	e037      	b.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a10:	edd7 7a00 	vldr	s15, [r7]
 8004a14:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004a9c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a20:	d801      	bhi.n	8004a26 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004a22:	2305      	movs	r3, #5
 8004a24:	e02c      	b.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a26:	edd7 7a00 	vldr	s15, [r7]
 8004a2a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004aa0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a36:	d801      	bhi.n	8004a3c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004a38:	2306      	movs	r3, #6
 8004a3a:	e021      	b.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a3c:	edd7 7a00 	vldr	s15, [r7]
 8004a40:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004aa4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4c:	d801      	bhi.n	8004a52 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004a4e:	2307      	movs	r3, #7
 8004a50:	e016      	b.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a52:	edd7 7a00 	vldr	s15, [r7]
 8004a56:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004aa8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004a5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	d801      	bhi.n	8004a68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004a64:	2308      	movs	r3, #8
 8004a66:	e00b      	b.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a68:	edd7 7a00 	vldr	s15, [r7]
 8004a6c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004aac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	d801      	bhi.n	8004a7e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004a7a:	2309      	movs	r3, #9
 8004a7c:	e000      	b.n	8004a80 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004a7e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	42500000 	.word	0x42500000
 8004a98:	42d00000 	.word	0x42d00000
 8004a9c:	43500000 	.word	0x43500000
 8004aa0:	43d00000 	.word	0x43d00000
 8004aa4:	44504000 	.word	0x44504000
 8004aa8:	44cf8000 	.word	0x44cf8000
 8004aac:	45502000 	.word	0x45502000

08004ab0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004abc:	edd7 7a00 	vldr	s15, [r7]
 8004ac0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004ac4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004acc:	d801      	bhi.n	8004ad2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e058      	b.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ad2:	edd7 7a00 	vldr	s15, [r7]
 8004ad6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004ada:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae2:	d801      	bhi.n	8004ae8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e04d      	b.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ae8:	edd7 7a00 	vldr	s15, [r7]
 8004aec:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004bac <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af8:	d801      	bhi.n	8004afe <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004afa:	2303      	movs	r3, #3
 8004afc:	e042      	b.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004afe:	edd7 7a00 	vldr	s15, [r7]
 8004b02:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004bb0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0e:	d801      	bhi.n	8004b14 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004b10:	2304      	movs	r3, #4
 8004b12:	e037      	b.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b14:	edd7 7a00 	vldr	s15, [r7]
 8004b18:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004bb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b24:	d801      	bhi.n	8004b2a <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004b26:	2305      	movs	r3, #5
 8004b28:	e02c      	b.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b2a:	edd7 7a00 	vldr	s15, [r7]
 8004b2e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004bb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b3a:	d801      	bhi.n	8004b40 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004b3c:	2306      	movs	r3, #6
 8004b3e:	e021      	b.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b40:	edd7 7a00 	vldr	s15, [r7]
 8004b44:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004bbc <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004b48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b50:	d801      	bhi.n	8004b56 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004b52:	2307      	movs	r3, #7
 8004b54:	e016      	b.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b56:	edd7 7a00 	vldr	s15, [r7]
 8004b5a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004bc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b66:	d801      	bhi.n	8004b6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004b68:	2308      	movs	r3, #8
 8004b6a:	e00b      	b.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b6c:	edd7 7a00 	vldr	s15, [r7]
 8004b70:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004bc4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7c:	d801      	bhi.n	8004b82 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004b7e:	2309      	movs	r3, #9
 8004b80:	e000      	b.n	8004b84 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004b82:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004b84:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	331c      	adds	r3, #28
 8004b8a:	7bfa      	ldrb	r2, [r7, #15]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fa56 	bl	8005040 <lsm6dsl_gy_data_rate_set>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9e:	e000      	b.n	8004ba2 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	42500000 	.word	0x42500000
 8004bb0:	42d00000 	.word	0x42d00000
 8004bb4:	43500000 	.word	0x43500000
 8004bb8:	43d00000 	.word	0x43d00000
 8004bbc:	44504000 	.word	0x44504000
 8004bc0:	44cf8000 	.word	0x44cf8000
 8004bc4:	45502000 	.word	0x45502000

08004bc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004bd4:	edd7 7a00 	vldr	s15, [r7]
 8004bd8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be4:	d801      	bhi.n	8004bea <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e058      	b.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004bea:	edd7 7a00 	vldr	s15, [r7]
 8004bee:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004bf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfa:	d801      	bhi.n	8004c00 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e04d      	b.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c00:	edd7 7a00 	vldr	s15, [r7]
 8004c04:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004cb0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c10:	d801      	bhi.n	8004c16 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004c12:	2303      	movs	r3, #3
 8004c14:	e042      	b.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c16:	edd7 7a00 	vldr	s15, [r7]
 8004c1a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004cb4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004c1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c26:	d801      	bhi.n	8004c2c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	e037      	b.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c2c:	edd7 7a00 	vldr	s15, [r7]
 8004c30:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004cb8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3c:	d801      	bhi.n	8004c42 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004c3e:	2305      	movs	r3, #5
 8004c40:	e02c      	b.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c42:	edd7 7a00 	vldr	s15, [r7]
 8004c46:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004cbc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004c4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c52:	d801      	bhi.n	8004c58 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8004c54:	2306      	movs	r3, #6
 8004c56:	e021      	b.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c58:	edd7 7a00 	vldr	s15, [r7]
 8004c5c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004cc0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8004c60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c68:	d801      	bhi.n	8004c6e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	e016      	b.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c6e:	edd7 7a00 	vldr	s15, [r7]
 8004c72:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004cc4 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8004c76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7e:	d801      	bhi.n	8004c84 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8004c80:	2308      	movs	r3, #8
 8004c82:	e00b      	b.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c84:	edd7 7a00 	vldr	s15, [r7]
 8004c88:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004cc8 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8004c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c94:	d801      	bhi.n	8004c9a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8004c96:	2309      	movs	r3, #9
 8004c98:	e000      	b.n	8004c9c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004c9a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	42500000 	.word	0x42500000
 8004cb4:	42d00000 	.word	0x42d00000
 8004cb8:	43500000 	.word	0x43500000
 8004cbc:	43d00000 	.word	0x43d00000
 8004cc0:	44504000 	.word	0x44504000
 8004cc4:	44cf8000 	.word	0x44cf8000
 8004cc8:	45502000 	.word	0x45502000

08004ccc <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	607a      	str	r2, [r7, #4]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	460b      	mov	r3, r1
 8004cda:	72fb      	strb	r3, [r7, #11]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	695c      	ldr	r4, [r3, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	7b1b      	ldrb	r3, [r3, #12]
 8004cec:	b298      	uxth	r0, r3
 8004cee:	7afb      	ldrb	r3, [r7, #11]
 8004cf0:	b299      	uxth	r1, r3
 8004cf2:	893b      	ldrh	r3, [r7, #8]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	47a0      	blx	r4
 8004cf8:	4603      	mov	r3, r0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd90      	pop	{r4, r7, pc}

08004d02 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d02:	b590      	push	{r4, r7, lr}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	460b      	mov	r3, r1
 8004d10:	72fb      	strb	r3, [r7, #11]
 8004d12:	4613      	mov	r3, r2
 8004d14:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	691c      	ldr	r4, [r3, #16]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	7b1b      	ldrb	r3, [r3, #12]
 8004d22:	b298      	uxth	r0, r3
 8004d24:	7afb      	ldrb	r3, [r7, #11]
 8004d26:	b299      	uxth	r1, r3
 8004d28:	893b      	ldrh	r3, [r7, #8]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	47a0      	blx	r4
 8004d2e:	4603      	mov	r3, r0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd90      	pop	{r4, r7, pc}

08004d38 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004d38:	b590      	push	{r4, r7, lr}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	461a      	mov	r2, r3
 8004d44:	460b      	mov	r3, r1
 8004d46:	72fb      	strb	r3, [r7, #11]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	685c      	ldr	r4, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6898      	ldr	r0, [r3, #8]
 8004d54:	893b      	ldrh	r3, [r7, #8]
 8004d56:	7af9      	ldrb	r1, [r7, #11]
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	47a0      	blx	r4
 8004d5c:	6178      	str	r0, [r7, #20]
  return ret;
 8004d5e:	697b      	ldr	r3, [r7, #20]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	371c      	adds	r7, #28
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd90      	pop	{r4, r7, pc}

08004d68 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	461a      	mov	r2, r3
 8004d74:	460b      	mov	r3, r1
 8004d76:	72fb      	strb	r3, [r7, #11]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681c      	ldr	r4, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6898      	ldr	r0, [r3, #8]
 8004d84:	893b      	ldrh	r3, [r7, #8]
 8004d86:	7af9      	ldrb	r1, [r7, #11]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	47a0      	blx	r4
 8004d8c:	6178      	str	r0, [r7, #20]
  return ret;
 8004d8e:	697b      	ldr	r3, [r7, #20]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	371c      	adds	r7, #28
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd90      	pop	{r4, r7, pc}

08004d98 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004da4:	f107 0208 	add.w	r2, r7, #8
 8004da8:	2301      	movs	r3, #1
 8004daa:	2110      	movs	r1, #16
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ffc3 	bl	8004d38 <lsm6dsl_read_reg>
 8004db2:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10f      	bne.n	8004dda <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	7a3b      	ldrb	r3, [r7, #8]
 8004dc4:	f362 0383 	bfi	r3, r2, #2, #2
 8004dc8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004dca:	f107 0208 	add.w	r2, r7, #8
 8004dce:	2301      	movs	r3, #1
 8004dd0:	2110      	movs	r1, #16
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff ffc8 	bl	8004d68 <lsm6dsl_write_reg>
 8004dd8:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004dda:	68fb      	ldr	r3, [r7, #12]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004dee:	f107 0208 	add.w	r2, r7, #8
 8004df2:	2301      	movs	r3, #1
 8004df4:	2110      	movs	r1, #16
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff ff9e 	bl	8004d38 <lsm6dsl_read_reg>
 8004dfc:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8004dfe:	7a3b      	ldrb	r3, [r7, #8]
 8004e00:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d81a      	bhi.n	8004e40 <lsm6dsl_xl_full_scale_get+0x5c>
 8004e0a:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <lsm6dsl_xl_full_scale_get+0x2c>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e29 	.word	0x08004e29
 8004e18:	08004e31 	.word	0x08004e31
 8004e1c:	08004e39 	.word	0x08004e39
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
      break;
 8004e26:	e00f      	b.n	8004e48 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
      break;
 8004e2e:	e00b      	b.n	8004e48 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2202      	movs	r2, #2
 8004e34:	701a      	strb	r2, [r3, #0]
      break;
 8004e36:	e007      	b.n	8004e48 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2203      	movs	r2, #3
 8004e3c:	701a      	strb	r2, [r3, #0]
      break;
 8004e3e:	e003      	b.n	8004e48 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2204      	movs	r2, #4
 8004e44:	701a      	strb	r2, [r3, #0]
      break;
 8004e46:	bf00      	nop
  }

  return ret;
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop

08004e54 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004e60:	f107 0208 	add.w	r2, r7, #8
 8004e64:	2301      	movs	r3, #1
 8004e66:	2110      	movs	r1, #16
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff ff65 	bl	8004d38 <lsm6dsl_read_reg>
 8004e6e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10f      	bne.n	8004e96 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	f003 030f 	and.w	r3, r3, #15
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	7a3b      	ldrb	r3, [r7, #8]
 8004e80:	f362 1307 	bfi	r3, r2, #4, #4
 8004e84:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004e86:	f107 0208 	add.w	r2, r7, #8
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	2110      	movs	r1, #16
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ff6a 	bl	8004d68 <lsm6dsl_write_reg>
 8004e94:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8004e96:	68fb      	ldr	r3, [r7, #12]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8004eaa:	f107 0208 	add.w	r2, r7, #8
 8004eae:	2301      	movs	r3, #1
 8004eb0:	2110      	movs	r1, #16
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff ff40 	bl	8004d38 <lsm6dsl_read_reg>
 8004eb8:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 8004eba:	7a3b      	ldrb	r3, [r7, #8]
 8004ebc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b0b      	cmp	r3, #11
 8004ec4:	d84a      	bhi.n	8004f5c <lsm6dsl_xl_data_rate_get+0xbc>
 8004ec6:	a201      	add	r2, pc, #4	; (adr r2, 8004ecc <lsm6dsl_xl_data_rate_get+0x2c>)
 8004ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ecc:	08004efd 	.word	0x08004efd
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08004f0d 	.word	0x08004f0d
 8004ed8:	08004f15 	.word	0x08004f15
 8004edc:	08004f1d 	.word	0x08004f1d
 8004ee0:	08004f25 	.word	0x08004f25
 8004ee4:	08004f2d 	.word	0x08004f2d
 8004ee8:	08004f35 	.word	0x08004f35
 8004eec:	08004f3d 	.word	0x08004f3d
 8004ef0:	08004f45 	.word	0x08004f45
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f55 	.word	0x08004f55
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
      break;
 8004f02:	e02f      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
      break;
 8004f0a:	e02b      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	701a      	strb	r2, [r3, #0]
      break;
 8004f12:	e027      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2203      	movs	r2, #3
 8004f18:	701a      	strb	r2, [r3, #0]
      break;
 8004f1a:	e023      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2204      	movs	r2, #4
 8004f20:	701a      	strb	r2, [r3, #0]
      break;
 8004f22:	e01f      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	2205      	movs	r2, #5
 8004f28:	701a      	strb	r2, [r3, #0]
      break;
 8004f2a:	e01b      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2206      	movs	r2, #6
 8004f30:	701a      	strb	r2, [r3, #0]
      break;
 8004f32:	e017      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	2207      	movs	r2, #7
 8004f38:	701a      	strb	r2, [r3, #0]
      break;
 8004f3a:	e013      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2208      	movs	r2, #8
 8004f40:	701a      	strb	r2, [r3, #0]
      break;
 8004f42:	e00f      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2209      	movs	r2, #9
 8004f48:	701a      	strb	r2, [r3, #0]
      break;
 8004f4a:	e00b      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	220a      	movs	r2, #10
 8004f50:	701a      	strb	r2, [r3, #0]
      break;
 8004f52:	e007      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	220b      	movs	r2, #11
 8004f58:	701a      	strb	r2, [r3, #0]
      break;
 8004f5a:	e003      	b.n	8004f64 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	220c      	movs	r2, #12
 8004f60:	701a      	strb	r2, [r3, #0]
      break;
 8004f62:	bf00      	nop
  }

  return ret;
 8004f64:	68fb      	ldr	r3, [r7, #12]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop

08004f70 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004f7c:	f107 0208 	add.w	r2, r7, #8
 8004f80:	2301      	movs	r3, #1
 8004f82:	2111      	movs	r1, #17
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7ff fed7 	bl	8004d38 <lsm6dsl_read_reg>
 8004f8a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10f      	bne.n	8004fb2 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8004f92:	78fb      	ldrb	r3, [r7, #3]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	7a3b      	ldrb	r3, [r7, #8]
 8004f9c:	f362 0343 	bfi	r3, r2, #1, #3
 8004fa0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004fa2:	f107 0208 	add.w	r2, r7, #8
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	2111      	movs	r1, #17
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7ff fedc 	bl	8004d68 <lsm6dsl_write_reg>
 8004fb0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8004fc6:	f107 0208 	add.w	r2, r7, #8
 8004fca:	2301      	movs	r3, #1
 8004fcc:	2111      	movs	r1, #17
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7ff feb2 	bl	8004d38 <lsm6dsl_read_reg>
 8004fd4:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8004fd6:	7a3b      	ldrb	r3, [r7, #8]
 8004fd8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b06      	cmp	r3, #6
 8004fe0:	d824      	bhi.n	800502c <lsm6dsl_gy_full_scale_get+0x70>
 8004fe2:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <lsm6dsl_gy_full_scale_get+0x2c>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005005 	.word	0x08005005
 8004fec:	0800500d 	.word	0x0800500d
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	0800502d 	.word	0x0800502d
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	0800502d 	.word	0x0800502d
 8005000:	08005025 	.word	0x08005025
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]
      break;
 800500a:	e013      	b.n	8005034 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
      break;
 8005012:	e00f      	b.n	8005034 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2202      	movs	r2, #2
 8005018:	701a      	strb	r2, [r3, #0]
      break;
 800501a:	e00b      	b.n	8005034 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2204      	movs	r2, #4
 8005020:	701a      	strb	r2, [r3, #0]
      break;
 8005022:	e007      	b.n	8005034 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2206      	movs	r2, #6
 8005028:	701a      	strb	r2, [r3, #0]
      break;
 800502a:	e003      	b.n	8005034 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	2207      	movs	r2, #7
 8005030:	701a      	strb	r2, [r3, #0]
      break;
 8005032:	bf00      	nop
  }

  return ret;
 8005034:	68fb      	ldr	r3, [r7, #12]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop

08005040 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	460b      	mov	r3, r1
 800504a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800504c:	f107 0208 	add.w	r2, r7, #8
 8005050:	2301      	movs	r3, #1
 8005052:	2111      	movs	r1, #17
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7ff fe6f 	bl	8004d38 <lsm6dsl_read_reg>
 800505a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10f      	bne.n	8005082 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005062:	78fb      	ldrb	r3, [r7, #3]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	b2da      	uxtb	r2, r3
 800506a:	7a3b      	ldrb	r3, [r7, #8]
 800506c:	f362 1307 	bfi	r3, r2, #4, #4
 8005070:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005072:	f107 0208 	add.w	r2, r7, #8
 8005076:	2301      	movs	r3, #1
 8005078:	2111      	movs	r1, #17
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff fe74 	bl	8004d68 <lsm6dsl_write_reg>
 8005080:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005082:	68fb      	ldr	r3, [r7, #12]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005096:	f107 0208 	add.w	r2, r7, #8
 800509a:	2301      	movs	r3, #1
 800509c:	2111      	movs	r1, #17
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f7ff fe4a 	bl	8004d38 <lsm6dsl_read_reg>
 80050a4:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 80050a6:	7a3b      	ldrb	r3, [r7, #8]
 80050a8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b0a      	cmp	r3, #10
 80050b0:	d844      	bhi.n	800513c <lsm6dsl_gy_data_rate_get+0xb0>
 80050b2:	a201      	add	r2, pc, #4	; (adr r2, 80050b8 <lsm6dsl_gy_data_rate_get+0x2c>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050e5 	.word	0x080050e5
 80050bc:	080050ed 	.word	0x080050ed
 80050c0:	080050f5 	.word	0x080050f5
 80050c4:	080050fd 	.word	0x080050fd
 80050c8:	08005105 	.word	0x08005105
 80050cc:	0800510d 	.word	0x0800510d
 80050d0:	08005115 	.word	0x08005115
 80050d4:	0800511d 	.word	0x0800511d
 80050d8:	08005125 	.word	0x08005125
 80050dc:	0800512d 	.word	0x0800512d
 80050e0:	08005135 	.word	0x08005135
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
      break;
 80050ea:	e02b      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2201      	movs	r2, #1
 80050f0:	701a      	strb	r2, [r3, #0]
      break;
 80050f2:	e027      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2202      	movs	r2, #2
 80050f8:	701a      	strb	r2, [r3, #0]
      break;
 80050fa:	e023      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2203      	movs	r2, #3
 8005100:	701a      	strb	r2, [r3, #0]
      break;
 8005102:	e01f      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2204      	movs	r2, #4
 8005108:	701a      	strb	r2, [r3, #0]
      break;
 800510a:	e01b      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2205      	movs	r2, #5
 8005110:	701a      	strb	r2, [r3, #0]
      break;
 8005112:	e017      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2206      	movs	r2, #6
 8005118:	701a      	strb	r2, [r3, #0]
      break;
 800511a:	e013      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	2207      	movs	r2, #7
 8005120:	701a      	strb	r2, [r3, #0]
      break;
 8005122:	e00f      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2208      	movs	r2, #8
 8005128:	701a      	strb	r2, [r3, #0]
      break;
 800512a:	e00b      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2209      	movs	r2, #9
 8005130:	701a      	strb	r2, [r3, #0]
      break;
 8005132:	e007      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	220a      	movs	r2, #10
 8005138:	701a      	strb	r2, [r3, #0]
      break;
 800513a:	e003      	b.n	8005144 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	220b      	movs	r2, #11
 8005140:	701a      	strb	r2, [r3, #0]
      break;
 8005142:	bf00      	nop
  }

  return ret;
 8005144:	68fb      	ldr	r3, [r7, #12]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop

08005150 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800515c:	f107 0208 	add.w	r2, r7, #8
 8005160:	2301      	movs	r3, #1
 8005162:	2112      	movs	r1, #18
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff fde7 	bl	8004d38 <lsm6dsl_read_reg>
 800516a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10f      	bne.n	8005192 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	b2da      	uxtb	r2, r3
 800517a:	7a3b      	ldrb	r3, [r7, #8]
 800517c:	f362 1386 	bfi	r3, r2, #6, #1
 8005180:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005182:	f107 0208 	add.w	r2, r7, #8
 8005186:	2301      	movs	r3, #1
 8005188:	2112      	movs	r1, #18
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff fdec 	bl	8004d68 <lsm6dsl_write_reg>
 8005190:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005192:	68fb      	ldr	r3, [r7, #12]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80051a6:	f107 020c 	add.w	r2, r7, #12
 80051aa:	2306      	movs	r3, #6
 80051ac:	2122      	movs	r1, #34	; 0x22
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fdc2 	bl	8004d38 <lsm6dsl_read_reg>
 80051b4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80051b6:	7b7b      	ldrb	r3, [r7, #13]
 80051b8:	b21a      	sxth	r2, r3
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	7b3b      	ldrb	r3, [r7, #12]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	b21a      	sxth	r2, r3
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	3302      	adds	r3, #2
 80051de:	b212      	sxth	r2, r2
 80051e0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	3302      	adds	r3, #2
 80051e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	3302      	adds	r3, #2
 80051fc:	b212      	sxth	r2, r2
 80051fe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005200:	7c7a      	ldrb	r2, [r7, #17]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	3304      	adds	r3, #4
 8005206:	b212      	sxth	r2, r2
 8005208:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	3304      	adds	r3, #4
 800520e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005212:	b29b      	uxth	r3, r3
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	b29a      	uxth	r2, r3
 8005218:	7c3b      	ldrb	r3, [r7, #16]
 800521a:	b29b      	uxth	r3, r3
 800521c:	4413      	add	r3, r2
 800521e:	b29a      	uxth	r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	3304      	adds	r3, #4
 8005224:	b212      	sxth	r2, r2
 8005226:	801a      	strh	r2, [r3, #0]
  return ret;
 8005228:	697b      	ldr	r3, [r7, #20]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b086      	sub	sp, #24
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800523c:	f107 020c 	add.w	r2, r7, #12
 8005240:	2306      	movs	r3, #6
 8005242:	2128      	movs	r1, #40	; 0x28
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff fd77 	bl	8004d38 <lsm6dsl_read_reg>
 800524a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800524c:	7b7b      	ldrb	r3, [r7, #13]
 800524e:	b21a      	sxth	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800525a:	b29b      	uxth	r3, r3
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	b29a      	uxth	r2, r3
 8005260:	7b3b      	ldrb	r3, [r7, #12]
 8005262:	b29b      	uxth	r3, r3
 8005264:	4413      	add	r3, r2
 8005266:	b29b      	uxth	r3, r3
 8005268:	b21a      	sxth	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800526e:	7bfa      	ldrb	r2, [r7, #15]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	3302      	adds	r3, #2
 8005274:	b212      	sxth	r2, r2
 8005276:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	3302      	adds	r3, #2
 800527c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005280:	b29b      	uxth	r3, r3
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	b29a      	uxth	r2, r3
 8005286:	7bbb      	ldrb	r3, [r7, #14]
 8005288:	b29b      	uxth	r3, r3
 800528a:	4413      	add	r3, r2
 800528c:	b29a      	uxth	r2, r3
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	3302      	adds	r3, #2
 8005292:	b212      	sxth	r2, r2
 8005294:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005296:	7c7a      	ldrb	r2, [r7, #17]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	3304      	adds	r3, #4
 800529c:	b212      	sxth	r2, r2
 800529e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	3304      	adds	r3, #4
 80052a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	021b      	lsls	r3, r3, #8
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	7c3b      	ldrb	r3, [r7, #16]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	3304      	adds	r3, #4
 80052ba:	b212      	sxth	r2, r2
 80052bc:	801a      	strh	r2, [r3, #0]
  return ret;
 80052be:	697b      	ldr	r3, [r7, #20]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80052d2:	2301      	movs	r3, #1
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	210f      	movs	r1, #15
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff fd2d 	bl	8004d38 <lsm6dsl_read_reg>
 80052de:	60f8      	str	r0, [r7, #12]
  return ret;
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
 80052f2:	460b      	mov	r3, r1
 80052f4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80052f6:	f107 0208 	add.w	r2, r7, #8
 80052fa:	2301      	movs	r3, #1
 80052fc:	2112      	movs	r1, #18
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f7ff fd1a 	bl	8004d38 <lsm6dsl_read_reg>
 8005304:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10f      	bne.n	800532c <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 800530c:	78fb      	ldrb	r3, [r7, #3]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	7a3b      	ldrb	r3, [r7, #8]
 8005316:	f362 0382 	bfi	r3, r2, #2, #1
 800531a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800531c:	f107 0208 	add.w	r2, r7, #8
 8005320:	2301      	movs	r3, #1
 8005322:	2112      	movs	r1, #18
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fd1f 	bl	8004d68 <lsm6dsl_write_reg>
 800532a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800532c:	68fb      	ldr	r3, [r7, #12]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b084      	sub	sp, #16
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	460b      	mov	r3, r1
 8005340:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005342:	f107 0208 	add.w	r2, r7, #8
 8005346:	2301      	movs	r3, #1
 8005348:	210a      	movs	r1, #10
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7ff fcf4 	bl	8004d38 <lsm6dsl_read_reg>
 8005350:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10f      	bne.n	8005378 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005358:	78fb      	ldrb	r3, [r7, #3]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	b2da      	uxtb	r2, r3
 8005360:	7a3b      	ldrb	r3, [r7, #8]
 8005362:	f362 0302 	bfi	r3, r2, #0, #3
 8005366:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005368:	f107 0208 	add.w	r2, r7, #8
 800536c:	2301      	movs	r3, #1
 800536e:	210a      	movs	r1, #10
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff fcf9 	bl	8004d68 <lsm6dsl_write_reg>
 8005376:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08e      	sub	sp, #56	; 0x38
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800538e:	2300      	movs	r3, #0
 8005390:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005392:	2301      	movs	r3, #1
 8005394:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d06e      	beq.n	800547e <IKS01A2_MOTION_SENSOR_Init+0xfa>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	f200 809d 	bhi.w	80054e2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <IKS01A2_MOTION_SENSOR_Init+0x32>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d032      	beq.n	800541a <IKS01A2_MOTION_SENSOR_Init+0x96>
 80053b4:	e095      	b.n	80054e2 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 80053b6:	6838      	ldr	r0, [r7, #0]
 80053b8:	f000 f9f0 	bl	800579c <LSM6DSL_0_Probe>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 80053c2:	f04f 33ff 	mov.w	r3, #4294967295
 80053c6:	e0cc      	b.n	8005562 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80053c8:	4a68      	ldr	r2, [pc, #416]	; (800556c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4967      	ldr	r1, [pc, #412]	; (8005570 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80053da:	f107 010c 	add.w	r1, r7, #12
 80053de:	4610      	mov	r0, r2
 80053e0:	4798      	blx	r3
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80053e8:	f06f 0306 	mvn.w	r3, #6
 80053ec:	e0b9      	b.n	8005562 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80053ee:	7b3b      	ldrb	r3, [r7, #12]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d103      	bne.n	80053fc <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	f043 0302 	orr.w	r3, r3, #2
 80053fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80053fc:	7b7b      	ldrb	r3, [r7, #13]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d103      	bne.n	800540a <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	f043 0301 	orr.w	r3, r3, #1
 8005408:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d16c      	bne.n	80054ea <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	f043 0304 	orr.w	r3, r3, #4
 8005416:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005418:	e067      	b.n	80054ea <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 800541a:	6838      	ldr	r0, [r7, #0]
 800541c:	f000 fa7a 	bl	8005914 <LSM303AGR_ACC_0_Probe>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	e09a      	b.n	8005562 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800542c:	4a4f      	ldr	r2, [pc, #316]	; (800556c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	494e      	ldr	r1, [pc, #312]	; (8005570 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800543e:	f107 010c 	add.w	r1, r7, #12
 8005442:	4610      	mov	r0, r2
 8005444:	4798      	blx	r3
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d002      	beq.n	8005452 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800544c:	f06f 0306 	mvn.w	r3, #6
 8005450:	e087      	b.n	8005562 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005452:	7b3b      	ldrb	r3, [r7, #12]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d103      	bne.n	8005460 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	f043 0302 	orr.w	r3, r3, #2
 800545e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005460:	7b7b      	ldrb	r3, [r7, #13]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d103      	bne.n	800546e <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800546e:	7bbb      	ldrb	r3, [r7, #14]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d13c      	bne.n	80054ee <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	f043 0304 	orr.w	r3, r3, #4
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800547c:	e037      	b.n	80054ee <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800547e:	6838      	ldr	r0, [r7, #0]
 8005480:	f000 faec 	bl	8005a5c <LSM303AGR_MAG_0_Probe>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800548a:	f04f 33ff 	mov.w	r3, #4294967295
 800548e:	e068      	b.n	8005562 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005490:	4a36      	ldr	r2, [pc, #216]	; (800556c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	4935      	ldr	r1, [pc, #212]	; (8005570 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80054a2:	f107 010c 	add.w	r1, r7, #12
 80054a6:	4610      	mov	r0, r2
 80054a8:	4798      	blx	r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80054b0:	f06f 0306 	mvn.w	r3, #6
 80054b4:	e055      	b.n	8005562 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 80054b6:	7b3b      	ldrb	r3, [r7, #12]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d103      	bne.n	80054c4 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 80054bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054be:	f043 0302 	orr.w	r3, r3, #2
 80054c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80054c4:	7b7b      	ldrb	r3, [r7, #13]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d103      	bne.n	80054d2 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80054d2:	7bbb      	ldrb	r3, [r7, #14]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d10c      	bne.n	80054f2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80054e0:	e007      	b.n	80054f2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80054e2:	f06f 0301 	mvn.w	r3, #1
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80054e8:	e004      	b.n	80054f4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80054ea:	bf00      	nop
 80054ec:	e002      	b.n	80054f4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80054f2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80054fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fc:	e031      	b.n	8005562 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80054fe:	2300      	movs	r3, #0
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005502:	e02a      	b.n	800555a <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	4013      	ands	r3, r2
 800550a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800550c:	429a      	cmp	r2, r3
 800550e:	d11e      	bne.n	800554e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 8005510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	4013      	ands	r3, r2
 8005516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005518:	429a      	cmp	r2, r3
 800551a:	d118      	bne.n	800554e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800551c:	4a15      	ldr	r2, [pc, #84]	; (8005574 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005524:	4814      	ldr	r0, [pc, #80]	; (8005578 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4613      	mov	r3, r2
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	4413      	add	r3, r2
 800552e:	440b      	add	r3, r1
 8005530:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	490e      	ldr	r1, [pc, #56]	; (8005570 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800553e:	4610      	mov	r0, r2
 8005540:	4798      	blx	r3
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d002      	beq.n	800554e <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005548:	f06f 0304 	mvn.w	r3, #4
 800554c:	e009      	b.n	8005562 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	3301      	adds	r3, #1
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555c:	2b02      	cmp	r3, #2
 800555e:	d9d1      	bls.n	8005504 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005562:	4618      	mov	r0, r3
 8005564:	3738      	adds	r7, #56	; 0x38
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20001110 	.word	0x20001110
 8005570:	200014a8 	.word	0x200014a8
 8005574:	200000d0 	.word	0x200000d0
 8005578:	200010ec 	.word	0x200010ec

0800557c <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d903      	bls.n	8005594 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800558c:	f06f 0301 	mvn.w	r3, #1
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	e028      	b.n	80055e6 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005594:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	4013      	ands	r3, r2
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d11c      	bne.n	80055e0 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80055a6:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80055ae:	4812      	ldr	r0, [pc, #72]	; (80055f8 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	4413      	add	r3, r2
 80055b8:	440b      	add	r3, r1
 80055ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	490e      	ldr	r1, [pc, #56]	; (80055fc <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80055c8:	4610      	mov	r0, r2
 80055ca:	4798      	blx	r3
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80055d2:	f06f 0304 	mvn.w	r3, #4
 80055d6:	60fb      	str	r3, [r7, #12]
 80055d8:	e005      	b.n	80055e6 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	e002      	b.n	80055e6 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80055e0:	f06f 0301 	mvn.w	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	2000111c 	.word	0x2000111c
 80055f4:	200000d0 	.word	0x200000d0
 80055f8:	200010ec 	.word	0x200010ec
 80055fc:	200014a8 	.word	0x200014a8

08005600 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b02      	cmp	r3, #2
 8005610:	d903      	bls.n	800561a <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005612:	f06f 0301 	mvn.w	r3, #1
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	e029      	b.n	800566e <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800561a:	4a17      	ldr	r2, [pc, #92]	; (8005678 <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	4013      	ands	r3, r2
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	429a      	cmp	r2, r3
 800562a:	d11d      	bne.n	8005668 <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 800562c:	4a13      	ldr	r2, [pc, #76]	; (800567c <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005634:	4812      	ldr	r0, [pc, #72]	; (8005680 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4613      	mov	r3, r2
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	4413      	add	r3, r2
 800563e:	440b      	add	r3, r1
 8005640:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	490f      	ldr	r1, [pc, #60]	; (8005684 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4610      	mov	r0, r2
 8005652:	4798      	blx	r3
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800565a:	f06f 0304 	mvn.w	r3, #4
 800565e:	617b      	str	r3, [r7, #20]
 8005660:	e005      	b.n	800566e <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
 8005666:	e002      	b.n	800566e <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005668:	f06f 0301 	mvn.w	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800566e:	697b      	ldr	r3, [r7, #20]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	2000111c 	.word	0x2000111c
 800567c:	200000d0 	.word	0x200000d0
 8005680:	200010ec 	.word	0x200010ec
 8005684:	200014a8 	.word	0x200014a8

08005688 <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d903      	bls.n	80056a4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800569c:	f06f 0301 	mvn.w	r3, #1
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e02a      	b.n	80056fa <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80056a4:	4a17      	ldr	r2, [pc, #92]	; (8005704 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	4013      	ands	r3, r2
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d11e      	bne.n	80056f4 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80056b6:	4a14      	ldr	r2, [pc, #80]	; (8005708 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056be:	4813      	ldr	r0, [pc, #76]	; (800570c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4613      	mov	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4413      	add	r3, r2
 80056c8:	440b      	add	r3, r1
 80056ca:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	490f      	ldr	r1, [pc, #60]	; (8005710 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80056d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80056dc:	4610      	mov	r0, r2
 80056de:	4798      	blx	r3
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80056e6:	f06f 0304 	mvn.w	r3, #4
 80056ea:	617b      	str	r3, [r7, #20]
 80056ec:	e005      	b.n	80056fa <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	e002      	b.n	80056fa <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80056f4:	f06f 0301 	mvn.w	r3, #1
 80056f8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80056fa:	697b      	ldr	r3, [r7, #20]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	2000111c 	.word	0x2000111c
 8005708:	200000d0 	.word	0x200000d0
 800570c:	200010ec 	.word	0x200010ec
 8005710:	200014a8 	.word	0x200014a8

08005714 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d903      	bls.n	800572e <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005726:	f06f 0301 	mvn.w	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e029      	b.n	8005782 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4013      	ands	r3, r2
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	d11d      	bne.n	800577c <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005748:	4812      	ldr	r0, [pc, #72]	; (8005794 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4613      	mov	r3, r2
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	4413      	add	r3, r2
 8005752:	440b      	add	r3, r1
 8005754:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	490f      	ldr	r1, [pc, #60]	; (8005798 <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4610      	mov	r0, r2
 8005766:	4798      	blx	r3
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800576e:	f06f 0304 	mvn.w	r3, #4
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e005      	b.n	8005782 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e002      	b.n	8005782 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800577c:	f06f 0301 	mvn.w	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005782:	697b      	ldr	r3, [r7, #20]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	2000111c 	.word	0x2000111c
 8005790:	200000d0 	.word	0x200000d0
 8005794:	200010ec 	.word	0x200010ec
 8005798:	200014a8 	.word	0x200014a8

0800579c <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b092      	sub	sp, #72	; 0x48
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80057a4:	2300      	movs	r3, #0
 80057a6:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 80057a8:	2300      	movs	r3, #0
 80057aa:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 80057ac:	23d7      	movs	r3, #215	; 0xd7
 80057ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 80057b2:	4b4a      	ldr	r3, [pc, #296]	; (80058dc <LSM6DSL_0_Probe+0x140>)
 80057b4:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 80057b6:	4b4a      	ldr	r3, [pc, #296]	; (80058e0 <LSM6DSL_0_Probe+0x144>)
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 80057ba:	4b4a      	ldr	r3, [pc, #296]	; (80058e4 <LSM6DSL_0_Probe+0x148>)
 80057bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 80057be:	4b4a      	ldr	r3, [pc, #296]	; (80058e8 <LSM6DSL_0_Probe+0x14c>)
 80057c0:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 80057c2:	4b4a      	ldr	r3, [pc, #296]	; (80058ec <LSM6DSL_0_Probe+0x150>)
 80057c4:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 80057c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ca:	4619      	mov	r1, r3
 80057cc:	4848      	ldr	r0, [pc, #288]	; (80058f0 <LSM6DSL_0_Probe+0x154>)
 80057ce:	f7fe fac3 	bl	8003d58 <LSM6DSL_RegisterBusIO>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057d8:	f06f 0306 	mvn.w	r3, #6
 80057dc:	647b      	str	r3, [r7, #68]	; 0x44
 80057de:	e077      	b.n	80058d0 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 80057e0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80057e4:	4619      	mov	r1, r3
 80057e6:	4842      	ldr	r0, [pc, #264]	; (80058f0 <LSM6DSL_0_Probe+0x154>)
 80057e8:	f7fe fbac 	bl	8003f44 <LSM6DSL_ReadID>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80057f2:	f06f 0306 	mvn.w	r3, #6
 80057f6:	647b      	str	r3, [r7, #68]	; 0x44
 80057f8:	e06a      	b.n	80058d0 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 80057fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057fe:	2b6a      	cmp	r3, #106	; 0x6a
 8005800:	d003      	beq.n	800580a <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005802:	f06f 0306 	mvn.w	r3, #6
 8005806:	647b      	str	r3, [r7, #68]	; 0x44
 8005808:	e062      	b.n	80058d0 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 800580a:	f107 0308 	add.w	r3, r7, #8
 800580e:	4619      	mov	r1, r3
 8005810:	4837      	ldr	r0, [pc, #220]	; (80058f0 <LSM6DSL_0_Probe+0x154>)
 8005812:	f7fe fbad 	bl	8003f70 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005816:	7a7b      	ldrb	r3, [r7, #9]
 8005818:	461a      	mov	r2, r3
 800581a:	7a3b      	ldrb	r3, [r7, #8]
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	431a      	orrs	r2, r3
 8005820:	7abb      	ldrb	r3, [r7, #10]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4313      	orrs	r3, r2
 8005826:	4a33      	ldr	r2, [pc, #204]	; (80058f4 <LSM6DSL_0_Probe+0x158>)
 8005828:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 800582a:	4b33      	ldr	r3, [pc, #204]	; (80058f8 <LSM6DSL_0_Probe+0x15c>)
 800582c:	4a30      	ldr	r2, [pc, #192]	; (80058f0 <LSM6DSL_0_Probe+0x154>)
 800582e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005830:	4b32      	ldr	r3, [pc, #200]	; (80058fc <LSM6DSL_0_Probe+0x160>)
 8005832:	4a33      	ldr	r2, [pc, #204]	; (8005900 <LSM6DSL_0_Probe+0x164>)
 8005834:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005838:	2b00      	cmp	r3, #0
 800583a:	d11d      	bne.n	8005878 <LSM6DSL_0_Probe+0xdc>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d018      	beq.n	8005878 <LSM6DSL_0_Probe+0xdc>
 8005846:	7a7b      	ldrb	r3, [r7, #9]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d115      	bne.n	8005878 <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 800584c:	4b2d      	ldr	r3, [pc, #180]	; (8005904 <LSM6DSL_0_Probe+0x168>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	4a2d      	ldr	r2, [pc, #180]	; (8005908 <LSM6DSL_0_Probe+0x16c>)
 8005852:	492e      	ldr	r1, [pc, #184]	; (800590c <LSM6DSL_0_Probe+0x170>)
 8005854:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005858:	4b28      	ldr	r3, [pc, #160]	; (80058fc <LSM6DSL_0_Probe+0x160>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a26      	ldr	r2, [pc, #152]	; (80058f8 <LSM6DSL_0_Probe+0x15c>)
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	4610      	mov	r0, r2
 8005864:	4798      	blx	r3
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800586c:	f06f 0304 	mvn.w	r3, #4
 8005870:	647b      	str	r3, [r7, #68]	; 0x44
 8005872:	e001      	b.n	8005878 <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005874:	2300      	movs	r3, #0
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11d      	bne.n	80058ba <LSM6DSL_0_Probe+0x11e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d018      	beq.n	80058ba <LSM6DSL_0_Probe+0x11e>
 8005888:	7a3b      	ldrb	r3, [r7, #8]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d115      	bne.n	80058ba <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800588e:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <LSM6DSL_0_Probe+0x168>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <LSM6DSL_0_Probe+0x16c>)
 8005894:	491e      	ldr	r1, [pc, #120]	; (8005910 <LSM6DSL_0_Probe+0x174>)
 8005896:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 800589a:	4b18      	ldr	r3, [pc, #96]	; (80058fc <LSM6DSL_0_Probe+0x160>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <LSM6DSL_0_Probe+0x15c>)
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	4610      	mov	r0, r2
 80058a6:	4798      	blx	r3
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058ae:	f06f 0304 	mvn.w	r3, #4
 80058b2:	647b      	str	r3, [r7, #68]	; 0x44
 80058b4:	e001      	b.n	80058ba <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80058b6:	2300      	movs	r3, #0
 80058b8:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80058ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d107      	bne.n	80058d0 <LSM6DSL_0_Probe+0x134>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058ca:	f06f 0304 	mvn.w	r3, #4
 80058ce:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80058d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3748      	adds	r7, #72	; 0x48
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	08002011 	.word	0x08002011
 80058e0:	0800208d 	.word	0x0800208d
 80058e4:	08002141 	.word	0x08002141
 80058e8:	080020dd 	.word	0x080020dd
 80058ec:	080021a5 	.word	0x080021a5
 80058f0:	20001128 	.word	0x20001128
 80058f4:	2000111c 	.word	0x2000111c
 80058f8:	200014a8 	.word	0x200014a8
 80058fc:	20001110 	.word	0x20001110
 8005900:	20000078 	.word	0x20000078
 8005904:	200000d0 	.word	0x200000d0
 8005908:	200010ec 	.word	0x200010ec
 800590c:	200000ac 	.word	0x200000ac
 8005910:	20000088 	.word	0x20000088

08005914 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b092      	sub	sp, #72	; 0x48
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 800591c:	2300      	movs	r3, #0
 800591e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005920:	2300      	movs	r3, #0
 8005922:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005924:	2333      	movs	r3, #51	; 0x33
 8005926:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 800592a:	4b3f      	ldr	r3, [pc, #252]	; (8005a28 <LSM303AGR_ACC_0_Probe+0x114>)
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 800592e:	4b3f      	ldr	r3, [pc, #252]	; (8005a2c <LSM303AGR_ACC_0_Probe+0x118>)
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005932:	4b3f      	ldr	r3, [pc, #252]	; (8005a30 <LSM303AGR_ACC_0_Probe+0x11c>)
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005936:	4b3f      	ldr	r3, [pc, #252]	; (8005a34 <LSM303AGR_ACC_0_Probe+0x120>)
 8005938:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 800593a:	4b3f      	ldr	r3, [pc, #252]	; (8005a38 <LSM303AGR_ACC_0_Probe+0x124>)
 800593c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 800593e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005942:	4619      	mov	r1, r3
 8005944:	483d      	ldr	r0, [pc, #244]	; (8005a3c <LSM303AGR_ACC_0_Probe+0x128>)
 8005946:	f7fc fe51 	bl	80025ec <LSM303AGR_ACC_RegisterBusIO>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005950:	f06f 0306 	mvn.w	r3, #6
 8005954:	647b      	str	r3, [r7, #68]	; 0x44
 8005956:	e062      	b.n	8005a1e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005958:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800595c:	4619      	mov	r1, r3
 800595e:	4837      	ldr	r0, [pc, #220]	; (8005a3c <LSM303AGR_ACC_0_Probe+0x128>)
 8005960:	f7fc ff05 	bl	800276e <LSM303AGR_ACC_ReadID>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800596a:	f06f 0306 	mvn.w	r3, #6
 800596e:	647b      	str	r3, [r7, #68]	; 0x44
 8005970:	e055      	b.n	8005a1e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005976:	2b33      	cmp	r3, #51	; 0x33
 8005978:	d003      	beq.n	8005982 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800597a:	f06f 0306 	mvn.w	r3, #6
 800597e:	647b      	str	r3, [r7, #68]	; 0x44
 8005980:	e04d      	b.n	8005a1e <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005982:	f107 0308 	add.w	r3, r7, #8
 8005986:	4619      	mov	r1, r3
 8005988:	482c      	ldr	r0, [pc, #176]	; (8005a3c <LSM303AGR_ACC_0_Probe+0x128>)
 800598a:	f7fc ff07 	bl	800279c <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800598e:	7a7b      	ldrb	r3, [r7, #9]
 8005990:	461a      	mov	r2, r3
 8005992:	7a3b      	ldrb	r3, [r7, #8]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005998:	7abb      	ldrb	r3, [r7, #10]
 800599a:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 800599c:	4313      	orrs	r3, r2
 800599e:	4a28      	ldr	r2, [pc, #160]	; (8005a40 <LSM303AGR_ACC_0_Probe+0x12c>)
 80059a0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 80059a2:	4b28      	ldr	r3, [pc, #160]	; (8005a44 <LSM303AGR_ACC_0_Probe+0x130>)
 80059a4:	4a25      	ldr	r2, [pc, #148]	; (8005a3c <LSM303AGR_ACC_0_Probe+0x128>)
 80059a6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 80059a8:	4b27      	ldr	r3, [pc, #156]	; (8005a48 <LSM303AGR_ACC_0_Probe+0x134>)
 80059aa:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <LSM303AGR_ACC_0_Probe+0x138>)
 80059ac:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80059ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d11e      	bne.n	80059f2 <LSM303AGR_ACC_0_Probe+0xde>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d019      	beq.n	80059f2 <LSM303AGR_ACC_0_Probe+0xde>
 80059be:	7a3b      	ldrb	r3, [r7, #8]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d116      	bne.n	80059f2 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80059c4:	4b22      	ldr	r3, [pc, #136]	; (8005a50 <LSM303AGR_ACC_0_Probe+0x13c>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <LSM303AGR_ACC_0_Probe+0x140>)
 80059ca:	3303      	adds	r3, #3
 80059cc:	4922      	ldr	r1, [pc, #136]	; (8005a58 <LSM303AGR_ACC_0_Probe+0x144>)
 80059ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 80059d2:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <LSM303AGR_ACC_0_Probe+0x134>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <LSM303AGR_ACC_0_Probe+0x130>)
 80059da:	6852      	ldr	r2, [r2, #4]
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80059e6:	f06f 0304 	mvn.w	r3, #4
 80059ea:	647b      	str	r3, [r7, #68]	; 0x44
 80059ec:	e001      	b.n	80059f2 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80059f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <LSM303AGR_ACC_0_Probe+0xf4>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a02:	f06f 0304 	mvn.w	r3, #4
 8005a06:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d107      	bne.n	8005a1e <LSM303AGR_ACC_0_Probe+0x10a>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a18:	f06f 0304 	mvn.w	r3, #4
 8005a1c:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3748      	adds	r7, #72	; 0x48
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	08002011 	.word	0x08002011
 8005a2c:	0800208d 	.word	0x0800208d
 8005a30:	08002141 	.word	0x08002141
 8005a34:	080020dd 	.word	0x080020dd
 8005a38:	080021a5 	.word	0x080021a5
 8005a3c:	20001158 	.word	0x20001158
 8005a40:	2000111c 	.word	0x2000111c
 8005a44:	200014a8 	.word	0x200014a8
 8005a48:	20001110 	.word	0x20001110
 8005a4c:	20000010 	.word	0x20000010
 8005a50:	200000d0 	.word	0x200000d0
 8005a54:	200010ec 	.word	0x200010ec
 8005a58:	20000020 	.word	0x20000020

08005a5c <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b092      	sub	sp, #72	; 0x48
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005a64:	2300      	movs	r3, #0
 8005a66:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005a68:	2300      	movs	r3, #0
 8005a6a:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005a6c:	233d      	movs	r3, #61	; 0x3d
 8005a6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005a72:	4b3f      	ldr	r3, [pc, #252]	; (8005b70 <LSM303AGR_MAG_0_Probe+0x114>)
 8005a74:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005a76:	4b3f      	ldr	r3, [pc, #252]	; (8005b74 <LSM303AGR_MAG_0_Probe+0x118>)
 8005a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005a7a:	4b3f      	ldr	r3, [pc, #252]	; (8005b78 <LSM303AGR_MAG_0_Probe+0x11c>)
 8005a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005a7e:	4b3f      	ldr	r3, [pc, #252]	; (8005b7c <LSM303AGR_MAG_0_Probe+0x120>)
 8005a80:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005a82:	4b3f      	ldr	r3, [pc, #252]	; (8005b80 <LSM303AGR_MAG_0_Probe+0x124>)
 8005a84:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	483d      	ldr	r0, [pc, #244]	; (8005b84 <LSM303AGR_MAG_0_Probe+0x128>)
 8005a8e:	f7fd f973 	bl	8002d78 <LSM303AGR_MAG_RegisterBusIO>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005a98:	f06f 0306 	mvn.w	r3, #6
 8005a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a9e:	e062      	b.n	8005b66 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005aa0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4837      	ldr	r0, [pc, #220]	; (8005b84 <LSM303AGR_MAG_0_Probe+0x128>)
 8005aa8:	f7fd fa1d 	bl	8002ee6 <LSM303AGR_MAG_ReadID>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ab2:	f06f 0306 	mvn.w	r3, #6
 8005ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab8:	e055      	b.n	8005b66 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005aba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005abe:	2b40      	cmp	r3, #64	; 0x40
 8005ac0:	d003      	beq.n	8005aca <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ac2:	f06f 0306 	mvn.w	r3, #6
 8005ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac8:	e04d      	b.n	8005b66 <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	4619      	mov	r1, r3
 8005ad0:	482c      	ldr	r0, [pc, #176]	; (8005b84 <LSM303AGR_MAG_0_Probe+0x128>)
 8005ad2:	f7fd fa1f 	bl	8002f14 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005ad6:	7a7b      	ldrb	r3, [r7, #9]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	7a3b      	ldrb	r3, [r7, #8]
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005ae0:	7abb      	ldrb	r3, [r7, #10]
 8005ae2:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <LSM303AGR_MAG_0_Probe+0x12c>)
 8005ae8:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005aea:	4b28      	ldr	r3, [pc, #160]	; (8005b8c <LSM303AGR_MAG_0_Probe+0x130>)
 8005aec:	4a25      	ldr	r2, [pc, #148]	; (8005b84 <LSM303AGR_MAG_0_Probe+0x128>)
 8005aee:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8005af0:	4b27      	ldr	r3, [pc, #156]	; (8005b90 <LSM303AGR_MAG_0_Probe+0x134>)
 8005af2:	4a28      	ldr	r2, [pc, #160]	; (8005b94 <LSM303AGR_MAG_0_Probe+0x138>)
 8005af4:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d11e      	bne.n	8005b3a <LSM303AGR_MAG_0_Probe+0xde>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d019      	beq.n	8005b3a <LSM303AGR_MAG_0_Probe+0xde>
 8005b06:	7abb      	ldrb	r3, [r7, #10]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d116      	bne.n	8005b3a <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005b0c:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <LSM303AGR_MAG_0_Probe+0x13c>)
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <LSM303AGR_MAG_0_Probe+0x140>)
 8005b12:	3306      	adds	r3, #6
 8005b14:	4922      	ldr	r1, [pc, #136]	; (8005ba0 <LSM303AGR_MAG_0_Probe+0x144>)
 8005b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005b1a:	4b1d      	ldr	r3, [pc, #116]	; (8005b90 <LSM303AGR_MAG_0_Probe+0x134>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a1a      	ldr	r2, [pc, #104]	; (8005b8c <LSM303AGR_MAG_0_Probe+0x130>)
 8005b22:	6892      	ldr	r2, [r2, #8]
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b2e:	f06f 0304 	mvn.w	r3, #4
 8005b32:	647b      	str	r3, [r7, #68]	; 0x44
 8005b34:	e001      	b.n	8005b3a <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b36:	2300      	movs	r3, #0
 8005b38:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d107      	bne.n	8005b50 <LSM303AGR_MAG_0_Probe+0xf4>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f003 0302 	and.w	r3, r3, #2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b4a:	f06f 0304 	mvn.w	r3, #4
 8005b4e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d107      	bne.n	8005b66 <LSM303AGR_MAG_0_Probe+0x10a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b60:	f06f 0304 	mvn.w	r3, #4
 8005b64:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3748      	adds	r7, #72	; 0x48
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	08002011 	.word	0x08002011
 8005b74:	0800208d 	.word	0x0800208d
 8005b78:	08002141 	.word	0x08002141
 8005b7c:	080020dd 	.word	0x080020dd
 8005b80:	080021a5 	.word	0x080021a5
 8005b84:	20001184 	.word	0x20001184
 8005b88:	2000111c 	.word	0x2000111c
 8005b8c:	200014a8 	.word	0x200014a8
 8005b90:	20001110 	.word	0x20001110
 8005b94:	20000044 	.word	0x20000044
 8005b98:	200000d0 	.word	0x200000d0
 8005b9c:	200010ec 	.word	0x200010ec
 8005ba0:	20000054 	.word	0x20000054

08005ba4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	4603      	mov	r3, r0
 8005bac:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d903      	bls.n	8005bc0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005bb8:	f06f 0301 	mvn.w	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	e025      	b.n	8005c0c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8005bc0:	79fb      	ldrb	r3, [r7, #7]
 8005bc2:	79fa      	ldrb	r2, [r7, #7]
 8005bc4:	4914      	ldr	r1, [pc, #80]	; (8005c18 <BSP_COM_Init+0x74>)
 8005bc6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005bca:	4814      	ldr	r0, [pc, #80]	; (8005c1c <BSP_COM_Init+0x78>)
 8005bcc:	4613      	mov	r3, r2
 8005bce:	015b      	lsls	r3, r3, #5
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4403      	add	r3, r0
 8005bd6:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8005bd8:	79fa      	ldrb	r2, [r7, #7]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	015b      	lsls	r3, r3, #5
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4a0e      	ldr	r2, [pc, #56]	; (8005c1c <BSP_COM_Init+0x78>)
 8005be4:	4413      	add	r3, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 f86a 	bl	8005cc0 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8005bec:	79fa      	ldrb	r2, [r7, #7]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	015b      	lsls	r3, r3, #5
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <BSP_COM_Init+0x78>)
 8005bf8:	4413      	add	r3, r2
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 f810 	bl	8005c20 <MX_USART2_UART_Init>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005c06:	f06f 0303 	mvn.w	r3, #3
 8005c0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	200000e4 	.word	0x200000e4
 8005c1c:	200014fc 	.word	0x200014fc

08005c20 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a15      	ldr	r2, [pc, #84]	; (8005c84 <MX_USART2_UART_Init+0x64>)
 8005c30:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8005c38:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	220c      	movs	r2, #12
 8005c50:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f004 f848 	bl	8009d00 <HAL_UART_Init>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	40004400 	.word	0x40004400

08005c88 <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8005c90:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <__io_putchar+0x30>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	4613      	mov	r3, r2
 8005c98:	015b      	lsls	r3, r3, #5
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4a07      	ldr	r2, [pc, #28]	; (8005cbc <__io_putchar+0x34>)
 8005ca0:	1898      	adds	r0, r3, r2
 8005ca2:	1d39      	adds	r1, r7, #4
 8005ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f004 f881 	bl	8009db0 <HAL_UART_Transmit>
  return ch;
 8005cae:	687b      	ldr	r3, [r7, #4]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200011b0 	.word	0x200011b0
 8005cbc:	200014fc 	.word	0x200014fc

08005cc0 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cc8:	4b30      	ldr	r3, [pc, #192]	; (8005d8c <USART2_MspInit+0xcc>)
 8005cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ccc:	4a2f      	ldr	r2, [pc, #188]	; (8005d8c <USART2_MspInit+0xcc>)
 8005cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd4:	4b2d      	ldr	r3, [pc, #180]	; (8005d8c <USART2_MspInit+0xcc>)
 8005cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ce0:	4b2a      	ldr	r3, [pc, #168]	; (8005d8c <USART2_MspInit+0xcc>)
 8005ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce4:	4a29      	ldr	r2, [pc, #164]	; (8005d8c <USART2_MspInit+0xcc>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cec:	4b27      	ldr	r3, [pc, #156]	; (8005d8c <USART2_MspInit+0xcc>)
 8005cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d04:	2303      	movs	r3, #3
 8005d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8005d08:	2307      	movs	r3, #7
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8005d0c:	f107 0314 	add.w	r3, r7, #20
 8005d10:	4619      	mov	r1, r3
 8005d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d16:	f000 fcaf 	bl	8006678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8005d1a:	2308      	movs	r3, #8
 8005d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d26:	2303      	movs	r3, #3
 8005d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8005d2a:	2307      	movs	r3, #7
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8005d2e:	f107 0314 	add.w	r3, r7, #20
 8005d32:	4619      	mov	r1, r3
 8005d34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d38:	f000 fc9e 	bl	8006678 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005d3c:	4b14      	ldr	r3, [pc, #80]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d3e:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <USART2_MspInit+0xd4>)
 8005d40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8005d42:	4b13      	ldr	r3, [pc, #76]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d44:	2202      	movs	r2, #2
 8005d46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d54:	4b0e      	ldr	r3, [pc, #56]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d56:	2280      	movs	r2, #128	; 0x80
 8005d58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d60:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005d66:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d68:	2220      	movs	r2, #32
 8005d6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005d6c:	4b08      	ldr	r3, [pc, #32]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8005d72:	4807      	ldr	r0, [pc, #28]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d74:	f000 fa88 	bl	8006288 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d7c:	671a      	str	r2, [r3, #112]	; 0x70
 8005d7e:	4a04      	ldr	r2, [pc, #16]	; (8005d90 <USART2_MspInit+0xd0>)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8005d84:	bf00      	nop
 8005d86:	3728      	adds	r7, #40	; 0x28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	200014b4 	.word	0x200014b4
 8005d94:	4002006c 	.word	0x4002006c

08005d98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005da2:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <HAL_Init+0x3c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a0b      	ldr	r2, [pc, #44]	; (8005dd4 <HAL_Init+0x3c>)
 8005da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005dae:	2003      	movs	r0, #3
 8005db0:	f000 f93e 	bl	8006030 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005db4:	2000      	movs	r0, #0
 8005db6:	f000 f80f 	bl	8005dd8 <HAL_InitTick>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	71fb      	strb	r3, [r7, #7]
 8005dc4:	e001      	b.n	8005dca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005dc6:	f7fc f8b9 	bl	8001f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005dca:	79fb      	ldrb	r3, [r7, #7]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40022000 	.word	0x40022000

08005dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005de4:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <HAL_InitTick+0x6c>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d023      	beq.n	8005e34 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005dec:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <HAL_InitTick+0x70>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	4b14      	ldr	r3, [pc, #80]	; (8005e44 <HAL_InitTick+0x6c>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	4619      	mov	r1, r3
 8005df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e02:	4618      	mov	r0, r3
 8005e04:	f000 f949 	bl	800609a <HAL_SYSTICK_Config>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b0f      	cmp	r3, #15
 8005e12:	d809      	bhi.n	8005e28 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e14:	2200      	movs	r2, #0
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1c:	f000 f913 	bl	8006046 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e20:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <HAL_InitTick+0x74>)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e007      	b.n	8005e38 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
 8005e2c:	e004      	b.n	8005e38 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	73fb      	strb	r3, [r7, #15]
 8005e32:	e001      	b.n	8005e38 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	200000ec 	.word	0x200000ec
 8005e48:	2000000c 	.word	0x2000000c
 8005e4c:	200000e8 	.word	0x200000e8

08005e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <HAL_IncTick+0x20>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <HAL_IncTick+0x24>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4413      	add	r3, r2
 8005e60:	4a04      	ldr	r2, [pc, #16]	; (8005e74 <HAL_IncTick+0x24>)
 8005e62:	6013      	str	r3, [r2, #0]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	200000ec 	.word	0x200000ec
 8005e74:	20001580 	.word	0x20001580

08005e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8005e7c:	4b03      	ldr	r3, [pc, #12]	; (8005e8c <HAL_GetTick+0x14>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20001580 	.word	0x20001580

08005e90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ea0:	4b0c      	ldr	r3, [pc, #48]	; (8005ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005eac:	4013      	ands	r3, r2
 8005eae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005eb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ec2:	4a04      	ldr	r2, [pc, #16]	; (8005ed4 <__NVIC_SetPriorityGrouping+0x44>)
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	60d3      	str	r3, [r2, #12]
}
 8005ec8:	bf00      	nop
 8005eca:	3714      	adds	r7, #20
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	e000ed00 	.word	0xe000ed00

08005ed8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005edc:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <__NVIC_GetPriorityGrouping+0x18>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	0a1b      	lsrs	r3, r3, #8
 8005ee2:	f003 0307 	and.w	r3, r3, #7
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	e000ed00 	.word	0xe000ed00

08005ef4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	db0b      	blt.n	8005f1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	f003 021f 	and.w	r2, r3, #31
 8005f0c:	4907      	ldr	r1, [pc, #28]	; (8005f2c <__NVIC_EnableIRQ+0x38>)
 8005f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	2001      	movs	r0, #1
 8005f16:	fa00 f202 	lsl.w	r2, r0, r2
 8005f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	e000e100 	.word	0xe000e100

08005f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	db0a      	blt.n	8005f5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	490c      	ldr	r1, [pc, #48]	; (8005f7c <__NVIC_SetPriority+0x4c>)
 8005f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f4e:	0112      	lsls	r2, r2, #4
 8005f50:	b2d2      	uxtb	r2, r2
 8005f52:	440b      	add	r3, r1
 8005f54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f58:	e00a      	b.n	8005f70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	4908      	ldr	r1, [pc, #32]	; (8005f80 <__NVIC_SetPriority+0x50>)
 8005f60:	79fb      	ldrb	r3, [r7, #7]
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	3b04      	subs	r3, #4
 8005f68:	0112      	lsls	r2, r2, #4
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	761a      	strb	r2, [r3, #24]
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	e000e100 	.word	0xe000e100
 8005f80:	e000ed00 	.word	0xe000ed00

08005f84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	; 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	f1c3 0307 	rsb	r3, r3, #7
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	bf28      	it	cs
 8005fa2:	2304      	movcs	r3, #4
 8005fa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	2b06      	cmp	r3, #6
 8005fac:	d902      	bls.n	8005fb4 <NVIC_EncodePriority+0x30>
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	3b03      	subs	r3, #3
 8005fb2:	e000      	b.n	8005fb6 <NVIC_EncodePriority+0x32>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43da      	mvns	r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fd6:	43d9      	mvns	r1, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fdc:	4313      	orrs	r3, r2
         );
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3724      	adds	r7, #36	; 0x24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
	...

08005fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ffc:	d301      	bcc.n	8006002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ffe:	2301      	movs	r3, #1
 8006000:	e00f      	b.n	8006022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006002:	4a0a      	ldr	r2, [pc, #40]	; (800602c <SysTick_Config+0x40>)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3b01      	subs	r3, #1
 8006008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800600a:	210f      	movs	r1, #15
 800600c:	f04f 30ff 	mov.w	r0, #4294967295
 8006010:	f7ff ff8e 	bl	8005f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006014:	4b05      	ldr	r3, [pc, #20]	; (800602c <SysTick_Config+0x40>)
 8006016:	2200      	movs	r2, #0
 8006018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800601a:	4b04      	ldr	r3, [pc, #16]	; (800602c <SysTick_Config+0x40>)
 800601c:	2207      	movs	r2, #7
 800601e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	e000e010 	.word	0xe000e010

08006030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff ff29 	bl	8005e90 <__NVIC_SetPriorityGrouping>
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b086      	sub	sp, #24
 800604a:	af00      	add	r7, sp, #0
 800604c:	4603      	mov	r3, r0
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
 8006052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006058:	f7ff ff3e 	bl	8005ed8 <__NVIC_GetPriorityGrouping>
 800605c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	6978      	ldr	r0, [r7, #20]
 8006064:	f7ff ff8e 	bl	8005f84 <NVIC_EncodePriority>
 8006068:	4602      	mov	r2, r0
 800606a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800606e:	4611      	mov	r1, r2
 8006070:	4618      	mov	r0, r3
 8006072:	f7ff ff5d 	bl	8005f30 <__NVIC_SetPriority>
}
 8006076:	bf00      	nop
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	4603      	mov	r3, r0
 8006086:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff ff31 	bl	8005ef4 <__NVIC_EnableIRQ>
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff ffa2 	bl	8005fec <SysTick_Config>
 80060a8:	4603      	mov	r3, r0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d101      	bne.n	80060c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e054      	b.n	8006170 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	7f5b      	ldrb	r3, [r3, #29]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d105      	bne.n	80060dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fb fbce 	bl	8001878 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	791b      	ldrb	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10c      	bne.n	8006104 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a22      	ldr	r2, [pc, #136]	; (8006178 <HAL_CRC_Init+0xc4>)
 80060f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f022 0218 	bic.w	r2, r2, #24
 8006100:	609a      	str	r2, [r3, #8]
 8006102:	e00c      	b.n	800611e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6899      	ldr	r1, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	461a      	mov	r2, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f834 	bl	800617c <HAL_CRCEx_Polynomial_Set>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e028      	b.n	8006170 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	795b      	ldrb	r3, [r3, #5]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d105      	bne.n	8006132 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f04f 32ff 	mov.w	r2, #4294967295
 800612e:	611a      	str	r2, [r3, #16]
 8006130:	e004      	b.n	800613c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6912      	ldr	r2, [r2, #16]
 800613a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	695a      	ldr	r2, [r3, #20]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	699a      	ldr	r2, [r3, #24]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	04c11db7 	.word	0x04c11db7

0800617c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800618c:	231f      	movs	r3, #31
 800618e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006190:	bf00      	nop
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1e5a      	subs	r2, r3, #1
 8006196:	613a      	str	r2, [r7, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d009      	beq.n	80061b0 <HAL_CRCEx_Polynomial_Set+0x34>
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0f0      	beq.n	8006192 <HAL_CRCEx_Polynomial_Set+0x16>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b18      	cmp	r3, #24
 80061b4:	d846      	bhi.n	8006244 <HAL_CRCEx_Polynomial_Set+0xc8>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <HAL_CRCEx_Polynomial_Set+0x40>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	0800624b 	.word	0x0800624b
 80061c0:	08006245 	.word	0x08006245
 80061c4:	08006245 	.word	0x08006245
 80061c8:	08006245 	.word	0x08006245
 80061cc:	08006245 	.word	0x08006245
 80061d0:	08006245 	.word	0x08006245
 80061d4:	08006245 	.word	0x08006245
 80061d8:	08006245 	.word	0x08006245
 80061dc:	08006239 	.word	0x08006239
 80061e0:	08006245 	.word	0x08006245
 80061e4:	08006245 	.word	0x08006245
 80061e8:	08006245 	.word	0x08006245
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006245 	.word	0x08006245
 80061f4:	08006245 	.word	0x08006245
 80061f8:	08006245 	.word	0x08006245
 80061fc:	0800622d 	.word	0x0800622d
 8006200:	08006245 	.word	0x08006245
 8006204:	08006245 	.word	0x08006245
 8006208:	08006245 	.word	0x08006245
 800620c:	08006245 	.word	0x08006245
 8006210:	08006245 	.word	0x08006245
 8006214:	08006245 	.word	0x08006245
 8006218:	08006245 	.word	0x08006245
 800621c:	08006221 	.word	0x08006221
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2b06      	cmp	r3, #6
 8006224:	d913      	bls.n	800624e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800622a:	e010      	b.n	800624e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b07      	cmp	r3, #7
 8006230:	d90f      	bls.n	8006252 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006236:	e00c      	b.n	8006252 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b0f      	cmp	r3, #15
 800623c:	d90b      	bls.n	8006256 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006242:	e008      	b.n	8006256 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	75fb      	strb	r3, [r7, #23]
      break;
 8006248:	e006      	b.n	8006258 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800624a:	bf00      	nop
 800624c:	e004      	b.n	8006258 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800624e:	bf00      	nop
 8006250:	e002      	b.n	8006258 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006252:	bf00      	nop
 8006254:	e000      	b.n	8006258 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006256:	bf00      	nop
  }
  if (status == HAL_OK)
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10d      	bne.n	800627a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 0118 	bic.w	r1, r3, #24
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800627a:	7dfb      	ldrb	r3, [r7, #23]
}
 800627c:	4618      	mov	r0, r3
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e098      	b.n	80063cc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	4b4d      	ldr	r3, [pc, #308]	; (80063d8 <HAL_DMA_Init+0x150>)
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d80f      	bhi.n	80062c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	4b4b      	ldr	r3, [pc, #300]	; (80063dc <HAL_DMA_Init+0x154>)
 80062ae:	4413      	add	r3, r2
 80062b0:	4a4b      	ldr	r2, [pc, #300]	; (80063e0 <HAL_DMA_Init+0x158>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	091b      	lsrs	r3, r3, #4
 80062b8:	009a      	lsls	r2, r3, #2
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a48      	ldr	r2, [pc, #288]	; (80063e4 <HAL_DMA_Init+0x15c>)
 80062c2:	641a      	str	r2, [r3, #64]	; 0x40
 80062c4:	e00e      	b.n	80062e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	4b46      	ldr	r3, [pc, #280]	; (80063e8 <HAL_DMA_Init+0x160>)
 80062ce:	4413      	add	r3, r2
 80062d0:	4a43      	ldr	r2, [pc, #268]	; (80063e0 <HAL_DMA_Init+0x158>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	009a      	lsls	r2, r3, #2
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a42      	ldr	r2, [pc, #264]	; (80063ec <HAL_DMA_Init+0x164>)
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80062fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800633e:	d039      	beq.n	80063b4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006344:	4a27      	ldr	r2, [pc, #156]	; (80063e4 <HAL_DMA_Init+0x15c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d11a      	bne.n	8006380 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800634a:	4b29      	ldr	r3, [pc, #164]	; (80063f0 <HAL_DMA_Init+0x168>)
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006352:	f003 031c 	and.w	r3, r3, #28
 8006356:	210f      	movs	r1, #15
 8006358:	fa01 f303 	lsl.w	r3, r1, r3
 800635c:	43db      	mvns	r3, r3
 800635e:	4924      	ldr	r1, [pc, #144]	; (80063f0 <HAL_DMA_Init+0x168>)
 8006360:	4013      	ands	r3, r2
 8006362:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006364:	4b22      	ldr	r3, [pc, #136]	; (80063f0 <HAL_DMA_Init+0x168>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6859      	ldr	r1, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006370:	f003 031c 	and.w	r3, r3, #28
 8006374:	fa01 f303 	lsl.w	r3, r1, r3
 8006378:	491d      	ldr	r1, [pc, #116]	; (80063f0 <HAL_DMA_Init+0x168>)
 800637a:	4313      	orrs	r3, r2
 800637c:	600b      	str	r3, [r1, #0]
 800637e:	e019      	b.n	80063b4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006380:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <HAL_DMA_Init+0x16c>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006388:	f003 031c 	and.w	r3, r3, #28
 800638c:	210f      	movs	r1, #15
 800638e:	fa01 f303 	lsl.w	r3, r1, r3
 8006392:	43db      	mvns	r3, r3
 8006394:	4917      	ldr	r1, [pc, #92]	; (80063f4 <HAL_DMA_Init+0x16c>)
 8006396:	4013      	ands	r3, r2
 8006398:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800639a:	4b16      	ldr	r3, [pc, #88]	; (80063f4 <HAL_DMA_Init+0x16c>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6859      	ldr	r1, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	f003 031c 	and.w	r3, r3, #28
 80063aa:	fa01 f303 	lsl.w	r3, r1, r3
 80063ae:	4911      	ldr	r1, [pc, #68]	; (80063f4 <HAL_DMA_Init+0x16c>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	40020407 	.word	0x40020407
 80063dc:	bffdfff8 	.word	0xbffdfff8
 80063e0:	cccccccd 	.word	0xcccccccd
 80063e4:	40020000 	.word	0x40020000
 80063e8:	bffdfbf8 	.word	0xbffdfbf8
 80063ec:	40020400 	.word	0x40020400
 80063f0:	400200a8 	.word	0x400200a8
 80063f4:	400204a8 	.word	0x400204a8

080063f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_DMA_Start_IT+0x20>
 8006414:	2302      	movs	r3, #2
 8006416:	e04b      	b.n	80064b0 <HAL_DMA_Start_IT+0xb8>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b01      	cmp	r3, #1
 800642a:	d13a      	bne.n	80064a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 f8e0 	bl	8006616 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645a:	2b00      	cmp	r3, #0
 800645c:	d008      	beq.n	8006470 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 020e 	orr.w	r2, r2, #14
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e00f      	b.n	8006490 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0204 	bic.w	r2, r2, #4
 800647e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 020a 	orr.w	r2, r2, #10
 800648e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0201 	orr.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]
 80064a0:	e005      	b.n	80064ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80064aa:	2302      	movs	r3, #2
 80064ac:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064d4:	f003 031c 	and.w	r3, r3, #28
 80064d8:	2204      	movs	r2, #4
 80064da:	409a      	lsls	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4013      	ands	r3, r2
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d026      	beq.n	8006532 <HAL_DMA_IRQHandler+0x7a>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d021      	beq.n	8006532 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d107      	bne.n	800650c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0204 	bic.w	r2, r2, #4
 800650a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006510:	f003 021c 	and.w	r2, r3, #28
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	2104      	movs	r1, #4
 800651a:	fa01 f202 	lsl.w	r2, r1, r2
 800651e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	2b00      	cmp	r3, #0
 8006526:	d071      	beq.n	800660c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006530:	e06c      	b.n	800660c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006536:	f003 031c 	and.w	r3, r3, #28
 800653a:	2202      	movs	r2, #2
 800653c:	409a      	lsls	r2, r3
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4013      	ands	r3, r2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d02e      	beq.n	80065a4 <HAL_DMA_IRQHandler+0xec>
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d029      	beq.n	80065a4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10b      	bne.n	8006576 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 020a 	bic.w	r2, r2, #10
 800656c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657a:	f003 021c 	and.w	r2, r3, #28
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	2102      	movs	r1, #2
 8006584:	fa01 f202 	lsl.w	r2, r1, r2
 8006588:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d038      	beq.n	800660c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80065a2:	e033      	b.n	800660c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	f003 031c 	and.w	r3, r3, #28
 80065ac:	2208      	movs	r2, #8
 80065ae:	409a      	lsls	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4013      	ands	r3, r2
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d02a      	beq.n	800660e <HAL_DMA_IRQHandler+0x156>
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 0308 	and.w	r3, r3, #8
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d025      	beq.n	800660e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 020e 	bic.w	r2, r2, #14
 80065d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d6:	f003 021c 	and.w	r2, r3, #28
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	2101      	movs	r1, #1
 80065e0:	fa01 f202 	lsl.w	r2, r1, r2
 80065e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800660c:	bf00      	nop
 800660e:	bf00      	nop
}
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	607a      	str	r2, [r7, #4]
 8006622:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006628:	f003 021c 	and.w	r2, r3, #28
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f202 	lsl.w	r2, r1, r2
 8006636:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b10      	cmp	r3, #16
 8006646:	d108      	bne.n	800665a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006658:	e007      	b.n	800666a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	60da      	str	r2, [r3, #12]
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006678:	b480      	push	{r7}
 800667a:	b087      	sub	sp, #28
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006686:	e17f      	b.n	8006988 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	2101      	movs	r1, #1
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	fa01 f303 	lsl.w	r3, r1, r3
 8006694:	4013      	ands	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 8171 	beq.w	8006982 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f003 0303 	and.w	r3, r3, #3
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d005      	beq.n	80066b8 <HAL_GPIO_Init+0x40>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f003 0303 	and.w	r3, r3, #3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d130      	bne.n	800671a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	2203      	movs	r2, #3
 80066c4:	fa02 f303 	lsl.w	r3, r2, r3
 80066c8:	43db      	mvns	r3, r3
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4013      	ands	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	fa02 f303 	lsl.w	r3, r2, r3
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066ee:	2201      	movs	r2, #1
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	fa02 f303 	lsl.w	r3, r2, r3
 80066f6:	43db      	mvns	r3, r3
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4013      	ands	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	091b      	lsrs	r3, r3, #4
 8006704:	f003 0201 	and.w	r2, r3, #1
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	2b03      	cmp	r3, #3
 8006724:	d118      	bne.n	8006758 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800672c:	2201      	movs	r2, #1
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4013      	ands	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	08db      	lsrs	r3, r3, #3
 8006742:	f003 0201 	and.w	r2, r3, #1
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	693a      	ldr	r2, [r7, #16]
 8006756:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	2b03      	cmp	r3, #3
 8006762:	d017      	beq.n	8006794 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	2203      	movs	r2, #3
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4013      	ands	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	fa02 f303 	lsl.w	r3, r2, r3
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d123      	bne.n	80067e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	08da      	lsrs	r2, r3, #3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3208      	adds	r2, #8
 80067a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	220f      	movs	r2, #15
 80067b8:	fa02 f303 	lsl.w	r3, r2, r3
 80067bc:	43db      	mvns	r3, r3
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	4013      	ands	r3, r2
 80067c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	691a      	ldr	r2, [r3, #16]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	fa02 f303 	lsl.w	r3, r2, r3
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	08da      	lsrs	r2, r3, #3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	3208      	adds	r2, #8
 80067e2:	6939      	ldr	r1, [r7, #16]
 80067e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	2203      	movs	r2, #3
 80067f4:	fa02 f303 	lsl.w	r3, r2, r3
 80067f8:	43db      	mvns	r3, r3
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4013      	ands	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f003 0203 	and.w	r2, r3, #3
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	fa02 f303 	lsl.w	r3, r2, r3
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80ac 	beq.w	8006982 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800682a:	4b5f      	ldr	r3, [pc, #380]	; (80069a8 <HAL_GPIO_Init+0x330>)
 800682c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800682e:	4a5e      	ldr	r2, [pc, #376]	; (80069a8 <HAL_GPIO_Init+0x330>)
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	6613      	str	r3, [r2, #96]	; 0x60
 8006836:	4b5c      	ldr	r3, [pc, #368]	; (80069a8 <HAL_GPIO_Init+0x330>)
 8006838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	60bb      	str	r3, [r7, #8]
 8006840:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006842:	4a5a      	ldr	r2, [pc, #360]	; (80069ac <HAL_GPIO_Init+0x334>)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	089b      	lsrs	r3, r3, #2
 8006848:	3302      	adds	r3, #2
 800684a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800684e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f003 0303 	and.w	r3, r3, #3
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	220f      	movs	r2, #15
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	43db      	mvns	r3, r3
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	4013      	ands	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800686c:	d025      	beq.n	80068ba <HAL_GPIO_Init+0x242>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a4f      	ldr	r2, [pc, #316]	; (80069b0 <HAL_GPIO_Init+0x338>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d01f      	beq.n	80068b6 <HAL_GPIO_Init+0x23e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a4e      	ldr	r2, [pc, #312]	; (80069b4 <HAL_GPIO_Init+0x33c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d019      	beq.n	80068b2 <HAL_GPIO_Init+0x23a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a4d      	ldr	r2, [pc, #308]	; (80069b8 <HAL_GPIO_Init+0x340>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <HAL_GPIO_Init+0x236>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a4c      	ldr	r2, [pc, #304]	; (80069bc <HAL_GPIO_Init+0x344>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00d      	beq.n	80068aa <HAL_GPIO_Init+0x232>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a4b      	ldr	r2, [pc, #300]	; (80069c0 <HAL_GPIO_Init+0x348>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d007      	beq.n	80068a6 <HAL_GPIO_Init+0x22e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a4a      	ldr	r2, [pc, #296]	; (80069c4 <HAL_GPIO_Init+0x34c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d101      	bne.n	80068a2 <HAL_GPIO_Init+0x22a>
 800689e:	2306      	movs	r3, #6
 80068a0:	e00c      	b.n	80068bc <HAL_GPIO_Init+0x244>
 80068a2:	2307      	movs	r3, #7
 80068a4:	e00a      	b.n	80068bc <HAL_GPIO_Init+0x244>
 80068a6:	2305      	movs	r3, #5
 80068a8:	e008      	b.n	80068bc <HAL_GPIO_Init+0x244>
 80068aa:	2304      	movs	r3, #4
 80068ac:	e006      	b.n	80068bc <HAL_GPIO_Init+0x244>
 80068ae:	2303      	movs	r3, #3
 80068b0:	e004      	b.n	80068bc <HAL_GPIO_Init+0x244>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e002      	b.n	80068bc <HAL_GPIO_Init+0x244>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e000      	b.n	80068bc <HAL_GPIO_Init+0x244>
 80068ba:	2300      	movs	r3, #0
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	f002 0203 	and.w	r2, r2, #3
 80068c2:	0092      	lsls	r2, r2, #2
 80068c4:	4093      	lsls	r3, r2
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80068cc:	4937      	ldr	r1, [pc, #220]	; (80069ac <HAL_GPIO_Init+0x334>)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	089b      	lsrs	r3, r3, #2
 80068d2:	3302      	adds	r3, #2
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80068da:	4b3b      	ldr	r3, [pc, #236]	; (80069c8 <HAL_GPIO_Init+0x350>)
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	43db      	mvns	r3, r3
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	4013      	ands	r3, r2
 80068e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d003      	beq.n	80068fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80068fe:	4a32      	ldr	r2, [pc, #200]	; (80069c8 <HAL_GPIO_Init+0x350>)
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006904:	4b30      	ldr	r3, [pc, #192]	; (80069c8 <HAL_GPIO_Init+0x350>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	43db      	mvns	r3, r3
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4013      	ands	r3, r2
 8006912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006928:	4a27      	ldr	r2, [pc, #156]	; (80069c8 <HAL_GPIO_Init+0x350>)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800692e:	4b26      	ldr	r3, [pc, #152]	; (80069c8 <HAL_GPIO_Init+0x350>)
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	43db      	mvns	r3, r3
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4013      	ands	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <HAL_GPIO_Init+0x350>)
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006958:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <HAL_GPIO_Init+0x350>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	43db      	mvns	r3, r3
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4013      	ands	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800697c:	4a12      	ldr	r2, [pc, #72]	; (80069c8 <HAL_GPIO_Init+0x350>)
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	3301      	adds	r3, #1
 8006986:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	fa22 f303 	lsr.w	r3, r2, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	f47f ae78 	bne.w	8006688 <HAL_GPIO_Init+0x10>
  }
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40010000 	.word	0x40010000
 80069b0:	48000400 	.word	0x48000400
 80069b4:	48000800 	.word	0x48000800
 80069b8:	48000c00 	.word	0x48000c00
 80069bc:	48001000 	.word	0x48001000
 80069c0:	48001400 	.word	0x48001400
 80069c4:	48001800 	.word	0x48001800
 80069c8:	40010400 	.word	0x40010400

080069cc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80069d6:	2300      	movs	r3, #0
 80069d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80069da:	e0cd      	b.n	8006b78 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80069dc:	2201      	movs	r2, #1
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	fa02 f303 	lsl.w	r3, r2, r3
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	4013      	ands	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 80c0 	beq.w	8006b72 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80069f2:	4a68      	ldr	r2, [pc, #416]	; (8006b94 <HAL_GPIO_DeInit+0x1c8>)
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	089b      	lsrs	r3, r3, #2
 80069f8:	3302      	adds	r3, #2
 80069fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069fe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	220f      	movs	r2, #15
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006a1a:	d025      	beq.n	8006a68 <HAL_GPIO_DeInit+0x9c>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a5e      	ldr	r2, [pc, #376]	; (8006b98 <HAL_GPIO_DeInit+0x1cc>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d01f      	beq.n	8006a64 <HAL_GPIO_DeInit+0x98>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a5d      	ldr	r2, [pc, #372]	; (8006b9c <HAL_GPIO_DeInit+0x1d0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d019      	beq.n	8006a60 <HAL_GPIO_DeInit+0x94>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a5c      	ldr	r2, [pc, #368]	; (8006ba0 <HAL_GPIO_DeInit+0x1d4>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <HAL_GPIO_DeInit+0x90>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a5b      	ldr	r2, [pc, #364]	; (8006ba4 <HAL_GPIO_DeInit+0x1d8>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00d      	beq.n	8006a58 <HAL_GPIO_DeInit+0x8c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a5a      	ldr	r2, [pc, #360]	; (8006ba8 <HAL_GPIO_DeInit+0x1dc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <HAL_GPIO_DeInit+0x88>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a59      	ldr	r2, [pc, #356]	; (8006bac <HAL_GPIO_DeInit+0x1e0>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <HAL_GPIO_DeInit+0x84>
 8006a4c:	2306      	movs	r3, #6
 8006a4e:	e00c      	b.n	8006a6a <HAL_GPIO_DeInit+0x9e>
 8006a50:	2307      	movs	r3, #7
 8006a52:	e00a      	b.n	8006a6a <HAL_GPIO_DeInit+0x9e>
 8006a54:	2305      	movs	r3, #5
 8006a56:	e008      	b.n	8006a6a <HAL_GPIO_DeInit+0x9e>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	e006      	b.n	8006a6a <HAL_GPIO_DeInit+0x9e>
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e004      	b.n	8006a6a <HAL_GPIO_DeInit+0x9e>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e002      	b.n	8006a6a <HAL_GPIO_DeInit+0x9e>
 8006a64:	2301      	movs	r3, #1
 8006a66:	e000      	b.n	8006a6a <HAL_GPIO_DeInit+0x9e>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	f002 0203 	and.w	r2, r2, #3
 8006a70:	0092      	lsls	r2, r2, #2
 8006a72:	4093      	lsls	r3, r2
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d132      	bne.n	8006ae0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006a7a:	4b4d      	ldr	r3, [pc, #308]	; (8006bb0 <HAL_GPIO_DeInit+0x1e4>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	43db      	mvns	r3, r3
 8006a82:	494b      	ldr	r1, [pc, #300]	; (8006bb0 <HAL_GPIO_DeInit+0x1e4>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006a88:	4b49      	ldr	r3, [pc, #292]	; (8006bb0 <HAL_GPIO_DeInit+0x1e4>)
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	43db      	mvns	r3, r3
 8006a90:	4947      	ldr	r1, [pc, #284]	; (8006bb0 <HAL_GPIO_DeInit+0x1e4>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006a96:	4b46      	ldr	r3, [pc, #280]	; (8006bb0 <HAL_GPIO_DeInit+0x1e4>)
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	4944      	ldr	r1, [pc, #272]	; (8006bb0 <HAL_GPIO_DeInit+0x1e4>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006aa4:	4b42      	ldr	r3, [pc, #264]	; (8006bb0 <HAL_GPIO_DeInit+0x1e4>)
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	4940      	ldr	r1, [pc, #256]	; (8006bb0 <HAL_GPIO_DeInit+0x1e4>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f003 0303 	and.w	r3, r3, #3
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	220f      	movs	r2, #15
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006ac2:	4a34      	ldr	r2, [pc, #208]	; (8006b94 <HAL_GPIO_DeInit+0x1c8>)
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	089b      	lsrs	r3, r3, #2
 8006ac8:	3302      	adds	r3, #2
 8006aca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	43da      	mvns	r2, r3
 8006ad2:	4830      	ldr	r0, [pc, #192]	; (8006b94 <HAL_GPIO_DeInit+0x1c8>)
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	400a      	ands	r2, r1
 8006ada:	3302      	adds	r3, #2
 8006adc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	005b      	lsls	r3, r3, #1
 8006ae8:	2103      	movs	r1, #3
 8006aea:	fa01 f303 	lsl.w	r3, r1, r3
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	08da      	lsrs	r2, r3, #3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	3208      	adds	r2, #8
 8006afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	220f      	movs	r2, #15
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	43db      	mvns	r3, r3
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	08d2      	lsrs	r2, r2, #3
 8006b14:	4019      	ands	r1, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3208      	adds	r2, #8
 8006b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	2103      	movs	r1, #3
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	2101      	movs	r1, #1
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b40:	43db      	mvns	r3, r3
 8006b42:	401a      	ands	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	2103      	movs	r1, #3
 8006b52:	fa01 f303 	lsl.w	r3, r1, r3
 8006b56:	43db      	mvns	r3, r3
 8006b58:	401a      	ands	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b62:	2101      	movs	r1, #1
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6a:	43db      	mvns	r3, r3
 8006b6c:	401a      	ands	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	3301      	adds	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f47f af2b 	bne.w	80069dc <HAL_GPIO_DeInit+0x10>
  }
}
 8006b86:	bf00      	nop
 8006b88:	bf00      	nop
 8006b8a:	371c      	adds	r7, #28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	40010000 	.word	0x40010000
 8006b98:	48000400 	.word	0x48000400
 8006b9c:	48000800 	.word	0x48000800
 8006ba0:	48000c00 	.word	0x48000c00
 8006ba4:	48001000 	.word	0x48001000
 8006ba8:	48001400 	.word	0x48001400
 8006bac:	48001800 	.word	0x48001800
 8006bb0:	40010400 	.word	0x40010400

08006bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	807b      	strh	r3, [r7, #2]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bc4:	787b      	ldrb	r3, [r7, #1]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006bca:	887a      	ldrh	r2, [r7, #2]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bd0:	e002      	b.n	8006bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bd2:	887a      	ldrh	r2, [r7, #2]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006bee:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d006      	beq.n	8006c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006bfa:	4a05      	ldr	r2, [pc, #20]	; (8006c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c00:	88fb      	ldrh	r3, [r7, #6]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fb f818 	bl	8001c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40010400 	.word	0x40010400

08006c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e081      	b.n	8006d2a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f8a8 	bl	8006d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2224      	movs	r2, #36	; 0x24
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d107      	bne.n	8006c8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c8a:	609a      	str	r2, [r3, #8]
 8006c8c:	e006      	b.n	8006c9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006c9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d104      	bne.n	8006cae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006cac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	69d9      	ldr	r1, [r3, #28]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1a      	ldr	r2, [r3, #32]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0201 	orr.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b082      	sub	sp, #8
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e021      	b.n	8006d88 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2224      	movs	r2, #36	; 0x24
 8006d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f821 	bl	8006da4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8006dac:	bf00      	nop
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	4608      	mov	r0, r1
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	817b      	strh	r3, [r7, #10]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	813b      	strh	r3, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	f040 80f9 	bne.w	8006fd2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006de0:	6a3b      	ldr	r3, [r7, #32]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <HAL_I2C_Mem_Write+0x34>
 8006de6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d105      	bne.n	8006df8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006df2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0ed      	b.n	8006fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d101      	bne.n	8006e06 <HAL_I2C_Mem_Write+0x4e>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e0e6      	b.n	8006fd4 <HAL_I2C_Mem_Write+0x21c>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e0e:	f7ff f833 	bl	8005e78 <HAL_GetTick>
 8006e12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	2319      	movs	r3, #25
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 fadd 	bl	80073e0 <I2C_WaitOnFlagUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0d1      	b.n	8006fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2221      	movs	r2, #33	; 0x21
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2240      	movs	r2, #64	; 0x40
 8006e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a3a      	ldr	r2, [r7, #32]
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006e58:	88f8      	ldrh	r0, [r7, #6]
 8006e5a:	893a      	ldrh	r2, [r7, #8]
 8006e5c:	8979      	ldrh	r1, [r7, #10]
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	4603      	mov	r3, r0
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f9ed 	bl	8007248 <I2C_RequestMemoryWrite>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e0a9      	b.n	8006fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	2bff      	cmp	r3, #255	; 0xff
 8006e88:	d90e      	bls.n	8006ea8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	8979      	ldrh	r1, [r7, #10]
 8006e98:	2300      	movs	r3, #0
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 fc45 	bl	8007730 <I2C_TransferConfig>
 8006ea6:	e00f      	b.n	8006ec8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	8979      	ldrh	r1, [r7, #10]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f000 fc34 	bl	8007730 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ecc:	68f8      	ldr	r0, [r7, #12]
 8006ece:	f000 fac7 	bl	8007460 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e07b      	b.n	8006fd4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee0:	781a      	ldrb	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d034      	beq.n	8006f80 <HAL_I2C_Mem_Write+0x1c8>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d130      	bne.n	8006f80 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	9300      	str	r3, [sp, #0]
 8006f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f24:	2200      	movs	r2, #0
 8006f26:	2180      	movs	r1, #128	; 0x80
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fa59 	bl	80073e0 <I2C_WaitOnFlagUntilTimeout>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d001      	beq.n	8006f38 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e04d      	b.n	8006fd4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2bff      	cmp	r3, #255	; 0xff
 8006f40:	d90e      	bls.n	8006f60 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	22ff      	movs	r2, #255	; 0xff
 8006f46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	8979      	ldrh	r1, [r7, #10]
 8006f50:	2300      	movs	r3, #0
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fbe9 	bl	8007730 <I2C_TransferConfig>
 8006f5e:	e00f      	b.n	8006f80 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	8979      	ldrh	r1, [r7, #10]
 8006f72:	2300      	movs	r3, #0
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fbd8 	bl	8007730 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d19e      	bne.n	8006ec8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f8a:	697a      	ldr	r2, [r7, #20]
 8006f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 faa6 	bl	80074e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e01a      	b.n	8006fd4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2220      	movs	r2, #32
 8006fa4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6859      	ldr	r1, [r3, #4]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <HAL_I2C_Mem_Write+0x224>)
 8006fb2:	400b      	ands	r3, r1
 8006fb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e000      	b.n	8006fd4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006fd2:	2302      	movs	r3, #2
  }
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	fe00e800 	.word	0xfe00e800

08006fe0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	4608      	mov	r0, r1
 8006fea:	4611      	mov	r1, r2
 8006fec:	461a      	mov	r2, r3
 8006fee:	4603      	mov	r3, r0
 8006ff0:	817b      	strh	r3, [r7, #10]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	813b      	strh	r3, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b20      	cmp	r3, #32
 8007004:	f040 80fd 	bne.w	8007202 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007008:	6a3b      	ldr	r3, [r7, #32]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_I2C_Mem_Read+0x34>
 800700e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d105      	bne.n	8007020 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800701a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0f1      	b.n	8007204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007026:	2b01      	cmp	r3, #1
 8007028:	d101      	bne.n	800702e <HAL_I2C_Mem_Read+0x4e>
 800702a:	2302      	movs	r3, #2
 800702c:	e0ea      	b.n	8007204 <HAL_I2C_Mem_Read+0x224>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007036:	f7fe ff1f 	bl	8005e78 <HAL_GetTick>
 800703a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	2319      	movs	r3, #25
 8007042:	2201      	movs	r2, #1
 8007044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f000 f9c9 	bl	80073e0 <I2C_WaitOnFlagUntilTimeout>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e0d5      	b.n	8007204 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2222      	movs	r2, #34	; 0x22
 800705c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2240      	movs	r2, #64	; 0x40
 8007064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a3a      	ldr	r2, [r7, #32]
 8007072:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007080:	88f8      	ldrh	r0, [r7, #6]
 8007082:	893a      	ldrh	r2, [r7, #8]
 8007084:	8979      	ldrh	r1, [r7, #10]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	4603      	mov	r3, r0
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 f92d 	bl	80072f0 <I2C_RequestMemoryRead>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0ad      	b.n	8007204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	2bff      	cmp	r3, #255	; 0xff
 80070b0:	d90e      	bls.n	80070d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	22ff      	movs	r2, #255	; 0xff
 80070b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070bc:	b2da      	uxtb	r2, r3
 80070be:	8979      	ldrh	r1, [r7, #10]
 80070c0:	4b52      	ldr	r3, [pc, #328]	; (800720c <HAL_I2C_Mem_Read+0x22c>)
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 fb31 	bl	8007730 <I2C_TransferConfig>
 80070ce:	e00f      	b.n	80070f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	8979      	ldrh	r1, [r7, #10]
 80070e2:	4b4a      	ldr	r3, [pc, #296]	; (800720c <HAL_I2C_Mem_Read+0x22c>)
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 fb20 	bl	8007730 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	2200      	movs	r2, #0
 80070f8:	2104      	movs	r1, #4
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 f970 	bl	80073e0 <I2C_WaitOnFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e07c      	b.n	8007204 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d034      	beq.n	80071b0 <HAL_I2C_Mem_Read+0x1d0>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714a:	2b00      	cmp	r3, #0
 800714c:	d130      	bne.n	80071b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007154:	2200      	movs	r2, #0
 8007156:	2180      	movs	r1, #128	; 0x80
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f941 	bl	80073e0 <I2C_WaitOnFlagUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e04d      	b.n	8007204 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716c:	b29b      	uxth	r3, r3
 800716e:	2bff      	cmp	r3, #255	; 0xff
 8007170:	d90e      	bls.n	8007190 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	22ff      	movs	r2, #255	; 0xff
 8007176:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717c:	b2da      	uxtb	r2, r3
 800717e:	8979      	ldrh	r1, [r7, #10]
 8007180:	2300      	movs	r3, #0
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f000 fad1 	bl	8007730 <I2C_TransferConfig>
 800718e:	e00f      	b.n	80071b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007194:	b29a      	uxth	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	8979      	ldrh	r1, [r7, #10]
 80071a2:	2300      	movs	r3, #0
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 fac0 	bl	8007730 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d19a      	bne.n	80070f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 f98e 	bl	80074e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e01a      	b.n	8007204 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2220      	movs	r2, #32
 80071d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6859      	ldr	r1, [r3, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <HAL_I2C_Mem_Read+0x230>)
 80071e2:	400b      	ands	r3, r1
 80071e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	e000      	b.n	8007204 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007202:	2302      	movs	r3, #2
  }
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	80002400 	.word	0x80002400
 8007210:	fe00e800 	.word	0xfe00e800

08007214 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007222:	b2db      	uxtb	r3, r3
}
 8007224:	4618      	mov	r0, r3
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800723c:	4618      	mov	r0, r3
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af02      	add	r7, sp, #8
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	4608      	mov	r0, r1
 8007252:	4611      	mov	r1, r2
 8007254:	461a      	mov	r2, r3
 8007256:	4603      	mov	r3, r0
 8007258:	817b      	strh	r3, [r7, #10]
 800725a:	460b      	mov	r3, r1
 800725c:	813b      	strh	r3, [r7, #8]
 800725e:	4613      	mov	r3, r2
 8007260:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	8979      	ldrh	r1, [r7, #10]
 8007268:	4b20      	ldr	r3, [pc, #128]	; (80072ec <I2C_RequestMemoryWrite+0xa4>)
 800726a:	9300      	str	r3, [sp, #0]
 800726c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f000 fa5d 	bl	8007730 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007276:	69fa      	ldr	r2, [r7, #28]
 8007278:	69b9      	ldr	r1, [r7, #24]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f8f0 	bl	8007460 <I2C_WaitOnTXISFlagUntilTimeout>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	e02c      	b.n	80072e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d105      	bne.n	800729c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007290:	893b      	ldrh	r3, [r7, #8]
 8007292:	b2da      	uxtb	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	629a      	str	r2, [r3, #40]	; 0x28
 800729a:	e015      	b.n	80072c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800729c:	893b      	ldrh	r3, [r7, #8]
 800729e:	0a1b      	lsrs	r3, r3, #8
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072aa:	69fa      	ldr	r2, [r7, #28]
 80072ac:	69b9      	ldr	r1, [r7, #24]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f8d6 	bl	8007460 <I2C_WaitOnTXISFlagUntilTimeout>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e012      	b.n	80072e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072be:	893b      	ldrh	r3, [r7, #8]
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2180      	movs	r1, #128	; 0x80
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 f884 	bl	80073e0 <I2C_WaitOnFlagUntilTimeout>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e000      	b.n	80072e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	80002000 	.word	0x80002000

080072f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	4608      	mov	r0, r1
 80072fa:	4611      	mov	r1, r2
 80072fc:	461a      	mov	r2, r3
 80072fe:	4603      	mov	r3, r0
 8007300:	817b      	strh	r3, [r7, #10]
 8007302:	460b      	mov	r3, r1
 8007304:	813b      	strh	r3, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800730a:	88fb      	ldrh	r3, [r7, #6]
 800730c:	b2da      	uxtb	r2, r3
 800730e:	8979      	ldrh	r1, [r7, #10]
 8007310:	4b20      	ldr	r3, [pc, #128]	; (8007394 <I2C_RequestMemoryRead+0xa4>)
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	2300      	movs	r3, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f000 fa0a 	bl	8007730 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	69b9      	ldr	r1, [r7, #24]
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f89d 	bl	8007460 <I2C_WaitOnTXISFlagUntilTimeout>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e02c      	b.n	800738a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d105      	bne.n	8007342 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007336:	893b      	ldrh	r3, [r7, #8]
 8007338:	b2da      	uxtb	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	629a      	str	r2, [r3, #40]	; 0x28
 8007340:	e015      	b.n	800736e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007342:	893b      	ldrh	r3, [r7, #8]
 8007344:	0a1b      	lsrs	r3, r3, #8
 8007346:	b29b      	uxth	r3, r3
 8007348:	b2da      	uxtb	r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	69b9      	ldr	r1, [r7, #24]
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f883 	bl	8007460 <I2C_WaitOnTXISFlagUntilTimeout>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e012      	b.n	800738a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007364:	893b      	ldrh	r3, [r7, #8]
 8007366:	b2da      	uxtb	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2200      	movs	r2, #0
 8007376:	2140      	movs	r1, #64	; 0x40
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f831 	bl	80073e0 <I2C_WaitOnFlagUntilTimeout>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e000      	b.n	800738a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	80002000 	.word	0x80002000

08007398 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d103      	bne.n	80073b6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2200      	movs	r2, #0
 80073b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d007      	beq.n	80073d4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f042 0201 	orr.w	r2, r2, #1
 80073d2:	619a      	str	r2, [r3, #24]
  }
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	4613      	mov	r3, r2
 80073ee:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f0:	e022      	b.n	8007438 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f8:	d01e      	beq.n	8007438 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073fa:	f7fe fd3d 	bl	8005e78 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	683a      	ldr	r2, [r7, #0]
 8007406:	429a      	cmp	r2, r3
 8007408:	d302      	bcc.n	8007410 <I2C_WaitOnFlagUntilTimeout+0x30>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d113      	bne.n	8007438 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e00f      	b.n	8007458 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4013      	ands	r3, r2
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	bf0c      	ite	eq
 8007448:	2301      	moveq	r3, #1
 800744a:	2300      	movne	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	461a      	mov	r2, r3
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	429a      	cmp	r2, r3
 8007454:	d0cd      	beq.n	80073f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800746c:	e02c      	b.n	80074c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 f870 	bl	8007558 <I2C_IsErrorOccurred>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e02a      	b.n	80074d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d01e      	beq.n	80074c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800748a:	f7fe fcf5 	bl	8005e78 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	429a      	cmp	r2, r3
 8007498:	d302      	bcc.n	80074a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d113      	bne.n	80074c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a4:	f043 0220 	orr.w	r2, r3, #32
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e007      	b.n	80074d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d1cb      	bne.n	800746e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074ec:	e028      	b.n	8007540 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074ee:	687a      	ldr	r2, [r7, #4]
 80074f0:	68b9      	ldr	r1, [r7, #8]
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f830 	bl	8007558 <I2C_IsErrorOccurred>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e026      	b.n	8007550 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007502:	f7fe fcb9 	bl	8005e78 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	429a      	cmp	r2, r3
 8007510:	d302      	bcc.n	8007518 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d113      	bne.n	8007540 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751c:	f043 0220 	orr.w	r2, r3, #32
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e007      	b.n	8007550 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	f003 0320 	and.w	r3, r3, #32
 800754a:	2b20      	cmp	r3, #32
 800754c:	d1cf      	bne.n	80074ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b08a      	sub	sp, #40	; 0x28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d075      	beq.n	8007670 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2210      	movs	r2, #16
 800758a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800758c:	e056      	b.n	800763c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007594:	d052      	beq.n	800763c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007596:	f7fe fc6f 	bl	8005e78 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d302      	bcc.n	80075ac <I2C_IsErrorOccurred+0x54>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d147      	bne.n	800763c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80075be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075ce:	d12e      	bne.n	800762e <I2C_IsErrorOccurred+0xd6>
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075d6:	d02a      	beq.n	800762e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80075d8:	7cfb      	ldrb	r3, [r7, #19]
 80075da:	2b20      	cmp	r3, #32
 80075dc:	d027      	beq.n	800762e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685a      	ldr	r2, [r3, #4]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075ec:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80075ee:	f7fe fc43 	bl	8005e78 <HAL_GetTick>
 80075f2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075f4:	e01b      	b.n	800762e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80075f6:	f7fe fc3f 	bl	8005e78 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b19      	cmp	r3, #25
 8007602:	d914      	bls.n	800762e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007608:	f043 0220 	orr.w	r2, r3, #32
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f003 0320 	and.w	r3, r3, #32
 8007638:	2b20      	cmp	r3, #32
 800763a:	d1dc      	bne.n	80075f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b20      	cmp	r3, #32
 8007648:	d003      	beq.n	8007652 <I2C_IsErrorOccurred+0xfa>
 800764a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800764e:	2b00      	cmp	r3, #0
 8007650:	d09d      	beq.n	800758e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007656:	2b00      	cmp	r3, #0
 8007658:	d103      	bne.n	8007662 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2220      	movs	r2, #32
 8007660:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	f043 0304 	orr.w	r3, r3, #4
 8007668:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00b      	beq.n	800769a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	f043 0301 	orr.w	r3, r3, #1
 8007688:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007692:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00b      	beq.n	80076bc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	f043 0308 	orr.w	r3, r3, #8
 80076aa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00b      	beq.n	80076de <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	f043 0302 	orr.w	r3, r3, #2
 80076cc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80076de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01c      	beq.n	8007720 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f7ff fe56 	bl	8007398 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6859      	ldr	r1, [r3, #4]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <I2C_IsErrorOccurred+0x1d4>)
 80076f8:	400b      	ands	r3, r1
 80076fa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	431a      	orrs	r2, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007724:	4618      	mov	r0, r3
 8007726:	3728      	adds	r7, #40	; 0x28
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	fe00e800 	.word	0xfe00e800

08007730 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	607b      	str	r3, [r7, #4]
 800773a:	460b      	mov	r3, r1
 800773c:	817b      	strh	r3, [r7, #10]
 800773e:	4613      	mov	r3, r2
 8007740:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007742:	897b      	ldrh	r3, [r7, #10]
 8007744:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007748:	7a7b      	ldrb	r3, [r7, #9]
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007750:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007756:	6a3b      	ldr	r3, [r7, #32]
 8007758:	4313      	orrs	r3, r2
 800775a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800775e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	0d5b      	lsrs	r3, r3, #21
 800776a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800776e:	4b08      	ldr	r3, [pc, #32]	; (8007790 <I2C_TransferConfig+0x60>)
 8007770:	430b      	orrs	r3, r1
 8007772:	43db      	mvns	r3, r3
 8007774:	ea02 0103 	and.w	r1, r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	03ff63ff 	.word	0x03ff63ff

08007794 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d138      	bne.n	800781c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077b4:	2302      	movs	r3, #2
 80077b6:	e032      	b.n	800781e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2224      	movs	r2, #36	; 0x24
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 0201 	bic.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6819      	ldr	r1, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	430a      	orrs	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f042 0201 	orr.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2220      	movs	r2, #32
 800780c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	e000      	b.n	800781e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800781c:	2302      	movs	r3, #2
  }
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800782a:	b480      	push	{r7}
 800782c:	b085      	sub	sp, #20
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b20      	cmp	r3, #32
 800783e:	d139      	bne.n	80078b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007846:	2b01      	cmp	r3, #1
 8007848:	d101      	bne.n	800784e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800784a:	2302      	movs	r3, #2
 800784c:	e033      	b.n	80078b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2224      	movs	r2, #36	; 0x24
 800785a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0201 	bic.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800787c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	021b      	lsls	r3, r3, #8
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0201 	orr.w	r2, r2, #1
 800789e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	e000      	b.n	80078b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078b4:	2302      	movs	r3, #2
  }
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
	...

080078c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <HAL_PWREx_GetVoltageRange+0x18>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	40007000 	.word	0x40007000

080078e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ee:	d130      	bne.n	8007952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80078f0:	4b23      	ldr	r3, [pc, #140]	; (8007980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078fc:	d038      	beq.n	8007970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078fe:	4b20      	ldr	r3, [pc, #128]	; (8007980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007906:	4a1e      	ldr	r2, [pc, #120]	; (8007980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800790c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800790e:	4b1d      	ldr	r3, [pc, #116]	; (8007984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2232      	movs	r2, #50	; 0x32
 8007914:	fb02 f303 	mul.w	r3, r2, r3
 8007918:	4a1b      	ldr	r2, [pc, #108]	; (8007988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800791a:	fba2 2303 	umull	r2, r3, r2, r3
 800791e:	0c9b      	lsrs	r3, r3, #18
 8007920:	3301      	adds	r3, #1
 8007922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007924:	e002      	b.n	800792c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3b01      	subs	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800792c:	4b14      	ldr	r3, [pc, #80]	; (8007980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007938:	d102      	bne.n	8007940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1f2      	bne.n	8007926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007940:	4b0f      	ldr	r3, [pc, #60]	; (8007980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794c:	d110      	bne.n	8007970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e00f      	b.n	8007972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007952:	4b0b      	ldr	r3, [pc, #44]	; (8007980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800795a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800795e:	d007      	beq.n	8007970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007960:	4b07      	ldr	r3, [pc, #28]	; (8007980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007968:	4a05      	ldr	r2, [pc, #20]	; (8007980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800796a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800796e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40007000 	.word	0x40007000
 8007984:	2000000c 	.word	0x2000000c
 8007988:	431bde83 	.word	0x431bde83

0800798c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e3d4      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800799e:	4ba1      	ldr	r3, [pc, #644]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f003 030c 	and.w	r3, r3, #12
 80079a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079a8:	4b9e      	ldr	r3, [pc, #632]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f003 0303 	and.w	r3, r3, #3
 80079b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0310 	and.w	r3, r3, #16
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 80e4 	beq.w	8007b88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <HAL_RCC_OscConfig+0x4a>
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2b0c      	cmp	r3, #12
 80079ca:	f040 808b 	bne.w	8007ae4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	f040 8087 	bne.w	8007ae4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80079d6:	4b93      	ldr	r3, [pc, #588]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f003 0302 	and.w	r3, r3, #2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d005      	beq.n	80079ee <HAL_RCC_OscConfig+0x62>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e3ac      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1a      	ldr	r2, [r3, #32]
 80079f2:	4b8c      	ldr	r3, [pc, #560]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d004      	beq.n	8007a08 <HAL_RCC_OscConfig+0x7c>
 80079fe:	4b89      	ldr	r3, [pc, #548]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a06:	e005      	b.n	8007a14 <HAL_RCC_OscConfig+0x88>
 8007a08:	4b86      	ldr	r3, [pc, #536]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a0e:	091b      	lsrs	r3, r3, #4
 8007a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d223      	bcs.n	8007a60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fd41 	bl	80084a4 <RCC_SetFlashLatencyFromMSIRange>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e38d      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a2c:	4b7d      	ldr	r3, [pc, #500]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a7c      	ldr	r2, [pc, #496]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a32:	f043 0308 	orr.w	r3, r3, #8
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	4b7a      	ldr	r3, [pc, #488]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	4977      	ldr	r1, [pc, #476]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a4a:	4b76      	ldr	r3, [pc, #472]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	4972      	ldr	r1, [pc, #456]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	604b      	str	r3, [r1, #4]
 8007a5e:	e025      	b.n	8007aac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a60:	4b70      	ldr	r3, [pc, #448]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a6f      	ldr	r2, [pc, #444]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a66:	f043 0308 	orr.w	r3, r3, #8
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	4b6d      	ldr	r3, [pc, #436]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	496a      	ldr	r1, [pc, #424]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a7e:	4b69      	ldr	r3, [pc, #420]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	4965      	ldr	r1, [pc, #404]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d109      	bne.n	8007aac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fd01 	bl	80084a4 <RCC_SetFlashLatencyFromMSIRange>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e34d      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007aac:	f000 fc36 	bl	800831c <HAL_RCC_GetSysClockFreq>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b5c      	ldr	r3, [pc, #368]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	091b      	lsrs	r3, r3, #4
 8007ab8:	f003 030f 	and.w	r3, r3, #15
 8007abc:	495a      	ldr	r1, [pc, #360]	; (8007c28 <HAL_RCC_OscConfig+0x29c>)
 8007abe:	5ccb      	ldrb	r3, [r1, r3]
 8007ac0:	f003 031f 	and.w	r3, r3, #31
 8007ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ac8:	4a58      	ldr	r2, [pc, #352]	; (8007c2c <HAL_RCC_OscConfig+0x2a0>)
 8007aca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007acc:	4b58      	ldr	r3, [pc, #352]	; (8007c30 <HAL_RCC_OscConfig+0x2a4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe f981 	bl	8005dd8 <HAL_InitTick>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d052      	beq.n	8007b86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	e331      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d032      	beq.n	8007b52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007aec:	4b4d      	ldr	r3, [pc, #308]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a4c      	ldr	r2, [pc, #304]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007af2:	f043 0301 	orr.w	r3, r3, #1
 8007af6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007af8:	f7fe f9be 	bl	8005e78 <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b00:	f7fe f9ba 	bl	8005e78 <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e31a      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007b12:	4b44      	ldr	r3, [pc, #272]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0f0      	beq.n	8007b00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b1e:	4b41      	ldr	r3, [pc, #260]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a40      	ldr	r2, [pc, #256]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b24:	f043 0308 	orr.w	r3, r3, #8
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	4b3e      	ldr	r3, [pc, #248]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	493b      	ldr	r1, [pc, #236]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b3c:	4b39      	ldr	r3, [pc, #228]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	4936      	ldr	r1, [pc, #216]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	604b      	str	r3, [r1, #4]
 8007b50:	e01a      	b.n	8007b88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007b52:	4b34      	ldr	r3, [pc, #208]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a33      	ldr	r2, [pc, #204]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b58:	f023 0301 	bic.w	r3, r3, #1
 8007b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007b5e:	f7fe f98b 	bl	8005e78 <HAL_GetTick>
 8007b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007b64:	e008      	b.n	8007b78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b66:	f7fe f987 	bl	8005e78 <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d901      	bls.n	8007b78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e2e7      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007b78:	4b2a      	ldr	r3, [pc, #168]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1f0      	bne.n	8007b66 <HAL_RCC_OscConfig+0x1da>
 8007b84:	e000      	b.n	8007b88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d074      	beq.n	8007c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	2b08      	cmp	r3, #8
 8007b98:	d005      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x21a>
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2b0c      	cmp	r3, #12
 8007b9e:	d10e      	bne.n	8007bbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d10b      	bne.n	8007bbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba6:	4b1f      	ldr	r3, [pc, #124]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d064      	beq.n	8007c7c <HAL_RCC_OscConfig+0x2f0>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d160      	bne.n	8007c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e2c4      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc6:	d106      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x24a>
 8007bc8:	4b16      	ldr	r3, [pc, #88]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a15      	ldr	r2, [pc, #84]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	e01d      	b.n	8007c12 <HAL_RCC_OscConfig+0x286>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bde:	d10c      	bne.n	8007bfa <HAL_RCC_OscConfig+0x26e>
 8007be0:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a0f      	ldr	r2, [pc, #60]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bea:	6013      	str	r3, [r2, #0]
 8007bec:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a0c      	ldr	r2, [pc, #48]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bf6:	6013      	str	r3, [r2, #0]
 8007bf8:	e00b      	b.n	8007c12 <HAL_RCC_OscConfig+0x286>
 8007bfa:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c04:	6013      	str	r3, [r2, #0]
 8007c06:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a06      	ldr	r2, [pc, #24]	; (8007c24 <HAL_RCC_OscConfig+0x298>)
 8007c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01c      	beq.n	8007c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1a:	f7fe f92d 	bl	8005e78 <HAL_GetTick>
 8007c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c20:	e011      	b.n	8007c46 <HAL_RCC_OscConfig+0x2ba>
 8007c22:	bf00      	nop
 8007c24:	40021000 	.word	0x40021000
 8007c28:	08019f88 	.word	0x08019f88
 8007c2c:	2000000c 	.word	0x2000000c
 8007c30:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c34:	f7fe f920 	bl	8005e78 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	2b64      	cmp	r3, #100	; 0x64
 8007c40:	d901      	bls.n	8007c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e280      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007c46:	4baf      	ldr	r3, [pc, #700]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d0f0      	beq.n	8007c34 <HAL_RCC_OscConfig+0x2a8>
 8007c52:	e014      	b.n	8007c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c54:	f7fe f910 	bl	8005e78 <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c5c:	f7fe f90c 	bl	8005e78 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b64      	cmp	r3, #100	; 0x64
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e26c      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007c6e:	4ba5      	ldr	r3, [pc, #660]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f0      	bne.n	8007c5c <HAL_RCC_OscConfig+0x2d0>
 8007c7a:	e000      	b.n	8007c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d060      	beq.n	8007d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d005      	beq.n	8007c9c <HAL_RCC_OscConfig+0x310>
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b0c      	cmp	r3, #12
 8007c94:	d119      	bne.n	8007cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d116      	bne.n	8007cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c9c:	4b99      	ldr	r3, [pc, #612]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x328>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e249      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cb4:	4b93      	ldr	r3, [pc, #588]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	061b      	lsls	r3, r3, #24
 8007cc2:	4990      	ldr	r1, [pc, #576]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cc8:	e040      	b.n	8007d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d023      	beq.n	8007d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cd2:	4b8c      	ldr	r3, [pc, #560]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a8b      	ldr	r2, [pc, #556]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cde:	f7fe f8cb 	bl	8005e78 <HAL_GetTick>
 8007ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ce6:	f7fe f8c7 	bl	8005e78 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e227      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007cf8:	4b82      	ldr	r3, [pc, #520]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0f0      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d04:	4b7f      	ldr	r3, [pc, #508]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	061b      	lsls	r3, r3, #24
 8007d12:	497c      	ldr	r1, [pc, #496]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	604b      	str	r3, [r1, #4]
 8007d18:	e018      	b.n	8007d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d1a:	4b7a      	ldr	r3, [pc, #488]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a79      	ldr	r2, [pc, #484]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d26:	f7fe f8a7 	bl	8005e78 <HAL_GetTick>
 8007d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d2c:	e008      	b.n	8007d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d2e:	f7fe f8a3 	bl	8005e78 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d901      	bls.n	8007d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e203      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007d40:	4b70      	ldr	r3, [pc, #448]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f0      	bne.n	8007d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d03c      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d01c      	beq.n	8007d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d60:	4b68      	ldr	r3, [pc, #416]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d66:	4a67      	ldr	r2, [pc, #412]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007d68:	f043 0301 	orr.w	r3, r3, #1
 8007d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d70:	f7fe f882 	bl	8005e78 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d78:	f7fe f87e 	bl	8005e78 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e1de      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d8a:	4b5e      	ldr	r3, [pc, #376]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d90:	f003 0302 	and.w	r3, r3, #2
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d0ef      	beq.n	8007d78 <HAL_RCC_OscConfig+0x3ec>
 8007d98:	e01b      	b.n	8007dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d9a:	4b5a      	ldr	r3, [pc, #360]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007da0:	4a58      	ldr	r2, [pc, #352]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007daa:	f7fe f865 	bl	8005e78 <HAL_GetTick>
 8007dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007db0:	e008      	b.n	8007dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007db2:	f7fe f861 	bl	8005e78 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e1c1      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007dc4:	4b4f      	ldr	r3, [pc, #316]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dca:	f003 0302 	and.w	r3, r3, #2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1ef      	bne.n	8007db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 80a6 	beq.w	8007f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007de0:	2300      	movs	r3, #0
 8007de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007de4:	4b47      	ldr	r3, [pc, #284]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10d      	bne.n	8007e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007df0:	4b44      	ldr	r3, [pc, #272]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df4:	4a43      	ldr	r2, [pc, #268]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8007dfc:	4b41      	ldr	r3, [pc, #260]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e04:	60bb      	str	r3, [r7, #8]
 8007e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e0c:	4b3e      	ldr	r3, [pc, #248]	; (8007f08 <HAL_RCC_OscConfig+0x57c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d118      	bne.n	8007e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e18:	4b3b      	ldr	r3, [pc, #236]	; (8007f08 <HAL_RCC_OscConfig+0x57c>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a3a      	ldr	r2, [pc, #232]	; (8007f08 <HAL_RCC_OscConfig+0x57c>)
 8007e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e24:	f7fe f828 	bl	8005e78 <HAL_GetTick>
 8007e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e2a:	e008      	b.n	8007e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e2c:	f7fe f824 	bl	8005e78 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e184      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e3e:	4b32      	ldr	r3, [pc, #200]	; (8007f08 <HAL_RCC_OscConfig+0x57c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0f0      	beq.n	8007e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d108      	bne.n	8007e64 <HAL_RCC_OscConfig+0x4d8>
 8007e52:	4b2c      	ldr	r3, [pc, #176]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e58:	4a2a      	ldr	r2, [pc, #168]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e62:	e024      	b.n	8007eae <HAL_RCC_OscConfig+0x522>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	2b05      	cmp	r3, #5
 8007e6a:	d110      	bne.n	8007e8e <HAL_RCC_OscConfig+0x502>
 8007e6c:	4b25      	ldr	r3, [pc, #148]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e72:	4a24      	ldr	r2, [pc, #144]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007e74:	f043 0304 	orr.w	r3, r3, #4
 8007e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e7c:	4b21      	ldr	r3, [pc, #132]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e82:	4a20      	ldr	r2, [pc, #128]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007e84:	f043 0301 	orr.w	r3, r3, #1
 8007e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e8c:	e00f      	b.n	8007eae <HAL_RCC_OscConfig+0x522>
 8007e8e:	4b1d      	ldr	r3, [pc, #116]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e94:	4a1b      	ldr	r2, [pc, #108]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007e96:	f023 0301 	bic.w	r3, r3, #1
 8007e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007e9e:	4b19      	ldr	r3, [pc, #100]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea4:	4a17      	ldr	r2, [pc, #92]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007ea6:	f023 0304 	bic.w	r3, r3, #4
 8007eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d016      	beq.n	8007ee4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb6:	f7fd ffdf 	bl	8005e78 <HAL_GetTick>
 8007eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ebc:	e00a      	b.n	8007ed4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ebe:	f7fd ffdb 	bl	8005e78 <HAL_GetTick>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	1ad3      	subs	r3, r2, r3
 8007ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e139      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <HAL_RCC_OscConfig+0x578>)
 8007ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0ed      	beq.n	8007ebe <HAL_RCC_OscConfig+0x532>
 8007ee2:	e01a      	b.n	8007f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee4:	f7fd ffc8 	bl	8005e78 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007eea:	e00f      	b.n	8007f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eec:	f7fd ffc4 	bl	8005e78 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d906      	bls.n	8007f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e122      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
 8007f02:	bf00      	nop
 8007f04:	40021000 	.word	0x40021000
 8007f08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f0c:	4b90      	ldr	r3, [pc, #576]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8007f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e8      	bne.n	8007eec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f1a:	7ffb      	ldrb	r3, [r7, #31]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d105      	bne.n	8007f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f20:	4b8b      	ldr	r3, [pc, #556]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8007f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f24:	4a8a      	ldr	r2, [pc, #552]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8007f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8108 	beq.w	8008146 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	f040 80d0 	bne.w	80080e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007f40:	4b83      	ldr	r3, [pc, #524]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f003 0203 	and.w	r2, r3, #3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d130      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d127      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d11f      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f80:	2a07      	cmp	r2, #7
 8007f82:	bf14      	ite	ne
 8007f84:	2201      	movne	r2, #1
 8007f86:	2200      	moveq	r2, #0
 8007f88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d113      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f98:	085b      	lsrs	r3, r3, #1
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d109      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	085b      	lsrs	r3, r3, #1
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d06e      	beq.n	8008094 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2b0c      	cmp	r3, #12
 8007fba:	d069      	beq.n	8008090 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007fbc:	4b64      	ldr	r3, [pc, #400]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d105      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007fc8:	4b61      	ldr	r3, [pc, #388]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e0b7      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007fd8:	4b5d      	ldr	r3, [pc, #372]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a5c      	ldr	r2, [pc, #368]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8007fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fe2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007fe4:	f7fd ff48 	bl	8005e78 <HAL_GetTick>
 8007fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fec:	f7fd ff44 	bl	8005e78 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e0a4      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ffe:	4b54      	ldr	r3, [pc, #336]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f0      	bne.n	8007fec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800800a:	4b51      	ldr	r3, [pc, #324]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	4b51      	ldr	r3, [pc, #324]	; (8008154 <HAL_RCC_OscConfig+0x7c8>)
 8008010:	4013      	ands	r3, r2
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800801a:	3a01      	subs	r2, #1
 800801c:	0112      	lsls	r2, r2, #4
 800801e:	4311      	orrs	r1, r2
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008024:	0212      	lsls	r2, r2, #8
 8008026:	4311      	orrs	r1, r2
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800802c:	0852      	lsrs	r2, r2, #1
 800802e:	3a01      	subs	r2, #1
 8008030:	0552      	lsls	r2, r2, #21
 8008032:	4311      	orrs	r1, r2
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008038:	0852      	lsrs	r2, r2, #1
 800803a:	3a01      	subs	r2, #1
 800803c:	0652      	lsls	r2, r2, #25
 800803e:	4311      	orrs	r1, r2
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008044:	0912      	lsrs	r2, r2, #4
 8008046:	0452      	lsls	r2, r2, #17
 8008048:	430a      	orrs	r2, r1
 800804a:	4941      	ldr	r1, [pc, #260]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 800804c:	4313      	orrs	r3, r2
 800804e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008050:	4b3f      	ldr	r3, [pc, #252]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a3e      	ldr	r2, [pc, #248]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800805a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800805c:	4b3c      	ldr	r3, [pc, #240]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	4a3b      	ldr	r2, [pc, #236]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008068:	f7fd ff06 	bl	8005e78 <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008070:	f7fd ff02 	bl	8005e78 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e062      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008082:	4b33      	ldr	r3, [pc, #204]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d0f0      	beq.n	8008070 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800808e:	e05a      	b.n	8008146 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e059      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008094:	4b2e      	ldr	r3, [pc, #184]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d152      	bne.n	8008146 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80080a0:	4b2b      	ldr	r3, [pc, #172]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a2a      	ldr	r2, [pc, #168]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 80080a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80080ac:	4b28      	ldr	r3, [pc, #160]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	4a27      	ldr	r2, [pc, #156]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 80080b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80080b8:	f7fd fede 	bl	8005e78 <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080c0:	f7fd feda 	bl	8005e78 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e03a      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080d2:	4b1f      	ldr	r3, [pc, #124]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0f0      	beq.n	80080c0 <HAL_RCC_OscConfig+0x734>
 80080de:	e032      	b.n	8008146 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	2b0c      	cmp	r3, #12
 80080e4:	d02d      	beq.n	8008142 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e6:	4b1a      	ldr	r3, [pc, #104]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a19      	ldr	r2, [pc, #100]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 80080ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80080f2:	4b17      	ldr	r3, [pc, #92]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d105      	bne.n	800810a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80080fe:	4b14      	ldr	r3, [pc, #80]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	4a13      	ldr	r2, [pc, #76]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800810a:	4b11      	ldr	r3, [pc, #68]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	4a10      	ldr	r2, [pc, #64]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008110:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008118:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800811a:	f7fd fead 	bl	8005e78 <HAL_GetTick>
 800811e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008120:	e008      	b.n	8008134 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008122:	f7fd fea9 	bl	8005e78 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d901      	bls.n	8008134 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e009      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008134:	4b06      	ldr	r3, [pc, #24]	; (8008150 <HAL_RCC_OscConfig+0x7c4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1f0      	bne.n	8008122 <HAL_RCC_OscConfig+0x796>
 8008140:	e001      	b.n	8008146 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e000      	b.n	8008148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3720      	adds	r7, #32
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	40021000 	.word	0x40021000
 8008154:	f99d808c 	.word	0xf99d808c

08008158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e0c8      	b.n	80082fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800816c:	4b66      	ldr	r3, [pc, #408]	; (8008308 <HAL_RCC_ClockConfig+0x1b0>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0307 	and.w	r3, r3, #7
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d910      	bls.n	800819c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800817a:	4b63      	ldr	r3, [pc, #396]	; (8008308 <HAL_RCC_ClockConfig+0x1b0>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f023 0207 	bic.w	r2, r3, #7
 8008182:	4961      	ldr	r1, [pc, #388]	; (8008308 <HAL_RCC_ClockConfig+0x1b0>)
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	4313      	orrs	r3, r2
 8008188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800818a:	4b5f      	ldr	r3, [pc, #380]	; (8008308 <HAL_RCC_ClockConfig+0x1b0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d001      	beq.n	800819c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e0b0      	b.n	80082fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d04c      	beq.n	8008242 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d107      	bne.n	80081c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081b0:	4b56      	ldr	r3, [pc, #344]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d121      	bne.n	8008200 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e09e      	b.n	80082fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d107      	bne.n	80081d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081c8:	4b50      	ldr	r3, [pc, #320]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d115      	bne.n	8008200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e092      	b.n	80082fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d107      	bne.n	80081f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80081e0:	4b4a      	ldr	r3, [pc, #296]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d109      	bne.n	8008200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e086      	b.n	80082fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081f0:	4b46      	ldr	r3, [pc, #280]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e07e      	b.n	80082fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008200:	4b42      	ldr	r3, [pc, #264]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f023 0203 	bic.w	r2, r3, #3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	493f      	ldr	r1, [pc, #252]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 800820e:	4313      	orrs	r3, r2
 8008210:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008212:	f7fd fe31 	bl	8005e78 <HAL_GetTick>
 8008216:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008218:	e00a      	b.n	8008230 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800821a:	f7fd fe2d 	bl	8005e78 <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	f241 3288 	movw	r2, #5000	; 0x1388
 8008228:	4293      	cmp	r3, r2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e066      	b.n	80082fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008230:	4b36      	ldr	r3, [pc, #216]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f003 020c 	and.w	r2, r3, #12
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	429a      	cmp	r2, r3
 8008240:	d1eb      	bne.n	800821a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b00      	cmp	r3, #0
 800824c:	d008      	beq.n	8008260 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800824e:	4b2f      	ldr	r3, [pc, #188]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	492c      	ldr	r1, [pc, #176]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 800825c:	4313      	orrs	r3, r2
 800825e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008260:	4b29      	ldr	r3, [pc, #164]	; (8008308 <HAL_RCC_ClockConfig+0x1b0>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0307 	and.w	r3, r3, #7
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	429a      	cmp	r2, r3
 800826c:	d210      	bcs.n	8008290 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800826e:	4b26      	ldr	r3, [pc, #152]	; (8008308 <HAL_RCC_ClockConfig+0x1b0>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f023 0207 	bic.w	r2, r3, #7
 8008276:	4924      	ldr	r1, [pc, #144]	; (8008308 <HAL_RCC_ClockConfig+0x1b0>)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	4313      	orrs	r3, r2
 800827c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800827e:	4b22      	ldr	r3, [pc, #136]	; (8008308 <HAL_RCC_ClockConfig+0x1b0>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	683a      	ldr	r2, [r7, #0]
 8008288:	429a      	cmp	r2, r3
 800828a:	d001      	beq.n	8008290 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e036      	b.n	80082fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d008      	beq.n	80082ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800829c:	4b1b      	ldr	r3, [pc, #108]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	4918      	ldr	r1, [pc, #96]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082ba:	4b14      	ldr	r3, [pc, #80]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4910      	ldr	r1, [pc, #64]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 80082ca:	4313      	orrs	r3, r2
 80082cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80082ce:	f000 f825 	bl	800831c <HAL_RCC_GetSysClockFreq>
 80082d2:	4602      	mov	r2, r0
 80082d4:	4b0d      	ldr	r3, [pc, #52]	; (800830c <HAL_RCC_ClockConfig+0x1b4>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	091b      	lsrs	r3, r3, #4
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	490c      	ldr	r1, [pc, #48]	; (8008310 <HAL_RCC_ClockConfig+0x1b8>)
 80082e0:	5ccb      	ldrb	r3, [r1, r3]
 80082e2:	f003 031f 	and.w	r3, r3, #31
 80082e6:	fa22 f303 	lsr.w	r3, r2, r3
 80082ea:	4a0a      	ldr	r2, [pc, #40]	; (8008314 <HAL_RCC_ClockConfig+0x1bc>)
 80082ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80082ee:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <HAL_RCC_ClockConfig+0x1c0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fd fd70 	bl	8005dd8 <HAL_InitTick>
 80082f8:	4603      	mov	r3, r0
 80082fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80082fc:	7afb      	ldrb	r3, [r7, #11]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	40022000 	.word	0x40022000
 800830c:	40021000 	.word	0x40021000
 8008310:	08019f88 	.word	0x08019f88
 8008314:	2000000c 	.word	0x2000000c
 8008318:	200000e8 	.word	0x200000e8

0800831c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800831c:	b480      	push	{r7}
 800831e:	b089      	sub	sp, #36	; 0x24
 8008320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	2300      	movs	r3, #0
 8008328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800832a:	4b3e      	ldr	r3, [pc, #248]	; (8008424 <HAL_RCC_GetSysClockFreq+0x108>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 030c 	and.w	r3, r3, #12
 8008332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008334:	4b3b      	ldr	r3, [pc, #236]	; (8008424 <HAL_RCC_GetSysClockFreq+0x108>)
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	f003 0303 	and.w	r3, r3, #3
 800833c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <HAL_RCC_GetSysClockFreq+0x34>
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	2b0c      	cmp	r3, #12
 8008348:	d121      	bne.n	800838e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d11e      	bne.n	800838e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008350:	4b34      	ldr	r3, [pc, #208]	; (8008424 <HAL_RCC_GetSysClockFreq+0x108>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0308 	and.w	r3, r3, #8
 8008358:	2b00      	cmp	r3, #0
 800835a:	d107      	bne.n	800836c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800835c:	4b31      	ldr	r3, [pc, #196]	; (8008424 <HAL_RCC_GetSysClockFreq+0x108>)
 800835e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008362:	0a1b      	lsrs	r3, r3, #8
 8008364:	f003 030f 	and.w	r3, r3, #15
 8008368:	61fb      	str	r3, [r7, #28]
 800836a:	e005      	b.n	8008378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800836c:	4b2d      	ldr	r3, [pc, #180]	; (8008424 <HAL_RCC_GetSysClockFreq+0x108>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	091b      	lsrs	r3, r3, #4
 8008372:	f003 030f 	and.w	r3, r3, #15
 8008376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008378:	4a2b      	ldr	r2, [pc, #172]	; (8008428 <HAL_RCC_GetSysClockFreq+0x10c>)
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10d      	bne.n	80083a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800838c:	e00a      	b.n	80083a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	2b04      	cmp	r3, #4
 8008392:	d102      	bne.n	800839a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008394:	4b25      	ldr	r3, [pc, #148]	; (800842c <HAL_RCC_GetSysClockFreq+0x110>)
 8008396:	61bb      	str	r3, [r7, #24]
 8008398:	e004      	b.n	80083a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b08      	cmp	r3, #8
 800839e:	d101      	bne.n	80083a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80083a0:	4b23      	ldr	r3, [pc, #140]	; (8008430 <HAL_RCC_GetSysClockFreq+0x114>)
 80083a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2b0c      	cmp	r3, #12
 80083a8:	d134      	bne.n	8008414 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80083aa:	4b1e      	ldr	r3, [pc, #120]	; (8008424 <HAL_RCC_GetSysClockFreq+0x108>)
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f003 0303 	and.w	r3, r3, #3
 80083b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d003      	beq.n	80083c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d003      	beq.n	80083c8 <HAL_RCC_GetSysClockFreq+0xac>
 80083c0:	e005      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80083c2:	4b1a      	ldr	r3, [pc, #104]	; (800842c <HAL_RCC_GetSysClockFreq+0x110>)
 80083c4:	617b      	str	r3, [r7, #20]
      break;
 80083c6:	e005      	b.n	80083d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80083c8:	4b19      	ldr	r3, [pc, #100]	; (8008430 <HAL_RCC_GetSysClockFreq+0x114>)
 80083ca:	617b      	str	r3, [r7, #20]
      break;
 80083cc:	e002      	b.n	80083d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	617b      	str	r3, [r7, #20]
      break;
 80083d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80083d4:	4b13      	ldr	r3, [pc, #76]	; (8008424 <HAL_RCC_GetSysClockFreq+0x108>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	091b      	lsrs	r3, r3, #4
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	3301      	adds	r3, #1
 80083e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80083e2:	4b10      	ldr	r3, [pc, #64]	; (8008424 <HAL_RCC_GetSysClockFreq+0x108>)
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	0a1b      	lsrs	r3, r3, #8
 80083e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	fb02 f203 	mul.w	r2, r2, r3
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083fa:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <HAL_RCC_GetSysClockFreq+0x108>)
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	0e5b      	lsrs	r3, r3, #25
 8008400:	f003 0303 	and.w	r3, r3, #3
 8008404:	3301      	adds	r3, #1
 8008406:	005b      	lsls	r3, r3, #1
 8008408:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800840a:	697a      	ldr	r2, [r7, #20]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008412:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008414:	69bb      	ldr	r3, [r7, #24]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3724      	adds	r7, #36	; 0x24
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	40021000 	.word	0x40021000
 8008428:	08019fa0 	.word	0x08019fa0
 800842c:	00f42400 	.word	0x00f42400
 8008430:	007a1200 	.word	0x007a1200

08008434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008438:	4b03      	ldr	r3, [pc, #12]	; (8008448 <HAL_RCC_GetHCLKFreq+0x14>)
 800843a:	681b      	ldr	r3, [r3, #0]
}
 800843c:	4618      	mov	r0, r3
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	2000000c 	.word	0x2000000c

0800844c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008450:	f7ff fff0 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 8008454:	4602      	mov	r2, r0
 8008456:	4b06      	ldr	r3, [pc, #24]	; (8008470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	0a1b      	lsrs	r3, r3, #8
 800845c:	f003 0307 	and.w	r3, r3, #7
 8008460:	4904      	ldr	r1, [pc, #16]	; (8008474 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008462:	5ccb      	ldrb	r3, [r1, r3]
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800846c:	4618      	mov	r0, r3
 800846e:	bd80      	pop	{r7, pc}
 8008470:	40021000 	.word	0x40021000
 8008474:	08019f98 	.word	0x08019f98

08008478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800847c:	f7ff ffda 	bl	8008434 <HAL_RCC_GetHCLKFreq>
 8008480:	4602      	mov	r2, r0
 8008482:	4b06      	ldr	r3, [pc, #24]	; (800849c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	0adb      	lsrs	r3, r3, #11
 8008488:	f003 0307 	and.w	r3, r3, #7
 800848c:	4904      	ldr	r1, [pc, #16]	; (80084a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800848e:	5ccb      	ldrb	r3, [r1, r3]
 8008490:	f003 031f 	and.w	r3, r3, #31
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008498:	4618      	mov	r0, r3
 800849a:	bd80      	pop	{r7, pc}
 800849c:	40021000 	.word	0x40021000
 80084a0:	08019f98 	.word	0x08019f98

080084a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80084ac:	2300      	movs	r3, #0
 80084ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80084b0:	4b2a      	ldr	r3, [pc, #168]	; (800855c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80084bc:	f7ff fa02 	bl	80078c4 <HAL_PWREx_GetVoltageRange>
 80084c0:	6178      	str	r0, [r7, #20]
 80084c2:	e014      	b.n	80084ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80084c4:	4b25      	ldr	r3, [pc, #148]	; (800855c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084c8:	4a24      	ldr	r2, [pc, #144]	; (800855c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ce:	6593      	str	r3, [r2, #88]	; 0x58
 80084d0:	4b22      	ldr	r3, [pc, #136]	; (800855c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d8:	60fb      	str	r3, [r7, #12]
 80084da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80084dc:	f7ff f9f2 	bl	80078c4 <HAL_PWREx_GetVoltageRange>
 80084e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80084e2:	4b1e      	ldr	r3, [pc, #120]	; (800855c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e6:	4a1d      	ldr	r2, [pc, #116]	; (800855c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084f4:	d10b      	bne.n	800850e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b80      	cmp	r3, #128	; 0x80
 80084fa:	d919      	bls.n	8008530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2ba0      	cmp	r3, #160	; 0xa0
 8008500:	d902      	bls.n	8008508 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008502:	2302      	movs	r3, #2
 8008504:	613b      	str	r3, [r7, #16]
 8008506:	e013      	b.n	8008530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008508:	2301      	movs	r3, #1
 800850a:	613b      	str	r3, [r7, #16]
 800850c:	e010      	b.n	8008530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b80      	cmp	r3, #128	; 0x80
 8008512:	d902      	bls.n	800851a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008514:	2303      	movs	r3, #3
 8008516:	613b      	str	r3, [r7, #16]
 8008518:	e00a      	b.n	8008530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b80      	cmp	r3, #128	; 0x80
 800851e:	d102      	bne.n	8008526 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008520:	2302      	movs	r3, #2
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	e004      	b.n	8008530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b70      	cmp	r3, #112	; 0x70
 800852a:	d101      	bne.n	8008530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800852c:	2301      	movs	r3, #1
 800852e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008530:	4b0b      	ldr	r3, [pc, #44]	; (8008560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f023 0207 	bic.w	r2, r3, #7
 8008538:	4909      	ldr	r1, [pc, #36]	; (8008560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	4313      	orrs	r3, r2
 800853e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008540:	4b07      	ldr	r3, [pc, #28]	; (8008560 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0307 	and.w	r3, r3, #7
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	429a      	cmp	r2, r3
 800854c:	d001      	beq.n	8008552 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3718      	adds	r7, #24
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	40021000 	.word	0x40021000
 8008560:	40022000 	.word	0x40022000

08008564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800856c:	2300      	movs	r3, #0
 800856e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008570:	2300      	movs	r3, #0
 8008572:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800857c:	2b00      	cmp	r3, #0
 800857e:	d041      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008584:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008588:	d02a      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800858a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800858e:	d824      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008590:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008594:	d008      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008596:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800859a:	d81e      	bhi.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00a      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80085a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085a4:	d010      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80085a6:	e018      	b.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80085a8:	4b86      	ldr	r3, [pc, #536]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	4a85      	ldr	r2, [pc, #532]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085b4:	e015      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3304      	adds	r3, #4
 80085ba:	2100      	movs	r1, #0
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 fabb 	bl	8008b38 <RCCEx_PLLSAI1_Config>
 80085c2:	4603      	mov	r3, r0
 80085c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085c6:	e00c      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3320      	adds	r3, #32
 80085cc:	2100      	movs	r1, #0
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fba6 	bl	8008d20 <RCCEx_PLLSAI2_Config>
 80085d4:	4603      	mov	r3, r0
 80085d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085d8:	e003      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	74fb      	strb	r3, [r7, #19]
      break;
 80085de:	e000      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80085e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085e2:	7cfb      	ldrb	r3, [r7, #19]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10b      	bne.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085e8:	4b76      	ldr	r3, [pc, #472]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f6:	4973      	ldr	r1, [pc, #460]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80085fe:	e001      	b.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008600:	7cfb      	ldrb	r3, [r7, #19]
 8008602:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d041      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008618:	d02a      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800861a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800861e:	d824      	bhi.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008624:	d008      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800862a:	d81e      	bhi.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00a      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008634:	d010      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008636:	e018      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008638:	4b62      	ldr	r3, [pc, #392]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	4a61      	ldr	r2, [pc, #388]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800863e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008642:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008644:	e015      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	3304      	adds	r3, #4
 800864a:	2100      	movs	r1, #0
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fa73 	bl	8008b38 <RCCEx_PLLSAI1_Config>
 8008652:	4603      	mov	r3, r0
 8008654:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008656:	e00c      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	3320      	adds	r3, #32
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f000 fb5e 	bl	8008d20 <RCCEx_PLLSAI2_Config>
 8008664:	4603      	mov	r3, r0
 8008666:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008668:	e003      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	74fb      	strb	r3, [r7, #19]
      break;
 800866e:	e000      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008670:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008672:	7cfb      	ldrb	r3, [r7, #19]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d10b      	bne.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008678:	4b52      	ldr	r3, [pc, #328]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800867a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008686:	494f      	ldr	r1, [pc, #316]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800868e:	e001      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008690:	7cfb      	ldrb	r3, [r7, #19]
 8008692:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80a0 	beq.w	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086a2:	2300      	movs	r3, #0
 80086a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80086a6:	4b47      	ldr	r3, [pc, #284]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80086b6:	2300      	movs	r3, #0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00d      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086bc:	4b41      	ldr	r3, [pc, #260]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c0:	4a40      	ldr	r2, [pc, #256]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086c6:	6593      	str	r3, [r2, #88]	; 0x58
 80086c8:	4b3e      	ldr	r3, [pc, #248]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d0:	60bb      	str	r3, [r7, #8]
 80086d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086d4:	2301      	movs	r3, #1
 80086d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086d8:	4b3b      	ldr	r3, [pc, #236]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a3a      	ldr	r2, [pc, #232]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80086de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80086e4:	f7fd fbc8 	bl	8005e78 <HAL_GetTick>
 80086e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80086ea:	e009      	b.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086ec:	f7fd fbc4 	bl	8005e78 <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d902      	bls.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	74fb      	strb	r3, [r7, #19]
        break;
 80086fe:	e005      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008700:	4b31      	ldr	r3, [pc, #196]	; (80087c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008708:	2b00      	cmp	r3, #0
 800870a:	d0ef      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800870c:	7cfb      	ldrb	r3, [r7, #19]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d15c      	bne.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008712:	4b2c      	ldr	r3, [pc, #176]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800871c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d01f      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	429a      	cmp	r2, r3
 800872e:	d019      	beq.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008730:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800873a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800873c:	4b21      	ldr	r3, [pc, #132]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800873e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008742:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800874c:	4b1d      	ldr	r3, [pc, #116]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800874e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008752:	4a1c      	ldr	r2, [pc, #112]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800875c:	4a19      	ldr	r2, [pc, #100]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d016      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876e:	f7fd fb83 	bl	8005e78 <HAL_GetTick>
 8008772:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008774:	e00b      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008776:	f7fd fb7f 	bl	8005e78 <HAL_GetTick>
 800877a:	4602      	mov	r2, r0
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	f241 3288 	movw	r2, #5000	; 0x1388
 8008784:	4293      	cmp	r3, r2
 8008786:	d902      	bls.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	74fb      	strb	r3, [r7, #19]
            break;
 800878c:	e006      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800878e:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d0ec      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800879c:	7cfb      	ldrb	r3, [r7, #19]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10c      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087a2:	4b08      	ldr	r3, [pc, #32]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087b2:	4904      	ldr	r1, [pc, #16]	; (80087c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80087ba:	e009      	b.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087bc:	7cfb      	ldrb	r3, [r7, #19]
 80087be:	74bb      	strb	r3, [r7, #18]
 80087c0:	e006      	b.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80087c2:	bf00      	nop
 80087c4:	40021000 	.word	0x40021000
 80087c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087cc:	7cfb      	ldrb	r3, [r7, #19]
 80087ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087d0:	7c7b      	ldrb	r3, [r7, #17]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d105      	bne.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087d6:	4b9e      	ldr	r3, [pc, #632]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087da:	4a9d      	ldr	r2, [pc, #628]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087ee:	4b98      	ldr	r3, [pc, #608]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087f4:	f023 0203 	bic.w	r2, r3, #3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	4994      	ldr	r1, [pc, #592]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0302 	and.w	r3, r3, #2
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008810:	4b8f      	ldr	r3, [pc, #572]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008816:	f023 020c 	bic.w	r2, r3, #12
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881e:	498c      	ldr	r1, [pc, #560]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008820:	4313      	orrs	r3, r2
 8008822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00a      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008832:	4b87      	ldr	r3, [pc, #540]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008838:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	4983      	ldr	r1, [pc, #524]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008842:	4313      	orrs	r3, r2
 8008844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0308 	and.w	r3, r3, #8
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008854:	4b7e      	ldr	r3, [pc, #504]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008862:	497b      	ldr	r1, [pc, #492]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008864:	4313      	orrs	r3, r2
 8008866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0310 	and.w	r3, r3, #16
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008876:	4b76      	ldr	r3, [pc, #472]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800887c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008884:	4972      	ldr	r1, [pc, #456]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008886:	4313      	orrs	r3, r2
 8008888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00a      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008898:	4b6d      	ldr	r3, [pc, #436]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800889a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a6:	496a      	ldr	r1, [pc, #424]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088ba:	4b65      	ldr	r3, [pc, #404]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c8:	4961      	ldr	r1, [pc, #388]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088ca:	4313      	orrs	r3, r2
 80088cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088dc:	4b5c      	ldr	r3, [pc, #368]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ea:	4959      	ldr	r1, [pc, #356]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80088ec:	4313      	orrs	r3, r2
 80088ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088fe:	4b54      	ldr	r3, [pc, #336]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890c:	4950      	ldr	r1, [pc, #320]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800890e:	4313      	orrs	r3, r2
 8008910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00a      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008920:	4b4b      	ldr	r3, [pc, #300]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008926:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892e:	4948      	ldr	r1, [pc, #288]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008930:	4313      	orrs	r3, r2
 8008932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008942:	4b43      	ldr	r3, [pc, #268]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008950:	493f      	ldr	r1, [pc, #252]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008952:	4313      	orrs	r3, r2
 8008954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008960:	2b00      	cmp	r3, #0
 8008962:	d028      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008964:	4b3a      	ldr	r3, [pc, #232]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800896a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008972:	4937      	ldr	r1, [pc, #220]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008974:	4313      	orrs	r3, r2
 8008976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800897e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008982:	d106      	bne.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008984:	4b32      	ldr	r3, [pc, #200]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	4a31      	ldr	r2, [pc, #196]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800898a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800898e:	60d3      	str	r3, [r2, #12]
 8008990:	e011      	b.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800899a:	d10c      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	2101      	movs	r1, #1
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 f8c8 	bl	8008b38 <RCCEx_PLLSAI1_Config>
 80089a8:	4603      	mov	r3, r0
 80089aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80089ac:	7cfb      	ldrb	r3, [r7, #19]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80089b2:	7cfb      	ldrb	r3, [r7, #19]
 80089b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d028      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80089c2:	4b23      	ldr	r3, [pc, #140]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d0:	491f      	ldr	r1, [pc, #124]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e0:	d106      	bne.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089e2:	4b1b      	ldr	r3, [pc, #108]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	4a1a      	ldr	r2, [pc, #104]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80089e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089ec:	60d3      	str	r3, [r2, #12]
 80089ee:	e011      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089f8:	d10c      	bne.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	3304      	adds	r3, #4
 80089fe:	2101      	movs	r1, #1
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 f899 	bl	8008b38 <RCCEx_PLLSAI1_Config>
 8008a06:	4603      	mov	r3, r0
 8008a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a0a:	7cfb      	ldrb	r3, [r7, #19]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008a10:	7cfb      	ldrb	r3, [r7, #19]
 8008a12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d02b      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a20:	4b0b      	ldr	r3, [pc, #44]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a2e:	4908      	ldr	r1, [pc, #32]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a3e:	d109      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a40:	4b03      	ldr	r3, [pc, #12]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	4a02      	ldr	r2, [pc, #8]	; (8008a50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008a46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a4a:	60d3      	str	r3, [r2, #12]
 8008a4c:	e014      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008a4e:	bf00      	nop
 8008a50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a5c:	d10c      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	3304      	adds	r3, #4
 8008a62:	2101      	movs	r1, #1
 8008a64:	4618      	mov	r0, r3
 8008a66:	f000 f867 	bl	8008b38 <RCCEx_PLLSAI1_Config>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008a6e:	7cfb      	ldrb	r3, [r7, #19]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008a74:	7cfb      	ldrb	r3, [r7, #19]
 8008a76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d02f      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a84:	4b2b      	ldr	r3, [pc, #172]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a92:	4928      	ldr	r1, [pc, #160]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aa2:	d10d      	bne.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	2102      	movs	r1, #2
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f844 	bl	8008b38 <RCCEx_PLLSAI1_Config>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ab4:	7cfb      	ldrb	r3, [r7, #19]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d014      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008aba:	7cfb      	ldrb	r3, [r7, #19]
 8008abc:	74bb      	strb	r3, [r7, #18]
 8008abe:	e011      	b.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ac8:	d10c      	bne.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3320      	adds	r3, #32
 8008ace:	2102      	movs	r1, #2
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f000 f925 	bl	8008d20 <RCCEx_PLLSAI2_Config>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ada:	7cfb      	ldrb	r3, [r7, #19]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008ae0:	7cfb      	ldrb	r3, [r7, #19]
 8008ae2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00a      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008af0:	4b10      	ldr	r3, [pc, #64]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008afe:	490d      	ldr	r1, [pc, #52]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00b      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b12:	4b08      	ldr	r3, [pc, #32]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b22:	4904      	ldr	r1, [pc, #16]	; (8008b34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008b2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	40021000 	.word	0x40021000

08008b38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008b46:	4b75      	ldr	r3, [pc, #468]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d018      	beq.n	8008b84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008b52:	4b72      	ldr	r3, [pc, #456]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f003 0203 	and.w	r2, r3, #3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d10d      	bne.n	8008b7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
       ||
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d009      	beq.n	8008b7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008b6a:	4b6c      	ldr	r3, [pc, #432]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	091b      	lsrs	r3, r3, #4
 8008b70:	f003 0307 	and.w	r3, r3, #7
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
       ||
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d047      	beq.n	8008c0e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	73fb      	strb	r3, [r7, #15]
 8008b82:	e044      	b.n	8008c0e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b03      	cmp	r3, #3
 8008b8a:	d018      	beq.n	8008bbe <RCCEx_PLLSAI1_Config+0x86>
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d825      	bhi.n	8008bdc <RCCEx_PLLSAI1_Config+0xa4>
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d002      	beq.n	8008b9a <RCCEx_PLLSAI1_Config+0x62>
 8008b94:	2b02      	cmp	r3, #2
 8008b96:	d009      	beq.n	8008bac <RCCEx_PLLSAI1_Config+0x74>
 8008b98:	e020      	b.n	8008bdc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008b9a:	4b60      	ldr	r3, [pc, #384]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0302 	and.w	r3, r3, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d11d      	bne.n	8008be2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008baa:	e01a      	b.n	8008be2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008bac:	4b5b      	ldr	r3, [pc, #364]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d116      	bne.n	8008be6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bbc:	e013      	b.n	8008be6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008bbe:	4b57      	ldr	r3, [pc, #348]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10f      	bne.n	8008bea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008bca:	4b54      	ldr	r3, [pc, #336]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d109      	bne.n	8008bea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008bda:	e006      	b.n	8008bea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	73fb      	strb	r3, [r7, #15]
      break;
 8008be0:	e004      	b.n	8008bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008be2:	bf00      	nop
 8008be4:	e002      	b.n	8008bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008be6:	bf00      	nop
 8008be8:	e000      	b.n	8008bec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d10d      	bne.n	8008c0e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008bf2:	4b4a      	ldr	r3, [pc, #296]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6819      	ldr	r1, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	685b      	ldr	r3, [r3, #4]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	011b      	lsls	r3, r3, #4
 8008c06:	430b      	orrs	r3, r1
 8008c08:	4944      	ldr	r1, [pc, #272]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d17d      	bne.n	8008d10 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008c14:	4b41      	ldr	r3, [pc, #260]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a40      	ldr	r2, [pc, #256]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c20:	f7fd f92a 	bl	8005e78 <HAL_GetTick>
 8008c24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c26:	e009      	b.n	8008c3c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c28:	f7fd f926 	bl	8005e78 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d902      	bls.n	8008c3c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	73fb      	strb	r3, [r7, #15]
        break;
 8008c3a:	e005      	b.n	8008c48 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008c3c:	4b37      	ldr	r3, [pc, #220]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1ef      	bne.n	8008c28 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008c48:	7bfb      	ldrb	r3, [r7, #15]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d160      	bne.n	8008d10 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d111      	bne.n	8008c78 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008c54:	4b31      	ldr	r3, [pc, #196]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6892      	ldr	r2, [r2, #8]
 8008c64:	0211      	lsls	r1, r2, #8
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	68d2      	ldr	r2, [r2, #12]
 8008c6a:	0912      	lsrs	r2, r2, #4
 8008c6c:	0452      	lsls	r2, r2, #17
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	492a      	ldr	r1, [pc, #168]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c72:	4313      	orrs	r3, r2
 8008c74:	610b      	str	r3, [r1, #16]
 8008c76:	e027      	b.n	8008cc8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d112      	bne.n	8008ca4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008c7e:	4b27      	ldr	r3, [pc, #156]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008c86:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6892      	ldr	r2, [r2, #8]
 8008c8e:	0211      	lsls	r1, r2, #8
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	6912      	ldr	r2, [r2, #16]
 8008c94:	0852      	lsrs	r2, r2, #1
 8008c96:	3a01      	subs	r2, #1
 8008c98:	0552      	lsls	r2, r2, #21
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	491f      	ldr	r1, [pc, #124]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	610b      	str	r3, [r1, #16]
 8008ca2:	e011      	b.n	8008cc8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ca4:	4b1d      	ldr	r3, [pc, #116]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008cac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	6892      	ldr	r2, [r2, #8]
 8008cb4:	0211      	lsls	r1, r2, #8
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	6952      	ldr	r2, [r2, #20]
 8008cba:	0852      	lsrs	r2, r2, #1
 8008cbc:	3a01      	subs	r2, #1
 8008cbe:	0652      	lsls	r2, r2, #25
 8008cc0:	430a      	orrs	r2, r1
 8008cc2:	4916      	ldr	r1, [pc, #88]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008cc8:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a13      	ldr	r2, [pc, #76]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008cd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cd4:	f7fd f8d0 	bl	8005e78 <HAL_GetTick>
 8008cd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008cda:	e009      	b.n	8008cf0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008cdc:	f7fd f8cc 	bl	8005e78 <HAL_GetTick>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d902      	bls.n	8008cf0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008cea:	2303      	movs	r3, #3
 8008cec:	73fb      	strb	r3, [r7, #15]
          break;
 8008cee:	e005      	b.n	8008cfc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008cf0:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0ef      	beq.n	8008cdc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d106      	bne.n	8008d10 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008d02:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d04:	691a      	ldr	r2, [r3, #16]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	699b      	ldr	r3, [r3, #24]
 8008d0a:	4904      	ldr	r1, [pc, #16]	; (8008d1c <RCCEx_PLLSAI1_Config+0x1e4>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
 8008d1a:	bf00      	nop
 8008d1c:	40021000 	.word	0x40021000

08008d20 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008d2e:	4b6a      	ldr	r3, [pc, #424]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d018      	beq.n	8008d6c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008d3a:	4b67      	ldr	r3, [pc, #412]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f003 0203 	and.w	r2, r3, #3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d10d      	bne.n	8008d66 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
       ||
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d009      	beq.n	8008d66 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008d52:	4b61      	ldr	r3, [pc, #388]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	091b      	lsrs	r3, r3, #4
 8008d58:	f003 0307 	and.w	r3, r3, #7
 8008d5c:	1c5a      	adds	r2, r3, #1
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
       ||
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d047      	beq.n	8008df6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	73fb      	strb	r3, [r7, #15]
 8008d6a:	e044      	b.n	8008df6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d018      	beq.n	8008da6 <RCCEx_PLLSAI2_Config+0x86>
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	d825      	bhi.n	8008dc4 <RCCEx_PLLSAI2_Config+0xa4>
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d002      	beq.n	8008d82 <RCCEx_PLLSAI2_Config+0x62>
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	d009      	beq.n	8008d94 <RCCEx_PLLSAI2_Config+0x74>
 8008d80:	e020      	b.n	8008dc4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008d82:	4b55      	ldr	r3, [pc, #340]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d11d      	bne.n	8008dca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008d92:	e01a      	b.n	8008dca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008d94:	4b50      	ldr	r3, [pc, #320]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d116      	bne.n	8008dce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008da4:	e013      	b.n	8008dce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008da6:	4b4c      	ldr	r3, [pc, #304]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10f      	bne.n	8008dd2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008db2:	4b49      	ldr	r3, [pc, #292]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d109      	bne.n	8008dd2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008dc2:	e006      	b.n	8008dd2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc8:	e004      	b.n	8008dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008dca:	bf00      	nop
 8008dcc:	e002      	b.n	8008dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008dce:	bf00      	nop
 8008dd0:	e000      	b.n	8008dd4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008dd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10d      	bne.n	8008df6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008dda:	4b3f      	ldr	r3, [pc, #252]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6819      	ldr	r1, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	430b      	orrs	r3, r1
 8008df0:	4939      	ldr	r1, [pc, #228]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d167      	bne.n	8008ecc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008dfc:	4b36      	ldr	r3, [pc, #216]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a35      	ldr	r2, [pc, #212]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e08:	f7fd f836 	bl	8005e78 <HAL_GetTick>
 8008e0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008e0e:	e009      	b.n	8008e24 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008e10:	f7fd f832 	bl	8005e78 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d902      	bls.n	8008e24 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	73fb      	strb	r3, [r7, #15]
        break;
 8008e22:	e005      	b.n	8008e30 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008e24:	4b2c      	ldr	r3, [pc, #176]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d1ef      	bne.n	8008e10 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d14a      	bne.n	8008ecc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d111      	bne.n	8008e60 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008e3c:	4b26      	ldr	r3, [pc, #152]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	6892      	ldr	r2, [r2, #8]
 8008e4c:	0211      	lsls	r1, r2, #8
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	68d2      	ldr	r2, [r2, #12]
 8008e52:	0912      	lsrs	r2, r2, #4
 8008e54:	0452      	lsls	r2, r2, #17
 8008e56:	430a      	orrs	r2, r1
 8008e58:	491f      	ldr	r1, [pc, #124]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	614b      	str	r3, [r1, #20]
 8008e5e:	e011      	b.n	8008e84 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008e60:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008e68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	6892      	ldr	r2, [r2, #8]
 8008e70:	0211      	lsls	r1, r2, #8
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	6912      	ldr	r2, [r2, #16]
 8008e76:	0852      	lsrs	r2, r2, #1
 8008e78:	3a01      	subs	r2, #1
 8008e7a:	0652      	lsls	r2, r2, #25
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	4916      	ldr	r1, [pc, #88]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e80:	4313      	orrs	r3, r2
 8008e82:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008e84:	4b14      	ldr	r3, [pc, #80]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a13      	ldr	r2, [pc, #76]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e90:	f7fc fff2 	bl	8005e78 <HAL_GetTick>
 8008e94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008e96:	e009      	b.n	8008eac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008e98:	f7fc ffee 	bl	8005e78 <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d902      	bls.n	8008eac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	73fb      	strb	r3, [r7, #15]
          break;
 8008eaa:	e005      	b.n	8008eb8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008eac:	4b0a      	ldr	r3, [pc, #40]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d0ef      	beq.n	8008e98 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d106      	bne.n	8008ecc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008ebe:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ec0:	695a      	ldr	r2, [r3, #20]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	4904      	ldr	r1, [pc, #16]	; (8008ed8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3710      	adds	r7, #16
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	40021000 	.word	0x40021000

08008edc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d06c      	beq.n	8008fc8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7f8 ffe8 	bl	8001ed8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	22ca      	movs	r2, #202	; 0xca
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2253      	movs	r2, #83	; 0x53
 8008f1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f9a0 	bl	8009266 <RTC_EnterInitMode>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d14b      	bne.n	8008fc8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	6812      	ldr	r2, [r2, #0]
 8008f3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f42:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6899      	ldr	r1, [r3, #8]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	68d2      	ldr	r2, [r2, #12]
 8008f6a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6919      	ldr	r1, [r3, #16]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	041a      	lsls	r2, r3, #16
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f9a3 	bl	80092cc <RTC_ExitInitMode>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d11b      	bne.n	8008fc8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f022 0203 	bic.w	r2, r2, #3
 8008f9e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69da      	ldr	r2, [r3, #28]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	22ff      	movs	r2, #255	; 0xff
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fd2:	b590      	push	{r4, r7, lr}
 8008fd4:	b087      	sub	sp, #28
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_RTC_SetTime+0x1a>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e08b      	b.n	8009104 <HAL_RTC_SetTime+0x132>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	22ca      	movs	r2, #202	; 0xca
 8009002:	625a      	str	r2, [r3, #36]	; 0x24
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2253      	movs	r2, #83	; 0x53
 800900a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 f92a 	bl	8009266 <RTC_EnterInitMode>
 8009012:	4603      	mov	r3, r0
 8009014:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009016:	7cfb      	ldrb	r3, [r7, #19]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d163      	bne.n	80090e4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d126      	bne.n	8009070 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	d102      	bne.n	8009036 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2200      	movs	r2, #0
 8009034:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	4618      	mov	r0, r3
 800903c:	f000 f984 	bl	8009348 <RTC_ByteToBcd2>
 8009040:	4603      	mov	r3, r0
 8009042:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	785b      	ldrb	r3, [r3, #1]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f97d 	bl	8009348 <RTC_ByteToBcd2>
 800904e:	4603      	mov	r3, r0
 8009050:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009052:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	789b      	ldrb	r3, [r3, #2]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f975 	bl	8009348 <RTC_ByteToBcd2>
 800905e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009060:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	78db      	ldrb	r3, [r3, #3]
 8009068:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800906a:	4313      	orrs	r3, r2
 800906c:	617b      	str	r3, [r7, #20]
 800906e:	e018      	b.n	80090a2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	2200      	movs	r2, #0
 8009082:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	785b      	ldrb	r3, [r3, #1]
 800908e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009090:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009096:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	78db      	ldrb	r3, [r3, #3]
 800909c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80090ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80090b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6899      	ldr	r1, [r3, #8]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	68da      	ldr	r2, [r3, #12]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	431a      	orrs	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 f8f6 	bl	80092cc <RTC_ExitInitMode>
 80090e0:	4603      	mov	r3, r0
 80090e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	22ff      	movs	r2, #255	; 0xff
 80090ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80090ec:	7cfb      	ldrb	r3, [r7, #19]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d103      	bne.n	80090fa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009102:	7cfb      	ldrb	r3, [r7, #19]
}
 8009104:	4618      	mov	r0, r3
 8009106:	371c      	adds	r7, #28
 8009108:	46bd      	mov	sp, r7
 800910a:	bd90      	pop	{r4, r7, pc}

0800910c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d101      	bne.n	8009126 <HAL_RTC_SetDate+0x1a>
 8009122:	2302      	movs	r3, #2
 8009124:	e075      	b.n	8009212 <HAL_RTC_SetDate+0x106>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2202      	movs	r2, #2
 8009132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d10e      	bne.n	800915a <HAL_RTC_SetDate+0x4e>
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	f003 0310 	and.w	r3, r3, #16
 8009144:	2b00      	cmp	r3, #0
 8009146:	d008      	beq.n	800915a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	785b      	ldrb	r3, [r3, #1]
 800914c:	f023 0310 	bic.w	r3, r3, #16
 8009150:	b2db      	uxtb	r3, r3
 8009152:	330a      	adds	r3, #10
 8009154:	b2da      	uxtb	r2, r3
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11c      	bne.n	800919a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	78db      	ldrb	r3, [r3, #3]
 8009164:	4618      	mov	r0, r3
 8009166:	f000 f8ef 	bl	8009348 <RTC_ByteToBcd2>
 800916a:	4603      	mov	r3, r0
 800916c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	785b      	ldrb	r3, [r3, #1]
 8009172:	4618      	mov	r0, r3
 8009174:	f000 f8e8 	bl	8009348 <RTC_ByteToBcd2>
 8009178:	4603      	mov	r3, r0
 800917a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800917c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	789b      	ldrb	r3, [r3, #2]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 f8e0 	bl	8009348 <RTC_ByteToBcd2>
 8009188:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800918a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009194:	4313      	orrs	r3, r2
 8009196:	617b      	str	r3, [r7, #20]
 8009198:	e00e      	b.n	80091b8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	78db      	ldrb	r3, [r3, #3]
 800919e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	785b      	ldrb	r3, [r3, #1]
 80091a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80091a6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80091ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80091b4:	4313      	orrs	r3, r2
 80091b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	22ca      	movs	r2, #202	; 0xca
 80091be:	625a      	str	r2, [r3, #36]	; 0x24
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2253      	movs	r2, #83	; 0x53
 80091c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f84c 	bl	8009266 <RTC_EnterInitMode>
 80091ce:	4603      	mov	r3, r0
 80091d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80091d2:	7cfb      	ldrb	r3, [r7, #19]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d10c      	bne.n	80091f2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80091e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80091e6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 f86f 	bl	80092cc <RTC_ExitInitMode>
 80091ee:	4603      	mov	r3, r0
 80091f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	22ff      	movs	r2, #255	; 0xff
 80091f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80091fa:	7cfb      	ldrb	r3, [r7, #19]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d103      	bne.n	8009208 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8009210:	7cfb      	ldrb	r3, [r7, #19]
}
 8009212:	4618      	mov	r0, r3
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	bd90      	pop	{r4, r7, pc}

0800921a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b084      	sub	sp, #16
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009230:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8009232:	f7fc fe21 	bl	8005e78 <HAL_GetTick>
 8009236:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009238:	e009      	b.n	800924e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800923a:	f7fc fe1d 	bl	8005e78 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009248:	d901      	bls.n	800924e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e007      	b.n	800925e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	f003 0320 	and.w	r3, r3, #32
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0ee      	beq.n	800923a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800927c:	2b00      	cmp	r3, #0
 800927e:	d120      	bne.n	80092c2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f04f 32ff 	mov.w	r2, #4294967295
 8009288:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800928a:	f7fc fdf5 	bl	8005e78 <HAL_GetTick>
 800928e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009290:	e00d      	b.n	80092ae <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009292:	f7fc fdf1 	bl	8005e78 <HAL_GetTick>
 8009296:	4602      	mov	r2, r0
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092a0:	d905      	bls.n	80092ae <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2203      	movs	r2, #3
 80092aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d102      	bne.n	80092c2 <RTC_EnterInitMode+0x5c>
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d1e7      	bne.n	8009292 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80092d8:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <RTC_ExitInitMode+0x78>)
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	4a19      	ldr	r2, [pc, #100]	; (8009344 <RTC_ExitInitMode+0x78>)
 80092de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092e2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80092e4:	4b17      	ldr	r3, [pc, #92]	; (8009344 <RTC_ExitInitMode+0x78>)
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f003 0320 	and.w	r3, r3, #32
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10c      	bne.n	800930a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ff92 	bl	800921a <HAL_RTC_WaitForSynchro>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01e      	beq.n	800933a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2203      	movs	r2, #3
 8009300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	73fb      	strb	r3, [r7, #15]
 8009308:	e017      	b.n	800933a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800930a:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <RTC_ExitInitMode+0x78>)
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	4a0d      	ldr	r2, [pc, #52]	; (8009344 <RTC_ExitInitMode+0x78>)
 8009310:	f023 0320 	bic.w	r3, r3, #32
 8009314:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff ff7f 	bl	800921a <HAL_RTC_WaitForSynchro>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d005      	beq.n	800932e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2203      	movs	r2, #3
 8009326:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800932e:	4b05      	ldr	r3, [pc, #20]	; (8009344 <RTC_ExitInitMode+0x78>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	4a04      	ldr	r2, [pc, #16]	; (8009344 <RTC_ExitInitMode+0x78>)
 8009334:	f043 0320 	orr.w	r3, r3, #32
 8009338:	6093      	str	r3, [r2, #8]
  }

  return status;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	40002800 	.word	0x40002800

08009348 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009352:	2300      	movs	r3, #0
 8009354:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800935a:	e005      	b.n	8009368 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	3301      	adds	r3, #1
 8009360:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8009362:	7afb      	ldrb	r3, [r7, #11]
 8009364:	3b0a      	subs	r3, #10
 8009366:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	2b09      	cmp	r3, #9
 800936c:	d8f6      	bhi.n	800935c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	b2da      	uxtb	r2, r3
 8009376:	7afb      	ldrb	r3, [r7, #11]
 8009378:	4313      	orrs	r3, r2
 800937a:	b2db      	uxtb	r3, r3
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d101      	bne.n	800939a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	e049      	b.n	800942e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d106      	bne.n	80093b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7f9 f8cc 	bl	800254c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2202      	movs	r2, #2
 80093b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	3304      	adds	r3, #4
 80093c4:	4619      	mov	r1, r3
 80093c6:	4610      	mov	r0, r2
 80093c8:	f000 fac0 	bl	800994c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2201      	movs	r2, #1
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2201      	movs	r2, #1
 80093e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b01      	cmp	r3, #1
 800944a:	d001      	beq.n	8009450 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e04f      	b.n	80094f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68da      	ldr	r2, [r3, #12]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f042 0201 	orr.w	r2, r2, #1
 8009466:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a23      	ldr	r2, [pc, #140]	; (80094fc <HAL_TIM_Base_Start_IT+0xc4>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d01d      	beq.n	80094ae <HAL_TIM_Base_Start_IT+0x76>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800947a:	d018      	beq.n	80094ae <HAL_TIM_Base_Start_IT+0x76>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a1f      	ldr	r2, [pc, #124]	; (8009500 <HAL_TIM_Base_Start_IT+0xc8>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d013      	beq.n	80094ae <HAL_TIM_Base_Start_IT+0x76>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a1e      	ldr	r2, [pc, #120]	; (8009504 <HAL_TIM_Base_Start_IT+0xcc>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d00e      	beq.n	80094ae <HAL_TIM_Base_Start_IT+0x76>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a1c      	ldr	r2, [pc, #112]	; (8009508 <HAL_TIM_Base_Start_IT+0xd0>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d009      	beq.n	80094ae <HAL_TIM_Base_Start_IT+0x76>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a1b      	ldr	r2, [pc, #108]	; (800950c <HAL_TIM_Base_Start_IT+0xd4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d004      	beq.n	80094ae <HAL_TIM_Base_Start_IT+0x76>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a19      	ldr	r2, [pc, #100]	; (8009510 <HAL_TIM_Base_Start_IT+0xd8>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d115      	bne.n	80094da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	4b17      	ldr	r3, [pc, #92]	; (8009514 <HAL_TIM_Base_Start_IT+0xdc>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b06      	cmp	r3, #6
 80094be:	d015      	beq.n	80094ec <HAL_TIM_Base_Start_IT+0xb4>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c6:	d011      	beq.n	80094ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f042 0201 	orr.w	r2, r2, #1
 80094d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094d8:	e008      	b.n	80094ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f042 0201 	orr.w	r2, r2, #1
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	e000      	b.n	80094ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3714      	adds	r7, #20
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr
 80094fc:	40012c00 	.word	0x40012c00
 8009500:	40000400 	.word	0x40000400
 8009504:	40000800 	.word	0x40000800
 8009508:	40000c00 	.word	0x40000c00
 800950c:	40013400 	.word	0x40013400
 8009510:	40014000 	.word	0x40014000
 8009514:	00010007 	.word	0x00010007

08009518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f003 0302 	and.w	r3, r3, #2
 800952a:	2b02      	cmp	r3, #2
 800952c:	d122      	bne.n	8009574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f003 0302 	and.w	r3, r3, #2
 8009538:	2b02      	cmp	r3, #2
 800953a:	d11b      	bne.n	8009574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f06f 0202 	mvn.w	r2, #2
 8009544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	f003 0303 	and.w	r3, r3, #3
 8009556:	2b00      	cmp	r3, #0
 8009558:	d003      	beq.n	8009562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f9d8 	bl	8009910 <HAL_TIM_IC_CaptureCallback>
 8009560:	e005      	b.n	800956e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f9ca 	bl	80098fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f9db 	bl	8009924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	f003 0304 	and.w	r3, r3, #4
 800957e:	2b04      	cmp	r3, #4
 8009580:	d122      	bne.n	80095c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b04      	cmp	r3, #4
 800958e:	d11b      	bne.n	80095c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f06f 0204 	mvn.w	r2, #4
 8009598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2202      	movs	r2, #2
 800959e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f9ae 	bl	8009910 <HAL_TIM_IC_CaptureCallback>
 80095b4:	e005      	b.n	80095c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f9a0 	bl	80098fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f9b1 	bl	8009924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	f003 0308 	and.w	r3, r3, #8
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	d122      	bne.n	800961c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	f003 0308 	and.w	r3, r3, #8
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d11b      	bne.n	800961c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f06f 0208 	mvn.w	r2, #8
 80095ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2204      	movs	r2, #4
 80095f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 f984 	bl	8009910 <HAL_TIM_IC_CaptureCallback>
 8009608:	e005      	b.n	8009616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f976 	bl	80098fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f987 	bl	8009924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f003 0310 	and.w	r3, r3, #16
 8009626:	2b10      	cmp	r3, #16
 8009628:	d122      	bne.n	8009670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f003 0310 	and.w	r3, r3, #16
 8009634:	2b10      	cmp	r3, #16
 8009636:	d11b      	bne.n	8009670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f06f 0210 	mvn.w	r2, #16
 8009640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2208      	movs	r2, #8
 8009646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009652:	2b00      	cmp	r3, #0
 8009654:	d003      	beq.n	800965e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f95a 	bl	8009910 <HAL_TIM_IC_CaptureCallback>
 800965c:	e005      	b.n	800966a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f94c 	bl	80098fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f95d 	bl	8009924 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b01      	cmp	r3, #1
 800967c:	d10e      	bne.n	800969c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b01      	cmp	r3, #1
 800968a:	d107      	bne.n	800969c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f06f 0201 	mvn.w	r2, #1
 8009694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f926 	bl	80098e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a6:	2b80      	cmp	r3, #128	; 0x80
 80096a8:	d10e      	bne.n	80096c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096b4:	2b80      	cmp	r3, #128	; 0x80
 80096b6:	d107      	bne.n	80096c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80096c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fb08 	bl	8009cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096d6:	d10e      	bne.n	80096f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096e2:	2b80      	cmp	r3, #128	; 0x80
 80096e4:	d107      	bne.n	80096f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80096ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fafb 	bl	8009cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009700:	2b40      	cmp	r3, #64	; 0x40
 8009702:	d10e      	bne.n	8009722 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970e:	2b40      	cmp	r3, #64	; 0x40
 8009710:	d107      	bne.n	8009722 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800971a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f90b 	bl	8009938 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f003 0320 	and.w	r3, r3, #32
 800972c:	2b20      	cmp	r3, #32
 800972e:	d10e      	bne.n	800974e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	f003 0320 	and.w	r3, r3, #32
 800973a:	2b20      	cmp	r3, #32
 800973c:	d107      	bne.n	800974e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f06f 0220 	mvn.w	r2, #32
 8009746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fabb 	bl	8009cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800974e:	bf00      	nop
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}

08009756 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800976a:	2b01      	cmp	r3, #1
 800976c:	d101      	bne.n	8009772 <HAL_TIM_ConfigClockSource+0x1c>
 800976e:	2302      	movs	r3, #2
 8009770:	e0b6      	b.n	80098e0 <HAL_TIM_ConfigClockSource+0x18a>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2202      	movs	r2, #2
 800977e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009790:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009794:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800979c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ae:	d03e      	beq.n	800982e <HAL_TIM_ConfigClockSource+0xd8>
 80097b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b4:	f200 8087 	bhi.w	80098c6 <HAL_TIM_ConfigClockSource+0x170>
 80097b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097bc:	f000 8086 	beq.w	80098cc <HAL_TIM_ConfigClockSource+0x176>
 80097c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c4:	d87f      	bhi.n	80098c6 <HAL_TIM_ConfigClockSource+0x170>
 80097c6:	2b70      	cmp	r3, #112	; 0x70
 80097c8:	d01a      	beq.n	8009800 <HAL_TIM_ConfigClockSource+0xaa>
 80097ca:	2b70      	cmp	r3, #112	; 0x70
 80097cc:	d87b      	bhi.n	80098c6 <HAL_TIM_ConfigClockSource+0x170>
 80097ce:	2b60      	cmp	r3, #96	; 0x60
 80097d0:	d050      	beq.n	8009874 <HAL_TIM_ConfigClockSource+0x11e>
 80097d2:	2b60      	cmp	r3, #96	; 0x60
 80097d4:	d877      	bhi.n	80098c6 <HAL_TIM_ConfigClockSource+0x170>
 80097d6:	2b50      	cmp	r3, #80	; 0x50
 80097d8:	d03c      	beq.n	8009854 <HAL_TIM_ConfigClockSource+0xfe>
 80097da:	2b50      	cmp	r3, #80	; 0x50
 80097dc:	d873      	bhi.n	80098c6 <HAL_TIM_ConfigClockSource+0x170>
 80097de:	2b40      	cmp	r3, #64	; 0x40
 80097e0:	d058      	beq.n	8009894 <HAL_TIM_ConfigClockSource+0x13e>
 80097e2:	2b40      	cmp	r3, #64	; 0x40
 80097e4:	d86f      	bhi.n	80098c6 <HAL_TIM_ConfigClockSource+0x170>
 80097e6:	2b30      	cmp	r3, #48	; 0x30
 80097e8:	d064      	beq.n	80098b4 <HAL_TIM_ConfigClockSource+0x15e>
 80097ea:	2b30      	cmp	r3, #48	; 0x30
 80097ec:	d86b      	bhi.n	80098c6 <HAL_TIM_ConfigClockSource+0x170>
 80097ee:	2b20      	cmp	r3, #32
 80097f0:	d060      	beq.n	80098b4 <HAL_TIM_ConfigClockSource+0x15e>
 80097f2:	2b20      	cmp	r3, #32
 80097f4:	d867      	bhi.n	80098c6 <HAL_TIM_ConfigClockSource+0x170>
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d05c      	beq.n	80098b4 <HAL_TIM_ConfigClockSource+0x15e>
 80097fa:	2b10      	cmp	r3, #16
 80097fc:	d05a      	beq.n	80098b4 <HAL_TIM_ConfigClockSource+0x15e>
 80097fe:	e062      	b.n	80098c6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	6899      	ldr	r1, [r3, #8]
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	685a      	ldr	r2, [r3, #4]
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f000 f9b0 	bl	8009b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009822:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68ba      	ldr	r2, [r7, #8]
 800982a:	609a      	str	r2, [r3, #8]
      break;
 800982c:	e04f      	b.n	80098ce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	6899      	ldr	r1, [r3, #8]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	f000 f999 	bl	8009b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009850:	609a      	str	r2, [r3, #8]
      break;
 8009852:	e03c      	b.n	80098ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6818      	ldr	r0, [r3, #0]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	6859      	ldr	r1, [r3, #4]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	461a      	mov	r2, r3
 8009862:	f000 f90d 	bl	8009a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2150      	movs	r1, #80	; 0x50
 800986c:	4618      	mov	r0, r3
 800986e:	f000 f966 	bl	8009b3e <TIM_ITRx_SetConfig>
      break;
 8009872:	e02c      	b.n	80098ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	6859      	ldr	r1, [r3, #4]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	461a      	mov	r2, r3
 8009882:	f000 f92c 	bl	8009ade <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2160      	movs	r1, #96	; 0x60
 800988c:	4618      	mov	r0, r3
 800988e:	f000 f956 	bl	8009b3e <TIM_ITRx_SetConfig>
      break;
 8009892:	e01c      	b.n	80098ce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6818      	ldr	r0, [r3, #0]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	6859      	ldr	r1, [r3, #4]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	68db      	ldr	r3, [r3, #12]
 80098a0:	461a      	mov	r2, r3
 80098a2:	f000 f8ed 	bl	8009a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2140      	movs	r1, #64	; 0x40
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 f946 	bl	8009b3e <TIM_ITRx_SetConfig>
      break;
 80098b2:	e00c      	b.n	80098ce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4619      	mov	r1, r3
 80098be:	4610      	mov	r0, r2
 80098c0:	f000 f93d 	bl	8009b3e <TIM_ITRx_SetConfig>
      break;
 80098c4:	e003      	b.n	80098ce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	73fb      	strb	r3, [r7, #15]
      break;
 80098ca:	e000      	b.n	80098ce <HAL_TIM_ConfigClockSource+0x178>
      break;
 80098cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098de:	7bfb      	ldrb	r3, [r7, #15]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009918:	bf00      	nop
 800991a:	370c      	adds	r7, #12
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009924:	b480      	push	{r7}
 8009926:	b083      	sub	sp, #12
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800992c:	bf00      	nop
 800992e:	370c      	adds	r7, #12
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a40      	ldr	r2, [pc, #256]	; (8009a60 <TIM_Base_SetConfig+0x114>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d013      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800996a:	d00f      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a3d      	ldr	r2, [pc, #244]	; (8009a64 <TIM_Base_SetConfig+0x118>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00b      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a3c      	ldr	r2, [pc, #240]	; (8009a68 <TIM_Base_SetConfig+0x11c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d007      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a3b      	ldr	r2, [pc, #236]	; (8009a6c <TIM_Base_SetConfig+0x120>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d003      	beq.n	800998c <TIM_Base_SetConfig+0x40>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a3a      	ldr	r2, [pc, #232]	; (8009a70 <TIM_Base_SetConfig+0x124>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d108      	bne.n	800999e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	4a2f      	ldr	r2, [pc, #188]	; (8009a60 <TIM_Base_SetConfig+0x114>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d01f      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ac:	d01b      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	4a2c      	ldr	r2, [pc, #176]	; (8009a64 <TIM_Base_SetConfig+0x118>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d017      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	4a2b      	ldr	r2, [pc, #172]	; (8009a68 <TIM_Base_SetConfig+0x11c>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d013      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	4a2a      	ldr	r2, [pc, #168]	; (8009a6c <TIM_Base_SetConfig+0x120>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d00f      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4a29      	ldr	r2, [pc, #164]	; (8009a70 <TIM_Base_SetConfig+0x124>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d00b      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4a28      	ldr	r2, [pc, #160]	; (8009a74 <TIM_Base_SetConfig+0x128>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d007      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a27      	ldr	r2, [pc, #156]	; (8009a78 <TIM_Base_SetConfig+0x12c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d003      	beq.n	80099e6 <TIM_Base_SetConfig+0x9a>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a26      	ldr	r2, [pc, #152]	; (8009a7c <TIM_Base_SetConfig+0x130>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d108      	bne.n	80099f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	68db      	ldr	r3, [r3, #12]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a10      	ldr	r2, [pc, #64]	; (8009a60 <TIM_Base_SetConfig+0x114>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d00f      	beq.n	8009a44 <TIM_Base_SetConfig+0xf8>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a12      	ldr	r2, [pc, #72]	; (8009a70 <TIM_Base_SetConfig+0x124>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d00b      	beq.n	8009a44 <TIM_Base_SetConfig+0xf8>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a11      	ldr	r2, [pc, #68]	; (8009a74 <TIM_Base_SetConfig+0x128>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d007      	beq.n	8009a44 <TIM_Base_SetConfig+0xf8>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a10      	ldr	r2, [pc, #64]	; (8009a78 <TIM_Base_SetConfig+0x12c>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d003      	beq.n	8009a44 <TIM_Base_SetConfig+0xf8>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a0f      	ldr	r2, [pc, #60]	; (8009a7c <TIM_Base_SetConfig+0x130>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d103      	bne.n	8009a4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	691a      	ldr	r2, [r3, #16]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	615a      	str	r2, [r3, #20]
}
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	40012c00 	.word	0x40012c00
 8009a64:	40000400 	.word	0x40000400
 8009a68:	40000800 	.word	0x40000800
 8009a6c:	40000c00 	.word	0x40000c00
 8009a70:	40013400 	.word	0x40013400
 8009a74:	40014000 	.word	0x40014000
 8009a78:	40014400 	.word	0x40014400
 8009a7c:	40014800 	.word	0x40014800

08009a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6a1b      	ldr	r3, [r3, #32]
 8009a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f023 0201 	bic.w	r2, r3, #1
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f023 030a 	bic.w	r3, r3, #10
 8009abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009abe:	697a      	ldr	r2, [r7, #20]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	693a      	ldr	r2, [r7, #16]
 8009aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	621a      	str	r2, [r3, #32]
}
 8009ad2:	bf00      	nop
 8009ad4:	371c      	adds	r7, #28
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b087      	sub	sp, #28
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	60f8      	str	r0, [r7, #12]
 8009ae6:	60b9      	str	r1, [r7, #8]
 8009ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	f023 0210 	bic.w	r2, r3, #16
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	031b      	lsls	r3, r3, #12
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	4313      	orrs	r3, r2
 8009b12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	011b      	lsls	r3, r3, #4
 8009b20:	693a      	ldr	r2, [r7, #16]
 8009b22:	4313      	orrs	r3, r2
 8009b24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	621a      	str	r2, [r3, #32]
}
 8009b32:	bf00      	nop
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b085      	sub	sp, #20
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	f043 0307 	orr.w	r3, r3, #7
 8009b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	609a      	str	r2, [r3, #8]
}
 8009b68:	bf00      	nop
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b087      	sub	sp, #28
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	021a      	lsls	r2, r3, #8
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	431a      	orrs	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	697a      	ldr	r2, [r7, #20]
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	609a      	str	r2, [r3, #8]
}
 8009ba8:	bf00      	nop
 8009baa:	371c      	adds	r7, #28
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d101      	bne.n	8009bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	e068      	b.n	8009c9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a2e      	ldr	r2, [pc, #184]	; (8009cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d004      	beq.n	8009c00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a2d      	ldr	r2, [pc, #180]	; (8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d108      	bne.n	8009c12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	68fa      	ldr	r2, [r7, #12]
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a1e      	ldr	r2, [pc, #120]	; (8009cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d01d      	beq.n	8009c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c3e:	d018      	beq.n	8009c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a1b      	ldr	r2, [pc, #108]	; (8009cb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d013      	beq.n	8009c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a1a      	ldr	r2, [pc, #104]	; (8009cb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d00e      	beq.n	8009c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a18      	ldr	r2, [pc, #96]	; (8009cbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d009      	beq.n	8009c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a13      	ldr	r2, [pc, #76]	; (8009cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d004      	beq.n	8009c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a14      	ldr	r2, [pc, #80]	; (8009cc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d10c      	bne.n	8009c8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	40012c00 	.word	0x40012c00
 8009cb0:	40013400 	.word	0x40013400
 8009cb4:	40000400 	.word	0x40000400
 8009cb8:	40000800 	.word	0x40000800
 8009cbc:	40000c00 	.word	0x40000c00
 8009cc0:	40014000 	.word	0x40014000

08009cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e040      	b.n	8009d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d106      	bne.n	8009d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 f83a 	bl	8009d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2224      	movs	r2, #36	; 0x24
 8009d2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f022 0201 	bic.w	r2, r2, #1
 8009d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f94a 	bl	8009fd8 <UART_SetConfig>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d101      	bne.n	8009d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e022      	b.n	8009d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d002      	beq.n	8009d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fbc8 	bl	800a4ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f042 0201 	orr.w	r2, r2, #1
 8009d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 fc4f 	bl	800a630 <UART_CheckIdleState>
 8009d92:	4603      	mov	r3, r0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b08a      	sub	sp, #40	; 0x28
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	60f8      	str	r0, [r7, #12]
 8009db8:	60b9      	str	r1, [r7, #8]
 8009dba:	603b      	str	r3, [r7, #0]
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	f040 8082 	bne.w	8009ece <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <HAL_UART_Transmit+0x26>
 8009dd0:	88fb      	ldrh	r3, [r7, #6]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e07a      	b.n	8009ed0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_UART_Transmit+0x38>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e073      	b.n	8009ed0 <HAL_UART_Transmit+0x120>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2221      	movs	r2, #33	; 0x21
 8009dfc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009dfe:	f7fc f83b 	bl	8005e78 <HAL_GetTick>
 8009e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	88fa      	ldrh	r2, [r7, #6]
 8009e08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	88fa      	ldrh	r2, [r7, #6]
 8009e10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e1c:	d108      	bne.n	8009e30 <HAL_UART_Transmit+0x80>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d104      	bne.n	8009e30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	61bb      	str	r3, [r7, #24]
 8009e2e:	e003      	b.n	8009e38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e34:	2300      	movs	r3, #0
 8009e36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009e40:	e02d      	b.n	8009e9e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2180      	movs	r1, #128	; 0x80
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f000 fc38 	bl	800a6c2 <UART_WaitOnFlagUntilTimeout>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e039      	b.n	8009ed0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10b      	bne.n	8009e7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	881a      	ldrh	r2, [r3, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e6e:	b292      	uxth	r2, r2
 8009e70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	3302      	adds	r3, #2
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	e008      	b.n	8009e8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	781a      	ldrb	r2, [r3, #0]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	b292      	uxth	r2, r2
 8009e84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	3b01      	subs	r3, #1
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1cb      	bne.n	8009e42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	2140      	movs	r1, #64	; 0x40
 8009eb4:	68f8      	ldr	r0, [r7, #12]
 8009eb6:	f000 fc04 	bl	800a6c2 <UART_WaitOnFlagUntilTimeout>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d001      	beq.n	8009ec4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	e005      	b.n	8009ed0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2220      	movs	r2, #32
 8009ec8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e000      	b.n	8009ed0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009ece:	2302      	movs	r3, #2
  }
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b08a      	sub	sp, #40	; 0x28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d142      	bne.n	8009f74 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <HAL_UART_Receive_DMA+0x22>
 8009ef4:	88fb      	ldrh	r3, [r7, #6]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d101      	bne.n	8009efe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e03b      	b.n	8009f76 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d101      	bne.n	8009f0c <HAL_UART_Receive_DMA+0x34>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	e034      	b.n	8009f76 <HAL_UART_Receive_DMA+0x9e>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a18      	ldr	r2, [pc, #96]	; (8009f80 <HAL_UART_Receive_DMA+0xa8>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d01f      	beq.n	8009f64 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d018      	beq.n	8009f64 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	e853 3f00 	ldrex	r3, [r3]
 8009f3e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f46:	627b      	str	r3, [r7, #36]	; 0x24
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	623b      	str	r3, [r7, #32]
 8009f52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f54:	69f9      	ldr	r1, [r7, #28]
 8009f56:	6a3a      	ldr	r2, [r7, #32]
 8009f58:	e841 2300 	strex	r3, r2, [r1]
 8009f5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1e6      	bne.n	8009f32 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f64:	88fb      	ldrh	r3, [r7, #6]
 8009f66:	461a      	mov	r2, r3
 8009f68:	68b9      	ldr	r1, [r7, #8]
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 fc6e 	bl	800a84c <UART_Start_Receive_DMA>
 8009f70:	4603      	mov	r3, r0
 8009f72:	e000      	b.n	8009f76 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009f74:	2302      	movs	r3, #2
  }
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3728      	adds	r7, #40	; 0x28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	40008000 	.word	0x40008000

08009f84 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr

08009fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fd8:	b5b0      	push	{r4, r5, r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689a      	ldr	r2, [r3, #8]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	431a      	orrs	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4bad      	ldr	r3, [pc, #692]	; (800a2b8 <UART_SetConfig+0x2e0>)
 800a004:	4013      	ands	r3, r2
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	6812      	ldr	r2, [r2, #0]
 800a00a:	69f9      	ldr	r1, [r7, #28]
 800a00c:	430b      	orrs	r3, r1
 800a00e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4aa2      	ldr	r2, [pc, #648]	; (800a2bc <UART_SetConfig+0x2e4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d004      	beq.n	800a040 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	430a      	orrs	r2, r1
 800a052:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a99      	ldr	r2, [pc, #612]	; (800a2c0 <UART_SetConfig+0x2e8>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d121      	bne.n	800a0a2 <UART_SetConfig+0xca>
 800a05e:	4b99      	ldr	r3, [pc, #612]	; (800a2c4 <UART_SetConfig+0x2ec>)
 800a060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d817      	bhi.n	800a09c <UART_SetConfig+0xc4>
 800a06c:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <UART_SetConfig+0x9c>)
 800a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a072:	bf00      	nop
 800a074:	0800a085 	.word	0x0800a085
 800a078:	0800a091 	.word	0x0800a091
 800a07c:	0800a08b 	.word	0x0800a08b
 800a080:	0800a097 	.word	0x0800a097
 800a084:	2301      	movs	r3, #1
 800a086:	76fb      	strb	r3, [r7, #27]
 800a088:	e0e7      	b.n	800a25a <UART_SetConfig+0x282>
 800a08a:	2302      	movs	r3, #2
 800a08c:	76fb      	strb	r3, [r7, #27]
 800a08e:	e0e4      	b.n	800a25a <UART_SetConfig+0x282>
 800a090:	2304      	movs	r3, #4
 800a092:	76fb      	strb	r3, [r7, #27]
 800a094:	e0e1      	b.n	800a25a <UART_SetConfig+0x282>
 800a096:	2308      	movs	r3, #8
 800a098:	76fb      	strb	r3, [r7, #27]
 800a09a:	e0de      	b.n	800a25a <UART_SetConfig+0x282>
 800a09c:	2310      	movs	r3, #16
 800a09e:	76fb      	strb	r3, [r7, #27]
 800a0a0:	e0db      	b.n	800a25a <UART_SetConfig+0x282>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a88      	ldr	r2, [pc, #544]	; (800a2c8 <UART_SetConfig+0x2f0>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d132      	bne.n	800a112 <UART_SetConfig+0x13a>
 800a0ac:	4b85      	ldr	r3, [pc, #532]	; (800a2c4 <UART_SetConfig+0x2ec>)
 800a0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0b2:	f003 030c 	and.w	r3, r3, #12
 800a0b6:	2b0c      	cmp	r3, #12
 800a0b8:	d828      	bhi.n	800a10c <UART_SetConfig+0x134>
 800a0ba:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <UART_SetConfig+0xe8>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a0f5 	.word	0x0800a0f5
 800a0c4:	0800a10d 	.word	0x0800a10d
 800a0c8:	0800a10d 	.word	0x0800a10d
 800a0cc:	0800a10d 	.word	0x0800a10d
 800a0d0:	0800a101 	.word	0x0800a101
 800a0d4:	0800a10d 	.word	0x0800a10d
 800a0d8:	0800a10d 	.word	0x0800a10d
 800a0dc:	0800a10d 	.word	0x0800a10d
 800a0e0:	0800a0fb 	.word	0x0800a0fb
 800a0e4:	0800a10d 	.word	0x0800a10d
 800a0e8:	0800a10d 	.word	0x0800a10d
 800a0ec:	0800a10d 	.word	0x0800a10d
 800a0f0:	0800a107 	.word	0x0800a107
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	76fb      	strb	r3, [r7, #27]
 800a0f8:	e0af      	b.n	800a25a <UART_SetConfig+0x282>
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	76fb      	strb	r3, [r7, #27]
 800a0fe:	e0ac      	b.n	800a25a <UART_SetConfig+0x282>
 800a100:	2304      	movs	r3, #4
 800a102:	76fb      	strb	r3, [r7, #27]
 800a104:	e0a9      	b.n	800a25a <UART_SetConfig+0x282>
 800a106:	2308      	movs	r3, #8
 800a108:	76fb      	strb	r3, [r7, #27]
 800a10a:	e0a6      	b.n	800a25a <UART_SetConfig+0x282>
 800a10c:	2310      	movs	r3, #16
 800a10e:	76fb      	strb	r3, [r7, #27]
 800a110:	e0a3      	b.n	800a25a <UART_SetConfig+0x282>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a6d      	ldr	r2, [pc, #436]	; (800a2cc <UART_SetConfig+0x2f4>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d120      	bne.n	800a15e <UART_SetConfig+0x186>
 800a11c:	4b69      	ldr	r3, [pc, #420]	; (800a2c4 <UART_SetConfig+0x2ec>)
 800a11e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a122:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a126:	2b30      	cmp	r3, #48	; 0x30
 800a128:	d013      	beq.n	800a152 <UART_SetConfig+0x17a>
 800a12a:	2b30      	cmp	r3, #48	; 0x30
 800a12c:	d814      	bhi.n	800a158 <UART_SetConfig+0x180>
 800a12e:	2b20      	cmp	r3, #32
 800a130:	d009      	beq.n	800a146 <UART_SetConfig+0x16e>
 800a132:	2b20      	cmp	r3, #32
 800a134:	d810      	bhi.n	800a158 <UART_SetConfig+0x180>
 800a136:	2b00      	cmp	r3, #0
 800a138:	d002      	beq.n	800a140 <UART_SetConfig+0x168>
 800a13a:	2b10      	cmp	r3, #16
 800a13c:	d006      	beq.n	800a14c <UART_SetConfig+0x174>
 800a13e:	e00b      	b.n	800a158 <UART_SetConfig+0x180>
 800a140:	2300      	movs	r3, #0
 800a142:	76fb      	strb	r3, [r7, #27]
 800a144:	e089      	b.n	800a25a <UART_SetConfig+0x282>
 800a146:	2302      	movs	r3, #2
 800a148:	76fb      	strb	r3, [r7, #27]
 800a14a:	e086      	b.n	800a25a <UART_SetConfig+0x282>
 800a14c:	2304      	movs	r3, #4
 800a14e:	76fb      	strb	r3, [r7, #27]
 800a150:	e083      	b.n	800a25a <UART_SetConfig+0x282>
 800a152:	2308      	movs	r3, #8
 800a154:	76fb      	strb	r3, [r7, #27]
 800a156:	e080      	b.n	800a25a <UART_SetConfig+0x282>
 800a158:	2310      	movs	r3, #16
 800a15a:	76fb      	strb	r3, [r7, #27]
 800a15c:	e07d      	b.n	800a25a <UART_SetConfig+0x282>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a5b      	ldr	r2, [pc, #364]	; (800a2d0 <UART_SetConfig+0x2f8>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d120      	bne.n	800a1aa <UART_SetConfig+0x1d2>
 800a168:	4b56      	ldr	r3, [pc, #344]	; (800a2c4 <UART_SetConfig+0x2ec>)
 800a16a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a16e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a172:	2bc0      	cmp	r3, #192	; 0xc0
 800a174:	d013      	beq.n	800a19e <UART_SetConfig+0x1c6>
 800a176:	2bc0      	cmp	r3, #192	; 0xc0
 800a178:	d814      	bhi.n	800a1a4 <UART_SetConfig+0x1cc>
 800a17a:	2b80      	cmp	r3, #128	; 0x80
 800a17c:	d009      	beq.n	800a192 <UART_SetConfig+0x1ba>
 800a17e:	2b80      	cmp	r3, #128	; 0x80
 800a180:	d810      	bhi.n	800a1a4 <UART_SetConfig+0x1cc>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <UART_SetConfig+0x1b4>
 800a186:	2b40      	cmp	r3, #64	; 0x40
 800a188:	d006      	beq.n	800a198 <UART_SetConfig+0x1c0>
 800a18a:	e00b      	b.n	800a1a4 <UART_SetConfig+0x1cc>
 800a18c:	2300      	movs	r3, #0
 800a18e:	76fb      	strb	r3, [r7, #27]
 800a190:	e063      	b.n	800a25a <UART_SetConfig+0x282>
 800a192:	2302      	movs	r3, #2
 800a194:	76fb      	strb	r3, [r7, #27]
 800a196:	e060      	b.n	800a25a <UART_SetConfig+0x282>
 800a198:	2304      	movs	r3, #4
 800a19a:	76fb      	strb	r3, [r7, #27]
 800a19c:	e05d      	b.n	800a25a <UART_SetConfig+0x282>
 800a19e:	2308      	movs	r3, #8
 800a1a0:	76fb      	strb	r3, [r7, #27]
 800a1a2:	e05a      	b.n	800a25a <UART_SetConfig+0x282>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	76fb      	strb	r3, [r7, #27]
 800a1a8:	e057      	b.n	800a25a <UART_SetConfig+0x282>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a49      	ldr	r2, [pc, #292]	; (800a2d4 <UART_SetConfig+0x2fc>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d125      	bne.n	800a200 <UART_SetConfig+0x228>
 800a1b4:	4b43      	ldr	r3, [pc, #268]	; (800a2c4 <UART_SetConfig+0x2ec>)
 800a1b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1c2:	d017      	beq.n	800a1f4 <UART_SetConfig+0x21c>
 800a1c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1c8:	d817      	bhi.n	800a1fa <UART_SetConfig+0x222>
 800a1ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1ce:	d00b      	beq.n	800a1e8 <UART_SetConfig+0x210>
 800a1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1d4:	d811      	bhi.n	800a1fa <UART_SetConfig+0x222>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d003      	beq.n	800a1e2 <UART_SetConfig+0x20a>
 800a1da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1de:	d006      	beq.n	800a1ee <UART_SetConfig+0x216>
 800a1e0:	e00b      	b.n	800a1fa <UART_SetConfig+0x222>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	76fb      	strb	r3, [r7, #27]
 800a1e6:	e038      	b.n	800a25a <UART_SetConfig+0x282>
 800a1e8:	2302      	movs	r3, #2
 800a1ea:	76fb      	strb	r3, [r7, #27]
 800a1ec:	e035      	b.n	800a25a <UART_SetConfig+0x282>
 800a1ee:	2304      	movs	r3, #4
 800a1f0:	76fb      	strb	r3, [r7, #27]
 800a1f2:	e032      	b.n	800a25a <UART_SetConfig+0x282>
 800a1f4:	2308      	movs	r3, #8
 800a1f6:	76fb      	strb	r3, [r7, #27]
 800a1f8:	e02f      	b.n	800a25a <UART_SetConfig+0x282>
 800a1fa:	2310      	movs	r3, #16
 800a1fc:	76fb      	strb	r3, [r7, #27]
 800a1fe:	e02c      	b.n	800a25a <UART_SetConfig+0x282>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a2d      	ldr	r2, [pc, #180]	; (800a2bc <UART_SetConfig+0x2e4>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d125      	bne.n	800a256 <UART_SetConfig+0x27e>
 800a20a:	4b2e      	ldr	r3, [pc, #184]	; (800a2c4 <UART_SetConfig+0x2ec>)
 800a20c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a210:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a218:	d017      	beq.n	800a24a <UART_SetConfig+0x272>
 800a21a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a21e:	d817      	bhi.n	800a250 <UART_SetConfig+0x278>
 800a220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a224:	d00b      	beq.n	800a23e <UART_SetConfig+0x266>
 800a226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a22a:	d811      	bhi.n	800a250 <UART_SetConfig+0x278>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d003      	beq.n	800a238 <UART_SetConfig+0x260>
 800a230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a234:	d006      	beq.n	800a244 <UART_SetConfig+0x26c>
 800a236:	e00b      	b.n	800a250 <UART_SetConfig+0x278>
 800a238:	2300      	movs	r3, #0
 800a23a:	76fb      	strb	r3, [r7, #27]
 800a23c:	e00d      	b.n	800a25a <UART_SetConfig+0x282>
 800a23e:	2302      	movs	r3, #2
 800a240:	76fb      	strb	r3, [r7, #27]
 800a242:	e00a      	b.n	800a25a <UART_SetConfig+0x282>
 800a244:	2304      	movs	r3, #4
 800a246:	76fb      	strb	r3, [r7, #27]
 800a248:	e007      	b.n	800a25a <UART_SetConfig+0x282>
 800a24a:	2308      	movs	r3, #8
 800a24c:	76fb      	strb	r3, [r7, #27]
 800a24e:	e004      	b.n	800a25a <UART_SetConfig+0x282>
 800a250:	2310      	movs	r3, #16
 800a252:	76fb      	strb	r3, [r7, #27]
 800a254:	e001      	b.n	800a25a <UART_SetConfig+0x282>
 800a256:	2310      	movs	r3, #16
 800a258:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a17      	ldr	r2, [pc, #92]	; (800a2bc <UART_SetConfig+0x2e4>)
 800a260:	4293      	cmp	r3, r2
 800a262:	f040 8087 	bne.w	800a374 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a266:	7efb      	ldrb	r3, [r7, #27]
 800a268:	2b08      	cmp	r3, #8
 800a26a:	d837      	bhi.n	800a2dc <UART_SetConfig+0x304>
 800a26c:	a201      	add	r2, pc, #4	; (adr r2, 800a274 <UART_SetConfig+0x29c>)
 800a26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a272:	bf00      	nop
 800a274:	0800a299 	.word	0x0800a299
 800a278:	0800a2dd 	.word	0x0800a2dd
 800a27c:	0800a2a1 	.word	0x0800a2a1
 800a280:	0800a2dd 	.word	0x0800a2dd
 800a284:	0800a2a7 	.word	0x0800a2a7
 800a288:	0800a2dd 	.word	0x0800a2dd
 800a28c:	0800a2dd 	.word	0x0800a2dd
 800a290:	0800a2dd 	.word	0x0800a2dd
 800a294:	0800a2af 	.word	0x0800a2af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a298:	f7fe f8d8 	bl	800844c <HAL_RCC_GetPCLK1Freq>
 800a29c:	6178      	str	r0, [r7, #20]
        break;
 800a29e:	e022      	b.n	800a2e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2a0:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <UART_SetConfig+0x300>)
 800a2a2:	617b      	str	r3, [r7, #20]
        break;
 800a2a4:	e01f      	b.n	800a2e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2a6:	f7fe f839 	bl	800831c <HAL_RCC_GetSysClockFreq>
 800a2aa:	6178      	str	r0, [r7, #20]
        break;
 800a2ac:	e01b      	b.n	800a2e6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2b2:	617b      	str	r3, [r7, #20]
        break;
 800a2b4:	e017      	b.n	800a2e6 <UART_SetConfig+0x30e>
 800a2b6:	bf00      	nop
 800a2b8:	efff69f3 	.word	0xefff69f3
 800a2bc:	40008000 	.word	0x40008000
 800a2c0:	40013800 	.word	0x40013800
 800a2c4:	40021000 	.word	0x40021000
 800a2c8:	40004400 	.word	0x40004400
 800a2cc:	40004800 	.word	0x40004800
 800a2d0:	40004c00 	.word	0x40004c00
 800a2d4:	40005000 	.word	0x40005000
 800a2d8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	76bb      	strb	r3, [r7, #26]
        break;
 800a2e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f000 80f1 	beq.w	800a4d0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	4413      	add	r3, r2
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d305      	bcc.n	800a30a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	429a      	cmp	r2, r3
 800a308:	d902      	bls.n	800a310 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	76bb      	strb	r3, [r7, #26]
 800a30e:	e0df      	b.n	800a4d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	4618      	mov	r0, r3
 800a314:	f04f 0100 	mov.w	r1, #0
 800a318:	f04f 0200 	mov.w	r2, #0
 800a31c:	f04f 0300 	mov.w	r3, #0
 800a320:	020b      	lsls	r3, r1, #8
 800a322:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a326:	0202      	lsls	r2, r0, #8
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	6849      	ldr	r1, [r1, #4]
 800a32c:	0849      	lsrs	r1, r1, #1
 800a32e:	4608      	mov	r0, r1
 800a330:	f04f 0100 	mov.w	r1, #0
 800a334:	1814      	adds	r4, r2, r0
 800a336:	eb43 0501 	adc.w	r5, r3, r1
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	461a      	mov	r2, r3
 800a340:	f04f 0300 	mov.w	r3, #0
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f6 fc7e 	bl	8000c48 <__aeabi_uldivmod>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4613      	mov	r3, r2
 800a352:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a35a:	d308      	bcc.n	800a36e <UART_SetConfig+0x396>
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a362:	d204      	bcs.n	800a36e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	60da      	str	r2, [r3, #12]
 800a36c:	e0b0      	b.n	800a4d0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	76bb      	strb	r3, [r7, #26]
 800a372:	e0ad      	b.n	800a4d0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a37c:	d15b      	bne.n	800a436 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a37e:	7efb      	ldrb	r3, [r7, #27]
 800a380:	2b08      	cmp	r3, #8
 800a382:	d828      	bhi.n	800a3d6 <UART_SetConfig+0x3fe>
 800a384:	a201      	add	r2, pc, #4	; (adr r2, 800a38c <UART_SetConfig+0x3b4>)
 800a386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a38a:	bf00      	nop
 800a38c:	0800a3b1 	.word	0x0800a3b1
 800a390:	0800a3b9 	.word	0x0800a3b9
 800a394:	0800a3c1 	.word	0x0800a3c1
 800a398:	0800a3d7 	.word	0x0800a3d7
 800a39c:	0800a3c7 	.word	0x0800a3c7
 800a3a0:	0800a3d7 	.word	0x0800a3d7
 800a3a4:	0800a3d7 	.word	0x0800a3d7
 800a3a8:	0800a3d7 	.word	0x0800a3d7
 800a3ac:	0800a3cf 	.word	0x0800a3cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3b0:	f7fe f84c 	bl	800844c <HAL_RCC_GetPCLK1Freq>
 800a3b4:	6178      	str	r0, [r7, #20]
        break;
 800a3b6:	e013      	b.n	800a3e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3b8:	f7fe f85e 	bl	8008478 <HAL_RCC_GetPCLK2Freq>
 800a3bc:	6178      	str	r0, [r7, #20]
        break;
 800a3be:	e00f      	b.n	800a3e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3c0:	4b49      	ldr	r3, [pc, #292]	; (800a4e8 <UART_SetConfig+0x510>)
 800a3c2:	617b      	str	r3, [r7, #20]
        break;
 800a3c4:	e00c      	b.n	800a3e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3c6:	f7fd ffa9 	bl	800831c <HAL_RCC_GetSysClockFreq>
 800a3ca:	6178      	str	r0, [r7, #20]
        break;
 800a3cc:	e008      	b.n	800a3e0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3d2:	617b      	str	r3, [r7, #20]
        break;
 800a3d4:	e004      	b.n	800a3e0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	76bb      	strb	r3, [r7, #26]
        break;
 800a3de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d074      	beq.n	800a4d0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	005a      	lsls	r2, r3, #1
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	085b      	lsrs	r3, r3, #1
 800a3f0:	441a      	add	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3fa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	2b0f      	cmp	r3, #15
 800a400:	d916      	bls.n	800a430 <UART_SetConfig+0x458>
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a408:	d212      	bcs.n	800a430 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f023 030f 	bic.w	r3, r3, #15
 800a412:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	085b      	lsrs	r3, r3, #1
 800a418:	b29b      	uxth	r3, r3
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	b29a      	uxth	r2, r3
 800a420:	89fb      	ldrh	r3, [r7, #14]
 800a422:	4313      	orrs	r3, r2
 800a424:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	89fa      	ldrh	r2, [r7, #14]
 800a42c:	60da      	str	r2, [r3, #12]
 800a42e:	e04f      	b.n	800a4d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	76bb      	strb	r3, [r7, #26]
 800a434:	e04c      	b.n	800a4d0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a436:	7efb      	ldrb	r3, [r7, #27]
 800a438:	2b08      	cmp	r3, #8
 800a43a:	d828      	bhi.n	800a48e <UART_SetConfig+0x4b6>
 800a43c:	a201      	add	r2, pc, #4	; (adr r2, 800a444 <UART_SetConfig+0x46c>)
 800a43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a442:	bf00      	nop
 800a444:	0800a469 	.word	0x0800a469
 800a448:	0800a471 	.word	0x0800a471
 800a44c:	0800a479 	.word	0x0800a479
 800a450:	0800a48f 	.word	0x0800a48f
 800a454:	0800a47f 	.word	0x0800a47f
 800a458:	0800a48f 	.word	0x0800a48f
 800a45c:	0800a48f 	.word	0x0800a48f
 800a460:	0800a48f 	.word	0x0800a48f
 800a464:	0800a487 	.word	0x0800a487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a468:	f7fd fff0 	bl	800844c <HAL_RCC_GetPCLK1Freq>
 800a46c:	6178      	str	r0, [r7, #20]
        break;
 800a46e:	e013      	b.n	800a498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a470:	f7fe f802 	bl	8008478 <HAL_RCC_GetPCLK2Freq>
 800a474:	6178      	str	r0, [r7, #20]
        break;
 800a476:	e00f      	b.n	800a498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a478:	4b1b      	ldr	r3, [pc, #108]	; (800a4e8 <UART_SetConfig+0x510>)
 800a47a:	617b      	str	r3, [r7, #20]
        break;
 800a47c:	e00c      	b.n	800a498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a47e:	f7fd ff4d 	bl	800831c <HAL_RCC_GetSysClockFreq>
 800a482:	6178      	str	r0, [r7, #20]
        break;
 800a484:	e008      	b.n	800a498 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a48a:	617b      	str	r3, [r7, #20]
        break;
 800a48c:	e004      	b.n	800a498 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a48e:	2300      	movs	r3, #0
 800a490:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	76bb      	strb	r3, [r7, #26]
        break;
 800a496:	bf00      	nop
    }

    if (pclk != 0U)
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d018      	beq.n	800a4d0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	085a      	lsrs	r2, r3, #1
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	441a      	add	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	2b0f      	cmp	r3, #15
 800a4b6:	d909      	bls.n	800a4cc <UART_SetConfig+0x4f4>
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4be:	d205      	bcs.n	800a4cc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	60da      	str	r2, [r3, #12]
 800a4ca:	e001      	b.n	800a4d0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a4dc:	7ebb      	ldrb	r3, [r7, #26]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3720      	adds	r7, #32
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bdb0      	pop	{r4, r5, r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	00f42400 	.word	0x00f42400

0800a4ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00a      	beq.n	800a516 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51a:	f003 0302 	and.w	r3, r3, #2
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	430a      	orrs	r2, r1
 800a536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	f003 0304 	and.w	r3, r3, #4
 800a540:	2b00      	cmp	r3, #0
 800a542:	d00a      	beq.n	800a55a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00a      	beq.n	800a57c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	f003 0310 	and.w	r3, r3, #16
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00a      	beq.n	800a59e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	f003 0320 	and.w	r3, r3, #32
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d01a      	beq.n	800a602 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5ea:	d10a      	bne.n	800a602 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00a      	beq.n	800a624 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	430a      	orrs	r2, r1
 800a622:	605a      	str	r2, [r3, #4]
  }
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af02      	add	r7, sp, #8
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a640:	f7fb fc1a 	bl	8005e78 <HAL_GetTick>
 800a644:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0308 	and.w	r3, r3, #8
 800a650:	2b08      	cmp	r3, #8
 800a652:	d10e      	bne.n	800a672 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a654:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a658:	9300      	str	r3, [sp, #0]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f82d 	bl	800a6c2 <UART_WaitOnFlagUntilTimeout>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d001      	beq.n	800a672 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e023      	b.n	800a6ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b04      	cmp	r3, #4
 800a67e:	d10e      	bne.n	800a69e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f817 	bl	800a6c2 <UART_WaitOnFlagUntilTimeout>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a69a:	2303      	movs	r3, #3
 800a69c:	e00d      	b.n	800a6ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2220      	movs	r2, #32
 800a6a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b09c      	sub	sp, #112	; 0x70
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	60f8      	str	r0, [r7, #12]
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	603b      	str	r3, [r7, #0]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6d2:	e0a5      	b.n	800a820 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6da:	f000 80a1 	beq.w	800a820 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6de:	f7fb fbcb 	bl	8005e78 <HAL_GetTick>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	1ad3      	subs	r3, r2, r3
 800a6e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d302      	bcc.n	800a6f4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a6ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d13e      	bne.n	800a772 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a708:	667b      	str	r3, [r7, #100]	; 0x64
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a712:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a714:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a718:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e6      	bne.n	800a6f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	3308      	adds	r3, #8
 800a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a730:	e853 3f00 	ldrex	r3, [r3]
 800a734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a738:	f023 0301 	bic.w	r3, r3, #1
 800a73c:	663b      	str	r3, [r7, #96]	; 0x60
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	3308      	adds	r3, #8
 800a744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a746:	64ba      	str	r2, [r7, #72]	; 0x48
 800a748:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a74c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e5      	bne.n	800a726 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2220      	movs	r2, #32
 800a75e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2220      	movs	r2, #32
 800a764:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a76e:	2303      	movs	r3, #3
 800a770:	e067      	b.n	800a842 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f003 0304 	and.w	r3, r3, #4
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d04f      	beq.n	800a820 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	69db      	ldr	r3, [r3, #28]
 800a786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a78a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a78e:	d147      	bne.n	800a820 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a798:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a2:	e853 3f00 	ldrex	r3, [r3]
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a7ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7c0:	e841 2300 	strex	r3, r2, [r1]
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e6      	bne.n	800a79a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	3308      	adds	r3, #8
 800a7d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	e853 3f00 	ldrex	r3, [r3]
 800a7da:	613b      	str	r3, [r7, #16]
   return(result);
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f023 0301 	bic.w	r3, r3, #1
 800a7e2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	3308      	adds	r3, #8
 800a7ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a7ec:	623a      	str	r2, [r7, #32]
 800a7ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f0:	69f9      	ldr	r1, [r7, #28]
 800a7f2:	6a3a      	ldr	r2, [r7, #32]
 800a7f4:	e841 2300 	strex	r3, r2, [r1]
 800a7f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d1e5      	bne.n	800a7cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2220      	movs	r2, #32
 800a80a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2220      	movs	r2, #32
 800a810:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a81c:	2303      	movs	r3, #3
 800a81e:	e010      	b.n	800a842 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	69da      	ldr	r2, [r3, #28]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	4013      	ands	r3, r2
 800a82a:	68ba      	ldr	r2, [r7, #8]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	bf0c      	ite	eq
 800a830:	2301      	moveq	r3, #1
 800a832:	2300      	movne	r3, #0
 800a834:	b2db      	uxtb	r3, r3
 800a836:	461a      	mov	r2, r3
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	f43f af4a 	beq.w	800a6d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3770      	adds	r7, #112	; 0x70
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b096      	sub	sp, #88	; 0x58
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	4613      	mov	r3, r2
 800a858:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	88fa      	ldrh	r2, [r7, #6]
 800a864:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2222      	movs	r2, #34	; 0x22
 800a874:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d02b      	beq.n	800a8d6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a882:	4a42      	ldr	r2, [pc, #264]	; (800a98c <UART_Start_Receive_DMA+0x140>)
 800a884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a88a:	4a41      	ldr	r2, [pc, #260]	; (800a990 <UART_Start_Receive_DMA+0x144>)
 800a88c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a892:	4a40      	ldr	r2, [pc, #256]	; (800a994 <UART_Start_Receive_DMA+0x148>)
 800a894:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a89a:	2200      	movs	r2, #0
 800a89c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3324      	adds	r3, #36	; 0x24
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	88fb      	ldrh	r3, [r7, #6]
 800a8b2:	f7fb fda1 	bl	80063f8 <HAL_DMA_Start_IT>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00c      	beq.n	800a8d6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	2210      	movs	r2, #16
 800a8c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e055      	b.n	800a982 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d018      	beq.n	800a918 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8fa:	657b      	str	r3, [r7, #84]	; 0x54
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a904:	64bb      	str	r3, [r7, #72]	; 0x48
 800a906:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a908:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a90a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a90c:	e841 2300 	strex	r3, r2, [r1]
 800a910:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e6      	bne.n	800a8e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	3308      	adds	r3, #8
 800a91e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	e853 3f00 	ldrex	r3, [r3]
 800a926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	f043 0301 	orr.w	r3, r3, #1
 800a92e:	653b      	str	r3, [r7, #80]	; 0x50
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3308      	adds	r3, #8
 800a936:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a938:	637a      	str	r2, [r7, #52]	; 0x34
 800a93a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a93e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a940:	e841 2300 	strex	r3, r2, [r1]
 800a944:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1e5      	bne.n	800a918 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	3308      	adds	r3, #8
 800a952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	e853 3f00 	ldrex	r3, [r3]
 800a95a:	613b      	str	r3, [r7, #16]
   return(result);
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a962:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3308      	adds	r3, #8
 800a96a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a96c:	623a      	str	r2, [r7, #32]
 800a96e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a970:	69f9      	ldr	r1, [r7, #28]
 800a972:	6a3a      	ldr	r2, [r7, #32]
 800a974:	e841 2300 	strex	r3, r2, [r1]
 800a978:	61bb      	str	r3, [r7, #24]
   return(result);
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e5      	bne.n	800a94c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3758      	adds	r7, #88	; 0x58
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
 800a98a:	bf00      	nop
 800a98c:	0800aaab 	.word	0x0800aaab
 800a990:	0800abcf 	.word	0x0800abcf
 800a994:	0800ac07 	.word	0x0800ac07

0800a998 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b089      	sub	sp, #36	; 0x24
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	e853 3f00 	ldrex	r3, [r3]
 800a9ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9b4:	61fb      	str	r3, [r7, #28]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	61bb      	str	r3, [r7, #24]
 800a9c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c2:	6979      	ldr	r1, [r7, #20]
 800a9c4:	69ba      	ldr	r2, [r7, #24]
 800a9c6:	e841 2300 	strex	r3, r2, [r1]
 800a9ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e6      	bne.n	800a9a0 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a9d8:	bf00      	nop
 800a9da:	3724      	adds	r7, #36	; 0x24
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b095      	sub	sp, #84	; 0x54
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	e853 3f00 	ldrex	r3, [r3]
 800a9f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa0a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800aa10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa12:	e841 2300 	strex	r3, r2, [r1]
 800aa16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1e6      	bne.n	800a9ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	3308      	adds	r3, #8
 800aa24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	e853 3f00 	ldrex	r3, [r3]
 800aa2c:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	f023 0301 	bic.w	r3, r3, #1
 800aa34:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3308      	adds	r3, #8
 800aa3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aa40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa46:	e841 2300 	strex	r3, r2, [r1]
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1e5      	bne.n	800aa1e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d118      	bne.n	800aa8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f023 0310 	bic.w	r3, r3, #16
 800aa6e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa78:	61bb      	str	r3, [r7, #24]
 800aa7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6979      	ldr	r1, [r7, #20]
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	e841 2300 	strex	r3, r2, [r1]
 800aa84:	613b      	str	r3, [r7, #16]
   return(result);
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e6      	bne.n	800aa5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aa9e:	bf00      	nop
 800aaa0:	3754      	adds	r7, #84	; 0x54
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b09c      	sub	sp, #112	; 0x70
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 0320 	and.w	r3, r3, #32
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d170      	bne.n	800aba8 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800aac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aac8:	2200      	movs	r2, #0
 800aaca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aad6:	e853 3f00 	ldrex	r3, [r3]
 800aada:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aadc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aae2:	66bb      	str	r3, [r7, #104]	; 0x68
 800aae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaec:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aaf4:	e841 2300 	strex	r3, r2, [r1]
 800aaf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d1e6      	bne.n	800aace <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3308      	adds	r3, #8
 800ab06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0a:	e853 3f00 	ldrex	r3, [r3]
 800ab0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab12:	f023 0301 	bic.w	r3, r3, #1
 800ab16:	667b      	str	r3, [r7, #100]	; 0x64
 800ab18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	3308      	adds	r3, #8
 800ab1e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ab20:	647a      	str	r2, [r7, #68]	; 0x44
 800ab22:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab28:	e841 2300 	strex	r3, r2, [r1]
 800ab2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1e5      	bne.n	800ab00 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3308      	adds	r3, #8
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3e:	e853 3f00 	ldrex	r3, [r3]
 800ab42:	623b      	str	r3, [r7, #32]
   return(result);
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab4a:	663b      	str	r3, [r7, #96]	; 0x60
 800ab4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3308      	adds	r3, #8
 800ab52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab54:	633a      	str	r2, [r7, #48]	; 0x30
 800ab56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab5c:	e841 2300 	strex	r3, r2, [r1]
 800ab60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e5      	bne.n	800ab34 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d118      	bne.n	800aba8 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	e853 3f00 	ldrex	r3, [r3]
 800ab82:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f023 0310 	bic.w	r3, r3, #16
 800ab8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	461a      	mov	r2, r3
 800ab92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab94:	61fb      	str	r3, [r7, #28]
 800ab96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab98:	69b9      	ldr	r1, [r7, #24]
 800ab9a:	69fa      	ldr	r2, [r7, #28]
 800ab9c:	e841 2300 	strex	r3, r2, [r1]
 800aba0:	617b      	str	r3, [r7, #20]
   return(result);
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d1e6      	bne.n	800ab76 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abac:	2b01      	cmp	r3, #1
 800abae:	d107      	bne.n	800abc0 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800abb6:	4619      	mov	r1, r3
 800abb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abba:	f7ff fa01 	bl	8009fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abbe:	e002      	b.n	800abc6 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800abc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800abc2:	f7ff f9df 	bl	8009f84 <HAL_UART_RxCpltCallback>
}
 800abc6:	bf00      	nop
 800abc8:	3770      	adds	r7, #112	; 0x70
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abda:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d109      	bne.n	800abf8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800abea:	085b      	lsrs	r3, r3, #1
 800abec:	b29b      	uxth	r3, r3
 800abee:	4619      	mov	r1, r3
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7ff f9e5 	bl	8009fc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abf6:	e002      	b.n	800abfe <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff f9cd 	bl	8009f98 <HAL_UART_RxHalfCpltCallback>
}
 800abfe:	bf00      	nop
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b086      	sub	sp, #24
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac12:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ac18:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac1e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2a:	2b80      	cmp	r3, #128	; 0x80
 800ac2c:	d109      	bne.n	800ac42 <UART_DMAError+0x3c>
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	2b21      	cmp	r3, #33	; 0x21
 800ac32:	d106      	bne.n	800ac42 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ac3c:	6978      	ldr	r0, [r7, #20]
 800ac3e:	f7ff feab 	bl	800a998 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4c:	2b40      	cmp	r3, #64	; 0x40
 800ac4e:	d109      	bne.n	800ac64 <UART_DMAError+0x5e>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2b22      	cmp	r3, #34	; 0x22
 800ac54:	d106      	bne.n	800ac64 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ac5e:	6978      	ldr	r0, [r7, #20]
 800ac60:	f7ff fec0 	bl	800a9e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac6a:	f043 0210 	orr.w	r2, r3, #16
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac74:	6978      	ldr	r0, [r7, #20]
 800ac76:	f7ff f999 	bl	8009fac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac7a:	bf00      	nop
 800ac7c:	3718      	adds	r7, #24
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}
	...

0800ac84 <DataHist_parameters>:
 800ac84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ac8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ac8c:	7020      	strb	r0, [r4, #0]
 800ac8e:	6808      	ldr	r0, [r1, #0]
 800ac90:	6060      	str	r0, [r4, #4]
 800ac92:	6848      	ldr	r0, [r1, #4]
 800ac94:	60a0      	str	r0, [r4, #8]
 800ac96:	6888      	ldr	r0, [r1, #8]
 800ac98:	60e0      	str	r0, [r4, #12]
 800ac9a:	68c8      	ldr	r0, [r1, #12]
 800ac9c:	6120      	str	r0, [r4, #16]
 800ac9e:	6908      	ldr	r0, [r1, #16]
 800aca0:	6160      	str	r0, [r4, #20]
 800aca2:	6948      	ldr	r0, [r1, #20]
 800aca4:	61a0      	str	r0, [r4, #24]
 800aca6:	6988      	ldr	r0, [r1, #24]
 800aca8:	61e0      	str	r0, [r4, #28]
 800acaa:	69c8      	ldr	r0, [r1, #28]
 800acac:	6220      	str	r0, [r4, #32]
 800acae:	6a09      	ldr	r1, [r1, #32]
 800acb0:	6261      	str	r1, [r4, #36]	; 0x24
 800acb2:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800acb6:	8811      	ldrh	r1, [r2, #0]
 800acb8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800acbc:	8521      	strh	r1, [r4, #40]	; 0x28
 800acbe:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800acc2:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800acc6:	f04f 0e00 	mov.w	lr, #0
 800acca:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800acce:	4641      	mov	r1, r8
 800acd0:	f852 0b04 	ldr.w	r0, [r2], #4
 800acd4:	f841 0b04 	str.w	r0, [r1], #4
 800acd8:	4562      	cmp	r2, ip
 800acda:	d1f9      	bne.n	800acd0 <DataHist_parameters+0x4c>
 800acdc:	f10e 0e1e 	add.w	lr, lr, #30
 800ace0:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800ace4:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800ace8:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800acec:	d1ed      	bne.n	800acca <DataHist_parameters+0x46>
 800acee:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800acf2:	881a      	ldrh	r2, [r3, #0]
 800acf4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800acf8:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800acfc:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800ad00:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800ad04:	f04f 0c00 	mov.w	ip, #0
 800ad08:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800ad0c:	4672      	mov	r2, lr
 800ad0e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad12:	f842 1b04 	str.w	r1, [r2], #4
 800ad16:	4283      	cmp	r3, r0
 800ad18:	d1f9      	bne.n	800ad0e <DataHist_parameters+0x8a>
 800ad1a:	f10c 0c1e 	add.w	ip, ip, #30
 800ad1e:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800ad22:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800ad26:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800ad2a:	d1ed      	bne.n	800ad08 <DataHist_parameters+0x84>
 800ad2c:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800ad30:	883b      	ldrh	r3, [r7, #0]
 800ad32:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800ad36:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800ad3a:	3780      	adds	r7, #128	; 0x80
 800ad3c:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800ad40:	2000      	movs	r0, #0
 800ad42:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800ad46:	4662      	mov	r2, ip
 800ad48:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad4c:	f842 1b04 	str.w	r1, [r2], #4
 800ad50:	42bb      	cmp	r3, r7
 800ad52:	d1f9      	bne.n	800ad48 <DataHist_parameters+0xc4>
 800ad54:	301e      	adds	r0, #30
 800ad56:	285a      	cmp	r0, #90	; 0x5a
 800ad58:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800ad5c:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800ad60:	d1ef      	bne.n	800ad42 <DataHist_parameters+0xbe>
 800ad62:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800ad66:	8833      	ldrh	r3, [r6, #0]
 800ad68:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800ad6c:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800ad70:	3680      	adds	r6, #128	; 0x80
 800ad72:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800ad76:	2000      	movs	r0, #0
 800ad78:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800ad7c:	463a      	mov	r2, r7
 800ad7e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ad82:	f842 1b04 	str.w	r1, [r2], #4
 800ad86:	429e      	cmp	r6, r3
 800ad88:	d1f9      	bne.n	800ad7e <DataHist_parameters+0xfa>
 800ad8a:	301e      	adds	r0, #30
 800ad8c:	285a      	cmp	r0, #90	; 0x5a
 800ad8e:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800ad92:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800ad96:	d1ef      	bne.n	800ad78 <DataHist_parameters+0xf4>
 800ad98:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800ad9c:	69aa      	ldr	r2, [r5, #24]
 800ad9e:	f8c3 c004 	str.w	ip, [r3, #4]
 800ada2:	782b      	ldrb	r3, [r5, #0]
 800ada4:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800ada8:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800adac:	619a      	str	r2, [r3, #24]
 800adae:	686a      	ldr	r2, [r5, #4]
 800adb0:	605a      	str	r2, [r3, #4]
 800adb2:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800adb6:	68a9      	ldr	r1, [r5, #8]
 800adb8:	6011      	str	r1, [r2, #0]
 800adba:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800adbe:	68e9      	ldr	r1, [r5, #12]
 800adc0:	6011      	str	r1, [r2, #0]
 800adc2:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800adc6:	6929      	ldr	r1, [r5, #16]
 800adc8:	6011      	str	r1, [r2, #0]
 800adca:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800adce:	6969      	ldr	r1, [r5, #20]
 800add0:	6011      	str	r1, [r2, #0]
 800add2:	69ea      	ldr	r2, [r5, #28]
 800add4:	61da      	str	r2, [r3, #28]
 800add6:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800adda:	6a2a      	ldr	r2, [r5, #32]
 800addc:	601a      	str	r2, [r3, #0]
 800adde:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800ade2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800adea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800adec:	601a      	str	r2, [r3, #0]
 800adee:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800adf2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adfa:	bf00      	nop

0800adfc <rotVect>:
 800adfc:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800ae00:	ed92 5a01 	vldr	s10, [r2, #4]
 800ae04:	edd2 5a00 	vldr	s11, [r2]
 800ae08:	ed92 6a02 	vldr	s12, [r2, #8]
 800ae0c:	ee07 3a90 	vmov	s15, r3
 800ae10:	f991 3000 	ldrsb.w	r3, [r1]
 800ae14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae18:	ee06 3a90 	vmov	s13, r3
 800ae1c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ae20:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800ae24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ae28:	ee07 3a10 	vmov	s14, r3
 800ae2c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800ae30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae34:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ae38:	edc0 7a00 	vstr	s15, [r0]
 800ae3c:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800ae40:	ed92 5a01 	vldr	s10, [r2, #4]
 800ae44:	edd2 5a00 	vldr	s11, [r2]
 800ae48:	ed92 6a02 	vldr	s12, [r2, #8]
 800ae4c:	ee07 3a90 	vmov	s15, r3
 800ae50:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800ae54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae58:	ee06 3a90 	vmov	s13, r3
 800ae5c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ae60:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800ae64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ae68:	ee07 3a10 	vmov	s14, r3
 800ae6c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800ae70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ae74:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ae78:	edc0 7a01 	vstr	s15, [r0, #4]
 800ae7c:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800ae80:	ed92 5a01 	vldr	s10, [r2, #4]
 800ae84:	edd2 5a00 	vldr	s11, [r2]
 800ae88:	ed92 6a02 	vldr	s12, [r2, #8]
 800ae8c:	ee07 3a90 	vmov	s15, r3
 800ae90:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800ae94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ae98:	ee06 3a90 	vmov	s13, r3
 800ae9c:	ee67 7a85 	vmul.f32	s15, s15, s10
 800aea0:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800aea4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800aea8:	ee07 3a10 	vmov	s14, r3
 800aeac:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800aeb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800aeb4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800aeb8:	edc0 7a02 	vstr	s15, [r0, #8]
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop

0800aec0 <findAxis>:
 800aec0:	f990 3000 	ldrsb.w	r3, [r0]
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d027      	beq.n	800af18 <findAxis+0x58>
 800aec8:	3301      	adds	r3, #1
 800aeca:	d00e      	beq.n	800aeea <findAxis+0x2a>
 800aecc:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d053      	beq.n	800af7c <findAxis+0xbc>
 800aed4:	3301      	adds	r3, #1
 800aed6:	d048      	beq.n	800af6a <findAxis+0xaa>
 800aed8:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d053      	beq.n	800af88 <findAxis+0xc8>
 800aee0:	3301      	adds	r3, #1
 800aee2:	d104      	bne.n	800aeee <findAxis+0x2e>
 800aee4:	2364      	movs	r3, #100	; 0x64
 800aee6:	700b      	strb	r3, [r1, #0]
 800aee8:	e001      	b.n	800aeee <findAxis+0x2e>
 800aeea:	2377      	movs	r3, #119	; 0x77
 800aeec:	700b      	strb	r3, [r1, #0]
 800aeee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d016      	beq.n	800af24 <findAxis+0x64>
 800aef6:	3301      	adds	r3, #1
 800aef8:	d02e      	beq.n	800af58 <findAxis+0x98>
 800aefa:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d039      	beq.n	800af76 <findAxis+0xb6>
 800af02:	3301      	adds	r3, #1
 800af04:	d034      	beq.n	800af70 <findAxis+0xb0>
 800af06:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d03f      	beq.n	800af8e <findAxis+0xce>
 800af0e:	3301      	adds	r3, #1
 800af10:	d10a      	bne.n	800af28 <findAxis+0x68>
 800af12:	2364      	movs	r3, #100	; 0x64
 800af14:	704b      	strb	r3, [r1, #1]
 800af16:	e007      	b.n	800af28 <findAxis+0x68>
 800af18:	2365      	movs	r3, #101	; 0x65
 800af1a:	700b      	strb	r3, [r1, #0]
 800af1c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d1e8      	bne.n	800aef6 <findAxis+0x36>
 800af24:	2365      	movs	r3, #101	; 0x65
 800af26:	704b      	strb	r3, [r1, #1]
 800af28:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d010      	beq.n	800af52 <findAxis+0x92>
 800af30:	3301      	adds	r3, #1
 800af32:	d014      	beq.n	800af5e <findAxis+0x9e>
 800af34:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d022      	beq.n	800af82 <findAxis+0xc2>
 800af3c:	3301      	adds	r3, #1
 800af3e:	d011      	beq.n	800af64 <findAxis+0xa4>
 800af40:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d025      	beq.n	800af94 <findAxis+0xd4>
 800af48:	3301      	adds	r3, #1
 800af4a:	bf04      	itt	eq
 800af4c:	2364      	moveq	r3, #100	; 0x64
 800af4e:	708b      	strbeq	r3, [r1, #2]
 800af50:	4770      	bx	lr
 800af52:	2365      	movs	r3, #101	; 0x65
 800af54:	708b      	strb	r3, [r1, #2]
 800af56:	4770      	bx	lr
 800af58:	2377      	movs	r3, #119	; 0x77
 800af5a:	704b      	strb	r3, [r1, #1]
 800af5c:	e7e4      	b.n	800af28 <findAxis+0x68>
 800af5e:	2377      	movs	r3, #119	; 0x77
 800af60:	708b      	strb	r3, [r1, #2]
 800af62:	4770      	bx	lr
 800af64:	2373      	movs	r3, #115	; 0x73
 800af66:	708b      	strb	r3, [r1, #2]
 800af68:	4770      	bx	lr
 800af6a:	2373      	movs	r3, #115	; 0x73
 800af6c:	700b      	strb	r3, [r1, #0]
 800af6e:	e7be      	b.n	800aeee <findAxis+0x2e>
 800af70:	2373      	movs	r3, #115	; 0x73
 800af72:	704b      	strb	r3, [r1, #1]
 800af74:	e7d8      	b.n	800af28 <findAxis+0x68>
 800af76:	236e      	movs	r3, #110	; 0x6e
 800af78:	704b      	strb	r3, [r1, #1]
 800af7a:	e7d5      	b.n	800af28 <findAxis+0x68>
 800af7c:	236e      	movs	r3, #110	; 0x6e
 800af7e:	700b      	strb	r3, [r1, #0]
 800af80:	e7b5      	b.n	800aeee <findAxis+0x2e>
 800af82:	236e      	movs	r3, #110	; 0x6e
 800af84:	708b      	strb	r3, [r1, #2]
 800af86:	4770      	bx	lr
 800af88:	2375      	movs	r3, #117	; 0x75
 800af8a:	700b      	strb	r3, [r1, #0]
 800af8c:	e7af      	b.n	800aeee <findAxis+0x2e>
 800af8e:	2375      	movs	r3, #117	; 0x75
 800af90:	704b      	strb	r3, [r1, #1]
 800af92:	e7c9      	b.n	800af28 <findAxis+0x68>
 800af94:	2375      	movs	r3, #117	; 0x75
 800af96:	708b      	strb	r3, [r1, #2]
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	0000      	movs	r0, r0
	...

0800afa0 <findDirection>:
 800afa0:	b5d0      	push	{r4, r6, r7, lr}
 800afa2:	ed2d 8b04 	vpush	{d8-d9}
 800afa6:	eef0 8ac0 	vabs.f32	s17, s0
 800afaa:	eeb0 8ae0 	vabs.f32	s16, s1
 800afae:	eef4 8ac8 	vcmpe.f32	s17, s16
 800afb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb6:	4604      	mov	r4, r0
 800afb8:	eeb0 9ac1 	vabs.f32	s18, s2
 800afbc:	dd36      	ble.n	800b02c <findDirection+0x8c>
 800afbe:	eef4 8ac9 	vcmpe.f32	s17, s18
 800afc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc6:	dd31      	ble.n	800b02c <findDirection+0x8c>
 800afc8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800afcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd0:	ee18 0a90 	vmov	r0, s17
 800afd4:	f340 8094 	ble.w	800b100 <findDirection+0x160>
 800afd8:	f7f5 fab6 	bl	8000548 <__aeabi_f2d>
 800afdc:	4606      	mov	r6, r0
 800afde:	ee18 0a10 	vmov	r0, s16
 800afe2:	460f      	mov	r7, r1
 800afe4:	f7f5 fab0 	bl	8000548 <__aeabi_f2d>
 800afe8:	a387      	add	r3, pc, #540	; (adr r3, 800b208 <findDirection+0x268>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	f7f5 fb03 	bl	80005f8 <__aeabi_dmul>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	4630      	mov	r0, r6
 800aff8:	4639      	mov	r1, r7
 800affa:	f7f5 fd8d 	bl	8000b18 <__aeabi_dcmpgt>
 800affe:	b188      	cbz	r0, 800b024 <findDirection+0x84>
 800b000:	ee19 0a10 	vmov	r0, s18
 800b004:	f7f5 faa0 	bl	8000548 <__aeabi_f2d>
 800b008:	a37f      	add	r3, pc, #508	; (adr r3, 800b208 <findDirection+0x268>)
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f7f5 faf3 	bl	80005f8 <__aeabi_dmul>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	4630      	mov	r0, r6
 800b018:	4639      	mov	r1, r7
 800b01a:	f7f5 fd7d 	bl	8000b18 <__aeabi_dcmpgt>
 800b01e:	2800      	cmp	r0, #0
 800b020:	bf18      	it	ne
 800b022:	2404      	movne	r4, #4
 800b024:	ecbd 8b04 	vpop	{d8-d9}
 800b028:	4620      	mov	r0, r4
 800b02a:	bdd0      	pop	{r4, r6, r7, pc}
 800b02c:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800b030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b034:	dd32      	ble.n	800b09c <findDirection+0xfc>
 800b036:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800b03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b03e:	ee18 0a10 	vmov	r0, s16
 800b042:	f340 8086 	ble.w	800b152 <findDirection+0x1b2>
 800b046:	f7f5 fa7f 	bl	8000548 <__aeabi_f2d>
 800b04a:	4606      	mov	r6, r0
 800b04c:	ee18 0a90 	vmov	r0, s17
 800b050:	460f      	mov	r7, r1
 800b052:	f7f5 fa79 	bl	8000548 <__aeabi_f2d>
 800b056:	a36c      	add	r3, pc, #432	; (adr r3, 800b208 <findDirection+0x268>)
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	f7f5 facc 	bl	80005f8 <__aeabi_dmul>
 800b060:	4602      	mov	r2, r0
 800b062:	460b      	mov	r3, r1
 800b064:	4630      	mov	r0, r6
 800b066:	4639      	mov	r1, r7
 800b068:	f7f5 fd56 	bl	8000b18 <__aeabi_dcmpgt>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	d0d9      	beq.n	800b024 <findDirection+0x84>
 800b070:	ee19 0a10 	vmov	r0, s18
 800b074:	f7f5 fa68 	bl	8000548 <__aeabi_f2d>
 800b078:	a363      	add	r3, pc, #396	; (adr r3, 800b208 <findDirection+0x268>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	f7f5 fabb 	bl	80005f8 <__aeabi_dmul>
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	4630      	mov	r0, r6
 800b088:	4639      	mov	r1, r7
 800b08a:	f7f5 fd45 	bl	8000b18 <__aeabi_dcmpgt>
 800b08e:	ecbd 8b04 	vpop	{d8-d9}
 800b092:	2800      	cmp	r0, #0
 800b094:	bf18      	it	ne
 800b096:	2401      	movne	r4, #1
 800b098:	4620      	mov	r0, r4
 800b09a:	bdd0      	pop	{r4, r6, r7, pc}
 800b09c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a4:	ee19 0a10 	vmov	r0, s18
 800b0a8:	dd7f      	ble.n	800b1aa <findDirection+0x20a>
 800b0aa:	f7f5 fa4d 	bl	8000548 <__aeabi_f2d>
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	ee18 0a10 	vmov	r0, s16
 800b0b4:	460f      	mov	r7, r1
 800b0b6:	f7f5 fa47 	bl	8000548 <__aeabi_f2d>
 800b0ba:	a353      	add	r3, pc, #332	; (adr r3, 800b208 <findDirection+0x268>)
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	f7f5 fa9a 	bl	80005f8 <__aeabi_dmul>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	f7f5 fd24 	bl	8000b18 <__aeabi_dcmpgt>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d0a7      	beq.n	800b024 <findDirection+0x84>
 800b0d4:	ee18 0a90 	vmov	r0, s17
 800b0d8:	f7f5 fa36 	bl	8000548 <__aeabi_f2d>
 800b0dc:	a34a      	add	r3, pc, #296	; (adr r3, 800b208 <findDirection+0x268>)
 800b0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e2:	f7f5 fa89 	bl	80005f8 <__aeabi_dmul>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	f7f5 fd13 	bl	8000b18 <__aeabi_dcmpgt>
 800b0f2:	ecbd 8b04 	vpop	{d8-d9}
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	bf18      	it	ne
 800b0fa:	2400      	movne	r4, #0
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	bdd0      	pop	{r4, r6, r7, pc}
 800b100:	f7f5 fa22 	bl	8000548 <__aeabi_f2d>
 800b104:	4606      	mov	r6, r0
 800b106:	ee18 0a10 	vmov	r0, s16
 800b10a:	460f      	mov	r7, r1
 800b10c:	f7f5 fa1c 	bl	8000548 <__aeabi_f2d>
 800b110:	a33d      	add	r3, pc, #244	; (adr r3, 800b208 <findDirection+0x268>)
 800b112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b116:	f7f5 fa6f 	bl	80005f8 <__aeabi_dmul>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	4630      	mov	r0, r6
 800b120:	4639      	mov	r1, r7
 800b122:	f7f5 fcf9 	bl	8000b18 <__aeabi_dcmpgt>
 800b126:	2800      	cmp	r0, #0
 800b128:	f43f af7c 	beq.w	800b024 <findDirection+0x84>
 800b12c:	ee19 0a10 	vmov	r0, s18
 800b130:	f7f5 fa0a 	bl	8000548 <__aeabi_f2d>
 800b134:	a334      	add	r3, pc, #208	; (adr r3, 800b208 <findDirection+0x268>)
 800b136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13a:	f7f5 fa5d 	bl	80005f8 <__aeabi_dmul>
 800b13e:	4602      	mov	r2, r0
 800b140:	460b      	mov	r3, r1
 800b142:	4630      	mov	r0, r6
 800b144:	4639      	mov	r1, r7
 800b146:	f7f5 fce7 	bl	8000b18 <__aeabi_dcmpgt>
 800b14a:	2800      	cmp	r0, #0
 800b14c:	bf18      	it	ne
 800b14e:	2405      	movne	r4, #5
 800b150:	e768      	b.n	800b024 <findDirection+0x84>
 800b152:	f7f5 f9f9 	bl	8000548 <__aeabi_f2d>
 800b156:	4606      	mov	r6, r0
 800b158:	ee18 0a90 	vmov	r0, s17
 800b15c:	460f      	mov	r7, r1
 800b15e:	f7f5 f9f3 	bl	8000548 <__aeabi_f2d>
 800b162:	a329      	add	r3, pc, #164	; (adr r3, 800b208 <findDirection+0x268>)
 800b164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b168:	f7f5 fa46 	bl	80005f8 <__aeabi_dmul>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	4630      	mov	r0, r6
 800b172:	4639      	mov	r1, r7
 800b174:	f7f5 fcd0 	bl	8000b18 <__aeabi_dcmpgt>
 800b178:	2800      	cmp	r0, #0
 800b17a:	f43f af53 	beq.w	800b024 <findDirection+0x84>
 800b17e:	ee19 0a10 	vmov	r0, s18
 800b182:	f7f5 f9e1 	bl	8000548 <__aeabi_f2d>
 800b186:	a320      	add	r3, pc, #128	; (adr r3, 800b208 <findDirection+0x268>)
 800b188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18c:	f7f5 fa34 	bl	80005f8 <__aeabi_dmul>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 fcbe 	bl	8000b18 <__aeabi_dcmpgt>
 800b19c:	ecbd 8b04 	vpop	{d8-d9}
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	bf18      	it	ne
 800b1a4:	2403      	movne	r4, #3
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	bdd0      	pop	{r4, r6, r7, pc}
 800b1aa:	f7f5 f9cd 	bl	8000548 <__aeabi_f2d>
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	ee18 0a10 	vmov	r0, s16
 800b1b4:	460f      	mov	r7, r1
 800b1b6:	f7f5 f9c7 	bl	8000548 <__aeabi_f2d>
 800b1ba:	a313      	add	r3, pc, #76	; (adr r3, 800b208 <findDirection+0x268>)
 800b1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c0:	f7f5 fa1a 	bl	80005f8 <__aeabi_dmul>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	f7f5 fca4 	bl	8000b18 <__aeabi_dcmpgt>
 800b1d0:	2800      	cmp	r0, #0
 800b1d2:	f43f af27 	beq.w	800b024 <findDirection+0x84>
 800b1d6:	ee18 0a90 	vmov	r0, s17
 800b1da:	f7f5 f9b5 	bl	8000548 <__aeabi_f2d>
 800b1de:	a30a      	add	r3, pc, #40	; (adr r3, 800b208 <findDirection+0x268>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f7f5 fa08 	bl	80005f8 <__aeabi_dmul>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	4639      	mov	r1, r7
 800b1f0:	f7f5 fc92 	bl	8000b18 <__aeabi_dcmpgt>
 800b1f4:	ecbd 8b04 	vpop	{d8-d9}
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	bf18      	it	ne
 800b1fc:	2402      	movne	r4, #2
 800b1fe:	4620      	mov	r0, r4
 800b200:	bdd0      	pop	{r4, r6, r7, pc}
 800b202:	bf00      	nop
 800b204:	f3af 8000 	nop.w
 800b208:	e0000000 	.word	0xe0000000
 800b20c:	3ff6b851 	.word	0x3ff6b851

0800b210 <updateOrientation>:
 800b210:	b410      	push	{r4}
 800b212:	2300      	movs	r3, #0
 800b214:	6003      	str	r3, [r0, #0]
 800b216:	6043      	str	r3, [r0, #4]
 800b218:	7203      	strb	r3, [r0, #8]
 800b21a:	780c      	ldrb	r4, [r1, #0]
 800b21c:	784a      	ldrb	r2, [r1, #1]
 800b21e:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b222:	2b17      	cmp	r3, #23
 800b224:	bf98      	it	ls
 800b226:	3420      	addls	r4, #32
 800b228:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b22c:	bf98      	it	ls
 800b22e:	b2e4      	uxtbls	r4, r4
 800b230:	2b17      	cmp	r3, #23
 800b232:	788b      	ldrb	r3, [r1, #2]
 800b234:	bf98      	it	ls
 800b236:	3220      	addls	r2, #32
 800b238:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b23c:	bf98      	it	ls
 800b23e:	b2d2      	uxtbls	r2, r2
 800b240:	2917      	cmp	r1, #23
 800b242:	bf98      	it	ls
 800b244:	3320      	addls	r3, #32
 800b246:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b24a:	bf98      	it	ls
 800b24c:	b2db      	uxtbls	r3, r3
 800b24e:	2c13      	cmp	r4, #19
 800b250:	d80d      	bhi.n	800b26e <updateOrientation+0x5e>
 800b252:	e8df f004 	tbb	[pc, r4]
 800b256:	0a36      	.short	0x0a36
 800b258:	0c0c0c0c 	.word	0x0c0c0c0c
 800b25c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b260:	0c0c0c39 	.word	0x0c0c0c39
 800b264:	3f0c3c0c 	.word	0x3f0c3c0c
 800b268:	420c      	.short	0x420c
 800b26a:	2101      	movs	r1, #1
 800b26c:	7001      	strb	r1, [r0, #0]
 800b26e:	3a64      	subs	r2, #100	; 0x64
 800b270:	2a13      	cmp	r2, #19
 800b272:	d80d      	bhi.n	800b290 <updateOrientation+0x80>
 800b274:	e8df f002 	tbb	[pc, r2]
 800b278:	0c0c0a34 	.word	0x0c0c0a34
 800b27c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b280:	0c370c0c 	.word	0x0c370c0c
 800b284:	3a0c0c0c 	.word	0x3a0c0c0c
 800b288:	400c3d0c 	.word	0x400c3d0c
 800b28c:	2201      	movs	r2, #1
 800b28e:	7042      	strb	r2, [r0, #1]
 800b290:	3b64      	subs	r3, #100	; 0x64
 800b292:	2b13      	cmp	r3, #19
 800b294:	d80d      	bhi.n	800b2b2 <updateOrientation+0xa2>
 800b296:	e8df f003 	tbb	[pc, r3]
 800b29a:	320a      	.short	0x320a
 800b29c:	0c0c0c0c 	.word	0x0c0c0c0c
 800b2a0:	0c0c0c0c 	.word	0x0c0c0c0c
 800b2a4:	0c0c0c37 	.word	0x0c0c0c37
 800b2a8:	410c3c0c 	.word	0x410c3c0c
 800b2ac:	0f0c      	.short	0x0f0c
 800b2ae:	23ff      	movs	r3, #255	; 0xff
 800b2b0:	7203      	strb	r3, [r0, #8]
 800b2b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2b6:	4770      	bx	lr
 800b2b8:	23ff      	movs	r3, #255	; 0xff
 800b2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2be:	7083      	strb	r3, [r0, #2]
 800b2c0:	4770      	bx	lr
 800b2c2:	21ff      	movs	r1, #255	; 0xff
 800b2c4:	7181      	strb	r1, [r0, #6]
 800b2c6:	e7d2      	b.n	800b26e <updateOrientation+0x5e>
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	70c1      	strb	r1, [r0, #3]
 800b2cc:	e7cf      	b.n	800b26e <updateOrientation+0x5e>
 800b2ce:	21ff      	movs	r1, #255	; 0xff
 800b2d0:	70c1      	strb	r1, [r0, #3]
 800b2d2:	e7cc      	b.n	800b26e <updateOrientation+0x5e>
 800b2d4:	2101      	movs	r1, #1
 800b2d6:	7181      	strb	r1, [r0, #6]
 800b2d8:	e7c9      	b.n	800b26e <updateOrientation+0x5e>
 800b2da:	21ff      	movs	r1, #255	; 0xff
 800b2dc:	7001      	strb	r1, [r0, #0]
 800b2de:	e7c6      	b.n	800b26e <updateOrientation+0x5e>
 800b2e0:	22ff      	movs	r2, #255	; 0xff
 800b2e2:	71c2      	strb	r2, [r0, #7]
 800b2e4:	e7d4      	b.n	800b290 <updateOrientation+0x80>
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	7102      	strb	r2, [r0, #4]
 800b2ea:	e7d1      	b.n	800b290 <updateOrientation+0x80>
 800b2ec:	22ff      	movs	r2, #255	; 0xff
 800b2ee:	7102      	strb	r2, [r0, #4]
 800b2f0:	e7ce      	b.n	800b290 <updateOrientation+0x80>
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	71c2      	strb	r2, [r0, #7]
 800b2f6:	e7cb      	b.n	800b290 <updateOrientation+0x80>
 800b2f8:	22ff      	movs	r2, #255	; 0xff
 800b2fa:	7042      	strb	r2, [r0, #1]
 800b2fc:	e7c8      	b.n	800b290 <updateOrientation+0x80>
 800b2fe:	2301      	movs	r3, #1
 800b300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b304:	7083      	strb	r3, [r0, #2]
 800b306:	4770      	bx	lr
 800b308:	2301      	movs	r3, #1
 800b30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b30e:	7143      	strb	r3, [r0, #5]
 800b310:	4770      	bx	lr
 800b312:	23ff      	movs	r3, #255	; 0xff
 800b314:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b318:	7143      	strb	r3, [r0, #5]
 800b31a:	4770      	bx	lr
 800b31c:	2301      	movs	r3, #1
 800b31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b322:	7203      	strb	r3, [r0, #8]
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop

0800b328 <qmult>:
 800b328:	ed91 2a03 	vldr	s4, [r1, #12]
 800b32c:	ed90 3a01 	vldr	s6, [r0, #4]
 800b330:	edd0 5a02 	vldr	s11, [r0, #8]
 800b334:	edd1 4a01 	vldr	s9, [r1, #4]
 800b338:	ed90 4a00 	vldr	s8, [r0]
 800b33c:	edd1 3a00 	vldr	s7, [r1]
 800b340:	ed91 5a02 	vldr	s10, [r1, #8]
 800b344:	edd0 2a03 	vldr	s5, [r0, #12]
 800b348:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800b34c:	ee62 6a03 	vmul.f32	s13, s4, s6
 800b350:	ee22 7a25 	vmul.f32	s14, s4, s11
 800b354:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800b358:	eea4 6a02 	vfma.f32	s12, s8, s4
 800b35c:	eee4 6a05 	vfma.f32	s13, s8, s10
 800b360:	eea3 7a23 	vfma.f32	s14, s6, s7
 800b364:	eee4 7a63 	vfms.f32	s15, s8, s7
 800b368:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800b36c:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800b370:	eea5 7a22 	vfma.f32	s14, s10, s5
 800b374:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b378:	eea3 6a45 	vfms.f32	s12, s6, s10
 800b37c:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800b380:	eea4 7a64 	vfms.f32	s14, s8, s9
 800b384:	eee5 7a65 	vfms.f32	s15, s10, s11
 800b388:	ed82 6a00 	vstr	s12, [r2]
 800b38c:	edc2 6a01 	vstr	s13, [r2, #4]
 800b390:	ed82 7a02 	vstr	s14, [r2, #8]
 800b394:	edc2 7a03 	vstr	s15, [r2, #12]
 800b398:	4770      	bx	lr
 800b39a:	bf00      	nop

0800b39c <MEMS_setMagIndexToOne>:
 800b39c:	291f      	cmp	r1, #31
 800b39e:	b430      	push	{r4, r5}
 800b3a0:	d920      	bls.n	800b3e4 <MEMS_setMagIndexToOne+0x48>
 800b3a2:	6885      	ldr	r5, [r0, #8]
 800b3a4:	3920      	subs	r1, #32
 800b3a6:	2401      	movs	r4, #1
 800b3a8:	fa04 f101 	lsl.w	r1, r4, r1
 800b3ac:	ea21 0105 	bic.w	r1, r1, r5
 800b3b0:	4069      	eors	r1, r5
 800b3b2:	2a1f      	cmp	r2, #31
 800b3b4:	6081      	str	r1, [r0, #8]
 800b3b6:	d91f      	bls.n	800b3f8 <MEMS_setMagIndexToOne+0x5c>
 800b3b8:	6901      	ldr	r1, [r0, #16]
 800b3ba:	f1a2 0420 	sub.w	r4, r2, #32
 800b3be:	2201      	movs	r2, #1
 800b3c0:	40a2      	lsls	r2, r4
 800b3c2:	ea22 0201 	bic.w	r2, r2, r1
 800b3c6:	404a      	eors	r2, r1
 800b3c8:	2b1f      	cmp	r3, #31
 800b3ca:	6102      	str	r2, [r0, #16]
 800b3cc:	d91e      	bls.n	800b40c <MEMS_setMagIndexToOne+0x70>
 800b3ce:	69c2      	ldr	r2, [r0, #28]
 800b3d0:	f1a3 0120 	sub.w	r1, r3, #32
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	408b      	lsls	r3, r1
 800b3d8:	ea23 0302 	bic.w	r3, r3, r2
 800b3dc:	4053      	eors	r3, r2
 800b3de:	bc30      	pop	{r4, r5}
 800b3e0:	61c3      	str	r3, [r0, #28]
 800b3e2:	4770      	bx	lr
 800b3e4:	68c5      	ldr	r5, [r0, #12]
 800b3e6:	2401      	movs	r4, #1
 800b3e8:	fa04 f101 	lsl.w	r1, r4, r1
 800b3ec:	ea21 0105 	bic.w	r1, r1, r5
 800b3f0:	4069      	eors	r1, r5
 800b3f2:	2a1f      	cmp	r2, #31
 800b3f4:	60c1      	str	r1, [r0, #12]
 800b3f6:	d8df      	bhi.n	800b3b8 <MEMS_setMagIndexToOne+0x1c>
 800b3f8:	6944      	ldr	r4, [r0, #20]
 800b3fa:	2101      	movs	r1, #1
 800b3fc:	fa01 f202 	lsl.w	r2, r1, r2
 800b400:	ea22 0204 	bic.w	r2, r2, r4
 800b404:	4062      	eors	r2, r4
 800b406:	2b1f      	cmp	r3, #31
 800b408:	6142      	str	r2, [r0, #20]
 800b40a:	d8e0      	bhi.n	800b3ce <MEMS_setMagIndexToOne+0x32>
 800b40c:	6981      	ldr	r1, [r0, #24]
 800b40e:	2201      	movs	r2, #1
 800b410:	fa02 f303 	lsl.w	r3, r2, r3
 800b414:	ea23 0301 	bic.w	r3, r3, r1
 800b418:	404b      	eors	r3, r1
 800b41a:	bc30      	pop	{r4, r5}
 800b41c:	6183      	str	r3, [r0, #24]
 800b41e:	4770      	bx	lr

0800b420 <getRotationMatrix>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4605      	mov	r5, r0
 800b424:	460c      	mov	r4, r1
 800b426:	4610      	mov	r0, r2
 800b428:	2100      	movs	r1, #0
 800b42a:	2224      	movs	r2, #36	; 0x24
 800b42c:	f00b fdf4 	bl	8017018 <memset>
 800b430:	edd5 5a00 	vldr	s11, [r5]
 800b434:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800b55c <getRotationMatrix+0x13c>
 800b438:	edc0 5a02 	vstr	s11, [r0, #8]
 800b43c:	ed95 7a01 	vldr	s14, [r5, #4]
 800b440:	ed80 7a05 	vstr	s14, [r0, #20]
 800b444:	ed95 5a02 	vldr	s10, [r5, #8]
 800b448:	ed80 5a08 	vstr	s10, [r0, #32]
 800b44c:	ed94 4a02 	vldr	s8, [r4, #8]
 800b450:	edd4 3a01 	vldr	s7, [r4, #4]
 800b454:	edd4 4a00 	vldr	s9, [r4]
 800b458:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800b45c:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800b460:	eee3 7a85 	vfma.f32	s15, s7, s10
 800b464:	4603      	mov	r3, r0
 800b466:	eee4 6a87 	vfma.f32	s13, s9, s14
 800b46a:	eeb0 7ae7 	vabs.f32	s14, s15
 800b46e:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800b472:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800b476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47a:	eea4 6a25 	vfma.f32	s12, s8, s11
 800b47e:	bfdc      	itt	le
 800b480:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800b484:	eeb0 7a43 	vmovle.f32	s14, s6
 800b488:	eeb0 5ac6 	vabs.f32	s10, s12
 800b48c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b490:	edc0 6a06 	vstr	s13, [r0, #24]
 800b494:	bfd4      	ite	le
 800b496:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800b49a:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800b49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4a2:	ed80 6a03 	vstr	s12, [r0, #12]
 800b4a6:	edc0 7a00 	vstr	s15, [r0]
 800b4aa:	d447      	bmi.n	800b53c <getRotationMatrix+0x11c>
 800b4ac:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800b4b0:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800b4b4:	eef0 5a66 	vmov.f32	s11, s13
 800b4b8:	edd3 6a06 	vldr	s13, [r3, #24]
 800b4bc:	eeb0 5ae6 	vabs.f32	s10, s13
 800b4c0:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c8:	d543      	bpl.n	800b552 <getRotationMatrix+0x132>
 800b4ca:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b4ce:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800b4d2:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b4d6:	eeb0 7a45 	vmov.f32	s14, s10
 800b4da:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800b4de:	eef0 5a44 	vmov.f32	s11, s8
 800b4e2:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800b4e6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800b4ea:	ee65 5a07 	vmul.f32	s11, s10, s14
 800b4ee:	edd3 3a08 	vldr	s7, [r3, #32]
 800b4f2:	edd3 4a02 	vldr	s9, [r3, #8]
 800b4f6:	ed93 4a05 	vldr	s8, [r3, #20]
 800b4fa:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800b4fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b502:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b506:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b50a:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800b50e:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800b512:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800b516:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800b51a:	eee4 5a07 	vfma.f32	s11, s8, s14
 800b51e:	eee6 6a24 	vfma.f32	s13, s12, s9
 800b522:	edc3 7a00 	vstr	s15, [r3]
 800b526:	ed83 6a03 	vstr	s12, [r3, #12]
 800b52a:	ed83 7a06 	vstr	s14, [r3, #24]
 800b52e:	ed83 5a04 	vstr	s10, [r3, #16]
 800b532:	edc3 5a01 	vstr	s11, [r3, #4]
 800b536:	edc3 6a07 	vstr	s13, [r3, #28]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b540:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b544:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b548:	eeb0 7a45 	vmov.f32	s14, s10
 800b54c:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800b550:	e7b2      	b.n	800b4b8 <getRotationMatrix+0x98>
 800b552:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800b556:	eee5 5a05 	vfma.f32	s11, s10, s10
 800b55a:	e7c2      	b.n	800b4e2 <getRotationMatrix+0xc2>
 800b55c:	00000000 	.word	0x00000000

0800b560 <b_dcm2q>:
 800b560:	ed90 5a08 	vldr	s10, [r0, #32]
 800b564:	edd0 7a00 	vldr	s15, [r0]
 800b568:	edd0 6a04 	vldr	s13, [r0, #16]
 800b56c:	ee37 7a85 	vadd.f32	s14, s15, s10
 800b570:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800b574:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b578:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800b57c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800b580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b584:	bfc5      	ittet	gt
 800b586:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800b58a:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800b58e:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800b69c <b_dcm2q+0x13c>
 800b592:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800b596:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800b59a:	ee35 6a47 	vsub.f32	s12, s10, s14
 800b59e:	ee35 7a07 	vadd.f32	s14, s10, s14
 800b5a2:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800b5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5aa:	bfc5      	ittet	gt
 800b5ac:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800b5b0:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800b5b4:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800b69c <b_dcm2q+0x13c>
 800b5b8:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800b5bc:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800b5c0:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800b5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c8:	dd5b      	ble.n	800b682 <b_dcm2q+0x122>
 800b5ca:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800b5ce:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b5d2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800b5d6:	eef1 4ac7 	vsqrt.f32	s9, s14
 800b5da:	ee64 4a84 	vmul.f32	s9, s9, s8
 800b5de:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b5e2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b5e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b5ea:	edd0 6a07 	vldr	s13, [r0, #28]
 800b5ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f6:	bf85      	ittet	hi
 800b5f8:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800b5fc:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800b600:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800b69c <b_dcm2q+0x13c>
 800b604:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800b608:	edd0 7a05 	vldr	s15, [r0, #20]
 800b60c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b610:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b618:	d43c      	bmi.n	800b694 <b_dcm2q+0x134>
 800b61a:	bfd8      	it	le
 800b61c:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800b620:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b624:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b628:	ed81 7a00 	vstr	s14, [r1]
 800b62c:	edd0 7a06 	vldr	s15, [r0, #24]
 800b630:	ed90 7a02 	vldr	s14, [r0, #8]
 800b634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b638:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b640:	d425      	bmi.n	800b68e <b_dcm2q+0x12e>
 800b642:	bfd8      	it	le
 800b644:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800b648:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b64c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800b650:	edc1 5a01 	vstr	s11, [r1, #4]
 800b654:	edd0 7a01 	vldr	s15, [r0, #4]
 800b658:	ed90 7a03 	vldr	s14, [r0, #12]
 800b65c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b668:	d40e      	bmi.n	800b688 <b_dcm2q+0x128>
 800b66a:	bfd8      	it	le
 800b66c:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800b670:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b674:	ee26 6a27 	vmul.f32	s12, s12, s15
 800b678:	edc1 4a03 	vstr	s9, [r1, #12]
 800b67c:	ed81 6a02 	vstr	s12, [r1, #8]
 800b680:	4770      	bx	lr
 800b682:	eddf 4a06 	vldr	s9, [pc, #24]	; 800b69c <b_dcm2q+0x13c>
 800b686:	e7aa      	b.n	800b5de <b_dcm2q+0x7e>
 800b688:	eeb1 6a46 	vneg.f32	s12, s12
 800b68c:	e7f0      	b.n	800b670 <b_dcm2q+0x110>
 800b68e:	eef1 5a65 	vneg.f32	s11, s11
 800b692:	e7d9      	b.n	800b648 <b_dcm2q+0xe8>
 800b694:	eeb1 7a47 	vneg.f32	s14, s14
 800b698:	e7c2      	b.n	800b620 <b_dcm2q+0xc0>
 800b69a:	bf00      	nop
 800b69c:	00000000 	.word	0x00000000

0800b6a0 <q2hpr>:
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	ed90 7a00 	vldr	s14, [r0]
 800b6a6:	edd0 6a01 	vldr	s13, [r0, #4]
 800b6aa:	edd0 7a02 	vldr	s15, [r0, #8]
 800b6ae:	ed90 5a03 	vldr	s10, [r0, #12]
 800b6b2:	ed2d 8b0a 	vpush	{d8-d12}
 800b6b6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b6ba:	ee27 8a26 	vmul.f32	s16, s14, s13
 800b6be:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800b6c2:	ee67 0a07 	vmul.f32	s1, s14, s14
 800b6c6:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800b6ca:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800b6ce:	ee27 7a05 	vmul.f32	s14, s14, s10
 800b6d2:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b6d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b6da:	ee78 aa08 	vadd.f32	s21, s16, s16
 800b6de:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800b6e2:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800b6e6:	ee30 ca00 	vadd.f32	s24, s0, s0
 800b6ea:	ee36 ba06 	vadd.f32	s22, s12, s12
 800b6ee:	ee77 8a07 	vadd.f32	s17, s14, s14
 800b6f2:	ee75 baa5 	vadd.f32	s23, s11, s11
 800b6f6:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800b6fa:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800b6fe:	460c      	mov	r4, r1
 800b700:	bb8a      	cbnz	r2, 800b766 <q2hpr+0xc6>
 800b702:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800b706:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800b70a:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800b70e:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800b712:	f009 ffa3 	bl	801565c <atan2f>
 800b716:	eeb0 8a40 	vmov.f32	s16, s0
 800b71a:	ed84 8a00 	vstr	s16, [r4]
 800b71e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800b722:	f009 ff69 	bl	80155f8 <asinf>
 800b726:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800b72a:	eef0 8a40 	vmov.f32	s17, s0
 800b72e:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800b732:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800b736:	f009 ff91 	bl	801565c <atan2f>
 800b73a:	eef1 8a68 	vneg.f32	s17, s17
 800b73e:	eeb0 9a40 	vmov.f32	s18, s0
 800b742:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b74a:	ed84 9a02 	vstr	s18, [r4, #8]
 800b74e:	edc4 8a01 	vstr	s17, [r4, #4]
 800b752:	d505      	bpl.n	800b760 <q2hpr+0xc0>
 800b754:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800b7ac <q2hpr+0x10c>
 800b758:	ee38 8a00 	vadd.f32	s16, s16, s0
 800b75c:	ed84 8a00 	vstr	s16, [r4]
 800b760:	ecbd 8b0a 	vpop	{d8-d12}
 800b764:	bd10      	pop	{r4, pc}
 800b766:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800b76a:	f009 ff45 	bl	80155f8 <asinf>
 800b76e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800b772:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800b776:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800b77a:	eeb0 9a40 	vmov.f32	s18, s0
 800b77e:	ee38 0aab 	vadd.f32	s0, s17, s23
 800b782:	f009 ff6b 	bl	801565c <atan2f>
 800b786:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800b78a:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800b78e:	eef0 8a40 	vmov.f32	s17, s0
 800b792:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800b796:	eeb1 0a48 	vneg.f32	s0, s16
 800b79a:	f009 ff5f 	bl	801565c <atan2f>
 800b79e:	eef1 8a68 	vneg.f32	s17, s17
 800b7a2:	eeb0 8a40 	vmov.f32	s16, s0
 800b7a6:	ed84 0a00 	vstr	s0, [r4]
 800b7aa:	e7ca      	b.n	800b742 <q2hpr+0xa2>
 800b7ac:	40c90fdb 	.word	0x40c90fdb

0800b7b0 <llEvaluate.constprop.0>:
 800b7b0:	edd2 0a00 	vldr	s1, [r2]
 800b7b4:	ed90 1a00 	vldr	s2, [r0]
 800b7b8:	edd0 1a04 	vldr	s3, [r0, #16]
 800b7bc:	edd2 5a01 	vldr	s11, [r2, #4]
 800b7c0:	ed90 6a08 	vldr	s12, [r0, #32]
 800b7c4:	ed90 2a05 	vldr	s4, [r0, #20]
 800b7c8:	ed92 7a02 	vldr	s14, [r2, #8]
 800b7cc:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800b7d0:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800b7d4:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800b7d8:	edd2 7a03 	vldr	s15, [r2, #12]
 800b7dc:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800b7e0:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800b7e4:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800b7e8:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	f10d 0810 	add.w	r8, sp, #16
 800b7f6:	2704      	movs	r7, #4
 800b7f8:	f101 0510 	add.w	r5, r1, #16
 800b7fc:	2f04      	cmp	r7, #4
 800b7fe:	4686      	mov	lr, r0
 800b800:	f04f 0c03 	mov.w	ip, #3
 800b804:	b27b      	sxtb	r3, r7
 800b806:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800b80a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800b80e:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800b812:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800b816:	eea6 7a43 	vfms.f32	s14, s12, s6
 800b81a:	edcd 6a00 	vstr	s13, [sp]
 800b81e:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800b822:	eee6 7a63 	vfms.f32	s15, s12, s7
 800b826:	ed8d 6a01 	vstr	s12, [sp, #4]
 800b82a:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800b82e:	edcd 6a02 	vstr	s13, [sp, #8]
 800b832:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b836:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b83a:	ed78 7a01 	vldmdb	r8!, {s15}
 800b83e:	ed65 7a01 	vstmdb	r5!, {s15}
 800b842:	d029      	beq.n	800b898 <llEvaluate.constprop.0+0xe8>
 800b844:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800b848:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800b84c:	4432      	add	r2, r6
 800b84e:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800b852:	edd2 6a00 	vldr	s13, [r2]
 800b856:	ed94 7a00 	vldr	s14, [r4]
 800b85a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800b85e:	3301      	adds	r3, #1
 800b860:	b2da      	uxtb	r2, r3
 800b862:	2a04      	cmp	r2, #4
 800b864:	b25b      	sxtb	r3, r3
 800b866:	edc5 7a00 	vstr	s15, [r5]
 800b86a:	d1ed      	bne.n	800b848 <llEvaluate.constprop.0+0x98>
 800b86c:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800b870:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b874:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800b878:	ed85 7a00 	vstr	s14, [r5]
 800b87c:	d013      	beq.n	800b8a6 <llEvaluate.constprop.0+0xf6>
 800b87e:	3f01      	subs	r7, #1
 800b880:	b2ff      	uxtb	r7, r7
 800b882:	ed78 7a01 	vldmdb	r8!, {s15}
 800b886:	2f04      	cmp	r7, #4
 800b888:	f1ae 0e14 	sub.w	lr, lr, #20
 800b88c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b890:	b27b      	sxtb	r3, r7
 800b892:	ed65 7a01 	vstmdb	r5!, {s15}
 800b896:	d1d5      	bne.n	800b844 <llEvaluate.constprop.0+0x94>
 800b898:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800b89c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b8a0:	ed85 7a00 	vstr	s14, [r5]
 800b8a4:	e7eb      	b.n	800b87e <llEvaluate.constprop.0+0xce>
 800b8a6:	b004      	add	sp, #16
 800b8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b8ac <MEMS_updateMagBufferIndex>:
 800b8ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8b0:	ed2d 8b02 	vpush	{d8}
 800b8b4:	7804      	ldrb	r4, [r0, #0]
 800b8b6:	7842      	ldrb	r2, [r0, #1]
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4294      	cmp	r4, r2
 800b8c2:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800b8c6:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800b8ca:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	460d      	mov	r5, r1
 800b8d2:	f100 0001 	add.w	r0, r0, #1
 800b8d6:	f000 8083 	beq.w	800b9e0 <MEMS_updateMagBufferIndex+0x134>
 800b8da:	1b00      	subs	r0, r0, r4
 800b8dc:	fb90 f8f2 	sdiv	r8, r0, r2
 800b8e0:	fb02 0018 	mls	r0, r2, r8, r0
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	bfb6      	itet	lt
 800b8e8:	eb02 0800 	addlt.w	r8, r2, r0
 800b8ec:	fa0f f880 	sxthge.w	r8, r0
 800b8f0:	fa0f f888 	sxthlt.w	r8, r8
 800b8f4:	b934      	cbnz	r4, 800b904 <MEMS_updateMagBufferIndex+0x58>
 800b8f6:	23ff      	movs	r3, #255	; 0xff
 800b8f8:	70b3      	strb	r3, [r6, #2]
 800b8fa:	b003      	add	sp, #12
 800b8fc:	ecbd 8b02 	vpop	{d8}
 800b900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b904:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b908:	2700      	movs	r7, #0
 800b90a:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800b90e:	463b      	mov	r3, r7
 800b910:	e000      	b.n	800b914 <MEMS_updateMagBufferIndex+0x68>
 800b912:	7872      	ldrb	r2, [r6, #1]
 800b914:	4443      	add	r3, r8
 800b916:	fb93 f4f2 	sdiv	r4, r3, r2
 800b91a:	fb02 3314 	mls	r3, r2, r4, r3
 800b91e:	b2dc      	uxtb	r4, r3
 800b920:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800b924:	3701      	adds	r7, #1
 800b926:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800b92a:	fb92 f3f5 	sdiv	r3, r2, r5
 800b92e:	fb05 2313 	mls	r3, r5, r3, r2
 800b932:	2b00      	cmp	r3, #0
 800b934:	bfb8      	it	lt
 800b936:	195b      	addlt	r3, r3, r5
 800b938:	b21b      	sxth	r3, r3
 800b93a:	ee00 3a10 	vmov	s0, r3
 800b93e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b942:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b946:	f009 fd5f 	bl	8015408 <roundf>
 800b94a:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800b94e:	fb92 f3f5 	sdiv	r3, r2, r5
 800b952:	fb05 2313 	mls	r3, r5, r3, r2
 800b956:	2b00      	cmp	r3, #0
 800b958:	bfb8      	it	lt
 800b95a:	195b      	addlt	r3, r3, r5
 800b95c:	b21b      	sxth	r3, r3
 800b95e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b962:	ee00 3a10 	vmov	s0, r3
 800b966:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b96a:	edcd 7a01 	vstr	s15, [sp, #4]
 800b96e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b972:	f009 fd49 	bl	8015408 <roundf>
 800b976:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800b97a:	fb92 f3f5 	sdiv	r3, r2, r5
 800b97e:	fb05 2313 	mls	r3, r5, r3, r2
 800b982:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b986:	18ea      	adds	r2, r5, r3
 800b988:	b219      	sxth	r1, r3
 800b98a:	b212      	sxth	r2, r2
 800b98c:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800b990:	edcd 7a01 	vstr	s15, [sp, #4]
 800b994:	ee00 1a10 	vmov	s0, r1
 800b998:	ee07 2a90 	vmov	s15, r2
 800b99c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b9a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b9aa:	bfb8      	it	lt
 800b9ac:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800b9b0:	f009 fd2a 	bl	8015408 <roundf>
 800b9b4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800b9b8:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800b9bc:	edcd 7a01 	vstr	s15, [sp, #4]
 800b9c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b9c4:	4622      	mov	r2, r4
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	f7ff fce7 	bl	800b39c <MEMS_setMagIndexToOne>
 800b9ce:	7832      	ldrb	r2, [r6, #0]
 800b9d0:	b2fb      	uxtb	r3, r7
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d89d      	bhi.n	800b912 <MEMS_updateMagBufferIndex+0x66>
 800b9d6:	b003      	add	sp, #12
 800b9d8:	ecbd 8b02 	vpop	{d8}
 800b9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9e0:	fb90 f8f4 	sdiv	r8, r0, r4
 800b9e4:	fb04 0018 	mls	r0, r4, r8, r0
 800b9e8:	fa0f f880 	sxth.w	r8, r0
 800b9ec:	e782      	b.n	800b8f4 <MEMS_updateMagBufferIndex+0x48>
 800b9ee:	bf00      	nop

0800b9f0 <getMagStats.constprop.0>:
 800b9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b9f6:	2400      	movs	r4, #0
 800b9f8:	4607      	mov	r7, r0
 800b9fa:	6034      	str	r4, [r6, #0]
 800b9fc:	601c      	str	r4, [r3, #0]
 800b9fe:	7800      	ldrb	r0, [r0, #0]
 800ba00:	787d      	ldrb	r5, [r7, #1]
 800ba02:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800ba06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba0a:	42a8      	cmp	r0, r5
 800ba0c:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800ba10:	f000 80c0 	beq.w	800bb94 <getMagStats.constprop.0+0x1a4>
 800ba14:	3401      	adds	r4, #1
 800ba16:	eba4 0c00 	sub.w	ip, r4, r0
 800ba1a:	fb9c f4f5 	sdiv	r4, ip, r5
 800ba1e:	fb05 c414 	mls	r4, r5, r4, ip
 800ba22:	2c00      	cmp	r4, #0
 800ba24:	bfb8      	it	lt
 800ba26:	1964      	addlt	r4, r4, r5
 800ba28:	b224      	sxth	r4, r4
 800ba2a:	ee04 0a90 	vmov	s9, r0
 800ba2e:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800bbb0 <getMagStats.constprop.0+0x1c0>
 800ba32:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800ba36:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ba3a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f000 80b2 	beq.w	800bba8 <getMagStats.constprop.0+0x1b8>
 800ba44:	3801      	subs	r0, #1
 800ba46:	fa54 fc80 	uxtab	ip, r4, r0
 800ba4a:	f8b1 9000 	ldrh.w	r9, [r1]
 800ba4e:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800ba52:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800ba56:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800bbb4 <getMagStats.constprop.0+0x1c4>
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	e002      	b.n	800ba64 <getMagStats.constprop.0+0x74>
 800ba5e:	ed93 3a00 	vldr	s6, [r3]
 800ba62:	3401      	adds	r4, #1
 800ba64:	fb94 f1f5 	sdiv	r1, r4, r5
 800ba68:	fb05 4111 	mls	r1, r5, r1, r4
 800ba6c:	b2c9      	uxtb	r1, r1
 800ba6e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800ba72:	edd2 3a00 	vldr	s7, [r2]
 800ba76:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800ba7a:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800ba7e:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800ba80:	ed92 4a04 	vldr	s8, [r2, #16]
 800ba84:	ed92 6a08 	vldr	s12, [r2, #32]
 800ba88:	ebaa 0a09 	sub.w	sl, sl, r9
 800ba8c:	ebab 0b08 	sub.w	fp, fp, r8
 800ba90:	fa0f fa8a 	sxth.w	sl, sl
 800ba94:	ee07 aa10 	vmov	s14, sl
 800ba98:	fa0f fa8b 	sxth.w	sl, fp
 800ba9c:	ee06 aa90 	vmov	s13, sl
 800baa0:	eba1 010e 	sub.w	r1, r1, lr
 800baa4:	b209      	sxth	r1, r1
 800baa6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800baaa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800baae:	ee07 1a90 	vmov	s15, r1
 800bab2:	ee27 7a23 	vmul.f32	s14, s14, s7
 800bab6:	ee66 6a84 	vmul.f32	s13, s13, s8
 800baba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800babe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800bac2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800bac6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800baca:	ee16 1a90 	vmov	r1, s13
 800bace:	ee17 aa10 	vmov	sl, s14
 800bad2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bad6:	fb11 f101 	smulbb	r1, r1, r1
 800bada:	fa0f fa8a 	sxth.w	sl, sl
 800bade:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800bae2:	ee17 1a90 	vmov	r1, s15
 800bae6:	b209      	sxth	r1, r1
 800bae8:	fb01 a101 	mla	r1, r1, r1, sl
 800baec:	ee07 1a90 	vmov	s15, r1
 800baf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800baf4:	f100 0a01 	add.w	sl, r0, #1
 800baf8:	eef1 6ae7 	vsqrt.f32	s13, s15
 800bafc:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bb00:	ee17 1a90 	vmov	r1, s15
 800bb04:	b209      	sxth	r1, r1
 800bb06:	ee07 1a10 	vmov	s14, r1
 800bb0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb0e:	ee77 7a45 	vsub.f32	s15, s14, s10
 800bb12:	ee37 7a03 	vadd.f32	s14, s14, s6
 800bb16:	eef0 7ae7 	vabs.f32	s15, s15
 800bb1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb1e:	ed83 7a00 	vstr	s14, [r3]
 800bb22:	ee17 1a90 	vmov	r1, s15
 800bb26:	b209      	sxth	r1, r1
 800bb28:	fb01 fb01 	mul.w	fp, r1, r1
 800bb2c:	ee07 ba90 	vmov	s15, fp
 800bb30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bb34:	ee07 1a90 	vmov	s15, r1
 800bb38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb3c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800bb40:	edd6 7a00 	vldr	s15, [r6]
 800bb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb4c:	bf48      	it	mi
 800bb4e:	fa5f f08a 	uxtbmi.w	r0, sl
 800bb52:	45a4      	cmp	ip, r4
 800bb54:	edc6 7a00 	vstr	s15, [r6]
 800bb58:	d181      	bne.n	800ba5e <getMagStats.constprop.0+0x6e>
 800bb5a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800bb5e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800bbb8 <getMagStats.constprop.0+0x1c8>
 800bb62:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800bb66:	eef1 7ae6 	vsqrt.f32	s15, s13
 800bb6a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bb6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb76:	bfb8      	it	lt
 800bb78:	eef0 7a47 	vmovlt.f32	s15, s14
 800bb7c:	edc6 7a00 	vstr	s15, [r6]
 800bb80:	edd3 7a00 	vldr	s15, [r3]
 800bb84:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bb88:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800bb8c:	edc3 7a00 	vstr	s15, [r3]
 800bb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb94:	1c65      	adds	r5, r4, #1
 800bb96:	fb95 f4f0 	sdiv	r4, r5, r0
 800bb9a:	fb00 5414 	mls	r4, r0, r4, r5
 800bb9e:	ee04 0a90 	vmov	s9, r0
 800bba2:	b224      	sxth	r4, r4
 800bba4:	4605      	mov	r5, r0
 800bba6:	e742      	b.n	800ba2e <getMagStats.constprop.0+0x3e>
 800bba8:	edd6 7a00 	vldr	s15, [r6]
 800bbac:	e7d5      	b.n	800bb5a <getMagStats.constprop.0+0x16a>
 800bbae:	bf00      	nop
 800bbb0:	423c0000 	.word	0x423c0000
 800bbb4:	00000000 	.word	0x00000000
 800bbb8:	3f59999a 	.word	0x3f59999a

0800bbbc <MFX_emptyAttitude>:
 800bbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	ed2d 8b10 	vpush	{d8-d15}
 800bbc4:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800bbc8:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800bbcc:	f04f 0a00 	mov.w	sl, #0
 800bbd0:	4fef      	ldr	r7, [pc, #956]	; (800bf90 <MFX_emptyAttitude+0x3d4>)
 800bbd2:	f8c4 a008 	str.w	sl, [r4, #8]
 800bbd6:	e9c4 aa00 	strd	sl, sl, [r4]
 800bbda:	f837 3b04 	ldrh.w	r3, [r7], #4
 800bbde:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800bbe2:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800bbe6:	4680      	mov	r8, r0
 800bbe8:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800bbec:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800bbf0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bbf4:	0c1b      	lsrs	r3, r3, #16
 800bbf6:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800bbfa:	ab27      	add	r3, sp, #156	; 0x9c
 800bbfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc00:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800bc04:	ab2d      	add	r3, sp, #180	; 0xb4
 800bc06:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800bc0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc0e:	ab30      	add	r3, sp, #192	; 0xc0
 800bc10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc14:	ab33      	add	r3, sp, #204	; 0xcc
 800bc16:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800bc1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc1e:	f04f 0c00 	mov.w	ip, #0
 800bc22:	ab36      	add	r3, sp, #216	; 0xd8
 800bc24:	f04f 0b00 	mov.w	fp, #0
 800bc28:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800bc2c:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800bc30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800bc34:	4628      	mov	r0, r5
 800bc36:	2224      	movs	r2, #36	; 0x24
 800bc38:	f00b f9ee 	bl	8017018 <memset>
 800bc3c:	4651      	mov	r1, sl
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800bc44:	ed9f bad3 	vldr	s22, [pc, #844]	; 800bf94 <MFX_emptyAttitude+0x3d8>
 800bc48:	eddf ead3 	vldr	s29, [pc, #844]	; 800bf98 <MFX_emptyAttitude+0x3dc>
 800bc4c:	f00b f9e4 	bl	8017018 <memset>
 800bc50:	edd5 4a00 	vldr	s9, [r5]
 800bc54:	ed95 5a01 	vldr	s10, [r5, #4]
 800bc58:	edd5 5a02 	vldr	s11, [r5, #8]
 800bc5c:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800bc60:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800bc64:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800bc68:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800bc6c:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800bc70:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800bc74:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800bc78:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800bc7c:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800bc80:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800bc84:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800bc88:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800bc8c:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800bc90:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800bc94:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800bc98:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800bc9c:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800bca0:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800bca4:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800bca8:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800bcac:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800bcb0:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800bcb4:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800bcb8:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800bcbc:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800bcc0:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800bcc4:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800bcc8:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800bccc:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800bcd0:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800bcd4:	ed95 6a03 	vldr	s12, [r5, #12]
 800bcd8:	edd5 6a04 	vldr	s13, [r5, #16]
 800bcdc:	ed95 7a05 	vldr	s14, [r5, #20]
 800bce0:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800bce4:	ed8d 6a08 	vstr	s12, [sp, #32]
 800bce8:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800bcec:	edcd 6a07 	vstr	s13, [sp, #28]
 800bcf0:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800bcf4:	ed8d 7a06 	vstr	s14, [sp, #24]
 800bcf8:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800bcfc:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800bd00:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800bd04:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800bd08:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800bd0c:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800bd10:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800bd14:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800bd18:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800bd1c:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800bd20:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800bd24:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800bd28:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800bd2c:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800bd30:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800bd34:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800bd38:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800bd3c:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800bd40:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800bd44:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800bd48:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800bd4c:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800bd50:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800bd54:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800bd58:	edd5 7a06 	vldr	s15, [r5, #24]
 800bd5c:	edd5 fa07 	vldr	s31, [r5, #28]
 800bd60:	ed95 fa08 	vldr	s30, [r5, #32]
 800bd64:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800bd68:	edcd 7a05 	vstr	s15, [sp, #20]
 800bd6c:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800bd70:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800bd74:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800bd78:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800bd7c:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800bd80:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800bd84:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800bd88:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800bd8c:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800bd90:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800bd94:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800bd98:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800bd9c:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800bda0:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800bda4:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800bda8:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800bdac:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800bdb0:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800bdb4:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800bdb8:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800bdbc:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800bdc0:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800bdc4:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800bdc8:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800bdcc:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800bdd0:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800bdd4:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800bdd8:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800bddc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bdde:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800bde2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bde6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800bde8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	f8cc 3000 	str.w	r3, [ip]
 800bdf2:	4651      	mov	r1, sl
 800bdf4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800bdfe:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800be02:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800be06:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800be0a:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800be0e:	f00b f903 	bl	8017018 <memset>
 800be12:	4621      	mov	r1, r4
 800be14:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800be18:	a898      	add	r0, sp, #608	; 0x260
 800be1a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800be1e:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800be22:	f00b f8eb 	bl	8016ffc <memcpy>
 800be26:	4651      	mov	r1, sl
 800be28:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800be2c:	4620      	mov	r0, r4
 800be2e:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800be32:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800be36:	f00b f8ef 	bl	8017018 <memset>
 800be3a:	4621      	mov	r1, r4
 800be3c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800be40:	a8f4      	add	r0, sp, #976	; 0x3d0
 800be42:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800be46:	f00b f8d9 	bl	8016ffc <memcpy>
 800be4a:	4651      	mov	r1, sl
 800be4c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800be50:	4620      	mov	r0, r4
 800be52:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800be56:	f00b f8df 	bl	8017018 <memset>
 800be5a:	4621      	mov	r1, r4
 800be5c:	8037      	strh	r7, [r6, #0]
 800be5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800be62:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800be66:	f00b f8c9 	bl	8016ffc <memcpy>
 800be6a:	4651      	mov	r1, sl
 800be6c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800be70:	4620      	mov	r0, r4
 800be72:	ed86 8a01 	vstr	s16, [r6, #4]
 800be76:	f00b f8cf 	bl	8017018 <memset>
 800be7a:	4621      	mov	r1, r4
 800be7c:	802f      	strh	r7, [r5, #0]
 800be7e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800be82:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800be86:	f00b f8b9 	bl	8016ffc <memcpy>
 800be8a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800be8e:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800be92:	2701      	movs	r7, #1
 800be94:	9600      	str	r6, [sp, #0]
 800be96:	9403      	str	r4, [sp, #12]
 800be98:	eddf 3a40 	vldr	s7, [pc, #256]	; 800bf9c <MFX_emptyAttitude+0x3e0>
 800be9c:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800bfa0 <MFX_emptyAttitude+0x3e4>
 800bea0:	ed85 8a01 	vstr	s16, [r5, #4]
 800bea4:	483f      	ldr	r0, [pc, #252]	; (800bfa4 <MFX_emptyAttitude+0x3e8>)
 800bea6:	4d40      	ldr	r5, [pc, #256]	; (800bfa8 <MFX_emptyAttitude+0x3ec>)
 800bea8:	f8df e120 	ldr.w	lr, [pc, #288]	; 800bfcc <MFX_emptyAttitude+0x410>
 800beac:	951c      	str	r5, [sp, #112]	; 0x70
 800beae:	abf2      	add	r3, sp, #968	; 0x3c8
 800beb0:	aa96      	add	r2, sp, #600	; 0x258
 800beb2:	a90d      	add	r1, sp, #52	; 0x34
 800beb4:	9017      	str	r0, [sp, #92]	; 0x5c
 800beb6:	4d3d      	ldr	r5, [pc, #244]	; (800bfac <MFX_emptyAttitude+0x3f0>)
 800beb8:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800bebc:	4638      	mov	r0, r7
 800bebe:	ae27      	add	r6, sp, #156	; 0x9c
 800bec0:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800bec4:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800bec8:	951b      	str	r5, [sp, #108]	; 0x6c
 800beca:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800bece:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800bed2:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800bed6:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800beda:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800bede:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800bee2:	f7fe fecf 	bl	800ac84 <DataHist_parameters>
 800bee6:	ce07      	ldmia	r6!, {r0, r1, r2}
 800bee8:	4b31      	ldr	r3, [pc, #196]	; (800bfb0 <MFX_emptyAttitude+0x3f4>)
 800beea:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800beee:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800bef2:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800bef6:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800befa:	f8c8 300c 	str.w	r3, [r8, #12]
 800befe:	4b2d      	ldr	r3, [pc, #180]	; (800bfb4 <MFX_emptyAttitude+0x3f8>)
 800bf00:	f8c8 3014 	str.w	r3, [r8, #20]
 800bf04:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800bf08:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800bfb8 <MFX_emptyAttitude+0x3fc>
 800bf0c:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800bfbc <MFX_emptyAttitude+0x400>
 800bf10:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800bfc0 <MFX_emptyAttitude+0x404>
 800bf14:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800bfc4 <MFX_emptyAttitude+0x408>
 800bf18:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800bfc8 <MFX_emptyAttitude+0x40c>
 800bf1c:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800bf20:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800bfd0 <MFX_emptyAttitude+0x414>
 800bf24:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800bfd4 <MFX_emptyAttitude+0x418>
 800bf28:	edc8 2a06 	vstr	s5, [r8, #24]
 800bf2c:	f04f 0b00 	mov.w	fp, #0
 800bf30:	f04f 0c00 	mov.w	ip, #0
 800bf34:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800bf38:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800bf3c:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800bf40:	ad2d      	add	r5, sp, #180	; 0xb4
 800bf42:	469b      	mov	fp, r3
 800bf44:	f8df c090 	ldr.w	ip, [pc, #144]	; 800bfd8 <MFX_emptyAttitude+0x41c>
 800bf48:	ed88 3a07 	vstr	s6, [r8, #28]
 800bf4c:	f240 1301 	movw	r3, #257	; 0x101
 800bf50:	edc8 3a08 	vstr	s7, [r8, #32]
 800bf54:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800bf58:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800bf5c:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800bf60:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800bf64:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800bf68:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800bf6c:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800bf70:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800bf74:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800bf78:	f8c8 3000 	str.w	r3, [r8]
 800bf7c:	f8a8 3004 	strh.w	r3, [r8, #4]
 800bf80:	ed88 8a02 	vstr	s16, [r8, #8]
 800bf84:	ed88 8a04 	vstr	s16, [r8, #16]
 800bf88:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800bf8c:	e028      	b.n	800bfe0 <MFX_emptyAttitude+0x424>
 800bf8e:	bf00      	nop
 800bf90:	08019f3c 	.word	0x08019f3c
 800bf94:	00000000 	.word	0x00000000
 800bf98:	447a0000 	.word	0x447a0000
 800bf9c:	3e93ffa3 	.word	0x3e93ffa3
 800bfa0:	3e5cec8f 	.word	0x3e5cec8f
 800bfa4:	3ea25c13 	.word	0x3ea25c13
 800bfa8:	40a00000 	.word	0x40a00000
 800bfac:	3d57bb3d 	.word	0x3d57bb3d
 800bfb0:	01010100 	.word	0x01010100
 800bfb4:	41200000 	.word	0x41200000
 800bfb8:	3a9d4952 	.word	0x3a9d4952
 800bfbc:	3ac49ba6 	.word	0x3ac49ba6
 800bfc0:	3b03126f 	.word	0x3b03126f
 800bfc4:	402ab021 	.word	0x402ab021
 800bfc8:	3a83126f 	.word	0x3a83126f
 800bfcc:	3e006d36 	.word	0x3e006d36
 800bfd0:	3f639581 	.word	0x3f639581
 800bfd4:	3f13f7cf 	.word	0x3f13f7cf
 800bfd8:	3f2ac083 	.word	0x3f2ac083
 800bfdc:	3f4ccccd 	.word	0x3f4ccccd
 800bfe0:	cd07      	ldmia	r5!, {r0, r1, r2}
 800bfe2:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800bfe6:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800bfea:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800bfee:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800bff2:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800bff6:	ab33      	add	r3, sp, #204	; 0xcc
 800bff8:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800bffc:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800c000:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800c004:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c006:	ab36      	add	r3, sp, #216	; 0xd8
 800c008:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800c00c:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800c010:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800c014:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c016:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800bfdc <MFX_emptyAttitude+0x420>
 800c01a:	4bd6      	ldr	r3, [pc, #856]	; (800c374 <MFX_emptyAttitude+0x7b8>)
 800c01c:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800c020:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800c024:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800c028:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800c02c:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800c030:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800c034:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800c038:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800c03c:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800c040:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800c044:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800c048:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800c04c:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800c050:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800c054:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800c058:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800c05c:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800c060:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800c064:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800c068:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800c06c:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800c070:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800c074:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800c078:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800c07c:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800c080:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800c084:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800c088:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800c08c:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800c090:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800c094:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800c098:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800c09c:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800c0a0:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800c0a4:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800c0a8:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800c0ac:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800c0b0:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800c0b4:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800c0b8:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800c0bc:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800c0c0:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800c0c4:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800c0c8:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800c0cc:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800c0d0:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800c0d4:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800c0d8:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800c0dc:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800c0e0:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800c0e4:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800c0e8:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800c0ec:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800c0f0:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800c0f4:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800c0f8:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800c0fc:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800c100:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800c104:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800c108:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800c10c:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800c110:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800c114:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800c118:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800c11c:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800c120:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800c124:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800c128:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800c12c:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800c130:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800c134:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800c138:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800c13c:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800c140:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800c144:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800c148:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800c14c:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800c150:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800c154:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800c158:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800c15c:	ed9d 6a08 	vldr	s12, [sp, #32]
 800c160:	eddd 6a07 	vldr	s13, [sp, #28]
 800c164:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800c168:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c16c:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800c170:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800c174:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800c178:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800c17c:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800c180:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800c184:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800c188:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800c18c:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800c190:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800c194:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800c198:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800c19c:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800c1a0:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800c1a4:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800c1a8:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800c1ac:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c1b0:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c1b4:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c1b8:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c1bc:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c1c0:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c1c4:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c1c8:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c1cc:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c1d0:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c1d4:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c1d8:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c1dc:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c1e0:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c1e4:	eddd 7a05 	vldr	s15, [sp, #20]
 800c1e8:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c1ec:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c1f0:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c1f4:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c1f8:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c1fc:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c200:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c204:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c208:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c20c:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c210:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c214:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c218:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c21c:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c220:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c224:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c228:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c22c:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c230:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c234:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c238:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c23c:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c240:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c244:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c248:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c24c:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c250:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c254:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c258:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c25c:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c260:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c264:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800c268:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800c26c:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800c270:	7820      	ldrb	r0, [r4, #0]
 800c272:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800c276:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800c27a:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800c27e:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800c282:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800c286:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800c28a:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800c28e:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800c292:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800c296:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800c29a:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800c29e:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800c2a2:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800c2a6:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800c2aa:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800c2ae:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800c2b2:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800c2b6:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800c2ba:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800c2be:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800c2c2:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800c2c6:	f8cd e00c 	str.w	lr, [sp, #12]
 800c2ca:	9500      	str	r5, [sp, #0]
 800c2cc:	f7fe fcda 	bl	800ac84 <DataHist_parameters>
 800c2d0:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800c2d4:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800c2d8:	9205      	str	r2, [sp, #20]
 800c2da:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800c2de:	ed8b ba00 	vstr	s22, [fp]
 800c2e2:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800c2e6:	ed83 ba00 	vstr	s22, [r3]
 800c2ea:	9b05      	ldr	r3, [sp, #20]
 800c2ec:	9106      	str	r1, [sp, #24]
 800c2ee:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800c2f2:	ed89 ba00 	vstr	s22, [r9]
 800c2f6:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800c2fa:	ed83 8a00 	vstr	s16, [r3]
 800c2fe:	9b06      	ldr	r3, [sp, #24]
 800c300:	9207      	str	r2, [sp, #28]
 800c302:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800c306:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800c30a:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800c30e:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800c312:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800c316:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800c31a:	ed8e ba00 	vstr	s22, [lr]
 800c31e:	ed8c ba00 	vstr	s22, [ip]
 800c322:	ed87 ba00 	vstr	s22, [r7]
 800c326:	ed86 ba00 	vstr	s22, [r6]
 800c32a:	ed85 ba00 	vstr	s22, [r5]
 800c32e:	ed84 ba00 	vstr	s22, [r4]
 800c332:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800c336:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800c33a:	ed83 ba00 	vstr	s22, [r3]
 800c33e:	9b07      	ldr	r3, [sp, #28]
 800c340:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800c344:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800c348:	ed80 8a00 	vstr	s16, [r0]
 800c34c:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800c350:	ed81 ba00 	vstr	s22, [r1]
 800c354:	ed83 ba00 	vstr	s22, [r3]
 800c358:	230a      	movs	r3, #10
 800c35a:	ed82 ba00 	vstr	s22, [r2]
 800c35e:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800c362:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800c366:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800c36a:	ecbd 8b10 	vpop	{d8-d15}
 800c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c372:	bf00      	nop
 800c374:	3f333333 	.word	0x3f333333

0800c378 <output_update>:
 800c378:	ed90 7a00 	vldr	s14, [r0]
 800c37c:	edd0 7a01 	vldr	s15, [r0, #4]
 800c380:	ed90 5a03 	vldr	s10, [r0, #12]
 800c384:	edd0 5a02 	vldr	s11, [r0, #8]
 800c388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c38c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c390:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c394:	ee67 6a05 	vmul.f32	s13, s14, s10
 800c398:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c39c:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800c3a0:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c3a4:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c3a8:	ee36 6a06 	vadd.f32	s12, s12, s12
 800c3ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c3b0:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800c3b4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c3b8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c3bc:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800c3c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c3c4:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800c3c8:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c3cc:	460f      	mov	r7, r1
 800c3ce:	4615      	mov	r5, r2
 800c3d0:	461e      	mov	r6, r3
 800c3d2:	f1bc 0f00 	cmp.w	ip, #0
 800c3d6:	d146      	bne.n	800c466 <output_update+0xee>
 800c3d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c3dc:	eef1 6a66 	vneg.f32	s13, s13
 800c3e0:	edc3 7a01 	vstr	s15, [r3, #4]
 800c3e4:	edc3 6a00 	vstr	s13, [r3]
 800c3e8:	ed83 5a02 	vstr	s10, [r3, #8]
 800c3ec:	4662      	mov	r2, ip
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4604      	mov	r4, r0
 800c3f2:	f7ff f955 	bl	800b6a0 <q2hpr>
 800c3f6:	edd5 6a01 	vldr	s13, [r5, #4]
 800c3fa:	ed95 7a00 	vldr	s14, [r5]
 800c3fe:	edd5 7a02 	vldr	s15, [r5, #8]
 800c402:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800c514 <output_update+0x19c>
 800c406:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c40a:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800c40e:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800c412:	ed85 7a00 	vstr	s14, [r5]
 800c416:	edc5 6a01 	vstr	s13, [r5, #4]
 800c41a:	edc5 7a02 	vstr	s15, [r5, #8]
 800c41e:	ed97 7a01 	vldr	s14, [r7, #4]
 800c422:	edd6 7a00 	vldr	s15, [r6]
 800c426:	6822      	ldr	r2, [r4, #0]
 800c428:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c42c:	edc8 7a00 	vstr	s15, [r8]
 800c430:	ed97 7a00 	vldr	s14, [r7]
 800c434:	edd6 7a01 	vldr	s15, [r6, #4]
 800c438:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c43c:	edc8 7a01 	vstr	s15, [r8, #4]
 800c440:	edd6 7a02 	vldr	s15, [r6, #8]
 800c444:	ed97 7a02 	vldr	s14, [r7, #8]
 800c448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c44c:	edc8 7a02 	vstr	s15, [r8, #8]
 800c450:	edd4 7a02 	vldr	s15, [r4, #8]
 800c454:	6863      	ldr	r3, [r4, #4]
 800c456:	6023      	str	r3, [r4, #0]
 800c458:	eef1 7a67 	vneg.f32	s15, s15
 800c45c:	6062      	str	r2, [r4, #4]
 800c45e:	edc4 7a02 	vstr	s15, [r4, #8]
 800c462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c466:	f1bc 0f01 	cmp.w	ip, #1
 800c46a:	d015      	beq.n	800c498 <output_update+0x120>
 800c46c:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800c514 <output_update+0x19c>
 800c470:	edd2 6a00 	vldr	s13, [r2]
 800c474:	ed92 7a01 	vldr	s14, [r2, #4]
 800c478:	edd2 7a02 	vldr	s15, [r2, #8]
 800c47c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c480:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c484:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c488:	edc2 6a00 	vstr	s13, [r2]
 800c48c:	ed82 7a01 	vstr	s14, [r2, #4]
 800c490:	edc2 7a02 	vstr	s15, [r2, #8]
 800c494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c498:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c49c:	ee36 6a65 	vsub.f32	s12, s12, s11
 800c4a0:	eef1 6a66 	vneg.f32	s13, s13
 800c4a4:	edc3 7a00 	vstr	s15, [r3]
 800c4a8:	ed83 6a02 	vstr	s12, [r3, #8]
 800c4ac:	edc3 6a01 	vstr	s13, [r3, #4]
 800c4b0:	4662      	mov	r2, ip
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	f7ff f8f4 	bl	800b6a0 <q2hpr>
 800c4b8:	edd5 6a00 	vldr	s13, [r5]
 800c4bc:	ed95 7a01 	vldr	s14, [r5, #4]
 800c4c0:	edd5 7a02 	vldr	s15, [r5, #8]
 800c4c4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c514 <output_update+0x19c>
 800c4c8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c4cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c4d0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c4d4:	ed85 7a01 	vstr	s14, [r5, #4]
 800c4d8:	edc5 6a00 	vstr	s13, [r5]
 800c4dc:	edc5 7a02 	vstr	s15, [r5, #8]
 800c4e0:	ed97 7a00 	vldr	s14, [r7]
 800c4e4:	edd6 7a00 	vldr	s15, [r6]
 800c4e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4ec:	edc8 7a00 	vstr	s15, [r8]
 800c4f0:	ed97 7a01 	vldr	s14, [r7, #4]
 800c4f4:	edd6 7a01 	vldr	s15, [r6, #4]
 800c4f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c4fc:	edc8 7a01 	vstr	s15, [r8, #4]
 800c500:	edd6 7a02 	vldr	s15, [r6, #8]
 800c504:	ed97 7a02 	vldr	s14, [r7, #8]
 800c508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c50c:	edc8 7a02 	vstr	s15, [r8, #8]
 800c510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c514:	42652ee1 	.word	0x42652ee1

0800c518 <kalman_3gyro.constprop.0>:
 800c518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51c:	ed2d 8b10 	vpush	{d8-d15}
 800c520:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800c524:	edd2 9a02 	vldr	s19, [r2, #8]
 800c528:	edd2 8a03 	vldr	s17, [r2, #12]
 800c52c:	edd2 6a04 	vldr	s13, [r2, #16]
 800c530:	ed92 6a05 	vldr	s12, [r2, #20]
 800c534:	6854      	ldr	r4, [r2, #4]
 800c536:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800c53a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c53e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c542:	4683      	mov	fp, r0
 800c544:	edd2 7a00 	vldr	s15, [r2]
 800c548:	48e3      	ldr	r0, [pc, #908]	; (800c8d8 <kalman_3gyro.constprop.0+0x3c0>)
 800c54a:	9108      	str	r1, [sp, #32]
 800c54c:	904a      	str	r0, [sp, #296]	; 0x128
 800c54e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800c552:	460d      	mov	r5, r1
 800c554:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800c558:	2100      	movs	r1, #0
 800c55a:	9328      	str	r3, [sp, #160]	; 0xa0
 800c55c:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800c560:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800c564:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800c568:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800c56c:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800c570:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c574:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800c578:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800c57c:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800c580:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800c584:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800c588:	946f      	str	r4, [sp, #444]	; 0x1bc
 800c58a:	9470      	str	r4, [sp, #448]	; 0x1c0
 800c58c:	9471      	str	r4, [sp, #452]	; 0x1c4
 800c58e:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800c592:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800c596:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800c59a:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800c59e:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800c5a2:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800c5a6:	eeb0 8a60 	vmov.f32	s16, s1
 800c5aa:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800c5ae:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800c5b2:	ed8d 1a07 	vstr	s2, [sp, #28]
 800c5b6:	f00a fd2f 	bl	8017018 <memset>
 800c5ba:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800c5be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c5c2:	600b      	str	r3, [r1, #0]
 800c5c4:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800c5c8:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800c5cc:	600b      	str	r3, [r1, #0]
 800c5ce:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800c5d2:	600b      	str	r3, [r1, #0]
 800c5d4:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800c5d8:	600b      	str	r3, [r1, #0]
 800c5da:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800c5de:	600b      	str	r3, [r1, #0]
 800c5e0:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800c5e4:	600b      	str	r3, [r1, #0]
 800c5e6:	2a00      	cmp	r2, #0
 800c5e8:	f001 82c2 	beq.w	800db70 <kalman_3gyro.constprop.0+0x1658>
 800c5ec:	ed95 5a02 	vldr	s10, [r5, #8]
 800c5f0:	edd5 5a01 	vldr	s11, [r5, #4]
 800c5f4:	ed95 3a00 	vldr	s6, [r5]
 800c5f8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800c5fc:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800c600:	ee35 4a05 	vadd.f32	s8, s10, s10
 800c604:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800c608:	ee25 5a27 	vmul.f32	s10, s10, s15
 800c60c:	ee63 7a27 	vmul.f32	s15, s6, s15
 800c610:	ee33 3a03 	vadd.f32	s6, s6, s6
 800c614:	9b08      	ldr	r3, [sp, #32]
 800c616:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800c61a:	ed82 4a00 	vstr	s8, [r2]
 800c61e:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800c622:	edc2 4a00 	vstr	s9, [r2]
 800c626:	ed93 6a05 	vldr	s12, [r3, #20]
 800c62a:	edd3 6a04 	vldr	s13, [r3, #16]
 800c62e:	ed93 7a03 	vldr	s14, [r3, #12]
 800c632:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800c636:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800c63a:	ed82 5a00 	vstr	s10, [r2]
 800c63e:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800c642:	ed82 3a00 	vstr	s6, [r2]
 800c646:	eef1 3a46 	vneg.f32	s7, s12
 800c64a:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800c64e:	edc2 5a00 	vstr	s11, [r2]
 800c652:	eeb1 4a66 	vneg.f32	s8, s13
 800c656:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800c65a:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800c65e:	edc2 7a00 	vstr	s15, [r2]
 800c662:	ee34 3a04 	vadd.f32	s6, s8, s8
 800c666:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800c66a:	eef1 4a47 	vneg.f32	s9, s14
 800c66e:	ed82 5a00 	vstr	s10, [r2]
 800c672:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800c676:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800c67a:	ed81 3a00 	vstr	s6, [r1]
 800c67e:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800c682:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800c686:	ed81 5a00 	vstr	s10, [r1]
 800c68a:	ee77 7a07 	vadd.f32	s15, s14, s14
 800c68e:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800c692:	edc1 5a00 	vstr	s11, [r1]
 800c696:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800c69a:	edc1 7a00 	vstr	s15, [r1]
 800c69e:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	600b      	str	r3, [r1, #0]
 800c6a6:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800c6aa:	ee76 2a06 	vadd.f32	s5, s12, s12
 800c6ae:	600b      	str	r3, [r1, #0]
 800c6b0:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800c6b4:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800c6b8:	600b      	str	r3, [r1, #0]
 800c6ba:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800c6be:	edc2 2a00 	vstr	s5, [r2]
 800c6c2:	600b      	str	r3, [r1, #0]
 800c6c4:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800c6c8:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800c6cc:	600b      	str	r3, [r1, #0]
 800c6ce:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800c6d2:	a87b      	add	r0, sp, #492	; 0x1ec
 800c6d4:	600b      	str	r3, [r1, #0]
 800c6d6:	2230      	movs	r2, #48	; 0x30
 800c6d8:	2100      	movs	r1, #0
 800c6da:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800c6de:	934b      	str	r3, [sp, #300]	; 0x12c
 800c6e0:	934f      	str	r3, [sp, #316]	; 0x13c
 800c6e2:	9353      	str	r3, [sp, #332]	; 0x14c
 800c6e4:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800c6e8:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800c6ec:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800c6f0:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800c6f4:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800c6f8:	942c      	str	r4, [sp, #176]	; 0xb0
 800c6fa:	f00a fc8d 	bl	8017018 <memset>
 800c6fe:	eddb 6a06 	vldr	s13, [fp, #24]
 800c702:	ed9b 7a07 	vldr	s14, [fp, #28]
 800c706:	eddb 7a08 	vldr	s15, [fp, #32]
 800c70a:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800c70e:	ee68 6a26 	vmul.f32	s13, s16, s13
 800c712:	ee28 7a07 	vmul.f32	s14, s16, s14
 800c716:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c71a:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800c71e:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800c722:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800c726:	2b00      	cmp	r3, #0
 800c728:	f043 84a8 	bne.w	801007c <kalman_3gyro.constprop.0+0x3b64>
 800c72c:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800c730:	2b00      	cmp	r3, #0
 800c732:	f043 81e7 	bne.w	800fb04 <kalman_3gyro.constprop.0+0x35ec>
 800c736:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800c73a:	9304      	str	r3, [sp, #16]
 800c73c:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800c740:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800c744:	9310      	str	r3, [sp, #64]	; 0x40
 800c746:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800c74a:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800c74e:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800c752:	930f      	str	r3, [sp, #60]	; 0x3c
 800c754:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800c758:	edd0 7a00 	vldr	s15, [r0]
 800c75c:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800c760:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800c764:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800c768:	ed93 6a00 	vldr	s12, [r3]
 800c76c:	ed91 7a00 	vldr	s14, [r1]
 800c770:	edd2 6a00 	vldr	s13, [r2]
 800c774:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800c778:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c77c:	2300      	movs	r3, #0
 800c77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c782:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800c786:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800c78a:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800c78e:	933a      	str	r3, [sp, #232]	; 0xe8
 800c790:	933b      	str	r3, [sp, #236]	; 0xec
 800c792:	933c      	str	r3, [sp, #240]	; 0xf0
 800c794:	933d      	str	r3, [sp, #244]	; 0xf4
 800c796:	d14e      	bne.n	800c836 <kalman_3gyro.constprop.0+0x31e>
 800c798:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a0:	d149      	bne.n	800c836 <kalman_3gyro.constprop.0+0x31e>
 800c7a2:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7aa:	d144      	bne.n	800c836 <kalman_3gyro.constprop.0+0x31e>
 800c7ac:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b4:	d13f      	bne.n	800c836 <kalman_3gyro.constprop.0+0x31e>
 800c7b6:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800c7b8:	9336      	str	r3, [sp, #216]	; 0xd8
 800c7ba:	7802      	ldrb	r2, [r0, #0]
 800c7bc:	9337      	str	r3, [sp, #220]	; 0xdc
 800c7be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c7c2:	9338      	str	r3, [sp, #224]	; 0xe0
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	ed90 7a03 	vldr	s14, [r0, #12]
 800c7ca:	edd0 6a01 	vldr	s13, [r0, #4]
 800c7ce:	edd0 7a02 	vldr	s15, [r0, #8]
 800c7d2:	9139      	str	r1, [sp, #228]	; 0xe4
 800c7d4:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800c7d8:	2a00      	cmp	r2, #0
 800c7da:	f003 8568 	beq.w	80102ae <kalman_3gyro.constprop.0+0x3d96>
 800c7de:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7e2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800c7e6:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c7ea:	eef1 6ae7 	vsqrt.f32	s13, s15
 800c7ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c7f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c7f6:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800c7fa:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800c7fe:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c802:	2100      	movs	r1, #0
 800c804:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800c808:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800c80c:	f00a fc04 	bl	8017018 <memset>
 800c810:	4b32      	ldr	r3, [pc, #200]	; (800c8dc <kalman_3gyro.constprop.0+0x3c4>)
 800c812:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800c816:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800c81a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800c81e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800c822:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800c826:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800c82a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800c82e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800c832:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800c836:	9b08      	ldr	r3, [sp, #32]
 800c838:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800c8e0 <kalman_3gyro.constprop.0+0x3c8>
 800c83c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c840:	edd3 5a00 	vldr	s11, [r3]
 800c844:	edd3 7a02 	vldr	s15, [r3, #8]
 800c848:	ee67 6a07 	vmul.f32	s13, s14, s14
 800c84c:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800c850:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800c854:	eef4 6ac6 	vcmpe.f32	s13, s12
 800c858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c85c:	f101 8127 	bmi.w	800daae <kalman_3gyro.constprop.0+0x1596>
 800c860:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800c864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c868:	ee79 6a66 	vsub.f32	s13, s18, s13
 800c86c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800c870:	eef0 6ae6 	vabs.f32	s13, s13
 800c874:	ee76 aaea 	vsub.f32	s21, s13, s21
 800c878:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800c87c:	ed93 5a04 	vldr	s10, [r3, #16]
 800c880:	ed93 3a03 	vldr	s6, [r3, #12]
 800c884:	edd3 1a05 	vldr	s3, [r3, #20]
 800c888:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800c8e0 <kalman_3gyro.constprop.0+0x3c8>
 800c88c:	9b04      	ldr	r3, [sp, #16]
 800c88e:	ed95 ca00 	vldr	s24, [r5]
 800c892:	ed93 ba00 	vldr	s22, [r3]
 800c896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c89a:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800c89e:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800c8a2:	461e      	mov	r6, r3
 800c8a4:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800c8a8:	9502      	str	r5, [sp, #8]
 800c8aa:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800c8ae:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800c8b2:	9327      	str	r3, [sp, #156]	; 0x9c
 800c8b4:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800c8b8:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800c8bc:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800c8c0:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800c8c4:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800c8c8:	9501      	str	r5, [sp, #4]
 800c8ca:	ee65 6a05 	vmul.f32	s13, s10, s10
 800c8ce:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800c8d2:	eee3 6a03 	vfma.f32	s13, s6, s6
 800c8d6:	e009      	b.n	800c8ec <kalman_3gyro.constprop.0+0x3d4>
 800c8d8:	3a9d4952 	.word	0x3a9d4952
 800c8dc:	40a00000 	.word	0x40a00000
 800c8e0:	3c23d70a 	.word	0x3c23d70a
 800c8e4:	3dcccccd 	.word	0x3dcccccd
 800c8e8:	4b000000 	.word	0x4b000000
 800c8ec:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800c8f0:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800c8f4:	ee25 8a82 	vmul.f32	s16, s11, s4
 800c8f8:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800c8fc:	950c      	str	r5, [sp, #48]	; 0x30
 800c8fe:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800c902:	ee67 fa02 	vmul.f32	s31, s14, s4
 800c906:	eef4 6ac6 	vcmpe.f32	s13, s12
 800c90a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c90e:	bf58      	it	pl
 800c910:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800c914:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800c918:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800c91c:	bf48      	it	mi
 800c91e:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800c8e4 <kalman_3gyro.constprop.0+0x3cc>
 800c922:	ed96 6a00 	vldr	s12, [r6]
 800c926:	edda 4a00 	vldr	s9, [sl]
 800c92a:	ed93 fa00 	vldr	s30, [r3]
 800c92e:	ed90 ea00 	vldr	s28, [r0]
 800c932:	edd4 3a00 	vldr	s7, [r4]
 800c936:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800c93a:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800c93e:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800c942:	9617      	str	r6, [sp, #92]	; 0x5c
 800c944:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800c948:	961a      	str	r6, [sp, #104]	; 0x68
 800c94a:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800c94e:	9611      	str	r6, [sp, #68]	; 0x44
 800c950:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800c954:	9618      	str	r6, [sp, #96]	; 0x60
 800c956:	9e02      	ldr	r6, [sp, #8]
 800c958:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800c95c:	9303      	str	r3, [sp, #12]
 800c95e:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800c962:	ee27 2a82 	vmul.f32	s4, s15, s4
 800c966:	ee23 3a26 	vmul.f32	s6, s6, s13
 800c96a:	ee25 5a26 	vmul.f32	s10, s10, s13
 800c96e:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800c972:	edd1 6a00 	vldr	s13, [r1]
 800c976:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800c97a:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800c97e:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800c982:	edcd 6a05 	vstr	s13, [sp, #20]
 800c986:	ed8d 6a06 	vstr	s12, [sp, #24]
 800c98a:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800c98e:	ed92 6a00 	vldr	s12, [r2]
 800c992:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800c996:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800c99a:	edd6 2a00 	vldr	s5, [r6]
 800c99e:	eddc 4a00 	vldr	s9, [ip]
 800c9a2:	9e01      	ldr	r6, [sp, #4]
 800c9a4:	edd0 ca00 	vldr	s25, [r0]
 800c9a8:	ed96 1a00 	vldr	s2, [r6]
 800c9ac:	9803      	ldr	r0, [sp, #12]
 800c9ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c9b0:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800c9b4:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800c9b8:	eddc 0a00 	vldr	s1, [ip]
 800c9bc:	ed96 da00 	vldr	s26, [r6]
 800c9c0:	edd0 4a00 	vldr	s9, [r0]
 800c9c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c9c6:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800c9ca:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800c9ce:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800c9d2:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800c9d6:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800c9da:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800c9de:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800c9e2:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800c9e6:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800c9ea:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800c9ee:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800c9f2:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800c9f6:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800c9fa:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800c9fe:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800ca02:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800ca06:	edd6 4a00 	vldr	s9, [r6]
 800ca0a:	edd9 6a00 	vldr	s13, [r9]
 800ca0e:	edde ba00 	vldr	s23, [lr]
 800ca12:	ed95 4a00 	vldr	s8, [r5]
 800ca16:	ed94 0a00 	vldr	s0, [r4]
 800ca1a:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800ca1e:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800ca22:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800ca26:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800ca2a:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800ca2e:	edd9 ea00 	vldr	s29, [r9]
 800ca32:	edd1 2a00 	vldr	s5, [r1]
 800ca36:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800ca3a:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800ca3e:	ed92 1a00 	vldr	s2, [r2]
 800ca42:	edd3 ca00 	vldr	s25, [r3]
 800ca46:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800ca4a:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800ca4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ca50:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ca52:	edd3 4a00 	vldr	s9, [r3]
 800ca56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca58:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800ca5c:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800ca60:	edd3 fa00 	vldr	s31, [r3]
 800ca64:	eef0 4a6f 	vmov.f32	s9, s31
 800ca68:	edd6 fa00 	vldr	s31, [r6]
 800ca6c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ca6e:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800ca72:	eea3 5a08 	vfma.f32	s10, s6, s16
 800ca76:	ed96 3a00 	vldr	s6, [r6]
 800ca7a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ca7c:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800ca80:	ee25 8aad 	vmul.f32	s16, s11, s27
 800ca84:	eddd 5a06 	vldr	s11, [sp, #24]
 800ca88:	edd6 fa00 	vldr	s31, [r6]
 800ca8c:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ca8e:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800ca92:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800ca96:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800ca9a:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800ca9e:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800caa2:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800caa6:	edd8 5a00 	vldr	s11, [r8]
 800caaa:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800caae:	eef0 5a44 	vmov.f32	s11, s8
 800cab2:	ed97 4a00 	vldr	s8, [r7]
 800cab6:	ee76 6aae 	vadd.f32	s13, s13, s29
 800caba:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800cabe:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800cac2:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800cac6:	eede 2a83 	vfnms.f32	s5, s29, s6
 800caca:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800cace:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800cad2:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800cad6:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800cada:	eede 4a03 	vfnms.f32	s9, s28, s6
 800cade:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800cae2:	ee72 2aac 	vadd.f32	s5, s5, s25
 800cae6:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800caea:	edd6 ca00 	vldr	s25, [r6]
 800caee:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800caf2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800caf4:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800caf8:	ed96 ea00 	vldr	s28, [r6]
 800cafc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cafe:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800cb02:	ed96 da00 	vldr	s26, [r6]
 800cb06:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800cb08:	ee7f faac 	vadd.f32	s31, s31, s25
 800cb0c:	edd6 ca00 	vldr	s25, [r6]
 800cb10:	eedd ca03 	vfnms.f32	s25, s26, s6
 800cb14:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800cb18:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cb1a:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800cb1e:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800cb22:	eee0 5a03 	vfma.f32	s11, s0, s6
 800cb26:	eddd ba05 	vldr	s23, [sp, #20]
 800cb2a:	ed96 0a00 	vldr	s0, [r6]
 800cb2e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800cb30:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800cb34:	eeee fa03 	vfma.f32	s31, s28, s6
 800cb38:	eead 6a03 	vfma.f32	s12, s26, s6
 800cb3c:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800cb40:	eea0 4a03 	vfma.f32	s8, s0, s6
 800cb44:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800cb48:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800c8e4 <kalman_3gyro.constprop.0+0x3cc>
 800cb4c:	eee1 2a03 	vfma.f32	s5, s2, s6
 800cb50:	ee2c ca00 	vmul.f32	s24, s24, s0
 800cb54:	ee6b ba80 	vmul.f32	s23, s23, s0
 800cb58:	ed96 1a00 	vldr	s2, [r6]
 800cb5c:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800cb60:	eee0 4a83 	vfma.f32	s9, s1, s6
 800cb64:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800cb68:	ee6f faab 	vmul.f32	s31, s31, s23
 800cb6c:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800cb70:	ee60 6a26 	vmul.f32	s13, s0, s13
 800cb74:	eddc 0a00 	vldr	s1, [ip]
 800cb78:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800cb7c:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800cb80:	ee60 5a25 	vmul.f32	s11, s0, s11
 800cb84:	eea0 1a83 	vfma.f32	s2, s1, s6
 800cb88:	ee26 6a06 	vmul.f32	s12, s12, s12
 800cb8c:	ee6f faaf 	vmul.f32	s31, s31, s31
 800cb90:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800cb94:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800cb98:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800cb9c:	eee4 fa04 	vfma.f32	s31, s8, s8
 800cba0:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800cba4:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800cba8:	ee60 2a22 	vmul.f32	s5, s0, s5
 800cbac:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800cbb0:	eee1 fa01 	vfma.f32	s31, s2, s2
 800cbb4:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800cbb8:	eea1 5a82 	vfma.f32	s10, s3, s4
 800cbbc:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800c8e8 <kalman_3gyro.constprop.0+0x3d0>
 800cbc0:	eef0 4ac8 	vabs.f32	s9, s16
 800cbc4:	eef4 4ae5 	vcmpe.f32	s9, s11
 800cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbcc:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800cbd0:	eeb1 dac6 	vsqrt.f32	s26, s12
 800cbd4:	eef1 caef 	vsqrt.f32	s25, s31
 800cbd8:	eef1 bae6 	vsqrt.f32	s23, s13
 800cbdc:	ee67 daad 	vmul.f32	s27, s15, s27
 800cbe0:	eeb0 ca45 	vmov.f32	s24, s10
 800cbe4:	d517      	bpl.n	800cc16 <kalman_3gyro.constprop.0+0x6fe>
 800cbe6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cbea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf2:	f2c1 806f 	blt.w	800dcd4 <kalman_3gyro.constprop.0+0x17bc>
 800cbf6:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cbfa:	ee17 0a90 	vmov	r0, s15
 800cbfe:	f7f3 fca3 	bl	8000548 <__aeabi_f2d>
 800cc02:	ec41 0b10 	vmov	d0, r0, r1
 800cc06:	f008 fb3f 	bl	8015288 <floor>
 800cc0a:	ec51 0b10 	vmov	r0, r1, d0
 800cc0e:	f7f3 ffcb 	bl	8000ba8 <__aeabi_d2f>
 800cc12:	ee08 0a10 	vmov	s16, r0
 800cc16:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800c8e8 <kalman_3gyro.constprop.0+0x3d0>
 800cc1a:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800cc1e:	eef0 6ace 	vabs.f32	s13, s28
 800cc22:	eef4 6ae7 	vcmpe.f32	s13, s15
 800cc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2a:	d517      	bpl.n	800cc5c <kalman_3gyro.constprop.0+0x744>
 800cc2c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cc30:	eeb4 eae7 	vcmpe.f32	s28, s15
 800cc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc38:	f2c1 8040 	blt.w	800dcbc <kalman_3gyro.constprop.0+0x17a4>
 800cc3c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800cc40:	ee17 0a90 	vmov	r0, s15
 800cc44:	f7f3 fc80 	bl	8000548 <__aeabi_f2d>
 800cc48:	ec41 0b10 	vmov	d0, r0, r1
 800cc4c:	f008 fb1c 	bl	8015288 <floor>
 800cc50:	ec51 0b10 	vmov	r0, r1, d0
 800cc54:	f7f3 ffa8 	bl	8000ba8 <__aeabi_d2f>
 800cc58:	ee0e 0a10 	vmov	s28, r0
 800cc5c:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800c8e8 <kalman_3gyro.constprop.0+0x3d0>
 800cc60:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800cc64:	eeb0 7aed 	vabs.f32	s14, s27
 800cc68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc70:	d517      	bpl.n	800cca2 <kalman_3gyro.constprop.0+0x78a>
 800cc72:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cc76:	eef4 dae7 	vcmpe.f32	s27, s15
 800cc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7e:	f2c1 8011 	blt.w	800dca4 <kalman_3gyro.constprop.0+0x178c>
 800cc82:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800cc86:	ee17 0a90 	vmov	r0, s15
 800cc8a:	f7f3 fc5d 	bl	8000548 <__aeabi_f2d>
 800cc8e:	ec41 0b10 	vmov	d0, r0, r1
 800cc92:	f008 faf9 	bl	8015288 <floor>
 800cc96:	ec51 0b10 	vmov	r0, r1, d0
 800cc9a:	f7f3 ff85 	bl	8000ba8 <__aeabi_d2f>
 800cc9e:	ee0d 0a90 	vmov	s27, r0
 800cca2:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800cca6:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800ccaa:	1e61      	subs	r1, r4, #1
 800ccac:	b249      	sxtb	r1, r1
 800ccae:	2900      	cmp	r1, #0
 800ccb0:	dd1a      	ble.n	800cce8 <kalman_3gyro.constprop.0+0x7d0>
 800ccb2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ccb6:	1ea0      	subs	r0, r4, #2
 800ccb8:	0089      	lsls	r1, r1, #2
 800ccba:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800ccbe:	b2c0      	uxtb	r0, r0
 800ccc0:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800ccc4:	440a      	add	r2, r1
 800ccc6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ccca:	445b      	add	r3, fp
 800cccc:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800ccd0:	6819      	ldr	r1, [r3, #0]
 800ccd2:	6858      	ldr	r0, [r3, #4]
 800ccd4:	60d9      	str	r1, [r3, #12]
 800ccd6:	6899      	ldr	r1, [r3, #8]
 800ccd8:	6118      	str	r0, [r3, #16]
 800ccda:	6159      	str	r1, [r3, #20]
 800ccdc:	3b0c      	subs	r3, #12
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d1f6      	bne.n	800ccd0 <kalman_3gyro.constprop.0+0x7b8>
 800cce2:	9b04      	ldr	r3, [sp, #16]
 800cce4:	ed93 ba00 	vldr	s22, [r3]
 800cce8:	ed88 8a00 	vstr	s16, [r8]
 800ccec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ccf0:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800ccf4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ccf6:	ed83 ea00 	vstr	s28, [r3]
 800ccfa:	9b01      	ldr	r3, [sp, #4]
 800ccfc:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800cf94 <kalman_3gyro.constprop.0+0xa7c>
 800cd00:	edc3 da00 	vstr	s27, [r3]
 800cd04:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800cd08:	3301      	adds	r3, #1
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	429c      	cmp	r4, r3
 800cd0e:	bf28      	it	cs
 800cd10:	461c      	movcs	r4, r3
 800cd12:	9b08      	ldr	r3, [sp, #32]
 800cd14:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800cd18:	edd3 da03 	vldr	s27, [r3, #12]
 800cd1c:	ed93 ba04 	vldr	s22, [r3, #16]
 800cd20:	edd3 6a05 	vldr	s13, [r3, #20]
 800cd24:	ee68 da2d 	vmul.f32	s27, s16, s27
 800cd28:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800cd2c:	eeb0 7aed 	vabs.f32	s14, s27
 800cd30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd38:	ee28 8a26 	vmul.f32	s16, s16, s13
 800cd3c:	d517      	bpl.n	800cd6e <kalman_3gyro.constprop.0+0x856>
 800cd3e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd42:	eef4 dae7 	vcmpe.f32	s27, s15
 800cd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd4a:	f2c0 879f 	blt.w	800dc8c <kalman_3gyro.constprop.0+0x1774>
 800cd4e:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800cd52:	ee17 0a90 	vmov	r0, s15
 800cd56:	f7f3 fbf7 	bl	8000548 <__aeabi_f2d>
 800cd5a:	ec41 0b10 	vmov	d0, r0, r1
 800cd5e:	f008 fa93 	bl	8015288 <floor>
 800cd62:	ec51 0b10 	vmov	r0, r1, d0
 800cd66:	f7f3 ff1f 	bl	8000ba8 <__aeabi_d2f>
 800cd6a:	ee0d 0a90 	vmov	s27, r0
 800cd6e:	eddf 7a89 	vldr	s15, [pc, #548]	; 800cf94 <kalman_3gyro.constprop.0+0xa7c>
 800cd72:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800cd76:	eeb0 7acb 	vabs.f32	s14, s22
 800cd7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cd7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd82:	d517      	bpl.n	800cdb4 <kalman_3gyro.constprop.0+0x89c>
 800cd84:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cd88:	eeb4 bae7 	vcmpe.f32	s22, s15
 800cd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd90:	f2c0 8770 	blt.w	800dc74 <kalman_3gyro.constprop.0+0x175c>
 800cd94:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800cd98:	ee17 0a90 	vmov	r0, s15
 800cd9c:	f7f3 fbd4 	bl	8000548 <__aeabi_f2d>
 800cda0:	ec41 0b10 	vmov	d0, r0, r1
 800cda4:	f008 fa70 	bl	8015288 <floor>
 800cda8:	ec51 0b10 	vmov	r0, r1, d0
 800cdac:	f7f3 fefc 	bl	8000ba8 <__aeabi_d2f>
 800cdb0:	ee0b 0a10 	vmov	s22, r0
 800cdb4:	eddf 7a77 	vldr	s15, [pc, #476]	; 800cf94 <kalman_3gyro.constprop.0+0xa7c>
 800cdb8:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800cdbc:	eeb0 7ac8 	vabs.f32	s14, s16
 800cdc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc8:	d517      	bpl.n	800cdfa <kalman_3gyro.constprop.0+0x8e2>
 800cdca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cdce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cdd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd6:	f2c0 8741 	blt.w	800dc5c <kalman_3gyro.constprop.0+0x1744>
 800cdda:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cdde:	ee17 0a90 	vmov	r0, s15
 800cde2:	f7f3 fbb1 	bl	8000548 <__aeabi_f2d>
 800cde6:	ec41 0b10 	vmov	d0, r0, r1
 800cdea:	f008 fa4d 	bl	8015288 <floor>
 800cdee:	ec51 0b10 	vmov	r0, r1, d0
 800cdf2:	f7f3 fed9 	bl	8000ba8 <__aeabi_d2f>
 800cdf6:	ee08 0a10 	vmov	s16, r0
 800cdfa:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800cdfe:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800ce02:	1e61      	subs	r1, r4, #1
 800ce04:	b249      	sxtb	r1, r1
 800ce06:	2900      	cmp	r1, #0
 800ce08:	dd17      	ble.n	800ce3a <kalman_3gyro.constprop.0+0x922>
 800ce0a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ce0e:	1ea2      	subs	r2, r4, #2
 800ce10:	0089      	lsls	r1, r1, #2
 800ce12:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800ce1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ce20:	4401      	add	r1, r0
 800ce22:	445b      	add	r3, fp
 800ce24:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	6858      	ldr	r0, [r3, #4]
 800ce2c:	60da      	str	r2, [r3, #12]
 800ce2e:	689a      	ldr	r2, [r3, #8]
 800ce30:	6118      	str	r0, [r3, #16]
 800ce32:	615a      	str	r2, [r3, #20]
 800ce34:	3b0c      	subs	r3, #12
 800ce36:	4299      	cmp	r1, r3
 800ce38:	d1f6      	bne.n	800ce28 <kalman_3gyro.constprop.0+0x910>
 800ce3a:	9b02      	ldr	r3, [sp, #8]
 800ce3c:	edc7 da00 	vstr	s27, [r7]
 800ce40:	ed83 ba00 	vstr	s22, [r3]
 800ce44:	9b03      	ldr	r3, [sp, #12]
 800ce46:	eddf 7a53 	vldr	s15, [pc, #332]	; 800cf94 <kalman_3gyro.constprop.0+0xa7c>
 800ce4a:	ed83 8a00 	vstr	s16, [r3]
 800ce4e:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800ce52:	3301      	adds	r3, #1
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	429c      	cmp	r4, r3
 800ce58:	bf28      	it	cs
 800ce5a:	461c      	movcs	r4, r3
 800ce5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce5e:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800ce62:	ed93 7a00 	vldr	s14, [r3]
 800ce66:	9b08      	ldr	r3, [sp, #32]
 800ce68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ce6c:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800ce70:	edd3 da06 	vldr	s27, [r3, #24]
 800ce74:	ed93 ba07 	vldr	s22, [r3, #28]
 800ce78:	edd3 6a08 	vldr	s13, [r3, #32]
 800ce7c:	ee68 da2d 	vmul.f32	s27, s16, s27
 800ce80:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800ce84:	eeb0 7aed 	vabs.f32	s14, s27
 800ce88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ce8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce90:	ee28 8a26 	vmul.f32	s16, s16, s13
 800ce94:	d517      	bpl.n	800cec6 <kalman_3gyro.constprop.0+0x9ae>
 800ce96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ce9a:	eef4 dae7 	vcmpe.f32	s27, s15
 800ce9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea2:	f2c0 86cf 	blt.w	800dc44 <kalman_3gyro.constprop.0+0x172c>
 800cea6:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800ceaa:	ee17 0a90 	vmov	r0, s15
 800ceae:	f7f3 fb4b 	bl	8000548 <__aeabi_f2d>
 800ceb2:	ec41 0b10 	vmov	d0, r0, r1
 800ceb6:	f008 f9e7 	bl	8015288 <floor>
 800ceba:	ec51 0b10 	vmov	r0, r1, d0
 800cebe:	f7f3 fe73 	bl	8000ba8 <__aeabi_d2f>
 800cec2:	ee0d 0a90 	vmov	s27, r0
 800cec6:	eddf 7a33 	vldr	s15, [pc, #204]	; 800cf94 <kalman_3gyro.constprop.0+0xa7c>
 800ceca:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800cece:	eeb0 7acb 	vabs.f32	s14, s22
 800ced2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ced6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceda:	d517      	bpl.n	800cf0c <kalman_3gyro.constprop.0+0x9f4>
 800cedc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cee0:	eeb4 bae7 	vcmpe.f32	s22, s15
 800cee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee8:	f2c0 86a0 	blt.w	800dc2c <kalman_3gyro.constprop.0+0x1714>
 800ceec:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800cef0:	ee17 0a90 	vmov	r0, s15
 800cef4:	f7f3 fb28 	bl	8000548 <__aeabi_f2d>
 800cef8:	ec41 0b10 	vmov	d0, r0, r1
 800cefc:	f008 f9c4 	bl	8015288 <floor>
 800cf00:	ec51 0b10 	vmov	r0, r1, d0
 800cf04:	f7f3 fe50 	bl	8000ba8 <__aeabi_d2f>
 800cf08:	ee0b 0a10 	vmov	s22, r0
 800cf0c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800cf94 <kalman_3gyro.constprop.0+0xa7c>
 800cf10:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800cf14:	eeb0 7ac8 	vabs.f32	s14, s16
 800cf18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf20:	d517      	bpl.n	800cf52 <kalman_3gyro.constprop.0+0xa3a>
 800cf22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cf26:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cf2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf2e:	f2c0 8671 	blt.w	800dc14 <kalman_3gyro.constprop.0+0x16fc>
 800cf32:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cf36:	ee17 0a90 	vmov	r0, s15
 800cf3a:	f7f3 fb05 	bl	8000548 <__aeabi_f2d>
 800cf3e:	ec41 0b10 	vmov	d0, r0, r1
 800cf42:	f008 f9a1 	bl	8015288 <floor>
 800cf46:	ec51 0b10 	vmov	r0, r1, d0
 800cf4a:	f7f3 fe2d 	bl	8000ba8 <__aeabi_d2f>
 800cf4e:	ee08 0a10 	vmov	s16, r0
 800cf52:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800cf56:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800cf5a:	1e63      	subs	r3, r4, #1
 800cf5c:	b25b      	sxtb	r3, r3
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	dd1c      	ble.n	800cf9c <kalman_3gyro.constprop.0+0xa84>
 800cf62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800cf66:	1ea2      	subs	r2, r4, #2
 800cf68:	0099      	lsls	r1, r3, #2
 800cf6a:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800cf6e:	b2d2      	uxtb	r2, r2
 800cf70:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800cf74:	4408      	add	r0, r1
 800cf76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cf7a:	445b      	add	r3, fp
 800cf7c:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	6859      	ldr	r1, [r3, #4]
 800cf84:	60da      	str	r2, [r3, #12]
 800cf86:	689a      	ldr	r2, [r3, #8]
 800cf88:	6119      	str	r1, [r3, #16]
 800cf8a:	615a      	str	r2, [r3, #20]
 800cf8c:	3b0c      	subs	r3, #12
 800cf8e:	4283      	cmp	r3, r0
 800cf90:	d1f6      	bne.n	800cf80 <kalman_3gyro.constprop.0+0xa68>
 800cf92:	e003      	b.n	800cf9c <kalman_3gyro.constprop.0+0xa84>
 800cf94:	4b000000 	.word	0x4b000000
 800cf98:	00000000 	.word	0x00000000
 800cf9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf9e:	edc3 da00 	vstr	s27, [r3]
 800cfa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cfa4:	ed83 ba00 	vstr	s22, [r3]
 800cfa8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cfaa:	ed83 8a00 	vstr	s16, [r3]
 800cfae:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800cfb2:	3301      	adds	r3, #1
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	429c      	cmp	r4, r3
 800cfb8:	bf28      	it	cs
 800cfba:	461c      	movcs	r4, r3
 800cfbc:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800cfc0:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800cfc4:	aa54      	add	r2, sp, #336	; 0x150
 800cfc6:	a92d      	add	r1, sp, #180	; 0xb4
 800cfc8:	a830      	add	r0, sp, #192	; 0xc0
 800cfca:	461c      	mov	r4, r3
 800cfcc:	9314      	str	r3, [sp, #80]	; 0x50
 800cfce:	f7fe fa27 	bl	800b420 <getRotationMatrix>
 800cfd2:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800cfd6:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800cfda:	6820      	ldr	r0, [r4, #0]
 800cfdc:	6861      	ldr	r1, [r4, #4]
 800cfde:	68a2      	ldr	r2, [r4, #8]
 800cfe0:	68e3      	ldr	r3, [r4, #12]
 800cfe2:	4635      	mov	r5, r6
 800cfe4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cfe6:	3410      	adds	r4, #16
 800cfe8:	42bc      	cmp	r4, r7
 800cfea:	462e      	mov	r6, r5
 800cfec:	d1f5      	bne.n	800cfda <kalman_3gyro.constprop.0+0xac2>
 800cfee:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800cff2:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800cff6:	6820      	ldr	r0, [r4, #0]
 800cff8:	6028      	str	r0, [r5, #0]
 800cffa:	eef0 7ae7 	vabs.f32	s15, s15
 800cffe:	eeb0 7ac7 	vabs.f32	s14, s14
 800d002:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00a:	f140 85a4 	bpl.w	800db56 <kalman_3gyro.constprop.0+0x163e>
 800d00e:	2303      	movs	r3, #3
 800d010:	2706      	movs	r7, #6
 800d012:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d016:	2604      	movs	r6, #4
 800d018:	2400      	movs	r4, #0
 800d01a:	eef0 7a47 	vmov.f32	s15, s14
 800d01e:	4632      	mov	r2, r6
 800d020:	46a2      	mov	sl, r4
 800d022:	2107      	movs	r1, #7
 800d024:	f04f 0c01 	mov.w	ip, #1
 800d028:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800d02c:	eeb0 7ac7 	vabs.f32	s14, s14
 800d030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d038:	f340 85ae 	ble.w	800db98 <kalman_3gyro.constprop.0+0x1680>
 800d03c:	2304      	movs	r3, #4
 800d03e:	2007      	movs	r0, #7
 800d040:	2108      	movs	r1, #8
 800d042:	9301      	str	r3, [sp, #4]
 800d044:	461c      	mov	r4, r3
 800d046:	9002      	str	r0, [sp, #8]
 800d048:	460a      	mov	r2, r1
 800d04a:	2306      	movs	r3, #6
 800d04c:	2003      	movs	r0, #3
 800d04e:	2605      	movs	r6, #5
 800d050:	f04f 0800 	mov.w	r8, #0
 800d054:	f04f 0a01 	mov.w	sl, #1
 800d058:	f04f 0c02 	mov.w	ip, #2
 800d05c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d05e:	442c      	add	r4, r5
 800d060:	442a      	add	r2, r5
 800d062:	edd4 6a00 	vldr	s13, [r4]
 800d066:	ed92 7a00 	vldr	s14, [r2]
 800d06a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d06e:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800d072:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800d076:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800d07a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d07e:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d082:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d086:	970c      	str	r7, [sp, #48]	; 0x30
 800d088:	9f01      	ldr	r7, [sp, #4]
 800d08a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d08e:	00b6      	lsls	r6, r6, #2
 800d090:	960a      	str	r6, [sp, #40]	; 0x28
 800d092:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d096:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800d09a:	edc4 7a00 	vstr	s15, [r4]
 800d09e:	edd2 7a00 	vldr	s15, [r2]
 800d0a2:	ed99 7a00 	vldr	s14, [r9]
 800d0a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d0aa:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d0ae:	9204      	str	r2, [sp, #16]
 800d0b0:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d0b4:	9205      	str	r2, [sp, #20]
 800d0b6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d0ba:	9209      	str	r2, [sp, #36]	; 0x24
 800d0bc:	00ba      	lsls	r2, r7, #2
 800d0be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d0c0:	9206      	str	r2, [sp, #24]
 800d0c2:	0080      	lsls	r0, r0, #2
 800d0c4:	9003      	str	r0, [sp, #12]
 800d0c6:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d0ca:	0089      	lsls	r1, r1, #2
 800d0cc:	910b      	str	r1, [sp, #44]	; 0x2c
 800d0ce:	edc9 6a00 	vstr	s13, [r9]
 800d0d2:	ed94 6a00 	vldr	s12, [r4]
 800d0d6:	ed97 7a00 	vldr	s14, [r7]
 800d0da:	edd5 7a00 	vldr	s15, [r5]
 800d0de:	9902      	ldr	r1, [sp, #8]
 800d0e0:	9a02      	ldr	r2, [sp, #8]
 800d0e2:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d0e6:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d0ea:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d0ee:	0092      	lsls	r2, r2, #2
 800d0f0:	edc5 7a00 	vstr	s15, [r5]
 800d0f4:	ed97 7a00 	vldr	s14, [r7]
 800d0f8:	edde 7a00 	vldr	s15, [lr]
 800d0fc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	edce 7a00 	vstr	s15, [lr]
 800d106:	edd0 5a00 	vldr	s11, [r0]
 800d10a:	ed91 7a00 	vldr	s14, [r1]
 800d10e:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d112:	eef0 7ae7 	vabs.f32	s15, s15
 800d116:	ed81 7a00 	vstr	s14, [r1]
 800d11a:	ed90 6a00 	vldr	s12, [r0]
 800d11e:	ed96 7a00 	vldr	s14, [r6]
 800d122:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d126:	ed86 7a00 	vstr	s14, [r6]
 800d12a:	ed95 7a00 	vldr	s14, [r5]
 800d12e:	eeb0 7ac7 	vabs.f32	s14, s14
 800d132:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d13a:	dd10      	ble.n	800d15e <kalman_3gyro.constprop.0+0xc46>
 800d13c:	4652      	mov	r2, sl
 800d13e:	46c2      	mov	sl, r8
 800d140:	4690      	mov	r8, r2
 800d142:	461a      	mov	r2, r3
 800d144:	9b01      	ldr	r3, [sp, #4]
 800d146:	9902      	ldr	r1, [sp, #8]
 800d148:	9803      	ldr	r0, [sp, #12]
 800d14a:	9006      	str	r0, [sp, #24]
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	9303      	str	r3, [sp, #12]
 800d150:	008b      	lsls	r3, r1, #2
 800d152:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800d156:	9105      	str	r1, [sp, #20]
 800d158:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800d15c:	9104      	str	r1, [sp, #16]
 800d15e:	9903      	ldr	r1, [sp, #12]
 800d160:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800d164:	4401      	add	r1, r0
 800d166:	460c      	mov	r4, r1
 800d168:	9906      	ldr	r1, [sp, #24]
 800d16a:	ed94 7a00 	vldr	s14, [r4]
 800d16e:	4401      	add	r1, r0
 800d170:	edd1 7a00 	vldr	s15, [r1]
 800d174:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d178:	4608      	mov	r0, r1
 800d17a:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d17e:	440a      	add	r2, r1
 800d180:	440b      	add	r3, r1
 800d182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d184:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d188:	4429      	add	r1, r5
 800d18a:	460d      	mov	r5, r1
 800d18c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d18e:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d192:	4431      	add	r1, r6
 800d194:	468e      	mov	lr, r1
 800d196:	ed84 3a00 	vstr	s6, [r4]
 800d19a:	ed92 7a00 	vldr	s14, [r2]
 800d19e:	edd3 7a00 	vldr	s15, [r3]
 800d1a2:	9904      	ldr	r1, [sp, #16]
 800d1a4:	eee3 7a47 	vfms.f32	s15, s6, s14
 800d1a8:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800d1ac:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d1b0:	440e      	add	r6, r1
 800d1b2:	1879      	adds	r1, r7, r1
 800d1b4:	edc3 7a00 	vstr	s15, [r3]
 800d1b8:	9101      	str	r1, [sp, #4]
 800d1ba:	9b05      	ldr	r3, [sp, #20]
 800d1bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d1be:	edd2 0a00 	vldr	s1, [r2]
 800d1c2:	ed95 1a00 	vldr	s2, [r5]
 800d1c6:	ed9e 2a00 	vldr	s4, [lr]
 800d1ca:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d1ce:	edd6 6a00 	vldr	s13, [r6]
 800d1d2:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d1d6:	1874      	adds	r4, r6, r1
 800d1d8:	18f7      	adds	r7, r6, r3
 800d1da:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d1de:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d1e2:	eb06 0903 	add.w	r9, r6, r3
 800d1e6:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d1ea:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d1ee:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d1f2:	4633      	mov	r3, r6
 800d1f4:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d1f8:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d1fc:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d200:	448c      	add	ip, r1
 800d202:	9901      	ldr	r1, [sp, #4]
 800d204:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d208:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d20c:	ed94 7a00 	vldr	s14, [r4]
 800d210:	ed93 6a00 	vldr	s12, [r3]
 800d214:	edd0 7a00 	vldr	s15, [r0]
 800d218:	ed99 8a00 	vldr	s16, [r9]
 800d21c:	ed91 ba00 	vldr	s22, [r1]
 800d220:	ed97 4a00 	vldr	s8, [r7]
 800d224:	edd6 4a00 	vldr	s9, [r6]
 800d228:	eddc da00 	vldr	s27, [ip]
 800d22c:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d230:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d234:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d238:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d23c:	46a2      	mov	sl, r4
 800d23e:	4613      	mov	r3, r2
 800d240:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d244:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d248:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d24c:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d250:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d254:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d258:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d25c:	ed94 5a00 	vldr	s10, [r4]
 800d260:	edda 3a00 	vldr	s7, [sl]
 800d264:	edd2 5a00 	vldr	s11, [r2]
 800d268:	edd3 7a00 	vldr	s15, [r3]
 800d26c:	eeab 5a64 	vfms.f32	s10, s22, s9
 800d270:	eee8 5a64 	vfms.f32	s11, s16, s9
 800d274:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800d278:	eee6 7a48 	vfms.f32	s15, s12, s16
 800d27c:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800d280:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800d284:	eee3 5a45 	vfms.f32	s11, s6, s10
 800d288:	eee3 7a63 	vfms.f32	s15, s6, s7
 800d28c:	ee20 4a04 	vmul.f32	s8, s0, s8
 800d290:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d294:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d298:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800d29c:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800d2a0:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800d2a4:	eea1 7a44 	vfms.f32	s14, s2, s8
 800d2a8:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800d2ac:	eee1 4a65 	vfms.f32	s9, s2, s11
 800d2b0:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800d2b4:	ee21 5a85 	vmul.f32	s10, s3, s10
 800d2b8:	eea2 7a66 	vfms.f32	s14, s4, s13
 800d2bc:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800d2c0:	eee2 4a45 	vfms.f32	s9, s4, s10
 800d2c4:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800d2c8:	ee28 7a07 	vmul.f32	s14, s16, s14
 800d2cc:	ee37 3a85 	vadd.f32	s6, s15, s10
 800d2d0:	ee68 4a24 	vmul.f32	s9, s16, s9
 800d2d4:	ee26 8a08 	vmul.f32	s16, s12, s16
 800d2d8:	ee37 6a43 	vsub.f32	s12, s14, s6
 800d2dc:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800d2e0:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800d2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2e8:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800d2ec:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800d2f0:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800d2f4:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d2f8:	bfc8      	it	gt
 800d2fa:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800d2fe:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800d302:	bfcc      	ite	gt
 800d304:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800d308:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800cf98 <kalman_3gyro.constprop.0+0xa80>
 800d30c:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800d310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d314:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800d318:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800d31c:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d320:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800d324:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800d328:	f100 84e4 	bmi.w	800dcf4 <kalman_3gyro.constprop.0+0x17dc>
 800d32c:	bfd8      	it	le
 800d32e:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800d332:	ee37 6a87 	vadd.f32	s12, s15, s14
 800d336:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800d33a:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d33e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d342:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800d346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34a:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800d34e:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d352:	bf84      	itt	hi
 800d354:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800d358:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800d35c:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800d360:	bf8c      	ite	hi
 800d362:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800d366:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800d6e8 <kalman_3gyro.constprop.0+0x11d0>
 800d36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36e:	f100 84bd 	bmi.w	800dcec <kalman_3gyro.constprop.0+0x17d4>
 800d372:	bfd8      	it	le
 800d374:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800d378:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d37c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d380:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d384:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d390:	bf84      	itt	hi
 800d392:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800d396:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800d39a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d39e:	bf8c      	ite	hi
 800d3a0:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800d3a4:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800d6e8 <kalman_3gyro.constprop.0+0x11d0>
 800d3a8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b0:	ee63 3a86 	vmul.f32	s7, s7, s12
 800d3b4:	f102 8399 	bmi.w	800faea <kalman_3gyro.constprop.0+0x35d2>
 800d3b8:	bfd8      	it	le
 800d3ba:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800d3be:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800d3c2:	1e53      	subs	r3, r2, #1
 800d3c4:	b25b      	sxtb	r3, r3
 800d3c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3d0:	dd1c      	ble.n	800d40c <kalman_3gyro.constprop.0+0xef4>
 800d3d2:	3a02      	subs	r2, #2
 800d3d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3d8:	b2d2      	uxtb	r2, r2
 800d3da:	f1ab 000c 	sub.w	r0, fp, #12
 800d3de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d3e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d3e6:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d3ea:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d3ee:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800d3f2:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800d3f6:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800d3fa:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800d3fe:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800d402:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800d406:	3b0c      	subs	r3, #12
 800d408:	4283      	cmp	r3, r0
 800d40a:	d1f0      	bne.n	800d3ee <kalman_3gyro.constprop.0+0xed6>
 800d40c:	eddd 6a07 	vldr	s13, [sp, #28]
 800d410:	4ab6      	ldr	r2, [pc, #728]	; (800d6ec <kalman_3gyro.constprop.0+0x11d4>)
 800d412:	4bb7      	ldr	r3, [pc, #732]	; (800d6f0 <kalman_3gyro.constprop.0+0x11d8>)
 800d414:	ed92 8a00 	vldr	s16, [r2]
 800d418:	ed93 ba00 	vldr	s22, [r3]
 800d41c:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800d420:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d424:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d428:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800d42c:	f1c1 0101 	rsb	r1, r1, #1
 800d430:	910c      	str	r1, [sp, #48]	; 0x30
 800d432:	a92d      	add	r1, sp, #180	; 0xb4
 800d434:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800d438:	9123      	str	r1, [sp, #140]	; 0x8c
 800d43a:	2100      	movs	r1, #0
 800d43c:	9109      	str	r1, [sp, #36]	; 0x24
 800d43e:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800d442:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800d446:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800d44a:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800d44e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800d452:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800d456:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d45a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d45e:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800d462:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800d466:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800d46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d46e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d470:	3301      	adds	r3, #1
 800d472:	9309      	str	r3, [sp, #36]	; 0x24
 800d474:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d478:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800d47c:	18e0      	adds	r0, r4, r3
 800d47e:	f803 0f01 	strb.w	r0, [r3, #1]!
 800d482:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800d486:	f841 0b04 	str.w	r0, [r1], #4
 800d48a:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800d48e:	4298      	cmp	r0, r3
 800d490:	f102 020c 	add.w	r2, r2, #12
 800d494:	d1f2      	bne.n	800d47c <kalman_3gyro.constprop.0+0xf64>
 800d496:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800d49a:	ed93 7a00 	vldr	s14, [r3]
 800d49e:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800d4a2:	edd3 7a00 	vldr	s15, [r3]
 800d4a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ae:	bf84      	itt	hi
 800d4b0:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800d4b4:	f8a9 3000 	strhhi.w	r3, [r9]
 800d4b8:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800d4bc:	ed93 7a00 	vldr	s14, [r3]
 800d4c0:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800d4c4:	edd3 7a00 	vldr	s15, [r3]
 800d4c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	bf84      	itt	hi
 800d4d2:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800d4d6:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800d4da:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800d4de:	ed93 7a00 	vldr	s14, [r3]
 800d4e2:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800d4e6:	edd3 7a00 	vldr	s15, [r3]
 800d4ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4f2:	bf84      	itt	hi
 800d4f4:	f240 5306 	movwhi	r3, #1286	; 0x506
 800d4f8:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800d4fc:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800d500:	ed93 7a00 	vldr	s14, [r3]
 800d504:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800d508:	edd3 7a00 	vldr	s15, [r3]
 800d50c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d514:	bf84      	itt	hi
 800d516:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800d51a:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800d51e:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800d522:	ed93 7a00 	vldr	s14, [r3]
 800d526:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800d52a:	edd3 7a00 	vldr	s15, [r3]
 800d52e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d536:	bf84      	itt	hi
 800d538:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800d53c:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800d540:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800d544:	ed93 7a00 	vldr	s14, [r3]
 800d548:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800d54c:	edd3 7a00 	vldr	s15, [r3]
 800d550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d558:	bf84      	itt	hi
 800d55a:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800d55e:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800d562:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800d566:	ed93 7a00 	vldr	s14, [r3]
 800d56a:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800d56e:	edd3 7a00 	vldr	s15, [r3]
 800d572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57a:	bf84      	itt	hi
 800d57c:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800d580:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800d584:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800d588:	ed93 7a00 	vldr	s14, [r3]
 800d58c:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800d590:	edd3 7a00 	vldr	s15, [r3]
 800d594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d59c:	bf84      	itt	hi
 800d59e:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800d5a2:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800d5a6:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800d5aa:	ed93 7a00 	vldr	s14, [r3]
 800d5ae:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800d5b2:	edd3 7a00 	vldr	s15, [r3]
 800d5b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5be:	bf84      	itt	hi
 800d5c0:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800d5c4:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800d5c8:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800d5cc:	ed93 7a00 	vldr	s14, [r3]
 800d5d0:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800d5d4:	edd3 7a00 	vldr	s15, [r3]
 800d5d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e0:	bf84      	itt	hi
 800d5e2:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800d5e6:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800d5ea:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800d5ee:	ed93 7a00 	vldr	s14, [r3]
 800d5f2:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800d5f6:	edd3 7a00 	vldr	s15, [r3]
 800d5fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d602:	bf84      	itt	hi
 800d604:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800d608:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800d60c:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800d610:	ed93 7a00 	vldr	s14, [r3]
 800d614:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800d618:	edd3 7a00 	vldr	s15, [r3]
 800d61c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d624:	bf84      	itt	hi
 800d626:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800d62a:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800d62e:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800d632:	ed93 7a00 	vldr	s14, [r3]
 800d636:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800d63a:	edd3 7a00 	vldr	s15, [r3]
 800d63e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d646:	bf84      	itt	hi
 800d648:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800d64c:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800d650:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800d654:	ed93 7a00 	vldr	s14, [r3]
 800d658:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800d65c:	edd3 7a00 	vldr	s15, [r3]
 800d660:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d668:	bf84      	itt	hi
 800d66a:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800d66e:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800d672:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800d676:	ed93 7a00 	vldr	s14, [r3]
 800d67a:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800d67e:	edd3 7a00 	vldr	s15, [r3]
 800d682:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68a:	bf84      	itt	hi
 800d68c:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800d690:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800d694:	221e      	movs	r2, #30
 800d696:	2101      	movs	r1, #1
 800d698:	4650      	mov	r0, sl
 800d69a:	f009 fcbd 	bl	8017018 <memset>
 800d69e:	2304      	movs	r3, #4
 800d6a0:	9307      	str	r3, [sp, #28]
 800d6a2:	2302      	movs	r3, #2
 800d6a4:	9305      	str	r3, [sp, #20]
 800d6a6:	9b05      	ldr	r3, [sp, #20]
 800d6a8:	9306      	str	r3, [sp, #24]
 800d6aa:	1c5f      	adds	r7, r3, #1
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	9305      	str	r3, [sp, #20]
 800d6b0:	f04f 0b01 	mov.w	fp, #1
 800d6b4:	9b05      	ldr	r3, [sp, #20]
 800d6b6:	f8cd b004 	str.w	fp, [sp, #4]
 800d6ba:	445b      	add	r3, fp
 800d6bc:	2b1f      	cmp	r3, #31
 800d6be:	bfa8      	it	ge
 800d6c0:	231f      	movge	r3, #31
 800d6c2:	465a      	mov	r2, fp
 800d6c4:	eba3 0802 	sub.w	r8, r3, r2
 800d6c8:	f1b8 0f00 	cmp.w	r8, #0
 800d6cc:	469b      	mov	fp, r3
 800d6ce:	f107 35ff 	add.w	r5, r7, #4294967295
 800d6d2:	dd44      	ble.n	800d75e <kalman_3gyro.constprop.0+0x1246>
 800d6d4:	f10b 33ff 	add.w	r3, fp, #4294967295
 800d6d8:	9302      	str	r3, [sp, #8]
 800d6da:	f1ab 0302 	sub.w	r3, fp, #2
 800d6de:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800d6e2:	4616      	mov	r6, r2
 800d6e4:	2400      	movs	r4, #0
 800d6e6:	e00f      	b.n	800d708 <kalman_3gyro.constprop.0+0x11f0>
 800d6e8:	00000000 	.word	0x00000000
 800d6ec:	20001998 	.word	0x20001998
 800d6f0:	200019a8 	.word	0x200019a8
 800d6f4:	3f333333 	.word	0x3f333333
 800d6f8:	3f4ccccd 	.word	0x3f4ccccd
 800d6fc:	3f666666 	.word	0x3f666666
 800d700:	3ecccccc 	.word	0x3ecccccc
 800d704:	3dcccccd 	.word	0x3dcccccd
 800d708:	1e71      	subs	r1, r6, #1
 800d70a:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800d70e:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800d712:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800d716:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d71a:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800d71e:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800d722:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800d726:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72e:	f105 0c02 	add.w	ip, r5, #2
 800d732:	f105 0801 	add.w	r8, r5, #1
 800d736:	f240 81d3 	bls.w	800dae0 <kalman_3gyro.constprop.0+0x15c8>
 800d73a:	45e3      	cmp	fp, ip
 800d73c:	f80a 0004 	strb.w	r0, [sl, r4]
 800d740:	f000 81bf 	beq.w	800dac2 <kalman_3gyro.constprop.0+0x15aa>
 800d744:	4645      	mov	r5, r8
 800d746:	9b03      	ldr	r3, [sp, #12]
 800d748:	3401      	adds	r4, #1
 800d74a:	42a3      	cmp	r3, r4
 800d74c:	dcdc      	bgt.n	800d708 <kalman_3gyro.constprop.0+0x11f0>
 800d74e:	4698      	mov	r8, r3
 800d750:	9b01      	ldr	r3, [sp, #4]
 800d752:	1e58      	subs	r0, r3, #1
 800d754:	4448      	add	r0, r9
 800d756:	4642      	mov	r2, r8
 800d758:	4651      	mov	r1, sl
 800d75a:	f009 fc4f 	bl	8016ffc <memcpy>
 800d75e:	9b06      	ldr	r3, [sp, #24]
 800d760:	eb0b 0703 	add.w	r7, fp, r3
 800d764:	2f1e      	cmp	r7, #30
 800d766:	dda5      	ble.n	800d6b4 <kalman_3gyro.constprop.0+0x119c>
 800d768:	9b07      	ldr	r3, [sp, #28]
 800d76a:	3b01      	subs	r3, #1
 800d76c:	9307      	str	r3, [sp, #28]
 800d76e:	d19a      	bne.n	800d6a6 <kalman_3gyro.constprop.0+0x118e>
 800d770:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800d774:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800d778:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d77c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d780:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d784:	ed52 7a01 	vldr	s15, [r2, #-4]
 800d788:	ed13 7a01 	vldr	s14, [r3, #-4]
 800d78c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d794:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800d798:	460a      	mov	r2, r1
 800d79a:	bf4c      	ite	mi
 800d79c:	2201      	movmi	r2, #1
 800d79e:	2200      	movpl	r2, #0
 800d7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a4:	bf4c      	ite	mi
 800d7a6:	2301      	movmi	r3, #1
 800d7a8:	2300      	movpl	r3, #0
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	f000 81b4 	beq.w	800db18 <kalman_3gyro.constprop.0+0x1600>
 800d7b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d7b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d7b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d7bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7be:	ece3 7a01 	vstmia	r3!, {s15}
 800d7c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	930a      	str	r3, [sp, #40]	; 0x28
 800d7ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7cc:	2b03      	cmp	r3, #3
 800d7ce:	f47f ae4c 	bne.w	800d46a <kalman_3gyro.constprop.0+0xf52>
 800d7d2:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800d7d6:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800d7da:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800d7de:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800d6f4 <kalman_3gyro.constprop.0+0x11dc>
 800d7e2:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800d7e6:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800d6f8 <kalman_3gyro.constprop.0+0x11e0>
 800d7ea:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800d7ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d7f2:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800d7f6:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800d7fa:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800d7fe:	eee6 7a06 	vfma.f32	s15, s12, s12
 800d802:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800d806:	eeb0 6a67 	vmov.f32	s12, s15
 800d80a:	edcd 7a03 	vstr	s15, [sp, #12]
 800d80e:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800d812:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800d816:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800d81a:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800d81e:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800d822:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800d826:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d82a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800d82e:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800d832:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800d836:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800d83a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d83e:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800d842:	ee64 7a27 	vmul.f32	s15, s8, s15
 800d846:	ee25 7a07 	vmul.f32	s14, s10, s14
 800d84a:	ed8d 5a02 	vstr	s10, [sp, #8]
 800d84e:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800d852:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800d856:	2b00      	cmp	r3, #0
 800d858:	f040 81a4 	bne.w	800dba4 <kalman_3gyro.constprop.0+0x168c>
 800d85c:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800d860:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800d864:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800d868:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800d86c:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800d870:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800d874:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800d878:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800d87c:	f8c8 3020 	str.w	r3, [r8, #32]
 800d880:	ed88 7a07 	vstr	s14, [r8, #28]
 800d884:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800d888:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800d88c:	ed93 7a00 	vldr	s14, [r3]
 800d890:	ed92 8a00 	vldr	s16, [r2]
 800d894:	eddb ea02 	vldr	s29, [fp, #8]
 800d898:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800d89c:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800d8a0:	ed92 5a00 	vldr	s10, [r2]
 800d8a4:	ee28 8a07 	vmul.f32	s16, s16, s14
 800d8a8:	ed93 7a00 	vldr	s14, [r3]
 800d8ac:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d8b0:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800d8b4:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800d8b8:	ed92 5a00 	vldr	s10, [r2]
 800d8bc:	ed93 7a00 	vldr	s14, [r3]
 800d8c0:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d8c4:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800d8c8:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800d8cc:	ed92 5a00 	vldr	s10, [r2]
 800d8d0:	ed93 7a00 	vldr	s14, [r3]
 800d8d4:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d8d8:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800d8dc:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800d8e0:	ed92 5a00 	vldr	s10, [r2]
 800d8e4:	ed93 7a00 	vldr	s14, [r3]
 800d8e8:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800d8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f0:	eea5 8a07 	vfma.f32	s16, s10, s14
 800d8f4:	f340 8232 	ble.w	800dd5c <kalman_3gyro.constprop.0+0x1844>
 800d8f8:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800d8fc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d904:	f100 815e 	bmi.w	800dbc4 <kalman_3gyro.constprop.0+0x16ac>
 800d908:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800d90c:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800d910:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d918:	f142 84bd 	bpl.w	8010296 <kalman_3gyro.constprop.0+0x3d7e>
 800d91c:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800d920:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800d924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d928:	f342 850a 	ble.w	8010340 <kalman_3gyro.constprop.0+0x3e28>
 800d92c:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800d930:	eef4 2ac8 	vcmpe.f32	s5, s16
 800d934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d938:	f342 86c5 	ble.w	80106c6 <kalman_3gyro.constprop.0+0x41ae>
 800d93c:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800d940:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800d944:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800d948:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d94c:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d950:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800d954:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d958:	eef4 4ac8 	vcmpe.f32	s9, s16
 800d95c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d964:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d968:	f202 86c5 	bhi.w	80106f6 <kalman_3gyro.constprop.0+0x41de>
 800d96c:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800d970:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d978:	f342 86c5 	ble.w	8010706 <kalman_3gyro.constprop.0+0x41ee>
 800d97c:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800d980:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800d984:	ee38 3a64 	vsub.f32	s6, s16, s9
 800d988:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d98c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800d990:	ee64 4a03 	vmul.f32	s9, s8, s6
 800d994:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800d998:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d99c:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800d9a0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a8:	f202 86c5 	bhi.w	8010736 <kalman_3gyro.constprop.0+0x421e>
 800d9ac:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800d9b0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800d9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b8:	f343 8371 	ble.w	801109e <kalman_3gyro.constprop.0+0x4b86>
 800d9bc:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800d9c0:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800d9c4:	ee38 3a47 	vsub.f32	s6, s16, s14
 800d9c8:	ee34 4a63 	vsub.f32	s8, s8, s7
 800d9cc:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800d9d0:	ee24 4a03 	vmul.f32	s8, s8, s6
 800d9d4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800d9d8:	ee3e ea23 	vadd.f32	s28, s28, s7
 800d9dc:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800d9e0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800d9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e8:	f202 86c5 	bhi.w	8010776 <kalman_3gyro.constprop.0+0x425e>
 800d9ec:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800d9f0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800d9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f8:	f343 8359 	ble.w	80110ae <kalman_3gyro.constprop.0+0x4b96>
 800d9fc:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800da00:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800da04:	ee38 3a47 	vsub.f32	s6, s16, s14
 800da08:	ee34 4a63 	vsub.f32	s8, s8, s7
 800da0c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800da10:	ee24 4a03 	vmul.f32	s8, s8, s6
 800da14:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800da18:	ee3e ea23 	vadd.f32	s28, s28, s7
 800da1c:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800da20:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800da24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da28:	f2c2 86c5 	blt.w	80107b6 <kalman_3gyro.constprop.0+0x429e>
 800da2c:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800da30:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800da34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da38:	f143 832d 	bpl.w	8011096 <kalman_3gyro.constprop.0+0x4b7e>
 800da3c:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800da40:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800da44:	ee38 3a47 	vsub.f32	s6, s16, s14
 800da48:	ee34 4a63 	vsub.f32	s8, s8, s7
 800da4c:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800da50:	ee24 4a03 	vmul.f32	s8, s8, s6
 800da54:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800da58:	ee3e ea23 	vadd.f32	s28, s28, s7
 800da5c:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800da60:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800da64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da68:	f2c2 86c5 	blt.w	80107f6 <kalman_3gyro.constprop.0+0x42de>
 800da6c:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800da70:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800da74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da78:	f142 86c5 	bpl.w	8010806 <kalman_3gyro.constprop.0+0x42ee>
 800da7c:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800da80:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800da84:	ee78 3a64 	vsub.f32	s7, s16, s9
 800da88:	ee35 5a44 	vsub.f32	s10, s10, s8
 800da8c:	ee37 7a64 	vsub.f32	s14, s14, s9
 800da90:	ee25 5a23 	vmul.f32	s10, s10, s7
 800da94:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800da98:	ee3e ea04 	vadd.f32	s28, s28, s8
 800da9c:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800daa0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800daa4:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800daa8:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800daac:	e15a      	b.n	800dd64 <kalman_3gyro.constprop.0+0x184c>
 800daae:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800d6fc <kalman_3gyro.constprop.0+0x11e4>
 800dab2:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800d700 <kalman_3gyro.constprop.0+0x11e8>
 800dab6:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800d704 <kalman_3gyro.constprop.0+0x11ec>
 800daba:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800dabe:	f7fe bedd 	b.w	800c87c <kalman_3gyro.constprop.0+0x364>
 800dac2:	1c60      	adds	r0, r4, #1
 800dac4:	42be      	cmp	r6, r7
 800dac6:	eba7 0206 	sub.w	r2, r7, r6
 800daca:	4449      	add	r1, r9
 800dacc:	4450      	add	r0, sl
 800dace:	f6bf ae39 	bge.w	800d744 <kalman_3gyro.constprop.0+0x122c>
 800dad2:	443c      	add	r4, r7
 800dad4:	1ba4      	subs	r4, r4, r6
 800dad6:	f009 fa91 	bl	8016ffc <memcpy>
 800dada:	463e      	mov	r6, r7
 800dadc:	4645      	mov	r5, r8
 800dade:	e632      	b.n	800d746 <kalman_3gyro.constprop.0+0x122e>
 800dae0:	3601      	adds	r6, #1
 800dae2:	42be      	cmp	r6, r7
 800dae4:	f80a 2004 	strb.w	r2, [sl, r4]
 800dae8:	f47f ae2d 	bne.w	800d746 <kalman_3gyro.constprop.0+0x122e>
 800daec:	9b02      	ldr	r3, [sp, #8]
 800daee:	f105 0801 	add.w	r8, r5, #1
 800daf2:	1c60      	adds	r0, r4, #1
 800daf4:	45c3      	cmp	fp, r8
 800daf6:	eba3 0205 	sub.w	r2, r3, r5
 800dafa:	eb09 0105 	add.w	r1, r9, r5
 800dafe:	4450      	add	r0, sl
 800db00:	f77f ae21 	ble.w	800d746 <kalman_3gyro.constprop.0+0x122e>
 800db04:	f009 fa7a 	bl	8016ffc <memcpy>
 800db08:	9b02      	ldr	r3, [sp, #8]
 800db0a:	441c      	add	r4, r3
 800db0c:	9b04      	ldr	r3, [sp, #16]
 800db0e:	1b5a      	subs	r2, r3, r5
 800db10:	1b64      	subs	r4, r4, r5
 800db12:	eb02 0508 	add.w	r5, r2, r8
 800db16:	e616      	b.n	800d746 <kalman_3gyro.constprop.0+0x122e>
 800db18:	eef4 7a48 	vcmp.f32	s15, s16
 800db1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db20:	f43f ae46 	beq.w	800d7b0 <kalman_3gyro.constprop.0+0x1298>
 800db24:	eef4 7a4b 	vcmp.f32	s15, s22
 800db28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2c:	f43f ae40 	beq.w	800d7b0 <kalman_3gyro.constprop.0+0x1298>
 800db30:	eeb4 7a48 	vcmp.f32	s14, s16
 800db34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db38:	f43f ae3a 	beq.w	800d7b0 <kalman_3gyro.constprop.0+0x1298>
 800db3c:	eeb4 7a4b 	vcmp.f32	s14, s22
 800db40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db44:	f43f ae34 	beq.w	800d7b0 <kalman_3gyro.constprop.0+0x1298>
 800db48:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db4c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800db50:	eee7 7a26 	vfma.f32	s15, s14, s13
 800db54:	e632      	b.n	800d7bc <kalman_3gyro.constprop.0+0x12a4>
 800db56:	2304      	movs	r3, #4
 800db58:	9301      	str	r3, [sp, #4]
 800db5a:	2200      	movs	r2, #0
 800db5c:	461c      	mov	r4, r3
 800db5e:	2307      	movs	r3, #7
 800db60:	4694      	mov	ip, r2
 800db62:	2106      	movs	r1, #6
 800db64:	9302      	str	r3, [sp, #8]
 800db66:	2603      	movs	r6, #3
 800db68:	f04f 0a01 	mov.w	sl, #1
 800db6c:	f7ff ba5c 	b.w	800d028 <kalman_3gyro.constprop.0+0xb10>
 800db70:	9a08      	ldr	r2, [sp, #32]
 800db72:	eddf 7a62 	vldr	s15, [pc, #392]	; 800dcfc <kalman_3gyro.constprop.0+0x17e4>
 800db76:	eddf 5a62 	vldr	s11, [pc, #392]	; 800dd00 <kalman_3gyro.constprop.0+0x17e8>
 800db7a:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800dd04 <kalman_3gyro.constprop.0+0x17ec>
 800db7e:	4b62      	ldr	r3, [pc, #392]	; (800dd08 <kalman_3gyro.constprop.0+0x17f0>)
 800db80:	edc2 7a00 	vstr	s15, [r2]
 800db84:	eeb0 4a65 	vmov.f32	s8, s11
 800db88:	eeb0 3a67 	vmov.f32	s6, s15
 800db8c:	eef0 4a45 	vmov.f32	s9, s10
 800db90:	6053      	str	r3, [r2, #4]
 800db92:	6093      	str	r3, [r2, #8]
 800db94:	f7fe bd3e 	b.w	800c614 <kalman_3gyro.constprop.0+0xfc>
 800db98:	2308      	movs	r3, #8
 800db9a:	2005      	movs	r0, #5
 800db9c:	f04f 0802 	mov.w	r8, #2
 800dba0:	f7ff ba5c 	b.w	800d05c <kalman_3gyro.constprop.0+0xb44>
 800dba4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800dba8:	2300      	movs	r3, #0
 800dbaa:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800dbae:	ed88 7a07 	vstr	s14, [r8, #28]
 800dbb2:	ed88 7a08 	vstr	s14, [r8, #32]
 800dbb6:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800dbba:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800dbbe:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800dbc2:	e65f      	b.n	800d884 <kalman_3gyro.constprop.0+0x136c>
 800dbc4:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800dbc8:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800dbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd0:	f342 83b2 	ble.w	8010338 <kalman_3gyro.constprop.0+0x3e20>
 800dbd4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800dbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbdc:	f2c2 86e9 	blt.w	80109b2 <kalman_3gyro.constprop.0+0x449a>
 800dbe0:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800dbe4:	eef4 4ac8 	vcmpe.f32	s9, s16
 800dbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbec:	f342 8712 	ble.w	8010a14 <kalman_3gyro.constprop.0+0x44fc>
 800dbf0:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800dbf4:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800dbf8:	ee38 3a47 	vsub.f32	s6, s16, s14
 800dbfc:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dc00:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800dc04:	ee64 4a03 	vmul.f32	s9, s8, s6
 800dc08:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800dc0c:	ee3b ba23 	vadd.f32	s22, s22, s7
 800dc10:	f002 bed8 	b.w	80109c4 <kalman_3gyro.constprop.0+0x44ac>
 800dc14:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dc18:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800dc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc20:	f342 84bd 	ble.w	801059e <kalman_3gyro.constprop.0+0x4086>
 800dc24:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800dd0c <kalman_3gyro.constprop.0+0x17f4>
 800dc28:	f7ff b993 	b.w	800cf52 <kalman_3gyro.constprop.0+0xa3a>
 800dc2c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dc30:	eeb4 bac7 	vcmpe.f32	s22, s14
 800dc34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc38:	f342 849f 	ble.w	801057a <kalman_3gyro.constprop.0+0x4062>
 800dc3c:	ed9f ba33 	vldr	s22, [pc, #204]	; 800dd0c <kalman_3gyro.constprop.0+0x17f4>
 800dc40:	f7ff b964 	b.w	800cf0c <kalman_3gyro.constprop.0+0x9f4>
 800dc44:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dc48:	eef4 dac7 	vcmpe.f32	s27, s14
 800dc4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc50:	f342 84b7 	ble.w	80105c2 <kalman_3gyro.constprop.0+0x40aa>
 800dc54:	eddf da2d 	vldr	s27, [pc, #180]	; 800dd0c <kalman_3gyro.constprop.0+0x17f4>
 800dc58:	f7ff b935 	b.w	800cec6 <kalman_3gyro.constprop.0+0x9ae>
 800dc5c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dc60:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800dc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc68:	f342 8475 	ble.w	8010556 <kalman_3gyro.constprop.0+0x403e>
 800dc6c:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800dd0c <kalman_3gyro.constprop.0+0x17f4>
 800dc70:	f7ff b8c3 	b.w	800cdfa <kalman_3gyro.constprop.0+0x8e2>
 800dc74:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dc78:	eeb4 bac7 	vcmpe.f32	s22, s14
 800dc7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc80:	f342 83a0 	ble.w	80103c4 <kalman_3gyro.constprop.0+0x3eac>
 800dc84:	ed9f ba21 	vldr	s22, [pc, #132]	; 800dd0c <kalman_3gyro.constprop.0+0x17f4>
 800dc88:	f7ff b894 	b.w	800cdb4 <kalman_3gyro.constprop.0+0x89c>
 800dc8c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dc90:	eef4 dac7 	vcmpe.f32	s27, s14
 800dc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc98:	f342 8382 	ble.w	80103a0 <kalman_3gyro.constprop.0+0x3e88>
 800dc9c:	eddf da1b 	vldr	s27, [pc, #108]	; 800dd0c <kalman_3gyro.constprop.0+0x17f4>
 800dca0:	f7ff b865 	b.w	800cd6e <kalman_3gyro.constprop.0+0x856>
 800dca4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dca8:	eef4 dac7 	vcmpe.f32	s27, s14
 800dcac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcb0:	f342 8364 	ble.w	801037c <kalman_3gyro.constprop.0+0x3e64>
 800dcb4:	eddf da15 	vldr	s27, [pc, #84]	; 800dd0c <kalman_3gyro.constprop.0+0x17f4>
 800dcb8:	f7fe bff3 	b.w	800cca2 <kalman_3gyro.constprop.0+0x78a>
 800dcbc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dcc0:	eeb4 eac7 	vcmpe.f32	s28, s14
 800dcc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc8:	f342 8346 	ble.w	8010358 <kalman_3gyro.constprop.0+0x3e40>
 800dccc:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800dd0c <kalman_3gyro.constprop.0+0x17f4>
 800dcd0:	f7fe bfc4 	b.w	800cc5c <kalman_3gyro.constprop.0+0x744>
 800dcd4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800dcd8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800dcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce0:	f342 839e 	ble.w	8010420 <kalman_3gyro.constprop.0+0x3f08>
 800dce4:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800dd0c <kalman_3gyro.constprop.0+0x17f4>
 800dce8:	f7fe bf95 	b.w	800cc16 <kalman_3gyro.constprop.0+0x6fe>
 800dcec:	eef1 3a63 	vneg.f32	s7, s7
 800dcf0:	f7ff bb42 	b.w	800d378 <kalman_3gyro.constprop.0+0xe60>
 800dcf4:	eef1 3a63 	vneg.f32	s7, s7
 800dcf8:	f7ff bb1b 	b.w	800d332 <kalman_3gyro.constprop.0+0xe1a>
 800dcfc:	00000000 	.word	0x00000000
 800dd00:	3fb33333 	.word	0x3fb33333
 800dd04:	bfb33333 	.word	0xbfb33333
 800dd08:	3f333333 	.word	0x3f333333
 800dd0c:	80000000 	.word	0x80000000
 800dd10:	3fb77778 	.word	0x3fb77778
 800dd14:	3f99999a 	.word	0x3f99999a
 800dd18:	3f4ccccd 	.word	0x3f4ccccd
 800dd1c:	42d40000 	.word	0x42d40000
 800dd20:	46979000 	.word	0x46979000
 800dd24:	4415c000 	.word	0x4415c000
 800dd28:	3ba3d70a 	.word	0x3ba3d70a
 800dd2c:	3b449ba6 	.word	0x3b449ba6
 800dd30:	3c75c28f 	.word	0x3c75c28f
 800dd34:	3c23d70a 	.word	0x3c23d70a
 800dd38:	3d4cccc0 	.word	0x3d4cccc0
 800dd3c:	43480000 	.word	0x43480000
 800dd40:	3d4ccccd 	.word	0x3d4ccccd
 800dd44:	3cf5c28f 	.word	0x3cf5c28f
 800dd48:	3eb33334 	.word	0x3eb33334
 800dd4c:	3f933333 	.word	0x3f933333
 800dd50:	4247ffff 	.word	0x4247ffff
 800dd54:	3dcccccd 	.word	0x3dcccccd
 800dd58:	3e4ccccd 	.word	0x3e4ccccd
 800dd5c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800dd60:	eeb0 ba4e 	vmov.f32	s22, s28
 800dd64:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800dd68:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800dd6c:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800dd54 <kalman_3gyro.constprop.0+0x183c>
 800dd70:	ee79 da6d 	vsub.f32	s27, s18, s27
 800dd74:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800dd78:	eef0 daed 	vabs.f32	s27, s27
 800dd7c:	eeb0 5ac5 	vabs.f32	s10, s10
 800dd80:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800dd84:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800dd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8c:	f340 821c 	ble.w	800e1c8 <kalman_3gyro.constprop.0+0x1cb0>
 800dd90:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800dd10 <kalman_3gyro.constprop.0+0x17f8>
 800dd94:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800dd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9c:	f302 828b 	bgt.w	80102b6 <kalman_3gyro.constprop.0+0x3d9e>
 800dda0:	ee35 5a64 	vsub.f32	s10, s10, s9
 800dda4:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800dda8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ddac:	eee5 4a04 	vfma.f32	s9, s10, s8
 800ddb0:	eeb0 5a64 	vmov.f32	s10, s9
 800ddb4:	eeb4 5aea 	vcmpe.f32	s10, s21
 800ddb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddbc:	f89b 3000 	ldrb.w	r3, [fp]
 800ddc0:	bfb8      	it	lt
 800ddc2:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800ddc6:	ed8d 5a01 	vstr	s10, [sp, #4]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 81f9 	beq.w	800e1c2 <kalman_3gyro.constprop.0+0x1caa>
 800ddd0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	f000 81de 	beq.w	800e196 <kalman_3gyro.constprop.0+0x1c7e>
 800ddda:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800ddde:	2300      	movs	r3, #0
 800dde0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800dde4:	eeb0 6a61 	vmov.f32	s12, s3
 800dde8:	eea7 6a47 	vfms.f32	s12, s14, s14
 800ddec:	9908      	ldr	r1, [sp, #32]
 800ddee:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800ddf2:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800ddf6:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800ddfa:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800ddfe:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800de02:	eef1 0ac6 	vsqrt.f32	s1, s12
 800de06:	2200      	movs	r2, #0
 800de08:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800de0c:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800de10:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800de14:	9233      	str	r2, [sp, #204]	; 0xcc
 800de16:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800de1a:	ee23 4a85 	vmul.f32	s8, s7, s10
 800de1e:	ee36 2a06 	vadd.f32	s4, s12, s12
 800de22:	ee25 6a05 	vmul.f32	s12, s10, s10
 800de26:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800de2a:	ee36 6a06 	vadd.f32	s12, s12, s12
 800de2e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800de32:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800de36:	ee34 4a04 	vadd.f32	s8, s8, s8
 800de3a:	eeb0 3a42 	vmov.f32	s6, s4
 800de3e:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800de42:	eea1 3a25 	vfma.f32	s6, s2, s11
 800de46:	eef0 aa46 	vmov.f32	s21, s12
 800de4a:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800de4e:	eee1 aa25 	vfma.f32	s21, s2, s11
 800de52:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800de56:	ee65 6a26 	vmul.f32	s13, s10, s13
 800de5a:	ee22 5a85 	vmul.f32	s10, s5, s10
 800de5e:	eef0 2a44 	vmov.f32	s5, s8
 800de62:	eee0 2a25 	vfma.f32	s5, s0, s11
 800de66:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800de6a:	eeb0 fa64 	vmov.f32	s30, s9
 800de6e:	eea0 4a65 	vfms.f32	s8, s0, s11
 800de72:	ee71 fac3 	vsub.f32	s31, s3, s6
 800de76:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800de7a:	eeb0 1a6a 	vmov.f32	s2, s21
 800de7e:	eef0 aa66 	vmov.f32	s21, s13
 800de82:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800de86:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800de8a:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800de8e:	ee32 6a06 	vadd.f32	s12, s4, s12
 800de92:	ee22 2a87 	vmul.f32	s4, s5, s14
 800de96:	eea0 0a84 	vfma.f32	s0, s1, s8
 800de9a:	eea0 2a81 	vfma.f32	s4, s1, s2
 800de9e:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800dea2:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800dea6:	eef0 3a64 	vmov.f32	s7, s9
 800deaa:	eee5 3a65 	vfms.f32	s7, s10, s11
 800deae:	eee5 4a25 	vfma.f32	s9, s10, s11
 800deb2:	ee33 3a61 	vsub.f32	s6, s6, s3
 800deb6:	edd1 5a02 	vldr	s11, [r1, #8]
 800deba:	ed91 5a05 	vldr	s10, [r1, #20]
 800debe:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800dec2:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800dec6:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800deca:	edd1 1a01 	vldr	s3, [r1, #4]
 800dece:	edd1 fa00 	vldr	s31, [r1]
 800ded2:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800ded6:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800deda:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800dede:	edd1 5a03 	vldr	s11, [r1, #12]
 800dee2:	edd1 1a04 	vldr	s3, [r1, #16]
 800dee6:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800dd14 <kalman_3gyro.constprop.0+0x17fc>
 800deea:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800deee:	ee33 3a05 	vadd.f32	s6, s6, s10
 800def2:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800def6:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800defa:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800defe:	eef4 7ac4 	vcmpe.f32	s15, s8
 800df02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df06:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800df0a:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800df0e:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800df12:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800df16:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800df1a:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800df1e:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800df22:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800df26:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800df2a:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800df2e:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800df32:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800df36:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800df3a:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800df3e:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800df42:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800df46:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800df4a:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800df4e:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800df52:	d506      	bpl.n	800df62 <kalman_3gyro.constprop.0+0x1a4a>
 800df54:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800dd18 <kalman_3gyro.constprop.0+0x1800>
 800df58:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df60:	dc01      	bgt.n	800df66 <kalman_3gyro.constprop.0+0x1a4e>
 800df62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800df66:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800df6a:	eef0 7ae7 	vabs.f32	s15, s15
 800df6e:	ee77 7aab 	vadd.f32	s15, s15, s23
 800df72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df7a:	f340 8141 	ble.w	800e200 <kalman_3gyro.constprop.0+0x1ce8>
 800df7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800df82:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df8a:	f142 8198 	bpl.w	80102be <kalman_3gyro.constprop.0+0x3da6>
 800df8e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800dd28 <kalman_3gyro.constprop.0+0x1810>
 800df92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df96:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800dd34 <kalman_3gyro.constprop.0+0x181c>
 800df9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfa2:	f102 8221 	bmi.w	80103e8 <kalman_3gyro.constprop.0+0x3ed0>
 800dfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfaa:	f142 8221 	bpl.w	80103f0 <kalman_3gyro.constprop.0+0x3ed8>
 800dfae:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800dd30 <kalman_3gyro.constprop.0+0x1818>
 800dfb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfba:	f282 84a4 	bge.w	8010906 <kalman_3gyro.constprop.0+0x43ee>
 800dfbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dfc2:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800dd44 <kalman_3gyro.constprop.0+0x182c>
 800dfc6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800dfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfce:	f2c2 84b0 	blt.w	8010932 <kalman_3gyro.constprop.0+0x441a>
 800dfd2:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800dd40 <kalman_3gyro.constprop.0+0x1828>
 800dfd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfde:	f142 84b0 	bpl.w	8010942 <kalman_3gyro.constprop.0+0x442a>
 800dfe2:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800dd44 <kalman_3gyro.constprop.0+0x182c>
 800dfe6:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800dd50 <kalman_3gyro.constprop.0+0x1838>
 800dfea:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800dfee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800dff2:	ee66 6a87 	vmul.f32	s13, s13, s14
 800dff6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800dffa:	eea6 7a86 	vfma.f32	s14, s13, s12
 800dffe:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800dd54 <kalman_3gyro.constprop.0+0x183c>
 800e002:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e00a:	f2c2 84b0 	blt.w	801096e <kalman_3gyro.constprop.0+0x4456>
 800e00e:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800dd58 <kalman_3gyro.constprop.0+0x1840>
 800e012:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e01a:	f142 84b0 	bpl.w	801097e <kalman_3gyro.constprop.0+0x4466>
 800e01e:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800dd54 <kalman_3gyro.constprop.0+0x183c>
 800e022:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800dd1c <kalman_3gyro.constprop.0+0x1804>
 800e026:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e02a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e02e:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e032:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800e036:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e03a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e03e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e046:	db0d      	blt.n	800e064 <kalman_3gyro.constprop.0+0x1b4c>
 800e048:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e04c:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800dd20 <kalman_3gyro.constprop.0+0x1808>
 800e050:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800dd24 <kalman_3gyro.constprop.0+0x180c>
 800e054:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e058:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e05c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e060:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e068:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e06c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e070:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800e074:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800dd30 <kalman_3gyro.constprop.0+0x1818>
 800e078:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800dd28 <kalman_3gyro.constprop.0+0x1810>
 800e07c:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800dd34 <kalman_3gyro.constprop.0+0x181c>
 800e080:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800dd2c <kalman_3gyro.constprop.0+0x1814>
 800e084:	eef4 4ac6 	vcmpe.f32	s9, s12
 800e088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e08c:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e090:	bfb8      	it	lt
 800e092:	eef0 4a46 	vmovlt.f32	s9, s12
 800e096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e09a:	ee24 4a84 	vmul.f32	s8, s9, s8
 800e09e:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800e0a2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e0a6:	f142 841f 	bpl.w	80108e8 <kalman_3gyro.constprop.0+0x43d0>
 800e0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ae:	f2c2 841f 	blt.w	80108f0 <kalman_3gyro.constprop.0+0x43d8>
 800e0b2:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800dd30 <kalman_3gyro.constprop.0+0x1818>
 800e0b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0be:	f142 83ba 	bpl.w	8010836 <kalman_3gyro.constprop.0+0x431e>
 800e0c2:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800dd34 <kalman_3gyro.constprop.0+0x181c>
 800e0c6:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800dd38 <kalman_3gyro.constprop.0+0x1820>
 800e0ca:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800dd3c <kalman_3gyro.constprop.0+0x1824>
 800e0ce:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e0d6:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e0da:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e0de:	eeb0 ca66 	vmov.f32	s24, s13
 800e0e2:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800dd44 <kalman_3gyro.constprop.0+0x182c>
 800e0e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0ee:	f2c2 83ba 	blt.w	8010866 <kalman_3gyro.constprop.0+0x434e>
 800e0f2:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800dd40 <kalman_3gyro.constprop.0+0x1828>
 800e0f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0fe:	f142 83ba 	bpl.w	8010876 <kalman_3gyro.constprop.0+0x435e>
 800e102:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800dd44 <kalman_3gyro.constprop.0+0x182c>
 800e106:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800dd48 <kalman_3gyro.constprop.0+0x1830>
 800e10a:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800dd50 <kalman_3gyro.constprop.0+0x1838>
 800e10e:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800dd4c <kalman_3gyro.constprop.0+0x1834>
 800e112:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e116:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e11a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e11e:	eeb0 ca66 	vmov.f32	s24, s13
 800e122:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800dd54 <kalman_3gyro.constprop.0+0x183c>
 800e126:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e12e:	f2c2 83ba 	blt.w	80108a6 <kalman_3gyro.constprop.0+0x438e>
 800e132:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800dd58 <kalman_3gyro.constprop.0+0x1840>
 800e136:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e13e:	f142 83ba 	bpl.w	80108b6 <kalman_3gyro.constprop.0+0x439e>
 800e142:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e1d0 <kalman_3gyro.constprop.0+0x1cb8>
 800e146:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e1d4 <kalman_3gyro.constprop.0+0x1cbc>
 800e14a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e14e:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800e152:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e156:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800e15a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e15e:	eeb0 ca66 	vmov.f32	s24, s13
 800e162:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e166:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e16e:	f2c2 80b0 	blt.w	80102d2 <kalman_3gyro.constprop.0+0x3dba>
 800e172:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e176:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800e17a:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e1d8 <kalman_3gyro.constprop.0+0x1cc0>
 800e17e:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e1dc <kalman_3gyro.constprop.0+0x1cc4>
 800e182:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e186:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800e18a:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e18e:	eeb0 ca66 	vmov.f32	s24, s13
 800e192:	f002 b89e 	b.w	80102d2 <kalman_3gyro.constprop.0+0x3dba>
 800e196:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e19a:	ed9b 6a05 	vldr	s12, [fp, #20]
 800e19e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e1a2:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800e1a6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e1aa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e1ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e1b2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e1b6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1be:	f102 8246 	bmi.w	801064e <kalman_3gyro.constprop.0+0x4136>
 800e1c2:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e1c6:	e60b      	b.n	800dde0 <kalman_3gyro.constprop.0+0x18c8>
 800e1c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e1cc:	e5f2      	b.n	800ddb4 <kalman_3gyro.constprop.0+0x189c>
 800e1ce:	bf00      	nop
 800e1d0:	3dcccccd 	.word	0x3dcccccd
 800e1d4:	410c0000 	.word	0x410c0000
 800e1d8:	42c80000 	.word	0x42c80000
 800e1dc:	424a0000 	.word	0x424a0000
 800e1e0:	3c23d70a 	.word	0x3c23d70a
 800e1e4:	3b449ba6 	.word	0x3b449ba6
 800e1e8:	3fb33333 	.word	0x3fb33333
 800e1ec:	3ecccccd 	.word	0x3ecccccd
 800e1f0:	3f8f5c29 	.word	0x3f8f5c29
 800e1f4:	3f59999a 	.word	0x3f59999a
 800e1f8:	3e4ccccd 	.word	0x3e4ccccd
 800e1fc:	3f99999a 	.word	0x3f99999a
 800e200:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e204:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e1e0 <kalman_3gyro.constprop.0+0x1cc8>
 800e208:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e1e4 <kalman_3gyro.constprop.0+0x1ccc>
 800e20c:	eeb0 7a4c 	vmov.f32	s14, s24
 800e210:	eef0 4a4c 	vmov.f32	s9, s24
 800e214:	eddd 6a01 	vldr	s13, [sp, #4]
 800e218:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e21c:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e220:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e224:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e228:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e22c:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e230:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e234:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e238:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e23c:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e240:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e244:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e248:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e24c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e250:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e254:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e258:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e25c:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e260:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e264:	ee2e ea02 	vmul.f32	s28, s28, s4
 800e268:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e26c:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e270:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e274:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800e278:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800e27c:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800e280:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800e284:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e288:	2a00      	cmp	r2, #0
 800e28a:	f001 8411 	beq.w	800fab0 <kalman_3gyro.constprop.0+0x3598>
 800e28e:	ee77 2a07 	vadd.f32	s5, s14, s14
 800e292:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800e296:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e29a:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800e29e:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800e2a2:	ee24 4a24 	vmul.f32	s8, s8, s9
 800e2a6:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800e2aa:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e2ae:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e2b2:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e2b6:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e2ba:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800e2be:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800e2c2:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800e2c6:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e2ca:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800e2ce:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800e2d2:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e2d6:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800e2da:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800e2de:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800e2e2:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800e2e6:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800e2ea:	b159      	cbz	r1, 800e304 <kalman_3gyro.constprop.0+0x1dec>
 800e2ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e2f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e2f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2f8:	dd04      	ble.n	800e304 <kalman_3gyro.constprop.0+0x1dec>
 800e2fa:	2000      	movs	r0, #0
 800e2fc:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800e300:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800e304:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e30c:	dd09      	ble.n	800e322 <kalman_3gyro.constprop.0+0x1e0a>
 800e30e:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800e312:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31a:	db02      	blt.n	800e322 <kalman_3gyro.constprop.0+0x1e0a>
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	f002 8001 	beq.w	8010324 <kalman_3gyro.constprop.0+0x3e0c>
 800e322:	b132      	cbz	r2, 800e332 <kalman_3gyro.constprop.0+0x1e1a>
 800e324:	f240 1001 	movw	r0, #257	; 0x101
 800e328:	2301      	movs	r3, #1
 800e32a:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800e32e:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e332:	2301      	movs	r3, #1
 800e334:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e338:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e33c:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e1e8 <kalman_3gyro.constprop.0+0x1cd0>
 800e340:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e348:	dc09      	bgt.n	800e35e <kalman_3gyro.constprop.0+0x1e46>
 800e34a:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e1ec <kalman_3gyro.constprop.0+0x1cd4>
 800e34e:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e356:	d402      	bmi.n	800e35e <kalman_3gyro.constprop.0+0x1e46>
 800e358:	2a00      	cmp	r2, #0
 800e35a:	f042 80e4 	bne.w	8010526 <kalman_3gyro.constprop.0+0x400e>
 800e35e:	2300      	movs	r3, #0
 800e360:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e364:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e368:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e36c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e370:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e1f0 <kalman_3gyro.constprop.0+0x1cd8>
 800e374:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37c:	dc09      	bgt.n	800e392 <kalman_3gyro.constprop.0+0x1e7a>
 800e37e:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e1f4 <kalman_3gyro.constprop.0+0x1cdc>
 800e382:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e38a:	d402      	bmi.n	800e392 <kalman_3gyro.constprop.0+0x1e7a>
 800e38c:	2900      	cmp	r1, #0
 800e38e:	f042 8097 	bne.w	80104c0 <kalman_3gyro.constprop.0+0x3fa8>
 800e392:	2300      	movs	r3, #0
 800e394:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800e398:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800e39c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e3a0:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800e3a4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e3a8:	eef4 dae7 	vcmpe.f32	s27, s15
 800e3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3b0:	f341 836b 	ble.w	800fa8a <kalman_3gyro.constprop.0+0x3572>
 800e3b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e3b8:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800e3bc:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e3c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800e3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3ce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e3d2:	eef4 dac7 	vcmpe.f32	s27, s14
 800e3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3da:	bfc4      	itt	gt
 800e3dc:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800e3e0:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800e3e4:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e3e8:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e3ec:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800e3f0:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e3f4:	2b0e      	cmp	r3, #14
 800e3f6:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800e3fa:	dc02      	bgt.n	800e402 <kalman_3gyro.constprop.0+0x1eea>
 800e3fc:	3305      	adds	r3, #5
 800e3fe:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800e402:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e406:	eef4 7acd 	vcmpe.f32	s15, s26
 800e40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40e:	f340 82e9 	ble.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e412:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800e416:	eef4 7aeb 	vcmpe.f32	s15, s23
 800e41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e41e:	f340 82e1 	ble.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e422:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e426:	eef4 7aec 	vcmpe.f32	s15, s25
 800e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42e:	f340 82d9 	ble.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e432:	9b08      	ldr	r3, [sp, #32]
 800e434:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e1f8 <kalman_3gyro.constprop.0+0x1ce0>
 800e438:	ed93 7a06 	vldr	s14, [r3, #24]
 800e43c:	eef0 6ac7 	vabs.f32	s13, s14
 800e440:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e448:	f140 82cc 	bpl.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e44c:	edd3 6a07 	vldr	s13, [r3, #28]
 800e450:	eeb0 6ae6 	vabs.f32	s12, s13
 800e454:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e45c:	f140 82c2 	bpl.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e460:	ed93 6a08 	vldr	s12, [r3, #32]
 800e464:	eef0 4ac6 	vabs.f32	s9, s12
 800e468:	eef4 4ae7 	vcmpe.f32	s9, s15
 800e46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e470:	f140 82b8 	bpl.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e474:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e1fc <kalman_3gyro.constprop.0+0x1ce4>
 800e478:	eef0 5ae5 	vabs.f32	s11, s11
 800e47c:	eef4 5ae7 	vcmpe.f32	s11, s15
 800e480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e484:	f140 82ae 	bpl.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e488:	eef0 1ae1 	vabs.f32	s3, s3
 800e48c:	eef4 1ae7 	vcmpe.f32	s3, s15
 800e490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e494:	f140 82a6 	bpl.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e498:	eeb0 5ac5 	vabs.f32	s10, s10
 800e49c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800e4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a4:	f140 829e 	bpl.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e4a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4aa:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800e4ae:	edd3 5a00 	vldr	s11, [r3]
 800e4b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e4b4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e4b6:	ed93 5a00 	vldr	s10, [r3]
 800e4ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e4bc:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e4c0:	2a09      	cmp	r2, #9
 800e4c2:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800e4c6:	ed93 4a00 	vldr	s8, [r3]
 800e4ca:	edd4 3a00 	vldr	s7, [r4]
 800e4ce:	bf8c      	ite	hi
 800e4d0:	230a      	movhi	r3, #10
 800e4d2:	2305      	movls	r3, #5
 800e4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d8:	bfb4      	ite	lt
 800e4da:	eef0 7a45 	vmovlt.f32	s15, s10
 800e4de:	eef0 7a65 	vmovge.f32	s15, s11
 800e4e2:	bf8c      	ite	hi
 800e4e4:	eef0 4a45 	vmovhi.f32	s9, s10
 800e4e8:	eef0 4a65 	vmovls.f32	s9, s11
 800e4ec:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f4:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e4f8:	bfb8      	it	lt
 800e4fa:	eef0 7a63 	vmovlt.f32	s15, s7
 800e4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e502:	bf88      	it	hi
 800e504:	eef0 4a63 	vmovhi.f32	s9, s7
 800e508:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e510:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e514:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e518:	edd1 5a00 	vldr	s11, [r1]
 800e51c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e51e:	bfb8      	it	lt
 800e520:	eef0 7a44 	vmovlt.f32	s15, s8
 800e524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e528:	bf88      	it	hi
 800e52a:	eef0 4a44 	vmovhi.f32	s9, s8
 800e52e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e532:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e53a:	eef4 4ae5 	vcmpe.f32	s9, s11
 800e53e:	bfb8      	it	lt
 800e540:	eef0 7a65 	vmovlt.f32	s15, s11
 800e544:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e54c:	bf88      	it	hi
 800e54e:	eef0 4a65 	vmovhi.f32	s9, s11
 800e552:	2b05      	cmp	r3, #5
 800e554:	ee35 5a25 	vadd.f32	s10, s10, s11
 800e558:	edd1 5a00 	vldr	s11, [r1]
 800e55c:	d065      	beq.n	800e62a <kalman_3gyro.constprop.0+0x2112>
 800e55e:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800e562:	edd1 3a00 	vldr	s7, [r1]
 800e566:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800e56a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e56e:	ed91 4a00 	vldr	s8, [r1]
 800e572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e576:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e57a:	bfb8      	it	lt
 800e57c:	eef0 7a63 	vmovlt.f32	s15, s7
 800e580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e584:	bf88      	it	hi
 800e586:	eef0 4a63 	vmovhi.f32	s9, s7
 800e58a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e58e:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800e592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e596:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e59a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e59e:	edd1 3a00 	vldr	s7, [r1]
 800e5a2:	bfb8      	it	lt
 800e5a4:	eef0 7a44 	vmovlt.f32	s15, s8
 800e5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ac:	bf88      	it	hi
 800e5ae:	eef0 4a44 	vmovhi.f32	s9, s8
 800e5b2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e5b6:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800e5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5be:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e5c2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e5c6:	ed91 4a00 	vldr	s8, [r1]
 800e5ca:	bfb8      	it	lt
 800e5cc:	eef0 7a63 	vmovlt.f32	s15, s7
 800e5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5d4:	bf88      	it	hi
 800e5d6:	eef0 4a63 	vmovhi.f32	s9, s7
 800e5da:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e5de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e2:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e5e6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e5ea:	bfb8      	it	lt
 800e5ec:	eef0 7a44 	vmovlt.f32	s15, s8
 800e5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5f4:	bf88      	it	hi
 800e5f6:	eef0 4a44 	vmovhi.f32	s9, s8
 800e5fa:	2b0a      	cmp	r3, #10
 800e5fc:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e600:	d113      	bne.n	800e62a <kalman_3gyro.constprop.0+0x2112>
 800e602:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800e606:	ed91 4a00 	vldr	s8, [r1]
 800e60a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e612:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e616:	bfb8      	it	lt
 800e618:	eef0 7a44 	vmovlt.f32	s15, s8
 800e61c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e624:	bf88      	it	hi
 800e626:	eef0 4a44 	vmovhi.f32	s9, s8
 800e62a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e62e:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800e9cc <kalman_3gyro.constprop.0+0x24b4>
 800e632:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800e9d0 <kalman_3gyro.constprop.0+0x24b8>
 800e636:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e63a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800e63e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e646:	f300 81cd 	bgt.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e64a:	eef0 7ac5 	vabs.f32	s15, s10
 800e64e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e652:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800e9d4 <kalman_3gyro.constprop.0+0x24bc>
 800e656:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65e:	f300 81c1 	bgt.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e662:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e664:	ed91 5a00 	vldr	s10, [r1]
 800e668:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e66a:	ed91 4a00 	vldr	s8, [r1]
 800e66e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800e670:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e674:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800e678:	ed90 3a00 	vldr	s6, [r0]
 800e67c:	edd1 3a00 	vldr	s7, [r1]
 800e680:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e686:	bfb4      	ite	lt
 800e688:	eef0 7a44 	vmovlt.f32	s15, s8
 800e68c:	eef0 7a45 	vmovge.f32	s15, s10
 800e690:	bf8c      	ite	hi
 800e692:	eef0 4a44 	vmovhi.f32	s9, s8
 800e696:	eef0 4a45 	vmovls.f32	s9, s10
 800e69a:	eef4 7ac3 	vcmpe.f32	s15, s6
 800e69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6a2:	eef4 4ac3 	vcmpe.f32	s9, s6
 800e6a6:	bfb8      	it	lt
 800e6a8:	eef0 7a43 	vmovlt.f32	s15, s6
 800e6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6b0:	bf88      	it	hi
 800e6b2:	eef0 4a43 	vmovhi.f32	s9, s6
 800e6b6:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6be:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e6c2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e6c6:	ed91 4a00 	vldr	s8, [r1]
 800e6ca:	bfb8      	it	lt
 800e6cc:	eef0 7a63 	vmovlt.f32	s15, s7
 800e6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6d4:	bf88      	it	hi
 800e6d6:	eef0 4a63 	vmovhi.f32	s9, s7
 800e6da:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e6de:	ee35 5a03 	vadd.f32	s10, s10, s6
 800e6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6e6:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e6ea:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e6ee:	bfb8      	it	lt
 800e6f0:	eef0 7a44 	vmovlt.f32	s15, s8
 800e6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f8:	bf88      	it	hi
 800e6fa:	eef0 4a44 	vmovhi.f32	s9, s8
 800e6fe:	2b05      	cmp	r3, #5
 800e700:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e704:	d065      	beq.n	800e7d2 <kalman_3gyro.constprop.0+0x22ba>
 800e706:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800e70a:	edd1 3a00 	vldr	s7, [r1]
 800e70e:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800e712:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e716:	ed91 4a00 	vldr	s8, [r1]
 800e71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e71e:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e722:	bfb8      	it	lt
 800e724:	eef0 7a63 	vmovlt.f32	s15, s7
 800e728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72c:	bf88      	it	hi
 800e72e:	eef0 4a63 	vmovhi.f32	s9, s7
 800e732:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e736:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800e73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e742:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e746:	edd1 3a00 	vldr	s7, [r1]
 800e74a:	bfb8      	it	lt
 800e74c:	eef0 7a44 	vmovlt.f32	s15, s8
 800e750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e754:	bf88      	it	hi
 800e756:	eef0 4a44 	vmovhi.f32	s9, s8
 800e75a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e75e:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800e762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e766:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e76a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e76e:	ed91 4a00 	vldr	s8, [r1]
 800e772:	bfb8      	it	lt
 800e774:	eef0 7a63 	vmovlt.f32	s15, s7
 800e778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e77c:	bf88      	it	hi
 800e77e:	eef0 4a63 	vmovhi.f32	s9, s7
 800e782:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e78e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e792:	bfb8      	it	lt
 800e794:	eef0 7a44 	vmovlt.f32	s15, s8
 800e798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79c:	bf88      	it	hi
 800e79e:	eef0 4a44 	vmovhi.f32	s9, s8
 800e7a2:	2b0a      	cmp	r3, #10
 800e7a4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e7a8:	d113      	bne.n	800e7d2 <kalman_3gyro.constprop.0+0x22ba>
 800e7aa:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800e7ae:	ed91 4a00 	vldr	s8, [r1]
 800e7b2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ba:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e7be:	bfb8      	it	lt
 800e7c0:	eef0 7a44 	vmovlt.f32	s15, s8
 800e7c4:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7cc:	bf88      	it	hi
 800e7ce:	eef0 4a44 	vmovhi.f32	s9, s8
 800e7d2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e7d6:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800e9cc <kalman_3gyro.constprop.0+0x24b4>
 800e7da:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800e9d0 <kalman_3gyro.constprop.0+0x24b8>
 800e7de:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e7e2:	ee25 5a04 	vmul.f32	s10, s10, s8
 800e7e6:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ee:	f300 80f9 	bgt.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e7f2:	eef0 7ac5 	vabs.f32	s15, s10
 800e7f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e7fa:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800e9d4 <kalman_3gyro.constprop.0+0x24bc>
 800e7fe:	eef4 7ac5 	vcmpe.f32	s15, s10
 800e802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e806:	f300 80ed 	bgt.w	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e80a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e80c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800e80e:	edd1 4a00 	vldr	s9, [r1]
 800e812:	9919      	ldr	r1, [sp, #100]	; 0x64
 800e814:	ed91 3a00 	vldr	s6, [r1]
 800e818:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e81a:	eef4 4ac3 	vcmpe.f32	s9, s6
 800e81e:	ed91 4a00 	vldr	s8, [r1]
 800e822:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800e826:	edd1 3a00 	vldr	s7, [r1]
 800e82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e82e:	bfb4      	ite	lt
 800e830:	eef0 7a43 	vmovlt.f32	s15, s6
 800e834:	eef0 7a64 	vmovge.f32	s15, s9
 800e838:	bf8c      	ite	hi
 800e83a:	eeb0 5a43 	vmovhi.f32	s10, s6
 800e83e:	eeb0 5a64 	vmovls.f32	s10, s9
 800e842:	eef4 3ae7 	vcmpe.f32	s7, s15
 800e846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e84a:	eef4 3ac5 	vcmpe.f32	s7, s10
 800e84e:	bfa8      	it	ge
 800e850:	eef0 7a63 	vmovge.f32	s15, s7
 800e854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e858:	bf98      	it	ls
 800e85a:	eeb0 5a63 	vmovls.f32	s10, s7
 800e85e:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800e862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e866:	ee34 3a83 	vadd.f32	s6, s9, s6
 800e86a:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800e86e:	edd5 4a00 	vldr	s9, [r5]
 800e872:	bfa8      	it	ge
 800e874:	eef0 7a44 	vmovge.f32	s15, s8
 800e878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e87c:	bf98      	it	ls
 800e87e:	eeb0 5a44 	vmovls.f32	s10, s8
 800e882:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e886:	ee73 3a83 	vadd.f32	s7, s7, s6
 800e88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e88e:	eef4 4ac5 	vcmpe.f32	s9, s10
 800e892:	bfb8      	it	lt
 800e894:	eef0 7a64 	vmovlt.f32	s15, s9
 800e898:	ee34 4a23 	vadd.f32	s8, s8, s7
 800e89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a0:	bf98      	it	ls
 800e8a2:	eeb0 5a64 	vmovls.f32	s10, s9
 800e8a6:	2b05      	cmp	r3, #5
 800e8a8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800e8ac:	d065      	beq.n	800e97a <kalman_3gyro.constprop.0+0x2462>
 800e8ae:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800e8b2:	ed95 4a00 	vldr	s8, [r5]
 800e8b6:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800e8ba:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e8be:	ed95 3a00 	vldr	s6, [r5]
 800e8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8c6:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e8ca:	bfb8      	it	lt
 800e8cc:	eef0 7a44 	vmovlt.f32	s15, s8
 800e8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8d4:	bf88      	it	hi
 800e8d6:	eeb0 5a44 	vmovhi.f32	s10, s8
 800e8da:	eef4 7ac3 	vcmpe.f32	s15, s6
 800e8de:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800e8e2:	edd5 3a00 	vldr	s7, [r5]
 800e8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ea:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800e8ee:	bfb8      	it	lt
 800e8f0:	eef0 7a43 	vmovlt.f32	s15, s6
 800e8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f8:	bf88      	it	hi
 800e8fa:	eeb0 5a43 	vmovhi.f32	s10, s6
 800e8fe:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e902:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800e906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90a:	ee34 4a24 	vadd.f32	s8, s8, s9
 800e90e:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800e912:	edd5 4a00 	vldr	s9, [r5]
 800e916:	bfb8      	it	lt
 800e918:	eef0 7a63 	vmovlt.f32	s15, s7
 800e91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e920:	bf88      	it	hi
 800e922:	eeb0 5a63 	vmovhi.f32	s10, s7
 800e926:	eef4 7ae4 	vcmpe.f32	s15, s9
 800e92a:	ee34 4a03 	vadd.f32	s8, s8, s6
 800e92e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e932:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e936:	bfb8      	it	lt
 800e938:	eef0 7a64 	vmovlt.f32	s15, s9
 800e93c:	ee34 4a23 	vadd.f32	s8, s8, s7
 800e940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e944:	bf88      	it	hi
 800e946:	eeb0 5a64 	vmovhi.f32	s10, s9
 800e94a:	2b0a      	cmp	r3, #10
 800e94c:	ee74 4a24 	vadd.f32	s9, s8, s9
 800e950:	d113      	bne.n	800e97a <kalman_3gyro.constprop.0+0x2462>
 800e952:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800e956:	ed93 4a00 	vldr	s8, [r3]
 800e95a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e962:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e966:	bfb8      	it	lt
 800e968:	eef0 7a44 	vmovlt.f32	s15, s8
 800e96c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800e970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e974:	bf88      	it	hi
 800e976:	eeb0 5a44 	vmovhi.f32	s10, s8
 800e97a:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800e97e:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800e9cc <kalman_3gyro.constprop.0+0x24b4>
 800e982:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800e9d0 <kalman_3gyro.constprop.0+0x24b8>
 800e986:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e98a:	ee64 4a85 	vmul.f32	s9, s9, s10
 800e98e:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e996:	dc25      	bgt.n	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e998:	eef0 7ae4 	vabs.f32	s15, s9
 800e99c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800e9a0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800e9d4 <kalman_3gyro.constprop.0+0x24bc>
 800e9a4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800e9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ac:	dc1a      	bgt.n	800e9e4 <kalman_3gyro.constprop.0+0x24cc>
 800e9ae:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800e9b2:	2d00      	cmp	r5, #0
 800e9b4:	f000 80e0 	beq.w	800eb78 <kalman_3gyro.constprop.0+0x2660>
 800e9b8:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	f002 8439 	beq.w	8011234 <kalman_3gyro.constprop.0+0x4d1c>
 800e9c2:	2201      	movs	r2, #1
 800e9c4:	462b      	mov	r3, r5
 800e9c6:	9201      	str	r2, [sp, #4]
 800e9c8:	e01c      	b.n	800ea04 <kalman_3gyro.constprop.0+0x24ec>
 800e9ca:	bf00      	nop
 800e9cc:	3be56041 	.word	0x3be56041
 800e9d0:	3dcccccd 	.word	0x3dcccccd
 800e9d4:	3e333333 	.word	0x3e333333
 800e9d8:	3d088889 	.word	0x3d088889
 800e9dc:	42480000 	.word	0x42480000
 800e9e0:	00000000 	.word	0x00000000
 800e9e4:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800e9ee:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	f000 80c1 	beq.w	800eb7a <kalman_3gyro.constprop.0+0x2662>
 800e9f8:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800e9fc:	2a01      	cmp	r2, #1
 800e9fe:	f001 8615 	beq.w	801062c <kalman_3gyro.constprop.0+0x4114>
 800ea02:	9101      	str	r1, [sp, #4]
 800ea04:	2b02      	cmp	r3, #2
 800ea06:	f041 87d2 	bne.w	80109ae <kalman_3gyro.constprop.0+0x4496>
 800ea0a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800ea0e:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800ea12:	f240 1301 	movw	r3, #257	; 0x101
 800ea16:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800ea20:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800ea24:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800ea28:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800ea2c:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800ea30:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800ea34:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800ea38:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800ea3c:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800ea40:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800ea44:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ea48:	eef4 7ac8 	vcmpe.f32	s15, s16
 800ea4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea50:	f2c2 809a 	blt.w	8010b88 <kalman_3gyro.constprop.0+0x4670>
 800ea54:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800ea58:	2a00      	cmp	r2, #0
 800ea5a:	f002 83db 	beq.w	8011214 <kalman_3gyro.constprop.0+0x4cfc>
 800ea5e:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800ea62:	3301      	adds	r3, #1
 800ea64:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800ea68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ea6c:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800ea70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea74:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800ea78:	f002 84da 	beq.w	8011430 <kalman_3gyro.constprop.0+0x4f18>
 800ea7c:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800ea80:	f002 80d0 	beq.w	8010c24 <kalman_3gyro.constprop.0+0x470c>
 800ea84:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ea88:	2a00      	cmp	r2, #0
 800ea8a:	f042 80d0 	bne.w	8010c2e <kalman_3gyro.constprop.0+0x4716>
 800ea8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ea90:	a830      	add	r0, sp, #192	; 0xc0
 800ea92:	f04f 31ff 	mov.w	r1, #4294967295
 800ea96:	4613      	mov	r3, r2
 800ea98:	edd2 7a00 	vldr	s15, [r2]
 800ea9c:	3101      	adds	r1, #1
 800ea9e:	330c      	adds	r3, #12
 800eaa0:	3204      	adds	r2, #4
 800eaa2:	461c      	mov	r4, r3
 800eaa4:	ed94 7a00 	vldr	s14, [r4]
 800eaa8:	330c      	adds	r3, #12
 800eaaa:	4598      	cmp	r8, r3
 800eaac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eab0:	d1f7      	bne.n	800eaa2 <kalman_3gyro.constprop.0+0x258a>
 800eab2:	2902      	cmp	r1, #2
 800eab4:	ece0 7a01 	vstmia	r0!, {s15}
 800eab8:	f108 0804 	add.w	r8, r8, #4
 800eabc:	d1eb      	bne.n	800ea96 <kalman_3gyro.constprop.0+0x257e>
 800eabe:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e9d8 <kalman_3gyro.constprop.0+0x24c0>
 800eac2:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800eac6:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800eaca:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800eace:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800ead0:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800ead4:	ee24 4a27 	vmul.f32	s8, s8, s15
 800ead8:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800eadc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800eae0:	460a      	mov	r2, r1
 800eae2:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800eae6:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800eaea:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800eaee:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800eaf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafa:	f103 030c 	add.w	r3, r3, #12
 800eafe:	bf88      	it	hi
 800eb00:	eef0 7a47 	vmovhi.f32	s15, s14
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d1f2      	bne.n	800eaee <kalman_3gyro.constprop.0+0x25d6>
 800eb08:	1d1a      	adds	r2, r3, #4
 800eb0a:	4290      	cmp	r0, r2
 800eb0c:	ece4 7a01 	vstmia	r4!, {s15}
 800eb10:	d1e9      	bne.n	800eae6 <kalman_3gyro.constprop.0+0x25ce>
 800eb12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb14:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800eb18:	edd3 7a00 	vldr	s15, [r3]
 800eb1c:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800eb20:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800eb24:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800eb28:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800eb2c:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800eb30:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800eb34:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800eb38:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800eb3c:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800eb40:	b14b      	cbz	r3, 800eb56 <kalman_3gyro.constprop.0+0x263e>
 800eb42:	ed9d 7a03 	vldr	s14, [sp, #12]
 800eb46:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800eb4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb52:	f102 8553 	bmi.w	80115fc <kalman_3gyro.constprop.0+0x50e4>
 800eb56:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800eb5a:	2a1e      	cmp	r2, #30
 800eb5c:	f002 84dd 	beq.w	801151a <kalman_3gyro.constprop.0+0x5002>
 800eb60:	1c53      	adds	r3, r2, #1
 800eb62:	2aff      	cmp	r2, #255	; 0xff
 800eb64:	bf14      	ite	ne
 800eb66:	b2db      	uxtbne	r3, r3
 800eb68:	23ff      	moveq	r3, #255	; 0xff
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800eb70:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800eb74:	9b01      	ldr	r3, [sp, #4]
 800eb76:	e012      	b.n	800eb9e <kalman_3gyro.constprop.0+0x2686>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800eb7e:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800eb82:	9181      	str	r1, [sp, #516]	; 0x204
 800eb84:	9282      	str	r2, [sp, #520]	; 0x208
 800eb86:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800eb8a:	9183      	str	r1, [sp, #524]	; 0x20c
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800eb92:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800eb96:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800eb9a:	f88b 2001 	strb.w	r2, [fp, #1]
 800eb9e:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800e9dc <kalman_3gyro.constprop.0+0x24c4>
 800eba2:	eeb4 cae7 	vcmpe.f32	s24, s15
 800eba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebaa:	f2c0 875f 	blt.w	800fa6c <kalman_3gyro.constprop.0+0x3554>
 800ebae:	2200      	movs	r2, #0
 800ebb0:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800ebb4:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800ebb8:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d125      	bne.n	800ec0c <kalman_3gyro.constprop.0+0x26f4>
 800ebc0:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800ebc4:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800ebc8:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800ebcc:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800ebd0:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800ebd4:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800ebd8:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800ebdc:	ee25 5a24 	vmul.f32	s10, s10, s9
 800ebe0:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800ebe4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ebe8:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800ebec:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ebf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ebf4:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800ebf8:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800ebfc:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800ec00:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800ec04:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800ec08:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800ec0c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800ec10:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800ec14:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800ec18:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800ec1c:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800ec20:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800ec24:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800ec28:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800ec2c:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800ec30:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800ec34:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800ec38:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800ec3c:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800ec40:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800ec44:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800ec48:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800ec4c:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800ec50:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800ec54:	eee7 3a07 	vfma.f32	s7, s14, s14
 800ec58:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800ec5c:	9301      	str	r3, [sp, #4]
 800ec5e:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800ec62:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800ec66:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800ec6a:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800ec6e:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800ec72:	eea8 3a08 	vfma.f32	s6, s16, s16
 800ec76:	2500      	movs	r5, #0
 800ec78:	eea0 4a00 	vfma.f32	s8, s0, s0
 800ec7c:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800ec80:	eea1 5a01 	vfma.f32	s10, s2, s2
 800ec84:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800ec88:	eea2 6a02 	vfma.f32	s12, s4, s4
 800ec8c:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800ec90:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800ec94:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800ec98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ec9c:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800eca0:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800eca4:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800eca8:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800ecac:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800ecb0:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800ecb4:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800ecb8:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800ecbc:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800ecc0:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800ecc4:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800ecc8:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800eccc:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800ecd0:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800ecd4:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800ecd8:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800ecdc:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800ece0:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800ece4:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800e9e0 <kalman_3gyro.constprop.0+0x24c8>
 800ece8:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800ecec:	ee24 4a04 	vmul.f32	s8, s8, s8
 800ecf0:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800ecf4:	ee25 5a05 	vmul.f32	s10, s10, s10
 800ecf8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800ecfc:	ee26 6a06 	vmul.f32	s12, s12, s12
 800ed00:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800ed04:	ee27 7a07 	vmul.f32	s14, s14, s14
 800ed08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ed0c:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800ed10:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800ed14:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800ed18:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800ed1c:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800ed20:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800ed24:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800ed28:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800ed2c:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800ed30:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800ed34:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800ed38:	e005      	b.n	800ed46 <kalman_3gyro.constprop.0+0x282e>
 800ed3a:	3501      	adds	r5, #1
 800ed3c:	2d0c      	cmp	r5, #12
 800ed3e:	f104 0404 	add.w	r4, r4, #4
 800ed42:	f000 84fe 	beq.w	800f742 <kalman_3gyro.constprop.0+0x322a>
 800ed46:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d0f5      	beq.n	800ed3a <kalman_3gyro.constprop.0+0x2822>
 800ed4e:	edd4 da00 	vldr	s27, [r4]
 800ed52:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800ed56:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800ed5a:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800ed5e:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800ed62:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800ed66:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800ed6a:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800ed6e:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800ed72:	9b01      	ldr	r3, [sp, #4]
 800ed74:	ed89 8a00 	vstr	s16, [r9]
 800ed78:	ed89 8a01 	vstr	s16, [r9, #4]
 800ed7c:	ed89 8a02 	vstr	s16, [r9, #8]
 800ed80:	ed89 8a03 	vstr	s16, [r9, #12]
 800ed84:	ed89 8a04 	vstr	s16, [r9, #16]
 800ed88:	ed89 8a05 	vstr	s16, [r9, #20]
 800ed8c:	ed89 8a06 	vstr	s16, [r9, #24]
 800ed90:	ed89 8a07 	vstr	s16, [r9, #28]
 800ed94:	ed89 8a08 	vstr	s16, [r9, #32]
 800ed98:	464e      	mov	r6, r9
 800ed9a:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800ed9e:	464a      	mov	r2, r9
 800eda0:	ecb3 7a01 	vldmia	r3!, {s14}
 800eda4:	ecf2 7a01 	vldmia	r2!, {s15}
 800eda8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800edac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb0:	d006      	beq.n	800edc0 <kalman_3gyro.constprop.0+0x28a8>
 800edb2:	eef5 da40 	vcmp.f32	s27, #0.0
 800edb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edba:	bf18      	it	ne
 800edbc:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800edc0:	ed93 7a08 	vldr	s14, [r3, #32]
 800edc4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800edc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edcc:	d006      	beq.n	800eddc <kalman_3gyro.constprop.0+0x28c4>
 800edce:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800edd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edd6:	bf18      	it	ne
 800edd8:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800eddc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800ede0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ede4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede8:	d006      	beq.n	800edf8 <kalman_3gyro.constprop.0+0x28e0>
 800edea:	eef5 ea40 	vcmp.f32	s29, #0.0
 800edee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf2:	bf18      	it	ne
 800edf4:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800edf8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800edfc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee04:	d006      	beq.n	800ee14 <kalman_3gyro.constprop.0+0x28fc>
 800ee06:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ee0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee0e:	bf18      	it	ne
 800ee10:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800ee14:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800ee18:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee20:	d006      	beq.n	800ee30 <kalman_3gyro.constprop.0+0x2918>
 800ee22:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ee26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee2a:	bf18      	it	ne
 800ee2c:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800ee30:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800ee34:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee3c:	d006      	beq.n	800ee4c <kalman_3gyro.constprop.0+0x2934>
 800ee3e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ee42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee46:	bf18      	it	ne
 800ee48:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800ee4c:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800ee50:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee58:	d006      	beq.n	800ee68 <kalman_3gyro.constprop.0+0x2950>
 800ee5a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ee5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee62:	bf18      	it	ne
 800ee64:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800ee68:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800ee6c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee74:	d006      	beq.n	800ee84 <kalman_3gyro.constprop.0+0x296c>
 800ee76:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ee7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee7e:	bf18      	it	ne
 800ee80:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800ee84:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800ee88:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ee8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee90:	d006      	beq.n	800eea0 <kalman_3gyro.constprop.0+0x2988>
 800ee92:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ee96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee9a:	bf18      	it	ne
 800ee9c:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800eea0:	428b      	cmp	r3, r1
 800eea2:	ed42 7a01 	vstr	s15, [r2, #-4]
 800eea6:	f47f af7b 	bne.w	800eda0 <kalman_3gyro.constprop.0+0x2888>
 800eeaa:	eef5 da40 	vcmp.f32	s27, #0.0
 800eeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb2:	edd9 8a00 	vldr	s17, [r9]
 800eeb6:	f040 8543 	bne.w	800f940 <kalman_3gyro.constprop.0+0x3428>
 800eeba:	eef0 7a6d 	vmov.f32	s15, s27
 800eebe:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800eec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec6:	ed99 9a01 	vldr	s18, [r9, #4]
 800eeca:	d006      	beq.n	800eeda <kalman_3gyro.constprop.0+0x29c2>
 800eecc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800eed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed4:	bf18      	it	ne
 800eed6:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800eeda:	eef5 ea40 	vcmp.f32	s29, #0.0
 800eede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee2:	edd9 aa02 	vldr	s21, [r9, #8]
 800eee6:	d006      	beq.n	800eef6 <kalman_3gyro.constprop.0+0x29de>
 800eee8:	eef5 aa40 	vcmp.f32	s21, #0.0
 800eeec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef0:	bf18      	it	ne
 800eef2:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800eef6:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800eefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eefe:	edd9 ba03 	vldr	s23, [r9, #12]
 800ef02:	d006      	beq.n	800ef12 <kalman_3gyro.constprop.0+0x29fa>
 800ef04:	eef5 ba40 	vcmp.f32	s23, #0.0
 800ef08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef0c:	bf18      	it	ne
 800ef0e:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800ef12:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ef16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef1a:	edd9 ca04 	vldr	s25, [r9, #16]
 800ef1e:	d006      	beq.n	800ef2e <kalman_3gyro.constprop.0+0x2a16>
 800ef20:	eef5 ca40 	vcmp.f32	s25, #0.0
 800ef24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef28:	bf18      	it	ne
 800ef2a:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800ef2e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ef32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef36:	ed99 ca05 	vldr	s24, [r9, #20]
 800ef3a:	d006      	beq.n	800ef4a <kalman_3gyro.constprop.0+0x2a32>
 800ef3c:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800ef40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef44:	bf18      	it	ne
 800ef46:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800ef4a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ef4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef52:	ed99 da06 	vldr	s26, [r9, #24]
 800ef56:	d006      	beq.n	800ef66 <kalman_3gyro.constprop.0+0x2a4e>
 800ef58:	eeb5 da40 	vcmp.f32	s26, #0.0
 800ef5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef60:	bf18      	it	ne
 800ef62:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800ef66:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ef6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef6e:	ed99 aa07 	vldr	s20, [r9, #28]
 800ef72:	d006      	beq.n	800ef82 <kalman_3gyro.constprop.0+0x2a6a>
 800ef74:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800ef78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef7c:	bf18      	it	ne
 800ef7e:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800ef82:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ef86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef8a:	ed99 ba08 	vldr	s22, [r9, #32]
 800ef8e:	d006      	beq.n	800ef9e <kalman_3gyro.constprop.0+0x2a86>
 800ef90:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800ef94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef98:	bf18      	it	ne
 800ef9a:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800ef9e:	ab87      	add	r3, sp, #540	; 0x21c
 800efa0:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800efa4:	ed92 7a00 	vldr	s14, [r2]
 800efa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800efac:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800efb0:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800efb4:	2d05      	cmp	r5, #5
 800efb6:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800efba:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800efbe:	ee29 9a27 	vmul.f32	s18, s18, s15
 800efc2:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800efc6:	ee6b baa7 	vmul.f32	s23, s23, s15
 800efca:	ee6c caa7 	vmul.f32	s25, s25, s15
 800efce:	ee2c ca27 	vmul.f32	s24, s24, s15
 800efd2:	ee2d da27 	vmul.f32	s26, s26, s15
 800efd6:	ee2a aa27 	vmul.f32	s20, s20, s15
 800efda:	ee2b ba27 	vmul.f32	s22, s22, s15
 800efde:	edc9 8a00 	vstr	s17, [r9]
 800efe2:	ed89 9a01 	vstr	s18, [r9, #4]
 800efe6:	edc9 aa02 	vstr	s21, [r9, #8]
 800efea:	edc9 ba03 	vstr	s23, [r9, #12]
 800efee:	edc9 ca04 	vstr	s25, [r9, #16]
 800eff2:	ed89 ca05 	vstr	s24, [r9, #20]
 800eff6:	ed89 da06 	vstr	s26, [r9, #24]
 800effa:	ed89 aa07 	vstr	s20, [r9, #28]
 800effe:	ed89 ba08 	vstr	s22, [r9, #32]
 800f002:	f340 8497 	ble.w	800f934 <kalman_3gyro.constprop.0+0x341c>
 800f006:	eef5 da40 	vcmp.f32	s27, #0.0
 800f00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00e:	f000 8510 	beq.w	800fa32 <kalman_3gyro.constprop.0+0x351a>
 800f012:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800f016:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f01a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f01e:	d001      	beq.n	800f024 <kalman_3gyro.constprop.0+0x2b0c>
 800f020:	ee67 7aad 	vmul.f32	s15, s15, s27
 800f024:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f02c:	d008      	beq.n	800f040 <kalman_3gyro.constprop.0+0x2b28>
 800f02e:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800f032:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03a:	bf18      	it	ne
 800f03c:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f040:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f048:	d008      	beq.n	800f05c <kalman_3gyro.constprop.0+0x2b44>
 800f04a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f04e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f056:	bf18      	it	ne
 800f058:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f05c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f064:	d008      	beq.n	800f078 <kalman_3gyro.constprop.0+0x2b60>
 800f066:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800f06a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	bf18      	it	ne
 800f074:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f078:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f080:	d008      	beq.n	800f094 <kalman_3gyro.constprop.0+0x2b7c>
 800f082:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800f086:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f08e:	bf18      	it	ne
 800f090:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f094:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f09c:	d008      	beq.n	800f0b0 <kalman_3gyro.constprop.0+0x2b98>
 800f09e:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800f0a2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0aa:	bf18      	it	ne
 800f0ac:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f0b0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b8:	d008      	beq.n	800f0cc <kalman_3gyro.constprop.0+0x2bb4>
 800f0ba:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800f0be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c6:	bf18      	it	ne
 800f0c8:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f0cc:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d4:	d008      	beq.n	800f0e8 <kalman_3gyro.constprop.0+0x2bd0>
 800f0d6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f0da:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e2:	bf18      	it	ne
 800f0e4:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f0e8:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f0:	d008      	beq.n	800f104 <kalman_3gyro.constprop.0+0x2bec>
 800f0f2:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800f0f6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0fe:	bf18      	it	ne
 800f100:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f104:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f106:	4413      	add	r3, r2
 800f108:	edd3 9a00 	vldr	s19, [r3]
 800f10c:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800f110:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f114:	2100      	movs	r1, #0
 800f116:	4650      	mov	r0, sl
 800f118:	ed8d 5a05 	vstr	s10, [sp, #20]
 800f11c:	edcd 5a04 	vstr	s11, [sp, #16]
 800f120:	ed8d 6a03 	vstr	s12, [sp, #12]
 800f124:	edcd 6a02 	vstr	s13, [sp, #8]
 800f128:	f007 ff76 	bl	8017018 <memset>
 800f12c:	ed9d 5a05 	vldr	s10, [sp, #20]
 800f130:	eddd 5a04 	vldr	s11, [sp, #16]
 800f134:	ed9d 6a03 	vldr	s12, [sp, #12]
 800f138:	eddd 6a02 	vldr	s13, [sp, #8]
 800f13c:	4651      	mov	r1, sl
 800f13e:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800f142:	4653      	mov	r3, sl
 800f144:	ecf6 7a01 	vldmia	r6!, {s15}
 800f148:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f150:	d062      	beq.n	800f218 <kalman_3gyro.constprop.0+0x2d00>
 800f152:	eef5 da40 	vcmp.f32	s27, #0.0
 800f156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15a:	d005      	beq.n	800f168 <kalman_3gyro.constprop.0+0x2c50>
 800f15c:	ed93 7a00 	vldr	s14, [r3]
 800f160:	eead 7aa7 	vfma.f32	s14, s27, s15
 800f164:	ed83 7a00 	vstr	s14, [r3]
 800f168:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f16c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f170:	d005      	beq.n	800f17e <kalman_3gyro.constprop.0+0x2c66>
 800f172:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f176:	eeae 7a27 	vfma.f32	s14, s28, s15
 800f17a:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800f17e:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f186:	d005      	beq.n	800f194 <kalman_3gyro.constprop.0+0x2c7c>
 800f188:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f18c:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800f190:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800f194:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19c:	d005      	beq.n	800f1aa <kalman_3gyro.constprop.0+0x2c92>
 800f19e:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800f1a2:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800f1a6:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800f1aa:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b2:	d005      	beq.n	800f1c0 <kalman_3gyro.constprop.0+0x2ca8>
 800f1b4:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f1b8:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f1bc:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f1c0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1c8:	d005      	beq.n	800f1d6 <kalman_3gyro.constprop.0+0x2cbe>
 800f1ca:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f1ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f1d2:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f1d6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f1da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1de:	d005      	beq.n	800f1ec <kalman_3gyro.constprop.0+0x2cd4>
 800f1e0:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f1e4:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f1e8:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f1ec:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f4:	d005      	beq.n	800f202 <kalman_3gyro.constprop.0+0x2cea>
 800f1f6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f1fa:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f1fe:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f202:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f20a:	d005      	beq.n	800f218 <kalman_3gyro.constprop.0+0x2d00>
 800f20c:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f210:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f214:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f218:	4296      	cmp	r6, r2
 800f21a:	f103 0304 	add.w	r3, r3, #4
 800f21e:	d191      	bne.n	800f144 <kalman_3gyro.constprop.0+0x2c2c>
 800f220:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f224:	4656      	mov	r6, sl
 800f226:	463b      	mov	r3, r7
 800f228:	2208      	movs	r2, #8
 800f22a:	2000      	movs	r0, #0
 800f22c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f230:	e074      	b.n	800f31c <kalman_3gyro.constprop.0+0x2e04>
 800f232:	edd6 7a00 	vldr	s15, [r6]
 800f236:	ed83 8a01 	vstr	s16, [r3, #4]
 800f23a:	eef1 7a67 	vneg.f32	s15, s15
 800f23e:	2801      	cmp	r0, #1
 800f240:	edc6 7a00 	vstr	s15, [r6]
 800f244:	f1a2 0c07 	sub.w	ip, r2, #7
 800f248:	f000 831e 	beq.w	800f888 <kalman_3gyro.constprop.0+0x3370>
 800f24c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f250:	eddc 7a00 	vldr	s15, [ip]
 800f254:	ed83 8a02 	vstr	s16, [r3, #8]
 800f258:	eef1 7a67 	vneg.f32	s15, s15
 800f25c:	2802      	cmp	r0, #2
 800f25e:	edcc 7a00 	vstr	s15, [ip]
 800f262:	f1a2 0c06 	sub.w	ip, r2, #6
 800f266:	f000 82f8 	beq.w	800f85a <kalman_3gyro.constprop.0+0x3342>
 800f26a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f26e:	eddc 7a00 	vldr	s15, [ip]
 800f272:	ed83 8a03 	vstr	s16, [r3, #12]
 800f276:	eef1 7a67 	vneg.f32	s15, s15
 800f27a:	2803      	cmp	r0, #3
 800f27c:	edcc 7a00 	vstr	s15, [ip]
 800f280:	f1a2 0c05 	sub.w	ip, r2, #5
 800f284:	d170      	bne.n	800f368 <kalman_3gyro.constprop.0+0x2e50>
 800f286:	edd6 7a03 	vldr	s15, [r6, #12]
 800f28a:	ed83 8a04 	vstr	s16, [r3, #16]
 800f28e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f292:	f1a2 0e04 	sub.w	lr, r2, #4
 800f296:	edc6 7a03 	vstr	s15, [r6, #12]
 800f29a:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f29e:	edde 7a00 	vldr	s15, [lr]
 800f2a2:	ed83 8a05 	vstr	s16, [r3, #20]
 800f2a6:	eef1 7a67 	vneg.f32	s15, s15
 800f2aa:	f1a2 0c03 	sub.w	ip, r2, #3
 800f2ae:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f2b2:	edce 7a00 	vstr	s15, [lr]
 800f2b6:	eddc 7a00 	vldr	s15, [ip]
 800f2ba:	ed83 8a06 	vstr	s16, [r3, #24]
 800f2be:	eef1 7a67 	vneg.f32	s15, s15
 800f2c2:	edcc 7a00 	vstr	s15, [ip]
 800f2c6:	f1a2 0c02 	sub.w	ip, r2, #2
 800f2ca:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f2ce:	eddc 7a00 	vldr	s15, [ip]
 800f2d2:	ed83 8a07 	vstr	s16, [r3, #28]
 800f2d6:	eef1 7a67 	vneg.f32	s15, s15
 800f2da:	2807      	cmp	r0, #7
 800f2dc:	edcc 7a00 	vstr	s15, [ip]
 800f2e0:	f102 3cff 	add.w	ip, r2, #4294967295
 800f2e4:	f040 80a2 	bne.w	800f42c <kalman_3gyro.constprop.0+0x2f14>
 800f2e8:	edd6 7a07 	vldr	s15, [r6, #28]
 800f2ec:	ed83 8a08 	vstr	s16, [r3, #32]
 800f2f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2f4:	edc6 7a07 	vstr	s15, [r6, #28]
 800f2f8:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800f2fc:	eddc 7a00 	vldr	s15, [ip]
 800f300:	3001      	adds	r0, #1
 800f302:	eef1 7a67 	vneg.f32	s15, s15
 800f306:	2809      	cmp	r0, #9
 800f308:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f30c:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800f310:	f102 0209 	add.w	r2, r2, #9
 800f314:	edcc 7a00 	vstr	s15, [ip]
 800f318:	f000 809f 	beq.w	800f45a <kalman_3gyro.constprop.0+0x2f42>
 800f31c:	ed83 8a00 	vstr	s16, [r3]
 800f320:	2800      	cmp	r0, #0
 800f322:	d186      	bne.n	800f232 <kalman_3gyro.constprop.0+0x2d1a>
 800f324:	edda 7a00 	vldr	s15, [sl]
 800f328:	ed83 8a01 	vstr	s16, [r3, #4]
 800f32c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f330:	f1a2 0e07 	sub.w	lr, r2, #7
 800f334:	edc6 7a00 	vstr	s15, [r6]
 800f338:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f33c:	edde 7a00 	vldr	s15, [lr]
 800f340:	ed83 8a02 	vstr	s16, [r3, #8]
 800f344:	eef1 7a67 	vneg.f32	s15, s15
 800f348:	f1a2 0c06 	sub.w	ip, r2, #6
 800f34c:	edce 7a00 	vstr	s15, [lr]
 800f350:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f354:	eddc 7a00 	vldr	s15, [ip]
 800f358:	ed83 8a03 	vstr	s16, [r3, #12]
 800f35c:	eef1 7a67 	vneg.f32	s15, s15
 800f360:	edcc 7a00 	vstr	s15, [ip]
 800f364:	f1a2 0c05 	sub.w	ip, r2, #5
 800f368:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f36c:	eddc 7a00 	vldr	s15, [ip]
 800f370:	ed83 8a04 	vstr	s16, [r3, #16]
 800f374:	eef1 7a67 	vneg.f32	s15, s15
 800f378:	2804      	cmp	r0, #4
 800f37a:	edcc 7a00 	vstr	s15, [ip]
 800f37e:	f1a2 0c04 	sub.w	ip, r2, #4
 800f382:	d031      	beq.n	800f3e8 <kalman_3gyro.constprop.0+0x2ed0>
 800f384:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f388:	eddc 7a00 	vldr	s15, [ip]
 800f38c:	ed83 8a05 	vstr	s16, [r3, #20]
 800f390:	eef1 7a67 	vneg.f32	s15, s15
 800f394:	2805      	cmp	r0, #5
 800f396:	edcc 7a00 	vstr	s15, [ip]
 800f39a:	f1a2 0c03 	sub.w	ip, r2, #3
 800f39e:	f000 8245 	beq.w	800f82c <kalman_3gyro.constprop.0+0x3314>
 800f3a2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f3a6:	eddc 7a00 	vldr	s15, [ip]
 800f3aa:	ed83 8a06 	vstr	s16, [r3, #24]
 800f3ae:	eef1 7a67 	vneg.f32	s15, s15
 800f3b2:	2806      	cmp	r0, #6
 800f3b4:	edcc 7a00 	vstr	s15, [ip]
 800f3b8:	f1a2 0c02 	sub.w	ip, r2, #2
 800f3bc:	d185      	bne.n	800f2ca <kalman_3gyro.constprop.0+0x2db2>
 800f3be:	edd6 7a06 	vldr	s15, [r6, #24]
 800f3c2:	ed83 8a07 	vstr	s16, [r3, #28]
 800f3c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3ca:	f102 3cff 	add.w	ip, r2, #4294967295
 800f3ce:	edc6 7a06 	vstr	s15, [r6, #24]
 800f3d2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f3d6:	eddc 7a00 	vldr	s15, [ip]
 800f3da:	ed83 8a08 	vstr	s16, [r3, #32]
 800f3de:	eef1 7a67 	vneg.f32	s15, s15
 800f3e2:	edcc 7a00 	vstr	s15, [ip]
 800f3e6:	e787      	b.n	800f2f8 <kalman_3gyro.constprop.0+0x2de0>
 800f3e8:	edd6 7a04 	vldr	s15, [r6, #16]
 800f3ec:	ed83 8a05 	vstr	s16, [r3, #20]
 800f3f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3f4:	f1a2 0e03 	sub.w	lr, r2, #3
 800f3f8:	edc6 7a04 	vstr	s15, [r6, #16]
 800f3fc:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f400:	edde 7a00 	vldr	s15, [lr]
 800f404:	ed83 8a06 	vstr	s16, [r3, #24]
 800f408:	eef1 7a67 	vneg.f32	s15, s15
 800f40c:	f1a2 0c02 	sub.w	ip, r2, #2
 800f410:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f414:	edce 7a00 	vstr	s15, [lr]
 800f418:	eddc 7a00 	vldr	s15, [ip]
 800f41c:	ed83 8a07 	vstr	s16, [r3, #28]
 800f420:	eef1 7a67 	vneg.f32	s15, s15
 800f424:	edcc 7a00 	vstr	s15, [ip]
 800f428:	f102 3cff 	add.w	ip, r2, #4294967295
 800f42c:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f430:	eddc 7a00 	vldr	s15, [ip]
 800f434:	ed83 8a08 	vstr	s16, [r3, #32]
 800f438:	eef1 7a67 	vneg.f32	s15, s15
 800f43c:	2808      	cmp	r0, #8
 800f43e:	edcc 7a00 	vstr	s15, [ip]
 800f442:	f47f af59 	bne.w	800f2f8 <kalman_3gyro.constprop.0+0x2de0>
 800f446:	ed96 7a08 	vldr	s14, [r6, #32]
 800f44a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f44e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f452:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800f456:	edc2 7a00 	vstr	s15, [r2]
 800f45a:	2000      	movs	r0, #0
 800f45c:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800f460:	ecb1 3a01 	vldmia	r1!, {s6}
 800f464:	edd1 3a08 	vldr	s7, [r1, #32]
 800f468:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800f46c:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800f470:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800f474:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800f478:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800f47c:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800f480:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800f484:	465a      	mov	r2, fp
 800f486:	463b      	mov	r3, r7
 800f488:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f490:	d00c      	beq.n	800f4ac <kalman_3gyro.constprop.0+0x2f94>
 800f492:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800f496:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49e:	d005      	beq.n	800f4ac <kalman_3gyro.constprop.0+0x2f94>
 800f4a0:	edd3 7a00 	vldr	s15, [r3]
 800f4a4:	eee3 7a22 	vfma.f32	s15, s6, s5
 800f4a8:	edc3 7a00 	vstr	s15, [r3]
 800f4ac:	eef5 3a40 	vcmp.f32	s7, #0.0
 800f4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b4:	d00c      	beq.n	800f4d0 <kalman_3gyro.constprop.0+0x2fb8>
 800f4b6:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800f4ba:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c2:	d005      	beq.n	800f4d0 <kalman_3gyro.constprop.0+0x2fb8>
 800f4c4:	edd3 7a00 	vldr	s15, [r3]
 800f4c8:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800f4cc:	edc3 7a00 	vstr	s15, [r3]
 800f4d0:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800f4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d8:	d00c      	beq.n	800f4f4 <kalman_3gyro.constprop.0+0x2fdc>
 800f4da:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800f4de:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e6:	d005      	beq.n	800f4f4 <kalman_3gyro.constprop.0+0x2fdc>
 800f4e8:	edd3 7a00 	vldr	s15, [r3]
 800f4ec:	eee4 7a22 	vfma.f32	s15, s8, s5
 800f4f0:	edc3 7a00 	vstr	s15, [r3]
 800f4f4:	eef5 4a40 	vcmp.f32	s9, #0.0
 800f4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4fc:	d00c      	beq.n	800f518 <kalman_3gyro.constprop.0+0x3000>
 800f4fe:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800f502:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50a:	d005      	beq.n	800f518 <kalman_3gyro.constprop.0+0x3000>
 800f50c:	edd3 7a00 	vldr	s15, [r3]
 800f510:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800f514:	edc3 7a00 	vstr	s15, [r3]
 800f518:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f520:	d00c      	beq.n	800f53c <kalman_3gyro.constprop.0+0x3024>
 800f522:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800f526:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52e:	d005      	beq.n	800f53c <kalman_3gyro.constprop.0+0x3024>
 800f530:	edd3 7a00 	vldr	s15, [r3]
 800f534:	eee5 7a22 	vfma.f32	s15, s10, s5
 800f538:	edc3 7a00 	vstr	s15, [r3]
 800f53c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f544:	d00c      	beq.n	800f560 <kalman_3gyro.constprop.0+0x3048>
 800f546:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800f54a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f552:	d005      	beq.n	800f560 <kalman_3gyro.constprop.0+0x3048>
 800f554:	edd3 7a00 	vldr	s15, [r3]
 800f558:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800f55c:	edc3 7a00 	vstr	s15, [r3]
 800f560:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f568:	d00c      	beq.n	800f584 <kalman_3gyro.constprop.0+0x306c>
 800f56a:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800f56e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f576:	d005      	beq.n	800f584 <kalman_3gyro.constprop.0+0x306c>
 800f578:	edd3 7a00 	vldr	s15, [r3]
 800f57c:	eee6 7a22 	vfma.f32	s15, s12, s5
 800f580:	edc3 7a00 	vstr	s15, [r3]
 800f584:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58c:	d00c      	beq.n	800f5a8 <kalman_3gyro.constprop.0+0x3090>
 800f58e:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800f592:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f59a:	d005      	beq.n	800f5a8 <kalman_3gyro.constprop.0+0x3090>
 800f59c:	edd3 7a00 	vldr	s15, [r3]
 800f5a0:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800f5a4:	edc3 7a00 	vstr	s15, [r3]
 800f5a8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b0:	d00c      	beq.n	800f5cc <kalman_3gyro.constprop.0+0x30b4>
 800f5b2:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800f5b6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5be:	d005      	beq.n	800f5cc <kalman_3gyro.constprop.0+0x30b4>
 800f5c0:	edd3 7a00 	vldr	s15, [r3]
 800f5c4:	eee7 7a22 	vfma.f32	s15, s14, s5
 800f5c8:	edc3 7a00 	vstr	s15, [r3]
 800f5cc:	3224      	adds	r2, #36	; 0x24
 800f5ce:	4296      	cmp	r6, r2
 800f5d0:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f5d4:	f47f af58 	bne.w	800f488 <kalman_3gyro.constprop.0+0x2f70>
 800f5d8:	3001      	adds	r0, #1
 800f5da:	2809      	cmp	r0, #9
 800f5dc:	f107 0704 	add.w	r7, r7, #4
 800f5e0:	f47f af3e 	bne.w	800f460 <kalman_3gyro.constprop.0+0x2f48>
 800f5e4:	9801      	ldr	r0, [sp, #4]
 800f5e6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f5ea:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800f5ee:	f007 fd05 	bl	8016ffc <memcpy>
 800f5f2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fa:	f000 817c 	beq.w	800f8f6 <kalman_3gyro.constprop.0+0x33de>
 800f5fe:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f606:	f000 8176 	beq.w	800f8f6 <kalman_3gyro.constprop.0+0x33de>
 800f60a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f612:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800f616:	f040 8212 	bne.w	800fa3e <kalman_3gyro.constprop.0+0x3526>
 800f61a:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f622:	f000 8177 	beq.w	800f914 <kalman_3gyro.constprop.0+0x33fc>
 800f626:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f62e:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800f632:	f040 81cb 	bne.w	800f9cc <kalman_3gyro.constprop.0+0x34b4>
 800f636:	eef0 ba47 	vmov.f32	s23, s14
 800f63a:	eef0 aa49 	vmov.f32	s21, s18
 800f63e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f646:	f000 8138 	beq.w	800f8ba <kalman_3gyro.constprop.0+0x33a2>
 800f64a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f652:	f000 824e 	beq.w	800faf2 <kalman_3gyro.constprop.0+0x35da>
 800f656:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f65e:	ee29 7aac 	vmul.f32	s14, s19, s25
 800f662:	eef0 7a48 	vmov.f32	s15, s16
 800f666:	f040 81c5 	bne.w	800f9f4 <kalman_3gyro.constprop.0+0x34dc>
 800f66a:	eeb0 ca47 	vmov.f32	s24, s14
 800f66e:	eef0 ca67 	vmov.f32	s25, s15
 800f672:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67a:	f000 8179 	beq.w	800f970 <kalman_3gyro.constprop.0+0x3458>
 800f67e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f686:	f000 8125 	beq.w	800f8d4 <kalman_3gyro.constprop.0+0x33bc>
 800f68a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f692:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800f696:	eef0 7a48 	vmov.f32	s15, s16
 800f69a:	f040 81be 	bne.w	800fa1a <kalman_3gyro.constprop.0+0x3502>
 800f69e:	eeb0 aa47 	vmov.f32	s20, s14
 800f6a2:	eeb0 da67 	vmov.f32	s26, s15
 800f6a6:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ae:	f000 811f 	beq.w	800f8f0 <kalman_3gyro.constprop.0+0x33d8>
 800f6b2:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ba:	f000 821d 	beq.w	800faf8 <kalman_3gyro.constprop.0+0x35e0>
 800f6be:	eef0 7a48 	vmov.f32	s15, s16
 800f6c2:	ee2b ba29 	vmul.f32	s22, s22, s19
 800f6c6:	eef0 9a67 	vmov.f32	s19, s15
 800f6ca:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800f6ce:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800f6d2:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800f6d6:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800f6da:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800f6de:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800f6e2:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800f6e6:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f6ea:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800f6ee:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800f6f2:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800f6f6:	ee74 baab 	vadd.f32	s23, s9, s23
 800f6fa:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800f6fe:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800f702:	ee36 da0d 	vadd.f32	s26, s12, s26
 800f706:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800f70a:	ee77 9a29 	vadd.f32	s19, s14, s19
 800f70e:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800f712:	3501      	adds	r5, #1
 800f714:	2d0c      	cmp	r5, #12
 800f716:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800f71a:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800f71e:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800f722:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800f726:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800f72a:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800f72e:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800f732:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800f736:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800f73a:	f104 0404 	add.w	r4, r4, #4
 800f73e:	f47f ab02 	bne.w	800ed46 <kalman_3gyro.constprop.0+0x282e>
 800f742:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800f746:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800f74a:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f74e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800f752:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800f756:	eee6 7a06 	vfma.f32	s15, s12, s12
 800f75a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f75e:	eef4 7ae5 	vcmpe.f32	s15, s11
 800f762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f766:	f100 81b5 	bmi.w	800fad4 <kalman_3gyro.constprop.0+0x35bc>
 800f76a:	eef1 4ae7 	vsqrt.f32	s9, s15
 800f76e:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 800fb00 <kalman_3gyro.constprop.0+0x35e8>
 800f772:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800f776:	ee67 4a86 	vmul.f32	s9, s15, s12
 800f77a:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800f77e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f782:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800f786:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800f78a:	aa36      	add	r2, sp, #216	; 0xd8
 800f78c:	edc3 4a00 	vstr	s9, [r3]
 800f790:	edc3 5a01 	vstr	s11, [r3, #4]
 800f794:	edc3 7a02 	vstr	s15, [r3, #8]
 800f798:	ed83 5a03 	vstr	s10, [r3, #12]
 800f79c:	4618      	mov	r0, r3
 800f79e:	4611      	mov	r1, r2
 800f7a0:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800f7a4:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800f7a8:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800f7ac:	f7fb fdbc 	bl	800b328 <qmult>
 800f7b0:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800f7b4:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800f7b8:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800f7bc:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800f7c0:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800f7c4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800f7c6:	ee66 7a06 	vmul.f32	s15, s12, s12
 800f7ca:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f7ce:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800f7d2:	ae54      	add	r6, sp, #336	; 0x150
 800f7d4:	af5c      	add	r7, sp, #368	; 0x170
 800f7d6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800f7da:	eee7 7a07 	vfma.f32	s15, s14, s14
 800f7de:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800f7e2:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800f7e6:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800f7ea:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f7ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f7f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7f6:	edc3 5a00 	vstr	s11, [r3]
 800f7fa:	ed83 6a01 	vstr	s12, [r3, #4]
 800f7fe:	edc3 6a02 	vstr	s13, [r3, #8]
 800f802:	ed83 7a03 	vstr	s14, [r3, #12]
 800f806:	4634      	mov	r4, r6
 800f808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f80a:	42bc      	cmp	r4, r7
 800f80c:	6028      	str	r0, [r5, #0]
 800f80e:	6069      	str	r1, [r5, #4]
 800f810:	60aa      	str	r2, [r5, #8]
 800f812:	60eb      	str	r3, [r5, #12]
 800f814:	4626      	mov	r6, r4
 800f816:	f105 0510 	add.w	r5, r5, #16
 800f81a:	d1f4      	bne.n	800f806 <kalman_3gyro.constprop.0+0x32ee>
 800f81c:	6820      	ldr	r0, [r4, #0]
 800f81e:	6028      	str	r0, [r5, #0]
 800f820:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800f824:	ecbd 8b10 	vpop	{d8-d15}
 800f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82c:	edd6 7a05 	vldr	s15, [r6, #20]
 800f830:	ed83 8a06 	vstr	s16, [r3, #24]
 800f834:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f838:	f1a2 0e02 	sub.w	lr, r2, #2
 800f83c:	edc6 7a05 	vstr	s15, [r6, #20]
 800f840:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f844:	edde 7a00 	vldr	s15, [lr]
 800f848:	ed83 8a07 	vstr	s16, [r3, #28]
 800f84c:	eef1 7a67 	vneg.f32	s15, s15
 800f850:	f102 3cff 	add.w	ip, r2, #4294967295
 800f854:	edce 7a00 	vstr	s15, [lr]
 800f858:	e5bb      	b.n	800f3d2 <kalman_3gyro.constprop.0+0x2eba>
 800f85a:	edd6 7a02 	vldr	s15, [r6, #8]
 800f85e:	ed83 8a03 	vstr	s16, [r3, #12]
 800f862:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f866:	f1a2 0c05 	sub.w	ip, r2, #5
 800f86a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f86e:	edc6 7a02 	vstr	s15, [r6, #8]
 800f872:	eddc 7a00 	vldr	s15, [ip]
 800f876:	ed83 8a04 	vstr	s16, [r3, #16]
 800f87a:	eef1 7a67 	vneg.f32	s15, s15
 800f87e:	edcc 7a00 	vstr	s15, [ip]
 800f882:	f1a2 0c04 	sub.w	ip, r2, #4
 800f886:	e57d      	b.n	800f384 <kalman_3gyro.constprop.0+0x2e6c>
 800f888:	edd6 7a01 	vldr	s15, [r6, #4]
 800f88c:	ed83 8a02 	vstr	s16, [r3, #8]
 800f890:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f894:	f1a2 0c06 	sub.w	ip, r2, #6
 800f898:	edc6 7a01 	vstr	s15, [r6, #4]
 800f89c:	e558      	b.n	800f350 <kalman_3gyro.constprop.0+0x2e38>
 800f89e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8a6:	ee69 7aab 	vmul.f32	s15, s19, s23
 800f8aa:	eeb0 7a48 	vmov.f32	s14, s16
 800f8ae:	f040 8097 	bne.w	800f9e0 <kalman_3gyro.constprop.0+0x34c8>
 800f8b2:	eef0 ca67 	vmov.f32	s25, s15
 800f8b6:	eef0 ba47 	vmov.f32	s23, s14
 800f8ba:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8c2:	f43f aed6 	beq.w	800f672 <kalman_3gyro.constprop.0+0x315a>
 800f8c6:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ce:	d142      	bne.n	800f956 <kalman_3gyro.constprop.0+0x343e>
 800f8d0:	eeb0 ca69 	vmov.f32	s24, s19
 800f8d4:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8dc:	f040 80ba 	bne.w	800fa54 <kalman_3gyro.constprop.0+0x353c>
 800f8e0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e8:	eeb0 da4a 	vmov.f32	s26, s20
 800f8ec:	f47f aee1 	bne.w	800f6b2 <kalman_3gyro.constprop.0+0x319a>
 800f8f0:	eef0 9a4b 	vmov.f32	s19, s22
 800f8f4:	e6e9      	b.n	800f6ca <kalman_3gyro.constprop.0+0x31b2>
 800f8f6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fe:	d051      	beq.n	800f9a4 <kalman_3gyro.constprop.0+0x348c>
 800f900:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f908:	f040 8097 	bne.w	800fa3a <kalman_3gyro.constprop.0+0x3522>
 800f90c:	eef0 aa69 	vmov.f32	s21, s19
 800f910:	eef0 8a69 	vmov.f32	s17, s19
 800f914:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91c:	f43f ae8f 	beq.w	800f63e <kalman_3gyro.constprop.0+0x3126>
 800f920:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f928:	d1b9      	bne.n	800f89e <kalman_3gyro.constprop.0+0x3386>
 800f92a:	eef0 ca69 	vmov.f32	s25, s19
 800f92e:	eef0 ba69 	vmov.f32	s23, s19
 800f932:	e7c2      	b.n	800f8ba <kalman_3gyro.constprop.0+0x33a2>
 800f934:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f936:	4413      	add	r3, r2
 800f938:	edd3 9a00 	vldr	s19, [r3]
 800f93c:	f7ff bbe8 	b.w	800f110 <kalman_3gyro.constprop.0+0x2bf8>
 800f940:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f948:	bf14      	ite	ne
 800f94a:	ee68 7aad 	vmulne.f32	s15, s17, s27
 800f94e:	eef0 7a68 	vmoveq.f32	s15, s17
 800f952:	f7ff bab4 	b.w	800eebe <kalman_3gyro.constprop.0+0x29a6>
 800f956:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f95e:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800f962:	eeb0 7a48 	vmov.f32	s14, s16
 800f966:	d14e      	bne.n	800fa06 <kalman_3gyro.constprop.0+0x34ee>
 800f968:	eeb0 da67 	vmov.f32	s26, s15
 800f96c:	eeb0 ca47 	vmov.f32	s24, s14
 800f970:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f978:	f43f ae95 	beq.w	800f6a6 <kalman_3gyro.constprop.0+0x318e>
 800f97c:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f984:	f000 84bd 	beq.w	8010302 <kalman_3gyro.constprop.0+0x3dea>
 800f988:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f990:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800f994:	eeb0 7a48 	vmov.f32	s14, s16
 800f998:	d148      	bne.n	800fa2c <kalman_3gyro.constprop.0+0x3514>
 800f99a:	eef0 9a67 	vmov.f32	s19, s15
 800f99e:	eeb0 aa47 	vmov.f32	s20, s14
 800f9a2:	e692      	b.n	800f6ca <kalman_3gyro.constprop.0+0x31b2>
 800f9a4:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f9a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ac:	d05b      	beq.n	800fa66 <kalman_3gyro.constprop.0+0x354e>
 800f9ae:	eef5 9a40 	vcmp.f32	s19, #0.0
 800f9b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9b6:	d0a9      	beq.n	800f90c <kalman_3gyro.constprop.0+0x33f4>
 800f9b8:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c0:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800f9c4:	eef0 8a49 	vmov.f32	s17, s18
 800f9c8:	f43f ae35 	beq.w	800f636 <kalman_3gyro.constprop.0+0x311e>
 800f9cc:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d4:	ee69 7aab 	vmul.f32	s15, s19, s23
 800f9d8:	eef0 aa49 	vmov.f32	s21, s18
 800f9dc:	f43f af69 	beq.w	800f8b2 <kalman_3gyro.constprop.0+0x339a>
 800f9e0:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e8:	eef0 ba47 	vmov.f32	s23, s14
 800f9ec:	ee29 7aac 	vmul.f32	s14, s19, s25
 800f9f0:	f43f ae3b 	beq.w	800f66a <kalman_3gyro.constprop.0+0x3152>
 800f9f4:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9fc:	eef0 ca67 	vmov.f32	s25, s15
 800fa00:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800fa04:	d0b0      	beq.n	800f968 <kalman_3gyro.constprop.0+0x3450>
 800fa06:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fa0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa0e:	eeb0 ca47 	vmov.f32	s24, s14
 800fa12:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fa16:	f43f ae42 	beq.w	800f69e <kalman_3gyro.constprop.0+0x3186>
 800fa1a:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fa1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa22:	eeb0 da67 	vmov.f32	s26, s15
 800fa26:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800fa2a:	d0b6      	beq.n	800f99a <kalman_3gyro.constprop.0+0x3482>
 800fa2c:	eeb0 aa47 	vmov.f32	s20, s14
 800fa30:	e647      	b.n	800f6c2 <kalman_3gyro.constprop.0+0x31aa>
 800fa32:	eef0 7a6d 	vmov.f32	s15, s27
 800fa36:	f7ff baf5 	b.w	800f024 <kalman_3gyro.constprop.0+0x2b0c>
 800fa3a:	eef0 8a48 	vmov.f32	s17, s16
 800fa3e:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fa42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa46:	ee29 9a29 	vmul.f32	s18, s18, s19
 800fa4a:	f47f adec 	bne.w	800f626 <kalman_3gyro.constprop.0+0x310e>
 800fa4e:	eef0 aa49 	vmov.f32	s21, s18
 800fa52:	e75f      	b.n	800f914 <kalman_3gyro.constprop.0+0x33fc>
 800fa54:	ed9f ba2a 	vldr	s22, [pc, #168]	; 800fb00 <kalman_3gyro.constprop.0+0x35e8>
 800fa58:	eef0 9a48 	vmov.f32	s19, s16
 800fa5c:	eeb0 aa48 	vmov.f32	s20, s16
 800fa60:	eeb0 da48 	vmov.f32	s26, s16
 800fa64:	e631      	b.n	800f6ca <kalman_3gyro.constprop.0+0x31b2>
 800fa66:	eef0 8a6a 	vmov.f32	s17, s21
 800fa6a:	e753      	b.n	800f914 <kalman_3gyro.constprop.0+0x33fc>
 800fa6c:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 800fa70:	2a31      	cmp	r2, #49	; 0x31
 800fa72:	f63f a8a3 	bhi.w	800ebbc <kalman_3gyro.constprop.0+0x26a4>
 800fa76:	2100      	movs	r1, #0
 800fa78:	3201      	adds	r2, #1
 800fa7a:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800fa7e:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800fa82:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800fa86:	f7ff b899 	b.w	800ebbc <kalman_3gyro.constprop.0+0x26a4>
 800fa8a:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	f340 8423 	ble.w	80102da <kalman_3gyro.constprop.0+0x3dc2>
 800fa94:	3b01      	subs	r3, #1
 800fa96:	2200      	movs	r2, #0
 800fa98:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800fa9c:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 800faa0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800faa4:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 800faa8:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 800faac:	f7fe bca9 	b.w	800e402 <kalman_3gyro.constprop.0+0x1eea>
 800fab0:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800fab4:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800fab8:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800fabc:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800fac0:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800fac4:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800fac8:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800facc:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800fad0:	f7fe bc18 	b.w	800e304 <kalman_3gyro.constprop.0+0x1dec>
 800fad4:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800fad8:	eef0 4a46 	vmov.f32	s9, s12
 800fadc:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800fae0:	eef0 7a47 	vmov.f32	s15, s14
 800fae4:	eef0 5a66 	vmov.f32	s11, s13
 800fae8:	e64b      	b.n	800f782 <kalman_3gyro.constprop.0+0x326a>
 800faea:	eeb1 7a47 	vneg.f32	s14, s14
 800faee:	f7fd bc66 	b.w	800d3be <kalman_3gyro.constprop.0+0xea6>
 800faf2:	eef0 ca69 	vmov.f32	s25, s19
 800faf6:	e6e0      	b.n	800f8ba <kalman_3gyro.constprop.0+0x33a2>
 800faf8:	eeb0 ba69 	vmov.f32	s22, s19
 800fafc:	e5e5      	b.n	800f6ca <kalman_3gyro.constprop.0+0x31b2>
 800fafe:	bf00      	nop
 800fb00:	00000000 	.word	0x00000000
 800fb04:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800fb08:	49dc      	ldr	r1, [pc, #880]	; (800fe7c <kalman_3gyro.constprop.0+0x3964>)
 800fb0a:	4bdd      	ldr	r3, [pc, #884]	; (800fe80 <kalman_3gyro.constprop.0+0x3968>)
 800fb0c:	4add      	ldr	r2, [pc, #884]	; (800fe84 <kalman_3gyro.constprop.0+0x396c>)
 800fb0e:	2000      	movs	r0, #0
 800fb10:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 800fb14:	6029      	str	r1, [r5, #0]
 800fb16:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 800fb1a:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 800fb1e:	6002      	str	r2, [r0, #0]
 800fb20:	600b      	str	r3, [r1, #0]
 800fb22:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 800fb26:	9004      	str	r0, [sp, #16]
 800fb28:	9110      	str	r1, [sp, #64]	; 0x40
 800fb2a:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f000 80b4 	beq.w	800fc9c <kalman_3gyro.constprop.0+0x3784>
 800fb34:	240c      	movs	r4, #12
 800fb36:	eddf bad4 	vldr	s23, [pc, #848]	; 800fe88 <kalman_3gyro.constprop.0+0x3970>
 800fb3a:	ed9f bad4 	vldr	s22, [pc, #848]	; 800fe8c <kalman_3gyro.constprop.0+0x3974>
 800fb3e:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 800fe90 <kalman_3gyro.constprop.0+0x3978>
 800fb42:	ed9f aad4 	vldr	s20, [pc, #848]	; 800fe94 <kalman_3gyro.constprop.0+0x397c>
 800fb46:	eddf aad4 	vldr	s21, [pc, #848]	; 800fe98 <kalman_3gyro.constprop.0+0x3980>
 800fb4a:	9f08      	ldr	r7, [sp, #32]
 800fb4c:	fb14 8403 	smlabb	r4, r4, r3, r8
 800fb50:	4646      	mov	r6, r8
 800fb52:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800fb56:	e06b      	b.n	800fc30 <kalman_3gyro.constprop.0+0x3718>
 800fb58:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb60:	f300 815a 	bgt.w	800fe18 <kalman_3gyro.constprop.0+0x3900>
 800fb64:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fb68:	ee17 0a90 	vmov	r0, s15
 800fb6c:	f7f0 fcec 	bl	8000548 <__aeabi_f2d>
 800fb70:	ec41 0b10 	vmov	d0, r0, r1
 800fb74:	f005 fb04 	bl	8015180 <ceil>
 800fb78:	ec51 0b10 	vmov	r0, r1, d0
 800fb7c:	f7f1 f814 	bl	8000ba8 <__aeabi_d2f>
 800fb80:	ee07 0a90 	vmov	s15, r0
 800fb84:	edc6 7a00 	vstr	s15, [r6]
 800fb88:	ed97 7a01 	vldr	s14, [r7, #4]
 800fb8c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fb90:	eef0 6ae7 	vabs.f32	s13, s15
 800fb94:	eef4 6acb 	vcmpe.f32	s13, s22
 800fb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb9c:	d51b      	bpl.n	800fbd6 <kalman_3gyro.constprop.0+0x36be>
 800fb9e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba6:	f280 8120 	bge.w	800fdea <kalman_3gyro.constprop.0+0x38d2>
 800fbaa:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb2:	f300 812e 	bgt.w	800fe12 <kalman_3gyro.constprop.0+0x38fa>
 800fbb6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fbba:	ee17 0a90 	vmov	r0, s15
 800fbbe:	f7f0 fcc3 	bl	8000548 <__aeabi_f2d>
 800fbc2:	ec41 0b10 	vmov	d0, r0, r1
 800fbc6:	f005 fadb 	bl	8015180 <ceil>
 800fbca:	ec51 0b10 	vmov	r0, r1, d0
 800fbce:	f7f0 ffeb 	bl	8000ba8 <__aeabi_d2f>
 800fbd2:	ee07 0a90 	vmov	s15, r0
 800fbd6:	edc6 7a01 	vstr	s15, [r6, #4]
 800fbda:	ed97 7a02 	vldr	s14, [r7, #8]
 800fbde:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fbe2:	eef0 6ae7 	vabs.f32	s13, s15
 800fbe6:	eef4 6acb 	vcmpe.f32	s13, s22
 800fbea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbee:	d51a      	bpl.n	800fc26 <kalman_3gyro.constprop.0+0x370e>
 800fbf0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf8:	da3b      	bge.n	800fc72 <kalman_3gyro.constprop.0+0x375a>
 800fbfa:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc02:	f300 8103 	bgt.w	800fe0c <kalman_3gyro.constprop.0+0x38f4>
 800fc06:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fc0a:	ee17 0a90 	vmov	r0, s15
 800fc0e:	f7f0 fc9b 	bl	8000548 <__aeabi_f2d>
 800fc12:	ec41 0b10 	vmov	d0, r0, r1
 800fc16:	f005 fab3 	bl	8015180 <ceil>
 800fc1a:	ec51 0b10 	vmov	r0, r1, d0
 800fc1e:	f7f0 ffc3 	bl	8000ba8 <__aeabi_d2f>
 800fc22:	ee07 0a90 	vmov	s15, r0
 800fc26:	edc6 7a02 	vstr	s15, [r6, #8]
 800fc2a:	360c      	adds	r6, #12
 800fc2c:	42b4      	cmp	r4, r6
 800fc2e:	d035      	beq.n	800fc9c <kalman_3gyro.constprop.0+0x3784>
 800fc30:	ed97 7a00 	vldr	s14, [r7]
 800fc34:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fc38:	eef0 6ae7 	vabs.f32	s13, s15
 800fc3c:	eef4 6acb 	vcmpe.f32	s13, s22
 800fc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc44:	d59e      	bpl.n	800fb84 <kalman_3gyro.constprop.0+0x366c>
 800fc46:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc4e:	db83      	blt.n	800fb58 <kalman_3gyro.constprop.0+0x3640>
 800fc50:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fc54:	ee17 0a90 	vmov	r0, s15
 800fc58:	f7f0 fc76 	bl	8000548 <__aeabi_f2d>
 800fc5c:	ec41 0b10 	vmov	d0, r0, r1
 800fc60:	f005 fb12 	bl	8015288 <floor>
 800fc64:	ec51 0b10 	vmov	r0, r1, d0
 800fc68:	f7f0 ff9e 	bl	8000ba8 <__aeabi_d2f>
 800fc6c:	ee07 0a90 	vmov	s15, r0
 800fc70:	e788      	b.n	800fb84 <kalman_3gyro.constprop.0+0x366c>
 800fc72:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fc76:	360c      	adds	r6, #12
 800fc78:	ee17 0a90 	vmov	r0, s15
 800fc7c:	f7f0 fc64 	bl	8000548 <__aeabi_f2d>
 800fc80:	ec41 0b10 	vmov	d0, r0, r1
 800fc84:	f005 fb00 	bl	8015288 <floor>
 800fc88:	ec51 0b10 	vmov	r0, r1, d0
 800fc8c:	f7f0 ff8c 	bl	8000ba8 <__aeabi_d2f>
 800fc90:	ee07 0a90 	vmov	s15, r0
 800fc94:	ed46 7a01 	vstr	s15, [r6, #-4]
 800fc98:	42b4      	cmp	r4, r6
 800fc9a:	d1c9      	bne.n	800fc30 <kalman_3gyro.constprop.0+0x3718>
 800fc9c:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 800fca0:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	f000 80cf 	beq.w	800fe48 <kalman_3gyro.constprop.0+0x3930>
 800fcaa:	240c      	movs	r4, #12
 800fcac:	eddf ba7b 	vldr	s23, [pc, #492]	; 800fe9c <kalman_3gyro.constprop.0+0x3984>
 800fcb0:	ed9f ba76 	vldr	s22, [pc, #472]	; 800fe8c <kalman_3gyro.constprop.0+0x3974>
 800fcb4:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 800fea0 <kalman_3gyro.constprop.0+0x3988>
 800fcb8:	ed9f aa7a 	vldr	s20, [pc, #488]	; 800fea4 <kalman_3gyro.constprop.0+0x398c>
 800fcbc:	eddf aa76 	vldr	s21, [pc, #472]	; 800fe98 <kalman_3gyro.constprop.0+0x3980>
 800fcc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fcc4:	fb14 7403 	smlabb	r4, r4, r3, r7
 800fcc8:	463e      	mov	r6, r7
 800fcca:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800fcce:	e06b      	b.n	800fda8 <kalman_3gyro.constprop.0+0x3890>
 800fcd0:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fcd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcd8:	f300 81a2 	bgt.w	8010020 <kalman_3gyro.constprop.0+0x3b08>
 800fcdc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fce0:	ee17 0a90 	vmov	r0, s15
 800fce4:	f7f0 fc30 	bl	8000548 <__aeabi_f2d>
 800fce8:	ec41 0b10 	vmov	d0, r0, r1
 800fcec:	f005 fa48 	bl	8015180 <ceil>
 800fcf0:	ec51 0b10 	vmov	r0, r1, d0
 800fcf4:	f7f0 ff58 	bl	8000ba8 <__aeabi_d2f>
 800fcf8:	ee07 0a90 	vmov	s15, r0
 800fcfc:	edc6 7a00 	vstr	s15, [r6]
 800fd00:	ed99 7a04 	vldr	s14, [r9, #16]
 800fd04:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fd08:	eef0 6ae7 	vabs.f32	s13, s15
 800fd0c:	eef4 6acb 	vcmpe.f32	s13, s22
 800fd10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd14:	d51b      	bpl.n	800fd4e <kalman_3gyro.constprop.0+0x3836>
 800fd16:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fd1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd1e:	f280 8168 	bge.w	800fff2 <kalman_3gyro.constprop.0+0x3ada>
 800fd22:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd2a:	f300 8176 	bgt.w	801001a <kalman_3gyro.constprop.0+0x3b02>
 800fd2e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fd32:	ee17 0a90 	vmov	r0, s15
 800fd36:	f7f0 fc07 	bl	8000548 <__aeabi_f2d>
 800fd3a:	ec41 0b10 	vmov	d0, r0, r1
 800fd3e:	f005 fa1f 	bl	8015180 <ceil>
 800fd42:	ec51 0b10 	vmov	r0, r1, d0
 800fd46:	f7f0 ff2f 	bl	8000ba8 <__aeabi_d2f>
 800fd4a:	ee07 0a90 	vmov	s15, r0
 800fd4e:	edc6 7a01 	vstr	s15, [r6, #4]
 800fd52:	ed99 7a05 	vldr	s14, [r9, #20]
 800fd56:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fd5a:	eef0 6ae7 	vabs.f32	s13, s15
 800fd5e:	eef4 6acb 	vcmpe.f32	s13, s22
 800fd62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd66:	d51a      	bpl.n	800fd9e <kalman_3gyro.constprop.0+0x3886>
 800fd68:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd70:	da55      	bge.n	800fe1e <kalman_3gyro.constprop.0+0x3906>
 800fd72:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd7a:	f300 814b 	bgt.w	8010014 <kalman_3gyro.constprop.0+0x3afc>
 800fd7e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fd82:	ee17 0a90 	vmov	r0, s15
 800fd86:	f7f0 fbdf 	bl	8000548 <__aeabi_f2d>
 800fd8a:	ec41 0b10 	vmov	d0, r0, r1
 800fd8e:	f005 f9f7 	bl	8015180 <ceil>
 800fd92:	ec51 0b10 	vmov	r0, r1, d0
 800fd96:	f7f0 ff07 	bl	8000ba8 <__aeabi_d2f>
 800fd9a:	ee07 0a90 	vmov	s15, r0
 800fd9e:	edc6 7a02 	vstr	s15, [r6, #8]
 800fda2:	360c      	adds	r6, #12
 800fda4:	42b4      	cmp	r4, r6
 800fda6:	d04f      	beq.n	800fe48 <kalman_3gyro.constprop.0+0x3930>
 800fda8:	ed99 7a03 	vldr	s14, [r9, #12]
 800fdac:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800fdb0:	eef0 6ae7 	vabs.f32	s13, s15
 800fdb4:	eef4 6acb 	vcmpe.f32	s13, s22
 800fdb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdbc:	d59e      	bpl.n	800fcfc <kalman_3gyro.constprop.0+0x37e4>
 800fdbe:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800fdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc6:	db83      	blt.n	800fcd0 <kalman_3gyro.constprop.0+0x37b8>
 800fdc8:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fdcc:	ee17 0a90 	vmov	r0, s15
 800fdd0:	f7f0 fbba 	bl	8000548 <__aeabi_f2d>
 800fdd4:	ec41 0b10 	vmov	d0, r0, r1
 800fdd8:	f005 fa56 	bl	8015288 <floor>
 800fddc:	ec51 0b10 	vmov	r0, r1, d0
 800fde0:	f7f0 fee2 	bl	8000ba8 <__aeabi_d2f>
 800fde4:	ee07 0a90 	vmov	s15, r0
 800fde8:	e788      	b.n	800fcfc <kalman_3gyro.constprop.0+0x37e4>
 800fdea:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fdee:	ee17 0a90 	vmov	r0, s15
 800fdf2:	f7f0 fba9 	bl	8000548 <__aeabi_f2d>
 800fdf6:	ec41 0b10 	vmov	d0, r0, r1
 800fdfa:	f005 fa45 	bl	8015288 <floor>
 800fdfe:	ec51 0b10 	vmov	r0, r1, d0
 800fe02:	f7f0 fed1 	bl	8000ba8 <__aeabi_d2f>
 800fe06:	ee07 0a90 	vmov	s15, r0
 800fe0a:	e6e4      	b.n	800fbd6 <kalman_3gyro.constprop.0+0x36be>
 800fe0c:	eef0 7a6a 	vmov.f32	s15, s21
 800fe10:	e709      	b.n	800fc26 <kalman_3gyro.constprop.0+0x370e>
 800fe12:	eef0 7a6a 	vmov.f32	s15, s21
 800fe16:	e6de      	b.n	800fbd6 <kalman_3gyro.constprop.0+0x36be>
 800fe18:	eef0 7a6a 	vmov.f32	s15, s21
 800fe1c:	e6b2      	b.n	800fb84 <kalman_3gyro.constprop.0+0x366c>
 800fe1e:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fe22:	360c      	adds	r6, #12
 800fe24:	ee17 0a90 	vmov	r0, s15
 800fe28:	f7f0 fb8e 	bl	8000548 <__aeabi_f2d>
 800fe2c:	ec41 0b10 	vmov	d0, r0, r1
 800fe30:	f005 fa2a 	bl	8015288 <floor>
 800fe34:	ec51 0b10 	vmov	r0, r1, d0
 800fe38:	f7f0 feb6 	bl	8000ba8 <__aeabi_d2f>
 800fe3c:	ee07 0a90 	vmov	s15, r0
 800fe40:	ed46 7a01 	vstr	s15, [r6, #-4]
 800fe44:	42b4      	cmp	r4, r6
 800fe46:	d1af      	bne.n	800fda8 <kalman_3gyro.constprop.0+0x3890>
 800fe48:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f43c ac7e 	beq.w	800c74e <kalman_3gyro.constprop.0+0x236>
 800fe52:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 800fe56:	240c      	movs	r4, #12
 800fe58:	eddf ba13 	vldr	s23, [pc, #76]	; 800fea8 <kalman_3gyro.constprop.0+0x3990>
 800fe5c:	ed9f ba0b 	vldr	s22, [pc, #44]	; 800fe8c <kalman_3gyro.constprop.0+0x3974>
 800fe60:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800feac <kalman_3gyro.constprop.0+0x3994>
 800fe64:	ed9f aa12 	vldr	s20, [pc, #72]	; 800feb0 <kalman_3gyro.constprop.0+0x3998>
 800fe68:	eddf aa0b 	vldr	s21, [pc, #44]	; 800fe98 <kalman_3gyro.constprop.0+0x3980>
 800fe6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fe70:	960f      	str	r6, [sp, #60]	; 0x3c
 800fe72:	fb14 6403 	smlabb	r4, r4, r3, r6
 800fe76:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800fe7a:	e099      	b.n	800ffb0 <kalman_3gyro.constprop.0+0x3a98>
 800fe7c:	3a7001e0 	.word	0x3a7001e0
 800fe80:	3a8c0118 	.word	0x3a8c0118
 800fe84:	3a000100 	.word	0x3a000100
 800fe88:	44888777 	.word	0x44888777
 800fe8c:	4b000000 	.word	0x4b000000
 800fe90:	39f001e1 	.word	0x39f001e1
 800fe94:	b9f001e1 	.word	0xb9f001e1
 800fe98:	80000000 	.word	0x80000000
 800fe9c:	44fffe00 	.word	0x44fffe00
 800fea0:	39800100 	.word	0x39800100
 800fea4:	b9800100 	.word	0xb9800100
 800fea8:	446a0ccd 	.word	0x446a0ccd
 800feac:	3a0c0118 	.word	0x3a0c0118
 800feb0:	ba0c0118 	.word	0xba0c0118
 800feb4:	bf666666 	.word	0xbf666666
 800feb8:	3d072b02 	.word	0x3d072b02
 800febc:	3cb43958 	.word	0x3cb43958
 800fec0:	3cf5c28f 	.word	0x3cf5c28f
 800fec4:	3d75c28f 	.word	0x3d75c28f
 800fec8:	3d23d70a 	.word	0x3d23d70a
 800fecc:	3ca3d70a 	.word	0x3ca3d70a
 800fed0:	3d4ccccd 	.word	0x3d4ccccd
 800fed4:	3d8f5c29 	.word	0x3d8f5c29
 800fed8:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fedc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee0:	f300 80c6 	bgt.w	8010070 <kalman_3gyro.constprop.0+0x3b58>
 800fee4:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800fee8:	ee17 0a90 	vmov	r0, s15
 800feec:	f7f0 fb2c 	bl	8000548 <__aeabi_f2d>
 800fef0:	ec41 0b10 	vmov	d0, r0, r1
 800fef4:	f005 f944 	bl	8015180 <ceil>
 800fef8:	ec51 0b10 	vmov	r0, r1, d0
 800fefc:	f7f0 fe54 	bl	8000ba8 <__aeabi_d2f>
 800ff00:	ee07 0a90 	vmov	s15, r0
 800ff04:	edc6 7a00 	vstr	s15, [r6]
 800ff08:	ed99 7a07 	vldr	s14, [r9, #28]
 800ff0c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800ff10:	eef0 6ae7 	vabs.f32	s13, s15
 800ff14:	eef4 6acb 	vcmpe.f32	s13, s22
 800ff18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff1c:	d51b      	bpl.n	800ff56 <kalman_3gyro.constprop.0+0x3a3e>
 800ff1e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ff22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff26:	f280 808f 	bge.w	8010048 <kalman_3gyro.constprop.0+0x3b30>
 800ff2a:	eeb4 7aca 	vcmpe.f32	s14, s20
 800ff2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff32:	f300 809a 	bgt.w	801006a <kalman_3gyro.constprop.0+0x3b52>
 800ff36:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800ff3a:	ee17 0a90 	vmov	r0, s15
 800ff3e:	f7f0 fb03 	bl	8000548 <__aeabi_f2d>
 800ff42:	ec41 0b10 	vmov	d0, r0, r1
 800ff46:	f005 f91b 	bl	8015180 <ceil>
 800ff4a:	ec51 0b10 	vmov	r0, r1, d0
 800ff4e:	f7f0 fe2b 	bl	8000ba8 <__aeabi_d2f>
 800ff52:	ee07 0a90 	vmov	s15, r0
 800ff56:	edc6 7a01 	vstr	s15, [r6, #4]
 800ff5a:	ed99 7a08 	vldr	s14, [r9, #32]
 800ff5e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800ff62:	eef0 6ae7 	vabs.f32	s13, s15
 800ff66:	eef4 6acb 	vcmpe.f32	s13, s22
 800ff6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff6e:	d519      	bpl.n	800ffa4 <kalman_3gyro.constprop.0+0x3a8c>
 800ff70:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ff74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff78:	da55      	bge.n	8010026 <kalman_3gyro.constprop.0+0x3b0e>
 800ff7a:	eeb4 7aca 	vcmpe.f32	s14, s20
 800ff7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff82:	dc78      	bgt.n	8010076 <kalman_3gyro.constprop.0+0x3b5e>
 800ff84:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800ff88:	ee17 0a90 	vmov	r0, s15
 800ff8c:	f7f0 fadc 	bl	8000548 <__aeabi_f2d>
 800ff90:	ec41 0b10 	vmov	d0, r0, r1
 800ff94:	f005 f8f4 	bl	8015180 <ceil>
 800ff98:	ec51 0b10 	vmov	r0, r1, d0
 800ff9c:	f7f0 fe04 	bl	8000ba8 <__aeabi_d2f>
 800ffa0:	ee07 0a90 	vmov	s15, r0
 800ffa4:	edc6 7a02 	vstr	s15, [r6, #8]
 800ffa8:	360c      	adds	r6, #12
 800ffaa:	42b4      	cmp	r4, r6
 800ffac:	f43c abd2 	beq.w	800c754 <kalman_3gyro.constprop.0+0x23c>
 800ffb0:	ed99 7a06 	vldr	s14, [r9, #24]
 800ffb4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800ffb8:	eef0 6ae7 	vabs.f32	s13, s15
 800ffbc:	eef4 6acb 	vcmpe.f32	s13, s22
 800ffc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffc4:	d59e      	bpl.n	800ff04 <kalman_3gyro.constprop.0+0x39ec>
 800ffc6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ffca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffce:	db83      	blt.n	800fed8 <kalman_3gyro.constprop.0+0x39c0>
 800ffd0:	ee77 7a89 	vadd.f32	s15, s15, s18
 800ffd4:	ee17 0a90 	vmov	r0, s15
 800ffd8:	f7f0 fab6 	bl	8000548 <__aeabi_f2d>
 800ffdc:	ec41 0b10 	vmov	d0, r0, r1
 800ffe0:	f005 f952 	bl	8015288 <floor>
 800ffe4:	ec51 0b10 	vmov	r0, r1, d0
 800ffe8:	f7f0 fdde 	bl	8000ba8 <__aeabi_d2f>
 800ffec:	ee07 0a90 	vmov	s15, r0
 800fff0:	e788      	b.n	800ff04 <kalman_3gyro.constprop.0+0x39ec>
 800fff2:	ee77 7a89 	vadd.f32	s15, s15, s18
 800fff6:	ee17 0a90 	vmov	r0, s15
 800fffa:	f7f0 faa5 	bl	8000548 <__aeabi_f2d>
 800fffe:	ec41 0b10 	vmov	d0, r0, r1
 8010002:	f005 f941 	bl	8015288 <floor>
 8010006:	ec51 0b10 	vmov	r0, r1, d0
 801000a:	f7f0 fdcd 	bl	8000ba8 <__aeabi_d2f>
 801000e:	ee07 0a90 	vmov	s15, r0
 8010012:	e69c      	b.n	800fd4e <kalman_3gyro.constprop.0+0x3836>
 8010014:	eef0 7a6a 	vmov.f32	s15, s21
 8010018:	e6c1      	b.n	800fd9e <kalman_3gyro.constprop.0+0x3886>
 801001a:	eef0 7a6a 	vmov.f32	s15, s21
 801001e:	e696      	b.n	800fd4e <kalman_3gyro.constprop.0+0x3836>
 8010020:	eef0 7a6a 	vmov.f32	s15, s21
 8010024:	e66a      	b.n	800fcfc <kalman_3gyro.constprop.0+0x37e4>
 8010026:	ee77 7a89 	vadd.f32	s15, s15, s18
 801002a:	ee17 0a90 	vmov	r0, s15
 801002e:	f7f0 fa8b 	bl	8000548 <__aeabi_f2d>
 8010032:	ec41 0b10 	vmov	d0, r0, r1
 8010036:	f005 f927 	bl	8015288 <floor>
 801003a:	ec51 0b10 	vmov	r0, r1, d0
 801003e:	f7f0 fdb3 	bl	8000ba8 <__aeabi_d2f>
 8010042:	ee07 0a90 	vmov	s15, r0
 8010046:	e7ad      	b.n	800ffa4 <kalman_3gyro.constprop.0+0x3a8c>
 8010048:	ee77 7a89 	vadd.f32	s15, s15, s18
 801004c:	ee17 0a90 	vmov	r0, s15
 8010050:	f7f0 fa7a 	bl	8000548 <__aeabi_f2d>
 8010054:	ec41 0b10 	vmov	d0, r0, r1
 8010058:	f005 f916 	bl	8015288 <floor>
 801005c:	ec51 0b10 	vmov	r0, r1, d0
 8010060:	f7f0 fda2 	bl	8000ba8 <__aeabi_d2f>
 8010064:	ee07 0a90 	vmov	s15, r0
 8010068:	e775      	b.n	800ff56 <kalman_3gyro.constprop.0+0x3a3e>
 801006a:	eef0 7a6a 	vmov.f32	s15, s21
 801006e:	e772      	b.n	800ff56 <kalman_3gyro.constprop.0+0x3a3e>
 8010070:	eef0 7a6a 	vmov.f32	s15, s21
 8010074:	e746      	b.n	800ff04 <kalman_3gyro.constprop.0+0x39ec>
 8010076:	eef0 7a6a 	vmov.f32	s15, s21
 801007a:	e793      	b.n	800ffa4 <kalman_3gyro.constprop.0+0x3a8c>
 801007c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 801007e:	7813      	ldrb	r3, [r2, #0]
 8010080:	ed92 7a03 	vldr	s14, [r2, #12]
 8010084:	edd2 6a01 	vldr	s13, [r2, #4]
 8010088:	edd2 7a02 	vldr	s15, [r2, #8]
 801008c:	2200      	movs	r2, #0
 801008e:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 8010092:	2b00      	cmp	r3, #0
 8010094:	f040 813b 	bne.w	801030e <kalman_3gyro.constprop.0+0x3df6>
 8010098:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 800feb4 <kalman_3gyro.constprop.0+0x399c>
 801009c:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80100a0:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80100a4:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 80100a8:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 80100ac:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80100b0:	2100      	movs	r1, #0
 80100b2:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80100b6:	f006 ffaf 	bl	8017018 <memset>
 80100ba:	eddb 7a02 	vldr	s15, [fp, #8]
 80100be:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 800feb8 <kalman_3gyro.constprop.0+0x39a0>
 80100c2:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 800febc <kalman_3gyro.constprop.0+0x39a4>
 80100c6:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 800fec0 <kalman_3gyro.constprop.0+0x39a8>
 80100ca:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 800fec4 <kalman_3gyro.constprop.0+0x39ac>
 80100ce:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 800fec8 <kalman_3gyro.constprop.0+0x39b0>
 80100d2:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 800fecc <kalman_3gyro.constprop.0+0x39b4>
 80100d6:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 800fed0 <kalman_3gyro.constprop.0+0x39b8>
 80100da:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 800fed4 <kalman_3gyro.constprop.0+0x39bc>
 80100de:	4bd9      	ldr	r3, [pc, #868]	; (8010444 <kalman_3gyro.constprop.0+0x3f2c>)
 80100e0:	49d9      	ldr	r1, [pc, #868]	; (8010448 <kalman_3gyro.constprop.0+0x3f30>)
 80100e2:	4dda      	ldr	r5, [pc, #872]	; (801044c <kalman_3gyro.constprop.0+0x3f34>)
 80100e4:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010450 <kalman_3gyro.constprop.0+0x3f38>
 80100e8:	48da      	ldr	r0, [pc, #872]	; (8010454 <kalman_3gyro.constprop.0+0x3f3c>)
 80100ea:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 80100ee:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80100f2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80100f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80100fa:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 80100fe:	eddf 5ad6 	vldr	s11, [pc, #856]	; 8010458 <kalman_3gyro.constprop.0+0x3f40>
 8010102:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 8010106:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801010a:	ee67 3aa3 	vmul.f32	s7, s15, s7
 801010e:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 8010112:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 801045c <kalman_3gyro.constprop.0+0x3f44>
 8010116:	eddf 6ad2 	vldr	s13, [pc, #840]	; 8010460 <kalman_3gyro.constprop.0+0x3f48>
 801011a:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 801011e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010122:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8010126:	ee27 5a85 	vmul.f32	s10, s15, s10
 801012a:	ee27 4a84 	vmul.f32	s8, s15, s8
 801012e:	ee27 6a86 	vmul.f32	s12, s15, s12
 8010132:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010136:	2200      	movs	r2, #0
 8010138:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 801013c:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8010140:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 8010144:	4cc7      	ldr	r4, [pc, #796]	; (8010464 <kalman_3gyro.constprop.0+0x3f4c>)
 8010146:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 801014a:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 801014e:	eddf 3ac6 	vldr	s7, [pc, #792]	; 8010468 <kalman_3gyro.constprop.0+0x3f50>
 8010152:	49c6      	ldr	r1, [pc, #792]	; (801046c <kalman_3gyro.constprop.0+0x3f54>)
 8010154:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 8010158:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 801015c:	eddf 4ac4 	vldr	s9, [pc, #784]	; 8010470 <kalman_3gyro.constprop.0+0x3f58>
 8010160:	4bc4      	ldr	r3, [pc, #784]	; (8010474 <kalman_3gyro.constprop.0+0x3f5c>)
 8010162:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 8010166:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 801016a:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 801016e:	4ac2      	ldr	r2, [pc, #776]	; (8010478 <kalman_3gyro.constprop.0+0x3f60>)
 8010170:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 8010174:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 8010178:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 801017c:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010180:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010184:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010188:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 801018c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010190:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010194:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010198:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 801019c:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80101a0:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 80101a4:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 80101a8:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 80101ac:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 80101b0:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 80101b4:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 80101b8:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 80101bc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80101c0:	ee67 4aa4 	vmul.f32	s9, s15, s9
 80101c4:	4cad      	ldr	r4, [pc, #692]	; (801047c <kalman_3gyro.constprop.0+0x3f64>)
 80101c6:	48ae      	ldr	r0, [pc, #696]	; (8010480 <kalman_3gyro.constprop.0+0x3f68>)
 80101c8:	49ae      	ldr	r1, [pc, #696]	; (8010484 <kalman_3gyro.constprop.0+0x3f6c>)
 80101ca:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 80101ce:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 80101d2:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 80101d6:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 80101da:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 80101de:	ee27 6a83 	vmul.f32	s12, s15, s6
 80101e2:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 80101e6:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 80101ea:	ee67 6aa5 	vmul.f32	s13, s15, s11
 80101ee:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 80101f2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80101f6:	4aa4      	ldr	r2, [pc, #656]	; (8010488 <kalman_3gyro.constprop.0+0x3f70>)
 80101f8:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 80101fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010200:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 8010204:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8010208:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 801020c:	4e9f      	ldr	r6, [pc, #636]	; (801048c <kalman_3gyro.constprop.0+0x3f74>)
 801020e:	4da0      	ldr	r5, [pc, #640]	; (8010490 <kalman_3gyro.constprop.0+0x3f78>)
 8010210:	49a0      	ldr	r1, [pc, #640]	; (8010494 <kalman_3gyro.constprop.0+0x3f7c>)
 8010212:	4aa1      	ldr	r2, [pc, #644]	; (8010498 <kalman_3gyro.constprop.0+0x3f80>)
 8010214:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8010218:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 801021c:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8010220:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 8010224:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8010228:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 801022c:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8010230:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 8010234:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8010238:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 801023c:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8010240:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 8010244:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8010248:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 801024c:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8010250:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 8010254:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 8010258:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 801025c:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 8010260:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 8010264:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 8010268:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801026c:	b973      	cbnz	r3, 801028c <kalman_3gyro.constprop.0+0x3d74>
 801026e:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 8010272:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 8010276:	6811      	ldr	r1, [r2, #0]
 8010278:	681a      	ldr	r2, [r3, #0]
 801027a:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 801027e:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 8010288:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 801028c:	2300      	movs	r3, #0
 801028e:	f88b 3001 	strb.w	r3, [fp, #1]
 8010292:	f7fc ba4b 	b.w	800c72c <kalman_3gyro.constprop.0+0x214>
 8010296:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801029a:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 801029e:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80102a2:	ee69 9a8e 	vmul.f32	s19, s19, s28
 80102a6:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80102aa:	f7fd bd5b 	b.w	800dd64 <kalman_3gyro.constprop.0+0x184c>
 80102ae:	eddf 7a7b 	vldr	s15, [pc, #492]	; 801049c <kalman_3gyro.constprop.0+0x3f84>
 80102b2:	f7fc ba9e 	b.w	800c7f2 <kalman_3gyro.constprop.0+0x2da>
 80102b6:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 80102ba:	f7fd bd7b 	b.w	800ddb4 <kalman_3gyro.constprop.0+0x189c>
 80102be:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80104a0 <kalman_3gyro.constprop.0+0x3f88>
 80102c2:	ed9f 4a78 	vldr	s8, [pc, #480]	; 80104a4 <kalman_3gyro.constprop.0+0x3f8c>
 80102c6:	eddf 4a78 	vldr	s9, [pc, #480]	; 80104a8 <kalman_3gyro.constprop.0+0x3f90>
 80102ca:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80104ac <kalman_3gyro.constprop.0+0x3f94>
 80102ce:	ed9f ca78 	vldr	s24, [pc, #480]	; 80104b0 <kalman_3gyro.constprop.0+0x3f98>
 80102d2:	ee68 8a8c 	vmul.f32	s17, s17, s24
 80102d6:	f7fd bf9d 	b.w	800e214 <kalman_3gyro.constprop.0+0x1cfc>
 80102da:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 80102de:	2a00      	cmp	r2, #0
 80102e0:	f340 8181 	ble.w	80105e6 <kalman_3gyro.constprop.0+0x40ce>
 80102e4:	ed9d 7a02 	vldr	s14, [sp, #8]
 80102e8:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 80102ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f4:	f340 8177 	ble.w	80105e6 <kalman_3gyro.constprop.0+0x40ce>
 80102f8:	3a01      	subs	r2, #1
 80102fa:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 80102fe:	f7fe b880 	b.w	800e402 <kalman_3gyro.constprop.0+0x1eea>
 8010302:	eeb0 aa69 	vmov.f32	s20, s19
 8010306:	eeb0 ba69 	vmov.f32	s22, s19
 801030a:	f7ff b9de 	b.w	800f6ca <kalman_3gyro.constprop.0+0x31b2>
 801030e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010312:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8010316:	eee7 7a07 	vfma.f32	s15, s14, s14
 801031a:	eef1 6ae7 	vsqrt.f32	s13, s15
 801031e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010322:	e6bb      	b.n	801009c <kalman_3gyro.constprop.0+0x3b84>
 8010324:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8010328:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 801032c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8010330:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8010334:	f7fe b802 	b.w	800e33c <kalman_3gyro.constprop.0+0x1e24>
 8010338:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 801033c:	f7fd bae6 	b.w	800d90c <kalman_3gyro.constprop.0+0x13f4>
 8010340:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 8010344:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010348:	ee27 7a0b 	vmul.f32	s14, s14, s22
 801034c:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010350:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 8010354:	f7fd bd06 	b.w	800dd64 <kalman_3gyro.constprop.0+0x184c>
 8010358:	ee7e 7a67 	vsub.f32	s15, s28, s15
 801035c:	ee17 0a90 	vmov	r0, s15
 8010360:	f7f0 f8f2 	bl	8000548 <__aeabi_f2d>
 8010364:	ec41 0b10 	vmov	d0, r0, r1
 8010368:	f004 ff0a 	bl	8015180 <ceil>
 801036c:	ec51 0b10 	vmov	r0, r1, d0
 8010370:	f7f0 fc1a 	bl	8000ba8 <__aeabi_d2f>
 8010374:	ee0e 0a10 	vmov	s28, r0
 8010378:	f7fc bc70 	b.w	800cc5c <kalman_3gyro.constprop.0+0x744>
 801037c:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010380:	ee17 0a90 	vmov	r0, s15
 8010384:	f7f0 f8e0 	bl	8000548 <__aeabi_f2d>
 8010388:	ec41 0b10 	vmov	d0, r0, r1
 801038c:	f004 fef8 	bl	8015180 <ceil>
 8010390:	ec51 0b10 	vmov	r0, r1, d0
 8010394:	f7f0 fc08 	bl	8000ba8 <__aeabi_d2f>
 8010398:	ee0d 0a90 	vmov	s27, r0
 801039c:	f7fc bc81 	b.w	800cca2 <kalman_3gyro.constprop.0+0x78a>
 80103a0:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80103a4:	ee17 0a90 	vmov	r0, s15
 80103a8:	f7f0 f8ce 	bl	8000548 <__aeabi_f2d>
 80103ac:	ec41 0b10 	vmov	d0, r0, r1
 80103b0:	f004 fee6 	bl	8015180 <ceil>
 80103b4:	ec51 0b10 	vmov	r0, r1, d0
 80103b8:	f7f0 fbf6 	bl	8000ba8 <__aeabi_d2f>
 80103bc:	ee0d 0a90 	vmov	s27, r0
 80103c0:	f7fc bcd5 	b.w	800cd6e <kalman_3gyro.constprop.0+0x856>
 80103c4:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80103c8:	ee17 0a90 	vmov	r0, s15
 80103cc:	f7f0 f8bc 	bl	8000548 <__aeabi_f2d>
 80103d0:	ec41 0b10 	vmov	d0, r0, r1
 80103d4:	f004 fed4 	bl	8015180 <ceil>
 80103d8:	ec51 0b10 	vmov	r0, r1, d0
 80103dc:	f7f0 fbe4 	bl	8000ba8 <__aeabi_d2f>
 80103e0:	ee0b 0a10 	vmov	s22, r0
 80103e4:	f7fc bce6 	b.w	800cdb4 <kalman_3gyro.constprop.0+0x89c>
 80103e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ec:	f6fd addf 	blt.w	800dfae <kalman_3gyro.constprop.0+0x1a96>
 80103f0:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80104a8 <kalman_3gyro.constprop.0+0x3f90>
 80103f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80103f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103fc:	f140 8283 	bpl.w	8010906 <kalman_3gyro.constprop.0+0x43ee>
 8010400:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80104b4 <kalman_3gyro.constprop.0+0x3f9c>
 8010404:	eddf 4a2c 	vldr	s9, [pc, #176]	; 80104b8 <kalman_3gyro.constprop.0+0x3fa0>
 8010408:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 80104bc <kalman_3gyro.constprop.0+0x3fa4>
 801040c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010410:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010414:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010418:	eea6 7a86 	vfma.f32	s14, s13, s12
 801041c:	f7fd bdd1 	b.w	800dfc2 <kalman_3gyro.constprop.0+0x1aaa>
 8010420:	ee78 7a67 	vsub.f32	s15, s16, s15
 8010424:	ee17 0a90 	vmov	r0, s15
 8010428:	f7f0 f88e 	bl	8000548 <__aeabi_f2d>
 801042c:	ec41 0b10 	vmov	d0, r0, r1
 8010430:	f004 fea6 	bl	8015180 <ceil>
 8010434:	ec51 0b10 	vmov	r0, r1, d0
 8010438:	f7f0 fbb6 	bl	8000ba8 <__aeabi_d2f>
 801043c:	ee08 0a10 	vmov	s16, r0
 8010440:	f7fc bbe9 	b.w	800cc16 <kalman_3gyro.constprop.0+0x6fe>
 8010444:	3eb33333 	.word	0x3eb33333
 8010448:	3ee66666 	.word	0x3ee66666
 801044c:	3f866666 	.word	0x3f866666
 8010450:	3ecccccd 	.word	0x3ecccccd
 8010454:	3f933333 	.word	0x3f933333
 8010458:	3dcccccd 	.word	0x3dcccccd
 801045c:	3e4ccccd 	.word	0x3e4ccccd
 8010460:	3e99999a 	.word	0x3e99999a
 8010464:	3f8ccccd 	.word	0x3f8ccccd
 8010468:	3f4ccccd 	.word	0x3f4ccccd
 801046c:	3ebd70a4 	.word	0x3ebd70a4
 8010470:	3f666666 	.word	0x3f666666
 8010474:	40a00000 	.word	0x40a00000
 8010478:	3f99999a 	.word	0x3f99999a
 801047c:	3f19999a 	.word	0x3f19999a
 8010480:	3fb9999a 	.word	0x3fb9999a
 8010484:	3fe66666 	.word	0x3fe66666
 8010488:	3f333333 	.word	0x3f333333
 801048c:	3fa66666 	.word	0x3fa66666
 8010490:	3fcccccd 	.word	0x3fcccccd
 8010494:	40200000 	.word	0x40200000
 8010498:	40400000 	.word	0x40400000
 801049c:	bf666666 	.word	0xbf666666
 80104a0:	391d4951 	.word	0x391d4951
 80104a4:	383cbe62 	.word	0x383cbe62
 80104a8:	3c75c28f 	.word	0x3c75c28f
 80104ac:	469c3e00 	.word	0x469c3e00
 80104b0:	43168000 	.word	0x43168000
 80104b4:	3c23d70a 	.word	0x3c23d70a
 80104b8:	3f19999a 	.word	0x3f19999a
 80104bc:	43480000 	.word	0x43480000
 80104c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80104c4:	ee3a aa47 	vsub.f32	s20, s20, s14
 80104c8:	eef0 7aca 	vabs.f32	s15, s20
 80104cc:	ee2a aa0a 	vmul.f32	s20, s20, s20
 80104d0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80104d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104d8:	eeb4 aac7 	vcmpe.f32	s20, s14
 80104dc:	bfb8      	it	lt
 80104de:	eef0 7a66 	vmovlt.f32	s15, s13
 80104e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e6:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 80104ea:	f77d af5b 	ble.w	800e3a4 <kalman_3gyro.constprop.0+0x1e8c>
 80104ee:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 80104f2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80104f6:	eeb4 aac7 	vcmpe.f32	s20, s14
 80104fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104fe:	f77d af51 	ble.w	800e3a4 <kalman_3gyro.constprop.0+0x1e8c>
 8010502:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 8010506:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 801050a:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801050e:	ee66 6a8a 	vmul.f32	s13, s13, s20
 8010512:	ee27 aa0a 	vmul.f32	s20, s14, s20
 8010516:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 801051a:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 801051e:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 8010522:	f7fd bf3f 	b.w	800e3a4 <kalman_3gyro.constprop.0+0x1e8c>
 8010526:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 801052a:	2a01      	cmp	r2, #1
 801052c:	d002      	beq.n	8010534 <kalman_3gyro.constprop.0+0x401c>
 801052e:	2b01      	cmp	r3, #1
 8010530:	f47d af1e 	bne.w	800e370 <kalman_3gyro.constprop.0+0x1e58>
 8010534:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010538:	eef4 7ac3 	vcmpe.f32	s15, s6
 801053c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010540:	bfa8      	it	ge
 8010542:	eeb0 3a67 	vmovge.f32	s6, s15
 8010546:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 801054a:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 801054e:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 8010552:	f7fd bf0d 	b.w	800e370 <kalman_3gyro.constprop.0+0x1e58>
 8010556:	ee78 7a67 	vsub.f32	s15, s16, s15
 801055a:	ee17 0a90 	vmov	r0, s15
 801055e:	f7ef fff3 	bl	8000548 <__aeabi_f2d>
 8010562:	ec41 0b10 	vmov	d0, r0, r1
 8010566:	f004 fe0b 	bl	8015180 <ceil>
 801056a:	ec51 0b10 	vmov	r0, r1, d0
 801056e:	f7f0 fb1b 	bl	8000ba8 <__aeabi_d2f>
 8010572:	ee08 0a10 	vmov	s16, r0
 8010576:	f7fc bc40 	b.w	800cdfa <kalman_3gyro.constprop.0+0x8e2>
 801057a:	ee7b 7a67 	vsub.f32	s15, s22, s15
 801057e:	ee17 0a90 	vmov	r0, s15
 8010582:	f7ef ffe1 	bl	8000548 <__aeabi_f2d>
 8010586:	ec41 0b10 	vmov	d0, r0, r1
 801058a:	f004 fdf9 	bl	8015180 <ceil>
 801058e:	ec51 0b10 	vmov	r0, r1, d0
 8010592:	f7f0 fb09 	bl	8000ba8 <__aeabi_d2f>
 8010596:	ee0b 0a10 	vmov	s22, r0
 801059a:	f7fc bcb7 	b.w	800cf0c <kalman_3gyro.constprop.0+0x9f4>
 801059e:	ee78 7a67 	vsub.f32	s15, s16, s15
 80105a2:	ee17 0a90 	vmov	r0, s15
 80105a6:	f7ef ffcf 	bl	8000548 <__aeabi_f2d>
 80105aa:	ec41 0b10 	vmov	d0, r0, r1
 80105ae:	f004 fde7 	bl	8015180 <ceil>
 80105b2:	ec51 0b10 	vmov	r0, r1, d0
 80105b6:	f7f0 faf7 	bl	8000ba8 <__aeabi_d2f>
 80105ba:	ee08 0a10 	vmov	s16, r0
 80105be:	f7fc bcc8 	b.w	800cf52 <kalman_3gyro.constprop.0+0xa3a>
 80105c2:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80105c6:	ee17 0a90 	vmov	r0, s15
 80105ca:	f7ef ffbd 	bl	8000548 <__aeabi_f2d>
 80105ce:	ec41 0b10 	vmov	d0, r0, r1
 80105d2:	f004 fdd5 	bl	8015180 <ceil>
 80105d6:	ec51 0b10 	vmov	r0, r1, d0
 80105da:	f7f0 fae5 	bl	8000ba8 <__aeabi_d2f>
 80105de:	ee0d 0a90 	vmov	s27, r0
 80105e2:	f7fc bc70 	b.w	800cec6 <kalman_3gyro.constprop.0+0x9ae>
 80105e6:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 80105ea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80105ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105f2:	eeb4 7aeb 	vcmpe.f32	s14, s23
 80105f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fa:	f77d af02 	ble.w	800e402 <kalman_3gyro.constprop.0+0x1eea>
 80105fe:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010606:	eef4 7aec 	vcmpe.f32	s15, s25
 801060a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801060e:	f77d aef8 	ble.w	800e402 <kalman_3gyro.constprop.0+0x1eea>
 8010612:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010616:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801061a:	eef4 7acd 	vcmpe.f32	s15, s26
 801061e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010622:	f140 8711 	bpl.w	8011448 <kalman_3gyro.constprop.0+0x4f30>
 8010626:	3303      	adds	r3, #3
 8010628:	f7ff ba35 	b.w	800fa96 <kalman_3gyro.constprop.0+0x357e>
 801062c:	460b      	mov	r3, r1
 801062e:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010632:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010636:	9181      	str	r1, [sp, #516]	; 0x204
 8010638:	9282      	str	r2, [sp, #520]	; 0x208
 801063a:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 801063e:	9183      	str	r1, [sp, #524]	; 0x20c
 8010640:	2200      	movs	r2, #0
 8010642:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010646:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801064a:	f7fe baa8 	b.w	800eb9e <kalman_3gyro.constprop.0+0x2686>
 801064e:	a936      	add	r1, sp, #216	; 0xd8
 8010650:	a854      	add	r0, sp, #336	; 0x150
 8010652:	f7fa ff85 	bl	800b560 <b_dcm2q>
 8010656:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801065a:	4619      	mov	r1, r3
 801065c:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010660:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010664:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010668:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 801066c:	f006 fcd4 	bl	8017018 <memset>
 8010670:	4bd8      	ldr	r3, [pc, #864]	; (80109d4 <kalman_3gyro.constprop.0+0x44bc>)
 8010672:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010676:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 801067a:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 801067e:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010682:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010686:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801068a:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 801068e:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010692:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010696:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010698:	781a      	ldrb	r2, [r3, #0]
 801069a:	ee07 2a90 	vmov	s15, r2
 801069e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80106a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106aa:	f040 84dc 	bne.w	8011066 <kalman_3gyro.constprop.0+0x4b4e>
 80106ae:	eeb0 7a4c 	vmov.f32	s14, s24
 80106b2:	2300      	movs	r3, #0
 80106b4:	f88b 3000 	strb.w	r3, [fp]
 80106b8:	eddb ea02 	vldr	s29, [fp, #8]
 80106bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80106c0:	2301      	movs	r3, #1
 80106c2:	f7fd bb8d 	b.w	800dde0 <kalman_3gyro.constprop.0+0x18c8>
 80106c6:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 80106ca:	eef4 4ac8 	vcmpe.f32	s9, s16
 80106ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106d2:	f340 85da 	ble.w	801128a <kalman_3gyro.constprop.0+0x4d72>
 80106d6:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 80106da:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 80106de:	ee78 3a62 	vsub.f32	s7, s16, s5
 80106e2:	ee37 7a44 	vsub.f32	s14, s14, s8
 80106e6:	ee74 4ae2 	vsub.f32	s9, s9, s5
 80106ea:	ee27 7a23 	vmul.f32	s14, s14, s7
 80106ee:	ee87 ea24 	vdiv.f32	s28, s14, s9
 80106f2:	ee3e ea04 	vadd.f32	s28, s28, s8
 80106f6:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 80106fa:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80106fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010702:	f63d a94b 	bhi.w	800d99c <kalman_3gyro.constprop.0+0x1484>
 8010706:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 801070a:	eef4 4ac8 	vcmpe.f32	s9, s16
 801070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010712:	f340 84bc 	ble.w	801108e <kalman_3gyro.constprop.0+0x4b76>
 8010716:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 801071a:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 801071e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010722:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010726:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801072a:	ee24 4a03 	vmul.f32	s8, s8, s6
 801072e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010732:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010736:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 801073a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801073e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010742:	f63d a94b 	bhi.w	800d9dc <kalman_3gyro.constprop.0+0x14c4>
 8010746:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 801074a:	eef4 4ac8 	vcmpe.f32	s9, s16
 801074e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010752:	f340 84a8 	ble.w	80110a6 <kalman_3gyro.constprop.0+0x4b8e>
 8010756:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 801075a:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 801075e:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010762:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010766:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801076a:	ee24 4a03 	vmul.f32	s8, s8, s6
 801076e:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010772:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010776:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 801077a:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801077e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010782:	f63d a94b 	bhi.w	800da1c <kalman_3gyro.constprop.0+0x1504>
 8010786:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 801078a:	eef4 4ac8 	vcmpe.f32	s9, s16
 801078e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010792:	f340 8490 	ble.w	80110b6 <kalman_3gyro.constprop.0+0x4b9e>
 8010796:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 801079a:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 801079e:	ee38 3a47 	vsub.f32	s6, s16, s14
 80107a2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80107a6:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80107aa:	ee24 4a03 	vmul.f32	s8, s8, s6
 80107ae:	ee84 ea07 	vdiv.f32	s28, s8, s14
 80107b2:	ee3e ea23 	vadd.f32	s28, s28, s7
 80107b6:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 80107ba:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80107be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c2:	f6fd a94b 	blt.w	800da5c <kalman_3gyro.constprop.0+0x1544>
 80107c6:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 80107ca:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80107ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107d2:	f57d a94b 	bpl.w	800da6c <kalman_3gyro.constprop.0+0x1554>
 80107d6:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 80107da:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 80107de:	ee38 3a47 	vsub.f32	s6, s16, s14
 80107e2:	ee34 4a63 	vsub.f32	s8, s8, s7
 80107e6:	ee74 4ac7 	vsub.f32	s9, s9, s14
 80107ea:	ee24 7a03 	vmul.f32	s14, s8, s6
 80107ee:	ee87 ea24 	vdiv.f32	s28, s14, s9
 80107f2:	ee3e ea23 	vadd.f32	s28, s28, s7
 80107f6:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 80107fa:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80107fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010802:	f6fd a94b 	blt.w	800da9c <kalman_3gyro.constprop.0+0x1584>
 8010806:	eeb4 8ac5 	vcmpe.f32	s16, s10
 801080a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080e:	f57d a945 	bpl.w	800da9c <kalman_3gyro.constprop.0+0x1584>
 8010812:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010816:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 801081a:	ee78 3a47 	vsub.f32	s7, s16, s14
 801081e:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010822:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010826:	ee24 5aa3 	vmul.f32	s10, s9, s7
 801082a:	ee85 ea07 	vdiv.f32	s28, s10, s14
 801082e:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010832:	f7fd b933 	b.w	800da9c <kalman_3gyro.constprop.0+0x1584>
 8010836:	eddf 6a68 	vldr	s13, [pc, #416]	; 80109d8 <kalman_3gyro.constprop.0+0x44c0>
 801083a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010842:	f57d ac56 	bpl.w	800e0f2 <kalman_3gyro.constprop.0+0x1bda>
 8010846:	eddf 3a65 	vldr	s7, [pc, #404]	; 80109dc <kalman_3gyro.constprop.0+0x44c4>
 801084a:	eddf 2a65 	vldr	s5, [pc, #404]	; 80109e0 <kalman_3gyro.constprop.0+0x44c8>
 801084e:	ed9f 3a65 	vldr	s6, [pc, #404]	; 80109e4 <kalman_3gyro.constprop.0+0x44cc>
 8010852:	eddf 6a65 	vldr	s13, [pc, #404]	; 80109e8 <kalman_3gyro.constprop.0+0x44d0>
 8010856:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801085a:	ee63 3aa2 	vmul.f32	s7, s7, s5
 801085e:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010862:	eeb0 ca66 	vmov.f32	s24, s13
 8010866:	eddf 6a61 	vldr	s13, [pc, #388]	; 80109ec <kalman_3gyro.constprop.0+0x44d4>
 801086a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010872:	f6fd ac56 	blt.w	800e122 <kalman_3gyro.constprop.0+0x1c0a>
 8010876:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80109f0 <kalman_3gyro.constprop.0+0x44d8>
 801087a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801087e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010882:	f57d ac56 	bpl.w	800e132 <kalman_3gyro.constprop.0+0x1c1a>
 8010886:	eddf 3a59 	vldr	s7, [pc, #356]	; 80109ec <kalman_3gyro.constprop.0+0x44d4>
 801088a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 801088e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010892:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8010896:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 801089a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801089e:	eee3 6a83 	vfma.f32	s13, s7, s6
 80108a2:	eeb0 ca66 	vmov.f32	s24, s13
 80108a6:	eddf 6a53 	vldr	s13, [pc, #332]	; 80109f4 <kalman_3gyro.constprop.0+0x44dc>
 80108aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80108ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108b2:	f6fd ac56 	blt.w	800e162 <kalman_3gyro.constprop.0+0x1c4a>
 80108b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80108ba:	eef4 7ae6 	vcmpe.f32	s15, s13
 80108be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c2:	f57d ac56 	bpl.w	800e172 <kalman_3gyro.constprop.0+0x1c5a>
 80108c6:	eddf 3a4b 	vldr	s7, [pc, #300]	; 80109f4 <kalman_3gyro.constprop.0+0x44dc>
 80108ca:	eddf 2a4b 	vldr	s5, [pc, #300]	; 80109f8 <kalman_3gyro.constprop.0+0x44e0>
 80108ce:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 80109fc <kalman_3gyro.constprop.0+0x44e4>
 80108d2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 80108d6:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 80108da:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80108de:	eee3 6a83 	vfma.f32	s13, s7, s6
 80108e2:	eeb0 ca66 	vmov.f32	s24, s13
 80108e6:	e4f4      	b.n	80102d2 <kalman_3gyro.constprop.0+0x3dba>
 80108e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ec:	f57d abe1 	bpl.w	800e0b2 <kalman_3gyro.constprop.0+0x1b9a>
 80108f0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 80109dc <kalman_3gyro.constprop.0+0x44c4>
 80108f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80108f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108fc:	da9b      	bge.n	8010836 <kalman_3gyro.constprop.0+0x431e>
 80108fe:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8010902:	f7fd bbee 	b.w	800e0e2 <kalman_3gyro.constprop.0+0x1bca>
 8010906:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80109d8 <kalman_3gyro.constprop.0+0x44c0>
 801090a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010912:	f57d ab5e 	bpl.w	800dfd2 <kalman_3gyro.constprop.0+0x1aba>
 8010916:	eddf 6a31 	vldr	s13, [pc, #196]	; 80109dc <kalman_3gyro.constprop.0+0x44c4>
 801091a:	eddf 4a39 	vldr	s9, [pc, #228]	; 8010a00 <kalman_3gyro.constprop.0+0x44e8>
 801091e:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80109e4 <kalman_3gyro.constprop.0+0x44cc>
 8010922:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010a04 <kalman_3gyro.constprop.0+0x44ec>
 8010926:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801092a:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801092e:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010932:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80109ec <kalman_3gyro.constprop.0+0x44d4>
 8010936:	eef4 7ae6 	vcmpe.f32	s15, s13
 801093a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801093e:	f6fd ab5e 	blt.w	800dffe <kalman_3gyro.constprop.0+0x1ae6>
 8010942:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80109f0 <kalman_3gyro.constprop.0+0x44d8>
 8010946:	eef4 7ac7 	vcmpe.f32	s15, s14
 801094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801094e:	f57d ab5e 	bpl.w	800e00e <kalman_3gyro.constprop.0+0x1af6>
 8010952:	eddf 6a26 	vldr	s13, [pc, #152]	; 80109ec <kalman_3gyro.constprop.0+0x44d4>
 8010956:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801095a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801095e:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010962:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8010966:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801096a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801096e:	eddf 6a21 	vldr	s13, [pc, #132]	; 80109f4 <kalman_3gyro.constprop.0+0x44dc>
 8010972:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801097a:	f6fd ab5e 	blt.w	800e03a <kalman_3gyro.constprop.0+0x1b22>
 801097e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098a:	f57d ab5d 	bpl.w	800e048 <kalman_3gyro.constprop.0+0x1b30>
 801098e:	eddf 6a19 	vldr	s13, [pc, #100]	; 80109f4 <kalman_3gyro.constprop.0+0x44dc>
 8010992:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8010a08 <kalman_3gyro.constprop.0+0x44f0>
 8010996:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80109fc <kalman_3gyro.constprop.0+0x44e4>
 801099a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8010a0c <kalman_3gyro.constprop.0+0x44f4>
 801099e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80109a2:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80109a6:	eea6 7a86 	vfma.f32	s14, s13, s12
 80109aa:	f7fd bb5b 	b.w	800e064 <kalman_3gyro.constprop.0+0x1b4c>
 80109ae:	9b01      	ldr	r3, [sp, #4]
 80109b0:	e63d      	b.n	801062e <kalman_3gyro.constprop.0+0x4116>
 80109b2:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 80109b6:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80109ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109be:	da2b      	bge.n	8010a18 <kalman_3gyro.constprop.0+0x4500>
 80109c0:	ed9f ba13 	vldr	s22, [pc, #76]	; 8010a10 <kalman_3gyro.constprop.0+0x44f8>
 80109c4:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 80109c8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80109cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d0:	db3a      	blt.n	8010a48 <kalman_3gyro.constprop.0+0x4530>
 80109d2:	e386      	b.n	80110e2 <kalman_3gyro.constprop.0+0x4bca>
 80109d4:	40a00000 	.word	0x40a00000
 80109d8:	3cf5c28f 	.word	0x3cf5c28f
 80109dc:	3c75c28f 	.word	0x3c75c28f
 80109e0:	3dccccd0 	.word	0x3dccccd0
 80109e4:	42855556 	.word	0x42855556
 80109e8:	3f866666 	.word	0x3f866666
 80109ec:	3d4ccccd 	.word	0x3d4ccccd
 80109f0:	3dcccccd 	.word	0x3dcccccd
 80109f4:	3e4ccccd 	.word	0x3e4ccccd
 80109f8:	42200000 	.word	0x42200000
 80109fc:	40555555 	.word	0x40555555
 8010a00:	3ecccccc 	.word	0x3ecccccc
 8010a04:	3fcccccd 	.word	0x3fcccccd
 8010a08:	43f00000 	.word	0x43f00000
 8010a0c:	42ee0000 	.word	0x42ee0000
 8010a10:	00000000 	.word	0x00000000
 8010a14:	eeb0 7a64 	vmov.f32	s14, s9
 8010a18:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8010a1c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a24:	f140 8359 	bpl.w	80110da <kalman_3gyro.constprop.0+0x4bc2>
 8010a28:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8010a2c:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8010a30:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010a34:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010a38:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010a3c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010a40:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010a44:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010a48:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 8010a4c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a54:	f2c0 835d 	blt.w	8011112 <kalman_3gyro.constprop.0+0x4bfa>
 8010a58:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 8010a5c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a64:	f140 8402 	bpl.w	801126c <kalman_3gyro.constprop.0+0x4d54>
 8010a68:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 8010a6c:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8010a70:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010a74:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010a78:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010a7c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010a80:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010a84:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010a88:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 8010a8c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a94:	f200 835d 	bhi.w	8011152 <kalman_3gyro.constprop.0+0x4c3a>
 8010a98:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 8010a9c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa4:	f340 83e8 	ble.w	8011278 <kalman_3gyro.constprop.0+0x4d60>
 8010aa8:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 8010aac:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8010ab0:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010ab4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ab8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010abc:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010ac0:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010ac4:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010ac8:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 8010acc:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad4:	f200 835d 	bhi.w	8011192 <kalman_3gyro.constprop.0+0x4c7a>
 8010ad8:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 8010adc:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae4:	f340 83b4 	ble.w	8011250 <kalman_3gyro.constprop.0+0x4d38>
 8010ae8:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8010aec:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8010af0:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010af4:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010af8:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010afc:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010b00:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010b04:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010b08:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 8010b0c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b14:	f2c0 835c 	blt.w	80111d0 <kalman_3gyro.constprop.0+0x4cb8>
 8010b18:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8010b1c:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b24:	f140 835c 	bpl.w	80111e0 <kalman_3gyro.constprop.0+0x4cc8>
 8010b28:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 8010b2c:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8010b30:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010b34:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010b38:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010b3c:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010b40:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8010b44:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010b48:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8010b4c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b54:	f6fc aeda 	blt.w	800d90c <kalman_3gyro.constprop.0+0x13f4>
 8010b58:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b60:	f57c aed4 	bpl.w	800d90c <kalman_3gyro.constprop.0+0x13f4>
 8010b64:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8010b68:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 8010b6c:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010b70:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010b74:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010b78:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010b7c:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8010b80:	ee3b ba04 	vadd.f32	s22, s22, s8
 8010b84:	f7fc bec2 	b.w	800d90c <kalman_3gyro.constprop.0+0x13f4>
 8010b88:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010b8c:	eef4 7acd 	vcmpe.f32	s15, s26
 8010b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b94:	dd2c      	ble.n	8010bf0 <kalman_3gyro.constprop.0+0x46d8>
 8010b96:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8010b9a:	eef4 7aeb 	vcmpe.f32	s15, s23
 8010b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ba2:	dd25      	ble.n	8010bf0 <kalman_3gyro.constprop.0+0x46d8>
 8010ba4:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8010ba8:	eef4 7aec 	vcmpe.f32	s15, s25
 8010bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb0:	dd1e      	ble.n	8010bf0 <kalman_3gyro.constprop.0+0x46d8>
 8010bb2:	eddd 5a03 	vldr	s11, [sp, #12]
 8010bb6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010bba:	eef4 5ae7 	vcmpe.f32	s11, s15
 8010bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bc2:	d515      	bpl.n	8010bf0 <kalman_3gyro.constprop.0+0x46d8>
 8010bc4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010bc8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010bcc:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010bd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd8:	d50a      	bpl.n	8010bf0 <kalman_3gyro.constprop.0+0x46d8>
 8010bda:	2300      	movs	r3, #0
 8010bdc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010be0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010be4:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8010be8:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8010bec:	f7fd bf4c 	b.w	800ea88 <kalman_3gyro.constprop.0+0x2570>
 8010bf0:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 8010bf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bfc:	dd0b      	ble.n	8010c16 <kalman_3gyro.constprop.0+0x46fe>
 8010bfe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8010c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0a:	f100 843f 	bmi.w	801148c <kalman_3gyro.constprop.0+0x4f74>
 8010c0e:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8010c12:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010c16:	2300      	movs	r3, #0
 8010c18:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8010c1c:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8010c20:	f7fd bf32 	b.w	800ea88 <kalman_3gyro.constprop.0+0x2570>
 8010c24:	2301      	movs	r3, #1
 8010c26:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8010c2a:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8010c2e:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 8010c32:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 8010c36:	edd2 5a00 	vldr	s11, [r2]
 8010c3a:	ed93 7a00 	vldr	s14, [r3]
 8010c3e:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 8010c42:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 8010c46:	ed92 5a00 	vldr	s10, [r2]
 8010c4a:	edd3 6a00 	vldr	s13, [r3]
 8010c4e:	ee25 4aa5 	vmul.f32	s8, s11, s11
 8010c52:	ee67 4a07 	vmul.f32	s9, s14, s14
 8010c56:	eea5 4a05 	vfma.f32	s8, s10, s10
 8010c5a:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 8010c5e:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 8010c62:	eee6 4aa6 	vfma.f32	s9, s13, s13
 8010c66:	aa5d      	add	r2, sp, #372	; 0x174
 8010c68:	a833      	add	r0, sp, #204	; 0xcc
 8010c6a:	ed91 6a00 	vldr	s12, [r1]
 8010c6e:	edd3 7a00 	vldr	s15, [r3]
 8010c72:	eea6 4a06 	vfma.f32	s8, s12, s12
 8010c76:	a92d      	add	r1, sp, #180	; 0xb4
 8010c78:	ad5d      	add	r5, sp, #372	; 0x174
 8010c7a:	eee7 4aa7 	vfma.f32	s9, s15, s15
 8010c7e:	ac66      	add	r4, sp, #408	; 0x198
 8010c80:	eef1 2ac4 	vsqrt.f32	s5, s8
 8010c84:	eeb1 3ae4 	vsqrt.f32	s6, s9
 8010c88:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8010c8c:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 8010c90:	eec3 4a83 	vdiv.f32	s9, s7, s6
 8010c94:	ee25 5a04 	vmul.f32	s10, s10, s8
 8010c98:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010c9c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8010ca0:	ee65 5a84 	vmul.f32	s11, s11, s8
 8010ca4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8010ca8:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010cac:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 8010cb0:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8010cb4:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8010cb8:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 8010cbc:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8010cc0:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 8010cc4:	f7fa fbac 	bl	800b420 <getRotationMatrix>
 8010cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cd0:	682e      	ldr	r6, [r5, #0]
 8010cd2:	6026      	str	r6, [r4, #0]
 8010cd4:	ad66      	add	r5, sp, #408	; 0x198
 8010cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cd8:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8010cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ce2:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 8010ce6:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 8010cea:	6026      	str	r6, [r4, #0]
 8010cec:	eef0 7ae7 	vabs.f32	s15, s15
 8010cf0:	eeb0 7ac7 	vabs.f32	s14, s14
 8010cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfc:	f100 81df 	bmi.w	80110be <kalman_3gyro.constprop.0+0x4ba6>
 8010d00:	2307      	movs	r3, #7
 8010d02:	f04f 0c04 	mov.w	ip, #4
 8010d06:	9305      	str	r3, [sp, #20]
 8010d08:	2300      	movs	r3, #0
 8010d0a:	4662      	mov	r2, ip
 8010d0c:	2003      	movs	r0, #3
 8010d0e:	2706      	movs	r7, #6
 8010d10:	f04f 0e01 	mov.w	lr, #1
 8010d14:	9304      	str	r3, [sp, #16]
 8010d16:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 8010d1a:	eeb0 7ac7 	vabs.f32	s14, s14
 8010d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d26:	f340 8296 	ble.w	8011256 <kalman_3gyro.constprop.0+0x4d3e>
 8010d2a:	2306      	movs	r3, #6
 8010d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8010d2e:	2307      	movs	r3, #7
 8010d30:	9305      	str	r3, [sp, #20]
 8010d32:	2300      	movs	r3, #0
 8010d34:	2708      	movs	r7, #8
 8010d36:	f04f 0c04 	mov.w	ip, #4
 8010d3a:	9302      	str	r3, [sp, #8]
 8010d3c:	2302      	movs	r3, #2
 8010d3e:	9707      	str	r7, [sp, #28]
 8010d40:	4662      	mov	r2, ip
 8010d42:	2005      	movs	r0, #5
 8010d44:	f04f 0e01 	mov.w	lr, #1
 8010d48:	9304      	str	r3, [sp, #16]
 8010d4a:	ab66      	add	r3, sp, #408	; 0x198
 8010d4c:	441a      	add	r2, r3
 8010d4e:	9b07      	ldr	r3, [sp, #28]
 8010d50:	edd2 6a00 	vldr	s13, [r2]
 8010d54:	9a02      	ldr	r2, [sp, #8]
 8010d56:	a966      	add	r1, sp, #408	; 0x198
 8010d58:	440b      	add	r3, r1
 8010d5a:	ed93 7a00 	vldr	s14, [r3]
 8010d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d62:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010d66:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8010d6a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010d6e:	9a04      	ldr	r2, [sp, #16]
 8010d70:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 8010d74:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8010d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010d7c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8010d80:	0080      	lsls	r0, r0, #2
 8010d82:	900e      	str	r0, [sp, #56]	; 0x38
 8010d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d86:	940d      	str	r4, [sp, #52]	; 0x34
 8010d88:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010d8c:	edc3 7a00 	vstr	s15, [r3]
 8010d90:	ed96 7a00 	vldr	s14, [r6]
 8010d94:	edd1 7a00 	vldr	s15, [r1]
 8010d98:	930c      	str	r3, [sp, #48]	; 0x30
 8010d9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010d9e:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 8010da2:	0080      	lsls	r0, r0, #2
 8010da4:	9006      	str	r0, [sp, #24]
 8010da6:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 8010daa:	00bf      	lsls	r7, r7, #2
 8010dac:	9711      	str	r7, [sp, #68]	; 0x44
 8010dae:	9f05      	ldr	r7, [sp, #20]
 8010db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010db2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8010db6:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010dba:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	9307      	str	r3, [sp, #28]
 8010dc2:	9b02      	ldr	r3, [sp, #8]
 8010dc4:	edc6 6a00 	vstr	s13, [r6]
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8010dcc:	9b04      	ldr	r3, [sp, #16]
 8010dce:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8010dd0:	009b      	lsls	r3, r3, #2
 8010dd2:	9312      	str	r3, [sp, #72]	; 0x48
 8010dd4:	9b05      	ldr	r3, [sp, #20]
 8010dd6:	ed96 7a00 	vldr	s14, [r6]
 8010dda:	009b      	lsls	r3, r3, #2
 8010ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8010dde:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8010de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010de4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8010de8:	ed93 6a00 	vldr	s12, [r3]
 8010dec:	edd2 7a00 	vldr	s15, [r2]
 8010df0:	eee6 7a47 	vfms.f32	s15, s12, s14
 8010df4:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8010df8:	950a      	str	r5, [sp, #40]	; 0x28
 8010dfa:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8010dfe:	edc2 7a00 	vstr	s15, [r2]
 8010e02:	ed96 7a00 	vldr	s14, [r6]
 8010e06:	edd4 7a00 	vldr	s15, [r4]
 8010e0a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010e0e:	edc4 7a00 	vstr	s15, [r4]
 8010e12:	edd0 5a00 	vldr	s11, [r0]
 8010e16:	ed97 7a00 	vldr	s14, [r7]
 8010e1a:	eea6 7a65 	vfms.f32	s14, s12, s11
 8010e1e:	eef0 7ae7 	vabs.f32	s15, s15
 8010e22:	ed87 7a00 	vstr	s14, [r7]
 8010e26:	ed90 6a00 	vldr	s12, [r0]
 8010e2a:	ed91 7a00 	vldr	s14, [r1]
 8010e2e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8010e32:	ed81 7a00 	vstr	s14, [r1]
 8010e36:	ed92 7a00 	vldr	s14, [r2]
 8010e3a:	eeb0 7ac7 	vabs.f32	s14, s14
 8010e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e46:	dd12      	ble.n	8010e6e <kalman_3gyro.constprop.0+0x4956>
 8010e48:	9a07      	ldr	r2, [sp, #28]
 8010e4a:	9f05      	ldr	r7, [sp, #20]
 8010e4c:	9806      	ldr	r0, [sp, #24]
 8010e4e:	9209      	str	r2, [sp, #36]	; 0x24
 8010e50:	4673      	mov	r3, lr
 8010e52:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010e56:	9302      	str	r3, [sp, #8]
 8010e58:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	9206      	str	r2, [sp, #24]
 8010e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8010e62:	00ba      	lsls	r2, r7, #2
 8010e64:	ea4f 038e 	mov.w	r3, lr, lsl #2
 8010e68:	4605      	mov	r5, r0
 8010e6a:	9207      	str	r2, [sp, #28]
 8010e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8010e6e:	9b06      	ldr	r3, [sp, #24]
 8010e70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010e72:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 8010e76:	4413      	add	r3, r2
 8010e78:	461c      	mov	r4, r3
 8010e7a:	462b      	mov	r3, r5
 8010e7c:	4413      	add	r3, r2
 8010e7e:	ed94 7a00 	vldr	s14, [r4]
 8010e82:	edd3 7a00 	vldr	s15, [r3]
 8010e86:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e8e:	4413      	add	r3, r2
 8010e90:	461a      	mov	r2, r3
 8010e92:	9b07      	ldr	r3, [sp, #28]
 8010e94:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010e98:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8010e9c:	440b      	add	r3, r1
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	442e      	add	r6, r5
 8010ea2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010ea4:	9607      	str	r6, [sp, #28]
 8010ea6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010ea8:	ed84 2a00 	vstr	s4, [r4]
 8010eac:	442b      	add	r3, r5
 8010eae:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 8010eb2:	9306      	str	r3, [sp, #24]
 8010eb4:	19bb      	adds	r3, r7, r6
 8010eb6:	ed92 7a00 	vldr	s14, [r2]
 8010eba:	edd1 7a00 	vldr	s15, [r1]
 8010ebe:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8010ec0:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8010ec4:	edd3 3a00 	vldr	s7, [r3]
 8010ec8:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8010ecc:	eee2 7a47 	vfms.f32	s15, s4, s14
 8010ed0:	4423      	add	r3, r4
 8010ed2:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 8010ed6:	ed93 5a00 	vldr	s10, [r3]
 8010eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010edc:	edc1 7a00 	vstr	s15, [r1]
 8010ee0:	462f      	mov	r7, r5
 8010ee2:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 8010ee6:	4629      	mov	r1, r5
 8010ee8:	eb05 0c03 	add.w	ip, r5, r3
 8010eec:	9d04      	ldr	r5, [sp, #16]
 8010eee:	ed92 1a00 	vldr	s2, [r2]
 8010ef2:	4437      	add	r7, r6
 8010ef4:	9705      	str	r7, [sp, #20]
 8010ef6:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 8010efa:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8010efe:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8010f02:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8010f06:	4419      	add	r1, r3
 8010f08:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8010f0c:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8010f10:	191c      	adds	r4, r3, r4
 8010f12:	9b02      	ldr	r3, [sp, #8]
 8010f14:	9104      	str	r1, [sp, #16]
 8010f16:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 8010f1a:	9409      	str	r4, [sp, #36]	; 0x24
 8010f1c:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8010f20:	463d      	mov	r5, r7
 8010f22:	9904      	ldr	r1, [sp, #16]
 8010f24:	46b6      	mov	lr, r6
 8010f26:	4623      	mov	r3, r4
 8010f28:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8010f2c:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 8010f30:	edd0 7a00 	vldr	s15, [r0]
 8010f34:	9805      	ldr	r0, [sp, #20]
 8010f36:	ed91 0a00 	vldr	s0, [r1]
 8010f3a:	ed90 8a00 	vldr	s16, [r0]
 8010f3e:	eddc 4a00 	vldr	s9, [ip]
 8010f42:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 8010f46:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 8010f4a:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8010f4e:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 8010f52:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 8010f56:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 8010f5a:	a85d      	add	r0, sp, #372	; 0x174
 8010f5c:	a93e      	add	r1, sp, #248	; 0xf8
 8010f5e:	edd7 5a00 	vldr	s11, [r7]
 8010f62:	ed96 6a00 	vldr	s12, [r6]
 8010f66:	9a06      	ldr	r2, [sp, #24]
 8010f68:	ed95 7a00 	vldr	s14, [r5]
 8010f6c:	edd4 6a00 	vldr	s13, [r4]
 8010f70:	ed93 3a00 	vldr	s6, [r3]
 8010f74:	edde 7a00 	vldr	s15, [lr]
 8010f78:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8010f7a:	edd2 1a00 	vldr	s3, [r2]
 8010f7e:	9e07      	ldr	r6, [sp, #28]
 8010f80:	eee8 3a45 	vfms.f32	s7, s16, s10
 8010f84:	eee0 4a45 	vfms.f32	s9, s0, s10
 8010f88:	eea8 6a65 	vfms.f32	s12, s16, s11
 8010f8c:	eee7 7a48 	vfms.f32	s15, s14, s16
 8010f90:	eee0 6a65 	vfms.f32	s13, s0, s11
 8010f94:	eea7 3a40 	vfms.f32	s6, s14, s0
 8010f98:	ed94 0a00 	vldr	s0, [r4]
 8010f9c:	eea2 3a67 	vfms.f32	s6, s4, s15
 8010fa0:	eee3 4ac2 	vfms.f32	s9, s7, s4
 8010fa4:	eee2 6a46 	vfms.f32	s13, s4, s12
 8010fa8:	ee80 2a80 	vdiv.f32	s4, s1, s0
 8010fac:	ee64 6a26 	vmul.f32	s13, s8, s13
 8010fb0:	ee64 4a24 	vmul.f32	s9, s8, s9
 8010fb4:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010fb8:	eea1 6a66 	vfms.f32	s12, s2, s13
 8010fbc:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8010fc0:	eee4 7a41 	vfms.f32	s15, s8, s2
 8010fc4:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8010fc8:	eea4 5ae1 	vfms.f32	s10, s9, s3
 8010fcc:	eea4 7a61 	vfms.f32	s14, s8, s3
 8010fd0:	ed96 3a00 	vldr	s6, [r6]
 8010fd4:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8010fd8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8010fdc:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010fe0:	ee22 6a86 	vmul.f32	s12, s5, s12
 8010fe4:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8010fe8:	eea3 5ac3 	vfms.f32	s10, s7, s6
 8010fec:	eee3 5a46 	vfms.f32	s11, s6, s12
 8010ff0:	ee27 7a02 	vmul.f32	s14, s14, s4
 8010ff4:	ee22 5a05 	vmul.f32	s10, s4, s10
 8010ff8:	ee62 5a25 	vmul.f32	s11, s4, s11
 8010ffc:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8011000:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 8011004:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8011008:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 801100c:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8011010:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 8011014:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8011018:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 801101c:	f7fa faa0 	bl	800b560 <b_dcm2q>
 8011020:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 8011024:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8011028:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 801102c:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8011030:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011034:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011038:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801103c:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8011040:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 8011044:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8011048:	2b00      	cmp	r3, #0
 801104a:	f43d ad20 	beq.w	800ea8e <kalman_3gyro.constprop.0+0x2576>
 801104e:	2200      	movs	r2, #0
 8011050:	9b01      	ldr	r3, [sp, #4]
 8011052:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011056:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 801105a:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 801105e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011062:	f7fd bd9c 	b.w	800eb9e <kalman_3gyro.constprop.0+0x2686>
 8011066:	edd3 7a02 	vldr	s15, [r3, #8]
 801106a:	ed93 7a01 	vldr	s14, [r3, #4]
 801106e:	edd3 6a03 	vldr	s13, [r3, #12]
 8011072:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011076:	eee7 7a07 	vfma.f32	s15, s14, s14
 801107a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801107e:	eeb1 6ae7 	vsqrt.f32	s12, s15
 8011082:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8011086:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 801108a:	f7ff bb12 	b.w	80106b2 <kalman_3gyro.constprop.0+0x419a>
 801108e:	eeb0 7a64 	vmov.f32	s14, s9
 8011092:	f7fc bc8b 	b.w	800d9ac <kalman_3gyro.constprop.0+0x1494>
 8011096:	eeb0 7a64 	vmov.f32	s14, s9
 801109a:	f7ff bb94 	b.w	80107c6 <kalman_3gyro.constprop.0+0x42ae>
 801109e:	eeb0 7a64 	vmov.f32	s14, s9
 80110a2:	f7ff bb50 	b.w	8010746 <kalman_3gyro.constprop.0+0x422e>
 80110a6:	eeb0 7a64 	vmov.f32	s14, s9
 80110aa:	f7fc bc9f 	b.w	800d9ec <kalman_3gyro.constprop.0+0x14d4>
 80110ae:	eeb0 7a64 	vmov.f32	s14, s9
 80110b2:	f7ff bb68 	b.w	8010786 <kalman_3gyro.constprop.0+0x426e>
 80110b6:	eeb0 7a64 	vmov.f32	s14, s9
 80110ba:	f7fc bcb7 	b.w	800da2c <kalman_3gyro.constprop.0+0x1514>
 80110be:	2200      	movs	r2, #0
 80110c0:	2004      	movs	r0, #4
 80110c2:	2301      	movs	r3, #1
 80110c4:	2406      	movs	r4, #6
 80110c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80110ca:	9007      	str	r0, [sp, #28]
 80110cc:	eef0 7a47 	vmov.f32	s15, s14
 80110d0:	4696      	mov	lr, r2
 80110d2:	f04f 0c03 	mov.w	ip, #3
 80110d6:	2707      	movs	r7, #7
 80110d8:	e61d      	b.n	8010d16 <kalman_3gyro.constprop.0+0x47fe>
 80110da:	ed9f bae2 	vldr	s22, [pc, #904]	; 8011464 <kalman_3gyro.constprop.0+0x4f4c>
 80110de:	eeb0 7a64 	vmov.f32	s14, s9
 80110e2:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 80110e6:	eeb4 8ae4 	vcmpe.f32	s16, s9
 80110ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ee:	f140 80b9 	bpl.w	8011264 <kalman_3gyro.constprop.0+0x4d4c>
 80110f2:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 80110f6:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 80110fa:	ee38 3a47 	vsub.f32	s6, s16, s14
 80110fe:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011102:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011106:	ee64 4a03 	vmul.f32	s9, s8, s6
 801110a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801110e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011112:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 8011116:	eeb4 8ac7 	vcmpe.f32	s16, s14
 801111a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801111e:	f6ff acb3 	blt.w	8010a88 <kalman_3gyro.constprop.0+0x4570>
 8011122:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 8011126:	eeb4 8ae4 	vcmpe.f32	s16, s9
 801112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112e:	f140 80a0 	bpl.w	8011272 <kalman_3gyro.constprop.0+0x4d5a>
 8011132:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 8011136:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 801113a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801113e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011142:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011146:	ee64 4a03 	vmul.f32	s9, s8, s6
 801114a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801114e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011152:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 8011156:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801115e:	f63f acb3 	bhi.w	8010ac8 <kalman_3gyro.constprop.0+0x45b0>
 8011162:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 8011166:	eef4 4ac8 	vcmpe.f32	s9, s16
 801116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116e:	f340 8086 	ble.w	801127e <kalman_3gyro.constprop.0+0x4d66>
 8011172:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 8011176:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 801117a:	ee38 3a47 	vsub.f32	s6, s16, s14
 801117e:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011182:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8011186:	ee64 4a03 	vmul.f32	s9, s8, s6
 801118a:	ee84 ba87 	vdiv.f32	s22, s9, s14
 801118e:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011192:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 8011196:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801119e:	f63f acb3 	bhi.w	8010b08 <kalman_3gyro.constprop.0+0x45f0>
 80111a2:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 80111a6:	eef4 4ac8 	vcmpe.f32	s9, s16
 80111aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ae:	dd69      	ble.n	8011284 <kalman_3gyro.constprop.0+0x4d6c>
 80111b0:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 80111b4:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 80111b8:	ee38 3a47 	vsub.f32	s6, s16, s14
 80111bc:	ee34 4a63 	vsub.f32	s8, s8, s7
 80111c0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80111c4:	ee64 4a03 	vmul.f32	s9, s8, s6
 80111c8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80111cc:	ee3b ba23 	vadd.f32	s22, s22, s7
 80111d0:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 80111d4:	eef4 4ac8 	vcmpe.f32	s9, s16
 80111d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111dc:	f63f acb4 	bhi.w	8010b48 <kalman_3gyro.constprop.0+0x4630>
 80111e0:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 80111e4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80111e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ec:	f77f acb4 	ble.w	8010b58 <kalman_3gyro.constprop.0+0x4640>
 80111f0:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 80111f4:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 80111f8:	ee78 3a64 	vsub.f32	s7, s16, s9
 80111fc:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011200:	ee37 7a64 	vsub.f32	s14, s14, s9
 8011204:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011208:	ee85 ba07 	vdiv.f32	s22, s10, s14
 801120c:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011210:	f7fc bb7c 	b.w	800d90c <kalman_3gyro.constprop.0+0x13f4>
 8011214:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011218:	eddf 7a93 	vldr	s15, [pc, #588]	; 8011468 <kalman_3gyro.constprop.0+0x4f50>
 801121c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801146c <kalman_3gyro.constprop.0+0x4f54>
 8011220:	3301      	adds	r3, #1
 8011222:	b29b      	uxth	r3, r3
 8011224:	2b31      	cmp	r3, #49	; 0x31
 8011226:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 801122a:	bf98      	it	ls
 801122c:	eef0 7a47 	vmovls.f32	s15, s14
 8011230:	f7fd bc1c 	b.w	800ea6c <kalman_3gyro.constprop.0+0x2554>
 8011234:	2a0a      	cmp	r2, #10
 8011236:	d02c      	beq.n	8011292 <kalman_3gyro.constprop.0+0x4d7a>
 8011238:	2100      	movs	r1, #0
 801123a:	3201      	adds	r2, #1
 801123c:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011240:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 8011244:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011248:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 801124c:	f7fd bca7 	b.w	800eb9e <kalman_3gyro.constprop.0+0x2686>
 8011250:	eeb0 7a64 	vmov.f32	s14, s9
 8011254:	e7a5      	b.n	80111a2 <kalman_3gyro.constprop.0+0x4c8a>
 8011256:	2305      	movs	r3, #5
 8011258:	2108      	movs	r1, #8
 801125a:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 801125e:	2302      	movs	r3, #2
 8011260:	9302      	str	r3, [sp, #8]
 8011262:	e572      	b.n	8010d4a <kalman_3gyro.constprop.0+0x4832>
 8011264:	eeb0 7a64 	vmov.f32	s14, s9
 8011268:	f7ff bbf6 	b.w	8010a58 <kalman_3gyro.constprop.0+0x4540>
 801126c:	eeb0 7a64 	vmov.f32	s14, s9
 8011270:	e757      	b.n	8011122 <kalman_3gyro.constprop.0+0x4c0a>
 8011272:	eeb0 7a64 	vmov.f32	s14, s9
 8011276:	e40f      	b.n	8010a98 <kalman_3gyro.constprop.0+0x4580>
 8011278:	eeb0 7a64 	vmov.f32	s14, s9
 801127c:	e771      	b.n	8011162 <kalman_3gyro.constprop.0+0x4c4a>
 801127e:	eeb0 7a64 	vmov.f32	s14, s9
 8011282:	e429      	b.n	8010ad8 <kalman_3gyro.constprop.0+0x45c0>
 8011284:	eeb0 7a64 	vmov.f32	s14, s9
 8011288:	e446      	b.n	8010b18 <kalman_3gyro.constprop.0+0x4600>
 801128a:	ed9f ea76 	vldr	s28, [pc, #472]	; 8011464 <kalman_3gyro.constprop.0+0x4f4c>
 801128e:	f7fc bb6d 	b.w	800d96c <kalman_3gyro.constprop.0+0x1454>
 8011292:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011294:	ed94 3a00 	vldr	s6, [r4]
 8011298:	edd2 5a00 	vldr	s11, [r2]
 801129c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801129e:	edd0 3a00 	vldr	s7, [r0]
 80112a2:	ed92 1a00 	vldr	s2, [r2]
 80112a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80112a8:	ed91 4a00 	vldr	s8, [r1]
 80112ac:	edd2 4a00 	vldr	s9, [r2]
 80112b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80112b2:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 80112b6:	ed92 2a00 	vldr	s4, [r2]
 80112ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112bc:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 80112c0:	edd2 7a00 	vldr	s15, [r2]
 80112c4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80112c6:	edd2 2a00 	vldr	s5, [r2]
 80112ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80112cc:	ee75 5a81 	vadd.f32	s11, s11, s2
 80112d0:	edd2 1a00 	vldr	s3, [r2]
 80112d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80112d6:	ee74 4a82 	vadd.f32	s9, s9, s4
 80112da:	ee75 5a83 	vadd.f32	s11, s11, s6
 80112de:	ed92 3a00 	vldr	s6, [r2]
 80112e2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80112e4:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80112e8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80112ec:	edd2 3a00 	vldr	s7, [r2]
 80112f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80112f2:	ee77 7a84 	vadd.f32	s15, s15, s8
 80112f6:	ed92 4a00 	vldr	s8, [r2]
 80112fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80112fc:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011300:	ed92 2a00 	vldr	s4, [r2]
 8011304:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011306:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 801130a:	ee75 5aa1 	vadd.f32	s11, s11, s3
 801130e:	edd2 2a00 	vldr	s5, [r2]
 8011312:	ed91 3a00 	vldr	s6, [r1]
 8011316:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801131a:	ee74 4a82 	vadd.f32	s9, s9, s4
 801131e:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 8011322:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011326:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 801132a:	ed90 4a00 	vldr	s8, [r0]
 801132e:	edd2 3a00 	vldr	s7, [r2]
 8011332:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 8011336:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 801133a:	ed91 2a00 	vldr	s4, [r1]
 801133e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011342:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011346:	ee74 4a83 	vadd.f32	s9, s9, s6
 801134a:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 801134e:	ee75 5a84 	vadd.f32	s11, s11, s8
 8011352:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 8011356:	ed90 4a00 	vldr	s8, [r0]
 801135a:	edd2 2a00 	vldr	s5, [r2]
 801135e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 8011362:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011366:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 801136a:	edd1 3a00 	vldr	s7, [r1]
 801136e:	ed90 3a00 	vldr	s6, [r0]
 8011372:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011376:	ee75 5a84 	vadd.f32	s11, s11, s8
 801137a:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 801137e:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 8011382:	ed92 4a00 	vldr	s8, [r2]
 8011386:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801138a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 801138e:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 8011392:	edd0 3a00 	vldr	s7, [r0]
 8011396:	edd4 2a00 	vldr	s5, [r4]
 801139a:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801139e:	ee75 5a83 	vadd.f32	s11, s11, s6
 80113a2:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 80113a6:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 80113aa:	ed91 3a00 	vldr	s6, [r1]
 80113ae:	ee77 7a84 	vadd.f32	s15, s15, s8
 80113b2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80113b6:	ed92 4a00 	vldr	s8, [r2]
 80113ba:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 80113be:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 80113c2:	edd4 3a00 	vldr	s7, [r4]
 80113c6:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 80113ca:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80113ce:	ee77 7a84 	vadd.f32	s15, s15, s8
 80113d2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80113d6:	ed91 4a00 	vldr	s8, [r1]
 80113da:	ee75 5aa3 	vadd.f32	s11, s11, s7
 80113de:	ee77 7a84 	vadd.f32	s15, s15, s8
 80113e2:	ee64 4a85 	vmul.f32	s9, s9, s10
 80113e6:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 80113ea:	ee65 5a85 	vmul.f32	s11, s11, s10
 80113ee:	edc1 4a00 	vstr	s9, [r1]
 80113f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80113f6:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80113fa:	edc1 5a00 	vstr	s11, [r1]
 80113fe:	f240 1501 	movw	r5, #257	; 0x101
 8011402:	3201      	adds	r2, #1
 8011404:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8011408:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 801140c:	edc1 7a00 	vstr	s15, [r1]
 8011410:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011414:	2800      	cmp	r0, #0
 8011416:	f43d abc2 	beq.w	800eb9e <kalman_3gyro.constprop.0+0x2686>
 801141a:	2200      	movs	r2, #0
 801141c:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8011420:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 8011424:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8011428:	f88b 2001 	strb.w	r2, [fp, #1]
 801142c:	f7fd bbb7 	b.w	800eb9e <kalman_3gyro.constprop.0+0x2686>
 8011430:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011434:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011438:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 801143c:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011440:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8011444:	f7fd bb20 	b.w	800ea88 <kalman_3gyro.constprop.0+0x2570>
 8011448:	2a00      	cmp	r2, #0
 801144a:	f340 80c1 	ble.w	80115d0 <kalman_3gyro.constprop.0+0x50b8>
 801144e:	2300      	movs	r3, #0
 8011450:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8011454:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8011458:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 801145c:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 8011460:	f7fc bfcf 	b.w	800e402 <kalman_3gyro.constprop.0+0x1eea>
 8011464:	00000000 	.word	0x00000000
 8011468:	3e4cccce 	.word	0x3e4cccce
 801146c:	3eaaaaab 	.word	0x3eaaaaab
 8011470:	3e999998 	.word	0x3e999998
 8011474:	3f99999a 	.word	0x3f99999a
 8011478:	3dccccd0 	.word	0x3dccccd0
 801147c:	3f8ccccd 	.word	0x3f8ccccd
 8011480:	3e4ccccd 	.word	0x3e4ccccd
 8011484:	3d088889 	.word	0x3d088889
 8011488:	3d0d3dcb 	.word	0x3d0d3dcb
 801148c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011498:	d55b      	bpl.n	8011552 <kalman_3gyro.constprop.0+0x503a>
 801149a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8011478 <kalman_3gyro.constprop.0+0x4f60>
 801149e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80114a6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80114aa:	eef0 5a66 	vmov.f32	s11, s13
 80114ae:	eee7 5a06 	vfma.f32	s11, s14, s12
 80114b2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80114b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ba:	eeb0 7a65 	vmov.f32	s14, s11
 80114be:	db5b      	blt.n	8011578 <kalman_3gyro.constprop.0+0x5060>
 80114c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80114c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114cc:	d55b      	bpl.n	8011586 <kalman_3gyro.constprop.0+0x506e>
 80114ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80114d2:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80114d6:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 8011470 <kalman_3gyro.constprop.0+0x4f58>
 80114da:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 8011474 <kalman_3gyro.constprop.0+0x4f5c>
 80114de:	eea6 7a86 	vfma.f32	s14, s13, s12
 80114e2:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80114e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80114ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ee:	db5b      	blt.n	80115a8 <kalman_3gyro.constprop.0+0x5090>
 80114f0:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80114f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80114f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114fc:	d55b      	bpl.n	80115b6 <kalman_3gyro.constprop.0+0x509e>
 80114fe:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011506:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801150a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801150e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011512:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011516:	f7ff bb7e 	b.w	8010c16 <kalman_3gyro.constprop.0+0x46fe>
 801151a:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 801151e:	2b27      	cmp	r3, #39	; 0x27
 8011520:	f200 80c3 	bhi.w	80116aa <kalman_3gyro.constprop.0+0x5192>
 8011524:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011528:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 801152c:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011530:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 8011534:	2201      	movs	r2, #1
 8011536:	4413      	add	r3, r2
 8011538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801153c:	bf14      	ite	ne
 801153e:	b29b      	uxthne	r3, r3
 8011540:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 8011544:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011548:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801154c:	9b01      	ldr	r3, [sp, #4]
 801154e:	f7fd bb26 	b.w	800eb9e <kalman_3gyro.constprop.0+0x2686>
 8011552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011556:	eef4 7ae6 	vcmpe.f32	s15, s13
 801155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801155e:	d5af      	bpl.n	80114c0 <kalman_3gyro.constprop.0+0x4fa8>
 8011560:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011564:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 8011478 <kalman_3gyro.constprop.0+0x4f60>
 8011568:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 801147c <kalman_3gyro.constprop.0+0x4f64>
 801156c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011570:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8011574:	eea6 7a86 	vfma.f32	s14, s13, s12
 8011578:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801157c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011584:	dbad      	blt.n	80114e2 <kalman_3gyro.constprop.0+0x4fca>
 8011586:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801158a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011592:	d5ad      	bpl.n	80114f0 <kalman_3gyro.constprop.0+0x4fd8>
 8011594:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011598:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801159c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80115a0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80115a4:	eea6 7a86 	vfma.f32	s14, s13, s12
 80115a8:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80115ac:	eef4 7ae6 	vcmpe.f32	s15, s13
 80115b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b4:	dbad      	blt.n	8011512 <kalman_3gyro.constprop.0+0x4ffa>
 80115b6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80115ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80115be:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 8011480 <kalman_3gyro.constprop.0+0x4f68>
 80115c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80115c6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80115ca:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80115ce:	e7a0      	b.n	8011512 <kalman_3gyro.constprop.0+0x4ffa>
 80115d0:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 80115d4:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 80115d8:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 80115dc:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80115e0:	ee66 6a86 	vmul.f32	s13, s13, s12
 80115e4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80115e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80115ec:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 80115f0:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 80115f4:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 80115f8:	f7fc bf03 	b.w	800e402 <kalman_3gyro.constprop.0+0x1eea>
 80115fc:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 8011484 <kalman_3gyro.constprop.0+0x4f6c>
 8011600:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 8011488 <kalman_3gyro.constprop.0+0x4f70>
 8011604:	ac33      	add	r4, sp, #204	; 0xcc
 8011606:	f04f 30ff 	mov.w	r0, #4294967295
 801160a:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 801160e:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011612:	eef0 7a66 	vmov.f32	s15, s13
 8011616:	3001      	adds	r0, #1
 8011618:	461a      	mov	r2, r3
 801161a:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 801161e:	320c      	adds	r2, #12
 8011620:	428a      	cmp	r2, r1
 8011622:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011626:	d1f8      	bne.n	801161a <kalman_3gyro.constprop.0+0x5102>
 8011628:	ee27 7a84 	vmul.f32	s14, s15, s8
 801162c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011630:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011634:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011638:	330c      	adds	r3, #12
 801163a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801163e:	428b      	cmp	r3, r1
 8011640:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011644:	d1f6      	bne.n	8011634 <kalman_3gyro.constprop.0+0x511c>
 8011646:	ee66 6aa4 	vmul.f32	s13, s13, s9
 801164a:	2802      	cmp	r0, #2
 801164c:	f103 0104 	add.w	r1, r3, #4
 8011650:	ece4 6a01 	vstmia	r4!, {s13}
 8011654:	d1d9      	bne.n	801160a <kalman_3gyro.constprop.0+0x50f2>
 8011656:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 801165a:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 801165e:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011662:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011666:	eeb1 4ae6 	vsqrt.f32	s8, s13
 801166a:	eef1 4ac7 	vsqrt.f32	s9, s14
 801166e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011672:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8011676:	ee77 7a87 	vadd.f32	s15, s15, s14
 801167a:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 801167e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011686:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 801168a:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 801168e:	f57d aa62 	bpl.w	800eb56 <kalman_3gyro.constprop.0+0x263e>
 8011692:	2200      	movs	r2, #0
 8011694:	9b01      	ldr	r3, [sp, #4]
 8011696:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 801169a:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 801169e:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 80116a2:	f88b 2001 	strb.w	r2, [fp, #1]
 80116a6:	f7fd ba7a 	b.w	800eb9e <kalman_3gyro.constprop.0+0x2686>
 80116aa:	9b08      	ldr	r3, [sp, #32]
 80116ac:	6999      	ldr	r1, [r3, #24]
 80116ae:	69da      	ldr	r2, [r3, #28]
 80116b0:	6a1b      	ldr	r3, [r3, #32]
 80116b2:	9181      	str	r1, [sp, #516]	; 0x204
 80116b4:	9282      	str	r2, [sp, #520]	; 0x208
 80116b6:	9383      	str	r3, [sp, #524]	; 0x20c
 80116b8:	e73a      	b.n	8011530 <kalman_3gyro.constprop.0+0x5018>
 80116ba:	bf00      	nop
 80116bc:	0000      	movs	r0, r0
	...

080116c0 <iNemoEngine_API_Update>:
 80116c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116c4:	ed2d 8b0c 	vpush	{d8-d13}
 80116c8:	4604      	mov	r4, r0
 80116ca:	b0c1      	sub	sp, #260	; 0x104
 80116cc:	460d      	mov	r5, r1
 80116ce:	4617      	mov	r7, r2
 80116d0:	eeb0 8a40 	vmov.f32	s16, s0
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f000 8253 	beq.w	8011b80 <iNemoEngine_API_Update+0x4c0>
 80116da:	461e      	mov	r6, r3
 80116dc:	463b      	mov	r3, r7
 80116de:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 80116e2:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 80116e6:	6859      	ldr	r1, [r3, #4]
 80116e8:	689a      	ldr	r2, [r3, #8]
 80116ea:	ab33      	add	r3, sp, #204	; 0xcc
 80116ec:	c307      	stmia	r3!, {r0, r1, r2}
 80116ee:	6879      	ldr	r1, [r7, #4]
 80116f0:	68ba      	ldr	r2, [r7, #8]
 80116f2:	6838      	ldr	r0, [r7, #0]
 80116f4:	ab30      	add	r3, sp, #192	; 0xc0
 80116f6:	c307      	stmia	r3!, {r0, r1, r2}
 80116f8:	f857 0f18 	ldr.w	r0, [r7, #24]!
 80116fc:	6879      	ldr	r1, [r7, #4]
 80116fe:	68ba      	ldr	r2, [r7, #8]
 8011700:	ab36      	add	r3, sp, #216	; 0xd8
 8011702:	c307      	stmia	r3!, {r0, r1, r2}
 8011704:	f1bc 0f00 	cmp.w	ip, #0
 8011708:	d005      	beq.n	8011716 <iNemoEngine_API_Update+0x56>
 801170a:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 801170e:	7923      	ldrb	r3, [r4, #4]
 8011710:	429a      	cmp	r2, r3
 8011712:	f080 829b 	bcs.w	8011c4c <iNemoEngine_API_Update+0x58c>
 8011716:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 801171a:	f10d 0a14 	add.w	sl, sp, #20
 801171e:	2300      	movs	r3, #0
 8011720:	4649      	mov	r1, r9
 8011722:	4650      	mov	r0, sl
 8011724:	aa33      	add	r2, sp, #204	; 0xcc
 8011726:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 801172a:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 801172e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011732:	f7f9 fb63 	bl	800adfc <rotVect>
 8011736:	aa36      	add	r2, sp, #216	; 0xd8
 8011738:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801173c:	a808      	add	r0, sp, #32
 801173e:	f7f9 fb5d 	bl	800adfc <rotVect>
 8011742:	aa30      	add	r2, sp, #192	; 0xc0
 8011744:	4640      	mov	r0, r8
 8011746:	f104 0143 	add.w	r1, r4, #67	; 0x43
 801174a:	f7f9 fb57 	bl	800adfc <rotVect>
 801174e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011752:	b923      	cbnz	r3, 801175e <iNemoEngine_API_Update+0x9e>
 8011754:	4b8c      	ldr	r3, [pc, #560]	; (8011988 <iNemoEngine_API_Update+0x2c8>)
 8011756:	930c      	str	r3, [sp, #48]	; 0x30
 8011758:	2200      	movs	r2, #0
 801175a:	920b      	str	r2, [sp, #44]	; 0x2c
 801175c:	930d      	str	r3, [sp, #52]	; 0x34
 801175e:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011762:	2f09      	cmp	r7, #9
 8011764:	d851      	bhi.n	801180a <iNemoEngine_API_Update+0x14a>
 8011766:	ed9d ba06 	vldr	s22, [sp, #24]
 801176a:	eddd ba05 	vldr	s23, [sp, #20]
 801176e:	eddd aa07 	vldr	s21, [sp, #28]
 8011772:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8011776:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 801177a:	eeeb 7aab 	vfma.f32	s15, s23, s23
 801177e:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011782:	ee17 0a90 	vmov	r0, s15
 8011786:	f7ee fedf 	bl	8000548 <__aeabi_f2d>
 801178a:	ec41 0b10 	vmov	d0, r0, r1
 801178e:	f003 fecd 	bl	801552c <sqrt>
 8011792:	ec51 0b10 	vmov	r0, r1, d0
 8011796:	f7ef fa07 	bl	8000ba8 <__aeabi_d2f>
 801179a:	ee07 0a90 	vmov	s15, r0
 801179e:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 80117a2:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 80117a6:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 80117aa:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 80117ae:	ee69 7aa9 	vmul.f32	s15, s19, s19
 80117b2:	ee6b ba87 	vmul.f32	s23, s23, s14
 80117b6:	eeea 7a0a 	vfma.f32	s15, s20, s20
 80117ba:	ee2b ba07 	vmul.f32	s22, s22, s14
 80117be:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80117c2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80117c6:	ee17 0a90 	vmov	r0, s15
 80117ca:	edcd ba05 	vstr	s23, [sp, #20]
 80117ce:	ed8d ba06 	vstr	s22, [sp, #24]
 80117d2:	edcd aa07 	vstr	s21, [sp, #28]
 80117d6:	f7ee feb7 	bl	8000548 <__aeabi_f2d>
 80117da:	ec41 0b10 	vmov	d0, r0, r1
 80117de:	f003 fea5 	bl	801552c <sqrt>
 80117e2:	ec51 0b10 	vmov	r0, r1, d0
 80117e6:	f7ef f9df 	bl	8000ba8 <__aeabi_d2f>
 80117ea:	ee07 0a90 	vmov	s15, r0
 80117ee:	eecc 7a27 	vdiv.f32	s15, s24, s15
 80117f2:	ee2a aa27 	vmul.f32	s20, s20, s15
 80117f6:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80117fa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80117fe:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011802:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011806:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 801180a:	7923      	ldrb	r3, [r4, #4]
 801180c:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011810:	429a      	cmp	r2, r3
 8011812:	f080 80dd 	bcs.w	80119d0 <iNemoEngine_API_Update+0x310>
 8011816:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 801181a:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 801181e:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011822:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011826:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 801182a:	3701      	adds	r7, #1
 801182c:	aa33      	add	r2, sp, #204	; 0xcc
 801182e:	4649      	mov	r1, r9
 8011830:	4640      	mov	r0, r8
 8011832:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011836:	9303      	str	r3, [sp, #12]
 8011838:	f7f9 fae0 	bl	800adfc <rotVect>
 801183c:	9b03      	ldr	r3, [sp, #12]
 801183e:	f8db 1000 	ldr.w	r1, [fp]
 8011842:	6818      	ldr	r0, [r3, #0]
 8011844:	f8da 2000 	ldr.w	r2, [sl]
 8011848:	6833      	ldr	r3, [r6, #0]
 801184a:	61ab      	str	r3, [r5, #24]
 801184c:	60e8      	str	r0, [r5, #12]
 801184e:	6129      	str	r1, [r5, #16]
 8011850:	616a      	str	r2, [r5, #20]
 8011852:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011856:	9301      	str	r3, [sp, #4]
 8011858:	f105 0328 	add.w	r3, r5, #40	; 0x28
 801185c:	4641      	mov	r1, r8
 801185e:	9300      	str	r3, [sp, #0]
 8011860:	462a      	mov	r2, r5
 8011862:	f105 031c 	add.w	r3, r5, #28
 8011866:	f105 000c 	add.w	r0, r5, #12
 801186a:	f7fa fd85 	bl	800c378 <output_update>
 801186e:	ed95 8a00 	vldr	s16, [r5]
 8011872:	edd5 9a01 	vldr	s19, [r5, #4]
 8011876:	eeb0 0a48 	vmov.f32	s0, s16
 801187a:	f003 fdeb 	bl	8015454 <sinf>
 801187e:	eddf 7a43 	vldr	s15, [pc, #268]	; 801198c <iNemoEngine_API_Update+0x2cc>
 8011882:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8011990 <iNemoEngine_API_Update+0x2d0>
 8011886:	ee60 8a00 	vmul.f32	s17, s0, s0
 801188a:	eef0 6ae9 	vabs.f32	s13, s19
 801188e:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8011892:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189a:	eef0 8a67 	vmov.f32	s17, s15
 801189e:	d56e      	bpl.n	801197e <iNemoEngine_API_Update+0x2be>
 80118a0:	eeb0 0a69 	vmov.f32	s0, s19
 80118a4:	f003 fe18 	bl	80154d8 <tanf>
 80118a8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80118ac:	eea0 9a28 	vfma.f32	s18, s0, s17
 80118b0:	eef1 7ac9 	vsqrt.f32	s15, s18
 80118b4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011994 <iNemoEngine_API_Update+0x2d4>
 80118b8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80119a8 <iNemoEngine_API_Update+0x2e8>
 80118bc:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 80118c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80118c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80118c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118cc:	bf88      	it	hi
 80118ce:	eef0 7a66 	vmovhi.f32	s15, s13
 80118d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118da:	bfb8      	it	lt
 80118dc:	eef0 7a47 	vmovlt.f32	s15, s14
 80118e0:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 80118e4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80118e8:	4c2b      	ldr	r4, [pc, #172]	; (8011998 <iNemoEngine_API_Update+0x2d8>)
 80118ea:	bba3      	cbnz	r3, 8011956 <iNemoEngine_API_Update+0x296>
 80118ec:	6820      	ldr	r0, [r4, #0]
 80118ee:	edd5 0a08 	vldr	s1, [r5, #32]
 80118f2:	ed95 0a07 	vldr	s0, [r5, #28]
 80118f6:	edd5 9a03 	vldr	s19, [r5, #12]
 80118fa:	ed95 aa04 	vldr	s20, [r5, #16]
 80118fe:	ed95 9a05 	vldr	s18, [r5, #20]
 8011902:	edd5 8a06 	vldr	s17, [r5, #24]
 8011906:	f7f9 fb4b 	bl	800afa0 <findDirection>
 801190a:	6020      	str	r0, [r4, #0]
 801190c:	2805      	cmp	r0, #5
 801190e:	f200 833d 	bhi.w	8011f8c <iNemoEngine_API_Update+0x8cc>
 8011912:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011916:	000a      	.short	0x000a
 8011918:	00060137 	.word	0x00060137
 801191c:	00060169 	.word	0x00060169
 8011920:	000a      	.short	0x000a
 8011922:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801199c <iNemoEngine_API_Update+0x2dc>
 8011926:	ee38 8a27 	vadd.f32	s16, s16, s15
 801192a:	eddf 7a28 	vldr	s15, [pc, #160]	; 80119cc <iNemoEngine_API_Update+0x30c>
 801192e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011936:	bfa8      	it	ge
 8011938:	ee38 8a67 	vsubge.f32	s16, s16, s15
 801193c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011944:	f100 8111 	bmi.w	8011b6a <iNemoEngine_API_Update+0x4aa>
 8011948:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 801194c:	b041      	add	sp, #260	; 0x104
 801194e:	ecbd 8b0c 	vpop	{d8-d13}
 8011952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011956:	ed95 9a05 	vldr	s18, [r5, #20]
 801195a:	6820      	ldr	r0, [r4, #0]
 801195c:	edd5 0a07 	vldr	s1, [r5, #28]
 8011960:	ed95 0a08 	vldr	s0, [r5, #32]
 8011964:	edd5 9a04 	vldr	s19, [r5, #16]
 8011968:	ed95 aa03 	vldr	s20, [r5, #12]
 801196c:	edd5 8a06 	vldr	s17, [r5, #24]
 8011970:	eeb1 1a41 	vneg.f32	s2, s2
 8011974:	eeb1 9a49 	vneg.f32	s18, s18
 8011978:	f7f9 fb12 	bl	800afa0 <findDirection>
 801197c:	e7c5      	b.n	801190a <iNemoEngine_API_Update+0x24a>
 801197e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80119a0 <iNemoEngine_API_Update+0x2e0>
 8011982:	eea8 9aa7 	vfma.f32	s18, s17, s15
 8011986:	e793      	b.n	80118b0 <iNemoEngine_API_Update+0x1f0>
 8011988:	3f333333 	.word	0x3f333333
 801198c:	00000000 	.word	0x00000000
 8011990:	3fbc430e 	.word	0x3fbc430e
 8011994:	40490fdb 	.word	0x40490fdb
 8011998:	200002e0 	.word	0x200002e0
 801199c:	43340000 	.word	0x43340000
 80119a0:	42c6ab07 	.word	0x42c6ab07
 80119a4:	3c03126f 	.word	0x3c03126f
 80119a8:	3c8efa35 	.word	0x3c8efa35
 80119ac:	3e4ccccd 	.word	0x3e4ccccd
 80119b0:	3fb50481 	.word	0x3fb50481
 80119b4:	3ed93dd9 	.word	0x3ed93dd9
 80119b8:	3b656042 	.word	0x3b656042
 80119bc:	42c80000 	.word	0x42c80000
 80119c0:	3a83126f 	.word	0x3a83126f
 80119c4:	3d4ccccd 	.word	0x3d4ccccd
 80119c8:	3f333333 	.word	0x3f333333
 80119cc:	43b40000 	.word	0x43b40000
 80119d0:	ee07 3a90 	vmov	s15, r3
 80119d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119d8:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 80119a4 <iNemoEngine_API_Update+0x2e4>
 80119dc:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 80119a8 <iNemoEngine_API_Update+0x2e8>
 80119e0:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 80119b8 <iNemoEngine_API_Update+0x2f8>
 80119e4:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 80119b4 <iNemoEngine_API_Update+0x2f4>
 80119e8:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 80119b0 <iNemoEngine_API_Update+0x2f0>
 80119ec:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 80119ac <iNemoEngine_API_Update+0x2ec>
 80119f0:	ee27 1a88 	vmul.f32	s2, s15, s16
 80119f4:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 80119f8:	ee85 5a81 	vdiv.f32	s10, s11, s2
 80119fc:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8011a00:	2700      	movs	r7, #0
 8011a02:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8011a06:	f04f 0c00 	mov.w	ip, #0
 8011a0a:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 8011a0e:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8011a12:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8011a16:	edd3 5a00 	vldr	s11, [r3]
 8011a1a:	f8c3 c000 	str.w	ip, [r3]
 8011a1e:	eef1 7ac5 	vsqrt.f32	s15, s10
 8011a22:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8011a26:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8011a2a:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011a2e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8011a32:	edd7 4a00 	vldr	s9, [r7]
 8011a36:	f8c7 c000 	str.w	ip, [r7]
 8011a3a:	ed93 5a00 	vldr	s10, [r3]
 8011a3e:	f8c3 c000 	str.w	ip, [r3]
 8011a42:	7963      	ldrb	r3, [r4, #5]
 8011a44:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011a48:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011a4c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011a50:	2b01      	cmp	r3, #1
 8011a52:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8011a56:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011a5a:	ee27 6a86 	vmul.f32	s12, s15, s12
 8011a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011a62:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8011a66:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 8011a6a:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8011a6e:	f000 812e 	beq.w	8011cce <iNemoEngine_API_Update+0x60e>
 8011a72:	2b02      	cmp	r3, #2
 8011a74:	f000 8122 	beq.w	8011cbc <iNemoEngine_API_Update+0x5fc>
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	f000 80ef 	beq.w	8011c5c <iNemoEngine_API_Update+0x59c>
 8011a7e:	edd4 0a05 	vldr	s1, [r4, #20]
 8011a82:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 80119bc <iNemoEngine_API_Update+0x2fc>
 8011a86:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 80119c0 <iNemoEngine_API_Update+0x300>
 8011a8a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011a8e:	ee60 0a85 	vmul.f32	s1, s1, s10
 8011a92:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011a96:	8863      	ldrh	r3, [r4, #2]
 8011a98:	1e5a      	subs	r2, r3, #1
 8011a9a:	2a12      	cmp	r2, #18
 8011a9c:	f200 80e7 	bhi.w	8011c6e <iNemoEngine_API_Update+0x5ae>
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	b21a      	sxth	r2, r3
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	2b03      	cmp	r3, #3
 8011aa8:	8062      	strh	r2, [r4, #2]
 8011aaa:	f240 8115 	bls.w	8011cd8 <iNemoEngine_API_Update+0x618>
 8011aae:	ee05 2a90 	vmov	s11, r2
 8011ab2:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 80119c4 <iNemoEngine_API_Update+0x304>
 8011ab6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011aba:	ee65 5a85 	vmul.f32	s11, s11, s10
 8011abe:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8011ac2:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 8011ac6:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8011aca:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 80119c8 <iNemoEngine_API_Update+0x308>
 8011ace:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8011ad2:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011ad6:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011ada:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011ade:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011ae2:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8011ae6:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8011aea:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8011aee:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8011af2:	aa1a      	add	r2, sp, #104	; 0x68
 8011af4:	af16      	add	r7, sp, #88	; 0x58
 8011af6:	e9cd 7200 	strd	r7, r2, [sp]
 8011afa:	ab12      	add	r3, sp, #72	; 0x48
 8011afc:	aa1e      	add	r2, sp, #120	; 0x78
 8011afe:	4641      	mov	r1, r8
 8011b00:	4620      	mov	r0, r4
 8011b02:	f7fa fd09 	bl	800c518 <kalman_3gyro.constprop.0>
 8011b06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011b08:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 8011b0c:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8011b10:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8011b14:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8011b18:	f8c7 a000 	str.w	sl, [r7]
 8011b1c:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8011b20:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011b24:	f8c7 e000 	str.w	lr, [r7]
 8011b28:	f604 1748 	addw	r7, r4, #2376	; 0x948
 8011b2c:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011b30:	f8c7 c000 	str.w	ip, [r7]
 8011b34:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011b38:	6030      	str	r0, [r6, #0]
 8011b3a:	60f3      	str	r3, [r6, #12]
 8011b3c:	6071      	str	r1, [r6, #4]
 8011b3e:	60b2      	str	r2, [r6, #8]
 8011b40:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011b44:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8011b48:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8011b4c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011b4e:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8011b52:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011b56:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011b5a:	edc3 7a00 	vstr	s15, [r3]
 8011b5e:	f8cb e000 	str.w	lr, [fp]
 8011b62:	f8ca c000 	str.w	ip, [sl]
 8011b66:	6030      	str	r0, [r6, #0]
 8011b68:	e65f      	b.n	801182a <iNemoEngine_API_Update+0x16a>
 8011b6a:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 80119cc <iNemoEngine_API_Update+0x30c>
 8011b6e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011b72:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8011b76:	b041      	add	sp, #260	; 0x104
 8011b78:	ecbd 8b0c 	vpop	{d8-d13}
 8011b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b80:	ae0e      	add	r6, sp, #56	; 0x38
 8011b82:	e5ab      	b.n	80116dc <iNemoEngine_API_Update+0x1c>
 8011b84:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011b88:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011b8c:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011b90:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8011b94:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8011b98:	eee9 7a49 	vfms.f32	s15, s18, s18
 8011b9c:	ee17 0a90 	vmov	r0, s15
 8011ba0:	f7ee fcd2 	bl	8000548 <__aeabi_f2d>
 8011ba4:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8011ba8:	4602      	mov	r2, r0
 8011baa:	460b      	mov	r3, r1
 8011bac:	ee17 0a90 	vmov	r0, s15
 8011bb0:	ec43 2b18 	vmov	d8, r2, r3
 8011bb4:	f7ee fcc8 	bl	8000548 <__aeabi_f2d>
 8011bb8:	eeb0 1a48 	vmov.f32	s2, s16
 8011bbc:	eef0 1a68 	vmov.f32	s3, s17
 8011bc0:	ec41 0b10 	vmov	d0, r0, r1
 8011bc4:	f003 fcb0 	bl	8015528 <atan2>
 8011bc8:	a3f3      	add	r3, pc, #972	; (adr r3, 8011f98 <iNemoEngine_API_Update+0x8d8>)
 8011bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bce:	ec51 0b10 	vmov	r0, r1, d0
 8011bd2:	f7ee fd11 	bl	80005f8 <__aeabi_dmul>
 8011bd6:	4bf2      	ldr	r3, [pc, #968]	; (8011fa0 <iNemoEngine_API_Update+0x8e0>)
 8011bd8:	2200      	movs	r2, #0
 8011bda:	f7ee fb55 	bl	8000288 <__aeabi_dsub>
 8011bde:	f7ee ffe3 	bl	8000ba8 <__aeabi_d2f>
 8011be2:	ee08 0a10 	vmov	s16, r0
 8011be6:	e6a0      	b.n	801192a <iNemoEngine_API_Update+0x26a>
 8011be8:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011bec:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011bf0:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011bf4:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8011bf8:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8011bfc:	eee9 7a49 	vfms.f32	s15, s18, s18
 8011c00:	ee17 0a90 	vmov	r0, s15
 8011c04:	f7ee fca0 	bl	8000548 <__aeabi_f2d>
 8011c08:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8011c0c:	4602      	mov	r2, r0
 8011c0e:	460b      	mov	r3, r1
 8011c10:	ee17 0a90 	vmov	r0, s15
 8011c14:	ec43 2b18 	vmov	d8, r2, r3
 8011c18:	f7ee fc96 	bl	8000548 <__aeabi_f2d>
 8011c1c:	eeb0 1a48 	vmov.f32	s2, s16
 8011c20:	eef0 1a68 	vmov.f32	s3, s17
 8011c24:	ec41 0b10 	vmov	d0, r0, r1
 8011c28:	f003 fc7e 	bl	8015528 <atan2>
 8011c2c:	a3da      	add	r3, pc, #872	; (adr r3, 8011f98 <iNemoEngine_API_Update+0x8d8>)
 8011c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c32:	ec51 0b10 	vmov	r0, r1, d0
 8011c36:	f7ee fcdf 	bl	80005f8 <__aeabi_dmul>
 8011c3a:	4bd9      	ldr	r3, [pc, #868]	; (8011fa0 <iNemoEngine_API_Update+0x8e0>)
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	f7ee fb25 	bl	800028c <__adddf3>
 8011c42:	f7ee ffb1 	bl	8000ba8 <__aeabi_d2f>
 8011c46:	ee08 0a10 	vmov	s16, r0
 8011c4a:	e66e      	b.n	801192a <iNemoEngine_API_Update+0x26a>
 8011c4c:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	dd44      	ble.n	8011cde <iNemoEngine_API_Update+0x61e>
 8011c54:	3b01      	subs	r3, #1
 8011c56:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 8011c5a:	e55c      	b.n	8011716 <iNemoEngine_API_Update+0x56>
 8011c5c:	8863      	ldrh	r3, [r4, #2]
 8011c5e:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8011fa4 <iNemoEngine_API_Update+0x8e4>
 8011c62:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8011fa8 <iNemoEngine_API_Update+0x8e8>
 8011c66:	1e5a      	subs	r2, r3, #1
 8011c68:	2a12      	cmp	r2, #18
 8011c6a:	f67f af19 	bls.w	8011aa0 <iNemoEngine_API_Update+0x3e0>
 8011c6e:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8011c72:	eddf 2ace 	vldr	s5, [pc, #824]	; 8011fac <iNemoEngine_API_Update+0x8ec>
 8011c76:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 8011c7a:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8011c7e:	ee34 4a22 	vadd.f32	s8, s8, s5
 8011c82:	ee64 7aa6 	vmul.f32	s15, s9, s13
 8011c86:	eec3 4a84 	vdiv.f32	s9, s7, s8
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	8063      	strh	r3, [r4, #2]
 8011c8e:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 8011c92:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 8011c96:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 8011fb0 <iNemoEngine_API_Update+0x8f0>
 8011c9a:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 8011c9e:	ee65 6a26 	vmul.f32	s13, s10, s13
 8011ca2:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011ca6:	ee27 7a03 	vmul.f32	s14, s14, s6
 8011caa:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 8011cae:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8011cb2:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8011cb6:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8011cba:	e71a      	b.n	8011af2 <iNemoEngine_API_Update+0x432>
 8011cbc:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8011cc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011cc4:	edd4 0a05 	vldr	s1, [r4, #20]
 8011cc8:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8011fb4 <iNemoEngine_API_Update+0x8f4>
 8011ccc:	e6e3      	b.n	8011a96 <iNemoEngine_API_Update+0x3d6>
 8011cce:	edd4 0a05 	vldr	s1, [r4, #20]
 8011cd2:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8011fb8 <iNemoEngine_API_Update+0x8f8>
 8011cd6:	e6de      	b.n	8011a96 <iNemoEngine_API_Update+0x3d6>
 8011cd8:	eddf 5ab8 	vldr	s11, [pc, #736]	; 8011fbc <iNemoEngine_API_Update+0x8fc>
 8011cdc:	e6ef      	b.n	8011abe <iNemoEngine_API_Update+0x3fe>
 8011cde:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 8011ce2:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 8011ce6:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8011cea:	ed97 5a00 	vldr	s10, [r7]
 8011cee:	ed92 da00 	vldr	s26, [r2]
 8011cf2:	ed93 6a00 	vldr	s12, [r3]
 8011cf6:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8011fa4 <iNemoEngine_API_Update+0x8e4>
 8011cfa:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8011cfe:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 8011d02:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 8011d06:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8011d0a:	ed91 3a00 	vldr	s6, [r1]
 8011d0e:	ed92 1a00 	vldr	s2, [r2]
 8011d12:	ed97 7a00 	vldr	s14, [r7]
 8011d16:	edd3 3a00 	vldr	s7, [r3]
 8011d1a:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 8011d1e:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 8011d22:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 8011d26:	ed91 ba00 	vldr	s22, [r1]
 8011d2a:	edd0 6a00 	vldr	s13, [r0]
 8011d2e:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 8011d32:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 8011d36:	edd1 aa00 	vldr	s21, [r1]
 8011d3a:	ed92 2a00 	vldr	s4, [r2]
 8011d3e:	ee96 7a04 	vfnms.f32	s14, s12, s8
 8011d42:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 8011d46:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 8011d4a:	eed1 3a04 	vfnms.f32	s7, s2, s8
 8011d4e:	f204 6234 	addw	r2, r4, #1588	; 0x634
 8011d52:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 8011d56:	edd0 7a00 	vldr	s15, [r0]
 8011d5a:	edd2 1a00 	vldr	s3, [r2]
 8011d5e:	ed93 ca00 	vldr	s24, [r3]
 8011d62:	eed5 6a04 	vfnms.f32	s13, s10, s8
 8011d66:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 8011d6a:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 8011d6e:	ed91 5a00 	vldr	s10, [r1]
 8011d72:	edd0 5a00 	vldr	s11, [r0]
 8011d76:	edd7 9a00 	vldr	s19, [r7]
 8011d7a:	f204 6024 	addw	r0, r4, #1572	; 0x624
 8011d7e:	eed5 1a04 	vfnms.f32	s3, s10, s8
 8011d82:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 8011d86:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 8011d8a:	edd0 2a00 	vldr	s5, [r0]
 8011d8e:	edd3 0a00 	vldr	s1, [r3]
 8011d92:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 8011d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011d9a:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8011d9e:	edd7 7a00 	vldr	s15, [r7]
 8011da2:	edd0 5a00 	vldr	s11, [r0]
 8011da6:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 8011daa:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 8011dae:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 8011db2:	ed93 6a00 	vldr	s12, [r3]
 8011db6:	edda ba00 	vldr	s23, [sl]
 8011dba:	ed99 5a00 	vldr	s10, [r9]
 8011dbe:	ee76 6a83 	vadd.f32	s13, s13, s6
 8011dc2:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 8011dc6:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 8011dca:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8011dce:	eed7 5a84 	vfnms.f32	s11, s15, s8
 8011dd2:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 8011dd6:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 8011dda:	eddc 4a00 	vldr	s9, [ip]
 8011dde:	edd3 7a00 	vldr	s15, [r3]
 8011de2:	ed98 1a00 	vldr	s2, [r8]
 8011de6:	edde 8a00 	vldr	s17, [lr]
 8011dea:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 8011dee:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 8011df2:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 8011df6:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 8011dfa:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 8011dfe:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 8011e02:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 8011e06:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 8011e0a:	ed9c aa00 	vldr	s20, [ip]
 8011e0e:	eeed 6a03 	vfma.f32	s13, s26, s6
 8011e12:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 8011e16:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 8011e1a:	ed92 da00 	vldr	s26, [r2]
 8011e1e:	eeab 7a03 	vfma.f32	s14, s22, s6
 8011e22:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 8011e26:	ed91 ba00 	vldr	s22, [r1]
 8011e2a:	eef0 ca61 	vmov.f32	s25, s3
 8011e2e:	eddb 1a00 	vldr	s3, [fp]
 8011e32:	edd3 ba00 	vldr	s23, [r3]
 8011e36:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 8011e3a:	eedb 7a84 	vfnms.f32	s15, s23, s8
 8011e3e:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 8011e42:	1c53      	adds	r3, r2, #1
 8011e44:	eeea 3a83 	vfma.f32	s7, s21, s6
 8011e48:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 8011e4c:	edd8 aa00 	vldr	s21, [r8]
 8011e50:	eee6 1a03 	vfma.f32	s3, s12, s6
 8011e54:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8011e58:	ed9e 6a00 	vldr	s12, [lr]
 8011e5c:	edd7 aa00 	vldr	s21, [r7]
 8011e60:	eee6 7a03 	vfma.f32	s15, s12, s6
 8011e64:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 8011e68:	ed9c 6a00 	vldr	s12, [ip]
 8011e6c:	eedc 4a04 	vfnms.f32	s9, s24, s8
 8011e70:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 8011e74:	ee75 5a8d 	vadd.f32	s11, s11, s26
 8011e78:	ee2a 4a00 	vmul.f32	s8, s20, s0
 8011e7c:	ee22 2a00 	vmul.f32	s4, s4, s0
 8011e80:	ee62 2a80 	vmul.f32	s5, s5, s0
 8011e84:	eeeb 5a03 	vfma.f32	s11, s22, s6
 8011e88:	ed90 0a00 	vldr	s0, [r0]
 8011e8c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8011e90:	ee36 6a00 	vadd.f32	s12, s12, s0
 8011e94:	ee74 4aa9 	vadd.f32	s9, s9, s19
 8011e98:	ed91 0a00 	vldr	s0, [r1]
 8011e9c:	ee35 5a28 	vadd.f32	s10, s10, s17
 8011ea0:	ee66 6a82 	vmul.f32	s13, s13, s4
 8011ea4:	ee22 7a87 	vmul.f32	s14, s5, s14
 8011ea8:	ee64 5a25 	vmul.f32	s11, s8, s11
 8011eac:	eee0 4a83 	vfma.f32	s9, s1, s6
 8011eb0:	f604 1068 	addw	r0, r4, #2408	; 0x968
 8011eb4:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8011eb8:	eea1 5a03 	vfma.f32	s10, s2, s6
 8011ebc:	eea0 6a03 	vfma.f32	s12, s0, s6
 8011ec0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011ec4:	ee63 3a82 	vmul.f32	s7, s7, s4
 8011ec8:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011ecc:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8011ed0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011ed4:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8011ed8:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8011edc:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8011ee0:	ee24 6a06 	vmul.f32	s12, s8, s12
 8011ee4:	ee62 4a24 	vmul.f32	s9, s4, s9
 8011ee8:	ee22 5a85 	vmul.f32	s10, s5, s10
 8011eec:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8011ef0:	eea5 7a05 	vfma.f32	s14, s10, s10
 8011ef4:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011ef8:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8011efc:	eef1 6ac7 	vsqrt.f32	s13, s14
 8011f00:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8011f04:	ee07 3a90 	vmov	s15, r3
 8011f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011f0c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8011f10:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 8011f14:	b21b      	sxth	r3, r3
 8011f16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8011f1a:	ee07 2a90 	vmov	s15, r2
 8011f1e:	ed90 4a00 	vldr	s8, [r0]
 8011f22:	edd1 4a00 	vldr	s9, [r1]
 8011f26:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8011f2a:	edd7 7a00 	vldr	s15, [r7]
 8011f2e:	eee5 6a84 	vfma.f32	s13, s11, s8
 8011f32:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8011f36:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8011f3a:	ee66 7a05 	vmul.f32	s15, s12, s10
 8011f3e:	ee66 6a85 	vmul.f32	s13, s13, s10
 8011f42:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011f46:	edc7 7a00 	vstr	s15, [r7]
 8011f4a:	edc0 6a00 	vstr	s13, [r0]
 8011f4e:	ed81 7a00 	vstr	s14, [r1]
 8011f52:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 8011f56:	f47f abde 	bne.w	8011716 <iNemoEngine_API_Update+0x56>
 8011f5a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011f5e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011f62:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011f66:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	edc4 6a07 	vstr	s13, [r4, #28]
 8011f72:	ed84 7a08 	vstr	s14, [r4, #32]
 8011f76:	edc4 7a06 	vstr	s15, [r4, #24]
 8011f7a:	603b      	str	r3, [r7, #0]
 8011f7c:	6003      	str	r3, [r0, #0]
 8011f7e:	600b      	str	r3, [r1, #0]
 8011f80:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 8011f84:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 8011f88:	f7ff bbc5 	b.w	8011716 <iNemoEngine_API_Update+0x56>
 8011f8c:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8011fc0 <iNemoEngine_API_Update+0x900>
 8011f90:	e4da      	b.n	8011948 <iNemoEngine_API_Update+0x288>
 8011f92:	bf00      	nop
 8011f94:	f3af 8000 	nop.w
 8011f98:	20000000 	.word	0x20000000
 8011f9c:	404ca5dc 	.word	0x404ca5dc
 8011fa0:	40568000 	.word	0x40568000
 8011fa4:	3dcccccd 	.word	0x3dcccccd
 8011fa8:	3a83126f 	.word	0x3a83126f
 8011fac:	358637bd 	.word	0x358637bd
 8011fb0:	3f333333 	.word	0x3f333333
 8011fb4:	3727c5ac 	.word	0x3727c5ac
 8011fb8:	3ac49ba6 	.word	0x3ac49ba6
 8011fbc:	3e4ccccd 	.word	0x3e4ccccd
 8011fc0:	00000000 	.word	0x00000000

08011fc4 <MEMS_getSensorData_I16>:
 8011fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011fc8:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8011fcc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8011fd0:	68c5      	ldr	r5, [r0, #12]
 8011fd2:	4596      	cmp	lr, r2
 8011fd4:	fa1f f882 	uxth.w	r8, r2
 8011fd8:	d94d      	bls.n	8012076 <MEMS_getSensorData_I16+0xb2>
 8011fda:	f10e 33ff 	add.w	r3, lr, #4294967295
 8011fde:	fb04 5313 	mls	r3, r4, r3, r5
 8011fe2:	ebae 0c02 	sub.w	ip, lr, r2
 8011fe6:	f8a1 8004 	strh.w	r8, [r1, #4]
 8011fea:	600b      	str	r3, [r1, #0]
 8011fec:	fa5f fc8c 	uxtb.w	ip, ip
 8011ff0:	4647      	mov	r7, r8
 8011ff2:	f1b8 0f00 	cmp.w	r8, #0
 8011ff6:	d017      	beq.n	8012028 <MEMS_getSensorData_I16+0x64>
 8011ff8:	688e      	ldr	r6, [r1, #8]
 8011ffa:	6905      	ldr	r5, [r0, #16]
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 8012002:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8012006:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 801200a:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 801200e:	f8d4 9002 	ldr.w	r9, [r4, #2]
 8012012:	f8c1 9002 	str.w	r9, [r1, #2]
 8012016:	3301      	adds	r3, #1
 8012018:	88e4      	ldrh	r4, [r4, #6]
 801201a:	80cc      	strh	r4, [r1, #6]
 801201c:	b2d9      	uxtb	r1, r3
 801201e:	42b9      	cmp	r1, r7
 8012020:	460b      	mov	r3, r1
 8012022:	d3ec      	bcc.n	8011ffe <MEMS_getSensorData_I16+0x3a>
 8012024:	45c6      	cmp	lr, r8
 8012026:	d934      	bls.n	8012092 <MEMS_getSensorData_I16+0xce>
 8012028:	ebae 0308 	sub.w	r3, lr, r8
 801202c:	b29b      	uxth	r3, r3
 801202e:	8103      	strh	r3, [r0, #8]
 8012030:	f1bc 0f00 	cmp.w	ip, #0
 8012034:	d01d      	beq.n	8012072 <MEMS_getSensorData_I16+0xae>
 8012036:	6903      	ldr	r3, [r0, #16]
 8012038:	f10c 3cff 	add.w	ip, ip, #4294967295
 801203c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012040:	f103 000a 	add.w	r0, r3, #10
 8012044:	fa5f fc8c 	uxtb.w	ip, ip
 8012048:	3202      	adds	r2, #2
 801204a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 801204e:	3302      	adds	r3, #2
 8012050:	2400      	movs	r4, #0
 8012052:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8012056:	f803 1c02 	strb.w	r1, [r3, #-2]
 801205a:	6811      	ldr	r1, [r2, #0]
 801205c:	6019      	str	r1, [r3, #0]
 801205e:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8012062:	8099      	strh	r1, [r3, #4]
 8012064:	3308      	adds	r3, #8
 8012066:	4283      	cmp	r3, r0
 8012068:	f802 4c02 	strb.w	r4, [r2, #-2]
 801206c:	f102 0208 	add.w	r2, r2, #8
 8012070:	d1ef      	bne.n	8012052 <MEMS_getSensorData_I16+0x8e>
 8012072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012076:	f10e 33ff 	add.w	r3, lr, #4294967295
 801207a:	fb04 5313 	mls	r3, r4, r3, r5
 801207e:	f8a1 e004 	strh.w	lr, [r1, #4]
 8012082:	600b      	str	r3, [r1, #0]
 8012084:	f1be 0f00 	cmp.w	lr, #0
 8012088:	d005      	beq.n	8012096 <MEMS_getSensorData_I16+0xd2>
 801208a:	4677      	mov	r7, lr
 801208c:	f04f 0c00 	mov.w	ip, #0
 8012090:	e7b2      	b.n	8011ff8 <MEMS_getSensorData_I16+0x34>
 8012092:	2300      	movs	r3, #0
 8012094:	e7cb      	b.n	801202e <MEMS_getSensorData_I16+0x6a>
 8012096:	f8a0 e008 	strh.w	lr, [r0, #8]
 801209a:	e7ea      	b.n	8012072 <MEMS_getSensorData_I16+0xae>

0801209c <MEMS_SolveLinearEq>:
 801209c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120a0:	ed2d 8b0c 	vpush	{d8-d13}
 80120a4:	4617      	mov	r7, r2
 80120a6:	2400      	movs	r4, #0
 80120a8:	b0a9      	sub	sp, #164	; 0xa4
 80120aa:	2200      	movs	r2, #0
 80120ac:	601a      	str	r2, [r3, #0]
 80120ae:	460d      	mov	r5, r1
 80120b0:	2240      	movs	r2, #64	; 0x40
 80120b2:	4621      	mov	r1, r4
 80120b4:	4680      	mov	r8, r0
 80120b6:	603c      	str	r4, [r7, #0]
 80120b8:	607c      	str	r4, [r7, #4]
 80120ba:	60bc      	str	r4, [r7, #8]
 80120bc:	60fc      	str	r4, [r7, #12]
 80120be:	a808      	add	r0, sp, #32
 80120c0:	461e      	mov	r6, r3
 80120c2:	eeb0 8a40 	vmov.f32	s16, s0
 80120c6:	e9cd 4400 	strd	r4, r4, [sp]
 80120ca:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80120ce:	f004 ffa3 	bl	8017018 <memset>
 80120d2:	4621      	mov	r1, r4
 80120d4:	a818      	add	r0, sp, #96	; 0x60
 80120d6:	2240      	movs	r2, #64	; 0x40
 80120d8:	f004 ff9e 	bl	8017018 <memset>
 80120dc:	edd5 2a03 	vldr	s5, [r5, #12]
 80120e0:	eddf 7ae4 	vldr	s15, [pc, #912]	; 8012474 <MEMS_SolveLinearEq+0x3d8>
 80120e4:	eef4 2ae7 	vcmpe.f32	s5, s15
 80120e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ec:	d47e      	bmi.n	80121ec <MEMS_SolveLinearEq+0x150>
 80120ee:	f898 1000 	ldrb.w	r1, [r8]
 80120f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80120f6:	f998 3002 	ldrsb.w	r3, [r8, #2]
 80120fa:	4291      	cmp	r1, r2
 80120fc:	d07c      	beq.n	80121f8 <MEMS_SolveLinearEq+0x15c>
 80120fe:	3301      	adds	r3, #1
 8012100:	1a58      	subs	r0, r3, r1
 8012102:	fb90 f3f2 	sdiv	r3, r0, r2
 8012106:	fb02 0313 	mls	r3, r2, r3, r0
 801210a:	2b00      	cmp	r3, #0
 801210c:	bfb8      	it	lt
 801210e:	189b      	addlt	r3, r3, r2
 8012110:	b21b      	sxth	r3, r3
 8012112:	2900      	cmp	r1, #0
 8012114:	f000 81d6 	beq.w	80124c4 <MEMS_SolveLinearEq+0x428>
 8012118:	3901      	subs	r1, #1
 801211a:	b2c9      	uxtb	r1, r1
 801211c:	3101      	adds	r1, #1
 801211e:	edd5 3a00 	vldr	s7, [r5]
 8012122:	ed95 4a01 	vldr	s8, [r5, #4]
 8012126:	edd5 4a02 	vldr	s9, [r5, #8]
 801212a:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 801212e:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8012478 <MEMS_SolveLinearEq+0x3dc>
 8012132:	4419      	add	r1, r3
 8012134:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8012138:	fb93 f4f2 	sdiv	r4, r3, r2
 801213c:	fb02 3414 	mls	r4, r2, r4, r3
 8012140:	b2e4      	uxtb	r4, r4
 8012142:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 8012146:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 801214a:	ee07 0a90 	vmov	s15, r0
 801214e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012156:	ee06 0a10 	vmov	s12, r0
 801215a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801215e:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 8012162:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012166:	ee77 6ac4 	vsub.f32	s13, s15, s8
 801216a:	ee26 6a08 	vmul.f32	s12, s12, s16
 801216e:	ee07 0a10 	vmov	s14, r0
 8012172:	ee36 5a63 	vsub.f32	s10, s12, s7
 8012176:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801217a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801217e:	eee5 6a05 	vfma.f32	s13, s10, s10
 8012182:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012186:	ee33 6ac6 	vsub.f32	s12, s7, s12
 801218a:	ee74 aac7 	vsub.f32	s21, s9, s14
 801218e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8012192:	ee74 7a67 	vsub.f32	s15, s8, s15
 8012196:	eee7 6a07 	vfma.f32	s13, s14, s14
 801219a:	eef4 6ac2 	vcmpe.f32	s13, s4
 801219e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121a2:	d531      	bpl.n	8012208 <MEMS_SolveLinearEq+0x16c>
 80121a4:	3301      	adds	r3, #1
 80121a6:	4299      	cmp	r1, r3
 80121a8:	d1c6      	bne.n	8012138 <MEMS_SolveLinearEq+0x9c>
 80121aa:	eef0 7a65 	vmov.f32	s15, s11
 80121ae:	2101      	movs	r1, #1
 80121b0:	4608      	mov	r0, r1
 80121b2:	2200      	movs	r2, #0
 80121b4:	e006      	b.n	80121c4 <MEMS_SolveLinearEq+0x128>
 80121b6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80121ba:	ac28      	add	r4, sp, #160	; 0xa0
 80121bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80121c0:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 80121c4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 80121c8:	3001      	adds	r0, #1
 80121ca:	ac28      	add	r4, sp, #160	; 0xa0
 80121cc:	b2c0      	uxtb	r0, r0
 80121ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80121d2:	2804      	cmp	r0, #4
 80121d4:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 80121d8:	4613      	mov	r3, r2
 80121da:	d1ec      	bne.n	80121b6 <MEMS_SolveLinearEq+0x11a>
 80121dc:	1c48      	adds	r0, r1, #1
 80121de:	b2c0      	uxtb	r0, r0
 80121e0:	2804      	cmp	r0, #4
 80121e2:	d076      	beq.n	80122d2 <MEMS_SolveLinearEq+0x236>
 80121e4:	460b      	mov	r3, r1
 80121e6:	460a      	mov	r2, r1
 80121e8:	4601      	mov	r1, r0
 80121ea:	e7e4      	b.n	80121b6 <MEMS_SolveLinearEq+0x11a>
 80121ec:	2000      	movs	r0, #0
 80121ee:	b029      	add	sp, #164	; 0xa4
 80121f0:	ecbd 8b0c 	vpop	{d8-d13}
 80121f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f8:	1c5a      	adds	r2, r3, #1
 80121fa:	fb92 f3f1 	sdiv	r3, r2, r1
 80121fe:	fb01 2313 	mls	r3, r1, r3, r2
 8012202:	b21b      	sxth	r3, r3
 8012204:	460a      	mov	r2, r1
 8012206:	e784      	b.n	8012112 <MEMS_SolveLinearEq+0x76>
 8012208:	eef1 cae6 	vsqrt.f32	s25, s13
 801220c:	3301      	adds	r3, #1
 801220e:	428b      	cmp	r3, r1
 8012210:	ed9d ca00 	vldr	s24, [sp]
 8012214:	eddd ba08 	vldr	s23, [sp, #32]
 8012218:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 801221c:	ed9d aa01 	vldr	s20, [sp, #4]
 8012220:	eddd 9a02 	vldr	s19, [sp, #8]
 8012224:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8012228:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 801222c:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8012230:	ed9d 0a03 	vldr	s0, [sp, #12]
 8012234:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8012238:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 801223c:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8012240:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 8012244:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8012248:	ee3d da21 	vadd.f32	s26, s26, s3
 801224c:	ee26 7a26 	vmul.f32	s14, s12, s13
 8012250:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012254:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 8012258:	ee72 aaec 	vsub.f32	s21, s5, s25
 801225c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8012260:	eea7 ba26 	vfma.f32	s22, s14, s13
 8012264:	eee7 8aa6 	vfma.f32	s17, s15, s13
 8012268:	eeaa ca87 	vfma.f32	s24, s21, s14
 801226c:	eee7 ba07 	vfma.f32	s23, s14, s14
 8012270:	eeaa aaa7 	vfma.f32	s20, s21, s15
 8012274:	eeea 9aa6 	vfma.f32	s19, s21, s13
 8012278:	eea7 9aa7 	vfma.f32	s18, s15, s15
 801227c:	eea6 3aa6 	vfma.f32	s6, s13, s13
 8012280:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 8012284:	ee30 7ac7 	vsub.f32	s14, s1, s14
 8012288:	ee30 6a06 	vadd.f32	s12, s0, s12
 801228c:	ee71 7a67 	vsub.f32	s15, s2, s15
 8012290:	ee75 6a66 	vsub.f32	s13, s10, s13
 8012294:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 8012298:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 801229c:	ed8d ca00 	vstr	s24, [sp]
 80122a0:	edcd ba08 	vstr	s23, [sp, #32]
 80122a4:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 80122a8:	ed8d aa01 	vstr	s20, [sp, #4]
 80122ac:	edcd 9a02 	vstr	s19, [sp, #8]
 80122b0:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 80122b4:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 80122b8:	ed8d 6a03 	vstr	s12, [sp, #12]
 80122bc:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 80122c0:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 80122c4:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 80122c8:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 80122cc:	f47f af34 	bne.w	8012138 <MEMS_SolveLinearEq+0x9c>
 80122d0:	e76b      	b.n	80121aa <MEMS_SolveLinearEq+0x10e>
 80122d2:	2240      	movs	r2, #64	; 0x40
 80122d4:	2100      	movs	r1, #0
 80122d6:	a818      	add	r0, sp, #96	; 0x60
 80122d8:	f004 fe9e 	bl	8017018 <memset>
 80122dc:	ab08      	add	r3, sp, #32
 80122de:	ed9f 5a67 	vldr	s10, [pc, #412]	; 801247c <MEMS_SolveLinearEq+0x3e0>
 80122e2:	4618      	mov	r0, r3
 80122e4:	aa18      	add	r2, sp, #96	; 0x60
 80122e6:	2100      	movs	r1, #0
 80122e8:	b24c      	sxtb	r4, r1
 80122ea:	2900      	cmp	r1, #0
 80122ec:	f000 80b5 	beq.w	801245a <MEMS_SolveLinearEq+0x3be>
 80122f0:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80122f4:	eeb0 7ae7 	vabs.f32	s14, s15
 80122f8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80122fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012300:	f53f af74 	bmi.w	80121ec <MEMS_SolveLinearEq+0x150>
 8012304:	ed93 7a00 	vldr	s14, [r3]
 8012308:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801230c:	2c01      	cmp	r4, #1
 801230e:	edc2 6a00 	vstr	s13, [r2]
 8012312:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 8012316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801231a:	f000 80b5 	beq.w	8012488 <MEMS_SolveLinearEq+0x3ec>
 801231e:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 8012322:	eeb0 7ac6 	vabs.f32	s14, s12
 8012326:	eeb4 7ac5 	vcmpe.f32	s14, s10
 801232a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232e:	f53f af5d 	bmi.w	80121ec <MEMS_SolveLinearEq+0x150>
 8012332:	ed93 7a01 	vldr	s14, [r3, #4]
 8012336:	ee37 7a67 	vsub.f32	s14, s14, s15
 801233a:	2c02      	cmp	r4, #2
 801233c:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012340:	edc2 7a01 	vstr	s15, [r2, #4]
 8012344:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012348:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 801234c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012350:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012354:	f000 80a7 	beq.w	80124a6 <MEMS_SolveLinearEq+0x40a>
 8012358:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 801235c:	eeb0 6ae4 	vabs.f32	s12, s9
 8012360:	eeb4 6ac5 	vcmpe.f32	s12, s10
 8012364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012368:	f53f af40 	bmi.w	80121ec <MEMS_SolveLinearEq+0x150>
 801236c:	edd3 5a02 	vldr	s11, [r3, #8]
 8012370:	ed90 6a00 	vldr	s12, [r0]
 8012374:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8012378:	eec7 5a24 	vdiv.f32	s11, s14, s9
 801237c:	edc2 5a02 	vstr	s11, [r2, #8]
 8012380:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 8012384:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012388:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801238c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012390:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8012394:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012398:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801239c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a0:	f77f af24 	ble.w	80121ec <MEMS_SolveLinearEq+0x150>
 80123a4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80123a8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80123ac:	ed82 7a03 	vstr	s14, [r2, #12]
 80123b0:	3101      	adds	r1, #1
 80123b2:	2904      	cmp	r1, #4
 80123b4:	f103 0310 	add.w	r3, r3, #16
 80123b8:	f102 0210 	add.w	r2, r2, #16
 80123bc:	f100 0014 	add.w	r0, r0, #20
 80123c0:	d192      	bne.n	80122e8 <MEMS_SolveLinearEq+0x24c>
 80123c2:	466a      	mov	r2, sp
 80123c4:	4639      	mov	r1, r7
 80123c6:	a818      	add	r0, sp, #96	; 0x60
 80123c8:	f7f9 f9f2 	bl	800b7b0 <llEvaluate.constprop.0>
 80123cc:	4b2c      	ldr	r3, [pc, #176]	; (8012480 <MEMS_SolveLinearEq+0x3e4>)
 80123ce:	6033      	str	r3, [r6, #0]
 80123d0:	f10d 0910 	add.w	r9, sp, #16
 80123d4:	46e8      	mov	r8, sp
 80123d6:	f10d 0b0c 	add.w	fp, sp, #12
 80123da:	2400      	movs	r4, #0
 80123dc:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 80123e0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80123e4:	e9cd 4400 	strd	r4, r4, [sp]
 80123e8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80123ec:	466a      	mov	r2, sp
 80123ee:	f848 ab04 	str.w	sl, [r8], #4
 80123f2:	a904      	add	r1, sp, #16
 80123f4:	a818      	add	r0, sp, #96	; 0x60
 80123f6:	f7f9 f9db 	bl	800b7b0 <llEvaluate.constprop.0>
 80123fa:	ecf9 7a01 	vldmia	r9!, {s15}
 80123fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012406:	dd23      	ble.n	8012450 <MEMS_SolveLinearEq+0x3b4>
 8012408:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801240c:	edd6 7a00 	vldr	s15, [r6]
 8012410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012418:	bfb8      	it	lt
 801241a:	eef0 7a47 	vmovlt.f32	s15, s14
 801241e:	45c3      	cmp	fp, r8
 8012420:	edc6 7a00 	vstr	s15, [r6]
 8012424:	d1de      	bne.n	80123e4 <MEMS_SolveLinearEq+0x348>
 8012426:	edd5 7a03 	vldr	s15, [r5, #12]
 801242a:	ed97 7a03 	vldr	s14, [r7, #12]
 801242e:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8012432:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012436:	2001      	movs	r0, #1
 8012438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012440:	bf48      	it	mi
 8012442:	edc7 7a03 	vstrmi	s15, [r7, #12]
 8012446:	b029      	add	sp, #164	; 0xa4
 8012448:	ecbd 8b0c 	vpop	{d8-d13}
 801244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012450:	45c3      	cmp	fp, r8
 8012452:	ed86 0a00 	vstr	s0, [r6]
 8012456:	d1c5      	bne.n	80123e4 <MEMS_SolveLinearEq+0x348>
 8012458:	e7e5      	b.n	8012426 <MEMS_SolveLinearEq+0x38a>
 801245a:	edd0 7a00 	vldr	s15, [r0]
 801245e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012466:	f77f aec1 	ble.w	80121ec <MEMS_SolveLinearEq+0x150>
 801246a:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801246e:	ed82 7a00 	vstr	s14, [r2]
 8012472:	e79d      	b.n	80123b0 <MEMS_SolveLinearEq+0x314>
 8012474:	3dcccccd 	.word	0x3dcccccd
 8012478:	2b8cbccb 	.word	0x2b8cbccb
 801247c:	358637bd 	.word	0x358637bd
 8012480:	3dcccccd 	.word	0x3dcccccd
 8012484:	00000000 	.word	0x00000000
 8012488:	ed90 7a00 	vldr	s14, [r0]
 801248c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012494:	f77f aeaa 	ble.w	80121ec <MEMS_SolveLinearEq+0x150>
 8012498:	ee77 7a67 	vsub.f32	s15, s14, s15
 801249c:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80124a0:	ed82 7a01 	vstr	s14, [r2, #4]
 80124a4:	e784      	b.n	80123b0 <MEMS_SolveLinearEq+0x314>
 80124a6:	edd0 7a00 	vldr	s15, [r0]
 80124aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80124ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124b2:	f77f ae9b 	ble.w	80121ec <MEMS_SolveLinearEq+0x150>
 80124b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80124ba:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80124be:	ed82 7a02 	vstr	s14, [r2, #8]
 80124c2:	e775      	b.n	80123b0 <MEMS_SolveLinearEq+0x314>
 80124c4:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 8012484 <MEMS_SolveLinearEq+0x3e8>
 80124c8:	e671      	b.n	80121ae <MEMS_SolveLinearEq+0x112>
 80124ca:	bf00      	nop

080124cc <MEMS_EIG3>:
 80124cc:	edd0 6a02 	vldr	s13, [r0, #8]
 80124d0:	ed90 7a01 	vldr	s14, [r0, #4]
 80124d4:	edd0 4a04 	vldr	s9, [r0, #16]
 80124d8:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012628 <MEMS_EIG3+0x15c>
 80124dc:	ee66 7aa6 	vmul.f32	s15, s13, s13
 80124e0:	b510      	push	{r4, lr}
 80124e2:	eee7 7a07 	vfma.f32	s15, s14, s14
 80124e6:	460c      	mov	r4, r1
 80124e8:	ed2d 8b04 	vpush	{d8-d9}
 80124ec:	eee4 7aa4 	vfma.f32	s15, s9, s9
 80124f0:	b08a      	sub	sp, #40	; 0x28
 80124f2:	eef4 7ac6 	vcmpe.f32	s15, s12
 80124f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124fa:	d509      	bpl.n	8012510 <MEMS_EIG3+0x44>
 80124fc:	6803      	ldr	r3, [r0, #0]
 80124fe:	600b      	str	r3, [r1, #0]
 8012500:	68c3      	ldr	r3, [r0, #12]
 8012502:	604b      	str	r3, [r1, #4]
 8012504:	6943      	ldr	r3, [r0, #20]
 8012506:	608b      	str	r3, [r1, #8]
 8012508:	b00a      	add	sp, #40	; 0x28
 801250a:	ecbd 8b04 	vpop	{d8-d9}
 801250e:	bd10      	pop	{r4, pc}
 8012510:	ed90 4a00 	vldr	s8, [r0]
 8012514:	edd0 5a03 	vldr	s11, [r0, #12]
 8012518:	edd0 2a05 	vldr	s5, [r0, #20]
 801251c:	eddf 9a43 	vldr	s19, [pc, #268]	; 801262c <MEMS_EIG3+0x160>
 8012520:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012630 <MEMS_EIG3+0x164>
 8012524:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012528:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 801252c:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012530:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012534:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012538:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 801253c:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012540:	ee34 4a48 	vsub.f32	s8, s8, s16
 8012544:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012548:	ee72 2ac8 	vsub.f32	s5, s5, s16
 801254c:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012550:	eea7 5aa3 	vfma.f32	s10, s15, s7
 8012554:	eef0 7a45 	vmov.f32	s15, s10
 8012558:	eee2 7aa2 	vfma.f32	s15, s5, s5
 801255c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012560:	eef1 8ae7 	vsqrt.f32	s17, s15
 8012564:	ee80 6a28 	vdiv.f32	s12, s0, s17
 8012568:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 801256c:	eec4 2a28 	vdiv.f32	s5, s8, s17
 8012570:	ee66 6a26 	vmul.f32	s13, s12, s13
 8012574:	ee65 5a86 	vmul.f32	s11, s11, s12
 8012578:	ee26 7a07 	vmul.f32	s14, s12, s14
 801257c:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 8012580:	ee26 6a24 	vmul.f32	s12, s12, s9
 8012584:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012588:	ee66 4a46 	vnmul.f32	s9, s12, s12
 801258c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012590:	eee5 4a85 	vfma.f32	s9, s11, s10
 8012594:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8012598:	eee4 7aa2 	vfma.f32	s15, s9, s5
 801259c:	eea6 5a26 	vfma.f32	s10, s12, s13
 80125a0:	eee5 7a07 	vfma.f32	s15, s10, s14
 80125a4:	eef4 7ac3 	vcmpe.f32	s15, s6
 80125a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ac:	d909      	bls.n	80125c2 <MEMS_EIG3+0xf6>
 80125ae:	eef4 7ae3 	vcmpe.f32	s15, s7
 80125b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b6:	db22      	blt.n	80125fe <MEMS_EIG3+0x132>
 80125b8:	eeb0 9a40 	vmov.f32	s18, s0
 80125bc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012634 <MEMS_EIG3+0x168>
 80125c0:	e003      	b.n	80125ca <MEMS_EIG3+0xfe>
 80125c2:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012638 <MEMS_EIG3+0x16c>
 80125c6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80125ca:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80125ce:	eef0 7a48 	vmov.f32	s15, s16
 80125d2:	eeb0 7a48 	vmov.f32	s14, s16
 80125d6:	eee8 7a89 	vfma.f32	s15, s17, s18
 80125da:	eea8 7a80 	vfma.f32	s14, s17, s0
 80125de:	edc4 7a00 	vstr	s15, [r4]
 80125e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80125e6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80125ea:	eed8 7a26 	vfnms.f32	s15, s16, s13
 80125ee:	ed84 7a02 	vstr	s14, [r4, #8]
 80125f2:	edc4 7a01 	vstr	s15, [r4, #4]
 80125f6:	b00a      	add	sp, #40	; 0x28
 80125f8:	ecbd 8b04 	vpop	{d8-d9}
 80125fc:	bd10      	pop	{r4, pc}
 80125fe:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012602:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012606:	f002 ffc5 	bl	8015594 <acosf>
 801260a:	ee60 9a29 	vmul.f32	s19, s0, s19
 801260e:	eeb0 0a69 	vmov.f32	s0, s19
 8012612:	f002 feb9 	bl	8015388 <cosf>
 8012616:	eeb0 9a40 	vmov.f32	s18, s0
 801261a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801263c <MEMS_EIG3+0x170>
 801261e:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012622:	f002 feb1 	bl	8015388 <cosf>
 8012626:	e7d0      	b.n	80125ca <MEMS_EIG3+0xfe>
 8012628:	358637bd 	.word	0x358637bd
 801262c:	3eaaaaab 	.word	0x3eaaaaab
 8012630:	3e2aaaab 	.word	0x3e2aaaab
 8012634:	bf000001 	.word	0xbf000001
 8012638:	3effffff 	.word	0x3effffff
 801263c:	40060a92 	.word	0x40060a92

08012640 <MEMS_runMagCal>:
 8012640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012644:	ed2d 8b0a 	vpush	{d8-d12}
 8012648:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 801264c:	2282      	movs	r2, #130	; 0x82
 801264e:	ab36      	add	r3, sp, #216	; 0xd8
 8012650:	460c      	mov	r4, r1
 8012652:	9105      	str	r1, [sp, #20]
 8012654:	4683      	mov	fp, r0
 8012656:	4608      	mov	r0, r1
 8012658:	a917      	add	r1, sp, #92	; 0x5c
 801265a:	9319      	str	r3, [sp, #100]	; 0x64
 801265c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012660:	f7ff fcb0 	bl	8011fc4 <MEMS_getSensorData_I16>
 8012664:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012668:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801266c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801266e:	9209      	str	r2, [sp, #36]	; 0x24
 8012670:	f108 31ff 	add.w	r1, r8, #4294967295
 8012674:	9106      	str	r1, [sp, #24]
 8012676:	fb01 2103 	mla	r1, r1, r3, r2
 801267a:	9108      	str	r1, [sp, #32]
 801267c:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8012680:	f1b8 0f00 	cmp.w	r8, #0
 8012684:	f000 8417 	beq.w	8012eb6 <MEMS_runMagCal+0x876>
 8012688:	f8db 3008 	ldr.w	r3, [fp, #8]
 801268c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012690:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8012694:	fb02 f203 	mul.w	r2, r2, r3
 8012698:	31a0      	adds	r1, #160	; 0xa0
 801269a:	4291      	cmp	r1, r2
 801269c:	f080 8411 	bcs.w	8012ec2 <MEMS_runMagCal+0x882>
 80126a0:	3b00      	subs	r3, #0
 80126a2:	bf18      	it	ne
 80126a4:	2301      	movne	r3, #1
 80126a6:	e9cb 3301 	strd	r3, r3, [fp, #4]
 80126aa:	2200      	movs	r2, #0
 80126ac:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80126b0:	f8cb 200c 	str.w	r2, [fp, #12]
 80126b4:	2300      	movs	r3, #0
 80126b6:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 80126ba:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 80126be:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 80126c2:	22ff      	movs	r2, #255	; 0xff
 80126c4:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 80126c8:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80126cc:	4cd5      	ldr	r4, [pc, #852]	; (8012a24 <MEMS_runMagCal+0x3e4>)
 80126ce:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8012a30 <MEMS_runMagCal+0x3f0>
 80126d2:	9b05      	ldr	r3, [sp, #20]
 80126d4:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 80126d8:	edd3 5a01 	vldr	s11, [r3, #4]
 80126dc:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80126e0:	4652      	mov	r2, sl
 80126e2:	2a03      	cmp	r2, #3
 80126e4:	f647 75ff 	movw	r5, #32767	; 0x7fff
 80126e8:	bf28      	it	cs
 80126ea:	2203      	movcs	r2, #3
 80126ec:	2100      	movs	r1, #0
 80126ee:	9207      	str	r2, [sp, #28]
 80126f0:	eeb0 0a67 	vmov.f32	s0, s15
 80126f4:	464b      	mov	r3, r9
 80126f6:	9402      	str	r4, [sp, #8]
 80126f8:	4627      	mov	r7, r4
 80126fa:	9503      	str	r5, [sp, #12]
 80126fc:	462e      	mov	r6, r5
 80126fe:	460a      	mov	r2, r1
 8012700:	9404      	str	r4, [sp, #16]
 8012702:	7818      	ldrb	r0, [r3, #0]
 8012704:	3201      	adds	r2, #1
 8012706:	b292      	uxth	r2, r2
 8012708:	2800      	cmp	r0, #0
 801270a:	d04b      	beq.n	80127a4 <MEMS_runMagCal+0x164>
 801270c:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012710:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012714:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012718:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 801271c:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012720:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012724:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012728:	9c02      	ldr	r4, [sp, #8]
 801272a:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 801272e:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012732:	ee07 ea90 	vmov	s15, lr
 8012736:	ee07 ca10 	vmov	s14, ip
 801273a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801273e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012742:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012746:	ee37 7a44 	vsub.f32	s14, s14, s8
 801274a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801274e:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012752:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012756:	4574      	cmp	r4, lr
 8012758:	eee7 7a07 	vfma.f32	s15, s14, s14
 801275c:	bfb8      	it	lt
 801275e:	4674      	movlt	r4, lr
 8012760:	9402      	str	r4, [sp, #8]
 8012762:	ee07 0a10 	vmov	s14, r0
 8012766:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801276a:	9c03      	ldr	r4, [sp, #12]
 801276c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012770:	ee77 7a46 	vsub.f32	s15, s14, s12
 8012774:	4574      	cmp	r4, lr
 8012776:	bfa8      	it	ge
 8012778:	4674      	movge	r4, lr
 801277a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801277e:	4567      	cmp	r7, ip
 8012780:	9403      	str	r4, [sp, #12]
 8012782:	9c04      	ldr	r4, [sp, #16]
 8012784:	bfb8      	it	lt
 8012786:	4667      	movlt	r7, ip
 8012788:	eea7 0aa7 	vfma.f32	s0, s15, s15
 801278c:	4566      	cmp	r6, ip
 801278e:	bfa8      	it	ge
 8012790:	4666      	movge	r6, ip
 8012792:	4284      	cmp	r4, r0
 8012794:	bfb8      	it	lt
 8012796:	4604      	movlt	r4, r0
 8012798:	3101      	adds	r1, #1
 801279a:	4285      	cmp	r5, r0
 801279c:	b249      	sxtb	r1, r1
 801279e:	9404      	str	r4, [sp, #16]
 80127a0:	bfa8      	it	ge
 80127a2:	4605      	movge	r5, r0
 80127a4:	9807      	ldr	r0, [sp, #28]
 80127a6:	4282      	cmp	r2, r0
 80127a8:	f103 0308 	add.w	r3, r3, #8
 80127ac:	d9a9      	bls.n	8012702 <MEMS_runMagCal+0xc2>
 80127ae:	4590      	cmp	r8, r2
 80127b0:	9c04      	ldr	r4, [sp, #16]
 80127b2:	f240 8767 	bls.w	8013684 <MEMS_runMagCal+0x1044>
 80127b6:	ebaa 0a02 	sub.w	sl, sl, r2
 80127ba:	fa12 fa8a 	uxtah	sl, r2, sl
 80127be:	f109 0308 	add.w	r3, r9, #8
 80127c2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80127c6:	9307      	str	r3, [sp, #28]
 80127c8:	2300      	movs	r3, #0
 80127ca:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 80127ce:	9304      	str	r3, [sp, #16]
 80127d0:	7813      	ldrb	r3, [r2, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	f000 8096 	beq.w	8012904 <MEMS_runMagCal+0x2c4>
 80127d8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80127dc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 80127e0:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 80127e4:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 80127e8:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 80127ec:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 80127f0:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 80127f4:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 80127f8:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 80127fc:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012800:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012804:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012808:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 801280c:	ebae 0808 	sub.w	r8, lr, r8
 8012810:	eba0 000a 	sub.w	r0, r0, sl
 8012814:	ee07 ca10 	vmov	s14, ip
 8012818:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 801281c:	ee07 0a90 	vmov	s15, r0
 8012820:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012824:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012828:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 801282c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012830:	eba3 030a 	sub.w	r3, r3, sl
 8012834:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801283c:	ee06 ea90 	vmov	s13, lr
 8012840:	ebac 0909 	sub.w	r9, ip, r9
 8012844:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012848:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 801284c:	eef0 7ae7 	vabs.f32	s15, s15
 8012850:	ee06 9a90 	vmov	s13, r9
 8012854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012858:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801285c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012860:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012864:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8012868:	eef0 6ae6 	vabs.f32	s13, s13
 801286c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012870:	eba0 0808 	sub.w	r8, r0, r8
 8012874:	ee06 0a90 	vmov	s13, r0
 8012878:	eba3 0309 	sub.w	r3, r3, r9
 801287c:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012880:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8012884:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012888:	9b02      	ldr	r3, [sp, #8]
 801288a:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 801288e:	4577      	cmp	r7, lr
 8012890:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012894:	ee06 8a90 	vmov	s13, r8
 8012898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801289c:	bfb8      	it	lt
 801289e:	4677      	movlt	r7, lr
 80128a0:	4576      	cmp	r6, lr
 80128a2:	ee27 7a07 	vmul.f32	s14, s14, s14
 80128a6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80128aa:	bfa8      	it	ge
 80128ac:	4676      	movge	r6, lr
 80128ae:	4563      	cmp	r3, ip
 80128b0:	bfb8      	it	lt
 80128b2:	4663      	movlt	r3, ip
 80128b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80128b8:	eea5 7a05 	vfma.f32	s14, s10, s10
 80128bc:	9302      	str	r3, [sp, #8]
 80128be:	9b03      	ldr	r3, [sp, #12]
 80128c0:	eef0 6ae6 	vabs.f32	s13, s13
 80128c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80128c8:	4563      	cmp	r3, ip
 80128ca:	ee36 6a44 	vsub.f32	s12, s12, s8
 80128ce:	bfa8      	it	ge
 80128d0:	4663      	movge	r3, ip
 80128d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80128d6:	4284      	cmp	r4, r0
 80128d8:	ee37 0a00 	vadd.f32	s0, s14, s0
 80128dc:	bfb8      	it	lt
 80128de:	4604      	movlt	r4, r0
 80128e0:	ee26 7a24 	vmul.f32	s14, s12, s9
 80128e4:	4285      	cmp	r5, r0
 80128e6:	bfa8      	it	ge
 80128e8:	4605      	movge	r5, r0
 80128ea:	9303      	str	r3, [sp, #12]
 80128ec:	ee17 0a90 	vmov	r0, s15
 80128f0:	9b04      	ldr	r3, [sp, #16]
 80128f2:	eea7 0a07 	vfma.f32	s0, s14, s14
 80128f6:	4283      	cmp	r3, r0
 80128f8:	f101 0101 	add.w	r1, r1, #1
 80128fc:	bf38      	it	cc
 80128fe:	4603      	movcc	r3, r0
 8012900:	b249      	sxtb	r1, r1
 8012902:	9304      	str	r3, [sp, #16]
 8012904:	9b07      	ldr	r3, [sp, #28]
 8012906:	3208      	adds	r2, #8
 8012908:	4293      	cmp	r3, r2
 801290a:	f47f af61 	bne.w	80127d0 <MEMS_runMagCal+0x190>
 801290e:	2900      	cmp	r1, #0
 8012910:	f000 86b6 	beq.w	8013680 <MEMS_runMagCal+0x1040>
 8012914:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8012918:	f280 82df 	bge.w	8012eda <MEMS_runMagCal+0x89a>
 801291c:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8012920:	f2c0 82db 	blt.w	8012eda <MEMS_runMagCal+0x89a>
 8012924:	9b02      	ldr	r3, [sp, #8]
 8012926:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801292a:	f280 82d6 	bge.w	8012eda <MEMS_runMagCal+0x89a>
 801292e:	9a03      	ldr	r2, [sp, #12]
 8012930:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8012934:	f2c0 82d1 	blt.w	8012eda <MEMS_runMagCal+0x89a>
 8012938:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 801293c:	f280 82cd 	bge.w	8012eda <MEMS_runMagCal+0x89a>
 8012940:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8012944:	f2c0 82c9 	blt.w	8012eda <MEMS_runMagCal+0x89a>
 8012948:	ee07 1a90 	vmov	s15, r1
 801294c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012954:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8012958:	1bbe      	subs	r6, r7, r6
 801295a:	1a9f      	subs	r7, r3, r2
 801295c:	42be      	cmp	r6, r7
 801295e:	4633      	mov	r3, r6
 8012960:	eba4 0405 	sub.w	r4, r4, r5
 8012964:	bfb8      	it	lt
 8012966:	463b      	movlt	r3, r7
 8012968:	42a3      	cmp	r3, r4
 801296a:	bfb8      	it	lt
 801296c:	4623      	movlt	r3, r4
 801296e:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8012972:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012976:	ee07 3a10 	vmov	s14, r3
 801297a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012a28 <MEMS_runMagCal+0x3e8>
 801297e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012986:	ee25 0a80 	vmul.f32	s0, s11, s0
 801298a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012992:	f100 82a2 	bmi.w	8012eda <MEMS_runMagCal+0x89a>
 8012996:	eddd 7a04 	vldr	s15, [sp, #16]
 801299a:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8012a2c <MEMS_runMagCal+0x3ec>
 801299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129a2:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80129a6:	eef4 5ac6 	vcmpe.f32	s11, s12
 80129aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ae:	f300 8294 	bgt.w	8012eda <MEMS_runMagCal+0x89a>
 80129b2:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80129b6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80129ba:	eef4 6ac7 	vcmpe.f32	s13, s14
 80129be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c2:	f301 81f8 	bgt.w	8013db6 <MEMS_runMagCal+0x1776>
 80129c6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80129ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80129ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d6:	f340 8552 	ble.w	801347e <MEMS_runMagCal+0xe3e>
 80129da:	ee07 6a90 	vmov	s15, r6
 80129de:	ee76 6aa6 	vadd.f32	s13, s13, s13
 80129e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129e6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80129ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ee:	f340 8546 	ble.w	801347e <MEMS_runMagCal+0xe3e>
 80129f2:	ee07 7a90 	vmov	s15, r7
 80129f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80129fa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80129fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a02:	f140 853c 	bpl.w	801347e <MEMS_runMagCal+0xe3e>
 8012a06:	ee07 4a90 	vmov	s15, r4
 8012a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a0e:	2300      	movs	r3, #0
 8012a10:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a18:	9303      	str	r3, [sp, #12]
 8012a1a:	bf48      	it	mi
 8012a1c:	2301      	movmi	r3, #1
 8012a1e:	9307      	str	r3, [sp, #28]
 8012a20:	f000 bd30 	b.w	8013484 <MEMS_runMagCal+0xe44>
 8012a24:	ffff8000 	.word	0xffff8000
 8012a28:	43020000 	.word	0x43020000
 8012a2c:	447a0000 	.word	0x447a0000
 8012a30:	00000000 	.word	0x00000000
 8012a34:	41f00001 	.word	0x41f00001
 8012a38:	400ccccd 	.word	0x400ccccd
 8012a3c:	3dcccccd 	.word	0x3dcccccd
 8012a40:	423c0000 	.word	0x423c0000
 8012a44:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8012a30 <MEMS_runMagCal+0x3f0>
 8012a48:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8012a34 <MEMS_runMagCal+0x3f4>
 8012a4c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012a50:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a58:	dc10      	bgt.n	8012a7c <MEMS_runMagCal+0x43c>
 8012a5a:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8012a38 <MEMS_runMagCal+0x3f8>
 8012a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a66:	dc09      	bgt.n	8012a7c <MEMS_runMagCal+0x43c>
 8012a68:	ed94 9a03 	vldr	s18, [r4, #12]
 8012a6c:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8012a3c <MEMS_runMagCal+0x3fc>
 8012a70:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a78:	f201 8527 	bhi.w	80144ca <MEMS_runMagCal+0x1e8a>
 8012a7c:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8012a40 <MEMS_runMagCal+0x400>
 8012a80:	edd4 6a03 	vldr	s13, [r4, #12]
 8012a84:	ed94 5a00 	vldr	s10, [r4]
 8012a88:	edd4 5a01 	vldr	s11, [r4, #4]
 8012a8c:	ed94 6a02 	vldr	s12, [r4, #8]
 8012a90:	edc4 7a06 	vstr	s15, [r4, #24]
 8012a94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012a98:	ad2e      	add	r5, sp, #184	; 0xb8
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	e9c5 3300 	strd	r3, r3, [r5]
 8012aa0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8012aa4:	60ab      	str	r3, [r5, #8]
 8012aa6:	61ab      	str	r3, [r5, #24]
 8012aa8:	4be7      	ldr	r3, [pc, #924]	; (8012e48 <MEMS_runMagCal+0x808>)
 8012aaa:	9311      	str	r3, [sp, #68]	; 0x44
 8012aac:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8012ab0:	eec5 9a88 	vdiv.f32	s19, s11, s16
 8012ab4:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8012ab8:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8012abc:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8012ac0:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8012ac4:	eef0 6a67 	vmov.f32	s13, s15
 8012ac8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8012acc:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012ad0:	ee39 9a46 	vsub.f32	s18, s18, s12
 8012ad4:	eddf 6add 	vldr	s13, [pc, #884]	; 8012e4c <MEMS_runMagCal+0x80c>
 8012ad8:	ed9f 6add 	vldr	s12, [pc, #884]	; 8012e50 <MEMS_runMagCal+0x810>
 8012adc:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012ae0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012ae4:	eef0 6ae6 	vabs.f32	s13, s13
 8012ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012aec:	eef4 6ac6 	vcmpe.f32	s13, s12
 8012af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012af4:	eef0 7ae7 	vabs.f32	s15, s15
 8012af8:	f101 84dd 	bmi.w	80144b6 <MEMS_runMagCal+0x1e76>
 8012afc:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8012e54 <MEMS_runMagCal+0x814>
 8012b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b08:	f281 8438 	bge.w	801437c <MEMS_runMagCal+0x1d3c>
 8012b0c:	eddf 7ad2 	vldr	s15, [pc, #840]	; 8012e58 <MEMS_runMagCal+0x818>
 8012b10:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b18:	f101 8430 	bmi.w	801437c <MEMS_runMagCal+0x1d3c>
 8012b1c:	f002 fc74 	bl	8015408 <roundf>
 8012b20:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012b24:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8012b28:	ee17 3a90 	vmov	r3, s15
 8012b2c:	eeb0 0a69 	vmov.f32	s0, s19
 8012b30:	f8a9 3000 	strh.w	r3, [r9]
 8012b34:	f002 fc68 	bl	8015408 <roundf>
 8012b38:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012b3c:	eeb0 0a4a 	vmov.f32	s0, s20
 8012b40:	ee17 3a90 	vmov	r3, s15
 8012b44:	f8a9 3002 	strh.w	r3, [r9, #2]
 8012b48:	f002 fc5e 	bl	8015408 <roundf>
 8012b4c:	eddd 7a08 	vldr	s15, [sp, #32]
 8012b50:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8012b54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012b58:	ee16 3a90 	vmov	r3, s13
 8012b5c:	eddf 7abf 	vldr	s15, [pc, #764]	; 8012e5c <MEMS_runMagCal+0x81c>
 8012b60:	f8a9 3004 	strh.w	r3, [r9, #4]
 8012b64:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012b68:	f002 fc4e 	bl	8015408 <roundf>
 8012b6c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012b70:	ae0f      	add	r6, sp, #60	; 0x3c
 8012b72:	ed8b 0a01 	vstr	s0, [fp, #4]
 8012b76:	ab10      	add	r3, sp, #64	; 0x40
 8012b78:	ee1c 0a10 	vmov	r0, s24
 8012b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8012b80:	4649      	mov	r1, r9
 8012b82:	9600      	str	r6, [sp, #0]
 8012b84:	aa2d      	add	r2, sp, #180	; 0xb4
 8012b86:	f7f8 ff33 	bl	800b9f0 <getMagStats.constprop.0>
 8012b8a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012b8e:	eddf 6ab4 	vldr	s13, [pc, #720]	; 8012e60 <MEMS_runMagCal+0x820>
 8012b92:	461f      	mov	r7, r3
 8012b94:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8012b98:	005b      	lsls	r3, r3, #1
 8012b9a:	ee07 3a90 	vmov	s15, r3
 8012b9e:	ee07 0a10 	vmov	s14, r0
 8012ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012ba6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012baa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bb6:	dc0f      	bgt.n	8012bd8 <MEMS_runMagCal+0x598>
 8012bb8:	ed96 7a00 	vldr	s14, [r6]
 8012bbc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8012bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bc8:	bfc3      	ittte	gt
 8012bca:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 8012bce:	fab3 f383 	clzgt	r3, r3
 8012bd2:	095b      	lsrgt	r3, r3, #5
 8012bd4:	2301      	movle	r3, #1
 8012bd6:	9303      	str	r3, [sp, #12]
 8012bd8:	ed96 0a00 	vldr	s0, [r6]
 8012bdc:	f8db 6004 	ldr.w	r6, [fp, #4]
 8012be0:	9620      	str	r6, [sp, #128]	; 0x80
 8012be2:	ee28 0a80 	vmul.f32	s0, s17, s0
 8012be6:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8012bea:	f002 fc0d 	bl	8015408 <roundf>
 8012bee:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 8012bf2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 8012bf6:	ee17 3a10 	vmov	r3, s14
 8012bfa:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8012bfe:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8012c02:	f002 fc01 	bl	8015408 <roundf>
 8012c06:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8012e64 <MEMS_runMagCal+0x824>
 8012c0a:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8012c0e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8012c12:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 8012c16:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8012c1a:	f8d9 0000 	ldr.w	r0, [r9]
 8012c1e:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 8012c22:	ee66 6a86 	vmul.f32	s13, s13, s12
 8012c26:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012c2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012c2e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8012c32:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8012c36:	ee16 2a90 	vmov	r2, s13
 8012c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c3e:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 8012c42:	f1b8 0f01 	cmp.w	r8, #1
 8012c46:	fa1f fc82 	uxth.w	ip, r2
 8012c4a:	bf08      	it	eq
 8012c4c:	23ff      	moveq	r3, #255	; 0xff
 8012c4e:	ee17 2a10 	vmov	r2, s14
 8012c52:	ee17 1a90 	vmov	r1, s15
 8012c56:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 8012c5a:	ee16 0a10 	vmov	r0, s12
 8012c5e:	bf08      	it	eq
 8012c60:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 8012c64:	9b03      	ldr	r3, [sp, #12]
 8012c66:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 8012c6a:	b292      	uxth	r2, r2
 8012c6c:	b289      	uxth	r1, r1
 8012c6e:	2000      	movs	r0, #0
 8012c70:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 8012c74:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8012c78:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 8012c7c:	f88b 0000 	strb.w	r0, [fp]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	f000 8118 	beq.w	8012eb6 <MEMS_runMagCal+0x876>
 8012c86:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8012c8a:	f88b 0001 	strb.w	r0, [fp, #1]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	f041 80fd 	bne.w	8013e8e <MEMS_runMagCal+0x184e>
 8012c94:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8012c98:	ad0e      	add	r5, sp, #56	; 0x38
 8012c9a:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 8012c9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012ca2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8012ca6:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 8012caa:	f8cb 6008 	str.w	r6, [fp, #8]
 8012cae:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 8012cb2:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 8012cb6:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8012e68 <MEMS_runMagCal+0x828>
 8012cba:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 8012cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012cc2:	fb00 f404 	mul.w	r4, r0, r4
 8012cc6:	ee05 4a90 	vmov	s11, r4
 8012cca:	fb00 f406 	mul.w	r4, r0, r6
 8012cce:	fb00 f00e 	mul.w	r0, r0, lr
 8012cd2:	ee06 0a10 	vmov	s12, r0
 8012cd6:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 8012cda:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8012cde:	ee03 0a90 	vmov	s7, r0
 8012ce2:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 8012ce6:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 8012cea:	ee05 4a10 	vmov	s10, r4
 8012cee:	ee04 0a10 	vmov	s8, r0
 8012cf2:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 8012cf6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8012cfa:	ee04 0a90 	vmov	s9, r0
 8012cfe:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012d02:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012d06:	f8dc 0000 	ldr.w	r0, [ip]
 8012d0a:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8012d0e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8012d12:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012d16:	ee26 6a27 	vmul.f32	s12, s12, s15
 8012d1a:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8012d1e:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8012d22:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8012d26:	2001      	movs	r0, #1
 8012d28:	24ff      	movs	r4, #255	; 0xff
 8012d2a:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 8012d2e:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 8012d32:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 8012d36:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 8012d3a:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 8012d3e:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 8012d42:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 8012d46:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 8012d4a:	f88b 4012 	strb.w	r4, [fp, #18]
 8012d4e:	2f00      	cmp	r7, #0
 8012d50:	f001 82c8 	beq.w	80142e4 <MEMS_runMagCal+0x1ca4>
 8012d54:	9b05      	ldr	r3, [sp, #20]
 8012d56:	ed9f 3a47 	vldr	s6, [pc, #284]	; 8012e74 <MEMS_runMagCal+0x834>
 8012d5a:	ed93 0a01 	vldr	s0, [r3, #4]
 8012d5e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8012d62:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8012d66:	2200      	movs	r2, #0
 8012d68:	ee20 3a03 	vmul.f32	s6, s0, s6
 8012d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8012d70:	4616      	mov	r6, r2
 8012d72:	fb96 f3f0 	sdiv	r3, r6, r0
 8012d76:	fb00 6313 	mls	r3, r0, r3, r6
 8012d7a:	b2db      	uxtb	r3, r3
 8012d7c:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8012d80:	1c66      	adds	r6, r4, #1
 8012d82:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8012d86:	ee07 4a90 	vmov	s15, r4
 8012d8a:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8012d8e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8012d92:	ee06 4a90 	vmov	s13, r4
 8012d96:	fb96 f4f1 	sdiv	r4, r6, r1
 8012d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d9e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012da2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8012da6:	ee07 3a10 	vmov	s14, r3
 8012daa:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8012dae:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012db2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012db6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012dba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012dbe:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8012dc2:	fb01 6414 	mls	r4, r1, r4, r6
 8012dc6:	b264      	sxtb	r4, r4
 8012dc8:	ee37 7a64 	vsub.f32	s14, s14, s9
 8012dcc:	3201      	adds	r2, #1
 8012dce:	ee27 7a06 	vmul.f32	s14, s14, s12
 8012dd2:	b212      	sxth	r2, r2
 8012dd4:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012dd8:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8012ddc:	42ba      	cmp	r2, r7
 8012dde:	4616      	mov	r6, r2
 8012de0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012de4:	ee67 7a03 	vmul.f32	s15, s14, s6
 8012de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012dec:	ee17 ca90 	vmov	ip, s15
 8012df0:	f8a3 c014 	strh.w	ip, [r3, #20]
 8012df4:	dbbd      	blt.n	8012d72 <MEMS_runMagCal+0x732>
 8012df6:	f88b 4012 	strb.w	r4, [fp, #18]
 8012dfa:	428f      	cmp	r7, r1
 8012dfc:	bf28      	it	cs
 8012dfe:	460f      	movcs	r7, r1
 8012e00:	f88b 7010 	strb.w	r7, [fp, #16]
 8012e04:	ee1c 0a10 	vmov	r0, s24
 8012e08:	9500      	str	r5, [sp, #0]
 8012e0a:	4642      	mov	r2, r8
 8012e0c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8012e10:	ab0d      	add	r3, sp, #52	; 0x34
 8012e12:	f7f8 fded 	bl	800b9f0 <getMagStats.constprop.0>
 8012e16:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8012e6c <MEMS_runMagCal+0x82c>
 8012e1a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8012e1e:	edd5 6a00 	vldr	s13, [r5]
 8012e22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012e26:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8012e2a:	eef0 7ae7 	vabs.f32	s15, s15
 8012e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e36:	d525      	bpl.n	8012e84 <MEMS_runMagCal+0x844>
 8012e38:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e40:	f101 8257 	bmi.w	80142f2 <MEMS_runMagCal+0x1cb2>
 8012e44:	e01e      	b.n	8012e84 <MEMS_runMagCal+0x844>
 8012e46:	bf00      	nop
 8012e48:	41f00001 	.word	0x41f00001
 8012e4c:	3f8ccccd 	.word	0x3f8ccccd
 8012e50:	3f266666 	.word	0x3f266666
 8012e54:	3eb33333 	.word	0x3eb33333
 8012e58:	3f19999a 	.word	0x3f19999a
 8012e5c:	3a83126f 	.word	0x3a83126f
 8012e60:	3c23d70a 	.word	0x3c23d70a
 8012e64:	447a0000 	.word	0x447a0000
 8012e68:	358637bd 	.word	0x358637bd
 8012e6c:	423c0000 	.word	0x423c0000
 8012e70:	4423d666 	.word	0x4423d666
 8012e74:	42c80000 	.word	0x42c80000
 8012e78:	427c0000 	.word	0x427c0000
 8012e7c:	3f666666 	.word	0x3f666666
 8012e80:	3eaaaaab 	.word	0x3eaaaaab
 8012e84:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8012e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e90:	d507      	bpl.n	8012ea2 <MEMS_runMagCal+0x862>
 8012e92:	eef4 6a47 	vcmp.f32	s13, s14
 8012e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9a:	9b03      	ldr	r3, [sp, #12]
 8012e9c:	bf48      	it	mi
 8012e9e:	2302      	movmi	r3, #2
 8012ea0:	9303      	str	r3, [sp, #12]
 8012ea2:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8012ea6:	9a03      	ldr	r2, [sp, #12]
 8012ea8:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 8012eac:	2bc8      	cmp	r3, #200	; 0xc8
 8012eae:	d902      	bls.n	8012eb6 <MEMS_runMagCal+0x876>
 8012eb0:	2302      	movs	r3, #2
 8012eb2:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8012eb6:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8012eba:	ecbd 8b0a 	vpop	{d8-d12}
 8012ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8012ec6:	4291      	cmp	r1, r2
 8012ec8:	f4ff abea 	bcc.w	80126a0 <MEMS_runMagCal+0x60>
 8012ecc:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f47f abf9 	bne.w	80126c8 <MEMS_runMagCal+0x88>
 8012ed6:	f7ff bbed 	b.w	80126b4 <MEMS_runMagCal+0x74>
 8012eda:	2702      	movs	r7, #2
 8012edc:	2300      	movs	r3, #0
 8012ede:	9307      	str	r3, [sp, #28]
 8012ee0:	9303      	str	r3, [sp, #12]
 8012ee2:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 8012e70 <MEMS_runMagCal+0x830>
 8012ee6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eee:	f140 8260 	bpl.w	80133b2 <MEMS_runMagCal+0xd72>
 8012ef2:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 8012e74 <MEMS_runMagCal+0x834>
 8012ef6:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8012efa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8012f04:	d911      	bls.n	8012f2a <MEMS_runMagCal+0x8ea>
 8012f06:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012f0a:	ee17 3a90 	vmov	r3, s15
 8012f0e:	b29b      	uxth	r3, r3
 8012f10:	2bc7      	cmp	r3, #199	; 0xc7
 8012f12:	f201 8359 	bhi.w	80145c8 <MEMS_runMagCal+0x1f88>
 8012f16:	2300      	movs	r3, #0
 8012f18:	22ff      	movs	r2, #255	; 0xff
 8012f1a:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8012f1e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 8012f22:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 8012f26:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012f2a:	2f00      	cmp	r7, #0
 8012f2c:	f040 824d 	bne.w	80133ca <MEMS_runMagCal+0xd8a>
 8012f30:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	f2c0 839e 	blt.w	8013676 <MEMS_runMagCal+0x1036>
 8012f3a:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8012f3e:	1c5a      	adds	r2, r3, #1
 8012f40:	fbb2 f3f6 	udiv	r3, r2, r6
 8012f44:	fb06 2313 	mls	r3, r6, r3, r2
 8012f48:	b25b      	sxtb	r3, r3
 8012f4a:	461d      	mov	r5, r3
 8012f4c:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8012f50:	f88b 3012 	strb.w	r3, [fp, #18]
 8012f54:	3401      	adds	r4, #1
 8012f56:	42b4      	cmp	r4, r6
 8012f58:	bfa8      	it	ge
 8012f5a:	4634      	movge	r4, r6
 8012f5c:	fa5f f884 	uxtb.w	r8, r4
 8012f60:	f88b 8010 	strb.w	r8, [fp, #16]
 8012f64:	f002 fa50 	bl	8015408 <roundf>
 8012f68:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012f6c:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 8012f70:	ee10 2a10 	vmov	r2, s0
 8012f74:	829a      	strh	r2, [r3, #20]
 8012f76:	2f00      	cmp	r7, #0
 8012f78:	f040 8227 	bne.w	80133ca <MEMS_runMagCal+0xd8a>
 8012f7c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8012f80:	b122      	cbz	r2, 8012f8c <MEMS_runMagCal+0x94c>
 8012f82:	9908      	ldr	r1, [sp, #32]
 8012f84:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 8012f88:	4299      	cmp	r1, r3
 8012f8a:	d394      	bcc.n	8012eb6 <MEMS_runMagCal+0x876>
 8012f8c:	9b03      	ldr	r3, [sp, #12]
 8012f8e:	2b01      	cmp	r3, #1
 8012f90:	d091      	beq.n	8012eb6 <MEMS_runMagCal+0x876>
 8012f92:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 8012f96:	1ebb      	subs	r3, r7, #2
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	f240 8232 	bls.w	8013402 <MEMS_runMagCal+0xdc2>
 8012f9e:	9b05      	ldr	r3, [sp, #20]
 8012fa0:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 8012e78 <MEMS_runMagCal+0x838>
 8012fa4:	ed93 8a01 	vldr	s16, [r3, #4]
 8012fa8:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 8012fac:	9a06      	ldr	r2, [sp, #24]
 8012fae:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 8012fb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012fb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012fb8:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8012fbc:	fb02 1404 	mla	r4, r2, r4, r1
 8012fc0:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8012fc4:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8012fc8:	3310      	adds	r3, #16
 8012fca:	42a3      	cmp	r3, r4
 8012fcc:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8012fd0:	ee28 9a89 	vmul.f32	s18, s17, s18
 8012fd4:	ee0c 2a10 	vmov	s24, r2
 8012fd8:	ee69 7a27 	vmul.f32	s15, s18, s15
 8012fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012fe0:	ee17 2a90 	vmov	r2, s15
 8012fe4:	fa1f f982 	uxth.w	r9, r2
 8012fe8:	f080 81fe 	bcs.w	80133e8 <MEMS_runMagCal+0xda8>
 8012fec:	f242 3328 	movw	r3, #9000	; 0x2328
 8012ff0:	429c      	cmp	r4, r3
 8012ff2:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8012ff6:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 8012ffa:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 8012ffe:	bf1a      	itte	ne
 8013000:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 8013004:	3c28      	subne	r4, #40	; 0x28
 8013006:	2400      	moveq	r4, #0
 8013008:	42a8      	cmp	r0, r5
 801300a:	f102 0201 	add.w	r2, r2, #1
 801300e:	f000 8727 	beq.w	8013e60 <MEMS_runMagCal+0x1820>
 8013012:	1a12      	subs	r2, r2, r0
 8013014:	fb92 f1f5 	sdiv	r1, r2, r5
 8013018:	fb05 2211 	mls	r2, r5, r1, r2
 801301c:	2a00      	cmp	r2, #0
 801301e:	bfb8      	it	lt
 8013020:	1952      	addlt	r2, r2, r5
 8013022:	b211      	sxth	r1, r2
 8013024:	b358      	cbz	r0, 801307e <MEMS_runMagCal+0xa3e>
 8013026:	3801      	subs	r0, #1
 8013028:	b280      	uxth	r0, r0
 801302a:	3001      	adds	r0, #1
 801302c:	1b36      	subs	r6, r6, r4
 801302e:	9f03      	ldr	r7, [sp, #12]
 8013030:	b2b6      	uxth	r6, r6
 8013032:	4408      	add	r0, r1
 8013034:	e002      	b.n	801303c <MEMS_runMagCal+0x9fc>
 8013036:	3101      	adds	r1, #1
 8013038:	4281      	cmp	r1, r0
 801303a:	d01b      	beq.n	8013074 <MEMS_runMagCal+0xa34>
 801303c:	fb91 f3f5 	sdiv	r3, r1, r5
 8013040:	fb05 1313 	mls	r3, r5, r3, r1
 8013044:	b2db      	uxtb	r3, r3
 8013046:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801304a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 801304e:	4432      	add	r2, r6
 8013050:	b212      	sxth	r2, r2
 8013052:	2a00      	cmp	r2, #0
 8013054:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8013058:	daed      	bge.n	8013036 <MEMS_runMagCal+0x9f6>
 801305a:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 801305e:	1e5a      	subs	r2, r3, #1
 8013060:	2b00      	cmp	r3, #0
 8013062:	f000 8306 	beq.w	8013672 <MEMS_runMagCal+0x1032>
 8013066:	3101      	adds	r1, #1
 8013068:	4281      	cmp	r1, r0
 801306a:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 801306e:	f04f 0701 	mov.w	r7, #1
 8013072:	d1e3      	bne.n	801303c <MEMS_runMagCal+0x9fc>
 8013074:	2f01      	cmp	r7, #1
 8013076:	f001 80ea 	beq.w	801424e <MEMS_runMagCal+0x1c0e>
 801307a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801307e:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 8013082:	2800      	cmp	r0, #0
 8013084:	f000 81b6 	beq.w	80133f4 <MEMS_runMagCal+0xdb4>
 8013088:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801308c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801308e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013092:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 8013096:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 801309a:	3308      	adds	r3, #8
 801309c:	441c      	add	r4, r3
 801309e:	42a2      	cmp	r2, r4
 80130a0:	f200 86e6 	bhi.w	8013e70 <MEMS_runMagCal+0x1830>
 80130a4:	9b07      	ldr	r3, [sp, #28]
 80130a6:	b923      	cbnz	r3, 80130b2 <MEMS_runMagCal+0xa72>
 80130a8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80130ac:	2b0a      	cmp	r3, #10
 80130ae:	f240 81a5 	bls.w	80133fc <MEMS_runMagCal+0xdbc>
 80130b2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80130b6:	9302      	str	r3, [sp, #8]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f000 819f 	beq.w	80133fc <MEMS_runMagCal+0xdbc>
 80130be:	ee29 aa09 	vmul.f32	s20, s18, s18
 80130c2:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 8012e7c <MEMS_runMagCal+0x83c>
 80130c6:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 8012e80 <MEMS_runMagCal+0x840>
 80130ca:	9b03      	ldr	r3, [sp, #12]
 80130cc:	9309      	str	r3, [sp, #36]	; 0x24
 80130ce:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 80130d2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80130d6:	2100      	movs	r1, #0
 80130d8:	ee2a aa26 	vmul.f32	s20, s20, s13
 80130dc:	ee28 8a07 	vmul.f32	s16, s16, s14
 80130e0:	ee69 9a29 	vmul.f32	s19, s18, s19
 80130e4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80130e8:	468a      	mov	sl, r1
 80130ea:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80130ec:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 80130f0:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	f000 80e2 	beq.w	80132be <MEMS_runMagCal+0xc7e>
 80130fa:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 80130fe:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 8013102:	ee07 4a90 	vmov	s15, r4
 8013106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801310a:	eef0 7ae7 	vabs.f32	s15, s15
 801310e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013116:	f100 820b 	bmi.w	8013530 <MEMS_runMagCal+0xef0>
 801311a:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801311e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013122:	2f00      	cmp	r7, #0
 8013124:	f000 8223 	beq.w	801356e <MEMS_runMagCal+0xf2e>
 8013128:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 801312c:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 8013130:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 8013134:	1b52      	subs	r2, r2, r5
 8013136:	fb02 f102 	mul.w	r1, r2, r2
 801313a:	1b02      	subs	r2, r0, r4
 801313c:	fb02 1202 	mla	r2, r2, r2, r1
 8013140:	1b9b      	subs	r3, r3, r6
 8013142:	fb03 2303 	mla	r3, r3, r3, r2
 8013146:	ee07 3a90 	vmov	s15, r3
 801314a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801314e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013156:	f300 80b2 	bgt.w	80132be <MEMS_runMagCal+0xc7e>
 801315a:	fb94 f3f9 	sdiv	r3, r4, r9
 801315e:	fb09 4313 	mls	r3, r9, r3, r4
 8013162:	2b00      	cmp	r3, #0
 8013164:	bfb8      	it	lt
 8013166:	444b      	addlt	r3, r9
 8013168:	b21b      	sxth	r3, r3
 801316a:	ee00 3a10 	vmov	s0, r3
 801316e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013172:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013176:	f002 f947 	bl	8015408 <roundf>
 801317a:	fb95 f3f9 	sdiv	r3, r5, r9
 801317e:	fb09 5313 	mls	r3, r9, r3, r5
 8013182:	2b00      	cmp	r3, #0
 8013184:	bfb8      	it	lt
 8013186:	444b      	addlt	r3, r9
 8013188:	b21b      	sxth	r3, r3
 801318a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801318e:	ee00 3a10 	vmov	s0, r3
 8013192:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013196:	edcd 7a04 	vstr	s15, [sp, #16]
 801319a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801319e:	f002 f933 	bl	8015408 <roundf>
 80131a2:	fb96 f3f9 	sdiv	r3, r6, r9
 80131a6:	fb09 6313 	mls	r3, r9, r3, r6
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	bfb8      	it	lt
 80131ae:	444b      	addlt	r3, r9
 80131b0:	b21b      	sxth	r3, r3
 80131b2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80131b6:	ee00 3a10 	vmov	s0, r3
 80131ba:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80131be:	f89d 8010 	ldrb.w	r8, [sp, #16]
 80131c2:	edcd 7a04 	vstr	s15, [sp, #16]
 80131c6:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80131ca:	9204      	str	r2, [sp, #16]
 80131cc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80131d0:	f002 f91a 	bl	8015408 <roundf>
 80131d4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80131d8:	f1b8 0f1f 	cmp.w	r8, #31
 80131dc:	edcd 7a06 	vstr	s15, [sp, #24]
 80131e0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80131e4:	9106      	str	r1, [sp, #24]
 80131e6:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 80131ea:	f240 823d 	bls.w	8013668 <MEMS_runMagCal+0x1028>
 80131ee:	f1a8 0220 	sub.w	r2, r8, #32
 80131f2:	2101      	movs	r1, #1
 80131f4:	fa01 f202 	lsl.w	r2, r1, r2
 80131f8:	401a      	ands	r2, r3
 80131fa:	9804      	ldr	r0, [sp, #16]
 80131fc:	281f      	cmp	r0, #31
 80131fe:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 8013202:	f240 821f 	bls.w	8013644 <MEMS_runMagCal+0x1004>
 8013206:	f1a0 0120 	sub.w	r1, r0, #32
 801320a:	2001      	movs	r0, #1
 801320c:	fa00 f101 	lsl.w	r1, r0, r1
 8013210:	ea01 0c03 	and.w	ip, r1, r3
 8013214:	9906      	ldr	r1, [sp, #24]
 8013216:	291f      	cmp	r1, #31
 8013218:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 801321c:	f240 821e 	bls.w	801365c <MEMS_runMagCal+0x101c>
 8013220:	f1a1 0020 	sub.w	r0, r1, #32
 8013224:	2101      	movs	r1, #1
 8013226:	fa01 f000 	lsl.w	r0, r1, r0
 801322a:	4003      	ands	r3, r0
 801322c:	2b00      	cmp	r3, #0
 801322e:	f040 812b 	bne.w	8013488 <MEMS_runMagCal+0xe48>
 8013232:	ea52 030c 	orrs.w	r3, r2, ip
 8013236:	f040 812c 	bne.w	8013492 <MEMS_runMagCal+0xe52>
 801323a:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 801323e:	930a      	str	r3, [sp, #40]	; 0x28
 8013240:	461a      	mov	r2, r3
 8013242:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013246:	3301      	adds	r3, #1
 8013248:	4694      	mov	ip, r2
 801324a:	930b      	str	r3, [sp, #44]	; 0x2c
 801324c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801324e:	fb92 f3fc 	sdiv	r3, r2, ip
 8013252:	3701      	adds	r7, #1
 8013254:	4567      	cmp	r7, ip
 8013256:	bfa8      	it	ge
 8013258:	4667      	movge	r7, ip
 801325a:	fb0c 2c13 	mls	ip, ip, r3, r2
 801325e:	b2ff      	uxtb	r7, r7
 8013260:	fa4f fc8c 	sxtb.w	ip, ip
 8013264:	9905      	ldr	r1, [sp, #20]
 8013266:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 801326a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801326e:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 8013272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013274:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8013278:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 801327c:	1a9b      	subs	r3, r3, r2
 801327e:	fb01 330a 	mla	r3, r1, sl, r3
 8013282:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 8013286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013288:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 801328c:	429f      	cmp	r7, r3
 801328e:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 8013292:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 8013296:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 801329a:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 801329e:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80132a2:	f000 8758 	beq.w	8014156 <MEMS_runMagCal+0x1b16>
 80132a6:	9b06      	ldr	r3, [sp, #24]
 80132a8:	9a04      	ldr	r2, [sp, #16]
 80132aa:	ee1c 0a10 	vmov	r0, s24
 80132ae:	4641      	mov	r1, r8
 80132b0:	f7f8 f874 	bl	800b39c <MEMS_setMagIndexToOne>
 80132b4:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80132b8:	9302      	str	r3, [sp, #8]
 80132ba:	2301      	movs	r3, #1
 80132bc:	9309      	str	r3, [sp, #36]	; 0x24
 80132be:	9b02      	ldr	r3, [sp, #8]
 80132c0:	f10a 0a01 	add.w	sl, sl, #1
 80132c4:	fa0f fa8a 	sxth.w	sl, sl
 80132c8:	459a      	cmp	sl, r3
 80132ca:	4651      	mov	r1, sl
 80132cc:	f6ff af0d 	blt.w	80130ea <MEMS_runMagCal+0xaaa>
 80132d0:	f89b 3000 	ldrb.w	r3, [fp]
 80132d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132d6:	431a      	orrs	r2, r3
 80132d8:	b2d3      	uxtb	r3, r2
 80132da:	f88b 3000 	strb.w	r3, [fp]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	f43f ade9 	beq.w	8012eb6 <MEMS_runMagCal+0x876>
 80132e4:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80132e8:	9306      	str	r3, [sp, #24]
 80132ea:	2b19      	cmp	r3, #25
 80132ec:	f67f ade3 	bls.w	8012eb6 <MEMS_runMagCal+0x876>
 80132f0:	f8db 3008 	ldr.w	r3, [fp, #8]
 80132f4:	9309      	str	r3, [sp, #36]	; 0x24
 80132f6:	b123      	cbz	r3, 8013302 <MEMS_runMagCal+0xcc2>
 80132f8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	f040 8583 	bne.w	8013e08 <MEMS_runMagCal+0x17c8>
 8013302:	9b07      	ldr	r3, [sp, #28]
 8013304:	2b00      	cmp	r3, #0
 8013306:	f040 872f 	bne.w	8014168 <MEMS_runMagCal+0x1b28>
 801330a:	9b05      	ldr	r3, [sp, #20]
 801330c:	9903      	ldr	r1, [sp, #12]
 801330e:	ed93 8a01 	vldr	s16, [r3, #4]
 8013312:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 8013316:	9302      	str	r3, [sp, #8]
 8013318:	2600      	movs	r6, #0
 801331a:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 801331e:	9304      	str	r3, [sp, #16]
 8013320:	f04f 0a01 	mov.w	sl, #1
 8013324:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8013328:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 801332c:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8013330:	9624      	str	r6, [sp, #144]	; 0x90
 8013332:	4657      	mov	r7, sl
 8013334:	460b      	mov	r3, r1
 8013336:	460c      	mov	r4, r1
 8013338:	e013      	b.n	8013362 <MEMS_runMagCal+0xd22>
 801333a:	f1b9 0f00 	cmp.w	r9, #0
 801333e:	bf18      	it	ne
 8013340:	3101      	addne	r1, #1
 8013342:	2d00      	cmp	r5, #0
 8013344:	bf18      	it	ne
 8013346:	3401      	addne	r4, #1
 8013348:	2a00      	cmp	r2, #0
 801334a:	bf18      	it	ne
 801334c:	3301      	addne	r3, #1
 801334e:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 8013352:	b2c9      	uxtb	r1, r1
 8013354:	b2e4      	uxtb	r4, r4
 8013356:	b2db      	uxtb	r3, r3
 8013358:	f000 81a2 	beq.w	80136a0 <MEMS_runMagCal+0x1060>
 801335c:	3601      	adds	r6, #1
 801335e:	fa5f fa8c 	uxtb.w	sl, ip
 8013362:	9804      	ldr	r0, [sp, #16]
 8013364:	f1a6 0220 	sub.w	r2, r6, #32
 8013368:	fa07 f202 	lsl.w	r2, r7, r2
 801336c:	ea02 0500 	and.w	r5, r2, r0
 8013370:	9802      	ldr	r0, [sp, #8]
 8013372:	2e1f      	cmp	r6, #31
 8013374:	ea08 0902 	and.w	r9, r8, r2
 8013378:	f10a 0c01 	add.w	ip, sl, #1
 801337c:	ea02 0200 	and.w	r2, r2, r0
 8013380:	fa07 f006 	lsl.w	r0, r7, r6
 8013384:	d8d9      	bhi.n	801333a <MEMS_runMagCal+0xcfa>
 8013386:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 801338a:	ea00 0902 	and.w	r9, r0, r2
 801338e:	4005      	ands	r5, r0
 8013390:	ea0e 0000 	and.w	r0, lr, r0
 8013394:	f1b9 0f00 	cmp.w	r9, #0
 8013398:	bf18      	it	ne
 801339a:	3401      	addne	r4, #1
 801339c:	2d00      	cmp	r5, #0
 801339e:	bf0c      	ite	eq
 80133a0:	461d      	moveq	r5, r3
 80133a2:	1c5d      	addne	r5, r3, #1
 80133a4:	2800      	cmp	r0, #0
 80133a6:	bf18      	it	ne
 80133a8:	3101      	addne	r1, #1
 80133aa:	b2e4      	uxtb	r4, r4
 80133ac:	b2eb      	uxtb	r3, r5
 80133ae:	b2c9      	uxtb	r1, r1
 80133b0:	e7d4      	b.n	801335c <MEMS_runMagCal+0xd1c>
 80133b2:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80133b6:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 801368c <MEMS_runMagCal+0x104c>
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 80133c0:	f63f ada9 	bhi.w	8012f16 <MEMS_runMagCal+0x8d6>
 80133c4:	2f00      	cmp	r7, #0
 80133c6:	f43f adb3 	beq.w	8012f30 <MEMS_runMagCal+0x8f0>
 80133ca:	9908      	ldr	r1, [sp, #32]
 80133cc:	f8cb 100c 	str.w	r1, [fp, #12]
 80133d0:	2200      	movs	r2, #0
 80133d2:	23ff      	movs	r3, #255	; 0xff
 80133d4:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80133d8:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 80133dc:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 80133e0:	ecbd 8b0a 	vpop	{d8-d12}
 80133e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133e8:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80133ec:	4634      	mov	r4, r6
 80133ee:	2800      	cmp	r0, #0
 80133f0:	f47f ae4a 	bne.w	8013088 <MEMS_runMagCal+0xa48>
 80133f4:	9b07      	ldr	r3, [sp, #28]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	f47f ae5b 	bne.w	80130b2 <MEMS_runMagCal+0xa72>
 80133fc:	9b03      	ldr	r3, [sp, #12]
 80133fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013400:	e766      	b.n	80132d0 <MEMS_runMagCal+0xc90>
 8013402:	45b0      	cmp	r8, r6
 8013404:	f000 86b9 	beq.w	801417a <MEMS_runMagCal+0x1b3a>
 8013408:	2f03      	cmp	r7, #3
 801340a:	f47f adc8 	bne.w	8012f9e <MEMS_runMagCal+0x95e>
 801340e:	ee07 2a90 	vmov	s15, r2
 8013412:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013690 <MEMS_runMagCal+0x1050>
 8013416:	ed9b 7a01 	vldr	s14, [fp, #4]
 801341a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801341e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013422:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013426:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801342a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801342e:	f77f adb6 	ble.w	8012f9e <MEMS_runMagCal+0x95e>
 8013432:	f8db 3008 	ldr.w	r3, [fp, #8]
 8013436:	2b00      	cmp	r3, #0
 8013438:	f43f adb1 	beq.w	8012f9e <MEMS_runMagCal+0x95e>
 801343c:	eddd 7a08 	vldr	s15, [sp, #32]
 8013440:	330a      	adds	r3, #10
 8013442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013446:	ee07 3a90 	vmov	s15, r3
 801344a:	ee67 6a26 	vmul.f32	s13, s14, s13
 801344e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013452:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801345a:	f77f ada0 	ble.w	8012f9e <MEMS_runMagCal+0x95e>
 801345e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8013462:	2b00      	cmp	r3, #0
 8013464:	f47f ad9b 	bne.w	8012f9e <MEMS_runMagCal+0x95e>
 8013468:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 801346c:	2b00      	cmp	r3, #0
 801346e:	f43f ad22 	beq.w	8012eb6 <MEMS_runMagCal+0x876>
 8013472:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8013476:	2bff      	cmp	r3, #255	; 0xff
 8013478:	f47f ad1d 	bne.w	8012eb6 <MEMS_runMagCal+0x876>
 801347c:	e58f      	b.n	8012f9e <MEMS_runMagCal+0x95e>
 801347e:	2300      	movs	r3, #0
 8013480:	9307      	str	r3, [sp, #28]
 8013482:	9303      	str	r3, [sp, #12]
 8013484:	2700      	movs	r7, #0
 8013486:	e52c      	b.n	8012ee2 <MEMS_runMagCal+0x8a2>
 8013488:	b11a      	cbz	r2, 8013492 <MEMS_runMagCal+0xe52>
 801348a:	f1bc 0f00 	cmp.w	ip, #0
 801348e:	f47f af16 	bne.w	80132be <MEMS_runMagCal+0xc7e>
 8013492:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013496:	930a      	str	r3, [sp, #40]	; 0x28
 8013498:	461a      	mov	r2, r3
 801349a:	4297      	cmp	r7, r2
 801349c:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80134a0:	f000 848f 	beq.w	8013dc2 <MEMS_runMagCal+0x1782>
 80134a4:	3301      	adds	r3, #1
 80134a6:	4611      	mov	r1, r2
 80134a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80134aa:	1bdb      	subs	r3, r3, r7
 80134ac:	fb93 f2f2 	sdiv	r2, r3, r2
 80134b0:	fb01 3212 	mls	r2, r1, r2, r3
 80134b4:	2a00      	cmp	r2, #0
 80134b6:	bfbc      	itt	lt
 80134b8:	460b      	movlt	r3, r1
 80134ba:	18d2      	addlt	r2, r2, r3
 80134bc:	468c      	mov	ip, r1
 80134be:	b212      	sxth	r2, r2
 80134c0:	f107 3eff 	add.w	lr, r7, #4294967295
 80134c4:	fa5f fe8e 	uxtb.w	lr, lr
 80134c8:	f10e 0e01 	add.w	lr, lr, #1
 80134cc:	4496      	add	lr, r2
 80134ce:	e002      	b.n	80134d6 <MEMS_runMagCal+0xe96>
 80134d0:	4572      	cmp	r2, lr
 80134d2:	f43f aebb 	beq.w	801324c <MEMS_runMagCal+0xc0c>
 80134d6:	fb92 f3fc 	sdiv	r3, r2, ip
 80134da:	fb0c 2313 	mls	r3, ip, r3, r2
 80134de:	b2db      	uxtb	r3, r3
 80134e0:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80134e4:	3201      	adds	r2, #1
 80134e6:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 80134ea:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 80134ee:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80134f2:	1a20      	subs	r0, r4, r0
 80134f4:	1a69      	subs	r1, r5, r1
 80134f6:	ee07 0a90 	vmov	s15, r0
 80134fa:	ee06 1a90 	vmov	s13, r1
 80134fe:	1af3      	subs	r3, r6, r3
 8013500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013504:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013508:	ee07 3a10 	vmov	s14, r3
 801350c:	eef0 7ae7 	vabs.f32	s15, s15
 8013510:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013514:	eef0 6ae6 	vabs.f32	s13, s13
 8013518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801351c:	eeb0 7ac7 	vabs.f32	s14, s14
 8013520:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013524:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352c:	ddd0      	ble.n	80134d0 <MEMS_runMagCal+0xe90>
 801352e:	e6c6      	b.n	80132be <MEMS_runMagCal+0xc7e>
 8013530:	ee07 5a90 	vmov	s15, r5
 8013534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013538:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 801353c:	eef0 7ae7 	vabs.f32	s15, s15
 8013540:	eef4 8ae7 	vcmpe.f32	s17, s15
 8013544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013548:	f77f ade9 	ble.w	801311e <MEMS_runMagCal+0xade>
 801354c:	ee07 6a90 	vmov	s15, r6
 8013550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013554:	eef0 7ae7 	vabs.f32	s15, s15
 8013558:	eef4 8ae7 	vcmpe.f32	s17, s15
 801355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013560:	f73f aead 	bgt.w	80132be <MEMS_runMagCal+0xc7e>
 8013564:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8013568:	2f00      	cmp	r7, #0
 801356a:	f47f addd 	bne.w	8013128 <MEMS_runMagCal+0xae8>
 801356e:	fb94 f2f9 	sdiv	r2, r4, r9
 8013572:	f04f 0301 	mov.w	r3, #1
 8013576:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801357a:	9b05      	ldr	r3, [sp, #20]
 801357c:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 8013580:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 8013584:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013586:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 801358a:	fb09 4212 	mls	r2, r9, r2, r4
 801358e:	2a00      	cmp	r2, #0
 8013590:	fb01 3300 	mla	r3, r1, r0, r3
 8013594:	bfb8      	it	lt
 8013596:	444a      	addlt	r2, r9
 8013598:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 801359c:	b213      	sxth	r3, r2
 801359e:	ee00 3a10 	vmov	s0, r3
 80135a2:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80135a6:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80135aa:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 80135ae:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80135b2:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 80135b6:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80135ba:	ee20 0a08 	vmul.f32	s0, s0, s16
 80135be:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 80135c2:	f001 ff21 	bl	8015408 <roundf>
 80135c6:	fb95 f3f9 	sdiv	r3, r5, r9
 80135ca:	fb09 5513 	mls	r5, r9, r3, r5
 80135ce:	2d00      	cmp	r5, #0
 80135d0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80135d4:	bfb8      	it	lt
 80135d6:	444d      	addlt	r5, r9
 80135d8:	b22d      	sxth	r5, r5
 80135da:	edcd 7a02 	vstr	s15, [sp, #8]
 80135de:	ee07 5a90 	vmov	s15, r5
 80135e2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80135e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80135ea:	ee20 0a08 	vmul.f32	s0, s0, s16
 80135ee:	f001 ff0b 	bl	8015408 <roundf>
 80135f2:	fb96 f3f9 	sdiv	r3, r6, r9
 80135f6:	fb09 6613 	mls	r6, r9, r3, r6
 80135fa:	2e00      	cmp	r6, #0
 80135fc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013600:	bfb8      	it	lt
 8013602:	444e      	addlt	r6, r9
 8013604:	b236      	sxth	r6, r6
 8013606:	edcd 7a02 	vstr	s15, [sp, #8]
 801360a:	ee07 6a90 	vmov	s15, r6
 801360e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013612:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013616:	9204      	str	r2, [sp, #16]
 8013618:	2301      	movs	r3, #1
 801361a:	ee20 0a08 	vmul.f32	s0, s0, s16
 801361e:	9309      	str	r3, [sp, #36]	; 0x24
 8013620:	f001 fef2 	bl	8015408 <roundf>
 8013624:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013628:	9a04      	ldr	r2, [sp, #16]
 801362a:	edcd 7a02 	vstr	s15, [sp, #8]
 801362e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013632:	ee1c 0a10 	vmov	r0, s24
 8013636:	4621      	mov	r1, r4
 8013638:	f7f7 feb0 	bl	800b39c <MEMS_setMagIndexToOne>
 801363c:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013640:	9302      	str	r3, [sp, #8]
 8013642:	e63c      	b.n	80132be <MEMS_runMagCal+0xc7e>
 8013644:	4603      	mov	r3, r0
 8013646:	2001      	movs	r0, #1
 8013648:	fa00 f303 	lsl.w	r3, r0, r3
 801364c:	ea01 0c03 	and.w	ip, r1, r3
 8013650:	9906      	ldr	r1, [sp, #24]
 8013652:	291f      	cmp	r1, #31
 8013654:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013658:	f63f ade2 	bhi.w	8013220 <MEMS_runMagCal+0xbe0>
 801365c:	460b      	mov	r3, r1
 801365e:	2101      	movs	r1, #1
 8013660:	fa01 f303 	lsl.w	r3, r1, r3
 8013664:	4003      	ands	r3, r0
 8013666:	e5e1      	b.n	801322c <MEMS_runMagCal+0xbec>
 8013668:	2301      	movs	r3, #1
 801366a:	fa03 f308 	lsl.w	r3, r3, r8
 801366e:	401a      	ands	r2, r3
 8013670:	e5c3      	b.n	80131fa <MEMS_runMagCal+0xbba>
 8013672:	2701      	movs	r7, #1
 8013674:	e4df      	b.n	8013036 <MEMS_runMagCal+0x9f6>
 8013676:	2500      	movs	r5, #0
 8013678:	f89b 6011 	ldrb.w	r6, [fp, #17]
 801367c:	462b      	mov	r3, r5
 801367e:	e465      	b.n	8012f4c <MEMS_runMagCal+0x90c>
 8013680:	460f      	mov	r7, r1
 8013682:	e42b      	b.n	8012edc <MEMS_runMagCal+0x89c>
 8013684:	2300      	movs	r3, #0
 8013686:	9304      	str	r3, [sp, #16]
 8013688:	f7ff b941 	b.w	801290e <MEMS_runMagCal+0x2ce>
 801368c:	477fff00 	.word	0x477fff00
 8013690:	3a83126f 	.word	0x3a83126f
 8013694:	42340000 	.word	0x42340000
 8013698:	3faccccd 	.word	0x3faccccd
 801369c:	00000000 	.word	0x00000000
 80136a0:	2905      	cmp	r1, #5
 80136a2:	f240 8383 	bls.w	8013dac <MEMS_runMagCal+0x176c>
 80136a6:	2c05      	cmp	r4, #5
 80136a8:	f240 8380 	bls.w	8013dac <MEMS_runMagCal+0x176c>
 80136ac:	2b05      	cmp	r3, #5
 80136ae:	f240 837d 	bls.w	8013dac <MEMS_runMagCal+0x176c>
 80136b2:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80136b6:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 80136ba:	9302      	str	r3, [sp, #8]
 80136bc:	9b06      	ldr	r3, [sp, #24]
 80136be:	4553      	cmp	r3, sl
 80136c0:	f000 85f1 	beq.w	80142a6 <MEMS_runMagCal+0x1c66>
 80136c4:	461a      	mov	r2, r3
 80136c6:	9b02      	ldr	r3, [sp, #8]
 80136c8:	3301      	adds	r3, #1
 80136ca:	9304      	str	r3, [sp, #16]
 80136cc:	1a9b      	subs	r3, r3, r2
 80136ce:	fb93 f2fa 	sdiv	r2, r3, sl
 80136d2:	fb0a 3212 	mls	r2, sl, r2, r3
 80136d6:	2a00      	cmp	r2, #0
 80136d8:	bfb8      	it	lt
 80136da:	4452      	addlt	r2, sl
 80136dc:	46d1      	mov	r9, sl
 80136de:	b212      	sxth	r2, r2
 80136e0:	9906      	ldr	r1, [sp, #24]
 80136e2:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 80136e6:	f101 38ff 	add.w	r8, r1, #4294967295
 80136ea:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 80136ee:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 80136f2:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 80136f6:	fa5f f888 	uxtb.w	r8, r8
 80136fa:	f108 0801 	add.w	r8, r8, #1
 80136fe:	468e      	mov	lr, r1
 8013700:	463e      	mov	r6, r7
 8013702:	46ac      	mov	ip, r5
 8013704:	4490      	add	r8, r2
 8013706:	fb92 f3f9 	sdiv	r3, r2, r9
 801370a:	fb09 2313 	mls	r3, r9, r3, r2
 801370e:	b2db      	uxtb	r3, r3
 8013710:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013714:	3201      	adds	r2, #1
 8013716:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 801371a:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 801371e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013722:	42a1      	cmp	r1, r4
 8013724:	bfb8      	it	lt
 8013726:	4621      	movlt	r1, r4
 8013728:	45a6      	cmp	lr, r4
 801372a:	bfa8      	it	ge
 801372c:	46a6      	movge	lr, r4
 801372e:	4285      	cmp	r5, r0
 8013730:	bfb8      	it	lt
 8013732:	4605      	movlt	r5, r0
 8013734:	4584      	cmp	ip, r0
 8013736:	bfa8      	it	ge
 8013738:	4684      	movge	ip, r0
 801373a:	429f      	cmp	r7, r3
 801373c:	bfb8      	it	lt
 801373e:	461f      	movlt	r7, r3
 8013740:	429e      	cmp	r6, r3
 8013742:	bfa8      	it	ge
 8013744:	461e      	movge	r6, r3
 8013746:	4542      	cmp	r2, r8
 8013748:	d1dd      	bne.n	8013706 <MEMS_runMagCal+0x10c6>
 801374a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801374e:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013752:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013756:	eba1 010e 	sub.w	r1, r1, lr
 801375a:	eba5 050c 	sub.w	r5, r5, ip
 801375e:	1bbe      	subs	r6, r7, r6
 8013760:	b209      	sxth	r1, r1
 8013762:	b22d      	sxth	r5, r5
 8013764:	b236      	sxth	r6, r6
 8013766:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8013694 <MEMS_runMagCal+0x1054>
 801376a:	ee28 7a87 	vmul.f32	s14, s17, s14
 801376e:	2b00      	cmp	r3, #0
 8013770:	f040 8593 	bne.w	801429a <MEMS_runMagCal+0x1c5a>
 8013774:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013778:	fab3 f883 	clz	r8, r3
 801377c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013780:	ee06 1a90 	vmov	s13, r1
 8013784:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013788:	ee67 7a27 	vmul.f32	s15, s14, s15
 801378c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013790:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013798:	f300 8562 	bgt.w	8014260 <MEMS_runMagCal+0x1c20>
 801379c:	ee06 5a10 	vmov	s12, r5
 80137a0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80137a4:	eef4 7ac6 	vcmpe.f32	s15, s12
 80137a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ac:	f100 8558 	bmi.w	8014260 <MEMS_runMagCal+0x1c20>
 80137b0:	ee05 6a90 	vmov	s11, r6
 80137b4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80137b8:	eef4 7ae5 	vcmpe.f32	s15, s11
 80137bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137c0:	f100 854e 	bmi.w	8014260 <MEMS_runMagCal+0x1c20>
 80137c4:	428d      	cmp	r5, r1
 80137c6:	462b      	mov	r3, r5
 80137c8:	bfb8      	it	lt
 80137ca:	460b      	movlt	r3, r1
 80137cc:	42b3      	cmp	r3, r6
 80137ce:	461a      	mov	r2, r3
 80137d0:	bfb8      	it	lt
 80137d2:	4632      	movlt	r2, r6
 80137d4:	428e      	cmp	r6, r1
 80137d6:	4633      	mov	r3, r6
 80137d8:	bfa8      	it	ge
 80137da:	460b      	movge	r3, r1
 80137dc:	42ab      	cmp	r3, r5
 80137de:	bfa8      	it	ge
 80137e0:	462b      	movge	r3, r5
 80137e2:	428a      	cmp	r2, r1
 80137e4:	9202      	str	r2, [sp, #8]
 80137e6:	f340 8588 	ble.w	80142fa <MEMS_runMagCal+0x1cba>
 80137ea:	4299      	cmp	r1, r3
 80137ec:	bfb8      	it	lt
 80137ee:	4619      	movlt	r1, r3
 80137f0:	42aa      	cmp	r2, r5
 80137f2:	dd02      	ble.n	80137fa <MEMS_runMagCal+0x11ba>
 80137f4:	42ab      	cmp	r3, r5
 80137f6:	bfb8      	it	lt
 80137f8:	4629      	movlt	r1, r5
 80137fa:	9a02      	ldr	r2, [sp, #8]
 80137fc:	4296      	cmp	r6, r2
 80137fe:	da02      	bge.n	8013806 <MEMS_runMagCal+0x11c6>
 8013800:	429e      	cmp	r6, r3
 8013802:	bfc8      	it	gt
 8013804:	4631      	movgt	r1, r6
 8013806:	f1b8 0f00 	cmp.w	r8, #0
 801380a:	f000 8299 	beq.w	8013d40 <MEMS_runMagCal+0x1700>
 801380e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013816:	dc0d      	bgt.n	8013834 <MEMS_runMagCal+0x11f4>
 8013818:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013820:	dc08      	bgt.n	8013834 <MEMS_runMagCal+0x11f4>
 8013822:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801382a:	bfcc      	ite	gt
 801382c:	f04f 0801 	movgt.w	r8, #1
 8013830:	f04f 0800 	movle.w	r8, #0
 8013834:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8013698 <MEMS_runMagCal+0x1058>
 8013838:	ed9d 5a02 	vldr	s10, [sp, #8]
 801383c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013840:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013844:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801384c:	f2c0 8558 	blt.w	8014300 <MEMS_runMagCal+0x1cc0>
 8013850:	ee07 1a90 	vmov	s15, r1
 8013854:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013858:	ee27 5a05 	vmul.f32	s10, s14, s10
 801385c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013860:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013868:	f2c0 854a 	blt.w	8014300 <MEMS_runMagCal+0x1cc0>
 801386c:	9a02      	ldr	r2, [sp, #8]
 801386e:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8013872:	f280 8545 	bge.w	8014300 <MEMS_runMagCal+0x1cc0>
 8013876:	ee07 3a90 	vmov	s15, r3
 801387a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801387e:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8013882:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801388a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801388e:	f140 8537 	bpl.w	8014300 <MEMS_runMagCal+0x1cc0>
 8013892:	9b06      	ldr	r3, [sp, #24]
 8013894:	4553      	cmp	r3, sl
 8013896:	f000 8569 	beq.w	801436c <MEMS_runMagCal+0x1d2c>
 801389a:	461a      	mov	r2, r3
 801389c:	9b04      	ldr	r3, [sp, #16]
 801389e:	1a9b      	subs	r3, r3, r2
 80138a0:	fb93 f7f9 	sdiv	r7, r3, r9
 80138a4:	fb09 3717 	mls	r7, r9, r7, r3
 80138a8:	2f00      	cmp	r7, #0
 80138aa:	bfb8      	it	lt
 80138ac:	4457      	addlt	r7, sl
 80138ae:	b23f      	sxth	r7, r7
 80138b0:	9b03      	ldr	r3, [sp, #12]
 80138b2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80138b6:	b27f      	sxtb	r7, r7
 80138b8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80138bc:	9304      	str	r3, [sp, #16]
 80138be:	f1c7 0e01 	rsb	lr, r7, #1
 80138c2:	469c      	mov	ip, r3
 80138c4:	463b      	mov	r3, r7
 80138c6:	fb93 f1f9 	sdiv	r1, r3, r9
 80138ca:	fb09 3111 	mls	r1, r9, r1, r3
 80138ce:	b24a      	sxtb	r2, r1
 80138d0:	2a00      	cmp	r2, #0
 80138d2:	f107 0701 	add.w	r7, r7, #1
 80138d6:	bfb8      	it	lt
 80138d8:	eb0a 0201 	addlt.w	r2, sl, r1
 80138dc:	fb97 f3f9 	sdiv	r3, r7, r9
 80138e0:	fb09 7313 	mls	r3, r9, r3, r7
 80138e4:	bfb8      	it	lt
 80138e6:	b252      	sxtblt	r2, r2
 80138e8:	b25b      	sxtb	r3, r3
 80138ea:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80138ee:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 80138f2:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 80138f6:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 80138fa:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 80138fe:	1a45      	subs	r5, r0, r1
 8013900:	bf48      	it	mi
 8013902:	1a09      	submi	r1, r1, r0
 8013904:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8013908:	bf4c      	ite	mi
 801390a:	b20d      	sxthmi	r5, r1
 801390c:	b22d      	sxthpl	r5, r5
 801390e:	1a21      	subs	r1, r4, r0
 8013910:	bf48      	it	mi
 8013912:	1b01      	submi	r1, r0, r4
 8013914:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8013918:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 801391c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8013920:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8013924:	1a9b      	subs	r3, r3, r2
 8013926:	1a26      	subs	r6, r4, r0
 8013928:	b21b      	sxth	r3, r3
 801392a:	bf48      	it	mi
 801392c:	1b06      	submi	r6, r0, r4
 801392e:	2b00      	cmp	r3, #0
 8013930:	b209      	sxth	r1, r1
 8013932:	b236      	sxth	r6, r6
 8013934:	dd20      	ble.n	8013978 <MEMS_runMagCal+0x1338>
 8013936:	4429      	add	r1, r5
 8013938:	440e      	add	r6, r1
 801393a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801393e:	fb02 f606 	mul.w	r6, r2, r6
 8013942:	ee07 6a90 	vmov	s15, r6
 8013946:	ee07 3a10 	vmov	s14, r3
 801394a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801394e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013952:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013956:	f10c 0c01 	add.w	ip, ip, #1
 801395a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801395e:	fa5f fc8c 	uxtb.w	ip, ip
 8013962:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013966:	ee17 3a90 	vmov	r3, s15
 801396a:	b21b      	sxth	r3, r3
 801396c:	2b96      	cmp	r3, #150	; 0x96
 801396e:	dd03      	ble.n	8013978 <MEMS_runMagCal+0x1338>
 8013970:	9b04      	ldr	r3, [sp, #16]
 8013972:	3301      	adds	r3, #1
 8013974:	b2db      	uxtb	r3, r3
 8013976:	9304      	str	r3, [sp, #16]
 8013978:	eb0e 0307 	add.w	r3, lr, r7
 801397c:	b2db      	uxtb	r3, r3
 801397e:	4598      	cmp	r8, r3
 8013980:	d8a0      	bhi.n	80138c4 <MEMS_runMagCal+0x1284>
 8013982:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8013986:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801398a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801398e:	4563      	cmp	r3, ip
 8013990:	f340 820c 	ble.w	8013dac <MEMS_runMagCal+0x176c>
 8013994:	9b07      	ldr	r3, [sp, #28]
 8013996:	b92b      	cbnz	r3, 80139a4 <MEMS_runMagCal+0x1364>
 8013998:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 801399c:	3b02      	subs	r3, #2
 801399e:	2b01      	cmp	r3, #1
 80139a0:	f240 851e 	bls.w	80143e0 <MEMS_runMagCal+0x1da0>
 80139a4:	ac25      	add	r4, sp, #148	; 0x94
 80139a6:	2220      	movs	r2, #32
 80139a8:	4620      	mov	r0, r4
 80139aa:	2100      	movs	r1, #0
 80139ac:	f003 fb34 	bl	8017018 <memset>
 80139b0:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 80139b4:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 80139b8:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80139bc:	2200      	movs	r2, #0
 80139be:	4286      	cmp	r6, r0
 80139c0:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 80139c4:	921f      	str	r2, [sp, #124]	; 0x7c
 80139c6:	f103 0301 	add.w	r3, r3, #1
 80139ca:	f000 8501 	beq.w	80143d0 <MEMS_runMagCal+0x1d90>
 80139ce:	1b9b      	subs	r3, r3, r6
 80139d0:	fb93 f2f0 	sdiv	r2, r3, r0
 80139d4:	fb00 3312 	mls	r3, r0, r2, r3
 80139d8:	2b00      	cmp	r3, #0
 80139da:	bfb8      	it	lt
 80139dc:	181b      	addlt	r3, r3, r0
 80139de:	b21a      	sxth	r2, r3
 80139e0:	2e00      	cmp	r6, #0
 80139e2:	f000 854c 	beq.w	801447e <MEMS_runMagCal+0x1e3e>
 80139e6:	1e77      	subs	r7, r6, #1
 80139e8:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 801369c <MEMS_runMagCal+0x105c>
 80139ec:	b2fd      	uxtb	r5, r7
 80139ee:	3501      	adds	r5, #1
 80139f0:	eeb0 5a65 	vmov.f32	s10, s11
 80139f4:	eef0 4a65 	vmov.f32	s9, s11
 80139f8:	4415      	add	r5, r2
 80139fa:	4611      	mov	r1, r2
 80139fc:	fb91 f3f0 	sdiv	r3, r1, r0
 8013a00:	fb00 1313 	mls	r3, r0, r3, r1
 8013a04:	b2db      	uxtb	r3, r3
 8013a06:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013a0a:	3101      	adds	r1, #1
 8013a0c:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8013a10:	ee06 ca90 	vmov	s13, ip
 8013a14:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8013a18:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013a1c:	ee07 ca10 	vmov	s14, ip
 8013a20:	ee07 3a90 	vmov	s15, r3
 8013a24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013a28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a30:	42a9      	cmp	r1, r5
 8013a32:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8013a36:	ee35 5a07 	vadd.f32	s10, s10, s14
 8013a3a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8013a3e:	d1dd      	bne.n	80139fc <MEMS_runMagCal+0x13bc>
 8013a40:	ee07 6a90 	vmov	s15, r6
 8013a44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013a4c:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8013a50:	b2f9      	uxtb	r1, r7
 8013a52:	3101      	adds	r1, #1
 8013a54:	4411      	add	r1, r2
 8013a56:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 8013e04 <MEMS_runMagCal+0x17c4>
 8013a5a:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 8013a5e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8013a62:	ee29 aa85 	vmul.f32	s20, s19, s10
 8013a66:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8013a6a:	eef0 4a46 	vmov.f32	s9, s12
 8013a6e:	eeb0 4a46 	vmov.f32	s8, s12
 8013a72:	eef0 3a46 	vmov.f32	s7, s12
 8013a76:	eeb0 3a46 	vmov.f32	s6, s12
 8013a7a:	eef0 2a46 	vmov.f32	s5, s12
 8013a7e:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8013a82:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 8013a86:	fb92 f3f0 	sdiv	r3, r2, r0
 8013a8a:	fb00 2313 	mls	r3, r0, r3, r2
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013a94:	3201      	adds	r2, #1
 8013a96:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 8013a9a:	ee06 5a90 	vmov	s13, r5
 8013a9e:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013aa2:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013aa6:	ee07 5a10 	vmov	s14, r5
 8013aaa:	ee07 3a90 	vmov	s15, r3
 8013aae:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013ab2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013aba:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8013abe:	ee37 7a4a 	vsub.f32	s14, s14, s20
 8013ac2:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8013ac6:	4291      	cmp	r1, r2
 8013ac8:	eee6 2aa6 	vfma.f32	s5, s13, s13
 8013acc:	eea6 3a87 	vfma.f32	s6, s13, s14
 8013ad0:	eea7 4a07 	vfma.f32	s8, s14, s14
 8013ad4:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8013ad8:	eee7 4a27 	vfma.f32	s9, s14, s15
 8013adc:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8013ae0:	d1d1      	bne.n	8013a86 <MEMS_runMagCal+0x1446>
 8013ae2:	edc4 2a00 	vstr	s5, [r4]
 8013ae6:	ed84 3a01 	vstr	s6, [r4, #4]
 8013aea:	edc4 3a02 	vstr	s7, [r4, #8]
 8013aee:	ed84 4a03 	vstr	s8, [r4, #12]
 8013af2:	edc4 4a04 	vstr	s9, [r4, #16]
 8013af6:	ed84 6a05 	vstr	s12, [r4, #20]
 8013afa:	a91a      	add	r1, sp, #104	; 0x68
 8013afc:	4620      	mov	r0, r4
 8013afe:	f7fe fce5 	bl	80124cc <MEMS_EIG3>
 8013b02:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8013b06:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 8013b0a:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 8013b0e:	eef0 5ae4 	vabs.f32	s11, s9
 8013b12:	eef0 6ac6 	vabs.f32	s13, s12
 8013b16:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b1e:	bf8c      	ite	hi
 8013b20:	eef0 7a65 	vmovhi.f32	s15, s11
 8013b24:	eef0 7a66 	vmovls.f32	s15, s13
 8013b28:	eeb0 7ac5 	vabs.f32	s14, s10
 8013b2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b34:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013b38:	bf88      	it	hi
 8013b3a:	eef0 7a47 	vmovhi.f32	s15, s14
 8013b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b42:	bfb8      	it	lt
 8013b44:	eef0 6a65 	vmovlt.f32	s13, s11
 8013b48:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013b4c:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8013b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b54:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8013b58:	bfb8      	it	lt
 8013b5a:	eeb0 7a66 	vmovlt.f32	s14, s13
 8013b5e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b66:	f300 8420 	bgt.w	80143aa <MEMS_runMagCal+0x1d6a>
 8013b6a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8013b6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013b72:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b7e:	dd02      	ble.n	8013b86 <MEMS_runMagCal+0x1546>
 8013b80:	2b22      	cmp	r3, #34	; 0x22
 8013b82:	f240 8412 	bls.w	80143aa <MEMS_runMagCal+0x1d6a>
 8013b86:	ee76 7a24 	vadd.f32	s15, s12, s9
 8013b8a:	ee07 3a10 	vmov	s14, r3
 8013b8e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013b92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b96:	eddf 6a90 	vldr	s13, [pc, #576]	; 8013dd8 <MEMS_runMagCal+0x1798>
 8013b9a:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8013b9e:	eef1 7ac6 	vsqrt.f32	s15, s12
 8013ba2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013ba6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bae:	f300 83fc 	bgt.w	80143aa <MEMS_runMagCal+0x1d6a>
 8013bb2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8013bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bbe:	f100 83f4 	bmi.w	80143aa <MEMS_runMagCal+0x1d6a>
 8013bc2:	eddf 7a86 	vldr	s15, [pc, #536]	; 8013ddc <MEMS_runMagCal+0x179c>
 8013bc6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8013bca:	2300      	movs	r3, #0
 8013bcc:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8013bd0:	932c      	str	r3, [sp, #176]	; 0xb0
 8013bd2:	eddd 7a02 	vldr	s15, [sp, #8]
 8013bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be2:	d408      	bmi.n	8013bf6 <MEMS_runMagCal+0x15b6>
 8013be4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013be8:	ee17 3a10 	vmov	r3, s14
 8013bec:	b21b      	sxth	r3, r3
 8013bee:	ee07 3a90 	vmov	s15, r3
 8013bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013bf6:	eddf 6a81 	vldr	s13, [pc, #516]	; 8013dfc <MEMS_runMagCal+0x17bc>
 8013bfa:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8013bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c06:	dc08      	bgt.n	8013c1a <MEMS_runMagCal+0x15da>
 8013c08:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8013c0c:	ee17 3a10 	vmov	r3, s14
 8013c10:	b21b      	sxth	r3, r3
 8013c12:	ee07 3a90 	vmov	s15, r3
 8013c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c1a:	ee27 7a88 	vmul.f32	s14, s15, s16
 8013c1e:	eddf 7a70 	vldr	s15, [pc, #448]	; 8013de0 <MEMS_runMagCal+0x17a0>
 8013c22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c2a:	f340 8424 	ble.w	8014476 <MEMS_runMagCal+0x1e36>
 8013c2e:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8013de4 <MEMS_runMagCal+0x17a4>
 8013c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c3a:	f140 841c 	bpl.w	8014476 <MEMS_runMagCal+0x1e36>
 8013c3e:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8013de8 <MEMS_runMagCal+0x17a8>
 8013c42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c46:	eee7 7a26 	vfma.f32	s15, s14, s13
 8013c4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013c4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c52:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8013dfc <MEMS_runMagCal+0x17bc>
 8013c56:	eddf ba6b 	vldr	s23, [pc, #428]	; 8013e04 <MEMS_runMagCal+0x17c4>
 8013c5a:	ed9f ba64 	vldr	s22, [pc, #400]	; 8013dec <MEMS_runMagCal+0x17ac>
 8013c5e:	eddf aa64 	vldr	s21, [pc, #400]	; 8013df0 <MEMS_runMagCal+0x17b0>
 8013c62:	9d03      	ldr	r5, [sp, #12]
 8013c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013c68:	ee68 4a09 	vmul.f32	s9, s16, s18
 8013c6c:	ee28 aa0a 	vmul.f32	s20, s16, s20
 8013c70:	ee68 9a29 	vmul.f32	s19, s16, s19
 8013c74:	edc4 4a00 	vstr	s9, [r4]
 8013c78:	ed84 aa01 	vstr	s20, [r4, #4]
 8013c7c:	edc4 9a02 	vstr	s19, [r4, #8]
 8013c80:	edc4 7a03 	vstr	s15, [r4, #12]
 8013c84:	edc4 7a06 	vstr	s15, [r4, #24]
 8013c88:	ab11      	add	r3, sp, #68	; 0x44
 8013c8a:	ee1c 0a10 	vmov	r0, s24
 8013c8e:	aa2d      	add	r2, sp, #180	; 0xb4
 8013c90:	eeb0 0a48 	vmov.f32	s0, s16
 8013c94:	4621      	mov	r1, r4
 8013c96:	f7fe fa01 	bl	801209c <MEMS_SolveLinearEq>
 8013c9a:	1c6b      	adds	r3, r5, #1
 8013c9c:	2800      	cmp	r0, #0
 8013c9e:	f43e aed1 	beq.w	8012a44 <MEMS_runMagCal+0x404>
 8013ca2:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 8013ca6:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 8013caa:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 8013cae:	edd4 4a00 	vldr	s9, [r4]
 8013cb2:	ed94 5a01 	vldr	s10, [r4, #4]
 8013cb6:	edd4 5a02 	vldr	s11, [r4, #8]
 8013cba:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8013cbe:	ed94 6a03 	vldr	s12, [r4, #12]
 8013cc2:	eef0 6ae3 	vabs.f32	s13, s7
 8013cc6:	eef0 7ac3 	vabs.f32	s15, s6
 8013cca:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd2:	bfb8      	it	lt
 8013cd4:	eef0 7a66 	vmovlt.f32	s15, s13
 8013cd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ce0:	bfb8      	it	lt
 8013ce2:	eef0 7a6b 	vmovlt.f32	s15, s23
 8013ce6:	eef0 6ac4 	vabs.f32	s13, s8
 8013cea:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cf2:	bfb8      	it	lt
 8013cf4:	eef0 6a67 	vmovlt.f32	s13, s15
 8013cf8:	ee74 4a83 	vadd.f32	s9, s9, s6
 8013cfc:	ee35 5a23 	vadd.f32	s10, s10, s7
 8013d00:	ee75 5a84 	vadd.f32	s11, s11, s8
 8013d04:	ee36 6a07 	vadd.f32	s12, s12, s14
 8013d08:	eef4 6acb 	vcmpe.f32	s13, s22
 8013d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d10:	edc4 4a00 	vstr	s9, [r4]
 8013d14:	ed84 5a01 	vstr	s10, [r4, #4]
 8013d18:	edc4 5a02 	vstr	s11, [r4, #8]
 8013d1c:	ed84 6a03 	vstr	s12, [r4, #12]
 8013d20:	eef0 7ac7 	vabs.f32	s15, s14
 8013d24:	d507      	bpl.n	8013d36 <MEMS_runMagCal+0x16f6>
 8013d26:	eef4 7aea 	vcmpe.f32	s15, s21
 8013d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d2e:	d502      	bpl.n	8013d36 <MEMS_runMagCal+0x16f6>
 8013d30:	2d01      	cmp	r5, #1
 8013d32:	f63e ae8b 	bhi.w	8012a4c <MEMS_runMagCal+0x40c>
 8013d36:	b2dd      	uxtb	r5, r3
 8013d38:	2d05      	cmp	r5, #5
 8013d3a:	d1a5      	bne.n	8013c88 <MEMS_runMagCal+0x1648>
 8013d3c:	f7fe be86 	b.w	8012a4c <MEMS_runMagCal+0x40c>
 8013d40:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8013d44:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8013d48:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 8013d4c:	ed9f 4a29 	vldr	s8, [pc, #164]	; 8013df4 <MEMS_runMagCal+0x17b4>
 8013d50:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8013d54:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 8013d58:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013d5c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8013d60:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013d64:	eef4 7ae4 	vcmpe.f32	s15, s9
 8013d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d6c:	bf88      	it	hi
 8013d6e:	eef0 7a64 	vmovhi.f32	s15, s9
 8013d72:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7a:	bfb8      	it	lt
 8013d7c:	eef0 7a45 	vmovlt.f32	s15, s10
 8013d80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013d84:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d8c:	dc0e      	bgt.n	8013dac <MEMS_runMagCal+0x176c>
 8013d8e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013d92:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d9a:	dc07      	bgt.n	8013dac <MEMS_runMagCal+0x176c>
 8013d9c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da8:	f77f ad73 	ble.w	8013892 <MEMS_runMagCal+0x1252>
 8013dac:	2300      	movs	r3, #0
 8013dae:	f88b 3000 	strb.w	r3, [fp]
 8013db2:	f7ff b880 	b.w	8012eb6 <MEMS_runMagCal+0x876>
 8013db6:	2300      	movs	r3, #0
 8013db8:	9307      	str	r3, [sp, #28]
 8013dba:	2301      	movs	r3, #1
 8013dbc:	9303      	str	r3, [sp, #12]
 8013dbe:	f7ff bb61 	b.w	8013484 <MEMS_runMagCal+0xe44>
 8013dc2:	3301      	adds	r3, #1
 8013dc4:	fb93 f2f7 	sdiv	r2, r3, r7
 8013dc8:	fb07 3212 	mls	r2, r7, r2, r3
 8013dcc:	930b      	str	r3, [sp, #44]	; 0x2c
 8013dce:	b212      	sxth	r2, r2
 8013dd0:	46bc      	mov	ip, r7
 8013dd2:	f7ff bb75 	b.w	80134c0 <MEMS_runMagCal+0xe80>
 8013dd6:	bf00      	nop
 8013dd8:	42960000 	.word	0x42960000
 8013ddc:	430d0000 	.word	0x430d0000
 8013de0:	41966667 	.word	0x41966667
 8013de4:	433c0000 	.word	0x433c0000
 8013de8:	3c2e4c41 	.word	0x3c2e4c41
 8013dec:	3e99999a 	.word	0x3e99999a
 8013df0:	3f666666 	.word	0x3f666666
 8013df4:	3eaaaaab 	.word	0x3eaaaaab
 8013df8:	358637bd 	.word	0x358637bd
 8013dfc:	423c0000 	.word	0x423c0000
 8013e00:	3a83126f 	.word	0x3a83126f
 8013e04:	00000000 	.word	0x00000000
 8013e08:	eddd 7a08 	vldr	s15, [sp, #32]
 8013e0c:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8013e00 <MEMS_runMagCal+0x17c0>
 8013e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e14:	ee07 3a10 	vmov	s14, r3
 8013e18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013e1c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013e20:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013e24:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013e28:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e30:	f63f aa67 	bhi.w	8013302 <MEMS_runMagCal+0xcc2>
 8013e34:	9b07      	ldr	r3, [sp, #28]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	f43f a83d 	beq.w	8012eb6 <MEMS_runMagCal+0x876>
 8013e3c:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8013e40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013e44:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8013e48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e4c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e54:	bf4c      	ite	mi
 8013e56:	2301      	movmi	r3, #1
 8013e58:	2300      	movpl	r3, #0
 8013e5a:	9307      	str	r3, [sp, #28]
 8013e5c:	f7ff ba55 	b.w	801330a <MEMS_runMagCal+0xcca>
 8013e60:	fb92 f1f0 	sdiv	r1, r2, r0
 8013e64:	fb00 2211 	mls	r2, r0, r1, r2
 8013e68:	b211      	sxth	r1, r2
 8013e6a:	4605      	mov	r5, r0
 8013e6c:	f7ff b8da 	b.w	8013024 <MEMS_runMagCal+0x9e4>
 8013e70:	2200      	movs	r2, #0
 8013e72:	23ff      	movs	r3, #255	; 0xff
 8013e74:	ee1c 0a10 	vmov	r0, s24
 8013e78:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013e7c:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8013e80:	eeb0 0a49 	vmov.f32	s0, s18
 8013e84:	4649      	mov	r1, r9
 8013e86:	f7f7 fd11 	bl	800b8ac <MEMS_updateMagBufferIndex>
 8013e8a:	f7ff b90b 	b.w	80130a4 <MEMS_runMagCal+0xa64>
 8013e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013e92:	fb03 f60c 	mul.w	r6, r3, ip
 8013e96:	fb03 f202 	mul.w	r2, r3, r2
 8013e9a:	fb03 f301 	mul.w	r3, r3, r1
 8013e9e:	ee06 6a90 	vmov	s13, r6
 8013ea2:	ee07 2a10 	vmov	s14, r2
 8013ea6:	ee07 3a90 	vmov	s15, r3
 8013eaa:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 8013df8 <MEMS_runMagCal+0x17b8>
 8013eae:	9e05      	ldr	r6, [sp, #20]
 8013eb0:	9400      	str	r4, [sp, #0]
 8013eb2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013eb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ebe:	ee66 6a86 	vmul.f32	s13, s13, s12
 8013ec2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013ec6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013eca:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8013ece:	e9c5 0001 	strd	r0, r0, [r5, #4]
 8013ed2:	e9c5 0003 	strd	r0, r0, [r5, #12]
 8013ed6:	e9c5 0005 	strd	r0, r0, [r5, #20]
 8013eda:	6028      	str	r0, [r5, #0]
 8013edc:	ed96 0a01 	vldr	s0, [r6, #4]
 8013ee0:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 8013ee4:	4642      	mov	r2, r8
 8013ee6:	ab0d      	add	r3, sp, #52	; 0x34
 8013ee8:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 8013eec:	ad0e      	add	r5, sp, #56	; 0x38
 8013eee:	ee1c 0a10 	vmov	r0, s24
 8013ef2:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8013ef6:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8013efa:	f7f7 fd79 	bl	800b9f0 <getMagStats.constprop.0>
 8013efe:	9500      	str	r5, [sp, #0]
 8013f00:	ed96 0a01 	vldr	s0, [r6, #4]
 8013f04:	ee1c 0a10 	vmov	r0, s24
 8013f08:	aa2d      	add	r2, sp, #180	; 0xb4
 8013f0a:	ab0d      	add	r3, sp, #52	; 0x34
 8013f0c:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8013f10:	f7f7 fd6e 	bl	800b9f0 <getMagStats.constprop.0>
 8013f14:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 8013dfc <MEMS_runMagCal+0x17bc>
 8013f18:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013f1c:	ed95 7a00 	vldr	s14, [r5]
 8013f20:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013f24:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8013f28:	eef0 7ae7 	vabs.f32	s15, s15
 8013f2c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f34:	d505      	bpl.n	8013f42 <MEMS_runMagCal+0x1902>
 8013f36:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f3e:	f100 81fa 	bmi.w	8014336 <MEMS_runMagCal+0x1cf6>
 8013f42:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8013f46:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f4e:	f140 81a8 	bpl.w	80142a2 <MEMS_runMagCal+0x1c62>
 8013f52:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f5a:	9b03      	ldr	r3, [sp, #12]
 8013f5c:	bfb8      	it	lt
 8013f5e:	2302      	movlt	r3, #2
 8013f60:	edd4 6a00 	vldr	s13, [r4]
 8013f64:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8013f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f74:	f57e af9f 	bpl.w	8012eb6 <MEMS_runMagCal+0x876>
 8013f78:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	f63e af9a 	bhi.w	8012eb6 <MEMS_runMagCal+0x876>
 8013f82:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f8a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f92:	d40e      	bmi.n	8013fb2 <MEMS_runMagCal+0x1972>
 8013f94:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8013f98:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fa0:	f140 80d4 	bpl.w	801414c <MEMS_runMagCal+0x1b0c>
 8013fa4:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 8013fa8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8013fac:	429a      	cmp	r2, r3
 8013fae:	f080 80cd 	bcs.w	801414c <MEMS_runMagCal+0x1b0c>
 8013fb2:	9b05      	ldr	r3, [sp, #20]
 8013fb4:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8013fb8:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 8013fbc:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8013fc0:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 8013fc4:	edd3 5a01 	vldr	s11, [r3, #4]
 8013fc8:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 8013fcc:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8013fd0:	1b8b      	subs	r3, r1, r6
 8013fd2:	eba0 0c07 	sub.w	ip, r0, r7
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	bfb8      	it	lt
 8013fda:	425b      	neglt	r3, r3
 8013fdc:	f1bc 0f00 	cmp.w	ip, #0
 8013fe0:	bfb8      	it	lt
 8013fe2:	f1cc 0c00 	rsblt	ip, ip, #0
 8013fe6:	4563      	cmp	r3, ip
 8013fe8:	bfb8      	it	lt
 8013fea:	4663      	movlt	r3, ip
 8013fec:	eba2 0c04 	sub.w	ip, r2, r4
 8013ff0:	f1bc 0f00 	cmp.w	ip, #0
 8013ff4:	b21b      	sxth	r3, r3
 8013ff6:	bfb8      	it	lt
 8013ff8:	f1cc 0c00 	rsblt	ip, ip, #0
 8013ffc:	4563      	cmp	r3, ip
 8013ffe:	bfb8      	it	lt
 8014000:	4663      	movlt	r3, ip
 8014002:	b21b      	sxth	r3, r3
 8014004:	ee07 3a90 	vmov	s15, r3
 8014008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801400c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014010:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014014:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801401c:	f140 8096 	bpl.w	801414c <MEMS_runMagCal+0x1b0c>
 8014020:	ee37 7a26 	vadd.f32	s14, s14, s13
 8014024:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8014028:	ee86 2a87 	vdiv.f32	s4, s13, s14
 801402c:	ee04 3a90 	vmov	s9, r3
 8014030:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 8014034:	ee05 3a10 	vmov	s10, r3
 8014038:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 801403c:	ee07 0a90 	vmov	s15, r0
 8014040:	ee05 3a90 	vmov	s11, r3
 8014044:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8014048:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801404c:	ee36 4a42 	vsub.f32	s8, s12, s4
 8014050:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014054:	ee06 3a10 	vmov	s12, r3
 8014058:	ee03 7a90 	vmov	s7, r7
 801405c:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8014060:	ee07 1a90 	vmov	s15, r1
 8014064:	ee00 3a90 	vmov	s1, r3
 8014068:	ee66 6a84 	vmul.f32	s13, s13, s8
 801406c:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 8014070:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8014074:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 8014078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801407c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8014080:	ee03 6a90 	vmov	s7, r6
 8014084:	eee2 6a22 	vfma.f32	s13, s4, s5
 8014088:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801408c:	ee07 2a90 	vmov	s15, r2
 8014090:	ee01 3a10 	vmov	s2, r3
 8014094:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014098:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 801409c:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 80140a0:	eee2 4a20 	vfma.f32	s9, s4, s1
 80140a4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80140a8:	ee01 3a90 	vmov	s3, r3
 80140ac:	ee25 5a04 	vmul.f32	s10, s10, s8
 80140b0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80140b4:	eea2 7a03 	vfma.f32	s14, s4, s6
 80140b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140bc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80140c0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80140c4:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80140c8:	ee03 4a90 	vmov	s7, r4
 80140cc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80140d0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80140d4:	ee65 5a84 	vmul.f32	s11, s11, s8
 80140d8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80140dc:	ee16 2a90 	vmov	r2, s13
 80140e0:	ee04 3a10 	vmov	s8, r3
 80140e4:	eea2 5a01 	vfma.f32	s10, s4, s2
 80140e8:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 80140ec:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 80140f0:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 80140f4:	eee2 7a23 	vfma.f32	s15, s4, s7
 80140f8:	ee14 2a90 	vmov	r2, s9
 80140fc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014100:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8014104:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014108:	eee2 5a21 	vfma.f32	s11, s4, s3
 801410c:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8014110:	eea2 6a04 	vfma.f32	s12, s4, s8
 8014114:	ee17 2a10 	vmov	r2, s14
 8014118:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 801411c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014120:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 8014124:	ee15 2a10 	vmov	r2, s10
 8014128:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 801412c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8014130:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 8014134:	ee17 2a90 	vmov	r2, s15
 8014138:	ee16 3a10 	vmov	r3, s12
 801413c:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8014140:	ee15 2a90 	vmov	r2, s11
 8014144:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8014148:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 801414c:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801414e:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 8014152:	f7fe bda2 	b.w	8012c9a <MEMS_runMagCal+0x65a>
 8014156:	ee1c 0a10 	vmov	r0, s24
 801415a:	eeb0 0a49 	vmov.f32	s0, s18
 801415e:	4649      	mov	r1, r9
 8014160:	f7f7 fba4 	bl	800b8ac <MEMS_updateMagBufferIndex>
 8014164:	f7ff b89f 	b.w	80132a6 <MEMS_runMagCal+0xc66>
 8014168:	eddd 7a08 	vldr	s15, [sp, #32]
 801416c:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8013e00 <MEMS_runMagCal+0x17c0>
 8014170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014178:	e660      	b.n	8013e3c <MEMS_runMagCal+0x17fc>
 801417a:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 8013e04 <MEMS_runMagCal+0x17c4>
 801417e:	1c6b      	adds	r3, r5, #1
 8014180:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014184:	ad0e      	add	r5, sp, #56	; 0x38
 8014186:	fb93 f1f6 	sdiv	r1, r3, r6
 801418a:	fa1f fc86 	uxth.w	ip, r6
 801418e:	fb06 3311 	mls	r3, r6, r1, r3
 8014192:	edc5 6a00 	vstr	s13, [r5]
 8014196:	2e00      	cmp	r6, #0
 8014198:	f000 80e1 	beq.w	801435e <MEMS_runMagCal+0x1d1e>
 801419c:	b29b      	uxth	r3, r3
 801419e:	f10c 3cff 	add.w	ip, ip, #4294967295
 80141a2:	1c58      	adds	r0, r3, #1
 80141a4:	eeb0 6a66 	vmov.f32	s12, s13
 80141a8:	fa10 fc8c 	uxtah	ip, r0, ip
 80141ac:	f241 2e5c 	movw	lr, #4700	; 0x125c
 80141b0:	4619      	mov	r1, r3
 80141b2:	e000      	b.n	80141b6 <MEMS_runMagCal+0x1b76>
 80141b4:	3001      	adds	r0, #1
 80141b6:	fbb1 f3f6 	udiv	r3, r1, r6
 80141ba:	fb06 1313 	mls	r3, r6, r3, r1
 80141be:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80141c2:	8a99      	ldrh	r1, [r3, #20]
 80141c4:	4571      	cmp	r1, lr
 80141c6:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 80141ca:	f1a3 031c 	sub.w	r3, r3, #28
 80141ce:	bf98      	it	ls
 80141d0:	ebae 0301 	subls.w	r3, lr, r1
 80141d4:	b29b      	uxth	r3, r3
 80141d6:	fb03 f303 	mul.w	r3, r3, r3
 80141da:	ee07 1a10 	vmov	s14, r1
 80141de:	ee07 3a90 	vmov	s15, r3
 80141e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80141e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141ea:	4584      	cmp	ip, r0
 80141ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80141f0:	ee36 6a07 	vadd.f32	s12, s12, s14
 80141f4:	4601      	mov	r1, r0
 80141f6:	d1dd      	bne.n	80141b4 <MEMS_runMagCal+0x1b74>
 80141f8:	ee07 4a90 	vmov	s15, r4
 80141fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014200:	eddf 5ae6 	vldr	s11, [pc, #920]	; 801459c <MEMS_runMagCal+0x1f5c>
 8014204:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 80145a0 <MEMS_runMagCal+0x1f60>
 8014208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801420c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014210:	eef1 7ac7 	vsqrt.f32	s15, s14
 8014214:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014218:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801421c:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8014220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014224:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014228:	edc5 7a00 	vstr	s15, [r5]
 801422c:	dd47      	ble.n	80142be <MEMS_runMagCal+0x1c7e>
 801422e:	eddf 7add 	vldr	s15, [pc, #884]	; 80145a4 <MEMS_runMagCal+0x1f64>
 8014232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014236:	2302      	movs	r3, #2
 8014238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801423c:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014240:	f77e aead 	ble.w	8012f9e <MEMS_runMagCal+0x95e>
 8014244:	2301      	movs	r3, #1
 8014246:	f88b 3001 	strb.w	r3, [fp, #1]
 801424a:	f7fe bea8 	b.w	8012f9e <MEMS_runMagCal+0x95e>
 801424e:	ee1c 0a10 	vmov	r0, s24
 8014252:	eeb0 0a49 	vmov.f32	s0, s18
 8014256:	4649      	mov	r1, r9
 8014258:	f7f7 fb28 	bl	800b8ac <MEMS_updateMagBufferIndex>
 801425c:	f7fe bf0d 	b.w	801307a <MEMS_runMagCal+0xa3a>
 8014260:	9b02      	ldr	r3, [sp, #8]
 8014262:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 8014266:	f8db 100c 	ldr.w	r1, [fp, #12]
 801426a:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 801426e:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 8014272:	4413      	add	r3, r2
 8014274:	4299      	cmp	r1, r3
 8014276:	f4bf ad99 	bcs.w	8013dac <MEMS_runMagCal+0x176c>
 801427a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801427c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014280:	fb03 f301 	mul.w	r3, r3, r1
 8014284:	3364      	adds	r3, #100	; 0x64
 8014286:	4293      	cmp	r3, r2
 8014288:	bf38      	it	cc
 801428a:	4613      	movcc	r3, r2
 801428c:	2200      	movs	r2, #0
 801428e:	f8cb 300c 	str.w	r3, [fp, #12]
 8014292:	f88b 2000 	strb.w	r2, [fp]
 8014296:	f7fe be0e 	b.w	8012eb6 <MEMS_runMagCal+0x876>
 801429a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801429e:	f7ff ba6f 	b.w	8013780 <MEMS_runMagCal+0x1140>
 80142a2:	9b03      	ldr	r3, [sp, #12]
 80142a4:	e65c      	b.n	8013f60 <MEMS_runMagCal+0x1920>
 80142a6:	4619      	mov	r1, r3
 80142a8:	9b02      	ldr	r3, [sp, #8]
 80142aa:	3301      	adds	r3, #1
 80142ac:	fb93 f2f1 	sdiv	r2, r3, r1
 80142b0:	fb01 3212 	mls	r2, r1, r2, r3
 80142b4:	9304      	str	r3, [sp, #16]
 80142b6:	b212      	sxth	r2, r2
 80142b8:	4689      	mov	r9, r1
 80142ba:	f7ff ba11 	b.w	80136e0 <MEMS_runMagCal+0x10a0>
 80142be:	eddf 7aba 	vldr	s15, [pc, #744]	; 80145a8 <MEMS_runMagCal+0x1f68>
 80142c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142ca:	eddf 7ab6 	vldr	s15, [pc, #728]	; 80145a4 <MEMS_runMagCal+0x1f64>
 80142ce:	d434      	bmi.n	801433a <MEMS_runMagCal+0x1cfa>
 80142d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80142d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142d8:	bfc4      	itt	gt
 80142da:	2301      	movgt	r3, #1
 80142dc:	f88b 3001 	strbgt.w	r3, [fp, #1]
 80142e0:	f7ff b892 	b.w	8013408 <MEMS_runMagCal+0xdc8>
 80142e4:	9b05      	ldr	r3, [sp, #20]
 80142e6:	f89b 1011 	ldrb.w	r1, [fp, #17]
 80142ea:	ed93 0a01 	vldr	s0, [r3, #4]
 80142ee:	f7fe bd84 	b.w	8012dfa <MEMS_runMagCal+0x7ba>
 80142f2:	2303      	movs	r3, #3
 80142f4:	9303      	str	r3, [sp, #12]
 80142f6:	f7fe bdd4 	b.w	8012ea2 <MEMS_runMagCal+0x862>
 80142fa:	4619      	mov	r1, r3
 80142fc:	f7ff ba78 	b.w	80137f0 <MEMS_runMagCal+0x11b0>
 8014300:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 8014304:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014308:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014310:	f73f ad4c 	bgt.w	8013dac <MEMS_runMagCal+0x176c>
 8014314:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014318:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014320:	f73f ad44 	bgt.w	8013dac <MEMS_runMagCal+0x176c>
 8014324:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014328:	eeb4 7ae5 	vcmpe.f32	s14, s11
 801432c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014330:	f77f aaaf 	ble.w	8013892 <MEMS_runMagCal+0x1252>
 8014334:	e53a      	b.n	8013dac <MEMS_runMagCal+0x176c>
 8014336:	2303      	movs	r3, #3
 8014338:	e612      	b.n	8013f60 <MEMS_runMagCal+0x1920>
 801433a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801433e:	2300      	movs	r3, #0
 8014340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014344:	f88b 3001 	strb.w	r3, [fp, #1]
 8014348:	f04f 0103 	mov.w	r1, #3
 801434c:	bfc8      	it	gt
 801434e:	2301      	movgt	r3, #1
 8014350:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 8014354:	bfc8      	it	gt
 8014356:	f88b 3001 	strbgt.w	r3, [fp, #1]
 801435a:	f7ff b858 	b.w	801340e <MEMS_runMagCal+0xdce>
 801435e:	2303      	movs	r3, #3
 8014360:	f88b c001 	strb.w	ip, [fp, #1]
 8014364:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014368:	f7ff b851 	b.w	801340e <MEMS_runMagCal+0xdce>
 801436c:	9b04      	ldr	r3, [sp, #16]
 801436e:	fb93 f7f9 	sdiv	r7, r3, r9
 8014372:	fb09 3717 	mls	r7, r9, r7, r3
 8014376:	b23f      	sxth	r7, r7
 8014378:	f7ff ba9a 	b.w	80138b0 <MEMS_runMagCal+0x1270>
 801437c:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80145ac <MEMS_runMagCal+0x1f6c>
 8014380:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8014384:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014388:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801438c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014390:	ee87 0a08 	vdiv.f32	s0, s14, s16
 8014394:	ee17 2a90 	vmov	r2, s15
 8014398:	b291      	uxth	r1, r2
 801439a:	b113      	cbz	r3, 80143a2 <MEMS_runMagCal+0x1d62>
 801439c:	3b01      	subs	r3, #1
 801439e:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80143a2:	ee1c 0a10 	vmov	r0, s24
 80143a6:	f7f7 fa81 	bl	800b8ac <MEMS_updateMagBufferIndex>
 80143aa:	eddd 7a08 	vldr	s15, [sp, #32]
 80143ae:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80143b2:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80145b0 <MEMS_runMagCal+0x1f70>
 80143b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80143ba:	f001 f825 	bl	8015408 <roundf>
 80143be:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80143c2:	2300      	movs	r3, #0
 80143c4:	ed8b 0a01 	vstr	s0, [fp, #4]
 80143c8:	f88b 3000 	strb.w	r3, [fp]
 80143cc:	f7fe bd73 	b.w	8012eb6 <MEMS_runMagCal+0x876>
 80143d0:	fb93 f2f6 	sdiv	r2, r3, r6
 80143d4:	fb06 3312 	mls	r3, r6, r2, r3
 80143d8:	b21a      	sxth	r2, r3
 80143da:	4630      	mov	r0, r6
 80143dc:	f7ff bb00 	b.w	80139e0 <MEMS_runMagCal+0x13a0>
 80143e0:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 80143e4:	f001 f810 	bl	8015408 <roundf>
 80143e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80143ec:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80143f0:	ee17 3a90 	vmov	r3, s15
 80143f4:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 80143f8:	f8a9 3000 	strh.w	r3, [r9]
 80143fc:	f001 f804 	bl	8015408 <roundf>
 8014400:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014404:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8014408:	ee17 3a90 	vmov	r3, s15
 801440c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8014410:	f000 fffa 	bl	8015408 <roundf>
 8014414:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014418:	ac0f      	add	r4, sp, #60	; 0x3c
 801441a:	ee17 5a90 	vmov	r5, s15
 801441e:	9400      	str	r4, [sp, #0]
 8014420:	ee1c 0a10 	vmov	r0, s24
 8014424:	4649      	mov	r1, r9
 8014426:	ab10      	add	r3, sp, #64	; 0x40
 8014428:	eeb0 0a48 	vmov.f32	s0, s16
 801442c:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8014430:	f8a9 5004 	strh.w	r5, [r9, #4]
 8014434:	f7f7 fadc 	bl	800b9f0 <getMagStats.constprop.0>
 8014438:	ed94 7a00 	vldr	s14, [r4]
 801443c:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80145b4 <MEMS_runMagCal+0x1f74>
 8014440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014448:	d50e      	bpl.n	8014468 <MEMS_runMagCal+0x1e28>
 801444a:	b968      	cbnz	r0, 8014468 <MEMS_runMagCal+0x1e28>
 801444c:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014450:	b32b      	cbz	r3, 801449e <MEMS_runMagCal+0x1e5e>
 8014452:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 8014456:	ee07 3a90 	vmov	s15, r3
 801445a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801445e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014466:	dc1a      	bgt.n	801449e <MEMS_runMagCal+0x1e5e>
 8014468:	2300      	movs	r3, #0
 801446a:	f8c9 3000 	str.w	r3, [r9]
 801446e:	f8a9 3004 	strh.w	r3, [r9, #4]
 8014472:	f7ff ba97 	b.w	80139a4 <MEMS_runMagCal+0x1364>
 8014476:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801447a:	f7ff bbea 	b.w	8013c52 <MEMS_runMagCal+0x1612>
 801447e:	eddf 9a4e 	vldr	s19, [pc, #312]	; 80145b8 <MEMS_runMagCal+0x1f78>
 8014482:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 8014486:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 801448a:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 801448e:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8014492:	ee29 aa8a 	vmul.f32	s20, s19, s20
 8014496:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801449a:	f7ff bb2e 	b.w	8013afa <MEMS_runMagCal+0x14ba>
 801449e:	eddd 7a08 	vldr	s15, [sp, #32]
 80144a2:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80144a6:	eddf 7a42 	vldr	s15, [pc, #264]	; 80145b0 <MEMS_runMagCal+0x1f70>
 80144aa:	2303      	movs	r3, #3
 80144ac:	ee20 0a27 	vmul.f32	s0, s0, s15
 80144b0:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80144b4:	e781      	b.n	80143ba <MEMS_runMagCal+0x1d7a>
 80144b6:	eddf 6a41 	vldr	s13, [pc, #260]	; 80145bc <MEMS_runMagCal+0x1f7c>
 80144ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80144be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c2:	f77e ab1b 	ble.w	8012afc <MEMS_runMagCal+0x4bc>
 80144c6:	f7fe bb21 	b.w	8012b0c <MEMS_runMagCal+0x4cc>
 80144ca:	2224      	movs	r2, #36	; 0x24
 80144cc:	2100      	movs	r1, #0
 80144ce:	a82d      	add	r0, sp, #180	; 0xb4
 80144d0:	f002 fda2 	bl	8017018 <memset>
 80144d4:	eddf 7a3a 	vldr	s15, [pc, #232]	; 80145c0 <MEMS_runMagCal+0x1f80>
 80144d8:	eec7 9a89 	vdiv.f32	s19, s15, s18
 80144dc:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 80144e0:	4627      	mov	r7, r4
 80144e2:	ae2d      	add	r6, sp, #180	; 0xb4
 80144e4:	2500      	movs	r5, #0
 80144e6:	3501      	adds	r5, #1
 80144e8:	ecb7 0a01 	vldmia	r7!, {s0}
 80144ec:	ee28 0a80 	vmul.f32	s0, s17, s0
 80144f0:	f000 ff8a 	bl	8015408 <roundf>
 80144f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80144f8:	4633      	mov	r3, r6
 80144fa:	edc3 9a00 	vstr	s19, [r3]
 80144fe:	ee10 3a10 	vmov	r3, s0
 8014502:	2d03      	cmp	r5, #3
 8014504:	f829 3b02 	strh.w	r3, [r9], #2
 8014508:	f106 0610 	add.w	r6, r6, #16
 801450c:	d1eb      	bne.n	80144e6 <MEMS_runMagCal+0x1ea6>
 801450e:	ad12      	add	r5, sp, #72	; 0x48
 8014510:	9500      	str	r5, [sp, #0]
 8014512:	ab2b      	add	r3, sp, #172	; 0xac
 8014514:	eeb0 0a48 	vmov.f32	s0, s16
 8014518:	ee1c 0a10 	vmov	r0, s24
 801451c:	a915      	add	r1, sp, #84	; 0x54
 801451e:	aa2d      	add	r2, sp, #180	; 0xb4
 8014520:	f7f7 fa66 	bl	800b9f0 <getMagStats.constprop.0>
 8014524:	eddf 3a26 	vldr	s7, [pc, #152]	; 80145c0 <MEMS_runMagCal+0x1f80>
 8014528:	ed94 4a03 	vldr	s8, [r4, #12]
 801452c:	edd5 7a00 	vldr	s15, [r5]
 8014530:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 8014534:	edd4 6a06 	vldr	s13, [r4, #24]
 8014538:	edd4 4a00 	vldr	s9, [r4]
 801453c:	ed94 5a01 	vldr	s10, [r4, #4]
 8014540:	edd4 5a02 	vldr	s11, [r4, #8]
 8014544:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014548:	ad2e      	add	r5, sp, #184	; 0xb8
 801454a:	2300      	movs	r3, #0
 801454c:	e9c5 3300 	strd	r3, r3, [r5]
 8014550:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8014554:	60ab      	str	r3, [r5, #8]
 8014556:	61ab      	str	r3, [r5, #24]
 8014558:	ee26 6a27 	vmul.f32	s12, s12, s15
 801455c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8014560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014564:	ee84 0a88 	vdiv.f32	s0, s9, s16
 8014568:	eec5 9a08 	vdiv.f32	s19, s10, s16
 801456c:	ee85 aa88 	vdiv.f32	s20, s11, s16
 8014570:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8014574:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014578:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 801457c:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8014580:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8014584:	d405      	bmi.n	8014592 <MEMS_runMagCal+0x1f52>
 8014586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801458e:	f57e aa9b 	bpl.w	8012ac8 <MEMS_runMagCal+0x488>
 8014592:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 80145c4 <MEMS_runMagCal+0x1f84>
 8014596:	f7fe ba9d 	b.w	8012ad4 <MEMS_runMagCal+0x494>
 801459a:	bf00      	nop
 801459c:	3c23d70a 	.word	0x3c23d70a
 80145a0:	4b095440 	.word	0x4b095440
 80145a4:	481c4000 	.word	0x481c4000
 80145a8:	471c4000 	.word	0x471c4000
 80145ac:	433d0000 	.word	0x433d0000
 80145b0:	3a83126f 	.word	0x3a83126f
 80145b4:	3ff4cccd 	.word	0x3ff4cccd
 80145b8:	7f800000 	.word	0x7f800000
 80145bc:	3ee66666 	.word	0x3ee66666
 80145c0:	423c0000 	.word	0x423c0000
 80145c4:	00000000 	.word	0x00000000
 80145c8:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 80145cc:	4293      	cmp	r3, r2
 80145ce:	f67e acac 	bls.w	8012f2a <MEMS_runMagCal+0x8ea>
 80145d2:	f7fe bca0 	b.w	8012f16 <MEMS_runMagCal+0x8d6>
 80145d6:	bf00      	nop

080145d8 <MotionFX_GetStateSize>:
 80145d8:	f44f 6018 	mov.w	r0, #2432	; 0x980
 80145dc:	4770      	bx	lr
 80145de:	bf00      	nop

080145e0 <MotionFX_initialize>:
 80145e0:	4a3b      	ldr	r2, [pc, #236]	; (80146d0 <MotionFX_initialize+0xf0>)
 80145e2:	493c      	ldr	r1, [pc, #240]	; (80146d4 <MotionFX_initialize+0xf4>)
 80145e4:	6813      	ldr	r3, [r2, #0]
 80145e6:	f023 0301 	bic.w	r3, r3, #1
 80145ea:	b530      	push	{r4, r5, lr}
 80145ec:	6013      	str	r3, [r2, #0]
 80145ee:	680b      	ldr	r3, [r1, #0]
 80145f0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80145f4:	4013      	ands	r3, r2
 80145f6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80145fa:	42ab      	cmp	r3, r5
 80145fc:	b085      	sub	sp, #20
 80145fe:	4604      	mov	r4, r0
 8014600:	d013      	beq.n	801462a <MotionFX_initialize+0x4a>
 8014602:	680b      	ldr	r3, [r1, #0]
 8014604:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014608:	4013      	ands	r3, r2
 801460a:	428b      	cmp	r3, r1
 801460c:	d00d      	beq.n	801462a <MotionFX_initialize+0x4a>
 801460e:	4b32      	ldr	r3, [pc, #200]	; (80146d8 <MotionFX_initialize+0xf8>)
 8014610:	2201      	movs	r2, #1
 8014612:	601a      	str	r2, [r3, #0]
 8014614:	681a      	ldr	r2, [r3, #0]
 8014616:	2a00      	cmp	r2, #0
 8014618:	d1fc      	bne.n	8014614 <MotionFX_initialize+0x34>
 801461a:	4b30      	ldr	r3, [pc, #192]	; (80146dc <MotionFX_initialize+0xfc>)
 801461c:	4a30      	ldr	r2, [pc, #192]	; (80146e0 <MotionFX_initialize+0x100>)
 801461e:	601a      	str	r2, [r3, #0]
 8014620:	681a      	ldr	r2, [r3, #0]
 8014622:	4b30      	ldr	r3, [pc, #192]	; (80146e4 <MotionFX_initialize+0x104>)
 8014624:	429a      	cmp	r2, r3
 8014626:	d01f      	beq.n	8014668 <MotionFX_initialize+0x88>
 8014628:	e7fe      	b.n	8014628 <MotionFX_initialize+0x48>
 801462a:	4b2f      	ldr	r3, [pc, #188]	; (80146e8 <MotionFX_initialize+0x108>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d1ed      	bne.n	801460e <MotionFX_initialize+0x2e>
 8014632:	4a2e      	ldr	r2, [pc, #184]	; (80146ec <MotionFX_initialize+0x10c>)
 8014634:	6813      	ldr	r3, [r2, #0]
 8014636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801463a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 801463e:	d006      	beq.n	801464e <MotionFX_initialize+0x6e>
 8014640:	6813      	ldr	r3, [r2, #0]
 8014642:	f240 4283 	movw	r2, #1155	; 0x483
 8014646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801464a:	4293      	cmp	r3, r2
 801464c:	d1df      	bne.n	801460e <MotionFX_initialize+0x2e>
 801464e:	4b28      	ldr	r3, [pc, #160]	; (80146f0 <MotionFX_initialize+0x110>)
 8014650:	2201      	movs	r2, #1
 8014652:	601a      	str	r2, [r3, #0]
 8014654:	681a      	ldr	r2, [r3, #0]
 8014656:	2a00      	cmp	r2, #0
 8014658:	d1fc      	bne.n	8014654 <MotionFX_initialize+0x74>
 801465a:	4b26      	ldr	r3, [pc, #152]	; (80146f4 <MotionFX_initialize+0x114>)
 801465c:	4a20      	ldr	r2, [pc, #128]	; (80146e0 <MotionFX_initialize+0x100>)
 801465e:	601a      	str	r2, [r3, #0]
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	4b20      	ldr	r3, [pc, #128]	; (80146e4 <MotionFX_initialize+0x104>)
 8014664:	429a      	cmp	r2, r3
 8014666:	d1df      	bne.n	8014628 <MotionFX_initialize+0x48>
 8014668:	4b23      	ldr	r3, [pc, #140]	; (80146f8 <MotionFX_initialize+0x118>)
 801466a:	4a24      	ldr	r2, [pc, #144]	; (80146fc <MotionFX_initialize+0x11c>)
 801466c:	9301      	str	r3, [sp, #4]
 801466e:	2501      	movs	r5, #1
 8014670:	4620      	mov	r0, r4
 8014672:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014676:	7115      	strb	r5, [r2, #4]
 8014678:	f7f7 faa0 	bl	800bbbc <MFX_emptyAttitude>
 801467c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014680:	a901      	add	r1, sp, #4
 8014682:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014686:	f7f6 fdc3 	bl	800b210 <updateOrientation>
 801468a:	a903      	add	r1, sp, #12
 801468c:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014690:	f7f6 fdbe 	bl	800b210 <updateOrientation>
 8014694:	a902      	add	r1, sp, #8
 8014696:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801469a:	f7f6 fdb9 	bl	800b210 <updateOrientation>
 801469e:	4818      	ldr	r0, [pc, #96]	; (8014700 <MotionFX_initialize+0x120>)
 80146a0:	4918      	ldr	r1, [pc, #96]	; (8014704 <MotionFX_initialize+0x124>)
 80146a2:	4a19      	ldr	r2, [pc, #100]	; (8014708 <MotionFX_initialize+0x128>)
 80146a4:	4b19      	ldr	r3, [pc, #100]	; (801470c <MotionFX_initialize+0x12c>)
 80146a6:	7365      	strb	r5, [r4, #13]
 80146a8:	4d19      	ldr	r5, [pc, #100]	; (8014710 <MotionFX_initialize+0x130>)
 80146aa:	62a0      	str	r0, [r4, #40]	; 0x28
 80146ac:	6361      	str	r1, [r4, #52]	; 0x34
 80146ae:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80146b2:	2100      	movs	r1, #0
 80146b4:	61a2      	str	r2, [r4, #24]
 80146b6:	61e3      	str	r3, [r4, #28]
 80146b8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80146bc:	f240 1301 	movw	r3, #257	; 0x101
 80146c0:	6225      	str	r5, [r4, #32]
 80146c2:	62e0      	str	r0, [r4, #44]	; 0x2c
 80146c4:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 80146c8:	80a2      	strh	r2, [r4, #4]
 80146ca:	81e3      	strh	r3, [r4, #14]
 80146cc:	b005      	add	sp, #20
 80146ce:	bd30      	pop	{r4, r5, pc}
 80146d0:	e0002000 	.word	0xe0002000
 80146d4:	e000ed00 	.word	0xe000ed00
 80146d8:	40023008 	.word	0x40023008
 80146dc:	40023000 	.word	0x40023000
 80146e0:	f407a5c2 	.word	0xf407a5c2
 80146e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80146e8:	e0042000 	.word	0xe0042000
 80146ec:	5c001000 	.word	0x5c001000
 80146f0:	58024c08 	.word	0x58024c08
 80146f4:	58024c00 	.word	0x58024c00
 80146f8:	00756e65 	.word	0x00756e65
 80146fc:	200002e0 	.word	0x200002e0
 8014700:	3f666666 	.word	0x3f666666
 8014704:	3f2ac083 	.word	0x3f2ac083
 8014708:	3a51b717 	.word	0x3a51b717
 801470c:	3a378034 	.word	0x3a378034
 8014710:	3b378034 	.word	0x3b378034

08014714 <MotionFX_setKnobs>:
 8014714:	4b23      	ldr	r3, [pc, #140]	; (80147a4 <MotionFX_setKnobs+0x90>)
 8014716:	791b      	ldrb	r3, [r3, #4]
 8014718:	b903      	cbnz	r3, 801471c <MotionFX_setKnobs+0x8>
 801471a:	4770      	bx	lr
 801471c:	2900      	cmp	r1, #0
 801471e:	d0fc      	beq.n	801471a <MotionFX_setKnobs+0x6>
 8014720:	b570      	push	{r4, r5, r6, lr}
 8014722:	4604      	mov	r4, r0
 8014724:	684a      	ldr	r2, [r1, #4]
 8014726:	6808      	ldr	r0, [r1, #0]
 8014728:	688b      	ldr	r3, [r1, #8]
 801472a:	6363      	str	r3, [r4, #52]	; 0x34
 801472c:	62a0      	str	r0, [r4, #40]	; 0x28
 801472e:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014730:	7b0b      	ldrb	r3, [r1, #12]
 8014732:	7163      	strb	r3, [r4, #5]
 8014734:	6908      	ldr	r0, [r1, #16]
 8014736:	694a      	ldr	r2, [r1, #20]
 8014738:	698b      	ldr	r3, [r1, #24]
 801473a:	6223      	str	r3, [r4, #32]
 801473c:	61e2      	str	r2, [r4, #28]
 801473e:	61a0      	str	r0, [r4, #24]
 8014740:	7f0b      	ldrb	r3, [r1, #28]
 8014742:	7123      	strb	r3, [r4, #4]
 8014744:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014748:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801474c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801474e:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014752:	460a      	mov	r2, r1
 8014754:	460b      	mov	r3, r1
 8014756:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 801475a:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 801475e:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014762:	7889      	ldrb	r1, [r1, #2]
 8014764:	7892      	ldrb	r2, [r2, #2]
 8014766:	789b      	ldrb	r3, [r3, #2]
 8014768:	b084      	sub	sp, #16
 801476a:	f88d 1006 	strb.w	r1, [sp, #6]
 801476e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014772:	a901      	add	r1, sp, #4
 8014774:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014778:	f88d 200a 	strb.w	r2, [sp, #10]
 801477c:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014780:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014784:	f88d 300e 	strb.w	r3, [sp, #14]
 8014788:	f7f6 fd42 	bl	800b210 <updateOrientation>
 801478c:	a903      	add	r1, sp, #12
 801478e:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014792:	f7f6 fd3d 	bl	800b210 <updateOrientation>
 8014796:	a902      	add	r1, sp, #8
 8014798:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801479c:	f7f6 fd38 	bl	800b210 <updateOrientation>
 80147a0:	b004      	add	sp, #16
 80147a2:	bd70      	pop	{r4, r5, r6, pc}
 80147a4:	200002e0 	.word	0x200002e0

080147a8 <MotionFX_getKnobs>:
 80147a8:	4b1c      	ldr	r3, [pc, #112]	; (801481c <MotionFX_getKnobs+0x74>)
 80147aa:	791b      	ldrb	r3, [r3, #4]
 80147ac:	b903      	cbnz	r3, 80147b0 <MotionFX_getKnobs+0x8>
 80147ae:	4770      	bx	lr
 80147b0:	460a      	mov	r2, r1
 80147b2:	2900      	cmp	r1, #0
 80147b4:	d0fb      	beq.n	80147ae <MotionFX_getKnobs+0x6>
 80147b6:	b510      	push	{r4, lr}
 80147b8:	4604      	mov	r4, r0
 80147ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80147bc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80147be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80147c0:	6093      	str	r3, [r2, #8]
 80147c2:	6010      	str	r0, [r2, #0]
 80147c4:	6051      	str	r1, [r2, #4]
 80147c6:	7963      	ldrb	r3, [r4, #5]
 80147c8:	7313      	strb	r3, [r2, #12]
 80147ca:	69a0      	ldr	r0, [r4, #24]
 80147cc:	69e1      	ldr	r1, [r4, #28]
 80147ce:	6a23      	ldr	r3, [r4, #32]
 80147d0:	6193      	str	r3, [r2, #24]
 80147d2:	6110      	str	r0, [r2, #16]
 80147d4:	6151      	str	r1, [r2, #20]
 80147d6:	7923      	ldrb	r3, [r4, #4]
 80147d8:	7713      	strb	r3, [r2, #28]
 80147da:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80147de:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 80147e2:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 80147e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80147e8:	f102 011d 	add.w	r1, r2, #29
 80147ec:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80147f0:	f7f6 fb66 	bl	800aec0 <findAxis>
 80147f4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 80147f8:	f102 0121 	add.w	r1, r2, #33	; 0x21
 80147fc:	f7f6 fb60 	bl	800aec0 <findAxis>
 8014800:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014804:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014808:	f7f6 fb5a 	bl	800aec0 <findAxis>
 801480c:	2300      	movs	r3, #0
 801480e:	f882 3020 	strb.w	r3, [r2, #32]
 8014812:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014816:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 801481a:	bd10      	pop	{r4, pc}
 801481c:	200002e0 	.word	0x200002e0

08014820 <MotionFX_enable_6X>:
 8014820:	4b0e      	ldr	r3, [pc, #56]	; (801485c <MotionFX_enable_6X+0x3c>)
 8014822:	791b      	ldrb	r3, [r3, #4]
 8014824:	b903      	cbnz	r3, 8014828 <MotionFX_enable_6X+0x8>
 8014826:	4770      	bx	lr
 8014828:	2900      	cmp	r1, #0
 801482a:	d0fc      	beq.n	8014826 <MotionFX_enable_6X+0x6>
 801482c:	b530      	push	{r4, r5, lr}
 801482e:	1d05      	adds	r5, r0, #4
 8014830:	b099      	sub	sp, #100	; 0x64
 8014832:	4604      	mov	r4, r0
 8014834:	4629      	mov	r1, r5
 8014836:	225c      	movs	r2, #92	; 0x5c
 8014838:	a801      	add	r0, sp, #4
 801483a:	f002 fbdf 	bl	8016ffc <memcpy>
 801483e:	4620      	mov	r0, r4
 8014840:	f7f7 f9bc 	bl	800bbbc <MFX_emptyAttitude>
 8014844:	a901      	add	r1, sp, #4
 8014846:	4628      	mov	r0, r5
 8014848:	225c      	movs	r2, #92	; 0x5c
 801484a:	f002 fbd7 	bl	8016ffc <memcpy>
 801484e:	2300      	movs	r3, #0
 8014850:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014854:	7363      	strb	r3, [r4, #13]
 8014856:	b019      	add	sp, #100	; 0x64
 8014858:	bd30      	pop	{r4, r5, pc}
 801485a:	bf00      	nop
 801485c:	200002e0 	.word	0x200002e0

08014860 <MotionFX_enable_9X>:
 8014860:	4b0e      	ldr	r3, [pc, #56]	; (801489c <MotionFX_enable_9X+0x3c>)
 8014862:	791b      	ldrb	r3, [r3, #4]
 8014864:	b903      	cbnz	r3, 8014868 <MotionFX_enable_9X+0x8>
 8014866:	4770      	bx	lr
 8014868:	2900      	cmp	r1, #0
 801486a:	d0fc      	beq.n	8014866 <MotionFX_enable_9X+0x6>
 801486c:	b530      	push	{r4, r5, lr}
 801486e:	1d05      	adds	r5, r0, #4
 8014870:	b099      	sub	sp, #100	; 0x64
 8014872:	4604      	mov	r4, r0
 8014874:	4629      	mov	r1, r5
 8014876:	225c      	movs	r2, #92	; 0x5c
 8014878:	a801      	add	r0, sp, #4
 801487a:	f002 fbbf 	bl	8016ffc <memcpy>
 801487e:	4620      	mov	r0, r4
 8014880:	f7f7 f99c 	bl	800bbbc <MFX_emptyAttitude>
 8014884:	a901      	add	r1, sp, #4
 8014886:	4628      	mov	r0, r5
 8014888:	225c      	movs	r2, #92	; 0x5c
 801488a:	f002 fbb7 	bl	8016ffc <memcpy>
 801488e:	2301      	movs	r3, #1
 8014890:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014894:	7363      	strb	r3, [r4, #13]
 8014896:	b019      	add	sp, #100	; 0x64
 8014898:	bd30      	pop	{r4, r5, pc}
 801489a:	bf00      	nop
 801489c:	200002e0 	.word	0x200002e0

080148a0 <MotionFX_update>:
 80148a0:	b470      	push	{r4, r5, r6}
 80148a2:	4c06      	ldr	r4, [pc, #24]	; (80148bc <MotionFX_update+0x1c>)
 80148a4:	9e03      	ldr	r6, [sp, #12]
 80148a6:	7925      	ldrb	r5, [r4, #4]
 80148a8:	b90d      	cbnz	r5, 80148ae <MotionFX_update+0xe>
 80148aa:	bc70      	pop	{r4, r5, r6}
 80148ac:	4770      	bx	lr
 80148ae:	461c      	mov	r4, r3
 80148b0:	ed94 0a00 	vldr	s0, [r4]
 80148b4:	4633      	mov	r3, r6
 80148b6:	bc70      	pop	{r4, r5, r6}
 80148b8:	f7fc bf02 	b.w	80116c0 <iNemoEngine_API_Update>
 80148bc:	200002e0 	.word	0x200002e0

080148c0 <MotionFX_propagate>:
 80148c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148c4:	ed2d 8b06 	vpush	{d8-d10}
 80148c8:	4ca3      	ldr	r4, [pc, #652]	; (8014b58 <MotionFX_propagate+0x298>)
 80148ca:	7927      	ldrb	r7, [r4, #4]
 80148cc:	b0a0      	sub	sp, #128	; 0x80
 80148ce:	b927      	cbnz	r7, 80148da <MotionFX_propagate+0x1a>
 80148d0:	b020      	add	sp, #128	; 0x80
 80148d2:	ecbd 8b06 	vpop	{d8-d10}
 80148d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80148da:	4616      	mov	r6, r2
 80148dc:	4604      	mov	r4, r0
 80148de:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 80148e2:	edd3 9a00 	vldr	s19, [r3]
 80148e6:	460d      	mov	r5, r1
 80148e8:	6851      	ldr	r1, [r2, #4]
 80148ea:	6892      	ldr	r2, [r2, #8]
 80148ec:	ab13      	add	r3, sp, #76	; 0x4c
 80148ee:	c307      	stmia	r3!, {r0, r1, r2}
 80148f0:	6830      	ldr	r0, [r6, #0]
 80148f2:	6871      	ldr	r1, [r6, #4]
 80148f4:	68b2      	ldr	r2, [r6, #8]
 80148f6:	ab10      	add	r3, sp, #64	; 0x40
 80148f8:	c307      	stmia	r3!, {r0, r1, r2}
 80148fa:	4637      	mov	r7, r6
 80148fc:	ab16      	add	r3, sp, #88	; 0x58
 80148fe:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8014902:	6879      	ldr	r1, [r7, #4]
 8014904:	68ba      	ldr	r2, [r7, #8]
 8014906:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 801490a:	c307      	stmia	r3!, {r0, r1, r2}
 801490c:	aa13      	add	r2, sp, #76	; 0x4c
 801490e:	4651      	mov	r1, sl
 8014910:	a803      	add	r0, sp, #12
 8014912:	f7f6 fa73 	bl	800adfc <rotVect>
 8014916:	aa16      	add	r2, sp, #88	; 0x58
 8014918:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801491c:	a806      	add	r0, sp, #24
 801491e:	f7f6 fa6d 	bl	800adfc <rotVect>
 8014922:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8014926:	2b09      	cmp	r3, #9
 8014928:	d829      	bhi.n	801497e <MotionFX_propagate+0xbe>
 801492a:	eddd 8a04 	vldr	s17, [sp, #16]
 801492e:	ed9d 9a03 	vldr	s18, [sp, #12]
 8014932:	ed9d 8a05 	vldr	s16, [sp, #20]
 8014936:	ee68 7aa8 	vmul.f32	s15, s17, s17
 801493a:	eee9 7a09 	vfma.f32	s15, s18, s18
 801493e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014942:	ee17 0a90 	vmov	r0, s15
 8014946:	f7eb fdff 	bl	8000548 <__aeabi_f2d>
 801494a:	ec41 0b10 	vmov	d0, r0, r1
 801494e:	f000 fded 	bl	801552c <sqrt>
 8014952:	ec51 0b10 	vmov	r0, r1, d0
 8014956:	f7ec f927 	bl	8000ba8 <__aeabi_d2f>
 801495a:	ee07 0a90 	vmov	s15, r0
 801495e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014962:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014966:	ee29 9a27 	vmul.f32	s18, s18, s15
 801496a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801496e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014972:	ed8d 9a03 	vstr	s18, [sp, #12]
 8014976:	edcd 8a04 	vstr	s17, [sp, #16]
 801497a:	ed8d 8a05 	vstr	s16, [sp, #20]
 801497e:	7923      	ldrb	r3, [r4, #4]
 8014980:	2b00      	cmp	r3, #0
 8014982:	f000 80d3 	beq.w	8014b2c <MotionFX_propagate+0x26c>
 8014986:	ee07 3a90 	vmov	s15, r3
 801498a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801498e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014992:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014996:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 801499a:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 801499e:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 80149a2:	edd2 7a00 	vldr	s15, [r2]
 80149a6:	eddd 8a06 	vldr	s17, [sp, #24]
 80149aa:	ed9d 6a07 	vldr	s12, [sp, #28]
 80149ae:	ed9d 8a08 	vldr	s16, [sp, #32]
 80149b2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8014b5c <MotionFX_propagate+0x29c>
 80149b6:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8014b60 <MotionFX_propagate+0x2a0>
 80149ba:	eee6 7aa8 	vfma.f32	s15, s13, s17
 80149be:	ee26 9a07 	vmul.f32	s18, s12, s14
 80149c2:	edc2 7a00 	vstr	s15, [r2]
 80149c6:	edd3 7a00 	vldr	s15, [r3]
 80149ca:	ed8d 9a07 	vstr	s18, [sp, #28]
 80149ce:	eee6 7a86 	vfma.f32	s15, s13, s12
 80149d2:	f604 1264 	addw	r2, r4, #2404	; 0x964
 80149d6:	ee68 8a87 	vmul.f32	s17, s17, s14
 80149da:	edc3 7a00 	vstr	s15, [r3]
 80149de:	edd2 7a00 	vldr	s15, [r2]
 80149e2:	edcd 8a06 	vstr	s17, [sp, #24]
 80149e6:	eee6 7a88 	vfma.f32	s15, s13, s16
 80149ea:	f604 1344 	addw	r3, r4, #2372	; 0x944
 80149ee:	ee28 8a07 	vmul.f32	s16, s16, s14
 80149f2:	edc2 7a00 	vstr	s15, [r2]
 80149f6:	edd3 7a00 	vldr	s15, [r3]
 80149fa:	ed8d 8a08 	vstr	s16, [sp, #32]
 80149fe:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8014a02:	ed93 7a00 	vldr	s14, [r3]
 8014a06:	ee39 9a67 	vsub.f32	s18, s18, s15
 8014a0a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8014a0e:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014a12:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8014a16:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014a1a:	ed93 7a00 	vldr	s14, [r3]
 8014a1e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8014a22:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014a26:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014a2a:	ee29 0a80 	vmul.f32	s0, s19, s0
 8014a2e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a36:	dd7e      	ble.n	8014b36 <MotionFX_propagate+0x276>
 8014a38:	eeb1 aae7 	vsqrt.f32	s20, s15
 8014a3c:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8014a40:	eeb0 0a69 	vmov.f32	s0, s19
 8014a44:	f000 fd06 	bl	8015454 <sinf>
 8014a48:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 8014a4c:	eeb0 0a69 	vmov.f32	s0, s19
 8014a50:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014a54:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014a58:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014a5c:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8014a60:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8014a64:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8014a68:	f000 fc8e 	bl	8015388 <cosf>
 8014a6c:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8014a70:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8014a74:	a809      	add	r0, sp, #36	; 0x24
 8014a76:	4632      	mov	r2, r6
 8014a78:	4631      	mov	r1, r6
 8014a7a:	f7f6 fc55 	bl	800b328 <qmult>
 8014a7e:	edd8 7a00 	vldr	s15, [r8]
 8014a82:	ed96 7a00 	vldr	s14, [r6]
 8014a86:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8014a8a:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8014a8e:	edd9 6a00 	vldr	s13, [r9]
 8014a92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014a96:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8014a9a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014a9e:	3301      	adds	r3, #1
 8014aa0:	aa13      	add	r2, sp, #76	; 0x4c
 8014aa2:	edd7 6a00 	vldr	s13, [r7]
 8014aa6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014aaa:	4651      	mov	r1, sl
 8014aac:	a809      	add	r0, sp, #36	; 0x24
 8014aae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014ab2:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014ab6:	eef1 6ae7 	vsqrt.f32	s13, s15
 8014aba:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8014abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014ac2:	ed86 7a00 	vstr	s14, [r6]
 8014ac6:	ed99 7a00 	vldr	s14, [r9]
 8014aca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014ace:	ed89 7a00 	vstr	s14, [r9]
 8014ad2:	ed98 7a00 	vldr	s14, [r8]
 8014ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014ada:	ed88 7a00 	vstr	s14, [r8]
 8014ade:	ed97 7a00 	vldr	s14, [r7]
 8014ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ae6:	edc7 7a00 	vstr	s15, [r7]
 8014aea:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8014aee:	f7f6 f985 	bl	800adfc <rotVect>
 8014af2:	f8d9 0000 	ldr.w	r0, [r9]
 8014af6:	f8d8 1000 	ldr.w	r1, [r8]
 8014afa:	683a      	ldr	r2, [r7, #0]
 8014afc:	6833      	ldr	r3, [r6, #0]
 8014afe:	60eb      	str	r3, [r5, #12]
 8014b00:	6128      	str	r0, [r5, #16]
 8014b02:	6169      	str	r1, [r5, #20]
 8014b04:	61aa      	str	r2, [r5, #24]
 8014b06:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014b0a:	9301      	str	r3, [sp, #4]
 8014b0c:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8014b10:	9300      	str	r3, [sp, #0]
 8014b12:	a909      	add	r1, sp, #36	; 0x24
 8014b14:	f105 031c 	add.w	r3, r5, #28
 8014b18:	462a      	mov	r2, r5
 8014b1a:	f105 000c 	add.w	r0, r5, #12
 8014b1e:	f7f7 fc2b 	bl	800c378 <output_update>
 8014b22:	b020      	add	sp, #128	; 0x80
 8014b24:	ecbd 8b06 	vpop	{d8-d10}
 8014b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	7123      	strb	r3, [r4, #4]
 8014b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014b34:	e72f      	b.n	8014996 <MotionFX_propagate+0xd6>
 8014b36:	ee68 8a80 	vmul.f32	s17, s17, s0
 8014b3a:	ee29 9a00 	vmul.f32	s18, s18, s0
 8014b3e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8014b42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014b46:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8014b4a:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8014b4e:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8014b52:	930c      	str	r3, [sp, #48]	; 0x30
 8014b54:	e78c      	b.n	8014a70 <MotionFX_propagate+0x1b0>
 8014b56:	bf00      	nop
 8014b58:	200002e0 	.word	0x200002e0
 8014b5c:	3c8efa35 	.word	0x3c8efa35
 8014b60:	38d1b718 	.word	0x38d1b718

08014b64 <MotionFX_MagCal_init>:
 8014b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b66:	4c44      	ldr	r4, [pc, #272]	; (8014c78 <MotionFX_MagCal_init+0x114>)
 8014b68:	7923      	ldrb	r3, [r4, #4]
 8014b6a:	b903      	cbnz	r3, 8014b6e <MotionFX_MagCal_init+0xa>
 8014b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b6e:	1e43      	subs	r3, r0, #1
 8014b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014b74:	4605      	mov	r5, r0
 8014b76:	d2f9      	bcs.n	8014b6c <MotionFX_MagCal_init+0x8>
 8014b78:	2900      	cmp	r1, #0
 8014b7a:	d139      	bne.n	8014bf0 <MotionFX_MagCal_init+0x8c>
 8014b7c:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8014b80:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014b84:	4a3d      	ldr	r2, [pc, #244]	; (8014c7c <MotionFX_MagCal_init+0x118>)
 8014b86:	1b5b      	subs	r3, r3, r5
 8014b88:	ee07 3a90 	vmov	s15, r3
 8014b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b90:	23c8      	movs	r3, #200	; 0xc8
 8014b92:	eef0 7ae7 	vabs.f32	s15, s15
 8014b96:	fb93 f3f5 	sdiv	r3, r3, r5
 8014b9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014b9e:	b2db      	uxtb	r3, r3
 8014ba0:	2b0f      	cmp	r3, #15
 8014ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014ba6:	bf28      	it	cs
 8014ba8:	230f      	movcs	r3, #15
 8014baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bae:	6015      	str	r5, [r2, #0]
 8014bb0:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 8014bb4:	b22d      	sxth	r5, r5
 8014bb6:	dc0e      	bgt.n	8014bd6 <MotionFX_MagCal_init+0x72>
 8014bb8:	edd4 7a03 	vldr	s15, [r4, #12]
 8014bbc:	eddf 6a30 	vldr	s13, [pc, #192]	; 8014c80 <MotionFX_MagCal_init+0x11c>
 8014bc0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8014c84 <MotionFX_MagCal_init+0x120>
 8014bc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014bc8:	eef0 7ae7 	vabs.f32	s15, s15
 8014bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd4:	dd08      	ble.n	8014be8 <MotionFX_MagCal_init+0x84>
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	492b      	ldr	r1, [pc, #172]	; (8014c88 <MotionFX_MagCal_init+0x124>)
 8014bda:	8165      	strh	r5, [r4, #10]
 8014bdc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8014be0:	60e1      	str	r1, [r4, #12]
 8014be2:	8223      	strh	r3, [r4, #16]
 8014be4:	6163      	str	r3, [r4, #20]
 8014be6:	8122      	strh	r2, [r4, #8]
 8014be8:	2300      	movs	r3, #0
 8014bea:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8014bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014bf0:	2600      	movs	r6, #0
 8014bf2:	4826      	ldr	r0, [pc, #152]	; (8014c8c <MotionFX_MagCal_init+0x128>)
 8014bf4:	61a0      	str	r0, [r4, #24]
 8014bf6:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8014bfa:	4631      	mov	r1, r6
 8014bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014c00:	6122      	str	r2, [r4, #16]
 8014c02:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8014c06:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014c0a:	6166      	str	r6, [r4, #20]
 8014c0c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8014c10:	6566      	str	r6, [r4, #84]	; 0x54
 8014c12:	83a6      	strh	r6, [r4, #28]
 8014c14:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8014c18:	f002 f9fe 	bl	8017018 <memset>
 8014c1c:	23ff      	movs	r3, #255	; 0xff
 8014c1e:	225f      	movs	r2, #95	; 0x5f
 8014c20:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 8014c24:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8014c28:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	2300      	movs	r3, #0
 8014c30:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8014c34:	f44f 7780 	mov.w	r7, #256	; 0x100
 8014c38:	4631      	mov	r1, r6
 8014c3a:	62a6      	str	r6, [r4, #40]	; 0x28
 8014c3c:	2230      	movs	r2, #48	; 0x30
 8014c3e:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 8014c42:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8014c46:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8014c4a:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8014c4c:	f002 f9e4 	bl	8017018 <memset>
 8014c50:	f1a5 030a 	sub.w	r3, r5, #10
 8014c54:	b29b      	uxth	r3, r3
 8014c56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8014c5a:	2b32      	cmp	r3, #50	; 0x32
 8014c5c:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 8014c60:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 8014c64:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 8014c68:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 8014c6c:	d888      	bhi.n	8014b80 <MotionFX_MagCal_init+0x1c>
 8014c6e:	2301      	movs	r3, #1
 8014c70:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8014c74:	e784      	b.n	8014b80 <MotionFX_MagCal_init+0x1c>
 8014c76:	bf00      	nop
 8014c78:	200002e0 	.word	0x200002e0
 8014c7c:	20000000 	.word	0x20000000
 8014c80:	3dcccccd 	.word	0x3dcccccd
 8014c84:	3c23d70a 	.word	0x3c23d70a
 8014c88:	3dcccccd 	.word	0x3dcccccd
 8014c8c:	20001588 	.word	0x20001588

08014c90 <MotionFX_MagCal_run>:
 8014c90:	4a3e      	ldr	r2, [pc, #248]	; (8014d8c <MotionFX_MagCal_run+0xfc>)
 8014c92:	7913      	ldrb	r3, [r2, #4]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d077      	beq.n	8014d88 <MotionFX_MagCal_run+0xf8>
 8014c98:	ed90 7a00 	vldr	s14, [r0]
 8014c9c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8014d90 <MotionFX_MagCal_run+0x100>
 8014ca0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ca8:	bfb4      	ite	lt
 8014caa:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8014cae:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8014cb2:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cb8:	ed90 7a01 	vldr	s14, [r0, #4]
 8014cbc:	eddf 6a34 	vldr	s13, [pc, #208]	; 8014d90 <MotionFX_MagCal_run+0x100>
 8014cc0:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 8014cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014cc8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd0:	ee17 1a90 	vmov	r1, s15
 8014cd4:	bfb4      	ite	lt
 8014cd6:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8014cda:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8014cde:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014ce2:	ed90 7a02 	vldr	s14, [r0, #8]
 8014ce6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8014d90 <MotionFX_MagCal_run+0x100>
 8014cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014cee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8014cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cf6:	ee17 4a90 	vmov	r4, s15
 8014cfa:	bfac      	ite	ge
 8014cfc:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8014d00:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8014d04:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014d08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014d0c:	ee17 7a90 	vmov	r7, s15
 8014d10:	b383      	cbz	r3, 8014d74 <MotionFX_MagCal_run+0xe4>
 8014d12:	4820      	ldr	r0, [pc, #128]	; (8014d94 <MotionFX_MagCal_run+0x104>)
 8014d14:	6805      	ldr	r5, [r0, #0]
 8014d16:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8014d1a:	fb15 f503 	smulbb	r5, r5, r3
 8014d1e:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 8014d22:	00dd      	lsls	r5, r3, #3
 8014d24:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 8014d28:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8014d98 <MotionFX_MagCal_run+0x108>
 8014d2c:	42b1      	cmp	r1, r6
 8014d2e:	bfa8      	it	ge
 8014d30:	4631      	movge	r1, r6
 8014d32:	42b7      	cmp	r7, r6
 8014d34:	bfa8      	it	ge
 8014d36:	4637      	movge	r7, r6
 8014d38:	4561      	cmp	r1, ip
 8014d3a:	4608      	mov	r0, r1
 8014d3c:	bfb8      	it	lt
 8014d3e:	4660      	movlt	r0, ip
 8014d40:	4564      	cmp	r4, ip
 8014d42:	db1f      	blt.n	8014d84 <MotionFX_MagCal_run+0xf4>
 8014d44:	42b4      	cmp	r4, r6
 8014d46:	bfa8      	it	ge
 8014d48:	4634      	movge	r4, r6
 8014d4a:	b224      	sxth	r4, r4
 8014d4c:	4e12      	ldr	r6, [pc, #72]	; (8014d98 <MotionFX_MagCal_run+0x108>)
 8014d4e:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 8014d52:	3301      	adds	r3, #1
 8014d54:	4415      	add	r5, r2
 8014d56:	b2db      	uxtb	r3, r3
 8014d58:	42b7      	cmp	r7, r6
 8014d5a:	bfb8      	it	lt
 8014d5c:	4637      	movlt	r7, r6
 8014d5e:	428b      	cmp	r3, r1
 8014d60:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 8014d64:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 8014d68:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 8014d6c:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 8014d70:	d014      	beq.n	8014d9c <MotionFX_MagCal_run+0x10c>
 8014d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d74:	68c0      	ldr	r0, [r0, #12]
 8014d76:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 8014d7a:	2001      	movs	r0, #1
 8014d7c:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 8014d80:	461d      	mov	r5, r3
 8014d82:	e7cf      	b.n	8014d24 <MotionFX_MagCal_run+0x94>
 8014d84:	4634      	mov	r4, r6
 8014d86:	e7e1      	b.n	8014d4c <MotionFX_MagCal_run+0xbc>
 8014d88:	4770      	bx	lr
 8014d8a:	bf00      	nop
 8014d8c:	200002e0 	.word	0x200002e0
 8014d90:	43fa0000 	.word	0x43fa0000
 8014d94:	20000000 	.word	0x20000000
 8014d98:	ffff8002 	.word	0xffff8002
 8014d9c:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 8014da0:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 8014da4:	2000      	movs	r0, #0
 8014da6:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	f000 8159 	beq.w	8015062 <MotionFX_MagCal_run+0x3d2>
 8014db0:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 8014db4:	8a57      	ldrh	r7, [r2, #18]
 8014db6:	8a13      	ldrh	r3, [r2, #16]
 8014db8:	2900      	cmp	r1, #0
 8014dba:	f000 8150 	beq.w	801505e <MotionFX_MagCal_run+0x3ce>
 8014dbe:	2f00      	cmp	r7, #0
 8014dc0:	f000 814d 	beq.w	801505e <MotionFX_MagCal_run+0x3ce>
 8014dc4:	42bb      	cmp	r3, r7
 8014dc6:	bf28      	it	cs
 8014dc8:	463b      	movcs	r3, r7
 8014dca:	3301      	adds	r3, #1
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	42bb      	cmp	r3, r7
 8014dd0:	bf28      	it	cs
 8014dd2:	463b      	movcs	r3, r7
 8014dd4:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8014dd8:	191d      	adds	r5, r3, r4
 8014dda:	f04f 0c01 	mov.w	ip, #1
 8014dde:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 8014de2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 8014de6:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8014dea:	f8c5 e002 	str.w	lr, [r5, #2]
 8014dee:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 8014df2:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014df6:	4561      	cmp	r1, ip
 8014df8:	f000 812a 	beq.w	8015050 <MotionFX_MagCal_run+0x3c0>
 8014dfc:	4463      	add	r3, ip
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	42bb      	cmp	r3, r7
 8014e02:	bf28      	it	cs
 8014e04:	463b      	movcs	r3, r7
 8014e06:	eb03 0e04 	add.w	lr, r3, r4
 8014e0a:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014e0e:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014e12:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 8014e16:	f8c5 e002 	str.w	lr, [r5, #2]
 8014e1a:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 8014e1e:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014e22:	2902      	cmp	r1, #2
 8014e24:	f000 8114 	beq.w	8015050 <MotionFX_MagCal_run+0x3c0>
 8014e28:	4463      	add	r3, ip
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	42bb      	cmp	r3, r7
 8014e2e:	bf28      	it	cs
 8014e30:	463b      	movcs	r3, r7
 8014e32:	eb03 0e04 	add.w	lr, r3, r4
 8014e36:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014e3a:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014e3e:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 8014e42:	f8c5 e002 	str.w	lr, [r5, #2]
 8014e46:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 8014e4a:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014e4e:	2903      	cmp	r1, #3
 8014e50:	f000 80fe 	beq.w	8015050 <MotionFX_MagCal_run+0x3c0>
 8014e54:	4463      	add	r3, ip
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	42bb      	cmp	r3, r7
 8014e5a:	bf28      	it	cs
 8014e5c:	463b      	movcs	r3, r7
 8014e5e:	eb03 0e04 	add.w	lr, r3, r4
 8014e62:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014e66:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014e6a:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 8014e6e:	f8c5 e002 	str.w	lr, [r5, #2]
 8014e72:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 8014e76:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014e7a:	2904      	cmp	r1, #4
 8014e7c:	f000 80e8 	beq.w	8015050 <MotionFX_MagCal_run+0x3c0>
 8014e80:	4463      	add	r3, ip
 8014e82:	b29b      	uxth	r3, r3
 8014e84:	42bb      	cmp	r3, r7
 8014e86:	bf28      	it	cs
 8014e88:	463b      	movcs	r3, r7
 8014e8a:	eb03 0e04 	add.w	lr, r3, r4
 8014e8e:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8014e92:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8014e96:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 8014e9a:	f8c5 e002 	str.w	lr, [r5, #2]
 8014e9e:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 8014ea2:	f8a5 e006 	strh.w	lr, [r5, #6]
 8014ea6:	2905      	cmp	r1, #5
 8014ea8:	f000 80d2 	beq.w	8015050 <MotionFX_MagCal_run+0x3c0>
 8014eac:	4463      	add	r3, ip
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	42bb      	cmp	r3, r7
 8014eb2:	bf28      	it	cs
 8014eb4:	463b      	movcs	r3, r7
 8014eb6:	441c      	add	r4, r3
 8014eb8:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 8014ebc:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8014ec0:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 8014ec4:	f8c5 4002 	str.w	r4, [r5, #2]
 8014ec8:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 8014ecc:	80ec      	strh	r4, [r5, #6]
 8014ece:	2906      	cmp	r1, #6
 8014ed0:	f000 80be 	beq.w	8015050 <MotionFX_MagCal_run+0x3c0>
 8014ed4:	4463      	add	r3, ip
 8014ed6:	b29b      	uxth	r3, r3
 8014ed8:	42bb      	cmp	r3, r7
 8014eda:	bf28      	it	cs
 8014edc:	463b      	movcs	r3, r7
 8014ede:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8014ee2:	eb03 0c04 	add.w	ip, r3, r4
 8014ee6:	2501      	movs	r5, #1
 8014ee8:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 8014eec:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8014ef0:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 8014ef4:	f8cc e002 	str.w	lr, [ip, #2]
 8014ef8:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 8014efc:	f8ac e006 	strh.w	lr, [ip, #6]
 8014f00:	2907      	cmp	r1, #7
 8014f02:	f000 80a5 	beq.w	8015050 <MotionFX_MagCal_run+0x3c0>
 8014f06:	442b      	add	r3, r5
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	42bb      	cmp	r3, r7
 8014f0c:	bf28      	it	cs
 8014f0e:	463b      	movcs	r3, r7
 8014f10:	eb03 0e04 	add.w	lr, r3, r4
 8014f14:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014f18:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014f1c:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8014f20:	f8cc e002 	str.w	lr, [ip, #2]
 8014f24:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8014f28:	f8ac e006 	strh.w	lr, [ip, #6]
 8014f2c:	2908      	cmp	r1, #8
 8014f2e:	f000 808f 	beq.w	8015050 <MotionFX_MagCal_run+0x3c0>
 8014f32:	442b      	add	r3, r5
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	42bb      	cmp	r3, r7
 8014f38:	bf28      	it	cs
 8014f3a:	463b      	movcs	r3, r7
 8014f3c:	eb03 0e04 	add.w	lr, r3, r4
 8014f40:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014f44:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014f48:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 8014f4c:	f8cc e002 	str.w	lr, [ip, #2]
 8014f50:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 8014f54:	f8ac e006 	strh.w	lr, [ip, #6]
 8014f58:	2909      	cmp	r1, #9
 8014f5a:	d079      	beq.n	8015050 <MotionFX_MagCal_run+0x3c0>
 8014f5c:	442b      	add	r3, r5
 8014f5e:	b29b      	uxth	r3, r3
 8014f60:	42bb      	cmp	r3, r7
 8014f62:	bf28      	it	cs
 8014f64:	463b      	movcs	r3, r7
 8014f66:	eb03 0e04 	add.w	lr, r3, r4
 8014f6a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014f6e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014f72:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 8014f76:	f8cc e002 	str.w	lr, [ip, #2]
 8014f7a:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 8014f7e:	f8ac e006 	strh.w	lr, [ip, #6]
 8014f82:	290a      	cmp	r1, #10
 8014f84:	d064      	beq.n	8015050 <MotionFX_MagCal_run+0x3c0>
 8014f86:	442b      	add	r3, r5
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	42bb      	cmp	r3, r7
 8014f8c:	bf28      	it	cs
 8014f8e:	463b      	movcs	r3, r7
 8014f90:	eb03 0e04 	add.w	lr, r3, r4
 8014f94:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014f98:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014f9c:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 8014fa0:	f8cc e002 	str.w	lr, [ip, #2]
 8014fa4:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 8014fa8:	f8ac e006 	strh.w	lr, [ip, #6]
 8014fac:	290b      	cmp	r1, #11
 8014fae:	d04f      	beq.n	8015050 <MotionFX_MagCal_run+0x3c0>
 8014fb0:	442b      	add	r3, r5
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	42bb      	cmp	r3, r7
 8014fb6:	bf28      	it	cs
 8014fb8:	463b      	movcs	r3, r7
 8014fba:	eb03 0e04 	add.w	lr, r3, r4
 8014fbe:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014fc2:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014fc6:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 8014fca:	f8cc e002 	str.w	lr, [ip, #2]
 8014fce:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 8014fd2:	f8ac e006 	strh.w	lr, [ip, #6]
 8014fd6:	290c      	cmp	r1, #12
 8014fd8:	d03a      	beq.n	8015050 <MotionFX_MagCal_run+0x3c0>
 8014fda:	442b      	add	r3, r5
 8014fdc:	b29b      	uxth	r3, r3
 8014fde:	42bb      	cmp	r3, r7
 8014fe0:	bf28      	it	cs
 8014fe2:	463b      	movcs	r3, r7
 8014fe4:	eb03 0e04 	add.w	lr, r3, r4
 8014fe8:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8014fec:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8014ff0:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 8014ff4:	f8cc e002 	str.w	lr, [ip, #2]
 8014ff8:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 8014ffc:	f8ac e006 	strh.w	lr, [ip, #6]
 8015000:	290d      	cmp	r1, #13
 8015002:	d025      	beq.n	8015050 <MotionFX_MagCal_run+0x3c0>
 8015004:	442b      	add	r3, r5
 8015006:	b29b      	uxth	r3, r3
 8015008:	42bb      	cmp	r3, r7
 801500a:	bf28      	it	cs
 801500c:	463b      	movcs	r3, r7
 801500e:	eb03 0e04 	add.w	lr, r3, r4
 8015012:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015016:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801501a:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 801501e:	f8cc e002 	str.w	lr, [ip, #2]
 8015022:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 8015026:	f8ac e006 	strh.w	lr, [ip, #6]
 801502a:	290e      	cmp	r1, #14
 801502c:	d010      	beq.n	8015050 <MotionFX_MagCal_run+0x3c0>
 801502e:	442b      	add	r3, r5
 8015030:	b29b      	uxth	r3, r3
 8015032:	42bb      	cmp	r3, r7
 8015034:	bf28      	it	cs
 8015036:	463b      	movcs	r3, r7
 8015038:	441c      	add	r4, r3
 801503a:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 801503e:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 8015042:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 8015046:	f8c7 0002 	str.w	r0, [r7, #2]
 801504a:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 801504e:	80f8      	strh	r0, [r7, #6]
 8015050:	3901      	subs	r1, #1
 8015052:	b2c9      	uxtb	r1, r1
 8015054:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8015058:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 801505c:	4434      	add	r4, r6
 801505e:	8213      	strh	r3, [r2, #16]
 8015060:	6154      	str	r4, [r2, #20]
 8015062:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 8015066:	2b00      	cmp	r3, #0
 8015068:	f43f ae83 	beq.w	8014d72 <MotionFX_MagCal_run+0xe2>
 801506c:	8a11      	ldrh	r1, [r2, #16]
 801506e:	8a53      	ldrh	r3, [r2, #18]
 8015070:	428b      	cmp	r3, r1
 8015072:	d022      	beq.n	80150ba <MotionFX_MagCal_run+0x42a>
 8015074:	b341      	cbz	r1, 80150c8 <MotionFX_MagCal_run+0x438>
 8015076:	6953      	ldr	r3, [r2, #20]
 8015078:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 801507c:	3301      	adds	r3, #1
 801507e:	4403      	add	r3, r0
 8015080:	1c58      	adds	r0, r3, #1
 8015082:	d021      	beq.n	80150c8 <MotionFX_MagCal_run+0x438>
 8015084:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 8015088:	3410      	adds	r4, #16
 801508a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 801508c:	42a0      	cmp	r0, r4
 801508e:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 8015092:	bf84      	itt	hi
 8015094:	6553      	strhi	r3, [r2, #84]	; 0x54
 8015096:	4618      	movhi	r0, r3
 8015098:	4420      	add	r0, r4
 801509a:	4283      	cmp	r3, r0
 801509c:	f4ff ae69 	bcc.w	8014d72 <MotionFX_MagCal_run+0xe2>
 80150a0:	b131      	cbz	r1, 80150b0 <MotionFX_MagCal_run+0x420>
 80150a2:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80150a6:	6952      	ldr	r2, [r2, #20]
 80150a8:	3901      	subs	r1, #1
 80150aa:	fb00 2111 	mls	r1, r0, r1, r2
 80150ae:	b289      	uxth	r1, r1
 80150b0:	1a5b      	subs	r3, r3, r1
 80150b2:	b21b      	sxth	r3, r3
 80150b4:	42a3      	cmp	r3, r4
 80150b6:	f6ff ae5c 	blt.w	8014d72 <MotionFX_MagCal_run+0xe2>
 80150ba:	4905      	ldr	r1, [pc, #20]	; (80150d0 <MotionFX_MagCal_run+0x440>)
 80150bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80150c0:	f101 0014 	add.w	r0, r1, #20
 80150c4:	f7fd babc 	b.w	8012640 <MEMS_runMagCal>
 80150c8:	f242 7410 	movw	r4, #10000	; 0x2710
 80150cc:	2300      	movs	r3, #0
 80150ce:	e7dc      	b.n	801508a <MotionFX_MagCal_run+0x3fa>
 80150d0:	200002e8 	.word	0x200002e8

080150d4 <MotionFX_MagCal_getParams>:
 80150d4:	b4f0      	push	{r4, r5, r6, r7}
 80150d6:	4f1b      	ldr	r7, [pc, #108]	; (8015144 <MotionFX_MagCal_getParams+0x70>)
 80150d8:	793b      	ldrb	r3, [r7, #4]
 80150da:	b08e      	sub	sp, #56	; 0x38
 80150dc:	b373      	cbz	r3, 801513c <MotionFX_MagCal_getParams+0x68>
 80150de:	f107 0574 	add.w	r5, r7, #116	; 0x74
 80150e2:	4606      	mov	r6, r0
 80150e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150e6:	ac01      	add	r4, sp, #4
 80150e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80150ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80150ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150f0:	ed9d 7a03 	vldr	s14, [sp, #12]
 80150f4:	eddd 6a02 	vldr	s13, [sp, #8]
 80150f8:	eddd 7a04 	vldr	s15, [sp, #16]
 80150fc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8015148 <MotionFX_MagCal_getParams+0x74>
 8015100:	682d      	ldr	r5, [r5, #0]
 8015102:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 8015106:	7337      	strb	r7, [r6, #12]
 8015108:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801510c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015116:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801511a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801511e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015122:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015126:	ee66 6a86 	vmul.f32	s13, s13, s12
 801512a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801512e:	6025      	str	r5, [r4, #0]
 8015130:	edc6 6a00 	vstr	s13, [r6]
 8015134:	ed86 7a01 	vstr	s14, [r6, #4]
 8015138:	edc6 7a02 	vstr	s15, [r6, #8]
 801513c:	b00e      	add	sp, #56	; 0x38
 801513e:	bcf0      	pop	{r4, r5, r6, r7}
 8015140:	4770      	bx	lr
 8015142:	bf00      	nop
 8015144:	200002e0 	.word	0x200002e0
 8015148:	3b03126f 	.word	0x3b03126f

0801514c <_Znwj>:
 801514c:	2801      	cmp	r0, #1
 801514e:	bf38      	it	cc
 8015150:	2001      	movcc	r0, #1
 8015152:	b510      	push	{r4, lr}
 8015154:	4604      	mov	r4, r0
 8015156:	4620      	mov	r0, r4
 8015158:	f001 ff48 	bl	8016fec <malloc>
 801515c:	b930      	cbnz	r0, 801516c <_Znwj+0x20>
 801515e:	f000 f807 	bl	8015170 <_ZSt15get_new_handlerv>
 8015162:	b908      	cbnz	r0, 8015168 <_Znwj+0x1c>
 8015164:	f001 ff10 	bl	8016f88 <abort>
 8015168:	4780      	blx	r0
 801516a:	e7f4      	b.n	8015156 <_Znwj+0xa>
 801516c:	bd10      	pop	{r4, pc}
	...

08015170 <_ZSt15get_new_handlerv>:
 8015170:	4b02      	ldr	r3, [pc, #8]	; (801517c <_ZSt15get_new_handlerv+0xc>)
 8015172:	6818      	ldr	r0, [r3, #0]
 8015174:	f3bf 8f5b 	dmb	ish
 8015178:	4770      	bx	lr
 801517a:	bf00      	nop
 801517c:	200011b4 	.word	0x200011b4

08015180 <ceil>:
 8015180:	ec51 0b10 	vmov	r0, r1, d0
 8015184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015188:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801518c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015190:	2e13      	cmp	r6, #19
 8015192:	ee10 5a10 	vmov	r5, s0
 8015196:	ee10 8a10 	vmov	r8, s0
 801519a:	460c      	mov	r4, r1
 801519c:	dc30      	bgt.n	8015200 <ceil+0x80>
 801519e:	2e00      	cmp	r6, #0
 80151a0:	da12      	bge.n	80151c8 <ceil+0x48>
 80151a2:	a335      	add	r3, pc, #212	; (adr r3, 8015278 <ceil+0xf8>)
 80151a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a8:	f7eb f870 	bl	800028c <__adddf3>
 80151ac:	2200      	movs	r2, #0
 80151ae:	2300      	movs	r3, #0
 80151b0:	f7eb fcb2 	bl	8000b18 <__aeabi_dcmpgt>
 80151b4:	b128      	cbz	r0, 80151c2 <ceil+0x42>
 80151b6:	2c00      	cmp	r4, #0
 80151b8:	db55      	blt.n	8015266 <ceil+0xe6>
 80151ba:	432c      	orrs	r4, r5
 80151bc:	d057      	beq.n	801526e <ceil+0xee>
 80151be:	4c30      	ldr	r4, [pc, #192]	; (8015280 <ceil+0x100>)
 80151c0:	2500      	movs	r5, #0
 80151c2:	4621      	mov	r1, r4
 80151c4:	4628      	mov	r0, r5
 80151c6:	e025      	b.n	8015214 <ceil+0x94>
 80151c8:	4f2e      	ldr	r7, [pc, #184]	; (8015284 <ceil+0x104>)
 80151ca:	4137      	asrs	r7, r6
 80151cc:	ea01 0307 	and.w	r3, r1, r7
 80151d0:	4303      	orrs	r3, r0
 80151d2:	d01f      	beq.n	8015214 <ceil+0x94>
 80151d4:	a328      	add	r3, pc, #160	; (adr r3, 8015278 <ceil+0xf8>)
 80151d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151da:	f7eb f857 	bl	800028c <__adddf3>
 80151de:	2200      	movs	r2, #0
 80151e0:	2300      	movs	r3, #0
 80151e2:	f7eb fc99 	bl	8000b18 <__aeabi_dcmpgt>
 80151e6:	2800      	cmp	r0, #0
 80151e8:	d0eb      	beq.n	80151c2 <ceil+0x42>
 80151ea:	2c00      	cmp	r4, #0
 80151ec:	bfc2      	ittt	gt
 80151ee:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80151f2:	fa43 f606 	asrgt.w	r6, r3, r6
 80151f6:	19a4      	addgt	r4, r4, r6
 80151f8:	ea24 0407 	bic.w	r4, r4, r7
 80151fc:	2500      	movs	r5, #0
 80151fe:	e7e0      	b.n	80151c2 <ceil+0x42>
 8015200:	2e33      	cmp	r6, #51	; 0x33
 8015202:	dd0b      	ble.n	801521c <ceil+0x9c>
 8015204:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015208:	d104      	bne.n	8015214 <ceil+0x94>
 801520a:	ee10 2a10 	vmov	r2, s0
 801520e:	460b      	mov	r3, r1
 8015210:	f7eb f83c 	bl	800028c <__adddf3>
 8015214:	ec41 0b10 	vmov	d0, r0, r1
 8015218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801521c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015220:	f04f 33ff 	mov.w	r3, #4294967295
 8015224:	fa23 f707 	lsr.w	r7, r3, r7
 8015228:	4207      	tst	r7, r0
 801522a:	d0f3      	beq.n	8015214 <ceil+0x94>
 801522c:	a312      	add	r3, pc, #72	; (adr r3, 8015278 <ceil+0xf8>)
 801522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015232:	f7eb f82b 	bl	800028c <__adddf3>
 8015236:	2200      	movs	r2, #0
 8015238:	2300      	movs	r3, #0
 801523a:	f7eb fc6d 	bl	8000b18 <__aeabi_dcmpgt>
 801523e:	2800      	cmp	r0, #0
 8015240:	d0bf      	beq.n	80151c2 <ceil+0x42>
 8015242:	2c00      	cmp	r4, #0
 8015244:	dd02      	ble.n	801524c <ceil+0xcc>
 8015246:	2e14      	cmp	r6, #20
 8015248:	d103      	bne.n	8015252 <ceil+0xd2>
 801524a:	3401      	adds	r4, #1
 801524c:	ea25 0507 	bic.w	r5, r5, r7
 8015250:	e7b7      	b.n	80151c2 <ceil+0x42>
 8015252:	2301      	movs	r3, #1
 8015254:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015258:	fa03 f606 	lsl.w	r6, r3, r6
 801525c:	4435      	add	r5, r6
 801525e:	4545      	cmp	r5, r8
 8015260:	bf38      	it	cc
 8015262:	18e4      	addcc	r4, r4, r3
 8015264:	e7f2      	b.n	801524c <ceil+0xcc>
 8015266:	2500      	movs	r5, #0
 8015268:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801526c:	e7a9      	b.n	80151c2 <ceil+0x42>
 801526e:	4625      	mov	r5, r4
 8015270:	e7a7      	b.n	80151c2 <ceil+0x42>
 8015272:	bf00      	nop
 8015274:	f3af 8000 	nop.w
 8015278:	8800759c 	.word	0x8800759c
 801527c:	7e37e43c 	.word	0x7e37e43c
 8015280:	3ff00000 	.word	0x3ff00000
 8015284:	000fffff 	.word	0x000fffff

08015288 <floor>:
 8015288:	ec51 0b10 	vmov	r0, r1, d0
 801528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015290:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015294:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015298:	2e13      	cmp	r6, #19
 801529a:	ee10 5a10 	vmov	r5, s0
 801529e:	ee10 8a10 	vmov	r8, s0
 80152a2:	460c      	mov	r4, r1
 80152a4:	dc32      	bgt.n	801530c <floor+0x84>
 80152a6:	2e00      	cmp	r6, #0
 80152a8:	da14      	bge.n	80152d4 <floor+0x4c>
 80152aa:	a333      	add	r3, pc, #204	; (adr r3, 8015378 <floor+0xf0>)
 80152ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152b0:	f7ea ffec 	bl	800028c <__adddf3>
 80152b4:	2200      	movs	r2, #0
 80152b6:	2300      	movs	r3, #0
 80152b8:	f7eb fc2e 	bl	8000b18 <__aeabi_dcmpgt>
 80152bc:	b138      	cbz	r0, 80152ce <floor+0x46>
 80152be:	2c00      	cmp	r4, #0
 80152c0:	da57      	bge.n	8015372 <floor+0xea>
 80152c2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80152c6:	431d      	orrs	r5, r3
 80152c8:	d001      	beq.n	80152ce <floor+0x46>
 80152ca:	4c2d      	ldr	r4, [pc, #180]	; (8015380 <floor+0xf8>)
 80152cc:	2500      	movs	r5, #0
 80152ce:	4621      	mov	r1, r4
 80152d0:	4628      	mov	r0, r5
 80152d2:	e025      	b.n	8015320 <floor+0x98>
 80152d4:	4f2b      	ldr	r7, [pc, #172]	; (8015384 <floor+0xfc>)
 80152d6:	4137      	asrs	r7, r6
 80152d8:	ea01 0307 	and.w	r3, r1, r7
 80152dc:	4303      	orrs	r3, r0
 80152de:	d01f      	beq.n	8015320 <floor+0x98>
 80152e0:	a325      	add	r3, pc, #148	; (adr r3, 8015378 <floor+0xf0>)
 80152e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e6:	f7ea ffd1 	bl	800028c <__adddf3>
 80152ea:	2200      	movs	r2, #0
 80152ec:	2300      	movs	r3, #0
 80152ee:	f7eb fc13 	bl	8000b18 <__aeabi_dcmpgt>
 80152f2:	2800      	cmp	r0, #0
 80152f4:	d0eb      	beq.n	80152ce <floor+0x46>
 80152f6:	2c00      	cmp	r4, #0
 80152f8:	bfbe      	ittt	lt
 80152fa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80152fe:	fa43 f606 	asrlt.w	r6, r3, r6
 8015302:	19a4      	addlt	r4, r4, r6
 8015304:	ea24 0407 	bic.w	r4, r4, r7
 8015308:	2500      	movs	r5, #0
 801530a:	e7e0      	b.n	80152ce <floor+0x46>
 801530c:	2e33      	cmp	r6, #51	; 0x33
 801530e:	dd0b      	ble.n	8015328 <floor+0xa0>
 8015310:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015314:	d104      	bne.n	8015320 <floor+0x98>
 8015316:	ee10 2a10 	vmov	r2, s0
 801531a:	460b      	mov	r3, r1
 801531c:	f7ea ffb6 	bl	800028c <__adddf3>
 8015320:	ec41 0b10 	vmov	d0, r0, r1
 8015324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015328:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801532c:	f04f 33ff 	mov.w	r3, #4294967295
 8015330:	fa23 f707 	lsr.w	r7, r3, r7
 8015334:	4207      	tst	r7, r0
 8015336:	d0f3      	beq.n	8015320 <floor+0x98>
 8015338:	a30f      	add	r3, pc, #60	; (adr r3, 8015378 <floor+0xf0>)
 801533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801533e:	f7ea ffa5 	bl	800028c <__adddf3>
 8015342:	2200      	movs	r2, #0
 8015344:	2300      	movs	r3, #0
 8015346:	f7eb fbe7 	bl	8000b18 <__aeabi_dcmpgt>
 801534a:	2800      	cmp	r0, #0
 801534c:	d0bf      	beq.n	80152ce <floor+0x46>
 801534e:	2c00      	cmp	r4, #0
 8015350:	da02      	bge.n	8015358 <floor+0xd0>
 8015352:	2e14      	cmp	r6, #20
 8015354:	d103      	bne.n	801535e <floor+0xd6>
 8015356:	3401      	adds	r4, #1
 8015358:	ea25 0507 	bic.w	r5, r5, r7
 801535c:	e7b7      	b.n	80152ce <floor+0x46>
 801535e:	2301      	movs	r3, #1
 8015360:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015364:	fa03 f606 	lsl.w	r6, r3, r6
 8015368:	4435      	add	r5, r6
 801536a:	4545      	cmp	r5, r8
 801536c:	bf38      	it	cc
 801536e:	18e4      	addcc	r4, r4, r3
 8015370:	e7f2      	b.n	8015358 <floor+0xd0>
 8015372:	2500      	movs	r5, #0
 8015374:	462c      	mov	r4, r5
 8015376:	e7aa      	b.n	80152ce <floor+0x46>
 8015378:	8800759c 	.word	0x8800759c
 801537c:	7e37e43c 	.word	0x7e37e43c
 8015380:	bff00000 	.word	0xbff00000
 8015384:	000fffff 	.word	0x000fffff

08015388 <cosf>:
 8015388:	ee10 3a10 	vmov	r3, s0
 801538c:	b507      	push	{r0, r1, r2, lr}
 801538e:	4a1c      	ldr	r2, [pc, #112]	; (8015400 <cosf+0x78>)
 8015390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015394:	4293      	cmp	r3, r2
 8015396:	dc04      	bgt.n	80153a2 <cosf+0x1a>
 8015398:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015404 <cosf+0x7c>
 801539c:	f000 fe9e 	bl	80160dc <__kernel_cosf>
 80153a0:	e004      	b.n	80153ac <cosf+0x24>
 80153a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80153a6:	db04      	blt.n	80153b2 <cosf+0x2a>
 80153a8:	ee30 0a40 	vsub.f32	s0, s0, s0
 80153ac:	b003      	add	sp, #12
 80153ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80153b2:	4668      	mov	r0, sp
 80153b4:	f000 fd52 	bl	8015e5c <__ieee754_rem_pio2f>
 80153b8:	f000 0003 	and.w	r0, r0, #3
 80153bc:	2801      	cmp	r0, #1
 80153be:	d007      	beq.n	80153d0 <cosf+0x48>
 80153c0:	2802      	cmp	r0, #2
 80153c2:	d00e      	beq.n	80153e2 <cosf+0x5a>
 80153c4:	b9a0      	cbnz	r0, 80153f0 <cosf+0x68>
 80153c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80153ca:	ed9d 0a00 	vldr	s0, [sp]
 80153ce:	e7e5      	b.n	801539c <cosf+0x14>
 80153d0:	eddd 0a01 	vldr	s1, [sp, #4]
 80153d4:	ed9d 0a00 	vldr	s0, [sp]
 80153d8:	f001 f96a 	bl	80166b0 <__kernel_sinf>
 80153dc:	eeb1 0a40 	vneg.f32	s0, s0
 80153e0:	e7e4      	b.n	80153ac <cosf+0x24>
 80153e2:	eddd 0a01 	vldr	s1, [sp, #4]
 80153e6:	ed9d 0a00 	vldr	s0, [sp]
 80153ea:	f000 fe77 	bl	80160dc <__kernel_cosf>
 80153ee:	e7f5      	b.n	80153dc <cosf+0x54>
 80153f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80153f4:	ed9d 0a00 	vldr	s0, [sp]
 80153f8:	2001      	movs	r0, #1
 80153fa:	f001 f959 	bl	80166b0 <__kernel_sinf>
 80153fe:	e7d5      	b.n	80153ac <cosf+0x24>
 8015400:	3f490fd8 	.word	0x3f490fd8
 8015404:	00000000 	.word	0x00000000

08015408 <roundf>:
 8015408:	ee10 0a10 	vmov	r0, s0
 801540c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015410:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8015414:	2a16      	cmp	r2, #22
 8015416:	dc15      	bgt.n	8015444 <roundf+0x3c>
 8015418:	2a00      	cmp	r2, #0
 801541a:	da08      	bge.n	801542e <roundf+0x26>
 801541c:	3201      	adds	r2, #1
 801541e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8015422:	d101      	bne.n	8015428 <roundf+0x20>
 8015424:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015428:	ee00 3a10 	vmov	s0, r3
 801542c:	4770      	bx	lr
 801542e:	4908      	ldr	r1, [pc, #32]	; (8015450 <roundf+0x48>)
 8015430:	4111      	asrs	r1, r2
 8015432:	4208      	tst	r0, r1
 8015434:	d0fa      	beq.n	801542c <roundf+0x24>
 8015436:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801543a:	4113      	asrs	r3, r2
 801543c:	4403      	add	r3, r0
 801543e:	ea23 0301 	bic.w	r3, r3, r1
 8015442:	e7f1      	b.n	8015428 <roundf+0x20>
 8015444:	2a80      	cmp	r2, #128	; 0x80
 8015446:	d1f1      	bne.n	801542c <roundf+0x24>
 8015448:	ee30 0a00 	vadd.f32	s0, s0, s0
 801544c:	4770      	bx	lr
 801544e:	bf00      	nop
 8015450:	007fffff 	.word	0x007fffff

08015454 <sinf>:
 8015454:	ee10 3a10 	vmov	r3, s0
 8015458:	b507      	push	{r0, r1, r2, lr}
 801545a:	4a1d      	ldr	r2, [pc, #116]	; (80154d0 <sinf+0x7c>)
 801545c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015460:	4293      	cmp	r3, r2
 8015462:	dc05      	bgt.n	8015470 <sinf+0x1c>
 8015464:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80154d4 <sinf+0x80>
 8015468:	2000      	movs	r0, #0
 801546a:	f001 f921 	bl	80166b0 <__kernel_sinf>
 801546e:	e004      	b.n	801547a <sinf+0x26>
 8015470:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015474:	db04      	blt.n	8015480 <sinf+0x2c>
 8015476:	ee30 0a40 	vsub.f32	s0, s0, s0
 801547a:	b003      	add	sp, #12
 801547c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015480:	4668      	mov	r0, sp
 8015482:	f000 fceb 	bl	8015e5c <__ieee754_rem_pio2f>
 8015486:	f000 0003 	and.w	r0, r0, #3
 801548a:	2801      	cmp	r0, #1
 801548c:	d008      	beq.n	80154a0 <sinf+0x4c>
 801548e:	2802      	cmp	r0, #2
 8015490:	d00d      	beq.n	80154ae <sinf+0x5a>
 8015492:	b9b0      	cbnz	r0, 80154c2 <sinf+0x6e>
 8015494:	eddd 0a01 	vldr	s1, [sp, #4]
 8015498:	ed9d 0a00 	vldr	s0, [sp]
 801549c:	2001      	movs	r0, #1
 801549e:	e7e4      	b.n	801546a <sinf+0x16>
 80154a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80154a4:	ed9d 0a00 	vldr	s0, [sp]
 80154a8:	f000 fe18 	bl	80160dc <__kernel_cosf>
 80154ac:	e7e5      	b.n	801547a <sinf+0x26>
 80154ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80154b2:	ed9d 0a00 	vldr	s0, [sp]
 80154b6:	2001      	movs	r0, #1
 80154b8:	f001 f8fa 	bl	80166b0 <__kernel_sinf>
 80154bc:	eeb1 0a40 	vneg.f32	s0, s0
 80154c0:	e7db      	b.n	801547a <sinf+0x26>
 80154c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80154c6:	ed9d 0a00 	vldr	s0, [sp]
 80154ca:	f000 fe07 	bl	80160dc <__kernel_cosf>
 80154ce:	e7f5      	b.n	80154bc <sinf+0x68>
 80154d0:	3f490fd8 	.word	0x3f490fd8
 80154d4:	00000000 	.word	0x00000000

080154d8 <tanf>:
 80154d8:	ee10 3a10 	vmov	r3, s0
 80154dc:	b507      	push	{r0, r1, r2, lr}
 80154de:	4a10      	ldr	r2, [pc, #64]	; (8015520 <tanf+0x48>)
 80154e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80154e4:	4293      	cmp	r3, r2
 80154e6:	dc05      	bgt.n	80154f4 <tanf+0x1c>
 80154e8:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8015524 <tanf+0x4c>
 80154ec:	2001      	movs	r0, #1
 80154ee:	f001 f927 	bl	8016740 <__kernel_tanf>
 80154f2:	e004      	b.n	80154fe <tanf+0x26>
 80154f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80154f8:	db04      	blt.n	8015504 <tanf+0x2c>
 80154fa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80154fe:	b003      	add	sp, #12
 8015500:	f85d fb04 	ldr.w	pc, [sp], #4
 8015504:	4668      	mov	r0, sp
 8015506:	f000 fca9 	bl	8015e5c <__ieee754_rem_pio2f>
 801550a:	0040      	lsls	r0, r0, #1
 801550c:	f000 0002 	and.w	r0, r0, #2
 8015510:	eddd 0a01 	vldr	s1, [sp, #4]
 8015514:	ed9d 0a00 	vldr	s0, [sp]
 8015518:	f1c0 0001 	rsb	r0, r0, #1
 801551c:	e7e7      	b.n	80154ee <tanf+0x16>
 801551e:	bf00      	nop
 8015520:	3f490fda 	.word	0x3f490fda
 8015524:	00000000 	.word	0x00000000

08015528 <atan2>:
 8015528:	f000 b89a 	b.w	8015660 <__ieee754_atan2>

0801552c <sqrt>:
 801552c:	b538      	push	{r3, r4, r5, lr}
 801552e:	ed2d 8b02 	vpush	{d8}
 8015532:	ec55 4b10 	vmov	r4, r5, d0
 8015536:	f000 f95d 	bl	80157f4 <__ieee754_sqrt>
 801553a:	4b15      	ldr	r3, [pc, #84]	; (8015590 <sqrt+0x64>)
 801553c:	eeb0 8a40 	vmov.f32	s16, s0
 8015540:	eef0 8a60 	vmov.f32	s17, s1
 8015544:	f993 3000 	ldrsb.w	r3, [r3]
 8015548:	3301      	adds	r3, #1
 801554a:	d019      	beq.n	8015580 <sqrt+0x54>
 801554c:	4622      	mov	r2, r4
 801554e:	462b      	mov	r3, r5
 8015550:	4620      	mov	r0, r4
 8015552:	4629      	mov	r1, r5
 8015554:	f7eb faea 	bl	8000b2c <__aeabi_dcmpun>
 8015558:	b990      	cbnz	r0, 8015580 <sqrt+0x54>
 801555a:	2200      	movs	r2, #0
 801555c:	2300      	movs	r3, #0
 801555e:	4620      	mov	r0, r4
 8015560:	4629      	mov	r1, r5
 8015562:	f7eb fabb 	bl	8000adc <__aeabi_dcmplt>
 8015566:	b158      	cbz	r0, 8015580 <sqrt+0x54>
 8015568:	f001 fd16 	bl	8016f98 <__errno>
 801556c:	2321      	movs	r3, #33	; 0x21
 801556e:	6003      	str	r3, [r0, #0]
 8015570:	2200      	movs	r2, #0
 8015572:	2300      	movs	r3, #0
 8015574:	4610      	mov	r0, r2
 8015576:	4619      	mov	r1, r3
 8015578:	f7eb f968 	bl	800084c <__aeabi_ddiv>
 801557c:	ec41 0b18 	vmov	d8, r0, r1
 8015580:	eeb0 0a48 	vmov.f32	s0, s16
 8015584:	eef0 0a68 	vmov.f32	s1, s17
 8015588:	ecbd 8b02 	vpop	{d8}
 801558c:	bd38      	pop	{r3, r4, r5, pc}
 801558e:	bf00      	nop
 8015590:	200000ed 	.word	0x200000ed

08015594 <acosf>:
 8015594:	b508      	push	{r3, lr}
 8015596:	ed2d 8b02 	vpush	{d8}
 801559a:	eeb0 8a40 	vmov.f32	s16, s0
 801559e:	f000 f9dd 	bl	801595c <__ieee754_acosf>
 80155a2:	4b13      	ldr	r3, [pc, #76]	; (80155f0 <acosf+0x5c>)
 80155a4:	f993 3000 	ldrsb.w	r3, [r3]
 80155a8:	3301      	adds	r3, #1
 80155aa:	eef0 8a40 	vmov.f32	s17, s0
 80155ae:	d01a      	beq.n	80155e6 <acosf+0x52>
 80155b0:	eeb4 8a48 	vcmp.f32	s16, s16
 80155b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155b8:	d615      	bvs.n	80155e6 <acosf+0x52>
 80155ba:	eeb0 0a48 	vmov.f32	s0, s16
 80155be:	f001 fc21 	bl	8016e04 <fabsf>
 80155c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80155c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80155ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155ce:	dd0a      	ble.n	80155e6 <acosf+0x52>
 80155d0:	f001 fce2 	bl	8016f98 <__errno>
 80155d4:	ecbd 8b02 	vpop	{d8}
 80155d8:	2321      	movs	r3, #33	; 0x21
 80155da:	6003      	str	r3, [r0, #0]
 80155dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80155e0:	4804      	ldr	r0, [pc, #16]	; (80155f4 <acosf+0x60>)
 80155e2:	f001 bc59 	b.w	8016e98 <nanf>
 80155e6:	eeb0 0a68 	vmov.f32	s0, s17
 80155ea:	ecbd 8b02 	vpop	{d8}
 80155ee:	bd08      	pop	{r3, pc}
 80155f0:	200000ed 	.word	0x200000ed
 80155f4:	0801a720 	.word	0x0801a720

080155f8 <asinf>:
 80155f8:	b508      	push	{r3, lr}
 80155fa:	ed2d 8b02 	vpush	{d8}
 80155fe:	eeb0 8a40 	vmov.f32	s16, s0
 8015602:	f000 faa5 	bl	8015b50 <__ieee754_asinf>
 8015606:	4b13      	ldr	r3, [pc, #76]	; (8015654 <asinf+0x5c>)
 8015608:	f993 3000 	ldrsb.w	r3, [r3]
 801560c:	3301      	adds	r3, #1
 801560e:	eef0 8a40 	vmov.f32	s17, s0
 8015612:	d01a      	beq.n	801564a <asinf+0x52>
 8015614:	eeb4 8a48 	vcmp.f32	s16, s16
 8015618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801561c:	d615      	bvs.n	801564a <asinf+0x52>
 801561e:	eeb0 0a48 	vmov.f32	s0, s16
 8015622:	f001 fbef 	bl	8016e04 <fabsf>
 8015626:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801562a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801562e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015632:	dd0a      	ble.n	801564a <asinf+0x52>
 8015634:	f001 fcb0 	bl	8016f98 <__errno>
 8015638:	ecbd 8b02 	vpop	{d8}
 801563c:	2321      	movs	r3, #33	; 0x21
 801563e:	6003      	str	r3, [r0, #0]
 8015640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015644:	4804      	ldr	r0, [pc, #16]	; (8015658 <asinf+0x60>)
 8015646:	f001 bc27 	b.w	8016e98 <nanf>
 801564a:	eeb0 0a68 	vmov.f32	s0, s17
 801564e:	ecbd 8b02 	vpop	{d8}
 8015652:	bd08      	pop	{r3, pc}
 8015654:	200000ed 	.word	0x200000ed
 8015658:	0801a720 	.word	0x0801a720

0801565c <atan2f>:
 801565c:	f000 bb5e 	b.w	8015d1c <__ieee754_atan2f>

08015660 <__ieee754_atan2>:
 8015660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015664:	ec57 6b11 	vmov	r6, r7, d1
 8015668:	4273      	negs	r3, r6
 801566a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80157f0 <__ieee754_atan2+0x190>
 801566e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015672:	4333      	orrs	r3, r6
 8015674:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015678:	4573      	cmp	r3, lr
 801567a:	ec51 0b10 	vmov	r0, r1, d0
 801567e:	ee11 8a10 	vmov	r8, s2
 8015682:	d80a      	bhi.n	801569a <__ieee754_atan2+0x3a>
 8015684:	4244      	negs	r4, r0
 8015686:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801568a:	4304      	orrs	r4, r0
 801568c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015690:	4574      	cmp	r4, lr
 8015692:	ee10 9a10 	vmov	r9, s0
 8015696:	468c      	mov	ip, r1
 8015698:	d907      	bls.n	80156aa <__ieee754_atan2+0x4a>
 801569a:	4632      	mov	r2, r6
 801569c:	463b      	mov	r3, r7
 801569e:	f7ea fdf5 	bl	800028c <__adddf3>
 80156a2:	ec41 0b10 	vmov	d0, r0, r1
 80156a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80156ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80156b2:	4334      	orrs	r4, r6
 80156b4:	d103      	bne.n	80156be <__ieee754_atan2+0x5e>
 80156b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80156ba:	f001 b925 	b.w	8016908 <atan>
 80156be:	17bc      	asrs	r4, r7, #30
 80156c0:	f004 0402 	and.w	r4, r4, #2
 80156c4:	ea53 0909 	orrs.w	r9, r3, r9
 80156c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80156cc:	d107      	bne.n	80156de <__ieee754_atan2+0x7e>
 80156ce:	2c02      	cmp	r4, #2
 80156d0:	d060      	beq.n	8015794 <__ieee754_atan2+0x134>
 80156d2:	2c03      	cmp	r4, #3
 80156d4:	d1e5      	bne.n	80156a2 <__ieee754_atan2+0x42>
 80156d6:	a142      	add	r1, pc, #264	; (adr r1, 80157e0 <__ieee754_atan2+0x180>)
 80156d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156dc:	e7e1      	b.n	80156a2 <__ieee754_atan2+0x42>
 80156de:	ea52 0808 	orrs.w	r8, r2, r8
 80156e2:	d106      	bne.n	80156f2 <__ieee754_atan2+0x92>
 80156e4:	f1bc 0f00 	cmp.w	ip, #0
 80156e8:	da5f      	bge.n	80157aa <__ieee754_atan2+0x14a>
 80156ea:	a13f      	add	r1, pc, #252	; (adr r1, 80157e8 <__ieee754_atan2+0x188>)
 80156ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156f0:	e7d7      	b.n	80156a2 <__ieee754_atan2+0x42>
 80156f2:	4572      	cmp	r2, lr
 80156f4:	d10f      	bne.n	8015716 <__ieee754_atan2+0xb6>
 80156f6:	4293      	cmp	r3, r2
 80156f8:	f104 34ff 	add.w	r4, r4, #4294967295
 80156fc:	d107      	bne.n	801570e <__ieee754_atan2+0xae>
 80156fe:	2c02      	cmp	r4, #2
 8015700:	d84c      	bhi.n	801579c <__ieee754_atan2+0x13c>
 8015702:	4b35      	ldr	r3, [pc, #212]	; (80157d8 <__ieee754_atan2+0x178>)
 8015704:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015708:	e9d4 0100 	ldrd	r0, r1, [r4]
 801570c:	e7c9      	b.n	80156a2 <__ieee754_atan2+0x42>
 801570e:	2c02      	cmp	r4, #2
 8015710:	d848      	bhi.n	80157a4 <__ieee754_atan2+0x144>
 8015712:	4b32      	ldr	r3, [pc, #200]	; (80157dc <__ieee754_atan2+0x17c>)
 8015714:	e7f6      	b.n	8015704 <__ieee754_atan2+0xa4>
 8015716:	4573      	cmp	r3, lr
 8015718:	d0e4      	beq.n	80156e4 <__ieee754_atan2+0x84>
 801571a:	1a9b      	subs	r3, r3, r2
 801571c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015720:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015724:	da1e      	bge.n	8015764 <__ieee754_atan2+0x104>
 8015726:	2f00      	cmp	r7, #0
 8015728:	da01      	bge.n	801572e <__ieee754_atan2+0xce>
 801572a:	323c      	adds	r2, #60	; 0x3c
 801572c:	db1e      	blt.n	801576c <__ieee754_atan2+0x10c>
 801572e:	4632      	mov	r2, r6
 8015730:	463b      	mov	r3, r7
 8015732:	f7eb f88b 	bl	800084c <__aeabi_ddiv>
 8015736:	ec41 0b10 	vmov	d0, r0, r1
 801573a:	f001 fa85 	bl	8016c48 <fabs>
 801573e:	f001 f8e3 	bl	8016908 <atan>
 8015742:	ec51 0b10 	vmov	r0, r1, d0
 8015746:	2c01      	cmp	r4, #1
 8015748:	d013      	beq.n	8015772 <__ieee754_atan2+0x112>
 801574a:	2c02      	cmp	r4, #2
 801574c:	d015      	beq.n	801577a <__ieee754_atan2+0x11a>
 801574e:	2c00      	cmp	r4, #0
 8015750:	d0a7      	beq.n	80156a2 <__ieee754_atan2+0x42>
 8015752:	a319      	add	r3, pc, #100	; (adr r3, 80157b8 <__ieee754_atan2+0x158>)
 8015754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015758:	f7ea fd96 	bl	8000288 <__aeabi_dsub>
 801575c:	a318      	add	r3, pc, #96	; (adr r3, 80157c0 <__ieee754_atan2+0x160>)
 801575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015762:	e014      	b.n	801578e <__ieee754_atan2+0x12e>
 8015764:	a118      	add	r1, pc, #96	; (adr r1, 80157c8 <__ieee754_atan2+0x168>)
 8015766:	e9d1 0100 	ldrd	r0, r1, [r1]
 801576a:	e7ec      	b.n	8015746 <__ieee754_atan2+0xe6>
 801576c:	2000      	movs	r0, #0
 801576e:	2100      	movs	r1, #0
 8015770:	e7e9      	b.n	8015746 <__ieee754_atan2+0xe6>
 8015772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015776:	4619      	mov	r1, r3
 8015778:	e793      	b.n	80156a2 <__ieee754_atan2+0x42>
 801577a:	a30f      	add	r3, pc, #60	; (adr r3, 80157b8 <__ieee754_atan2+0x158>)
 801577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015780:	f7ea fd82 	bl	8000288 <__aeabi_dsub>
 8015784:	4602      	mov	r2, r0
 8015786:	460b      	mov	r3, r1
 8015788:	a10d      	add	r1, pc, #52	; (adr r1, 80157c0 <__ieee754_atan2+0x160>)
 801578a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801578e:	f7ea fd7b 	bl	8000288 <__aeabi_dsub>
 8015792:	e786      	b.n	80156a2 <__ieee754_atan2+0x42>
 8015794:	a10a      	add	r1, pc, #40	; (adr r1, 80157c0 <__ieee754_atan2+0x160>)
 8015796:	e9d1 0100 	ldrd	r0, r1, [r1]
 801579a:	e782      	b.n	80156a2 <__ieee754_atan2+0x42>
 801579c:	a10c      	add	r1, pc, #48	; (adr r1, 80157d0 <__ieee754_atan2+0x170>)
 801579e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157a2:	e77e      	b.n	80156a2 <__ieee754_atan2+0x42>
 80157a4:	2000      	movs	r0, #0
 80157a6:	2100      	movs	r1, #0
 80157a8:	e77b      	b.n	80156a2 <__ieee754_atan2+0x42>
 80157aa:	a107      	add	r1, pc, #28	; (adr r1, 80157c8 <__ieee754_atan2+0x168>)
 80157ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157b0:	e777      	b.n	80156a2 <__ieee754_atan2+0x42>
 80157b2:	bf00      	nop
 80157b4:	f3af 8000 	nop.w
 80157b8:	33145c07 	.word	0x33145c07
 80157bc:	3ca1a626 	.word	0x3ca1a626
 80157c0:	54442d18 	.word	0x54442d18
 80157c4:	400921fb 	.word	0x400921fb
 80157c8:	54442d18 	.word	0x54442d18
 80157cc:	3ff921fb 	.word	0x3ff921fb
 80157d0:	54442d18 	.word	0x54442d18
 80157d4:	3fe921fb 	.word	0x3fe921fb
 80157d8:	08019fd0 	.word	0x08019fd0
 80157dc:	08019fe8 	.word	0x08019fe8
 80157e0:	54442d18 	.word	0x54442d18
 80157e4:	c00921fb 	.word	0xc00921fb
 80157e8:	54442d18 	.word	0x54442d18
 80157ec:	bff921fb 	.word	0xbff921fb
 80157f0:	7ff00000 	.word	0x7ff00000

080157f4 <__ieee754_sqrt>:
 80157f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157f8:	ec55 4b10 	vmov	r4, r5, d0
 80157fc:	4e56      	ldr	r6, [pc, #344]	; (8015958 <__ieee754_sqrt+0x164>)
 80157fe:	43ae      	bics	r6, r5
 8015800:	ee10 0a10 	vmov	r0, s0
 8015804:	ee10 3a10 	vmov	r3, s0
 8015808:	4629      	mov	r1, r5
 801580a:	462a      	mov	r2, r5
 801580c:	d110      	bne.n	8015830 <__ieee754_sqrt+0x3c>
 801580e:	ee10 2a10 	vmov	r2, s0
 8015812:	462b      	mov	r3, r5
 8015814:	f7ea fef0 	bl	80005f8 <__aeabi_dmul>
 8015818:	4602      	mov	r2, r0
 801581a:	460b      	mov	r3, r1
 801581c:	4620      	mov	r0, r4
 801581e:	4629      	mov	r1, r5
 8015820:	f7ea fd34 	bl	800028c <__adddf3>
 8015824:	4604      	mov	r4, r0
 8015826:	460d      	mov	r5, r1
 8015828:	ec45 4b10 	vmov	d0, r4, r5
 801582c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015830:	2d00      	cmp	r5, #0
 8015832:	dc10      	bgt.n	8015856 <__ieee754_sqrt+0x62>
 8015834:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015838:	4330      	orrs	r0, r6
 801583a:	d0f5      	beq.n	8015828 <__ieee754_sqrt+0x34>
 801583c:	b15d      	cbz	r5, 8015856 <__ieee754_sqrt+0x62>
 801583e:	ee10 2a10 	vmov	r2, s0
 8015842:	462b      	mov	r3, r5
 8015844:	ee10 0a10 	vmov	r0, s0
 8015848:	f7ea fd1e 	bl	8000288 <__aeabi_dsub>
 801584c:	4602      	mov	r2, r0
 801584e:	460b      	mov	r3, r1
 8015850:	f7ea fffc 	bl	800084c <__aeabi_ddiv>
 8015854:	e7e6      	b.n	8015824 <__ieee754_sqrt+0x30>
 8015856:	1509      	asrs	r1, r1, #20
 8015858:	d076      	beq.n	8015948 <__ieee754_sqrt+0x154>
 801585a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801585e:	07ce      	lsls	r6, r1, #31
 8015860:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015864:	bf5e      	ittt	pl
 8015866:	0fda      	lsrpl	r2, r3, #31
 8015868:	005b      	lslpl	r3, r3, #1
 801586a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801586e:	0fda      	lsrs	r2, r3, #31
 8015870:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015874:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015878:	2000      	movs	r0, #0
 801587a:	106d      	asrs	r5, r5, #1
 801587c:	005b      	lsls	r3, r3, #1
 801587e:	f04f 0e16 	mov.w	lr, #22
 8015882:	4684      	mov	ip, r0
 8015884:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015888:	eb0c 0401 	add.w	r4, ip, r1
 801588c:	4294      	cmp	r4, r2
 801588e:	bfde      	ittt	le
 8015890:	1b12      	suble	r2, r2, r4
 8015892:	eb04 0c01 	addle.w	ip, r4, r1
 8015896:	1840      	addle	r0, r0, r1
 8015898:	0052      	lsls	r2, r2, #1
 801589a:	f1be 0e01 	subs.w	lr, lr, #1
 801589e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80158a2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80158a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80158aa:	d1ed      	bne.n	8015888 <__ieee754_sqrt+0x94>
 80158ac:	4671      	mov	r1, lr
 80158ae:	2720      	movs	r7, #32
 80158b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80158b4:	4562      	cmp	r2, ip
 80158b6:	eb04 060e 	add.w	r6, r4, lr
 80158ba:	dc02      	bgt.n	80158c2 <__ieee754_sqrt+0xce>
 80158bc:	d113      	bne.n	80158e6 <__ieee754_sqrt+0xf2>
 80158be:	429e      	cmp	r6, r3
 80158c0:	d811      	bhi.n	80158e6 <__ieee754_sqrt+0xf2>
 80158c2:	2e00      	cmp	r6, #0
 80158c4:	eb06 0e04 	add.w	lr, r6, r4
 80158c8:	da43      	bge.n	8015952 <__ieee754_sqrt+0x15e>
 80158ca:	f1be 0f00 	cmp.w	lr, #0
 80158ce:	db40      	blt.n	8015952 <__ieee754_sqrt+0x15e>
 80158d0:	f10c 0801 	add.w	r8, ip, #1
 80158d4:	eba2 020c 	sub.w	r2, r2, ip
 80158d8:	429e      	cmp	r6, r3
 80158da:	bf88      	it	hi
 80158dc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80158e0:	1b9b      	subs	r3, r3, r6
 80158e2:	4421      	add	r1, r4
 80158e4:	46c4      	mov	ip, r8
 80158e6:	0052      	lsls	r2, r2, #1
 80158e8:	3f01      	subs	r7, #1
 80158ea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80158ee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80158f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80158f6:	d1dd      	bne.n	80158b4 <__ieee754_sqrt+0xc0>
 80158f8:	4313      	orrs	r3, r2
 80158fa:	d006      	beq.n	801590a <__ieee754_sqrt+0x116>
 80158fc:	1c4c      	adds	r4, r1, #1
 80158fe:	bf13      	iteet	ne
 8015900:	3101      	addne	r1, #1
 8015902:	3001      	addeq	r0, #1
 8015904:	4639      	moveq	r1, r7
 8015906:	f021 0101 	bicne.w	r1, r1, #1
 801590a:	1043      	asrs	r3, r0, #1
 801590c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015910:	0849      	lsrs	r1, r1, #1
 8015912:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015916:	07c2      	lsls	r2, r0, #31
 8015918:	bf48      	it	mi
 801591a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801591e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015922:	460c      	mov	r4, r1
 8015924:	463d      	mov	r5, r7
 8015926:	e77f      	b.n	8015828 <__ieee754_sqrt+0x34>
 8015928:	0ada      	lsrs	r2, r3, #11
 801592a:	3815      	subs	r0, #21
 801592c:	055b      	lsls	r3, r3, #21
 801592e:	2a00      	cmp	r2, #0
 8015930:	d0fa      	beq.n	8015928 <__ieee754_sqrt+0x134>
 8015932:	02d7      	lsls	r7, r2, #11
 8015934:	d50a      	bpl.n	801594c <__ieee754_sqrt+0x158>
 8015936:	f1c1 0420 	rsb	r4, r1, #32
 801593a:	fa23 f404 	lsr.w	r4, r3, r4
 801593e:	1e4d      	subs	r5, r1, #1
 8015940:	408b      	lsls	r3, r1
 8015942:	4322      	orrs	r2, r4
 8015944:	1b41      	subs	r1, r0, r5
 8015946:	e788      	b.n	801585a <__ieee754_sqrt+0x66>
 8015948:	4608      	mov	r0, r1
 801594a:	e7f0      	b.n	801592e <__ieee754_sqrt+0x13a>
 801594c:	0052      	lsls	r2, r2, #1
 801594e:	3101      	adds	r1, #1
 8015950:	e7ef      	b.n	8015932 <__ieee754_sqrt+0x13e>
 8015952:	46e0      	mov	r8, ip
 8015954:	e7be      	b.n	80158d4 <__ieee754_sqrt+0xe0>
 8015956:	bf00      	nop
 8015958:	7ff00000 	.word	0x7ff00000

0801595c <__ieee754_acosf>:
 801595c:	b508      	push	{r3, lr}
 801595e:	ee10 3a10 	vmov	r3, s0
 8015962:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015966:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801596a:	ed2d 8b0c 	vpush	{d8-d13}
 801596e:	d10a      	bne.n	8015986 <__ieee754_acosf+0x2a>
 8015970:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8015b0c <__ieee754_acosf+0x1b0>
 8015974:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8015b10 <__ieee754_acosf+0x1b4>
 8015978:	2b00      	cmp	r3, #0
 801597a:	bfd8      	it	le
 801597c:	eeb0 0a48 	vmovle.f32	s0, s16
 8015980:	ecbd 8b0c 	vpop	{d8-d13}
 8015984:	bd08      	pop	{r3, pc}
 8015986:	dd04      	ble.n	8015992 <__ieee754_acosf+0x36>
 8015988:	ee30 8a40 	vsub.f32	s16, s0, s0
 801598c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015990:	e7f6      	b.n	8015980 <__ieee754_acosf+0x24>
 8015992:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8015996:	da3e      	bge.n	8015a16 <__ieee754_acosf+0xba>
 8015998:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 801599c:	f340 80b3 	ble.w	8015b06 <__ieee754_acosf+0x1aa>
 80159a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80159a4:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8015b14 <__ieee754_acosf+0x1b8>
 80159a8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8015b18 <__ieee754_acosf+0x1bc>
 80159ac:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8015b1c <__ieee754_acosf+0x1c0>
 80159b0:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8015b20 <__ieee754_acosf+0x1c4>
 80159b4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80159b8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8015b24 <__ieee754_acosf+0x1c8>
 80159bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80159c0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015b28 <__ieee754_acosf+0x1cc>
 80159c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80159c8:	eddf 6a58 	vldr	s13, [pc, #352]	; 8015b2c <__ieee754_acosf+0x1d0>
 80159cc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80159d0:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8015b30 <__ieee754_acosf+0x1d4>
 80159d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80159d8:	eddf 6a56 	vldr	s13, [pc, #344]	; 8015b34 <__ieee754_acosf+0x1d8>
 80159dc:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80159e0:	eddf 6a55 	vldr	s13, [pc, #340]	; 8015b38 <__ieee754_acosf+0x1dc>
 80159e4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80159e8:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8015b3c <__ieee754_acosf+0x1e0>
 80159ec:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80159f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80159f4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80159f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80159fc:	eef0 7a66 	vmov.f32	s15, s13
 8015a00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015a04:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8015b40 <__ieee754_acosf+0x1e4>
 8015a08:	eea0 8a66 	vfms.f32	s16, s0, s13
 8015a0c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8015a10:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015a14:	e7b4      	b.n	8015980 <__ieee754_acosf+0x24>
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	eddf da3e 	vldr	s27, [pc, #248]	; 8015b14 <__ieee754_acosf+0x1b8>
 8015a1c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8015b18 <__ieee754_acosf+0x1bc>
 8015a20:	ed9f ca40 	vldr	s24, [pc, #256]	; 8015b24 <__ieee754_acosf+0x1c8>
 8015a24:	eddf ba40 	vldr	s23, [pc, #256]	; 8015b28 <__ieee754_acosf+0x1cc>
 8015a28:	ed9f ba40 	vldr	s22, [pc, #256]	; 8015b2c <__ieee754_acosf+0x1d0>
 8015a2c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8015b30 <__ieee754_acosf+0x1d4>
 8015a30:	ed9f da40 	vldr	s26, [pc, #256]	; 8015b34 <__ieee754_acosf+0x1d8>
 8015a34:	eddf aa39 	vldr	s21, [pc, #228]	; 8015b1c <__ieee754_acosf+0x1c0>
 8015a38:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8015b38 <__ieee754_acosf+0x1dc>
 8015a3c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8015b3c <__ieee754_acosf+0x1e0>
 8015a40:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015a44:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015a48:	da28      	bge.n	8015a9c <__ieee754_acosf+0x140>
 8015a4a:	ee30 0a09 	vadd.f32	s0, s0, s18
 8015a4e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015a52:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8015a56:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8015a5a:	eeac ca80 	vfma.f32	s24, s25, s0
 8015a5e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8015a62:	eeec ba00 	vfma.f32	s23, s24, s0
 8015a66:	eeea 9a00 	vfma.f32	s19, s20, s0
 8015a6a:	eeab ba80 	vfma.f32	s22, s23, s0
 8015a6e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8015a72:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8015a76:	ee68 8a80 	vmul.f32	s17, s17, s0
 8015a7a:	f000 fb2b 	bl	80160d4 <__ieee754_sqrtf>
 8015a7e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8015a82:	eddf 7a30 	vldr	s15, [pc, #192]	; 8015b44 <__ieee754_acosf+0x1e8>
 8015a86:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015a8a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015a8e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015a92:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8015b48 <__ieee754_acosf+0x1ec>
 8015a96:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015a9a:	e771      	b.n	8015980 <__ieee754_acosf+0x24>
 8015a9c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8015aa0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015aa4:	eeb0 0a48 	vmov.f32	s0, s16
 8015aa8:	f000 fb14 	bl	80160d4 <__ieee754_sqrtf>
 8015aac:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8015ab0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8015ab4:	eeac ca88 	vfma.f32	s24, s25, s16
 8015ab8:	eeaa aa88 	vfma.f32	s20, s21, s16
 8015abc:	eeec ba08 	vfma.f32	s23, s24, s16
 8015ac0:	ee10 3a10 	vmov	r3, s0
 8015ac4:	eeab ba88 	vfma.f32	s22, s23, s16
 8015ac8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015acc:	f023 030f 	bic.w	r3, r3, #15
 8015ad0:	eeea 9a08 	vfma.f32	s19, s20, s16
 8015ad4:	ee07 3a90 	vmov	s15, r3
 8015ad8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8015adc:	eeb0 6a48 	vmov.f32	s12, s16
 8015ae0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8015ae4:	eea9 9a88 	vfma.f32	s18, s19, s16
 8015ae8:	ee70 6a27 	vadd.f32	s13, s0, s15
 8015aec:	ee68 8a88 	vmul.f32	s17, s17, s16
 8015af0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015af4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8015af8:	eea0 7a26 	vfma.f32	s14, s0, s13
 8015afc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015b00:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015b04:	e73c      	b.n	8015980 <__ieee754_acosf+0x24>
 8015b06:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8015b4c <__ieee754_acosf+0x1f0>
 8015b0a:	e739      	b.n	8015980 <__ieee754_acosf+0x24>
 8015b0c:	00000000 	.word	0x00000000
 8015b10:	40490fdb 	.word	0x40490fdb
 8015b14:	3811ef08 	.word	0x3811ef08
 8015b18:	3a4f7f04 	.word	0x3a4f7f04
 8015b1c:	bf303361 	.word	0xbf303361
 8015b20:	33a22168 	.word	0x33a22168
 8015b24:	bd241146 	.word	0xbd241146
 8015b28:	3e4e0aa8 	.word	0x3e4e0aa8
 8015b2c:	bea6b090 	.word	0xbea6b090
 8015b30:	3e2aaaab 	.word	0x3e2aaaab
 8015b34:	3d9dc62e 	.word	0x3d9dc62e
 8015b38:	4001572d 	.word	0x4001572d
 8015b3c:	c019d139 	.word	0xc019d139
 8015b40:	3fc90fda 	.word	0x3fc90fda
 8015b44:	b3a22168 	.word	0xb3a22168
 8015b48:	40490fda 	.word	0x40490fda
 8015b4c:	3fc90fdb 	.word	0x3fc90fdb

08015b50 <__ieee754_asinf>:
 8015b50:	b538      	push	{r3, r4, r5, lr}
 8015b52:	ee10 5a10 	vmov	r5, s0
 8015b56:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015b5a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015b5e:	ed2d 8b04 	vpush	{d8-d9}
 8015b62:	d10c      	bne.n	8015b7e <__ieee754_asinf+0x2e>
 8015b64:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8015cdc <__ieee754_asinf+0x18c>
 8015b68:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8015ce0 <__ieee754_asinf+0x190>
 8015b6c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015b70:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015b74:	eeb0 0a67 	vmov.f32	s0, s15
 8015b78:	ecbd 8b04 	vpop	{d8-d9}
 8015b7c:	bd38      	pop	{r3, r4, r5, pc}
 8015b7e:	dd04      	ble.n	8015b8a <__ieee754_asinf+0x3a>
 8015b80:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015b84:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015b88:	e7f6      	b.n	8015b78 <__ieee754_asinf+0x28>
 8015b8a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8015b8e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015b92:	da0b      	bge.n	8015bac <__ieee754_asinf+0x5c>
 8015b94:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8015b98:	da52      	bge.n	8015c40 <__ieee754_asinf+0xf0>
 8015b9a:	eddf 7a52 	vldr	s15, [pc, #328]	; 8015ce4 <__ieee754_asinf+0x194>
 8015b9e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015ba2:	eef4 7ae8 	vcmpe.f32	s15, s17
 8015ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015baa:	dce5      	bgt.n	8015b78 <__ieee754_asinf+0x28>
 8015bac:	f001 f92a 	bl	8016e04 <fabsf>
 8015bb0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8015bb4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8015bb8:	ee20 8a08 	vmul.f32	s16, s0, s16
 8015bbc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8015ce8 <__ieee754_asinf+0x198>
 8015bc0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8015cec <__ieee754_asinf+0x19c>
 8015bc4:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8015cf0 <__ieee754_asinf+0x1a0>
 8015bc8:	eea8 7a27 	vfma.f32	s14, s16, s15
 8015bcc:	eddf 7a49 	vldr	s15, [pc, #292]	; 8015cf4 <__ieee754_asinf+0x1a4>
 8015bd0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015bd4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8015cf8 <__ieee754_asinf+0x1a8>
 8015bd8:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015bdc:	eddf 7a47 	vldr	s15, [pc, #284]	; 8015cfc <__ieee754_asinf+0x1ac>
 8015be0:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015be4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8015d00 <__ieee754_asinf+0x1b0>
 8015be8:	eea7 9a88 	vfma.f32	s18, s15, s16
 8015bec:	eddf 7a45 	vldr	s15, [pc, #276]	; 8015d04 <__ieee754_asinf+0x1b4>
 8015bf0:	eee8 7a07 	vfma.f32	s15, s16, s14
 8015bf4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8015d08 <__ieee754_asinf+0x1b8>
 8015bf8:	eea7 7a88 	vfma.f32	s14, s15, s16
 8015bfc:	eddf 7a43 	vldr	s15, [pc, #268]	; 8015d0c <__ieee754_asinf+0x1bc>
 8015c00:	eee7 7a08 	vfma.f32	s15, s14, s16
 8015c04:	eeb0 0a48 	vmov.f32	s0, s16
 8015c08:	eee7 8a88 	vfma.f32	s17, s15, s16
 8015c0c:	f000 fa62 	bl	80160d4 <__ieee754_sqrtf>
 8015c10:	4b3f      	ldr	r3, [pc, #252]	; (8015d10 <__ieee754_asinf+0x1c0>)
 8015c12:	ee29 9a08 	vmul.f32	s18, s18, s16
 8015c16:	429c      	cmp	r4, r3
 8015c18:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8015c1c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015c20:	dd3d      	ble.n	8015c9e <__ieee754_asinf+0x14e>
 8015c22:	eea0 0a06 	vfma.f32	s0, s0, s12
 8015c26:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8015d14 <__ieee754_asinf+0x1c4>
 8015c2a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8015c2e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015ce0 <__ieee754_asinf+0x190>
 8015c32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015c36:	2d00      	cmp	r5, #0
 8015c38:	bfd8      	it	le
 8015c3a:	eeb1 0a40 	vnegle.f32	s0, s0
 8015c3e:	e79b      	b.n	8015b78 <__ieee754_asinf+0x28>
 8015c40:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015c44:	eddf 6a28 	vldr	s13, [pc, #160]	; 8015ce8 <__ieee754_asinf+0x198>
 8015c48:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8015cec <__ieee754_asinf+0x19c>
 8015c4c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8015d00 <__ieee754_asinf+0x1b0>
 8015c50:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015c54:	eddf 6a27 	vldr	s13, [pc, #156]	; 8015cf4 <__ieee754_asinf+0x1a4>
 8015c58:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015c5c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8015cf8 <__ieee754_asinf+0x1a8>
 8015c60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015c64:	eddf 6a25 	vldr	s13, [pc, #148]	; 8015cfc <__ieee754_asinf+0x1ac>
 8015c68:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015c6c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8015cf0 <__ieee754_asinf+0x1a0>
 8015c70:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015c74:	eddf 6a23 	vldr	s13, [pc, #140]	; 8015d04 <__ieee754_asinf+0x1b4>
 8015c78:	eee7 6a86 	vfma.f32	s13, s15, s12
 8015c7c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8015d08 <__ieee754_asinf+0x1b8>
 8015c80:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015c84:	eddf 6a21 	vldr	s13, [pc, #132]	; 8015d0c <__ieee754_asinf+0x1bc>
 8015c88:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015c90:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8015c94:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8015c98:	eea0 0a27 	vfma.f32	s0, s0, s15
 8015c9c:	e76c      	b.n	8015b78 <__ieee754_asinf+0x28>
 8015c9e:	ee10 3a10 	vmov	r3, s0
 8015ca2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015ca6:	f023 030f 	bic.w	r3, r3, #15
 8015caa:	ee07 3a10 	vmov	s14, r3
 8015cae:	eea7 8a47 	vfms.f32	s16, s14, s14
 8015cb2:	ee70 7a07 	vadd.f32	s15, s0, s14
 8015cb6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015cba:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8015cbe:	eddf 7a07 	vldr	s15, [pc, #28]	; 8015cdc <__ieee754_asinf+0x18c>
 8015cc2:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8015cc6:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8015cca:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015d18 <__ieee754_asinf+0x1c8>
 8015cce:	eeb0 6a40 	vmov.f32	s12, s0
 8015cd2:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015cd6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015cda:	e7aa      	b.n	8015c32 <__ieee754_asinf+0xe2>
 8015cdc:	b33bbd2e 	.word	0xb33bbd2e
 8015ce0:	3fc90fdb 	.word	0x3fc90fdb
 8015ce4:	7149f2ca 	.word	0x7149f2ca
 8015ce8:	3811ef08 	.word	0x3811ef08
 8015cec:	3a4f7f04 	.word	0x3a4f7f04
 8015cf0:	3e2aaaab 	.word	0x3e2aaaab
 8015cf4:	bd241146 	.word	0xbd241146
 8015cf8:	3e4e0aa8 	.word	0x3e4e0aa8
 8015cfc:	bea6b090 	.word	0xbea6b090
 8015d00:	3d9dc62e 	.word	0x3d9dc62e
 8015d04:	bf303361 	.word	0xbf303361
 8015d08:	4001572d 	.word	0x4001572d
 8015d0c:	c019d139 	.word	0xc019d139
 8015d10:	3f799999 	.word	0x3f799999
 8015d14:	333bbd2e 	.word	0x333bbd2e
 8015d18:	3f490fdb 	.word	0x3f490fdb

08015d1c <__ieee754_atan2f>:
 8015d1c:	ee10 2a90 	vmov	r2, s1
 8015d20:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8015d24:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015d28:	b510      	push	{r4, lr}
 8015d2a:	eef0 7a40 	vmov.f32	s15, s0
 8015d2e:	dc06      	bgt.n	8015d3e <__ieee754_atan2f+0x22>
 8015d30:	ee10 0a10 	vmov	r0, s0
 8015d34:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015d38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015d3c:	dd04      	ble.n	8015d48 <__ieee754_atan2f+0x2c>
 8015d3e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8015d42:	eeb0 0a67 	vmov.f32	s0, s15
 8015d46:	bd10      	pop	{r4, pc}
 8015d48:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015d4c:	d103      	bne.n	8015d56 <__ieee754_atan2f+0x3a>
 8015d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d52:	f000 bf83 	b.w	8016c5c <atanf>
 8015d56:	1794      	asrs	r4, r2, #30
 8015d58:	f004 0402 	and.w	r4, r4, #2
 8015d5c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8015d60:	b943      	cbnz	r3, 8015d74 <__ieee754_atan2f+0x58>
 8015d62:	2c02      	cmp	r4, #2
 8015d64:	d05e      	beq.n	8015e24 <__ieee754_atan2f+0x108>
 8015d66:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8015e38 <__ieee754_atan2f+0x11c>
 8015d6a:	2c03      	cmp	r4, #3
 8015d6c:	bf08      	it	eq
 8015d6e:	eef0 7a47 	vmoveq.f32	s15, s14
 8015d72:	e7e6      	b.n	8015d42 <__ieee754_atan2f+0x26>
 8015d74:	b941      	cbnz	r1, 8015d88 <__ieee754_atan2f+0x6c>
 8015d76:	eddf 7a31 	vldr	s15, [pc, #196]	; 8015e3c <__ieee754_atan2f+0x120>
 8015d7a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8015e40 <__ieee754_atan2f+0x124>
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	bfb8      	it	lt
 8015d82:	eef0 7a40 	vmovlt.f32	s15, s0
 8015d86:	e7dc      	b.n	8015d42 <__ieee754_atan2f+0x26>
 8015d88:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8015d8c:	d110      	bne.n	8015db0 <__ieee754_atan2f+0x94>
 8015d8e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015d92:	f104 34ff 	add.w	r4, r4, #4294967295
 8015d96:	d107      	bne.n	8015da8 <__ieee754_atan2f+0x8c>
 8015d98:	2c02      	cmp	r4, #2
 8015d9a:	d846      	bhi.n	8015e2a <__ieee754_atan2f+0x10e>
 8015d9c:	4b29      	ldr	r3, [pc, #164]	; (8015e44 <__ieee754_atan2f+0x128>)
 8015d9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015da2:	edd4 7a00 	vldr	s15, [r4]
 8015da6:	e7cc      	b.n	8015d42 <__ieee754_atan2f+0x26>
 8015da8:	2c02      	cmp	r4, #2
 8015daa:	d841      	bhi.n	8015e30 <__ieee754_atan2f+0x114>
 8015dac:	4b26      	ldr	r3, [pc, #152]	; (8015e48 <__ieee754_atan2f+0x12c>)
 8015dae:	e7f6      	b.n	8015d9e <__ieee754_atan2f+0x82>
 8015db0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015db4:	d0df      	beq.n	8015d76 <__ieee754_atan2f+0x5a>
 8015db6:	1a5b      	subs	r3, r3, r1
 8015db8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8015dbc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8015dc0:	da1a      	bge.n	8015df8 <__ieee754_atan2f+0xdc>
 8015dc2:	2a00      	cmp	r2, #0
 8015dc4:	da01      	bge.n	8015dca <__ieee754_atan2f+0xae>
 8015dc6:	313c      	adds	r1, #60	; 0x3c
 8015dc8:	db19      	blt.n	8015dfe <__ieee754_atan2f+0xe2>
 8015dca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8015dce:	f001 f819 	bl	8016e04 <fabsf>
 8015dd2:	f000 ff43 	bl	8016c5c <atanf>
 8015dd6:	eef0 7a40 	vmov.f32	s15, s0
 8015dda:	2c01      	cmp	r4, #1
 8015ddc:	d012      	beq.n	8015e04 <__ieee754_atan2f+0xe8>
 8015dde:	2c02      	cmp	r4, #2
 8015de0:	d017      	beq.n	8015e12 <__ieee754_atan2f+0xf6>
 8015de2:	2c00      	cmp	r4, #0
 8015de4:	d0ad      	beq.n	8015d42 <__ieee754_atan2f+0x26>
 8015de6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8015e4c <__ieee754_atan2f+0x130>
 8015dea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015dee:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8015e50 <__ieee754_atan2f+0x134>
 8015df2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015df6:	e7a4      	b.n	8015d42 <__ieee754_atan2f+0x26>
 8015df8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015e3c <__ieee754_atan2f+0x120>
 8015dfc:	e7ed      	b.n	8015dda <__ieee754_atan2f+0xbe>
 8015dfe:	eddf 7a15 	vldr	s15, [pc, #84]	; 8015e54 <__ieee754_atan2f+0x138>
 8015e02:	e7ea      	b.n	8015dda <__ieee754_atan2f+0xbe>
 8015e04:	ee17 3a90 	vmov	r3, s15
 8015e08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015e0c:	ee07 3a90 	vmov	s15, r3
 8015e10:	e797      	b.n	8015d42 <__ieee754_atan2f+0x26>
 8015e12:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8015e4c <__ieee754_atan2f+0x130>
 8015e16:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015e1a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8015e50 <__ieee754_atan2f+0x134>
 8015e1e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015e22:	e78e      	b.n	8015d42 <__ieee754_atan2f+0x26>
 8015e24:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015e50 <__ieee754_atan2f+0x134>
 8015e28:	e78b      	b.n	8015d42 <__ieee754_atan2f+0x26>
 8015e2a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8015e58 <__ieee754_atan2f+0x13c>
 8015e2e:	e788      	b.n	8015d42 <__ieee754_atan2f+0x26>
 8015e30:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015e54 <__ieee754_atan2f+0x138>
 8015e34:	e785      	b.n	8015d42 <__ieee754_atan2f+0x26>
 8015e36:	bf00      	nop
 8015e38:	c0490fdb 	.word	0xc0490fdb
 8015e3c:	3fc90fdb 	.word	0x3fc90fdb
 8015e40:	bfc90fdb 	.word	0xbfc90fdb
 8015e44:	0801a000 	.word	0x0801a000
 8015e48:	0801a00c 	.word	0x0801a00c
 8015e4c:	33bbbd2e 	.word	0x33bbbd2e
 8015e50:	40490fdb 	.word	0x40490fdb
 8015e54:	00000000 	.word	0x00000000
 8015e58:	3f490fdb 	.word	0x3f490fdb

08015e5c <__ieee754_rem_pio2f>:
 8015e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e5e:	ee10 6a10 	vmov	r6, s0
 8015e62:	4b8e      	ldr	r3, [pc, #568]	; (801609c <__ieee754_rem_pio2f+0x240>)
 8015e64:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8015e68:	429d      	cmp	r5, r3
 8015e6a:	b087      	sub	sp, #28
 8015e6c:	eef0 7a40 	vmov.f32	s15, s0
 8015e70:	4604      	mov	r4, r0
 8015e72:	dc05      	bgt.n	8015e80 <__ieee754_rem_pio2f+0x24>
 8015e74:	2300      	movs	r3, #0
 8015e76:	ed80 0a00 	vstr	s0, [r0]
 8015e7a:	6043      	str	r3, [r0, #4]
 8015e7c:	2000      	movs	r0, #0
 8015e7e:	e01a      	b.n	8015eb6 <__ieee754_rem_pio2f+0x5a>
 8015e80:	4b87      	ldr	r3, [pc, #540]	; (80160a0 <__ieee754_rem_pio2f+0x244>)
 8015e82:	429d      	cmp	r5, r3
 8015e84:	dc46      	bgt.n	8015f14 <__ieee754_rem_pio2f+0xb8>
 8015e86:	2e00      	cmp	r6, #0
 8015e88:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80160a4 <__ieee754_rem_pio2f+0x248>
 8015e8c:	4b86      	ldr	r3, [pc, #536]	; (80160a8 <__ieee754_rem_pio2f+0x24c>)
 8015e8e:	f025 050f 	bic.w	r5, r5, #15
 8015e92:	dd1f      	ble.n	8015ed4 <__ieee754_rem_pio2f+0x78>
 8015e94:	429d      	cmp	r5, r3
 8015e96:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015e9a:	d00e      	beq.n	8015eba <__ieee754_rem_pio2f+0x5e>
 8015e9c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80160ac <__ieee754_rem_pio2f+0x250>
 8015ea0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8015ea4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015ea8:	ed80 0a00 	vstr	s0, [r0]
 8015eac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015eb0:	2001      	movs	r0, #1
 8015eb2:	edc4 7a01 	vstr	s15, [r4, #4]
 8015eb6:	b007      	add	sp, #28
 8015eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015eba:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80160b0 <__ieee754_rem_pio2f+0x254>
 8015ebe:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80160b4 <__ieee754_rem_pio2f+0x258>
 8015ec2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015ec6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8015eca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015ece:	edc0 6a00 	vstr	s13, [r0]
 8015ed2:	e7eb      	b.n	8015eac <__ieee754_rem_pio2f+0x50>
 8015ed4:	429d      	cmp	r5, r3
 8015ed6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015eda:	d00e      	beq.n	8015efa <__ieee754_rem_pio2f+0x9e>
 8015edc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80160ac <__ieee754_rem_pio2f+0x250>
 8015ee0:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015ee4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015ee8:	ed80 0a00 	vstr	s0, [r0]
 8015eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ef4:	edc4 7a01 	vstr	s15, [r4, #4]
 8015ef8:	e7dd      	b.n	8015eb6 <__ieee754_rem_pio2f+0x5a>
 8015efa:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80160b0 <__ieee754_rem_pio2f+0x254>
 8015efe:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80160b4 <__ieee754_rem_pio2f+0x258>
 8015f02:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015f06:	ee77 6a87 	vadd.f32	s13, s15, s14
 8015f0a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015f0e:	edc0 6a00 	vstr	s13, [r0]
 8015f12:	e7eb      	b.n	8015eec <__ieee754_rem_pio2f+0x90>
 8015f14:	4b68      	ldr	r3, [pc, #416]	; (80160b8 <__ieee754_rem_pio2f+0x25c>)
 8015f16:	429d      	cmp	r5, r3
 8015f18:	dc72      	bgt.n	8016000 <__ieee754_rem_pio2f+0x1a4>
 8015f1a:	f000 ff73 	bl	8016e04 <fabsf>
 8015f1e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80160bc <__ieee754_rem_pio2f+0x260>
 8015f22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015f26:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015f2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015f32:	ee17 0a90 	vmov	r0, s15
 8015f36:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80160a4 <__ieee754_rem_pio2f+0x248>
 8015f3a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015f3e:	281f      	cmp	r0, #31
 8015f40:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80160ac <__ieee754_rem_pio2f+0x250>
 8015f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015f48:	eeb1 6a47 	vneg.f32	s12, s14
 8015f4c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015f50:	ee16 2a90 	vmov	r2, s13
 8015f54:	dc1c      	bgt.n	8015f90 <__ieee754_rem_pio2f+0x134>
 8015f56:	495a      	ldr	r1, [pc, #360]	; (80160c0 <__ieee754_rem_pio2f+0x264>)
 8015f58:	1e47      	subs	r7, r0, #1
 8015f5a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8015f5e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8015f62:	428b      	cmp	r3, r1
 8015f64:	d014      	beq.n	8015f90 <__ieee754_rem_pio2f+0x134>
 8015f66:	6022      	str	r2, [r4, #0]
 8015f68:	ed94 7a00 	vldr	s14, [r4]
 8015f6c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8015f70:	2e00      	cmp	r6, #0
 8015f72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015f76:	ed84 0a01 	vstr	s0, [r4, #4]
 8015f7a:	da9c      	bge.n	8015eb6 <__ieee754_rem_pio2f+0x5a>
 8015f7c:	eeb1 7a47 	vneg.f32	s14, s14
 8015f80:	eeb1 0a40 	vneg.f32	s0, s0
 8015f84:	ed84 7a00 	vstr	s14, [r4]
 8015f88:	ed84 0a01 	vstr	s0, [r4, #4]
 8015f8c:	4240      	negs	r0, r0
 8015f8e:	e792      	b.n	8015eb6 <__ieee754_rem_pio2f+0x5a>
 8015f90:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015f94:	15eb      	asrs	r3, r5, #23
 8015f96:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8015f9a:	2d08      	cmp	r5, #8
 8015f9c:	dde3      	ble.n	8015f66 <__ieee754_rem_pio2f+0x10a>
 8015f9e:	eddf 7a44 	vldr	s15, [pc, #272]	; 80160b0 <__ieee754_rem_pio2f+0x254>
 8015fa2:	eef0 6a40 	vmov.f32	s13, s0
 8015fa6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015faa:	ee30 0a66 	vsub.f32	s0, s0, s13
 8015fae:	eea6 0a27 	vfma.f32	s0, s12, s15
 8015fb2:	eddf 7a40 	vldr	s15, [pc, #256]	; 80160b4 <__ieee754_rem_pio2f+0x258>
 8015fb6:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8015fba:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8015fbe:	eef0 7a40 	vmov.f32	s15, s0
 8015fc2:	ee15 2a90 	vmov	r2, s11
 8015fc6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8015fca:	1a5b      	subs	r3, r3, r1
 8015fcc:	2b19      	cmp	r3, #25
 8015fce:	dc04      	bgt.n	8015fda <__ieee754_rem_pio2f+0x17e>
 8015fd0:	edc4 5a00 	vstr	s11, [r4]
 8015fd4:	eeb0 0a66 	vmov.f32	s0, s13
 8015fd8:	e7c6      	b.n	8015f68 <__ieee754_rem_pio2f+0x10c>
 8015fda:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80160c4 <__ieee754_rem_pio2f+0x268>
 8015fde:	eeb0 0a66 	vmov.f32	s0, s13
 8015fe2:	eea6 0a25 	vfma.f32	s0, s12, s11
 8015fe6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8015fea:	eddf 6a37 	vldr	s13, [pc, #220]	; 80160c8 <__ieee754_rem_pio2f+0x26c>
 8015fee:	eee6 7a25 	vfma.f32	s15, s12, s11
 8015ff2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8015ff6:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015ffa:	ed84 7a00 	vstr	s14, [r4]
 8015ffe:	e7b3      	b.n	8015f68 <__ieee754_rem_pio2f+0x10c>
 8016000:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8016004:	db06      	blt.n	8016014 <__ieee754_rem_pio2f+0x1b8>
 8016006:	ee70 7a40 	vsub.f32	s15, s0, s0
 801600a:	edc0 7a01 	vstr	s15, [r0, #4]
 801600e:	edc0 7a00 	vstr	s15, [r0]
 8016012:	e733      	b.n	8015e7c <__ieee754_rem_pio2f+0x20>
 8016014:	15ea      	asrs	r2, r5, #23
 8016016:	3a86      	subs	r2, #134	; 0x86
 8016018:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801601c:	ee07 3a90 	vmov	s15, r3
 8016020:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016024:	eddf 6a29 	vldr	s13, [pc, #164]	; 80160cc <__ieee754_rem_pio2f+0x270>
 8016028:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801602c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016030:	ed8d 7a03 	vstr	s14, [sp, #12]
 8016034:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016038:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801603c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016044:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016048:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801604c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016054:	edcd 7a05 	vstr	s15, [sp, #20]
 8016058:	d11e      	bne.n	8016098 <__ieee754_rem_pio2f+0x23c>
 801605a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801605e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016062:	bf14      	ite	ne
 8016064:	2302      	movne	r3, #2
 8016066:	2301      	moveq	r3, #1
 8016068:	4919      	ldr	r1, [pc, #100]	; (80160d0 <__ieee754_rem_pio2f+0x274>)
 801606a:	9101      	str	r1, [sp, #4]
 801606c:	2102      	movs	r1, #2
 801606e:	9100      	str	r1, [sp, #0]
 8016070:	a803      	add	r0, sp, #12
 8016072:	4621      	mov	r1, r4
 8016074:	f000 f892 	bl	801619c <__kernel_rem_pio2f>
 8016078:	2e00      	cmp	r6, #0
 801607a:	f6bf af1c 	bge.w	8015eb6 <__ieee754_rem_pio2f+0x5a>
 801607e:	edd4 7a00 	vldr	s15, [r4]
 8016082:	eef1 7a67 	vneg.f32	s15, s15
 8016086:	edc4 7a00 	vstr	s15, [r4]
 801608a:	edd4 7a01 	vldr	s15, [r4, #4]
 801608e:	eef1 7a67 	vneg.f32	s15, s15
 8016092:	edc4 7a01 	vstr	s15, [r4, #4]
 8016096:	e779      	b.n	8015f8c <__ieee754_rem_pio2f+0x130>
 8016098:	2303      	movs	r3, #3
 801609a:	e7e5      	b.n	8016068 <__ieee754_rem_pio2f+0x20c>
 801609c:	3f490fd8 	.word	0x3f490fd8
 80160a0:	4016cbe3 	.word	0x4016cbe3
 80160a4:	3fc90f80 	.word	0x3fc90f80
 80160a8:	3fc90fd0 	.word	0x3fc90fd0
 80160ac:	37354443 	.word	0x37354443
 80160b0:	37354400 	.word	0x37354400
 80160b4:	2e85a308 	.word	0x2e85a308
 80160b8:	43490f80 	.word	0x43490f80
 80160bc:	3f22f984 	.word	0x3f22f984
 80160c0:	0801a018 	.word	0x0801a018
 80160c4:	2e85a300 	.word	0x2e85a300
 80160c8:	248d3132 	.word	0x248d3132
 80160cc:	43800000 	.word	0x43800000
 80160d0:	0801a098 	.word	0x0801a098

080160d4 <__ieee754_sqrtf>:
 80160d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80160d8:	4770      	bx	lr
	...

080160dc <__kernel_cosf>:
 80160dc:	ee10 3a10 	vmov	r3, s0
 80160e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80160e4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80160e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80160ec:	da05      	bge.n	80160fa <__kernel_cosf+0x1e>
 80160ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80160f2:	ee17 2a90 	vmov	r2, s15
 80160f6:	2a00      	cmp	r2, #0
 80160f8:	d03d      	beq.n	8016176 <__kernel_cosf+0x9a>
 80160fa:	ee60 5a00 	vmul.f32	s11, s0, s0
 80160fe:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801617c <__kernel_cosf+0xa0>
 8016102:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8016180 <__kernel_cosf+0xa4>
 8016106:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8016184 <__kernel_cosf+0xa8>
 801610a:	4a1f      	ldr	r2, [pc, #124]	; (8016188 <__kernel_cosf+0xac>)
 801610c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016110:	4293      	cmp	r3, r2
 8016112:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801618c <__kernel_cosf+0xb0>
 8016116:	eee7 7a25 	vfma.f32	s15, s14, s11
 801611a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8016190 <__kernel_cosf+0xb4>
 801611e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016122:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8016194 <__kernel_cosf+0xb8>
 8016126:	eee7 7a25 	vfma.f32	s15, s14, s11
 801612a:	eeb0 7a66 	vmov.f32	s14, s13
 801612e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016132:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016136:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801613a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801613e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8016142:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8016146:	dc04      	bgt.n	8016152 <__kernel_cosf+0x76>
 8016148:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801614c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8016150:	4770      	bx	lr
 8016152:	4a11      	ldr	r2, [pc, #68]	; (8016198 <__kernel_cosf+0xbc>)
 8016154:	4293      	cmp	r3, r2
 8016156:	bfda      	itte	le
 8016158:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801615c:	ee06 3a90 	vmovle	s13, r3
 8016160:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8016164:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016168:	ee36 0a66 	vsub.f32	s0, s12, s13
 801616c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016170:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016174:	4770      	bx	lr
 8016176:	eeb0 0a46 	vmov.f32	s0, s12
 801617a:	4770      	bx	lr
 801617c:	ad47d74e 	.word	0xad47d74e
 8016180:	310f74f6 	.word	0x310f74f6
 8016184:	3d2aaaab 	.word	0x3d2aaaab
 8016188:	3e999999 	.word	0x3e999999
 801618c:	b493f27c 	.word	0xb493f27c
 8016190:	37d00d01 	.word	0x37d00d01
 8016194:	bab60b61 	.word	0xbab60b61
 8016198:	3f480000 	.word	0x3f480000

0801619c <__kernel_rem_pio2f>:
 801619c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161a0:	ed2d 8b04 	vpush	{d8-d9}
 80161a4:	b0d7      	sub	sp, #348	; 0x15c
 80161a6:	4616      	mov	r6, r2
 80161a8:	4698      	mov	r8, r3
 80161aa:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80161ac:	4bbb      	ldr	r3, [pc, #748]	; (801649c <__kernel_rem_pio2f+0x300>)
 80161ae:	9001      	str	r0, [sp, #4]
 80161b0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80161b4:	1d33      	adds	r3, r6, #4
 80161b6:	460d      	mov	r5, r1
 80161b8:	f108 39ff 	add.w	r9, r8, #4294967295
 80161bc:	db29      	blt.n	8016212 <__kernel_rem_pio2f+0x76>
 80161be:	1ef1      	subs	r1, r6, #3
 80161c0:	bf48      	it	mi
 80161c2:	1d31      	addmi	r1, r6, #4
 80161c4:	10c9      	asrs	r1, r1, #3
 80161c6:	1c4c      	adds	r4, r1, #1
 80161c8:	00e3      	lsls	r3, r4, #3
 80161ca:	9302      	str	r3, [sp, #8]
 80161cc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80161ce:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80164ac <__kernel_rem_pio2f+0x310>
 80161d2:	eba1 0009 	sub.w	r0, r1, r9
 80161d6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80161da:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80161de:	eb07 0c09 	add.w	ip, r7, r9
 80161e2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80161e6:	2300      	movs	r3, #0
 80161e8:	4563      	cmp	r3, ip
 80161ea:	dd14      	ble.n	8016216 <__kernel_rem_pio2f+0x7a>
 80161ec:	ab1a      	add	r3, sp, #104	; 0x68
 80161ee:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80161f2:	46cc      	mov	ip, r9
 80161f4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80161f8:	f1c8 0b01 	rsb	fp, r8, #1
 80161fc:	eb0b 020c 	add.w	r2, fp, ip
 8016200:	4297      	cmp	r7, r2
 8016202:	db27      	blt.n	8016254 <__kernel_rem_pio2f+0xb8>
 8016204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016208:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80164ac <__kernel_rem_pio2f+0x310>
 801620c:	4618      	mov	r0, r3
 801620e:	2200      	movs	r2, #0
 8016210:	e016      	b.n	8016240 <__kernel_rem_pio2f+0xa4>
 8016212:	2100      	movs	r1, #0
 8016214:	e7d7      	b.n	80161c6 <__kernel_rem_pio2f+0x2a>
 8016216:	42d8      	cmn	r0, r3
 8016218:	bf5d      	ittte	pl
 801621a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801621e:	ee07 2a90 	vmovpl	s15, r2
 8016222:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8016226:	eef0 7a47 	vmovmi.f32	s15, s14
 801622a:	ecea 7a01 	vstmia	sl!, {s15}
 801622e:	3301      	adds	r3, #1
 8016230:	e7da      	b.n	80161e8 <__kernel_rem_pio2f+0x4c>
 8016232:	ecfe 6a01 	vldmia	lr!, {s13}
 8016236:	ed90 7a00 	vldr	s14, [r0]
 801623a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801623e:	3201      	adds	r2, #1
 8016240:	454a      	cmp	r2, r9
 8016242:	f1a0 0004 	sub.w	r0, r0, #4
 8016246:	ddf4      	ble.n	8016232 <__kernel_rem_pio2f+0x96>
 8016248:	ecea 7a01 	vstmia	sl!, {s15}
 801624c:	3304      	adds	r3, #4
 801624e:	f10c 0c01 	add.w	ip, ip, #1
 8016252:	e7d3      	b.n	80161fc <__kernel_rem_pio2f+0x60>
 8016254:	ab06      	add	r3, sp, #24
 8016256:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801625a:	9304      	str	r3, [sp, #16]
 801625c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801625e:	eddf 8a92 	vldr	s17, [pc, #584]	; 80164a8 <__kernel_rem_pio2f+0x30c>
 8016262:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80164a4 <__kernel_rem_pio2f+0x308>
 8016266:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801626a:	9303      	str	r3, [sp, #12]
 801626c:	46ba      	mov	sl, r7
 801626e:	ab56      	add	r3, sp, #344	; 0x158
 8016270:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8016274:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8016278:	ab06      	add	r3, sp, #24
 801627a:	4618      	mov	r0, r3
 801627c:	4652      	mov	r2, sl
 801627e:	2a00      	cmp	r2, #0
 8016280:	dc51      	bgt.n	8016326 <__kernel_rem_pio2f+0x18a>
 8016282:	4620      	mov	r0, r4
 8016284:	9305      	str	r3, [sp, #20]
 8016286:	f000 fe0d 	bl	8016ea4 <scalbnf>
 801628a:	eeb0 8a40 	vmov.f32	s16, s0
 801628e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8016292:	ee28 0a00 	vmul.f32	s0, s16, s0
 8016296:	f000 fdbd 	bl	8016e14 <floorf>
 801629a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801629e:	eea0 8a67 	vfms.f32	s16, s0, s15
 80162a2:	2c00      	cmp	r4, #0
 80162a4:	9b05      	ldr	r3, [sp, #20]
 80162a6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80162aa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80162ae:	edcd 7a00 	vstr	s15, [sp]
 80162b2:	ee38 8a40 	vsub.f32	s16, s16, s0
 80162b6:	dd4b      	ble.n	8016350 <__kernel_rem_pio2f+0x1b4>
 80162b8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80162bc:	aa06      	add	r2, sp, #24
 80162be:	f1c4 0e08 	rsb	lr, r4, #8
 80162c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80162c6:	ee17 1a90 	vmov	r1, s15
 80162ca:	fa42 f00e 	asr.w	r0, r2, lr
 80162ce:	4401      	add	r1, r0
 80162d0:	9100      	str	r1, [sp, #0]
 80162d2:	fa00 f00e 	lsl.w	r0, r0, lr
 80162d6:	a906      	add	r1, sp, #24
 80162d8:	1a12      	subs	r2, r2, r0
 80162da:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80162de:	f1c4 0007 	rsb	r0, r4, #7
 80162e2:	fa42 fb00 	asr.w	fp, r2, r0
 80162e6:	f1bb 0f00 	cmp.w	fp, #0
 80162ea:	dd43      	ble.n	8016374 <__kernel_rem_pio2f+0x1d8>
 80162ec:	9a00      	ldr	r2, [sp, #0]
 80162ee:	f04f 0e00 	mov.w	lr, #0
 80162f2:	3201      	adds	r2, #1
 80162f4:	9200      	str	r2, [sp, #0]
 80162f6:	4670      	mov	r0, lr
 80162f8:	45f2      	cmp	sl, lr
 80162fa:	dc6c      	bgt.n	80163d6 <__kernel_rem_pio2f+0x23a>
 80162fc:	2c00      	cmp	r4, #0
 80162fe:	dd04      	ble.n	801630a <__kernel_rem_pio2f+0x16e>
 8016300:	2c01      	cmp	r4, #1
 8016302:	d079      	beq.n	80163f8 <__kernel_rem_pio2f+0x25c>
 8016304:	2c02      	cmp	r4, #2
 8016306:	f000 8082 	beq.w	801640e <__kernel_rem_pio2f+0x272>
 801630a:	f1bb 0f02 	cmp.w	fp, #2
 801630e:	d131      	bne.n	8016374 <__kernel_rem_pio2f+0x1d8>
 8016310:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016314:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016318:	b360      	cbz	r0, 8016374 <__kernel_rem_pio2f+0x1d8>
 801631a:	4620      	mov	r0, r4
 801631c:	f000 fdc2 	bl	8016ea4 <scalbnf>
 8016320:	ee38 8a40 	vsub.f32	s16, s16, s0
 8016324:	e026      	b.n	8016374 <__kernel_rem_pio2f+0x1d8>
 8016326:	ee60 7a28 	vmul.f32	s15, s0, s17
 801632a:	3a01      	subs	r2, #1
 801632c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016330:	a942      	add	r1, sp, #264	; 0x108
 8016332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016336:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801633a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801633e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016342:	eca0 0a01 	vstmia	r0!, {s0}
 8016346:	ed9c 0a00 	vldr	s0, [ip]
 801634a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801634e:	e796      	b.n	801627e <__kernel_rem_pio2f+0xe2>
 8016350:	d107      	bne.n	8016362 <__kernel_rem_pio2f+0x1c6>
 8016352:	f10a 32ff 	add.w	r2, sl, #4294967295
 8016356:	a906      	add	r1, sp, #24
 8016358:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801635c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8016360:	e7c1      	b.n	80162e6 <__kernel_rem_pio2f+0x14a>
 8016362:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016366:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801636e:	da2f      	bge.n	80163d0 <__kernel_rem_pio2f+0x234>
 8016370:	f04f 0b00 	mov.w	fp, #0
 8016374:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801637c:	f040 8098 	bne.w	80164b0 <__kernel_rem_pio2f+0x314>
 8016380:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016384:	469c      	mov	ip, r3
 8016386:	2200      	movs	r2, #0
 8016388:	45bc      	cmp	ip, r7
 801638a:	da48      	bge.n	801641e <__kernel_rem_pio2f+0x282>
 801638c:	2a00      	cmp	r2, #0
 801638e:	d05f      	beq.n	8016450 <__kernel_rem_pio2f+0x2b4>
 8016390:	aa06      	add	r2, sp, #24
 8016392:	3c08      	subs	r4, #8
 8016394:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8016398:	2900      	cmp	r1, #0
 801639a:	d07d      	beq.n	8016498 <__kernel_rem_pio2f+0x2fc>
 801639c:	4620      	mov	r0, r4
 801639e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80163a2:	9301      	str	r3, [sp, #4]
 80163a4:	f000 fd7e 	bl	8016ea4 <scalbnf>
 80163a8:	9b01      	ldr	r3, [sp, #4]
 80163aa:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80164a8 <__kernel_rem_pio2f+0x30c>
 80163ae:	4619      	mov	r1, r3
 80163b0:	2900      	cmp	r1, #0
 80163b2:	f280 80af 	bge.w	8016514 <__kernel_rem_pio2f+0x378>
 80163b6:	4618      	mov	r0, r3
 80163b8:	2400      	movs	r4, #0
 80163ba:	2800      	cmp	r0, #0
 80163bc:	f2c0 80d0 	blt.w	8016560 <__kernel_rem_pio2f+0x3c4>
 80163c0:	a942      	add	r1, sp, #264	; 0x108
 80163c2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80163c6:	4a36      	ldr	r2, [pc, #216]	; (80164a0 <__kernel_rem_pio2f+0x304>)
 80163c8:	eddf 7a38 	vldr	s15, [pc, #224]	; 80164ac <__kernel_rem_pio2f+0x310>
 80163cc:	2100      	movs	r1, #0
 80163ce:	e0bb      	b.n	8016548 <__kernel_rem_pio2f+0x3ac>
 80163d0:	f04f 0b02 	mov.w	fp, #2
 80163d4:	e78a      	b.n	80162ec <__kernel_rem_pio2f+0x150>
 80163d6:	681a      	ldr	r2, [r3, #0]
 80163d8:	b948      	cbnz	r0, 80163ee <__kernel_rem_pio2f+0x252>
 80163da:	b11a      	cbz	r2, 80163e4 <__kernel_rem_pio2f+0x248>
 80163dc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80163e0:	601a      	str	r2, [r3, #0]
 80163e2:	2201      	movs	r2, #1
 80163e4:	f10e 0e01 	add.w	lr, lr, #1
 80163e8:	3304      	adds	r3, #4
 80163ea:	4610      	mov	r0, r2
 80163ec:	e784      	b.n	80162f8 <__kernel_rem_pio2f+0x15c>
 80163ee:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80163f2:	601a      	str	r2, [r3, #0]
 80163f4:	4602      	mov	r2, r0
 80163f6:	e7f5      	b.n	80163e4 <__kernel_rem_pio2f+0x248>
 80163f8:	f10a 3cff 	add.w	ip, sl, #4294967295
 80163fc:	ab06      	add	r3, sp, #24
 80163fe:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016406:	aa06      	add	r2, sp, #24
 8016408:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801640c:	e77d      	b.n	801630a <__kernel_rem_pio2f+0x16e>
 801640e:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016412:	ab06      	add	r3, sp, #24
 8016414:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801641c:	e7f3      	b.n	8016406 <__kernel_rem_pio2f+0x26a>
 801641e:	a906      	add	r1, sp, #24
 8016420:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8016424:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016428:	4302      	orrs	r2, r0
 801642a:	e7ad      	b.n	8016388 <__kernel_rem_pio2f+0x1ec>
 801642c:	3001      	adds	r0, #1
 801642e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016432:	2a00      	cmp	r2, #0
 8016434:	d0fa      	beq.n	801642c <__kernel_rem_pio2f+0x290>
 8016436:	a91a      	add	r1, sp, #104	; 0x68
 8016438:	eb0a 0208 	add.w	r2, sl, r8
 801643c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016440:	f10a 0301 	add.w	r3, sl, #1
 8016444:	eb0a 0100 	add.w	r1, sl, r0
 8016448:	4299      	cmp	r1, r3
 801644a:	da04      	bge.n	8016456 <__kernel_rem_pio2f+0x2ba>
 801644c:	468a      	mov	sl, r1
 801644e:	e70e      	b.n	801626e <__kernel_rem_pio2f+0xd2>
 8016450:	9b04      	ldr	r3, [sp, #16]
 8016452:	2001      	movs	r0, #1
 8016454:	e7eb      	b.n	801642e <__kernel_rem_pio2f+0x292>
 8016456:	9803      	ldr	r0, [sp, #12]
 8016458:	f8dd c004 	ldr.w	ip, [sp, #4]
 801645c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8016460:	9000      	str	r0, [sp, #0]
 8016462:	ee07 0a90 	vmov	s15, r0
 8016466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801646a:	2000      	movs	r0, #0
 801646c:	ece2 7a01 	vstmia	r2!, {s15}
 8016470:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80164ac <__kernel_rem_pio2f+0x310>
 8016474:	4696      	mov	lr, r2
 8016476:	4548      	cmp	r0, r9
 8016478:	dd06      	ble.n	8016488 <__kernel_rem_pio2f+0x2ec>
 801647a:	a842      	add	r0, sp, #264	; 0x108
 801647c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016480:	edc0 7a00 	vstr	s15, [r0]
 8016484:	3301      	adds	r3, #1
 8016486:	e7df      	b.n	8016448 <__kernel_rem_pio2f+0x2ac>
 8016488:	ecfc 6a01 	vldmia	ip!, {s13}
 801648c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8016490:	3001      	adds	r0, #1
 8016492:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016496:	e7ee      	b.n	8016476 <__kernel_rem_pio2f+0x2da>
 8016498:	3b01      	subs	r3, #1
 801649a:	e779      	b.n	8016390 <__kernel_rem_pio2f+0x1f4>
 801649c:	0801a3dc 	.word	0x0801a3dc
 80164a0:	0801a3b0 	.word	0x0801a3b0
 80164a4:	43800000 	.word	0x43800000
 80164a8:	3b800000 	.word	0x3b800000
 80164ac:	00000000 	.word	0x00000000
 80164b0:	9b02      	ldr	r3, [sp, #8]
 80164b2:	eeb0 0a48 	vmov.f32	s0, s16
 80164b6:	1b98      	subs	r0, r3, r6
 80164b8:	f000 fcf4 	bl	8016ea4 <scalbnf>
 80164bc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80164a4 <__kernel_rem_pio2f+0x308>
 80164c0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80164c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164c8:	db1b      	blt.n	8016502 <__kernel_rem_pio2f+0x366>
 80164ca:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80164a8 <__kernel_rem_pio2f+0x30c>
 80164ce:	ee60 7a27 	vmul.f32	s15, s0, s15
 80164d2:	aa06      	add	r2, sp, #24
 80164d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80164d8:	a906      	add	r1, sp, #24
 80164da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80164de:	3408      	adds	r4, #8
 80164e0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80164e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80164e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80164ec:	ee10 3a10 	vmov	r3, s0
 80164f0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80164f4:	ee17 2a90 	vmov	r2, s15
 80164f8:	f10a 0301 	add.w	r3, sl, #1
 80164fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016500:	e74c      	b.n	801639c <__kernel_rem_pio2f+0x200>
 8016502:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016506:	aa06      	add	r2, sp, #24
 8016508:	ee10 3a10 	vmov	r3, s0
 801650c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016510:	4653      	mov	r3, sl
 8016512:	e743      	b.n	801639c <__kernel_rem_pio2f+0x200>
 8016514:	aa42      	add	r2, sp, #264	; 0x108
 8016516:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801651a:	aa06      	add	r2, sp, #24
 801651c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016520:	9201      	str	r2, [sp, #4]
 8016522:	ee07 2a90 	vmov	s15, r2
 8016526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801652a:	3901      	subs	r1, #1
 801652c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016530:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016534:	edc0 7a00 	vstr	s15, [r0]
 8016538:	e73a      	b.n	80163b0 <__kernel_rem_pio2f+0x214>
 801653a:	ecf2 6a01 	vldmia	r2!, {s13}
 801653e:	ecb6 7a01 	vldmia	r6!, {s14}
 8016542:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016546:	3101      	adds	r1, #1
 8016548:	42b9      	cmp	r1, r7
 801654a:	dc01      	bgt.n	8016550 <__kernel_rem_pio2f+0x3b4>
 801654c:	428c      	cmp	r4, r1
 801654e:	daf4      	bge.n	801653a <__kernel_rem_pio2f+0x39e>
 8016550:	aa56      	add	r2, sp, #344	; 0x158
 8016552:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8016556:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801655a:	3801      	subs	r0, #1
 801655c:	3401      	adds	r4, #1
 801655e:	e72c      	b.n	80163ba <__kernel_rem_pio2f+0x21e>
 8016560:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8016562:	2a02      	cmp	r2, #2
 8016564:	dc0a      	bgt.n	801657c <__kernel_rem_pio2f+0x3e0>
 8016566:	2a00      	cmp	r2, #0
 8016568:	dc61      	bgt.n	801662e <__kernel_rem_pio2f+0x492>
 801656a:	d03c      	beq.n	80165e6 <__kernel_rem_pio2f+0x44a>
 801656c:	9b00      	ldr	r3, [sp, #0]
 801656e:	f003 0007 	and.w	r0, r3, #7
 8016572:	b057      	add	sp, #348	; 0x15c
 8016574:	ecbd 8b04 	vpop	{d8-d9}
 8016578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801657c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801657e:	2a03      	cmp	r2, #3
 8016580:	d1f4      	bne.n	801656c <__kernel_rem_pio2f+0x3d0>
 8016582:	aa2e      	add	r2, sp, #184	; 0xb8
 8016584:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016588:	4608      	mov	r0, r1
 801658a:	461c      	mov	r4, r3
 801658c:	2c00      	cmp	r4, #0
 801658e:	f1a0 0004 	sub.w	r0, r0, #4
 8016592:	dc59      	bgt.n	8016648 <__kernel_rem_pio2f+0x4ac>
 8016594:	4618      	mov	r0, r3
 8016596:	2801      	cmp	r0, #1
 8016598:	f1a1 0104 	sub.w	r1, r1, #4
 801659c:	dc64      	bgt.n	8016668 <__kernel_rem_pio2f+0x4cc>
 801659e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80164ac <__kernel_rem_pio2f+0x310>
 80165a2:	2b01      	cmp	r3, #1
 80165a4:	dc70      	bgt.n	8016688 <__kernel_rem_pio2f+0x4ec>
 80165a6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80165aa:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80165ae:	f1bb 0f00 	cmp.w	fp, #0
 80165b2:	d172      	bne.n	801669a <__kernel_rem_pio2f+0x4fe>
 80165b4:	edc5 6a00 	vstr	s13, [r5]
 80165b8:	ed85 7a01 	vstr	s14, [r5, #4]
 80165bc:	edc5 7a02 	vstr	s15, [r5, #8]
 80165c0:	e7d4      	b.n	801656c <__kernel_rem_pio2f+0x3d0>
 80165c2:	aa2e      	add	r2, sp, #184	; 0xb8
 80165c4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80165c8:	ed91 7a00 	vldr	s14, [r1]
 80165cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80165d0:	3b01      	subs	r3, #1
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	daf5      	bge.n	80165c2 <__kernel_rem_pio2f+0x426>
 80165d6:	f1bb 0f00 	cmp.w	fp, #0
 80165da:	d001      	beq.n	80165e0 <__kernel_rem_pio2f+0x444>
 80165dc:	eef1 7a67 	vneg.f32	s15, s15
 80165e0:	edc5 7a00 	vstr	s15, [r5]
 80165e4:	e7c2      	b.n	801656c <__kernel_rem_pio2f+0x3d0>
 80165e6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80164ac <__kernel_rem_pio2f+0x310>
 80165ea:	e7f2      	b.n	80165d2 <__kernel_rem_pio2f+0x436>
 80165ec:	aa2e      	add	r2, sp, #184	; 0xb8
 80165ee:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80165f2:	edd0 7a00 	vldr	s15, [r0]
 80165f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80165fa:	3901      	subs	r1, #1
 80165fc:	2900      	cmp	r1, #0
 80165fe:	daf5      	bge.n	80165ec <__kernel_rem_pio2f+0x450>
 8016600:	f1bb 0f00 	cmp.w	fp, #0
 8016604:	d017      	beq.n	8016636 <__kernel_rem_pio2f+0x49a>
 8016606:	eef1 7a47 	vneg.f32	s15, s14
 801660a:	edc5 7a00 	vstr	s15, [r5]
 801660e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016616:	a82f      	add	r0, sp, #188	; 0xbc
 8016618:	2101      	movs	r1, #1
 801661a:	428b      	cmp	r3, r1
 801661c:	da0e      	bge.n	801663c <__kernel_rem_pio2f+0x4a0>
 801661e:	f1bb 0f00 	cmp.w	fp, #0
 8016622:	d001      	beq.n	8016628 <__kernel_rem_pio2f+0x48c>
 8016624:	eef1 7a67 	vneg.f32	s15, s15
 8016628:	edc5 7a01 	vstr	s15, [r5, #4]
 801662c:	e79e      	b.n	801656c <__kernel_rem_pio2f+0x3d0>
 801662e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80164ac <__kernel_rem_pio2f+0x310>
 8016632:	4619      	mov	r1, r3
 8016634:	e7e2      	b.n	80165fc <__kernel_rem_pio2f+0x460>
 8016636:	eef0 7a47 	vmov.f32	s15, s14
 801663a:	e7e6      	b.n	801660a <__kernel_rem_pio2f+0x46e>
 801663c:	ecb0 7a01 	vldmia	r0!, {s14}
 8016640:	3101      	adds	r1, #1
 8016642:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016646:	e7e8      	b.n	801661a <__kernel_rem_pio2f+0x47e>
 8016648:	edd0 7a00 	vldr	s15, [r0]
 801664c:	edd0 6a01 	vldr	s13, [r0, #4]
 8016650:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016654:	3c01      	subs	r4, #1
 8016656:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801665a:	ed80 7a00 	vstr	s14, [r0]
 801665e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016662:	edc0 7a01 	vstr	s15, [r0, #4]
 8016666:	e791      	b.n	801658c <__kernel_rem_pio2f+0x3f0>
 8016668:	edd1 7a00 	vldr	s15, [r1]
 801666c:	edd1 6a01 	vldr	s13, [r1, #4]
 8016670:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016674:	3801      	subs	r0, #1
 8016676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801667a:	ed81 7a00 	vstr	s14, [r1]
 801667e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016682:	edc1 7a01 	vstr	s15, [r1, #4]
 8016686:	e786      	b.n	8016596 <__kernel_rem_pio2f+0x3fa>
 8016688:	aa2e      	add	r2, sp, #184	; 0xb8
 801668a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801668e:	ed91 7a00 	vldr	s14, [r1]
 8016692:	3b01      	subs	r3, #1
 8016694:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016698:	e783      	b.n	80165a2 <__kernel_rem_pio2f+0x406>
 801669a:	eef1 6a66 	vneg.f32	s13, s13
 801669e:	eeb1 7a47 	vneg.f32	s14, s14
 80166a2:	edc5 6a00 	vstr	s13, [r5]
 80166a6:	ed85 7a01 	vstr	s14, [r5, #4]
 80166aa:	eef1 7a67 	vneg.f32	s15, s15
 80166ae:	e785      	b.n	80165bc <__kernel_rem_pio2f+0x420>

080166b0 <__kernel_sinf>:
 80166b0:	ee10 3a10 	vmov	r3, s0
 80166b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80166b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80166bc:	da04      	bge.n	80166c8 <__kernel_sinf+0x18>
 80166be:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80166c2:	ee17 3a90 	vmov	r3, s15
 80166c6:	b35b      	cbz	r3, 8016720 <__kernel_sinf+0x70>
 80166c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80166cc:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016724 <__kernel_sinf+0x74>
 80166d0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016728 <__kernel_sinf+0x78>
 80166d4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80166d8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801672c <__kernel_sinf+0x7c>
 80166dc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80166e0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016730 <__kernel_sinf+0x80>
 80166e4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80166e8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016734 <__kernel_sinf+0x84>
 80166ec:	ee60 6a07 	vmul.f32	s13, s0, s14
 80166f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80166f4:	b930      	cbnz	r0, 8016704 <__kernel_sinf+0x54>
 80166f6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016738 <__kernel_sinf+0x88>
 80166fa:	eea7 6a27 	vfma.f32	s12, s14, s15
 80166fe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016702:	4770      	bx	lr
 8016704:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016708:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801670c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016710:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016714:	eddf 7a09 	vldr	s15, [pc, #36]	; 801673c <__kernel_sinf+0x8c>
 8016718:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801671c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016720:	4770      	bx	lr
 8016722:	bf00      	nop
 8016724:	2f2ec9d3 	.word	0x2f2ec9d3
 8016728:	b2d72f34 	.word	0xb2d72f34
 801672c:	3638ef1b 	.word	0x3638ef1b
 8016730:	b9500d01 	.word	0xb9500d01
 8016734:	3c088889 	.word	0x3c088889
 8016738:	be2aaaab 	.word	0xbe2aaaab
 801673c:	3e2aaaab 	.word	0x3e2aaaab

08016740 <__kernel_tanf>:
 8016740:	b508      	push	{r3, lr}
 8016742:	ee10 3a10 	vmov	r3, s0
 8016746:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801674a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801674e:	eef0 7a40 	vmov.f32	s15, s0
 8016752:	da17      	bge.n	8016784 <__kernel_tanf+0x44>
 8016754:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016758:	ee17 1a10 	vmov	r1, s14
 801675c:	bb41      	cbnz	r1, 80167b0 <__kernel_tanf+0x70>
 801675e:	1c43      	adds	r3, r0, #1
 8016760:	4313      	orrs	r3, r2
 8016762:	d108      	bne.n	8016776 <__kernel_tanf+0x36>
 8016764:	f000 fb4e 	bl	8016e04 <fabsf>
 8016768:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801676c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016770:	eeb0 0a67 	vmov.f32	s0, s15
 8016774:	bd08      	pop	{r3, pc}
 8016776:	2801      	cmp	r0, #1
 8016778:	d0fa      	beq.n	8016770 <__kernel_tanf+0x30>
 801677a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801677e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016782:	e7f5      	b.n	8016770 <__kernel_tanf+0x30>
 8016784:	494d      	ldr	r1, [pc, #308]	; (80168bc <__kernel_tanf+0x17c>)
 8016786:	428a      	cmp	r2, r1
 8016788:	db12      	blt.n	80167b0 <__kernel_tanf+0x70>
 801678a:	2b00      	cmp	r3, #0
 801678c:	bfb8      	it	lt
 801678e:	eef1 7a40 	vneglt.f32	s15, s0
 8016792:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80168c0 <__kernel_tanf+0x180>
 8016796:	ee70 7a67 	vsub.f32	s15, s0, s15
 801679a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80168c4 <__kernel_tanf+0x184>
 801679e:	bfb8      	it	lt
 80167a0:	eef1 0a60 	vneglt.f32	s1, s1
 80167a4:	ee70 0a60 	vsub.f32	s1, s0, s1
 80167a8:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80167ac:	eddf 0a46 	vldr	s1, [pc, #280]	; 80168c8 <__kernel_tanf+0x188>
 80167b0:	eddf 5a46 	vldr	s11, [pc, #280]	; 80168cc <__kernel_tanf+0x18c>
 80167b4:	ed9f 6a46 	vldr	s12, [pc, #280]	; 80168d0 <__kernel_tanf+0x190>
 80167b8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 80168d4 <__kernel_tanf+0x194>
 80167bc:	493f      	ldr	r1, [pc, #252]	; (80168bc <__kernel_tanf+0x17c>)
 80167be:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80167c2:	428a      	cmp	r2, r1
 80167c4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80167c8:	eea7 6a25 	vfma.f32	s12, s14, s11
 80167cc:	eddf 5a42 	vldr	s11, [pc, #264]	; 80168d8 <__kernel_tanf+0x198>
 80167d0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80167d4:	ed9f 6a41 	vldr	s12, [pc, #260]	; 80168dc <__kernel_tanf+0x19c>
 80167d8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80167dc:	eddf 5a40 	vldr	s11, [pc, #256]	; 80168e0 <__kernel_tanf+0x1a0>
 80167e0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80167e4:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 80168e4 <__kernel_tanf+0x1a4>
 80167e8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80167ec:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80168e8 <__kernel_tanf+0x1a8>
 80167f0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80167f4:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80168ec <__kernel_tanf+0x1ac>
 80167f8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80167fc:	eddf 5a3c 	vldr	s11, [pc, #240]	; 80168f0 <__kernel_tanf+0x1b0>
 8016800:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016804:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 80168f4 <__kernel_tanf+0x1b4>
 8016808:	eea5 5a87 	vfma.f32	s10, s11, s14
 801680c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80168f8 <__kernel_tanf+0x1b8>
 8016810:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016814:	eeb0 7a65 	vmov.f32	s14, s11
 8016818:	eea7 6a26 	vfma.f32	s12, s14, s13
 801681c:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8016820:	eeb0 7a46 	vmov.f32	s14, s12
 8016824:	eeb0 6a60 	vmov.f32	s12, s1
 8016828:	eea7 6a25 	vfma.f32	s12, s14, s11
 801682c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80168fc <__kernel_tanf+0x1bc>
 8016830:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016834:	eee5 0a87 	vfma.f32	s1, s11, s14
 8016838:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801683c:	db1d      	blt.n	801687a <__kernel_tanf+0x13a>
 801683e:	ee06 0a90 	vmov	s13, r0
 8016842:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016846:	ee27 6a07 	vmul.f32	s12, s14, s14
 801684a:	ee37 7a00 	vadd.f32	s14, s14, s0
 801684e:	179b      	asrs	r3, r3, #30
 8016850:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8016854:	f003 0302 	and.w	r3, r3, #2
 8016858:	f1c3 0301 	rsb	r3, r3, #1
 801685c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016860:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8016864:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016868:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801686c:	ee07 3a90 	vmov	s15, r3
 8016870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016874:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016878:	e77a      	b.n	8016770 <__kernel_tanf+0x30>
 801687a:	2801      	cmp	r0, #1
 801687c:	d01b      	beq.n	80168b6 <__kernel_tanf+0x176>
 801687e:	4b20      	ldr	r3, [pc, #128]	; (8016900 <__kernel_tanf+0x1c0>)
 8016880:	ee17 2a10 	vmov	r2, s14
 8016884:	401a      	ands	r2, r3
 8016886:	ee06 2a10 	vmov	s12, r2
 801688a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801688e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016892:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016896:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801689a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801689e:	ee16 2a90 	vmov	r2, s13
 80168a2:	4013      	ands	r3, r2
 80168a4:	ee07 3a90 	vmov	s15, r3
 80168a8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80168ac:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80168b0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80168b4:	e75c      	b.n	8016770 <__kernel_tanf+0x30>
 80168b6:	eef0 7a47 	vmov.f32	s15, s14
 80168ba:	e759      	b.n	8016770 <__kernel_tanf+0x30>
 80168bc:	3f2ca140 	.word	0x3f2ca140
 80168c0:	3f490fda 	.word	0x3f490fda
 80168c4:	33222168 	.word	0x33222168
 80168c8:	00000000 	.word	0x00000000
 80168cc:	b79bae5f 	.word	0xb79bae5f
 80168d0:	38a3f445 	.word	0x38a3f445
 80168d4:	37d95384 	.word	0x37d95384
 80168d8:	3a1a26c8 	.word	0x3a1a26c8
 80168dc:	3b6b6916 	.word	0x3b6b6916
 80168e0:	3cb327a4 	.word	0x3cb327a4
 80168e4:	3e088889 	.word	0x3e088889
 80168e8:	3895c07a 	.word	0x3895c07a
 80168ec:	398137b9 	.word	0x398137b9
 80168f0:	3abede48 	.word	0x3abede48
 80168f4:	3c11371f 	.word	0x3c11371f
 80168f8:	3d5d0dd1 	.word	0x3d5d0dd1
 80168fc:	3eaaaaab 	.word	0x3eaaaaab
 8016900:	fffff000 	.word	0xfffff000
 8016904:	00000000 	.word	0x00000000

08016908 <atan>:
 8016908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801690c:	ec55 4b10 	vmov	r4, r5, d0
 8016910:	4bc3      	ldr	r3, [pc, #780]	; (8016c20 <atan+0x318>)
 8016912:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016916:	429e      	cmp	r6, r3
 8016918:	46ab      	mov	fp, r5
 801691a:	dd18      	ble.n	801694e <atan+0x46>
 801691c:	4bc1      	ldr	r3, [pc, #772]	; (8016c24 <atan+0x31c>)
 801691e:	429e      	cmp	r6, r3
 8016920:	dc01      	bgt.n	8016926 <atan+0x1e>
 8016922:	d109      	bne.n	8016938 <atan+0x30>
 8016924:	b144      	cbz	r4, 8016938 <atan+0x30>
 8016926:	4622      	mov	r2, r4
 8016928:	462b      	mov	r3, r5
 801692a:	4620      	mov	r0, r4
 801692c:	4629      	mov	r1, r5
 801692e:	f7e9 fcad 	bl	800028c <__adddf3>
 8016932:	4604      	mov	r4, r0
 8016934:	460d      	mov	r5, r1
 8016936:	e006      	b.n	8016946 <atan+0x3e>
 8016938:	f1bb 0f00 	cmp.w	fp, #0
 801693c:	f300 8131 	bgt.w	8016ba2 <atan+0x29a>
 8016940:	a59b      	add	r5, pc, #620	; (adr r5, 8016bb0 <atan+0x2a8>)
 8016942:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016946:	ec45 4b10 	vmov	d0, r4, r5
 801694a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801694e:	4bb6      	ldr	r3, [pc, #728]	; (8016c28 <atan+0x320>)
 8016950:	429e      	cmp	r6, r3
 8016952:	dc14      	bgt.n	801697e <atan+0x76>
 8016954:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016958:	429e      	cmp	r6, r3
 801695a:	dc0d      	bgt.n	8016978 <atan+0x70>
 801695c:	a396      	add	r3, pc, #600	; (adr r3, 8016bb8 <atan+0x2b0>)
 801695e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016962:	ee10 0a10 	vmov	r0, s0
 8016966:	4629      	mov	r1, r5
 8016968:	f7e9 fc90 	bl	800028c <__adddf3>
 801696c:	4baf      	ldr	r3, [pc, #700]	; (8016c2c <atan+0x324>)
 801696e:	2200      	movs	r2, #0
 8016970:	f7ea f8d2 	bl	8000b18 <__aeabi_dcmpgt>
 8016974:	2800      	cmp	r0, #0
 8016976:	d1e6      	bne.n	8016946 <atan+0x3e>
 8016978:	f04f 3aff 	mov.w	sl, #4294967295
 801697c:	e02b      	b.n	80169d6 <atan+0xce>
 801697e:	f000 f963 	bl	8016c48 <fabs>
 8016982:	4bab      	ldr	r3, [pc, #684]	; (8016c30 <atan+0x328>)
 8016984:	429e      	cmp	r6, r3
 8016986:	ec55 4b10 	vmov	r4, r5, d0
 801698a:	f300 80bf 	bgt.w	8016b0c <atan+0x204>
 801698e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016992:	429e      	cmp	r6, r3
 8016994:	f300 80a0 	bgt.w	8016ad8 <atan+0x1d0>
 8016998:	ee10 2a10 	vmov	r2, s0
 801699c:	ee10 0a10 	vmov	r0, s0
 80169a0:	462b      	mov	r3, r5
 80169a2:	4629      	mov	r1, r5
 80169a4:	f7e9 fc72 	bl	800028c <__adddf3>
 80169a8:	4ba0      	ldr	r3, [pc, #640]	; (8016c2c <atan+0x324>)
 80169aa:	2200      	movs	r2, #0
 80169ac:	f7e9 fc6c 	bl	8000288 <__aeabi_dsub>
 80169b0:	2200      	movs	r2, #0
 80169b2:	4606      	mov	r6, r0
 80169b4:	460f      	mov	r7, r1
 80169b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80169ba:	4620      	mov	r0, r4
 80169bc:	4629      	mov	r1, r5
 80169be:	f7e9 fc65 	bl	800028c <__adddf3>
 80169c2:	4602      	mov	r2, r0
 80169c4:	460b      	mov	r3, r1
 80169c6:	4630      	mov	r0, r6
 80169c8:	4639      	mov	r1, r7
 80169ca:	f7e9 ff3f 	bl	800084c <__aeabi_ddiv>
 80169ce:	f04f 0a00 	mov.w	sl, #0
 80169d2:	4604      	mov	r4, r0
 80169d4:	460d      	mov	r5, r1
 80169d6:	4622      	mov	r2, r4
 80169d8:	462b      	mov	r3, r5
 80169da:	4620      	mov	r0, r4
 80169dc:	4629      	mov	r1, r5
 80169de:	f7e9 fe0b 	bl	80005f8 <__aeabi_dmul>
 80169e2:	4602      	mov	r2, r0
 80169e4:	460b      	mov	r3, r1
 80169e6:	4680      	mov	r8, r0
 80169e8:	4689      	mov	r9, r1
 80169ea:	f7e9 fe05 	bl	80005f8 <__aeabi_dmul>
 80169ee:	a374      	add	r3, pc, #464	; (adr r3, 8016bc0 <atan+0x2b8>)
 80169f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169f4:	4606      	mov	r6, r0
 80169f6:	460f      	mov	r7, r1
 80169f8:	f7e9 fdfe 	bl	80005f8 <__aeabi_dmul>
 80169fc:	a372      	add	r3, pc, #456	; (adr r3, 8016bc8 <atan+0x2c0>)
 80169fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a02:	f7e9 fc43 	bl	800028c <__adddf3>
 8016a06:	4632      	mov	r2, r6
 8016a08:	463b      	mov	r3, r7
 8016a0a:	f7e9 fdf5 	bl	80005f8 <__aeabi_dmul>
 8016a0e:	a370      	add	r3, pc, #448	; (adr r3, 8016bd0 <atan+0x2c8>)
 8016a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a14:	f7e9 fc3a 	bl	800028c <__adddf3>
 8016a18:	4632      	mov	r2, r6
 8016a1a:	463b      	mov	r3, r7
 8016a1c:	f7e9 fdec 	bl	80005f8 <__aeabi_dmul>
 8016a20:	a36d      	add	r3, pc, #436	; (adr r3, 8016bd8 <atan+0x2d0>)
 8016a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a26:	f7e9 fc31 	bl	800028c <__adddf3>
 8016a2a:	4632      	mov	r2, r6
 8016a2c:	463b      	mov	r3, r7
 8016a2e:	f7e9 fde3 	bl	80005f8 <__aeabi_dmul>
 8016a32:	a36b      	add	r3, pc, #428	; (adr r3, 8016be0 <atan+0x2d8>)
 8016a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a38:	f7e9 fc28 	bl	800028c <__adddf3>
 8016a3c:	4632      	mov	r2, r6
 8016a3e:	463b      	mov	r3, r7
 8016a40:	f7e9 fdda 	bl	80005f8 <__aeabi_dmul>
 8016a44:	a368      	add	r3, pc, #416	; (adr r3, 8016be8 <atan+0x2e0>)
 8016a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a4a:	f7e9 fc1f 	bl	800028c <__adddf3>
 8016a4e:	4642      	mov	r2, r8
 8016a50:	464b      	mov	r3, r9
 8016a52:	f7e9 fdd1 	bl	80005f8 <__aeabi_dmul>
 8016a56:	a366      	add	r3, pc, #408	; (adr r3, 8016bf0 <atan+0x2e8>)
 8016a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a5c:	4680      	mov	r8, r0
 8016a5e:	4689      	mov	r9, r1
 8016a60:	4630      	mov	r0, r6
 8016a62:	4639      	mov	r1, r7
 8016a64:	f7e9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8016a68:	a363      	add	r3, pc, #396	; (adr r3, 8016bf8 <atan+0x2f0>)
 8016a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a6e:	f7e9 fc0b 	bl	8000288 <__aeabi_dsub>
 8016a72:	4632      	mov	r2, r6
 8016a74:	463b      	mov	r3, r7
 8016a76:	f7e9 fdbf 	bl	80005f8 <__aeabi_dmul>
 8016a7a:	a361      	add	r3, pc, #388	; (adr r3, 8016c00 <atan+0x2f8>)
 8016a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a80:	f7e9 fc02 	bl	8000288 <__aeabi_dsub>
 8016a84:	4632      	mov	r2, r6
 8016a86:	463b      	mov	r3, r7
 8016a88:	f7e9 fdb6 	bl	80005f8 <__aeabi_dmul>
 8016a8c:	a35e      	add	r3, pc, #376	; (adr r3, 8016c08 <atan+0x300>)
 8016a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a92:	f7e9 fbf9 	bl	8000288 <__aeabi_dsub>
 8016a96:	4632      	mov	r2, r6
 8016a98:	463b      	mov	r3, r7
 8016a9a:	f7e9 fdad 	bl	80005f8 <__aeabi_dmul>
 8016a9e:	a35c      	add	r3, pc, #368	; (adr r3, 8016c10 <atan+0x308>)
 8016aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016aa4:	f7e9 fbf0 	bl	8000288 <__aeabi_dsub>
 8016aa8:	4632      	mov	r2, r6
 8016aaa:	463b      	mov	r3, r7
 8016aac:	f7e9 fda4 	bl	80005f8 <__aeabi_dmul>
 8016ab0:	4602      	mov	r2, r0
 8016ab2:	460b      	mov	r3, r1
 8016ab4:	4640      	mov	r0, r8
 8016ab6:	4649      	mov	r1, r9
 8016ab8:	f7e9 fbe8 	bl	800028c <__adddf3>
 8016abc:	4622      	mov	r2, r4
 8016abe:	462b      	mov	r3, r5
 8016ac0:	f7e9 fd9a 	bl	80005f8 <__aeabi_dmul>
 8016ac4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016ac8:	4602      	mov	r2, r0
 8016aca:	460b      	mov	r3, r1
 8016acc:	d14b      	bne.n	8016b66 <atan+0x25e>
 8016ace:	4620      	mov	r0, r4
 8016ad0:	4629      	mov	r1, r5
 8016ad2:	f7e9 fbd9 	bl	8000288 <__aeabi_dsub>
 8016ad6:	e72c      	b.n	8016932 <atan+0x2a>
 8016ad8:	ee10 0a10 	vmov	r0, s0
 8016adc:	4b53      	ldr	r3, [pc, #332]	; (8016c2c <atan+0x324>)
 8016ade:	2200      	movs	r2, #0
 8016ae0:	4629      	mov	r1, r5
 8016ae2:	f7e9 fbd1 	bl	8000288 <__aeabi_dsub>
 8016ae6:	4b51      	ldr	r3, [pc, #324]	; (8016c2c <atan+0x324>)
 8016ae8:	4606      	mov	r6, r0
 8016aea:	460f      	mov	r7, r1
 8016aec:	2200      	movs	r2, #0
 8016aee:	4620      	mov	r0, r4
 8016af0:	4629      	mov	r1, r5
 8016af2:	f7e9 fbcb 	bl	800028c <__adddf3>
 8016af6:	4602      	mov	r2, r0
 8016af8:	460b      	mov	r3, r1
 8016afa:	4630      	mov	r0, r6
 8016afc:	4639      	mov	r1, r7
 8016afe:	f7e9 fea5 	bl	800084c <__aeabi_ddiv>
 8016b02:	f04f 0a01 	mov.w	sl, #1
 8016b06:	4604      	mov	r4, r0
 8016b08:	460d      	mov	r5, r1
 8016b0a:	e764      	b.n	80169d6 <atan+0xce>
 8016b0c:	4b49      	ldr	r3, [pc, #292]	; (8016c34 <atan+0x32c>)
 8016b0e:	429e      	cmp	r6, r3
 8016b10:	da1d      	bge.n	8016b4e <atan+0x246>
 8016b12:	ee10 0a10 	vmov	r0, s0
 8016b16:	4b48      	ldr	r3, [pc, #288]	; (8016c38 <atan+0x330>)
 8016b18:	2200      	movs	r2, #0
 8016b1a:	4629      	mov	r1, r5
 8016b1c:	f7e9 fbb4 	bl	8000288 <__aeabi_dsub>
 8016b20:	4b45      	ldr	r3, [pc, #276]	; (8016c38 <atan+0x330>)
 8016b22:	4606      	mov	r6, r0
 8016b24:	460f      	mov	r7, r1
 8016b26:	2200      	movs	r2, #0
 8016b28:	4620      	mov	r0, r4
 8016b2a:	4629      	mov	r1, r5
 8016b2c:	f7e9 fd64 	bl	80005f8 <__aeabi_dmul>
 8016b30:	4b3e      	ldr	r3, [pc, #248]	; (8016c2c <atan+0x324>)
 8016b32:	2200      	movs	r2, #0
 8016b34:	f7e9 fbaa 	bl	800028c <__adddf3>
 8016b38:	4602      	mov	r2, r0
 8016b3a:	460b      	mov	r3, r1
 8016b3c:	4630      	mov	r0, r6
 8016b3e:	4639      	mov	r1, r7
 8016b40:	f7e9 fe84 	bl	800084c <__aeabi_ddiv>
 8016b44:	f04f 0a02 	mov.w	sl, #2
 8016b48:	4604      	mov	r4, r0
 8016b4a:	460d      	mov	r5, r1
 8016b4c:	e743      	b.n	80169d6 <atan+0xce>
 8016b4e:	462b      	mov	r3, r5
 8016b50:	ee10 2a10 	vmov	r2, s0
 8016b54:	4939      	ldr	r1, [pc, #228]	; (8016c3c <atan+0x334>)
 8016b56:	2000      	movs	r0, #0
 8016b58:	f7e9 fe78 	bl	800084c <__aeabi_ddiv>
 8016b5c:	f04f 0a03 	mov.w	sl, #3
 8016b60:	4604      	mov	r4, r0
 8016b62:	460d      	mov	r5, r1
 8016b64:	e737      	b.n	80169d6 <atan+0xce>
 8016b66:	4b36      	ldr	r3, [pc, #216]	; (8016c40 <atan+0x338>)
 8016b68:	4e36      	ldr	r6, [pc, #216]	; (8016c44 <atan+0x33c>)
 8016b6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8016b6e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8016b72:	e9da 2300 	ldrd	r2, r3, [sl]
 8016b76:	f7e9 fb87 	bl	8000288 <__aeabi_dsub>
 8016b7a:	4622      	mov	r2, r4
 8016b7c:	462b      	mov	r3, r5
 8016b7e:	f7e9 fb83 	bl	8000288 <__aeabi_dsub>
 8016b82:	4602      	mov	r2, r0
 8016b84:	460b      	mov	r3, r1
 8016b86:	e9d6 0100 	ldrd	r0, r1, [r6]
 8016b8a:	f7e9 fb7d 	bl	8000288 <__aeabi_dsub>
 8016b8e:	f1bb 0f00 	cmp.w	fp, #0
 8016b92:	4604      	mov	r4, r0
 8016b94:	460d      	mov	r5, r1
 8016b96:	f6bf aed6 	bge.w	8016946 <atan+0x3e>
 8016b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b9e:	461d      	mov	r5, r3
 8016ba0:	e6d1      	b.n	8016946 <atan+0x3e>
 8016ba2:	a51d      	add	r5, pc, #116	; (adr r5, 8016c18 <atan+0x310>)
 8016ba4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016ba8:	e6cd      	b.n	8016946 <atan+0x3e>
 8016baa:	bf00      	nop
 8016bac:	f3af 8000 	nop.w
 8016bb0:	54442d18 	.word	0x54442d18
 8016bb4:	bff921fb 	.word	0xbff921fb
 8016bb8:	8800759c 	.word	0x8800759c
 8016bbc:	7e37e43c 	.word	0x7e37e43c
 8016bc0:	e322da11 	.word	0xe322da11
 8016bc4:	3f90ad3a 	.word	0x3f90ad3a
 8016bc8:	24760deb 	.word	0x24760deb
 8016bcc:	3fa97b4b 	.word	0x3fa97b4b
 8016bd0:	a0d03d51 	.word	0xa0d03d51
 8016bd4:	3fb10d66 	.word	0x3fb10d66
 8016bd8:	c54c206e 	.word	0xc54c206e
 8016bdc:	3fb745cd 	.word	0x3fb745cd
 8016be0:	920083ff 	.word	0x920083ff
 8016be4:	3fc24924 	.word	0x3fc24924
 8016be8:	5555550d 	.word	0x5555550d
 8016bec:	3fd55555 	.word	0x3fd55555
 8016bf0:	2c6a6c2f 	.word	0x2c6a6c2f
 8016bf4:	bfa2b444 	.word	0xbfa2b444
 8016bf8:	52defd9a 	.word	0x52defd9a
 8016bfc:	3fadde2d 	.word	0x3fadde2d
 8016c00:	af749a6d 	.word	0xaf749a6d
 8016c04:	3fb3b0f2 	.word	0x3fb3b0f2
 8016c08:	fe231671 	.word	0xfe231671
 8016c0c:	3fbc71c6 	.word	0x3fbc71c6
 8016c10:	9998ebc4 	.word	0x9998ebc4
 8016c14:	3fc99999 	.word	0x3fc99999
 8016c18:	54442d18 	.word	0x54442d18
 8016c1c:	3ff921fb 	.word	0x3ff921fb
 8016c20:	440fffff 	.word	0x440fffff
 8016c24:	7ff00000 	.word	0x7ff00000
 8016c28:	3fdbffff 	.word	0x3fdbffff
 8016c2c:	3ff00000 	.word	0x3ff00000
 8016c30:	3ff2ffff 	.word	0x3ff2ffff
 8016c34:	40038000 	.word	0x40038000
 8016c38:	3ff80000 	.word	0x3ff80000
 8016c3c:	bff00000 	.word	0xbff00000
 8016c40:	0801a408 	.word	0x0801a408
 8016c44:	0801a3e8 	.word	0x0801a3e8

08016c48 <fabs>:
 8016c48:	ec51 0b10 	vmov	r0, r1, d0
 8016c4c:	ee10 2a10 	vmov	r2, s0
 8016c50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016c54:	ec43 2b10 	vmov	d0, r2, r3
 8016c58:	4770      	bx	lr
	...

08016c5c <atanf>:
 8016c5c:	b538      	push	{r3, r4, r5, lr}
 8016c5e:	ee10 5a10 	vmov	r5, s0
 8016c62:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016c66:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8016c6a:	eef0 7a40 	vmov.f32	s15, s0
 8016c6e:	db10      	blt.n	8016c92 <atanf+0x36>
 8016c70:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8016c74:	dd04      	ble.n	8016c80 <atanf+0x24>
 8016c76:	ee70 7a00 	vadd.f32	s15, s0, s0
 8016c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8016c7e:	bd38      	pop	{r3, r4, r5, pc}
 8016c80:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8016db8 <atanf+0x15c>
 8016c84:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8016dbc <atanf+0x160>
 8016c88:	2d00      	cmp	r5, #0
 8016c8a:	bfd8      	it	le
 8016c8c:	eef0 7a40 	vmovle.f32	s15, s0
 8016c90:	e7f3      	b.n	8016c7a <atanf+0x1e>
 8016c92:	4b4b      	ldr	r3, [pc, #300]	; (8016dc0 <atanf+0x164>)
 8016c94:	429c      	cmp	r4, r3
 8016c96:	dc10      	bgt.n	8016cba <atanf+0x5e>
 8016c98:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8016c9c:	da0a      	bge.n	8016cb4 <atanf+0x58>
 8016c9e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8016dc4 <atanf+0x168>
 8016ca2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8016ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016caa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8016cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb2:	dce2      	bgt.n	8016c7a <atanf+0x1e>
 8016cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8016cb8:	e013      	b.n	8016ce2 <atanf+0x86>
 8016cba:	f000 f8a3 	bl	8016e04 <fabsf>
 8016cbe:	4b42      	ldr	r3, [pc, #264]	; (8016dc8 <atanf+0x16c>)
 8016cc0:	429c      	cmp	r4, r3
 8016cc2:	dc4f      	bgt.n	8016d64 <atanf+0x108>
 8016cc4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8016cc8:	429c      	cmp	r4, r3
 8016cca:	dc41      	bgt.n	8016d50 <atanf+0xf4>
 8016ccc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016cd0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016cd4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016cd8:	2300      	movs	r3, #0
 8016cda:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016cde:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016ce2:	1c5a      	adds	r2, r3, #1
 8016ce4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016ce8:	eddf 5a38 	vldr	s11, [pc, #224]	; 8016dcc <atanf+0x170>
 8016cec:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8016dd0 <atanf+0x174>
 8016cf0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8016dd4 <atanf+0x178>
 8016cf4:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8016dd8 <atanf+0x17c>
 8016cf8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016cfc:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016d00:	eddf 5a36 	vldr	s11, [pc, #216]	; 8016ddc <atanf+0x180>
 8016d04:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016d08:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8016de0 <atanf+0x184>
 8016d0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016d10:	eddf 5a34 	vldr	s11, [pc, #208]	; 8016de4 <atanf+0x188>
 8016d14:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016d18:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8016de8 <atanf+0x18c>
 8016d1c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016d20:	eddf 5a32 	vldr	s11, [pc, #200]	; 8016dec <atanf+0x190>
 8016d24:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016d28:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8016df0 <atanf+0x194>
 8016d2c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016d30:	eddf 5a30 	vldr	s11, [pc, #192]	; 8016df4 <atanf+0x198>
 8016d34:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016d38:	eea5 0a87 	vfma.f32	s0, s11, s14
 8016d3c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016d40:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016d44:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016d48:	d121      	bne.n	8016d8e <atanf+0x132>
 8016d4a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016d4e:	e794      	b.n	8016c7a <atanf+0x1e>
 8016d50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016d54:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016d58:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016d5c:	2301      	movs	r3, #1
 8016d5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016d62:	e7be      	b.n	8016ce2 <atanf+0x86>
 8016d64:	4b24      	ldr	r3, [pc, #144]	; (8016df8 <atanf+0x19c>)
 8016d66:	429c      	cmp	r4, r3
 8016d68:	dc0b      	bgt.n	8016d82 <atanf+0x126>
 8016d6a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016d72:	eea0 7a27 	vfma.f32	s14, s0, s15
 8016d76:	2302      	movs	r3, #2
 8016d78:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016d80:	e7af      	b.n	8016ce2 <atanf+0x86>
 8016d82:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016d86:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016d8a:	2303      	movs	r3, #3
 8016d8c:	e7a9      	b.n	8016ce2 <atanf+0x86>
 8016d8e:	4a1b      	ldr	r2, [pc, #108]	; (8016dfc <atanf+0x1a0>)
 8016d90:	491b      	ldr	r1, [pc, #108]	; (8016e00 <atanf+0x1a4>)
 8016d92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016d96:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016d9a:	ed93 7a00 	vldr	s14, [r3]
 8016d9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016da2:	2d00      	cmp	r5, #0
 8016da4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016da8:	ed92 0a00 	vldr	s0, [r2]
 8016dac:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016db0:	bfb8      	it	lt
 8016db2:	eef1 7a67 	vneglt.f32	s15, s15
 8016db6:	e760      	b.n	8016c7a <atanf+0x1e>
 8016db8:	3fc90fdb 	.word	0x3fc90fdb
 8016dbc:	bfc90fdb 	.word	0xbfc90fdb
 8016dc0:	3edfffff 	.word	0x3edfffff
 8016dc4:	7149f2ca 	.word	0x7149f2ca
 8016dc8:	3f97ffff 	.word	0x3f97ffff
 8016dcc:	3c8569d7 	.word	0x3c8569d7
 8016dd0:	3d4bda59 	.word	0x3d4bda59
 8016dd4:	bd15a221 	.word	0xbd15a221
 8016dd8:	be4ccccd 	.word	0xbe4ccccd
 8016ddc:	3d886b35 	.word	0x3d886b35
 8016de0:	3dba2e6e 	.word	0x3dba2e6e
 8016de4:	3e124925 	.word	0x3e124925
 8016de8:	3eaaaaab 	.word	0x3eaaaaab
 8016dec:	bd6ef16b 	.word	0xbd6ef16b
 8016df0:	bd9d8795 	.word	0xbd9d8795
 8016df4:	bde38e38 	.word	0xbde38e38
 8016df8:	401bffff 	.word	0x401bffff
 8016dfc:	0801a428 	.word	0x0801a428
 8016e00:	0801a438 	.word	0x0801a438

08016e04 <fabsf>:
 8016e04:	ee10 3a10 	vmov	r3, s0
 8016e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016e0c:	ee00 3a10 	vmov	s0, r3
 8016e10:	4770      	bx	lr
	...

08016e14 <floorf>:
 8016e14:	ee10 3a10 	vmov	r3, s0
 8016e18:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016e1c:	3a7f      	subs	r2, #127	; 0x7f
 8016e1e:	2a16      	cmp	r2, #22
 8016e20:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016e24:	dc2a      	bgt.n	8016e7c <floorf+0x68>
 8016e26:	2a00      	cmp	r2, #0
 8016e28:	da11      	bge.n	8016e4e <floorf+0x3a>
 8016e2a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8016e8c <floorf+0x78>
 8016e2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016e32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e3a:	dd05      	ble.n	8016e48 <floorf+0x34>
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	da23      	bge.n	8016e88 <floorf+0x74>
 8016e40:	4a13      	ldr	r2, [pc, #76]	; (8016e90 <floorf+0x7c>)
 8016e42:	2900      	cmp	r1, #0
 8016e44:	bf18      	it	ne
 8016e46:	4613      	movne	r3, r2
 8016e48:	ee00 3a10 	vmov	s0, r3
 8016e4c:	4770      	bx	lr
 8016e4e:	4911      	ldr	r1, [pc, #68]	; (8016e94 <floorf+0x80>)
 8016e50:	4111      	asrs	r1, r2
 8016e52:	420b      	tst	r3, r1
 8016e54:	d0fa      	beq.n	8016e4c <floorf+0x38>
 8016e56:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8016e8c <floorf+0x78>
 8016e5a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016e5e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e66:	ddef      	ble.n	8016e48 <floorf+0x34>
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	bfbe      	ittt	lt
 8016e6c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8016e70:	fa40 f202 	asrlt.w	r2, r0, r2
 8016e74:	189b      	addlt	r3, r3, r2
 8016e76:	ea23 0301 	bic.w	r3, r3, r1
 8016e7a:	e7e5      	b.n	8016e48 <floorf+0x34>
 8016e7c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016e80:	d3e4      	bcc.n	8016e4c <floorf+0x38>
 8016e82:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016e86:	4770      	bx	lr
 8016e88:	2300      	movs	r3, #0
 8016e8a:	e7dd      	b.n	8016e48 <floorf+0x34>
 8016e8c:	7149f2ca 	.word	0x7149f2ca
 8016e90:	bf800000 	.word	0xbf800000
 8016e94:	007fffff 	.word	0x007fffff

08016e98 <nanf>:
 8016e98:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016ea0 <nanf+0x8>
 8016e9c:	4770      	bx	lr
 8016e9e:	bf00      	nop
 8016ea0:	7fc00000 	.word	0x7fc00000

08016ea4 <scalbnf>:
 8016ea4:	ee10 3a10 	vmov	r3, s0
 8016ea8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8016eac:	d025      	beq.n	8016efa <scalbnf+0x56>
 8016eae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016eb2:	d302      	bcc.n	8016eba <scalbnf+0x16>
 8016eb4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016eb8:	4770      	bx	lr
 8016eba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016ebe:	d122      	bne.n	8016f06 <scalbnf+0x62>
 8016ec0:	4b2a      	ldr	r3, [pc, #168]	; (8016f6c <scalbnf+0xc8>)
 8016ec2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8016f70 <scalbnf+0xcc>
 8016ec6:	4298      	cmp	r0, r3
 8016ec8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016ecc:	db16      	blt.n	8016efc <scalbnf+0x58>
 8016ece:	ee10 3a10 	vmov	r3, s0
 8016ed2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8016ed6:	3a19      	subs	r2, #25
 8016ed8:	4402      	add	r2, r0
 8016eda:	2afe      	cmp	r2, #254	; 0xfe
 8016edc:	dd15      	ble.n	8016f0a <scalbnf+0x66>
 8016ede:	ee10 3a10 	vmov	r3, s0
 8016ee2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016f74 <scalbnf+0xd0>
 8016ee6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8016f78 <scalbnf+0xd4>
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	eeb0 7a67 	vmov.f32	s14, s15
 8016ef0:	bfb8      	it	lt
 8016ef2:	eef0 7a66 	vmovlt.f32	s15, s13
 8016ef6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8016efa:	4770      	bx	lr
 8016efc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016f7c <scalbnf+0xd8>
 8016f00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016f04:	4770      	bx	lr
 8016f06:	0dd2      	lsrs	r2, r2, #23
 8016f08:	e7e6      	b.n	8016ed8 <scalbnf+0x34>
 8016f0a:	2a00      	cmp	r2, #0
 8016f0c:	dd06      	ble.n	8016f1c <scalbnf+0x78>
 8016f0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016f12:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016f16:	ee00 3a10 	vmov	s0, r3
 8016f1a:	4770      	bx	lr
 8016f1c:	f112 0f16 	cmn.w	r2, #22
 8016f20:	da1a      	bge.n	8016f58 <scalbnf+0xb4>
 8016f22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016f26:	4298      	cmp	r0, r3
 8016f28:	ee10 3a10 	vmov	r3, s0
 8016f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016f30:	dd0a      	ble.n	8016f48 <scalbnf+0xa4>
 8016f32:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016f74 <scalbnf+0xd0>
 8016f36:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8016f78 <scalbnf+0xd4>
 8016f3a:	eef0 7a40 	vmov.f32	s15, s0
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	bf18      	it	ne
 8016f42:	eeb0 0a47 	vmovne.f32	s0, s14
 8016f46:	e7db      	b.n	8016f00 <scalbnf+0x5c>
 8016f48:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8016f7c <scalbnf+0xd8>
 8016f4c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8016f80 <scalbnf+0xdc>
 8016f50:	eef0 7a40 	vmov.f32	s15, s0
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	e7f3      	b.n	8016f40 <scalbnf+0x9c>
 8016f58:	3219      	adds	r2, #25
 8016f5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016f5e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8016f62:	eddf 7a08 	vldr	s15, [pc, #32]	; 8016f84 <scalbnf+0xe0>
 8016f66:	ee07 3a10 	vmov	s14, r3
 8016f6a:	e7c4      	b.n	8016ef6 <scalbnf+0x52>
 8016f6c:	ffff3cb0 	.word	0xffff3cb0
 8016f70:	4c000000 	.word	0x4c000000
 8016f74:	7149f2ca 	.word	0x7149f2ca
 8016f78:	f149f2ca 	.word	0xf149f2ca
 8016f7c:	0da24260 	.word	0x0da24260
 8016f80:	8da24260 	.word	0x8da24260
 8016f84:	33000000 	.word	0x33000000

08016f88 <abort>:
 8016f88:	b508      	push	{r3, lr}
 8016f8a:	2006      	movs	r0, #6
 8016f8c:	f000 fdb0 	bl	8017af0 <raise>
 8016f90:	2001      	movs	r0, #1
 8016f92:	f7eb f9cd 	bl	8002330 <_exit>
	...

08016f98 <__errno>:
 8016f98:	4b01      	ldr	r3, [pc, #4]	; (8016fa0 <__errno+0x8>)
 8016f9a:	6818      	ldr	r0, [r3, #0]
 8016f9c:	4770      	bx	lr
 8016f9e:	bf00      	nop
 8016fa0:	200000f0 	.word	0x200000f0

08016fa4 <__libc_init_array>:
 8016fa4:	b570      	push	{r4, r5, r6, lr}
 8016fa6:	4d0d      	ldr	r5, [pc, #52]	; (8016fdc <__libc_init_array+0x38>)
 8016fa8:	4c0d      	ldr	r4, [pc, #52]	; (8016fe0 <__libc_init_array+0x3c>)
 8016faa:	1b64      	subs	r4, r4, r5
 8016fac:	10a4      	asrs	r4, r4, #2
 8016fae:	2600      	movs	r6, #0
 8016fb0:	42a6      	cmp	r6, r4
 8016fb2:	d109      	bne.n	8016fc8 <__libc_init_array+0x24>
 8016fb4:	4d0b      	ldr	r5, [pc, #44]	; (8016fe4 <__libc_init_array+0x40>)
 8016fb6:	4c0c      	ldr	r4, [pc, #48]	; (8016fe8 <__libc_init_array+0x44>)
 8016fb8:	f002 fed8 	bl	8019d6c <_init>
 8016fbc:	1b64      	subs	r4, r4, r5
 8016fbe:	10a4      	asrs	r4, r4, #2
 8016fc0:	2600      	movs	r6, #0
 8016fc2:	42a6      	cmp	r6, r4
 8016fc4:	d105      	bne.n	8016fd2 <__libc_init_array+0x2e>
 8016fc6:	bd70      	pop	{r4, r5, r6, pc}
 8016fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fcc:	4798      	blx	r3
 8016fce:	3601      	adds	r6, #1
 8016fd0:	e7ee      	b.n	8016fb0 <__libc_init_array+0xc>
 8016fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8016fd6:	4798      	blx	r3
 8016fd8:	3601      	adds	r6, #1
 8016fda:	e7f2      	b.n	8016fc2 <__libc_init_array+0x1e>
 8016fdc:	0801a834 	.word	0x0801a834
 8016fe0:	0801a834 	.word	0x0801a834
 8016fe4:	0801a834 	.word	0x0801a834
 8016fe8:	0801a838 	.word	0x0801a838

08016fec <malloc>:
 8016fec:	4b02      	ldr	r3, [pc, #8]	; (8016ff8 <malloc+0xc>)
 8016fee:	4601      	mov	r1, r0
 8016ff0:	6818      	ldr	r0, [r3, #0]
 8016ff2:	f000 b869 	b.w	80170c8 <_malloc_r>
 8016ff6:	bf00      	nop
 8016ff8:	200000f0 	.word	0x200000f0

08016ffc <memcpy>:
 8016ffc:	440a      	add	r2, r1
 8016ffe:	4291      	cmp	r1, r2
 8017000:	f100 33ff 	add.w	r3, r0, #4294967295
 8017004:	d100      	bne.n	8017008 <memcpy+0xc>
 8017006:	4770      	bx	lr
 8017008:	b510      	push	{r4, lr}
 801700a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801700e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017012:	4291      	cmp	r1, r2
 8017014:	d1f9      	bne.n	801700a <memcpy+0xe>
 8017016:	bd10      	pop	{r4, pc}

08017018 <memset>:
 8017018:	4402      	add	r2, r0
 801701a:	4603      	mov	r3, r0
 801701c:	4293      	cmp	r3, r2
 801701e:	d100      	bne.n	8017022 <memset+0xa>
 8017020:	4770      	bx	lr
 8017022:	f803 1b01 	strb.w	r1, [r3], #1
 8017026:	e7f9      	b.n	801701c <memset+0x4>

08017028 <_free_r>:
 8017028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801702a:	2900      	cmp	r1, #0
 801702c:	d048      	beq.n	80170c0 <_free_r+0x98>
 801702e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017032:	9001      	str	r0, [sp, #4]
 8017034:	2b00      	cmp	r3, #0
 8017036:	f1a1 0404 	sub.w	r4, r1, #4
 801703a:	bfb8      	it	lt
 801703c:	18e4      	addlt	r4, r4, r3
 801703e:	f001 fd1d 	bl	8018a7c <__malloc_lock>
 8017042:	4a20      	ldr	r2, [pc, #128]	; (80170c4 <_free_r+0x9c>)
 8017044:	9801      	ldr	r0, [sp, #4]
 8017046:	6813      	ldr	r3, [r2, #0]
 8017048:	4615      	mov	r5, r2
 801704a:	b933      	cbnz	r3, 801705a <_free_r+0x32>
 801704c:	6063      	str	r3, [r4, #4]
 801704e:	6014      	str	r4, [r2, #0]
 8017050:	b003      	add	sp, #12
 8017052:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017056:	f001 bd17 	b.w	8018a88 <__malloc_unlock>
 801705a:	42a3      	cmp	r3, r4
 801705c:	d90b      	bls.n	8017076 <_free_r+0x4e>
 801705e:	6821      	ldr	r1, [r4, #0]
 8017060:	1862      	adds	r2, r4, r1
 8017062:	4293      	cmp	r3, r2
 8017064:	bf04      	itt	eq
 8017066:	681a      	ldreq	r2, [r3, #0]
 8017068:	685b      	ldreq	r3, [r3, #4]
 801706a:	6063      	str	r3, [r4, #4]
 801706c:	bf04      	itt	eq
 801706e:	1852      	addeq	r2, r2, r1
 8017070:	6022      	streq	r2, [r4, #0]
 8017072:	602c      	str	r4, [r5, #0]
 8017074:	e7ec      	b.n	8017050 <_free_r+0x28>
 8017076:	461a      	mov	r2, r3
 8017078:	685b      	ldr	r3, [r3, #4]
 801707a:	b10b      	cbz	r3, 8017080 <_free_r+0x58>
 801707c:	42a3      	cmp	r3, r4
 801707e:	d9fa      	bls.n	8017076 <_free_r+0x4e>
 8017080:	6811      	ldr	r1, [r2, #0]
 8017082:	1855      	adds	r5, r2, r1
 8017084:	42a5      	cmp	r5, r4
 8017086:	d10b      	bne.n	80170a0 <_free_r+0x78>
 8017088:	6824      	ldr	r4, [r4, #0]
 801708a:	4421      	add	r1, r4
 801708c:	1854      	adds	r4, r2, r1
 801708e:	42a3      	cmp	r3, r4
 8017090:	6011      	str	r1, [r2, #0]
 8017092:	d1dd      	bne.n	8017050 <_free_r+0x28>
 8017094:	681c      	ldr	r4, [r3, #0]
 8017096:	685b      	ldr	r3, [r3, #4]
 8017098:	6053      	str	r3, [r2, #4]
 801709a:	4421      	add	r1, r4
 801709c:	6011      	str	r1, [r2, #0]
 801709e:	e7d7      	b.n	8017050 <_free_r+0x28>
 80170a0:	d902      	bls.n	80170a8 <_free_r+0x80>
 80170a2:	230c      	movs	r3, #12
 80170a4:	6003      	str	r3, [r0, #0]
 80170a6:	e7d3      	b.n	8017050 <_free_r+0x28>
 80170a8:	6825      	ldr	r5, [r4, #0]
 80170aa:	1961      	adds	r1, r4, r5
 80170ac:	428b      	cmp	r3, r1
 80170ae:	bf04      	itt	eq
 80170b0:	6819      	ldreq	r1, [r3, #0]
 80170b2:	685b      	ldreq	r3, [r3, #4]
 80170b4:	6063      	str	r3, [r4, #4]
 80170b6:	bf04      	itt	eq
 80170b8:	1949      	addeq	r1, r1, r5
 80170ba:	6021      	streq	r1, [r4, #0]
 80170bc:	6054      	str	r4, [r2, #4]
 80170be:	e7c7      	b.n	8017050 <_free_r+0x28>
 80170c0:	b003      	add	sp, #12
 80170c2:	bd30      	pop	{r4, r5, pc}
 80170c4:	200011b8 	.word	0x200011b8

080170c8 <_malloc_r>:
 80170c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ca:	1ccd      	adds	r5, r1, #3
 80170cc:	f025 0503 	bic.w	r5, r5, #3
 80170d0:	3508      	adds	r5, #8
 80170d2:	2d0c      	cmp	r5, #12
 80170d4:	bf38      	it	cc
 80170d6:	250c      	movcc	r5, #12
 80170d8:	2d00      	cmp	r5, #0
 80170da:	4606      	mov	r6, r0
 80170dc:	db01      	blt.n	80170e2 <_malloc_r+0x1a>
 80170de:	42a9      	cmp	r1, r5
 80170e0:	d903      	bls.n	80170ea <_malloc_r+0x22>
 80170e2:	230c      	movs	r3, #12
 80170e4:	6033      	str	r3, [r6, #0]
 80170e6:	2000      	movs	r0, #0
 80170e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170ea:	f001 fcc7 	bl	8018a7c <__malloc_lock>
 80170ee:	4921      	ldr	r1, [pc, #132]	; (8017174 <_malloc_r+0xac>)
 80170f0:	680a      	ldr	r2, [r1, #0]
 80170f2:	4614      	mov	r4, r2
 80170f4:	b99c      	cbnz	r4, 801711e <_malloc_r+0x56>
 80170f6:	4f20      	ldr	r7, [pc, #128]	; (8017178 <_malloc_r+0xb0>)
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	b923      	cbnz	r3, 8017106 <_malloc_r+0x3e>
 80170fc:	4621      	mov	r1, r4
 80170fe:	4630      	mov	r0, r6
 8017100:	f000 fcbe 	bl	8017a80 <_sbrk_r>
 8017104:	6038      	str	r0, [r7, #0]
 8017106:	4629      	mov	r1, r5
 8017108:	4630      	mov	r0, r6
 801710a:	f000 fcb9 	bl	8017a80 <_sbrk_r>
 801710e:	1c43      	adds	r3, r0, #1
 8017110:	d123      	bne.n	801715a <_malloc_r+0x92>
 8017112:	230c      	movs	r3, #12
 8017114:	6033      	str	r3, [r6, #0]
 8017116:	4630      	mov	r0, r6
 8017118:	f001 fcb6 	bl	8018a88 <__malloc_unlock>
 801711c:	e7e3      	b.n	80170e6 <_malloc_r+0x1e>
 801711e:	6823      	ldr	r3, [r4, #0]
 8017120:	1b5b      	subs	r3, r3, r5
 8017122:	d417      	bmi.n	8017154 <_malloc_r+0x8c>
 8017124:	2b0b      	cmp	r3, #11
 8017126:	d903      	bls.n	8017130 <_malloc_r+0x68>
 8017128:	6023      	str	r3, [r4, #0]
 801712a:	441c      	add	r4, r3
 801712c:	6025      	str	r5, [r4, #0]
 801712e:	e004      	b.n	801713a <_malloc_r+0x72>
 8017130:	6863      	ldr	r3, [r4, #4]
 8017132:	42a2      	cmp	r2, r4
 8017134:	bf0c      	ite	eq
 8017136:	600b      	streq	r3, [r1, #0]
 8017138:	6053      	strne	r3, [r2, #4]
 801713a:	4630      	mov	r0, r6
 801713c:	f001 fca4 	bl	8018a88 <__malloc_unlock>
 8017140:	f104 000b 	add.w	r0, r4, #11
 8017144:	1d23      	adds	r3, r4, #4
 8017146:	f020 0007 	bic.w	r0, r0, #7
 801714a:	1ac2      	subs	r2, r0, r3
 801714c:	d0cc      	beq.n	80170e8 <_malloc_r+0x20>
 801714e:	1a1b      	subs	r3, r3, r0
 8017150:	50a3      	str	r3, [r4, r2]
 8017152:	e7c9      	b.n	80170e8 <_malloc_r+0x20>
 8017154:	4622      	mov	r2, r4
 8017156:	6864      	ldr	r4, [r4, #4]
 8017158:	e7cc      	b.n	80170f4 <_malloc_r+0x2c>
 801715a:	1cc4      	adds	r4, r0, #3
 801715c:	f024 0403 	bic.w	r4, r4, #3
 8017160:	42a0      	cmp	r0, r4
 8017162:	d0e3      	beq.n	801712c <_malloc_r+0x64>
 8017164:	1a21      	subs	r1, r4, r0
 8017166:	4630      	mov	r0, r6
 8017168:	f000 fc8a 	bl	8017a80 <_sbrk_r>
 801716c:	3001      	adds	r0, #1
 801716e:	d1dd      	bne.n	801712c <_malloc_r+0x64>
 8017170:	e7cf      	b.n	8017112 <_malloc_r+0x4a>
 8017172:	bf00      	nop
 8017174:	200011b8 	.word	0x200011b8
 8017178:	200011bc 	.word	0x200011bc

0801717c <__cvt>:
 801717c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017180:	ec55 4b10 	vmov	r4, r5, d0
 8017184:	2d00      	cmp	r5, #0
 8017186:	460e      	mov	r6, r1
 8017188:	4619      	mov	r1, r3
 801718a:	462b      	mov	r3, r5
 801718c:	bfbb      	ittet	lt
 801718e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017192:	461d      	movlt	r5, r3
 8017194:	2300      	movge	r3, #0
 8017196:	232d      	movlt	r3, #45	; 0x2d
 8017198:	700b      	strb	r3, [r1, #0]
 801719a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801719c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80171a0:	4691      	mov	r9, r2
 80171a2:	f023 0820 	bic.w	r8, r3, #32
 80171a6:	bfbc      	itt	lt
 80171a8:	4622      	movlt	r2, r4
 80171aa:	4614      	movlt	r4, r2
 80171ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80171b0:	d005      	beq.n	80171be <__cvt+0x42>
 80171b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80171b6:	d100      	bne.n	80171ba <__cvt+0x3e>
 80171b8:	3601      	adds	r6, #1
 80171ba:	2102      	movs	r1, #2
 80171bc:	e000      	b.n	80171c0 <__cvt+0x44>
 80171be:	2103      	movs	r1, #3
 80171c0:	ab03      	add	r3, sp, #12
 80171c2:	9301      	str	r3, [sp, #4]
 80171c4:	ab02      	add	r3, sp, #8
 80171c6:	9300      	str	r3, [sp, #0]
 80171c8:	ec45 4b10 	vmov	d0, r4, r5
 80171cc:	4653      	mov	r3, sl
 80171ce:	4632      	mov	r2, r6
 80171d0:	f000 fd6a 	bl	8017ca8 <_dtoa_r>
 80171d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80171d8:	4607      	mov	r7, r0
 80171da:	d102      	bne.n	80171e2 <__cvt+0x66>
 80171dc:	f019 0f01 	tst.w	r9, #1
 80171e0:	d022      	beq.n	8017228 <__cvt+0xac>
 80171e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80171e6:	eb07 0906 	add.w	r9, r7, r6
 80171ea:	d110      	bne.n	801720e <__cvt+0x92>
 80171ec:	783b      	ldrb	r3, [r7, #0]
 80171ee:	2b30      	cmp	r3, #48	; 0x30
 80171f0:	d10a      	bne.n	8017208 <__cvt+0x8c>
 80171f2:	2200      	movs	r2, #0
 80171f4:	2300      	movs	r3, #0
 80171f6:	4620      	mov	r0, r4
 80171f8:	4629      	mov	r1, r5
 80171fa:	f7e9 fc65 	bl	8000ac8 <__aeabi_dcmpeq>
 80171fe:	b918      	cbnz	r0, 8017208 <__cvt+0x8c>
 8017200:	f1c6 0601 	rsb	r6, r6, #1
 8017204:	f8ca 6000 	str.w	r6, [sl]
 8017208:	f8da 3000 	ldr.w	r3, [sl]
 801720c:	4499      	add	r9, r3
 801720e:	2200      	movs	r2, #0
 8017210:	2300      	movs	r3, #0
 8017212:	4620      	mov	r0, r4
 8017214:	4629      	mov	r1, r5
 8017216:	f7e9 fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 801721a:	b108      	cbz	r0, 8017220 <__cvt+0xa4>
 801721c:	f8cd 900c 	str.w	r9, [sp, #12]
 8017220:	2230      	movs	r2, #48	; 0x30
 8017222:	9b03      	ldr	r3, [sp, #12]
 8017224:	454b      	cmp	r3, r9
 8017226:	d307      	bcc.n	8017238 <__cvt+0xbc>
 8017228:	9b03      	ldr	r3, [sp, #12]
 801722a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801722c:	1bdb      	subs	r3, r3, r7
 801722e:	4638      	mov	r0, r7
 8017230:	6013      	str	r3, [r2, #0]
 8017232:	b004      	add	sp, #16
 8017234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017238:	1c59      	adds	r1, r3, #1
 801723a:	9103      	str	r1, [sp, #12]
 801723c:	701a      	strb	r2, [r3, #0]
 801723e:	e7f0      	b.n	8017222 <__cvt+0xa6>

08017240 <__exponent>:
 8017240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017242:	4603      	mov	r3, r0
 8017244:	2900      	cmp	r1, #0
 8017246:	bfb8      	it	lt
 8017248:	4249      	neglt	r1, r1
 801724a:	f803 2b02 	strb.w	r2, [r3], #2
 801724e:	bfb4      	ite	lt
 8017250:	222d      	movlt	r2, #45	; 0x2d
 8017252:	222b      	movge	r2, #43	; 0x2b
 8017254:	2909      	cmp	r1, #9
 8017256:	7042      	strb	r2, [r0, #1]
 8017258:	dd2a      	ble.n	80172b0 <__exponent+0x70>
 801725a:	f10d 0407 	add.w	r4, sp, #7
 801725e:	46a4      	mov	ip, r4
 8017260:	270a      	movs	r7, #10
 8017262:	46a6      	mov	lr, r4
 8017264:	460a      	mov	r2, r1
 8017266:	fb91 f6f7 	sdiv	r6, r1, r7
 801726a:	fb07 1516 	mls	r5, r7, r6, r1
 801726e:	3530      	adds	r5, #48	; 0x30
 8017270:	2a63      	cmp	r2, #99	; 0x63
 8017272:	f104 34ff 	add.w	r4, r4, #4294967295
 8017276:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801727a:	4631      	mov	r1, r6
 801727c:	dcf1      	bgt.n	8017262 <__exponent+0x22>
 801727e:	3130      	adds	r1, #48	; 0x30
 8017280:	f1ae 0502 	sub.w	r5, lr, #2
 8017284:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017288:	1c44      	adds	r4, r0, #1
 801728a:	4629      	mov	r1, r5
 801728c:	4561      	cmp	r1, ip
 801728e:	d30a      	bcc.n	80172a6 <__exponent+0x66>
 8017290:	f10d 0209 	add.w	r2, sp, #9
 8017294:	eba2 020e 	sub.w	r2, r2, lr
 8017298:	4565      	cmp	r5, ip
 801729a:	bf88      	it	hi
 801729c:	2200      	movhi	r2, #0
 801729e:	4413      	add	r3, r2
 80172a0:	1a18      	subs	r0, r3, r0
 80172a2:	b003      	add	sp, #12
 80172a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80172aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80172ae:	e7ed      	b.n	801728c <__exponent+0x4c>
 80172b0:	2330      	movs	r3, #48	; 0x30
 80172b2:	3130      	adds	r1, #48	; 0x30
 80172b4:	7083      	strb	r3, [r0, #2]
 80172b6:	70c1      	strb	r1, [r0, #3]
 80172b8:	1d03      	adds	r3, r0, #4
 80172ba:	e7f1      	b.n	80172a0 <__exponent+0x60>

080172bc <_printf_float>:
 80172bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172c0:	ed2d 8b02 	vpush	{d8}
 80172c4:	b08d      	sub	sp, #52	; 0x34
 80172c6:	460c      	mov	r4, r1
 80172c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80172cc:	4616      	mov	r6, r2
 80172ce:	461f      	mov	r7, r3
 80172d0:	4605      	mov	r5, r0
 80172d2:	f001 fbcb 	bl	8018a6c <_localeconv_r>
 80172d6:	f8d0 a000 	ldr.w	sl, [r0]
 80172da:	4650      	mov	r0, sl
 80172dc:	f7e8 ff78 	bl	80001d0 <strlen>
 80172e0:	2300      	movs	r3, #0
 80172e2:	930a      	str	r3, [sp, #40]	; 0x28
 80172e4:	6823      	ldr	r3, [r4, #0]
 80172e6:	9305      	str	r3, [sp, #20]
 80172e8:	f8d8 3000 	ldr.w	r3, [r8]
 80172ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80172f0:	3307      	adds	r3, #7
 80172f2:	f023 0307 	bic.w	r3, r3, #7
 80172f6:	f103 0208 	add.w	r2, r3, #8
 80172fa:	f8c8 2000 	str.w	r2, [r8]
 80172fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017302:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017306:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801730a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801730e:	9307      	str	r3, [sp, #28]
 8017310:	f8cd 8018 	str.w	r8, [sp, #24]
 8017314:	ee08 0a10 	vmov	s16, r0
 8017318:	4b9f      	ldr	r3, [pc, #636]	; (8017598 <_printf_float+0x2dc>)
 801731a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801731e:	f04f 32ff 	mov.w	r2, #4294967295
 8017322:	f7e9 fc03 	bl	8000b2c <__aeabi_dcmpun>
 8017326:	bb88      	cbnz	r0, 801738c <_printf_float+0xd0>
 8017328:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801732c:	4b9a      	ldr	r3, [pc, #616]	; (8017598 <_printf_float+0x2dc>)
 801732e:	f04f 32ff 	mov.w	r2, #4294967295
 8017332:	f7e9 fbdd 	bl	8000af0 <__aeabi_dcmple>
 8017336:	bb48      	cbnz	r0, 801738c <_printf_float+0xd0>
 8017338:	2200      	movs	r2, #0
 801733a:	2300      	movs	r3, #0
 801733c:	4640      	mov	r0, r8
 801733e:	4649      	mov	r1, r9
 8017340:	f7e9 fbcc 	bl	8000adc <__aeabi_dcmplt>
 8017344:	b110      	cbz	r0, 801734c <_printf_float+0x90>
 8017346:	232d      	movs	r3, #45	; 0x2d
 8017348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801734c:	4b93      	ldr	r3, [pc, #588]	; (801759c <_printf_float+0x2e0>)
 801734e:	4894      	ldr	r0, [pc, #592]	; (80175a0 <_printf_float+0x2e4>)
 8017350:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017354:	bf94      	ite	ls
 8017356:	4698      	movls	r8, r3
 8017358:	4680      	movhi	r8, r0
 801735a:	2303      	movs	r3, #3
 801735c:	6123      	str	r3, [r4, #16]
 801735e:	9b05      	ldr	r3, [sp, #20]
 8017360:	f023 0204 	bic.w	r2, r3, #4
 8017364:	6022      	str	r2, [r4, #0]
 8017366:	f04f 0900 	mov.w	r9, #0
 801736a:	9700      	str	r7, [sp, #0]
 801736c:	4633      	mov	r3, r6
 801736e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017370:	4621      	mov	r1, r4
 8017372:	4628      	mov	r0, r5
 8017374:	f000 f9d8 	bl	8017728 <_printf_common>
 8017378:	3001      	adds	r0, #1
 801737a:	f040 8090 	bne.w	801749e <_printf_float+0x1e2>
 801737e:	f04f 30ff 	mov.w	r0, #4294967295
 8017382:	b00d      	add	sp, #52	; 0x34
 8017384:	ecbd 8b02 	vpop	{d8}
 8017388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801738c:	4642      	mov	r2, r8
 801738e:	464b      	mov	r3, r9
 8017390:	4640      	mov	r0, r8
 8017392:	4649      	mov	r1, r9
 8017394:	f7e9 fbca 	bl	8000b2c <__aeabi_dcmpun>
 8017398:	b140      	cbz	r0, 80173ac <_printf_float+0xf0>
 801739a:	464b      	mov	r3, r9
 801739c:	2b00      	cmp	r3, #0
 801739e:	bfbc      	itt	lt
 80173a0:	232d      	movlt	r3, #45	; 0x2d
 80173a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80173a6:	487f      	ldr	r0, [pc, #508]	; (80175a4 <_printf_float+0x2e8>)
 80173a8:	4b7f      	ldr	r3, [pc, #508]	; (80175a8 <_printf_float+0x2ec>)
 80173aa:	e7d1      	b.n	8017350 <_printf_float+0x94>
 80173ac:	6863      	ldr	r3, [r4, #4]
 80173ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80173b2:	9206      	str	r2, [sp, #24]
 80173b4:	1c5a      	adds	r2, r3, #1
 80173b6:	d13f      	bne.n	8017438 <_printf_float+0x17c>
 80173b8:	2306      	movs	r3, #6
 80173ba:	6063      	str	r3, [r4, #4]
 80173bc:	9b05      	ldr	r3, [sp, #20]
 80173be:	6861      	ldr	r1, [r4, #4]
 80173c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80173c4:	2300      	movs	r3, #0
 80173c6:	9303      	str	r3, [sp, #12]
 80173c8:	ab0a      	add	r3, sp, #40	; 0x28
 80173ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80173ce:	ab09      	add	r3, sp, #36	; 0x24
 80173d0:	ec49 8b10 	vmov	d0, r8, r9
 80173d4:	9300      	str	r3, [sp, #0]
 80173d6:	6022      	str	r2, [r4, #0]
 80173d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80173dc:	4628      	mov	r0, r5
 80173de:	f7ff fecd 	bl	801717c <__cvt>
 80173e2:	9b06      	ldr	r3, [sp, #24]
 80173e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80173e6:	2b47      	cmp	r3, #71	; 0x47
 80173e8:	4680      	mov	r8, r0
 80173ea:	d108      	bne.n	80173fe <_printf_float+0x142>
 80173ec:	1cc8      	adds	r0, r1, #3
 80173ee:	db02      	blt.n	80173f6 <_printf_float+0x13a>
 80173f0:	6863      	ldr	r3, [r4, #4]
 80173f2:	4299      	cmp	r1, r3
 80173f4:	dd41      	ble.n	801747a <_printf_float+0x1be>
 80173f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80173fa:	fa5f fb8b 	uxtb.w	fp, fp
 80173fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017402:	d820      	bhi.n	8017446 <_printf_float+0x18a>
 8017404:	3901      	subs	r1, #1
 8017406:	465a      	mov	r2, fp
 8017408:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801740c:	9109      	str	r1, [sp, #36]	; 0x24
 801740e:	f7ff ff17 	bl	8017240 <__exponent>
 8017412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017414:	1813      	adds	r3, r2, r0
 8017416:	2a01      	cmp	r2, #1
 8017418:	4681      	mov	r9, r0
 801741a:	6123      	str	r3, [r4, #16]
 801741c:	dc02      	bgt.n	8017424 <_printf_float+0x168>
 801741e:	6822      	ldr	r2, [r4, #0]
 8017420:	07d2      	lsls	r2, r2, #31
 8017422:	d501      	bpl.n	8017428 <_printf_float+0x16c>
 8017424:	3301      	adds	r3, #1
 8017426:	6123      	str	r3, [r4, #16]
 8017428:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801742c:	2b00      	cmp	r3, #0
 801742e:	d09c      	beq.n	801736a <_printf_float+0xae>
 8017430:	232d      	movs	r3, #45	; 0x2d
 8017432:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017436:	e798      	b.n	801736a <_printf_float+0xae>
 8017438:	9a06      	ldr	r2, [sp, #24]
 801743a:	2a47      	cmp	r2, #71	; 0x47
 801743c:	d1be      	bne.n	80173bc <_printf_float+0x100>
 801743e:	2b00      	cmp	r3, #0
 8017440:	d1bc      	bne.n	80173bc <_printf_float+0x100>
 8017442:	2301      	movs	r3, #1
 8017444:	e7b9      	b.n	80173ba <_printf_float+0xfe>
 8017446:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801744a:	d118      	bne.n	801747e <_printf_float+0x1c2>
 801744c:	2900      	cmp	r1, #0
 801744e:	6863      	ldr	r3, [r4, #4]
 8017450:	dd0b      	ble.n	801746a <_printf_float+0x1ae>
 8017452:	6121      	str	r1, [r4, #16]
 8017454:	b913      	cbnz	r3, 801745c <_printf_float+0x1a0>
 8017456:	6822      	ldr	r2, [r4, #0]
 8017458:	07d0      	lsls	r0, r2, #31
 801745a:	d502      	bpl.n	8017462 <_printf_float+0x1a6>
 801745c:	3301      	adds	r3, #1
 801745e:	440b      	add	r3, r1
 8017460:	6123      	str	r3, [r4, #16]
 8017462:	65a1      	str	r1, [r4, #88]	; 0x58
 8017464:	f04f 0900 	mov.w	r9, #0
 8017468:	e7de      	b.n	8017428 <_printf_float+0x16c>
 801746a:	b913      	cbnz	r3, 8017472 <_printf_float+0x1b6>
 801746c:	6822      	ldr	r2, [r4, #0]
 801746e:	07d2      	lsls	r2, r2, #31
 8017470:	d501      	bpl.n	8017476 <_printf_float+0x1ba>
 8017472:	3302      	adds	r3, #2
 8017474:	e7f4      	b.n	8017460 <_printf_float+0x1a4>
 8017476:	2301      	movs	r3, #1
 8017478:	e7f2      	b.n	8017460 <_printf_float+0x1a4>
 801747a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801747e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017480:	4299      	cmp	r1, r3
 8017482:	db05      	blt.n	8017490 <_printf_float+0x1d4>
 8017484:	6823      	ldr	r3, [r4, #0]
 8017486:	6121      	str	r1, [r4, #16]
 8017488:	07d8      	lsls	r0, r3, #31
 801748a:	d5ea      	bpl.n	8017462 <_printf_float+0x1a6>
 801748c:	1c4b      	adds	r3, r1, #1
 801748e:	e7e7      	b.n	8017460 <_printf_float+0x1a4>
 8017490:	2900      	cmp	r1, #0
 8017492:	bfd4      	ite	le
 8017494:	f1c1 0202 	rsble	r2, r1, #2
 8017498:	2201      	movgt	r2, #1
 801749a:	4413      	add	r3, r2
 801749c:	e7e0      	b.n	8017460 <_printf_float+0x1a4>
 801749e:	6823      	ldr	r3, [r4, #0]
 80174a0:	055a      	lsls	r2, r3, #21
 80174a2:	d407      	bmi.n	80174b4 <_printf_float+0x1f8>
 80174a4:	6923      	ldr	r3, [r4, #16]
 80174a6:	4642      	mov	r2, r8
 80174a8:	4631      	mov	r1, r6
 80174aa:	4628      	mov	r0, r5
 80174ac:	47b8      	blx	r7
 80174ae:	3001      	adds	r0, #1
 80174b0:	d12c      	bne.n	801750c <_printf_float+0x250>
 80174b2:	e764      	b.n	801737e <_printf_float+0xc2>
 80174b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80174b8:	f240 80e0 	bls.w	801767c <_printf_float+0x3c0>
 80174bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80174c0:	2200      	movs	r2, #0
 80174c2:	2300      	movs	r3, #0
 80174c4:	f7e9 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 80174c8:	2800      	cmp	r0, #0
 80174ca:	d034      	beq.n	8017536 <_printf_float+0x27a>
 80174cc:	4a37      	ldr	r2, [pc, #220]	; (80175ac <_printf_float+0x2f0>)
 80174ce:	2301      	movs	r3, #1
 80174d0:	4631      	mov	r1, r6
 80174d2:	4628      	mov	r0, r5
 80174d4:	47b8      	blx	r7
 80174d6:	3001      	adds	r0, #1
 80174d8:	f43f af51 	beq.w	801737e <_printf_float+0xc2>
 80174dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80174e0:	429a      	cmp	r2, r3
 80174e2:	db02      	blt.n	80174ea <_printf_float+0x22e>
 80174e4:	6823      	ldr	r3, [r4, #0]
 80174e6:	07d8      	lsls	r0, r3, #31
 80174e8:	d510      	bpl.n	801750c <_printf_float+0x250>
 80174ea:	ee18 3a10 	vmov	r3, s16
 80174ee:	4652      	mov	r2, sl
 80174f0:	4631      	mov	r1, r6
 80174f2:	4628      	mov	r0, r5
 80174f4:	47b8      	blx	r7
 80174f6:	3001      	adds	r0, #1
 80174f8:	f43f af41 	beq.w	801737e <_printf_float+0xc2>
 80174fc:	f04f 0800 	mov.w	r8, #0
 8017500:	f104 091a 	add.w	r9, r4, #26
 8017504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017506:	3b01      	subs	r3, #1
 8017508:	4543      	cmp	r3, r8
 801750a:	dc09      	bgt.n	8017520 <_printf_float+0x264>
 801750c:	6823      	ldr	r3, [r4, #0]
 801750e:	079b      	lsls	r3, r3, #30
 8017510:	f100 8105 	bmi.w	801771e <_printf_float+0x462>
 8017514:	68e0      	ldr	r0, [r4, #12]
 8017516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017518:	4298      	cmp	r0, r3
 801751a:	bfb8      	it	lt
 801751c:	4618      	movlt	r0, r3
 801751e:	e730      	b.n	8017382 <_printf_float+0xc6>
 8017520:	2301      	movs	r3, #1
 8017522:	464a      	mov	r2, r9
 8017524:	4631      	mov	r1, r6
 8017526:	4628      	mov	r0, r5
 8017528:	47b8      	blx	r7
 801752a:	3001      	adds	r0, #1
 801752c:	f43f af27 	beq.w	801737e <_printf_float+0xc2>
 8017530:	f108 0801 	add.w	r8, r8, #1
 8017534:	e7e6      	b.n	8017504 <_printf_float+0x248>
 8017536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017538:	2b00      	cmp	r3, #0
 801753a:	dc39      	bgt.n	80175b0 <_printf_float+0x2f4>
 801753c:	4a1b      	ldr	r2, [pc, #108]	; (80175ac <_printf_float+0x2f0>)
 801753e:	2301      	movs	r3, #1
 8017540:	4631      	mov	r1, r6
 8017542:	4628      	mov	r0, r5
 8017544:	47b8      	blx	r7
 8017546:	3001      	adds	r0, #1
 8017548:	f43f af19 	beq.w	801737e <_printf_float+0xc2>
 801754c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017550:	4313      	orrs	r3, r2
 8017552:	d102      	bne.n	801755a <_printf_float+0x29e>
 8017554:	6823      	ldr	r3, [r4, #0]
 8017556:	07d9      	lsls	r1, r3, #31
 8017558:	d5d8      	bpl.n	801750c <_printf_float+0x250>
 801755a:	ee18 3a10 	vmov	r3, s16
 801755e:	4652      	mov	r2, sl
 8017560:	4631      	mov	r1, r6
 8017562:	4628      	mov	r0, r5
 8017564:	47b8      	blx	r7
 8017566:	3001      	adds	r0, #1
 8017568:	f43f af09 	beq.w	801737e <_printf_float+0xc2>
 801756c:	f04f 0900 	mov.w	r9, #0
 8017570:	f104 0a1a 	add.w	sl, r4, #26
 8017574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017576:	425b      	negs	r3, r3
 8017578:	454b      	cmp	r3, r9
 801757a:	dc01      	bgt.n	8017580 <_printf_float+0x2c4>
 801757c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801757e:	e792      	b.n	80174a6 <_printf_float+0x1ea>
 8017580:	2301      	movs	r3, #1
 8017582:	4652      	mov	r2, sl
 8017584:	4631      	mov	r1, r6
 8017586:	4628      	mov	r0, r5
 8017588:	47b8      	blx	r7
 801758a:	3001      	adds	r0, #1
 801758c:	f43f aef7 	beq.w	801737e <_printf_float+0xc2>
 8017590:	f109 0901 	add.w	r9, r9, #1
 8017594:	e7ee      	b.n	8017574 <_printf_float+0x2b8>
 8017596:	bf00      	nop
 8017598:	7fefffff 	.word	0x7fefffff
 801759c:	0801a44c 	.word	0x0801a44c
 80175a0:	0801a450 	.word	0x0801a450
 80175a4:	0801a458 	.word	0x0801a458
 80175a8:	0801a454 	.word	0x0801a454
 80175ac:	0801a45c 	.word	0x0801a45c
 80175b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80175b4:	429a      	cmp	r2, r3
 80175b6:	bfa8      	it	ge
 80175b8:	461a      	movge	r2, r3
 80175ba:	2a00      	cmp	r2, #0
 80175bc:	4691      	mov	r9, r2
 80175be:	dc37      	bgt.n	8017630 <_printf_float+0x374>
 80175c0:	f04f 0b00 	mov.w	fp, #0
 80175c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80175c8:	f104 021a 	add.w	r2, r4, #26
 80175cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80175ce:	9305      	str	r3, [sp, #20]
 80175d0:	eba3 0309 	sub.w	r3, r3, r9
 80175d4:	455b      	cmp	r3, fp
 80175d6:	dc33      	bgt.n	8017640 <_printf_float+0x384>
 80175d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80175dc:	429a      	cmp	r2, r3
 80175de:	db3b      	blt.n	8017658 <_printf_float+0x39c>
 80175e0:	6823      	ldr	r3, [r4, #0]
 80175e2:	07da      	lsls	r2, r3, #31
 80175e4:	d438      	bmi.n	8017658 <_printf_float+0x39c>
 80175e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175e8:	9b05      	ldr	r3, [sp, #20]
 80175ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80175ec:	1ad3      	subs	r3, r2, r3
 80175ee:	eba2 0901 	sub.w	r9, r2, r1
 80175f2:	4599      	cmp	r9, r3
 80175f4:	bfa8      	it	ge
 80175f6:	4699      	movge	r9, r3
 80175f8:	f1b9 0f00 	cmp.w	r9, #0
 80175fc:	dc35      	bgt.n	801766a <_printf_float+0x3ae>
 80175fe:	f04f 0800 	mov.w	r8, #0
 8017602:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017606:	f104 0a1a 	add.w	sl, r4, #26
 801760a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801760e:	1a9b      	subs	r3, r3, r2
 8017610:	eba3 0309 	sub.w	r3, r3, r9
 8017614:	4543      	cmp	r3, r8
 8017616:	f77f af79 	ble.w	801750c <_printf_float+0x250>
 801761a:	2301      	movs	r3, #1
 801761c:	4652      	mov	r2, sl
 801761e:	4631      	mov	r1, r6
 8017620:	4628      	mov	r0, r5
 8017622:	47b8      	blx	r7
 8017624:	3001      	adds	r0, #1
 8017626:	f43f aeaa 	beq.w	801737e <_printf_float+0xc2>
 801762a:	f108 0801 	add.w	r8, r8, #1
 801762e:	e7ec      	b.n	801760a <_printf_float+0x34e>
 8017630:	4613      	mov	r3, r2
 8017632:	4631      	mov	r1, r6
 8017634:	4642      	mov	r2, r8
 8017636:	4628      	mov	r0, r5
 8017638:	47b8      	blx	r7
 801763a:	3001      	adds	r0, #1
 801763c:	d1c0      	bne.n	80175c0 <_printf_float+0x304>
 801763e:	e69e      	b.n	801737e <_printf_float+0xc2>
 8017640:	2301      	movs	r3, #1
 8017642:	4631      	mov	r1, r6
 8017644:	4628      	mov	r0, r5
 8017646:	9205      	str	r2, [sp, #20]
 8017648:	47b8      	blx	r7
 801764a:	3001      	adds	r0, #1
 801764c:	f43f ae97 	beq.w	801737e <_printf_float+0xc2>
 8017650:	9a05      	ldr	r2, [sp, #20]
 8017652:	f10b 0b01 	add.w	fp, fp, #1
 8017656:	e7b9      	b.n	80175cc <_printf_float+0x310>
 8017658:	ee18 3a10 	vmov	r3, s16
 801765c:	4652      	mov	r2, sl
 801765e:	4631      	mov	r1, r6
 8017660:	4628      	mov	r0, r5
 8017662:	47b8      	blx	r7
 8017664:	3001      	adds	r0, #1
 8017666:	d1be      	bne.n	80175e6 <_printf_float+0x32a>
 8017668:	e689      	b.n	801737e <_printf_float+0xc2>
 801766a:	9a05      	ldr	r2, [sp, #20]
 801766c:	464b      	mov	r3, r9
 801766e:	4442      	add	r2, r8
 8017670:	4631      	mov	r1, r6
 8017672:	4628      	mov	r0, r5
 8017674:	47b8      	blx	r7
 8017676:	3001      	adds	r0, #1
 8017678:	d1c1      	bne.n	80175fe <_printf_float+0x342>
 801767a:	e680      	b.n	801737e <_printf_float+0xc2>
 801767c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801767e:	2a01      	cmp	r2, #1
 8017680:	dc01      	bgt.n	8017686 <_printf_float+0x3ca>
 8017682:	07db      	lsls	r3, r3, #31
 8017684:	d538      	bpl.n	80176f8 <_printf_float+0x43c>
 8017686:	2301      	movs	r3, #1
 8017688:	4642      	mov	r2, r8
 801768a:	4631      	mov	r1, r6
 801768c:	4628      	mov	r0, r5
 801768e:	47b8      	blx	r7
 8017690:	3001      	adds	r0, #1
 8017692:	f43f ae74 	beq.w	801737e <_printf_float+0xc2>
 8017696:	ee18 3a10 	vmov	r3, s16
 801769a:	4652      	mov	r2, sl
 801769c:	4631      	mov	r1, r6
 801769e:	4628      	mov	r0, r5
 80176a0:	47b8      	blx	r7
 80176a2:	3001      	adds	r0, #1
 80176a4:	f43f ae6b 	beq.w	801737e <_printf_float+0xc2>
 80176a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80176ac:	2200      	movs	r2, #0
 80176ae:	2300      	movs	r3, #0
 80176b0:	f7e9 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80176b4:	b9d8      	cbnz	r0, 80176ee <_printf_float+0x432>
 80176b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176b8:	f108 0201 	add.w	r2, r8, #1
 80176bc:	3b01      	subs	r3, #1
 80176be:	4631      	mov	r1, r6
 80176c0:	4628      	mov	r0, r5
 80176c2:	47b8      	blx	r7
 80176c4:	3001      	adds	r0, #1
 80176c6:	d10e      	bne.n	80176e6 <_printf_float+0x42a>
 80176c8:	e659      	b.n	801737e <_printf_float+0xc2>
 80176ca:	2301      	movs	r3, #1
 80176cc:	4652      	mov	r2, sl
 80176ce:	4631      	mov	r1, r6
 80176d0:	4628      	mov	r0, r5
 80176d2:	47b8      	blx	r7
 80176d4:	3001      	adds	r0, #1
 80176d6:	f43f ae52 	beq.w	801737e <_printf_float+0xc2>
 80176da:	f108 0801 	add.w	r8, r8, #1
 80176de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176e0:	3b01      	subs	r3, #1
 80176e2:	4543      	cmp	r3, r8
 80176e4:	dcf1      	bgt.n	80176ca <_printf_float+0x40e>
 80176e6:	464b      	mov	r3, r9
 80176e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80176ec:	e6dc      	b.n	80174a8 <_printf_float+0x1ec>
 80176ee:	f04f 0800 	mov.w	r8, #0
 80176f2:	f104 0a1a 	add.w	sl, r4, #26
 80176f6:	e7f2      	b.n	80176de <_printf_float+0x422>
 80176f8:	2301      	movs	r3, #1
 80176fa:	4642      	mov	r2, r8
 80176fc:	e7df      	b.n	80176be <_printf_float+0x402>
 80176fe:	2301      	movs	r3, #1
 8017700:	464a      	mov	r2, r9
 8017702:	4631      	mov	r1, r6
 8017704:	4628      	mov	r0, r5
 8017706:	47b8      	blx	r7
 8017708:	3001      	adds	r0, #1
 801770a:	f43f ae38 	beq.w	801737e <_printf_float+0xc2>
 801770e:	f108 0801 	add.w	r8, r8, #1
 8017712:	68e3      	ldr	r3, [r4, #12]
 8017714:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017716:	1a5b      	subs	r3, r3, r1
 8017718:	4543      	cmp	r3, r8
 801771a:	dcf0      	bgt.n	80176fe <_printf_float+0x442>
 801771c:	e6fa      	b.n	8017514 <_printf_float+0x258>
 801771e:	f04f 0800 	mov.w	r8, #0
 8017722:	f104 0919 	add.w	r9, r4, #25
 8017726:	e7f4      	b.n	8017712 <_printf_float+0x456>

08017728 <_printf_common>:
 8017728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801772c:	4616      	mov	r6, r2
 801772e:	4699      	mov	r9, r3
 8017730:	688a      	ldr	r2, [r1, #8]
 8017732:	690b      	ldr	r3, [r1, #16]
 8017734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017738:	4293      	cmp	r3, r2
 801773a:	bfb8      	it	lt
 801773c:	4613      	movlt	r3, r2
 801773e:	6033      	str	r3, [r6, #0]
 8017740:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017744:	4607      	mov	r7, r0
 8017746:	460c      	mov	r4, r1
 8017748:	b10a      	cbz	r2, 801774e <_printf_common+0x26>
 801774a:	3301      	adds	r3, #1
 801774c:	6033      	str	r3, [r6, #0]
 801774e:	6823      	ldr	r3, [r4, #0]
 8017750:	0699      	lsls	r1, r3, #26
 8017752:	bf42      	ittt	mi
 8017754:	6833      	ldrmi	r3, [r6, #0]
 8017756:	3302      	addmi	r3, #2
 8017758:	6033      	strmi	r3, [r6, #0]
 801775a:	6825      	ldr	r5, [r4, #0]
 801775c:	f015 0506 	ands.w	r5, r5, #6
 8017760:	d106      	bne.n	8017770 <_printf_common+0x48>
 8017762:	f104 0a19 	add.w	sl, r4, #25
 8017766:	68e3      	ldr	r3, [r4, #12]
 8017768:	6832      	ldr	r2, [r6, #0]
 801776a:	1a9b      	subs	r3, r3, r2
 801776c:	42ab      	cmp	r3, r5
 801776e:	dc26      	bgt.n	80177be <_printf_common+0x96>
 8017770:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017774:	1e13      	subs	r3, r2, #0
 8017776:	6822      	ldr	r2, [r4, #0]
 8017778:	bf18      	it	ne
 801777a:	2301      	movne	r3, #1
 801777c:	0692      	lsls	r2, r2, #26
 801777e:	d42b      	bmi.n	80177d8 <_printf_common+0xb0>
 8017780:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017784:	4649      	mov	r1, r9
 8017786:	4638      	mov	r0, r7
 8017788:	47c0      	blx	r8
 801778a:	3001      	adds	r0, #1
 801778c:	d01e      	beq.n	80177cc <_printf_common+0xa4>
 801778e:	6823      	ldr	r3, [r4, #0]
 8017790:	68e5      	ldr	r5, [r4, #12]
 8017792:	6832      	ldr	r2, [r6, #0]
 8017794:	f003 0306 	and.w	r3, r3, #6
 8017798:	2b04      	cmp	r3, #4
 801779a:	bf08      	it	eq
 801779c:	1aad      	subeq	r5, r5, r2
 801779e:	68a3      	ldr	r3, [r4, #8]
 80177a0:	6922      	ldr	r2, [r4, #16]
 80177a2:	bf0c      	ite	eq
 80177a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80177a8:	2500      	movne	r5, #0
 80177aa:	4293      	cmp	r3, r2
 80177ac:	bfc4      	itt	gt
 80177ae:	1a9b      	subgt	r3, r3, r2
 80177b0:	18ed      	addgt	r5, r5, r3
 80177b2:	2600      	movs	r6, #0
 80177b4:	341a      	adds	r4, #26
 80177b6:	42b5      	cmp	r5, r6
 80177b8:	d11a      	bne.n	80177f0 <_printf_common+0xc8>
 80177ba:	2000      	movs	r0, #0
 80177bc:	e008      	b.n	80177d0 <_printf_common+0xa8>
 80177be:	2301      	movs	r3, #1
 80177c0:	4652      	mov	r2, sl
 80177c2:	4649      	mov	r1, r9
 80177c4:	4638      	mov	r0, r7
 80177c6:	47c0      	blx	r8
 80177c8:	3001      	adds	r0, #1
 80177ca:	d103      	bne.n	80177d4 <_printf_common+0xac>
 80177cc:	f04f 30ff 	mov.w	r0, #4294967295
 80177d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177d4:	3501      	adds	r5, #1
 80177d6:	e7c6      	b.n	8017766 <_printf_common+0x3e>
 80177d8:	18e1      	adds	r1, r4, r3
 80177da:	1c5a      	adds	r2, r3, #1
 80177dc:	2030      	movs	r0, #48	; 0x30
 80177de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80177e2:	4422      	add	r2, r4
 80177e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80177e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80177ec:	3302      	adds	r3, #2
 80177ee:	e7c7      	b.n	8017780 <_printf_common+0x58>
 80177f0:	2301      	movs	r3, #1
 80177f2:	4622      	mov	r2, r4
 80177f4:	4649      	mov	r1, r9
 80177f6:	4638      	mov	r0, r7
 80177f8:	47c0      	blx	r8
 80177fa:	3001      	adds	r0, #1
 80177fc:	d0e6      	beq.n	80177cc <_printf_common+0xa4>
 80177fe:	3601      	adds	r6, #1
 8017800:	e7d9      	b.n	80177b6 <_printf_common+0x8e>
	...

08017804 <_printf_i>:
 8017804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017808:	460c      	mov	r4, r1
 801780a:	4691      	mov	r9, r2
 801780c:	7e27      	ldrb	r7, [r4, #24]
 801780e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017810:	2f78      	cmp	r7, #120	; 0x78
 8017812:	4680      	mov	r8, r0
 8017814:	469a      	mov	sl, r3
 8017816:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801781a:	d807      	bhi.n	801782c <_printf_i+0x28>
 801781c:	2f62      	cmp	r7, #98	; 0x62
 801781e:	d80a      	bhi.n	8017836 <_printf_i+0x32>
 8017820:	2f00      	cmp	r7, #0
 8017822:	f000 80d8 	beq.w	80179d6 <_printf_i+0x1d2>
 8017826:	2f58      	cmp	r7, #88	; 0x58
 8017828:	f000 80a3 	beq.w	8017972 <_printf_i+0x16e>
 801782c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017830:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017834:	e03a      	b.n	80178ac <_printf_i+0xa8>
 8017836:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801783a:	2b15      	cmp	r3, #21
 801783c:	d8f6      	bhi.n	801782c <_printf_i+0x28>
 801783e:	a001      	add	r0, pc, #4	; (adr r0, 8017844 <_printf_i+0x40>)
 8017840:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017844:	0801789d 	.word	0x0801789d
 8017848:	080178b1 	.word	0x080178b1
 801784c:	0801782d 	.word	0x0801782d
 8017850:	0801782d 	.word	0x0801782d
 8017854:	0801782d 	.word	0x0801782d
 8017858:	0801782d 	.word	0x0801782d
 801785c:	080178b1 	.word	0x080178b1
 8017860:	0801782d 	.word	0x0801782d
 8017864:	0801782d 	.word	0x0801782d
 8017868:	0801782d 	.word	0x0801782d
 801786c:	0801782d 	.word	0x0801782d
 8017870:	080179bd 	.word	0x080179bd
 8017874:	080178e1 	.word	0x080178e1
 8017878:	0801799f 	.word	0x0801799f
 801787c:	0801782d 	.word	0x0801782d
 8017880:	0801782d 	.word	0x0801782d
 8017884:	080179df 	.word	0x080179df
 8017888:	0801782d 	.word	0x0801782d
 801788c:	080178e1 	.word	0x080178e1
 8017890:	0801782d 	.word	0x0801782d
 8017894:	0801782d 	.word	0x0801782d
 8017898:	080179a7 	.word	0x080179a7
 801789c:	680b      	ldr	r3, [r1, #0]
 801789e:	1d1a      	adds	r2, r3, #4
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	600a      	str	r2, [r1, #0]
 80178a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80178a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80178ac:	2301      	movs	r3, #1
 80178ae:	e0a3      	b.n	80179f8 <_printf_i+0x1f4>
 80178b0:	6825      	ldr	r5, [r4, #0]
 80178b2:	6808      	ldr	r0, [r1, #0]
 80178b4:	062e      	lsls	r6, r5, #24
 80178b6:	f100 0304 	add.w	r3, r0, #4
 80178ba:	d50a      	bpl.n	80178d2 <_printf_i+0xce>
 80178bc:	6805      	ldr	r5, [r0, #0]
 80178be:	600b      	str	r3, [r1, #0]
 80178c0:	2d00      	cmp	r5, #0
 80178c2:	da03      	bge.n	80178cc <_printf_i+0xc8>
 80178c4:	232d      	movs	r3, #45	; 0x2d
 80178c6:	426d      	negs	r5, r5
 80178c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80178cc:	485e      	ldr	r0, [pc, #376]	; (8017a48 <_printf_i+0x244>)
 80178ce:	230a      	movs	r3, #10
 80178d0:	e019      	b.n	8017906 <_printf_i+0x102>
 80178d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80178d6:	6805      	ldr	r5, [r0, #0]
 80178d8:	600b      	str	r3, [r1, #0]
 80178da:	bf18      	it	ne
 80178dc:	b22d      	sxthne	r5, r5
 80178de:	e7ef      	b.n	80178c0 <_printf_i+0xbc>
 80178e0:	680b      	ldr	r3, [r1, #0]
 80178e2:	6825      	ldr	r5, [r4, #0]
 80178e4:	1d18      	adds	r0, r3, #4
 80178e6:	6008      	str	r0, [r1, #0]
 80178e8:	0628      	lsls	r0, r5, #24
 80178ea:	d501      	bpl.n	80178f0 <_printf_i+0xec>
 80178ec:	681d      	ldr	r5, [r3, #0]
 80178ee:	e002      	b.n	80178f6 <_printf_i+0xf2>
 80178f0:	0669      	lsls	r1, r5, #25
 80178f2:	d5fb      	bpl.n	80178ec <_printf_i+0xe8>
 80178f4:	881d      	ldrh	r5, [r3, #0]
 80178f6:	4854      	ldr	r0, [pc, #336]	; (8017a48 <_printf_i+0x244>)
 80178f8:	2f6f      	cmp	r7, #111	; 0x6f
 80178fa:	bf0c      	ite	eq
 80178fc:	2308      	moveq	r3, #8
 80178fe:	230a      	movne	r3, #10
 8017900:	2100      	movs	r1, #0
 8017902:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017906:	6866      	ldr	r6, [r4, #4]
 8017908:	60a6      	str	r6, [r4, #8]
 801790a:	2e00      	cmp	r6, #0
 801790c:	bfa2      	ittt	ge
 801790e:	6821      	ldrge	r1, [r4, #0]
 8017910:	f021 0104 	bicge.w	r1, r1, #4
 8017914:	6021      	strge	r1, [r4, #0]
 8017916:	b90d      	cbnz	r5, 801791c <_printf_i+0x118>
 8017918:	2e00      	cmp	r6, #0
 801791a:	d04d      	beq.n	80179b8 <_printf_i+0x1b4>
 801791c:	4616      	mov	r6, r2
 801791e:	fbb5 f1f3 	udiv	r1, r5, r3
 8017922:	fb03 5711 	mls	r7, r3, r1, r5
 8017926:	5dc7      	ldrb	r7, [r0, r7]
 8017928:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801792c:	462f      	mov	r7, r5
 801792e:	42bb      	cmp	r3, r7
 8017930:	460d      	mov	r5, r1
 8017932:	d9f4      	bls.n	801791e <_printf_i+0x11a>
 8017934:	2b08      	cmp	r3, #8
 8017936:	d10b      	bne.n	8017950 <_printf_i+0x14c>
 8017938:	6823      	ldr	r3, [r4, #0]
 801793a:	07df      	lsls	r7, r3, #31
 801793c:	d508      	bpl.n	8017950 <_printf_i+0x14c>
 801793e:	6923      	ldr	r3, [r4, #16]
 8017940:	6861      	ldr	r1, [r4, #4]
 8017942:	4299      	cmp	r1, r3
 8017944:	bfde      	ittt	le
 8017946:	2330      	movle	r3, #48	; 0x30
 8017948:	f806 3c01 	strble.w	r3, [r6, #-1]
 801794c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017950:	1b92      	subs	r2, r2, r6
 8017952:	6122      	str	r2, [r4, #16]
 8017954:	f8cd a000 	str.w	sl, [sp]
 8017958:	464b      	mov	r3, r9
 801795a:	aa03      	add	r2, sp, #12
 801795c:	4621      	mov	r1, r4
 801795e:	4640      	mov	r0, r8
 8017960:	f7ff fee2 	bl	8017728 <_printf_common>
 8017964:	3001      	adds	r0, #1
 8017966:	d14c      	bne.n	8017a02 <_printf_i+0x1fe>
 8017968:	f04f 30ff 	mov.w	r0, #4294967295
 801796c:	b004      	add	sp, #16
 801796e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017972:	4835      	ldr	r0, [pc, #212]	; (8017a48 <_printf_i+0x244>)
 8017974:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017978:	6823      	ldr	r3, [r4, #0]
 801797a:	680e      	ldr	r6, [r1, #0]
 801797c:	061f      	lsls	r7, r3, #24
 801797e:	f856 5b04 	ldr.w	r5, [r6], #4
 8017982:	600e      	str	r6, [r1, #0]
 8017984:	d514      	bpl.n	80179b0 <_printf_i+0x1ac>
 8017986:	07d9      	lsls	r1, r3, #31
 8017988:	bf44      	itt	mi
 801798a:	f043 0320 	orrmi.w	r3, r3, #32
 801798e:	6023      	strmi	r3, [r4, #0]
 8017990:	b91d      	cbnz	r5, 801799a <_printf_i+0x196>
 8017992:	6823      	ldr	r3, [r4, #0]
 8017994:	f023 0320 	bic.w	r3, r3, #32
 8017998:	6023      	str	r3, [r4, #0]
 801799a:	2310      	movs	r3, #16
 801799c:	e7b0      	b.n	8017900 <_printf_i+0xfc>
 801799e:	6823      	ldr	r3, [r4, #0]
 80179a0:	f043 0320 	orr.w	r3, r3, #32
 80179a4:	6023      	str	r3, [r4, #0]
 80179a6:	2378      	movs	r3, #120	; 0x78
 80179a8:	4828      	ldr	r0, [pc, #160]	; (8017a4c <_printf_i+0x248>)
 80179aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80179ae:	e7e3      	b.n	8017978 <_printf_i+0x174>
 80179b0:	065e      	lsls	r6, r3, #25
 80179b2:	bf48      	it	mi
 80179b4:	b2ad      	uxthmi	r5, r5
 80179b6:	e7e6      	b.n	8017986 <_printf_i+0x182>
 80179b8:	4616      	mov	r6, r2
 80179ba:	e7bb      	b.n	8017934 <_printf_i+0x130>
 80179bc:	680b      	ldr	r3, [r1, #0]
 80179be:	6826      	ldr	r6, [r4, #0]
 80179c0:	6960      	ldr	r0, [r4, #20]
 80179c2:	1d1d      	adds	r5, r3, #4
 80179c4:	600d      	str	r5, [r1, #0]
 80179c6:	0635      	lsls	r5, r6, #24
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	d501      	bpl.n	80179d0 <_printf_i+0x1cc>
 80179cc:	6018      	str	r0, [r3, #0]
 80179ce:	e002      	b.n	80179d6 <_printf_i+0x1d2>
 80179d0:	0671      	lsls	r1, r6, #25
 80179d2:	d5fb      	bpl.n	80179cc <_printf_i+0x1c8>
 80179d4:	8018      	strh	r0, [r3, #0]
 80179d6:	2300      	movs	r3, #0
 80179d8:	6123      	str	r3, [r4, #16]
 80179da:	4616      	mov	r6, r2
 80179dc:	e7ba      	b.n	8017954 <_printf_i+0x150>
 80179de:	680b      	ldr	r3, [r1, #0]
 80179e0:	1d1a      	adds	r2, r3, #4
 80179e2:	600a      	str	r2, [r1, #0]
 80179e4:	681e      	ldr	r6, [r3, #0]
 80179e6:	6862      	ldr	r2, [r4, #4]
 80179e8:	2100      	movs	r1, #0
 80179ea:	4630      	mov	r0, r6
 80179ec:	f7e8 fbf8 	bl	80001e0 <memchr>
 80179f0:	b108      	cbz	r0, 80179f6 <_printf_i+0x1f2>
 80179f2:	1b80      	subs	r0, r0, r6
 80179f4:	6060      	str	r0, [r4, #4]
 80179f6:	6863      	ldr	r3, [r4, #4]
 80179f8:	6123      	str	r3, [r4, #16]
 80179fa:	2300      	movs	r3, #0
 80179fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a00:	e7a8      	b.n	8017954 <_printf_i+0x150>
 8017a02:	6923      	ldr	r3, [r4, #16]
 8017a04:	4632      	mov	r2, r6
 8017a06:	4649      	mov	r1, r9
 8017a08:	4640      	mov	r0, r8
 8017a0a:	47d0      	blx	sl
 8017a0c:	3001      	adds	r0, #1
 8017a0e:	d0ab      	beq.n	8017968 <_printf_i+0x164>
 8017a10:	6823      	ldr	r3, [r4, #0]
 8017a12:	079b      	lsls	r3, r3, #30
 8017a14:	d413      	bmi.n	8017a3e <_printf_i+0x23a>
 8017a16:	68e0      	ldr	r0, [r4, #12]
 8017a18:	9b03      	ldr	r3, [sp, #12]
 8017a1a:	4298      	cmp	r0, r3
 8017a1c:	bfb8      	it	lt
 8017a1e:	4618      	movlt	r0, r3
 8017a20:	e7a4      	b.n	801796c <_printf_i+0x168>
 8017a22:	2301      	movs	r3, #1
 8017a24:	4632      	mov	r2, r6
 8017a26:	4649      	mov	r1, r9
 8017a28:	4640      	mov	r0, r8
 8017a2a:	47d0      	blx	sl
 8017a2c:	3001      	adds	r0, #1
 8017a2e:	d09b      	beq.n	8017968 <_printf_i+0x164>
 8017a30:	3501      	adds	r5, #1
 8017a32:	68e3      	ldr	r3, [r4, #12]
 8017a34:	9903      	ldr	r1, [sp, #12]
 8017a36:	1a5b      	subs	r3, r3, r1
 8017a38:	42ab      	cmp	r3, r5
 8017a3a:	dcf2      	bgt.n	8017a22 <_printf_i+0x21e>
 8017a3c:	e7eb      	b.n	8017a16 <_printf_i+0x212>
 8017a3e:	2500      	movs	r5, #0
 8017a40:	f104 0619 	add.w	r6, r4, #25
 8017a44:	e7f5      	b.n	8017a32 <_printf_i+0x22e>
 8017a46:	bf00      	nop
 8017a48:	0801a45e 	.word	0x0801a45e
 8017a4c:	0801a46f 	.word	0x0801a46f

08017a50 <iprintf>:
 8017a50:	b40f      	push	{r0, r1, r2, r3}
 8017a52:	4b0a      	ldr	r3, [pc, #40]	; (8017a7c <iprintf+0x2c>)
 8017a54:	b513      	push	{r0, r1, r4, lr}
 8017a56:	681c      	ldr	r4, [r3, #0]
 8017a58:	b124      	cbz	r4, 8017a64 <iprintf+0x14>
 8017a5a:	69a3      	ldr	r3, [r4, #24]
 8017a5c:	b913      	cbnz	r3, 8017a64 <iprintf+0x14>
 8017a5e:	4620      	mov	r0, r4
 8017a60:	f000 ff66 	bl	8018930 <__sinit>
 8017a64:	ab05      	add	r3, sp, #20
 8017a66:	9a04      	ldr	r2, [sp, #16]
 8017a68:	68a1      	ldr	r1, [r4, #8]
 8017a6a:	9301      	str	r3, [sp, #4]
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	f001 fd23 	bl	80194b8 <_vfiprintf_r>
 8017a72:	b002      	add	sp, #8
 8017a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a78:	b004      	add	sp, #16
 8017a7a:	4770      	bx	lr
 8017a7c:	200000f0 	.word	0x200000f0

08017a80 <_sbrk_r>:
 8017a80:	b538      	push	{r3, r4, r5, lr}
 8017a82:	4d06      	ldr	r5, [pc, #24]	; (8017a9c <_sbrk_r+0x1c>)
 8017a84:	2300      	movs	r3, #0
 8017a86:	4604      	mov	r4, r0
 8017a88:	4608      	mov	r0, r1
 8017a8a:	602b      	str	r3, [r5, #0]
 8017a8c:	f7ea fcc8 	bl	8002420 <_sbrk>
 8017a90:	1c43      	adds	r3, r0, #1
 8017a92:	d102      	bne.n	8017a9a <_sbrk_r+0x1a>
 8017a94:	682b      	ldr	r3, [r5, #0]
 8017a96:	b103      	cbz	r3, 8017a9a <_sbrk_r+0x1a>
 8017a98:	6023      	str	r3, [r4, #0]
 8017a9a:	bd38      	pop	{r3, r4, r5, pc}
 8017a9c:	200019b8 	.word	0x200019b8

08017aa0 <_raise_r>:
 8017aa0:	291f      	cmp	r1, #31
 8017aa2:	b538      	push	{r3, r4, r5, lr}
 8017aa4:	4604      	mov	r4, r0
 8017aa6:	460d      	mov	r5, r1
 8017aa8:	d904      	bls.n	8017ab4 <_raise_r+0x14>
 8017aaa:	2316      	movs	r3, #22
 8017aac:	6003      	str	r3, [r0, #0]
 8017aae:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab2:	bd38      	pop	{r3, r4, r5, pc}
 8017ab4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017ab6:	b112      	cbz	r2, 8017abe <_raise_r+0x1e>
 8017ab8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017abc:	b94b      	cbnz	r3, 8017ad2 <_raise_r+0x32>
 8017abe:	4620      	mov	r0, r4
 8017ac0:	f000 f830 	bl	8017b24 <_getpid_r>
 8017ac4:	462a      	mov	r2, r5
 8017ac6:	4601      	mov	r1, r0
 8017ac8:	4620      	mov	r0, r4
 8017aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017ace:	f000 b817 	b.w	8017b00 <_kill_r>
 8017ad2:	2b01      	cmp	r3, #1
 8017ad4:	d00a      	beq.n	8017aec <_raise_r+0x4c>
 8017ad6:	1c59      	adds	r1, r3, #1
 8017ad8:	d103      	bne.n	8017ae2 <_raise_r+0x42>
 8017ada:	2316      	movs	r3, #22
 8017adc:	6003      	str	r3, [r0, #0]
 8017ade:	2001      	movs	r0, #1
 8017ae0:	e7e7      	b.n	8017ab2 <_raise_r+0x12>
 8017ae2:	2400      	movs	r4, #0
 8017ae4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017ae8:	4628      	mov	r0, r5
 8017aea:	4798      	blx	r3
 8017aec:	2000      	movs	r0, #0
 8017aee:	e7e0      	b.n	8017ab2 <_raise_r+0x12>

08017af0 <raise>:
 8017af0:	4b02      	ldr	r3, [pc, #8]	; (8017afc <raise+0xc>)
 8017af2:	4601      	mov	r1, r0
 8017af4:	6818      	ldr	r0, [r3, #0]
 8017af6:	f7ff bfd3 	b.w	8017aa0 <_raise_r>
 8017afa:	bf00      	nop
 8017afc:	200000f0 	.word	0x200000f0

08017b00 <_kill_r>:
 8017b00:	b538      	push	{r3, r4, r5, lr}
 8017b02:	4d07      	ldr	r5, [pc, #28]	; (8017b20 <_kill_r+0x20>)
 8017b04:	2300      	movs	r3, #0
 8017b06:	4604      	mov	r4, r0
 8017b08:	4608      	mov	r0, r1
 8017b0a:	4611      	mov	r1, r2
 8017b0c:	602b      	str	r3, [r5, #0]
 8017b0e:	f7ea fbff 	bl	8002310 <_kill>
 8017b12:	1c43      	adds	r3, r0, #1
 8017b14:	d102      	bne.n	8017b1c <_kill_r+0x1c>
 8017b16:	682b      	ldr	r3, [r5, #0]
 8017b18:	b103      	cbz	r3, 8017b1c <_kill_r+0x1c>
 8017b1a:	6023      	str	r3, [r4, #0]
 8017b1c:	bd38      	pop	{r3, r4, r5, pc}
 8017b1e:	bf00      	nop
 8017b20:	200019b8 	.word	0x200019b8

08017b24 <_getpid_r>:
 8017b24:	f7ea bbec 	b.w	8002300 <_getpid>

08017b28 <sniprintf>:
 8017b28:	b40c      	push	{r2, r3}
 8017b2a:	b530      	push	{r4, r5, lr}
 8017b2c:	4b17      	ldr	r3, [pc, #92]	; (8017b8c <sniprintf+0x64>)
 8017b2e:	1e0c      	subs	r4, r1, #0
 8017b30:	681d      	ldr	r5, [r3, #0]
 8017b32:	b09d      	sub	sp, #116	; 0x74
 8017b34:	da08      	bge.n	8017b48 <sniprintf+0x20>
 8017b36:	238b      	movs	r3, #139	; 0x8b
 8017b38:	602b      	str	r3, [r5, #0]
 8017b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8017b3e:	b01d      	add	sp, #116	; 0x74
 8017b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b44:	b002      	add	sp, #8
 8017b46:	4770      	bx	lr
 8017b48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017b4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b50:	bf14      	ite	ne
 8017b52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017b56:	4623      	moveq	r3, r4
 8017b58:	9304      	str	r3, [sp, #16]
 8017b5a:	9307      	str	r3, [sp, #28]
 8017b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017b60:	9002      	str	r0, [sp, #8]
 8017b62:	9006      	str	r0, [sp, #24]
 8017b64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017b6a:	ab21      	add	r3, sp, #132	; 0x84
 8017b6c:	a902      	add	r1, sp, #8
 8017b6e:	4628      	mov	r0, r5
 8017b70:	9301      	str	r3, [sp, #4]
 8017b72:	f001 fb77 	bl	8019264 <_svfiprintf_r>
 8017b76:	1c43      	adds	r3, r0, #1
 8017b78:	bfbc      	itt	lt
 8017b7a:	238b      	movlt	r3, #139	; 0x8b
 8017b7c:	602b      	strlt	r3, [r5, #0]
 8017b7e:	2c00      	cmp	r4, #0
 8017b80:	d0dd      	beq.n	8017b3e <sniprintf+0x16>
 8017b82:	9b02      	ldr	r3, [sp, #8]
 8017b84:	2200      	movs	r2, #0
 8017b86:	701a      	strb	r2, [r3, #0]
 8017b88:	e7d9      	b.n	8017b3e <sniprintf+0x16>
 8017b8a:	bf00      	nop
 8017b8c:	200000f0 	.word	0x200000f0

08017b90 <quorem>:
 8017b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b94:	6903      	ldr	r3, [r0, #16]
 8017b96:	690c      	ldr	r4, [r1, #16]
 8017b98:	42a3      	cmp	r3, r4
 8017b9a:	4607      	mov	r7, r0
 8017b9c:	f2c0 8081 	blt.w	8017ca2 <quorem+0x112>
 8017ba0:	3c01      	subs	r4, #1
 8017ba2:	f101 0814 	add.w	r8, r1, #20
 8017ba6:	f100 0514 	add.w	r5, r0, #20
 8017baa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017bae:	9301      	str	r3, [sp, #4]
 8017bb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017bb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017bb8:	3301      	adds	r3, #1
 8017bba:	429a      	cmp	r2, r3
 8017bbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017bc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017bc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8017bc8:	d331      	bcc.n	8017c2e <quorem+0x9e>
 8017bca:	f04f 0e00 	mov.w	lr, #0
 8017bce:	4640      	mov	r0, r8
 8017bd0:	46ac      	mov	ip, r5
 8017bd2:	46f2      	mov	sl, lr
 8017bd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8017bd8:	b293      	uxth	r3, r2
 8017bda:	fb06 e303 	mla	r3, r6, r3, lr
 8017bde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017be2:	b29b      	uxth	r3, r3
 8017be4:	ebaa 0303 	sub.w	r3, sl, r3
 8017be8:	0c12      	lsrs	r2, r2, #16
 8017bea:	f8dc a000 	ldr.w	sl, [ip]
 8017bee:	fb06 e202 	mla	r2, r6, r2, lr
 8017bf2:	fa13 f38a 	uxtah	r3, r3, sl
 8017bf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017bfa:	fa1f fa82 	uxth.w	sl, r2
 8017bfe:	f8dc 2000 	ldr.w	r2, [ip]
 8017c02:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017c06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c0a:	b29b      	uxth	r3, r3
 8017c0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c10:	4581      	cmp	r9, r0
 8017c12:	f84c 3b04 	str.w	r3, [ip], #4
 8017c16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017c1a:	d2db      	bcs.n	8017bd4 <quorem+0x44>
 8017c1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8017c20:	b92b      	cbnz	r3, 8017c2e <quorem+0x9e>
 8017c22:	9b01      	ldr	r3, [sp, #4]
 8017c24:	3b04      	subs	r3, #4
 8017c26:	429d      	cmp	r5, r3
 8017c28:	461a      	mov	r2, r3
 8017c2a:	d32e      	bcc.n	8017c8a <quorem+0xfa>
 8017c2c:	613c      	str	r4, [r7, #16]
 8017c2e:	4638      	mov	r0, r7
 8017c30:	f001 f9ae 	bl	8018f90 <__mcmp>
 8017c34:	2800      	cmp	r0, #0
 8017c36:	db24      	blt.n	8017c82 <quorem+0xf2>
 8017c38:	3601      	adds	r6, #1
 8017c3a:	4628      	mov	r0, r5
 8017c3c:	f04f 0c00 	mov.w	ip, #0
 8017c40:	f858 2b04 	ldr.w	r2, [r8], #4
 8017c44:	f8d0 e000 	ldr.w	lr, [r0]
 8017c48:	b293      	uxth	r3, r2
 8017c4a:	ebac 0303 	sub.w	r3, ip, r3
 8017c4e:	0c12      	lsrs	r2, r2, #16
 8017c50:	fa13 f38e 	uxtah	r3, r3, lr
 8017c54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017c58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c5c:	b29b      	uxth	r3, r3
 8017c5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c62:	45c1      	cmp	r9, r8
 8017c64:	f840 3b04 	str.w	r3, [r0], #4
 8017c68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017c6c:	d2e8      	bcs.n	8017c40 <quorem+0xb0>
 8017c6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017c72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017c76:	b922      	cbnz	r2, 8017c82 <quorem+0xf2>
 8017c78:	3b04      	subs	r3, #4
 8017c7a:	429d      	cmp	r5, r3
 8017c7c:	461a      	mov	r2, r3
 8017c7e:	d30a      	bcc.n	8017c96 <quorem+0x106>
 8017c80:	613c      	str	r4, [r7, #16]
 8017c82:	4630      	mov	r0, r6
 8017c84:	b003      	add	sp, #12
 8017c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c8a:	6812      	ldr	r2, [r2, #0]
 8017c8c:	3b04      	subs	r3, #4
 8017c8e:	2a00      	cmp	r2, #0
 8017c90:	d1cc      	bne.n	8017c2c <quorem+0x9c>
 8017c92:	3c01      	subs	r4, #1
 8017c94:	e7c7      	b.n	8017c26 <quorem+0x96>
 8017c96:	6812      	ldr	r2, [r2, #0]
 8017c98:	3b04      	subs	r3, #4
 8017c9a:	2a00      	cmp	r2, #0
 8017c9c:	d1f0      	bne.n	8017c80 <quorem+0xf0>
 8017c9e:	3c01      	subs	r4, #1
 8017ca0:	e7eb      	b.n	8017c7a <quorem+0xea>
 8017ca2:	2000      	movs	r0, #0
 8017ca4:	e7ee      	b.n	8017c84 <quorem+0xf4>
	...

08017ca8 <_dtoa_r>:
 8017ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cac:	ed2d 8b02 	vpush	{d8}
 8017cb0:	ec57 6b10 	vmov	r6, r7, d0
 8017cb4:	b095      	sub	sp, #84	; 0x54
 8017cb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017cb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017cbc:	9105      	str	r1, [sp, #20]
 8017cbe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017cc2:	4604      	mov	r4, r0
 8017cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8017cc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8017cc8:	b975      	cbnz	r5, 8017ce8 <_dtoa_r+0x40>
 8017cca:	2010      	movs	r0, #16
 8017ccc:	f7ff f98e 	bl	8016fec <malloc>
 8017cd0:	4602      	mov	r2, r0
 8017cd2:	6260      	str	r0, [r4, #36]	; 0x24
 8017cd4:	b920      	cbnz	r0, 8017ce0 <_dtoa_r+0x38>
 8017cd6:	4bb2      	ldr	r3, [pc, #712]	; (8017fa0 <_dtoa_r+0x2f8>)
 8017cd8:	21ea      	movs	r1, #234	; 0xea
 8017cda:	48b2      	ldr	r0, [pc, #712]	; (8017fa4 <_dtoa_r+0x2fc>)
 8017cdc:	f001 fe32 	bl	8019944 <__assert_func>
 8017ce0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017ce4:	6005      	str	r5, [r0, #0]
 8017ce6:	60c5      	str	r5, [r0, #12]
 8017ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017cea:	6819      	ldr	r1, [r3, #0]
 8017cec:	b151      	cbz	r1, 8017d04 <_dtoa_r+0x5c>
 8017cee:	685a      	ldr	r2, [r3, #4]
 8017cf0:	604a      	str	r2, [r1, #4]
 8017cf2:	2301      	movs	r3, #1
 8017cf4:	4093      	lsls	r3, r2
 8017cf6:	608b      	str	r3, [r1, #8]
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	f000 ff0b 	bl	8018b14 <_Bfree>
 8017cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017d00:	2200      	movs	r2, #0
 8017d02:	601a      	str	r2, [r3, #0]
 8017d04:	1e3b      	subs	r3, r7, #0
 8017d06:	bfb9      	ittee	lt
 8017d08:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017d0c:	9303      	strlt	r3, [sp, #12]
 8017d0e:	2300      	movge	r3, #0
 8017d10:	f8c8 3000 	strge.w	r3, [r8]
 8017d14:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017d18:	4ba3      	ldr	r3, [pc, #652]	; (8017fa8 <_dtoa_r+0x300>)
 8017d1a:	bfbc      	itt	lt
 8017d1c:	2201      	movlt	r2, #1
 8017d1e:	f8c8 2000 	strlt.w	r2, [r8]
 8017d22:	ea33 0309 	bics.w	r3, r3, r9
 8017d26:	d11b      	bne.n	8017d60 <_dtoa_r+0xb8>
 8017d28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d2a:	f242 730f 	movw	r3, #9999	; 0x270f
 8017d2e:	6013      	str	r3, [r2, #0]
 8017d30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017d34:	4333      	orrs	r3, r6
 8017d36:	f000 857a 	beq.w	801882e <_dtoa_r+0xb86>
 8017d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d3c:	b963      	cbnz	r3, 8017d58 <_dtoa_r+0xb0>
 8017d3e:	4b9b      	ldr	r3, [pc, #620]	; (8017fac <_dtoa_r+0x304>)
 8017d40:	e024      	b.n	8017d8c <_dtoa_r+0xe4>
 8017d42:	4b9b      	ldr	r3, [pc, #620]	; (8017fb0 <_dtoa_r+0x308>)
 8017d44:	9300      	str	r3, [sp, #0]
 8017d46:	3308      	adds	r3, #8
 8017d48:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017d4a:	6013      	str	r3, [r2, #0]
 8017d4c:	9800      	ldr	r0, [sp, #0]
 8017d4e:	b015      	add	sp, #84	; 0x54
 8017d50:	ecbd 8b02 	vpop	{d8}
 8017d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d58:	4b94      	ldr	r3, [pc, #592]	; (8017fac <_dtoa_r+0x304>)
 8017d5a:	9300      	str	r3, [sp, #0]
 8017d5c:	3303      	adds	r3, #3
 8017d5e:	e7f3      	b.n	8017d48 <_dtoa_r+0xa0>
 8017d60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017d64:	2200      	movs	r2, #0
 8017d66:	ec51 0b17 	vmov	r0, r1, d7
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017d70:	f7e8 feaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8017d74:	4680      	mov	r8, r0
 8017d76:	b158      	cbz	r0, 8017d90 <_dtoa_r+0xe8>
 8017d78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d7a:	2301      	movs	r3, #1
 8017d7c:	6013      	str	r3, [r2, #0]
 8017d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	f000 8551 	beq.w	8018828 <_dtoa_r+0xb80>
 8017d86:	488b      	ldr	r0, [pc, #556]	; (8017fb4 <_dtoa_r+0x30c>)
 8017d88:	6018      	str	r0, [r3, #0]
 8017d8a:	1e43      	subs	r3, r0, #1
 8017d8c:	9300      	str	r3, [sp, #0]
 8017d8e:	e7dd      	b.n	8017d4c <_dtoa_r+0xa4>
 8017d90:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017d94:	aa12      	add	r2, sp, #72	; 0x48
 8017d96:	a913      	add	r1, sp, #76	; 0x4c
 8017d98:	4620      	mov	r0, r4
 8017d9a:	f001 f99d 	bl	80190d8 <__d2b>
 8017d9e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017da2:	4683      	mov	fp, r0
 8017da4:	2d00      	cmp	r5, #0
 8017da6:	d07c      	beq.n	8017ea2 <_dtoa_r+0x1fa>
 8017da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017daa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017dae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017db2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017db6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017dba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017dbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017dc2:	4b7d      	ldr	r3, [pc, #500]	; (8017fb8 <_dtoa_r+0x310>)
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	4630      	mov	r0, r6
 8017dc8:	4639      	mov	r1, r7
 8017dca:	f7e8 fa5d 	bl	8000288 <__aeabi_dsub>
 8017dce:	a36e      	add	r3, pc, #440	; (adr r3, 8017f88 <_dtoa_r+0x2e0>)
 8017dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dd4:	f7e8 fc10 	bl	80005f8 <__aeabi_dmul>
 8017dd8:	a36d      	add	r3, pc, #436	; (adr r3, 8017f90 <_dtoa_r+0x2e8>)
 8017dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dde:	f7e8 fa55 	bl	800028c <__adddf3>
 8017de2:	4606      	mov	r6, r0
 8017de4:	4628      	mov	r0, r5
 8017de6:	460f      	mov	r7, r1
 8017de8:	f7e8 fb9c 	bl	8000524 <__aeabi_i2d>
 8017dec:	a36a      	add	r3, pc, #424	; (adr r3, 8017f98 <_dtoa_r+0x2f0>)
 8017dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017df2:	f7e8 fc01 	bl	80005f8 <__aeabi_dmul>
 8017df6:	4602      	mov	r2, r0
 8017df8:	460b      	mov	r3, r1
 8017dfa:	4630      	mov	r0, r6
 8017dfc:	4639      	mov	r1, r7
 8017dfe:	f7e8 fa45 	bl	800028c <__adddf3>
 8017e02:	4606      	mov	r6, r0
 8017e04:	460f      	mov	r7, r1
 8017e06:	f7e8 fea7 	bl	8000b58 <__aeabi_d2iz>
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	4682      	mov	sl, r0
 8017e0e:	2300      	movs	r3, #0
 8017e10:	4630      	mov	r0, r6
 8017e12:	4639      	mov	r1, r7
 8017e14:	f7e8 fe62 	bl	8000adc <__aeabi_dcmplt>
 8017e18:	b148      	cbz	r0, 8017e2e <_dtoa_r+0x186>
 8017e1a:	4650      	mov	r0, sl
 8017e1c:	f7e8 fb82 	bl	8000524 <__aeabi_i2d>
 8017e20:	4632      	mov	r2, r6
 8017e22:	463b      	mov	r3, r7
 8017e24:	f7e8 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e28:	b908      	cbnz	r0, 8017e2e <_dtoa_r+0x186>
 8017e2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e2e:	f1ba 0f16 	cmp.w	sl, #22
 8017e32:	d854      	bhi.n	8017ede <_dtoa_r+0x236>
 8017e34:	4b61      	ldr	r3, [pc, #388]	; (8017fbc <_dtoa_r+0x314>)
 8017e36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017e42:	f7e8 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8017e46:	2800      	cmp	r0, #0
 8017e48:	d04b      	beq.n	8017ee2 <_dtoa_r+0x23a>
 8017e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e4e:	2300      	movs	r3, #0
 8017e50:	930e      	str	r3, [sp, #56]	; 0x38
 8017e52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017e54:	1b5d      	subs	r5, r3, r5
 8017e56:	1e6b      	subs	r3, r5, #1
 8017e58:	9304      	str	r3, [sp, #16]
 8017e5a:	bf43      	ittte	mi
 8017e5c:	2300      	movmi	r3, #0
 8017e5e:	f1c5 0801 	rsbmi	r8, r5, #1
 8017e62:	9304      	strmi	r3, [sp, #16]
 8017e64:	f04f 0800 	movpl.w	r8, #0
 8017e68:	f1ba 0f00 	cmp.w	sl, #0
 8017e6c:	db3b      	blt.n	8017ee6 <_dtoa_r+0x23e>
 8017e6e:	9b04      	ldr	r3, [sp, #16]
 8017e70:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8017e74:	4453      	add	r3, sl
 8017e76:	9304      	str	r3, [sp, #16]
 8017e78:	2300      	movs	r3, #0
 8017e7a:	9306      	str	r3, [sp, #24]
 8017e7c:	9b05      	ldr	r3, [sp, #20]
 8017e7e:	2b09      	cmp	r3, #9
 8017e80:	d869      	bhi.n	8017f56 <_dtoa_r+0x2ae>
 8017e82:	2b05      	cmp	r3, #5
 8017e84:	bfc4      	itt	gt
 8017e86:	3b04      	subgt	r3, #4
 8017e88:	9305      	strgt	r3, [sp, #20]
 8017e8a:	9b05      	ldr	r3, [sp, #20]
 8017e8c:	f1a3 0302 	sub.w	r3, r3, #2
 8017e90:	bfcc      	ite	gt
 8017e92:	2500      	movgt	r5, #0
 8017e94:	2501      	movle	r5, #1
 8017e96:	2b03      	cmp	r3, #3
 8017e98:	d869      	bhi.n	8017f6e <_dtoa_r+0x2c6>
 8017e9a:	e8df f003 	tbb	[pc, r3]
 8017e9e:	4e2c      	.short	0x4e2c
 8017ea0:	5a4c      	.short	0x5a4c
 8017ea2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8017ea6:	441d      	add	r5, r3
 8017ea8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017eac:	2b20      	cmp	r3, #32
 8017eae:	bfc1      	itttt	gt
 8017eb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017eb4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017eb8:	fa09 f303 	lslgt.w	r3, r9, r3
 8017ebc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017ec0:	bfda      	itte	le
 8017ec2:	f1c3 0320 	rsble	r3, r3, #32
 8017ec6:	fa06 f003 	lslle.w	r0, r6, r3
 8017eca:	4318      	orrgt	r0, r3
 8017ecc:	f7e8 fb1a 	bl	8000504 <__aeabi_ui2d>
 8017ed0:	2301      	movs	r3, #1
 8017ed2:	4606      	mov	r6, r0
 8017ed4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017ed8:	3d01      	subs	r5, #1
 8017eda:	9310      	str	r3, [sp, #64]	; 0x40
 8017edc:	e771      	b.n	8017dc2 <_dtoa_r+0x11a>
 8017ede:	2301      	movs	r3, #1
 8017ee0:	e7b6      	b.n	8017e50 <_dtoa_r+0x1a8>
 8017ee2:	900e      	str	r0, [sp, #56]	; 0x38
 8017ee4:	e7b5      	b.n	8017e52 <_dtoa_r+0x1aa>
 8017ee6:	f1ca 0300 	rsb	r3, sl, #0
 8017eea:	9306      	str	r3, [sp, #24]
 8017eec:	2300      	movs	r3, #0
 8017eee:	eba8 080a 	sub.w	r8, r8, sl
 8017ef2:	930d      	str	r3, [sp, #52]	; 0x34
 8017ef4:	e7c2      	b.n	8017e7c <_dtoa_r+0x1d4>
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	9308      	str	r3, [sp, #32]
 8017efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	dc39      	bgt.n	8017f74 <_dtoa_r+0x2cc>
 8017f00:	f04f 0901 	mov.w	r9, #1
 8017f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8017f08:	464b      	mov	r3, r9
 8017f0a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017f0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017f10:	2200      	movs	r2, #0
 8017f12:	6042      	str	r2, [r0, #4]
 8017f14:	2204      	movs	r2, #4
 8017f16:	f102 0614 	add.w	r6, r2, #20
 8017f1a:	429e      	cmp	r6, r3
 8017f1c:	6841      	ldr	r1, [r0, #4]
 8017f1e:	d92f      	bls.n	8017f80 <_dtoa_r+0x2d8>
 8017f20:	4620      	mov	r0, r4
 8017f22:	f000 fdb7 	bl	8018a94 <_Balloc>
 8017f26:	9000      	str	r0, [sp, #0]
 8017f28:	2800      	cmp	r0, #0
 8017f2a:	d14b      	bne.n	8017fc4 <_dtoa_r+0x31c>
 8017f2c:	4b24      	ldr	r3, [pc, #144]	; (8017fc0 <_dtoa_r+0x318>)
 8017f2e:	4602      	mov	r2, r0
 8017f30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017f34:	e6d1      	b.n	8017cda <_dtoa_r+0x32>
 8017f36:	2301      	movs	r3, #1
 8017f38:	e7de      	b.n	8017ef8 <_dtoa_r+0x250>
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	9308      	str	r3, [sp, #32]
 8017f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f40:	eb0a 0903 	add.w	r9, sl, r3
 8017f44:	f109 0301 	add.w	r3, r9, #1
 8017f48:	2b01      	cmp	r3, #1
 8017f4a:	9301      	str	r3, [sp, #4]
 8017f4c:	bfb8      	it	lt
 8017f4e:	2301      	movlt	r3, #1
 8017f50:	e7dd      	b.n	8017f0e <_dtoa_r+0x266>
 8017f52:	2301      	movs	r3, #1
 8017f54:	e7f2      	b.n	8017f3c <_dtoa_r+0x294>
 8017f56:	2501      	movs	r5, #1
 8017f58:	2300      	movs	r3, #0
 8017f5a:	9305      	str	r3, [sp, #20]
 8017f5c:	9508      	str	r5, [sp, #32]
 8017f5e:	f04f 39ff 	mov.w	r9, #4294967295
 8017f62:	2200      	movs	r2, #0
 8017f64:	f8cd 9004 	str.w	r9, [sp, #4]
 8017f68:	2312      	movs	r3, #18
 8017f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8017f6c:	e7cf      	b.n	8017f0e <_dtoa_r+0x266>
 8017f6e:	2301      	movs	r3, #1
 8017f70:	9308      	str	r3, [sp, #32]
 8017f72:	e7f4      	b.n	8017f5e <_dtoa_r+0x2b6>
 8017f74:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017f78:	f8cd 9004 	str.w	r9, [sp, #4]
 8017f7c:	464b      	mov	r3, r9
 8017f7e:	e7c6      	b.n	8017f0e <_dtoa_r+0x266>
 8017f80:	3101      	adds	r1, #1
 8017f82:	6041      	str	r1, [r0, #4]
 8017f84:	0052      	lsls	r2, r2, #1
 8017f86:	e7c6      	b.n	8017f16 <_dtoa_r+0x26e>
 8017f88:	636f4361 	.word	0x636f4361
 8017f8c:	3fd287a7 	.word	0x3fd287a7
 8017f90:	8b60c8b3 	.word	0x8b60c8b3
 8017f94:	3fc68a28 	.word	0x3fc68a28
 8017f98:	509f79fb 	.word	0x509f79fb
 8017f9c:	3fd34413 	.word	0x3fd34413
 8017fa0:	0801a48d 	.word	0x0801a48d
 8017fa4:	0801a4a4 	.word	0x0801a4a4
 8017fa8:	7ff00000 	.word	0x7ff00000
 8017fac:	0801a489 	.word	0x0801a489
 8017fb0:	0801a480 	.word	0x0801a480
 8017fb4:	0801a45d 	.word	0x0801a45d
 8017fb8:	3ff80000 	.word	0x3ff80000
 8017fbc:	0801a600 	.word	0x0801a600
 8017fc0:	0801a503 	.word	0x0801a503
 8017fc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017fc6:	9a00      	ldr	r2, [sp, #0]
 8017fc8:	601a      	str	r2, [r3, #0]
 8017fca:	9b01      	ldr	r3, [sp, #4]
 8017fcc:	2b0e      	cmp	r3, #14
 8017fce:	f200 80ad 	bhi.w	801812c <_dtoa_r+0x484>
 8017fd2:	2d00      	cmp	r5, #0
 8017fd4:	f000 80aa 	beq.w	801812c <_dtoa_r+0x484>
 8017fd8:	f1ba 0f00 	cmp.w	sl, #0
 8017fdc:	dd36      	ble.n	801804c <_dtoa_r+0x3a4>
 8017fde:	4ac3      	ldr	r2, [pc, #780]	; (80182ec <_dtoa_r+0x644>)
 8017fe0:	f00a 030f 	and.w	r3, sl, #15
 8017fe4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017fe8:	ed93 7b00 	vldr	d7, [r3]
 8017fec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017ff0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8017ff4:	eeb0 8a47 	vmov.f32	s16, s14
 8017ff8:	eef0 8a67 	vmov.f32	s17, s15
 8017ffc:	d016      	beq.n	801802c <_dtoa_r+0x384>
 8017ffe:	4bbc      	ldr	r3, [pc, #752]	; (80182f0 <_dtoa_r+0x648>)
 8018000:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018004:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018008:	f7e8 fc20 	bl	800084c <__aeabi_ddiv>
 801800c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018010:	f007 070f 	and.w	r7, r7, #15
 8018014:	2503      	movs	r5, #3
 8018016:	4eb6      	ldr	r6, [pc, #728]	; (80182f0 <_dtoa_r+0x648>)
 8018018:	b957      	cbnz	r7, 8018030 <_dtoa_r+0x388>
 801801a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801801e:	ec53 2b18 	vmov	r2, r3, d8
 8018022:	f7e8 fc13 	bl	800084c <__aeabi_ddiv>
 8018026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801802a:	e029      	b.n	8018080 <_dtoa_r+0x3d8>
 801802c:	2502      	movs	r5, #2
 801802e:	e7f2      	b.n	8018016 <_dtoa_r+0x36e>
 8018030:	07f9      	lsls	r1, r7, #31
 8018032:	d508      	bpl.n	8018046 <_dtoa_r+0x39e>
 8018034:	ec51 0b18 	vmov	r0, r1, d8
 8018038:	e9d6 2300 	ldrd	r2, r3, [r6]
 801803c:	f7e8 fadc 	bl	80005f8 <__aeabi_dmul>
 8018040:	ec41 0b18 	vmov	d8, r0, r1
 8018044:	3501      	adds	r5, #1
 8018046:	107f      	asrs	r7, r7, #1
 8018048:	3608      	adds	r6, #8
 801804a:	e7e5      	b.n	8018018 <_dtoa_r+0x370>
 801804c:	f000 80a6 	beq.w	801819c <_dtoa_r+0x4f4>
 8018050:	f1ca 0600 	rsb	r6, sl, #0
 8018054:	4ba5      	ldr	r3, [pc, #660]	; (80182ec <_dtoa_r+0x644>)
 8018056:	4fa6      	ldr	r7, [pc, #664]	; (80182f0 <_dtoa_r+0x648>)
 8018058:	f006 020f 	and.w	r2, r6, #15
 801805c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018064:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018068:	f7e8 fac6 	bl	80005f8 <__aeabi_dmul>
 801806c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018070:	1136      	asrs	r6, r6, #4
 8018072:	2300      	movs	r3, #0
 8018074:	2502      	movs	r5, #2
 8018076:	2e00      	cmp	r6, #0
 8018078:	f040 8085 	bne.w	8018186 <_dtoa_r+0x4de>
 801807c:	2b00      	cmp	r3, #0
 801807e:	d1d2      	bne.n	8018026 <_dtoa_r+0x37e>
 8018080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018082:	2b00      	cmp	r3, #0
 8018084:	f000 808c 	beq.w	80181a0 <_dtoa_r+0x4f8>
 8018088:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801808c:	4b99      	ldr	r3, [pc, #612]	; (80182f4 <_dtoa_r+0x64c>)
 801808e:	2200      	movs	r2, #0
 8018090:	4630      	mov	r0, r6
 8018092:	4639      	mov	r1, r7
 8018094:	f7e8 fd22 	bl	8000adc <__aeabi_dcmplt>
 8018098:	2800      	cmp	r0, #0
 801809a:	f000 8081 	beq.w	80181a0 <_dtoa_r+0x4f8>
 801809e:	9b01      	ldr	r3, [sp, #4]
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d07d      	beq.n	80181a0 <_dtoa_r+0x4f8>
 80180a4:	f1b9 0f00 	cmp.w	r9, #0
 80180a8:	dd3c      	ble.n	8018124 <_dtoa_r+0x47c>
 80180aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80180ae:	9307      	str	r3, [sp, #28]
 80180b0:	2200      	movs	r2, #0
 80180b2:	4b91      	ldr	r3, [pc, #580]	; (80182f8 <_dtoa_r+0x650>)
 80180b4:	4630      	mov	r0, r6
 80180b6:	4639      	mov	r1, r7
 80180b8:	f7e8 fa9e 	bl	80005f8 <__aeabi_dmul>
 80180bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180c0:	3501      	adds	r5, #1
 80180c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80180c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80180ca:	4628      	mov	r0, r5
 80180cc:	f7e8 fa2a 	bl	8000524 <__aeabi_i2d>
 80180d0:	4632      	mov	r2, r6
 80180d2:	463b      	mov	r3, r7
 80180d4:	f7e8 fa90 	bl	80005f8 <__aeabi_dmul>
 80180d8:	4b88      	ldr	r3, [pc, #544]	; (80182fc <_dtoa_r+0x654>)
 80180da:	2200      	movs	r2, #0
 80180dc:	f7e8 f8d6 	bl	800028c <__adddf3>
 80180e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80180e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80180e8:	9303      	str	r3, [sp, #12]
 80180ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d15c      	bne.n	80181aa <_dtoa_r+0x502>
 80180f0:	4b83      	ldr	r3, [pc, #524]	; (8018300 <_dtoa_r+0x658>)
 80180f2:	2200      	movs	r2, #0
 80180f4:	4630      	mov	r0, r6
 80180f6:	4639      	mov	r1, r7
 80180f8:	f7e8 f8c6 	bl	8000288 <__aeabi_dsub>
 80180fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018100:	4606      	mov	r6, r0
 8018102:	460f      	mov	r7, r1
 8018104:	f7e8 fd08 	bl	8000b18 <__aeabi_dcmpgt>
 8018108:	2800      	cmp	r0, #0
 801810a:	f040 8296 	bne.w	801863a <_dtoa_r+0x992>
 801810e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018112:	4630      	mov	r0, r6
 8018114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018118:	4639      	mov	r1, r7
 801811a:	f7e8 fcdf 	bl	8000adc <__aeabi_dcmplt>
 801811e:	2800      	cmp	r0, #0
 8018120:	f040 8288 	bne.w	8018634 <_dtoa_r+0x98c>
 8018124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018128:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801812c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801812e:	2b00      	cmp	r3, #0
 8018130:	f2c0 8158 	blt.w	80183e4 <_dtoa_r+0x73c>
 8018134:	f1ba 0f0e 	cmp.w	sl, #14
 8018138:	f300 8154 	bgt.w	80183e4 <_dtoa_r+0x73c>
 801813c:	4b6b      	ldr	r3, [pc, #428]	; (80182ec <_dtoa_r+0x644>)
 801813e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018142:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018148:	2b00      	cmp	r3, #0
 801814a:	f280 80e3 	bge.w	8018314 <_dtoa_r+0x66c>
 801814e:	9b01      	ldr	r3, [sp, #4]
 8018150:	2b00      	cmp	r3, #0
 8018152:	f300 80df 	bgt.w	8018314 <_dtoa_r+0x66c>
 8018156:	f040 826d 	bne.w	8018634 <_dtoa_r+0x98c>
 801815a:	4b69      	ldr	r3, [pc, #420]	; (8018300 <_dtoa_r+0x658>)
 801815c:	2200      	movs	r2, #0
 801815e:	4640      	mov	r0, r8
 8018160:	4649      	mov	r1, r9
 8018162:	f7e8 fa49 	bl	80005f8 <__aeabi_dmul>
 8018166:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801816a:	f7e8 fccb 	bl	8000b04 <__aeabi_dcmpge>
 801816e:	9e01      	ldr	r6, [sp, #4]
 8018170:	4637      	mov	r7, r6
 8018172:	2800      	cmp	r0, #0
 8018174:	f040 8243 	bne.w	80185fe <_dtoa_r+0x956>
 8018178:	9d00      	ldr	r5, [sp, #0]
 801817a:	2331      	movs	r3, #49	; 0x31
 801817c:	f805 3b01 	strb.w	r3, [r5], #1
 8018180:	f10a 0a01 	add.w	sl, sl, #1
 8018184:	e23f      	b.n	8018606 <_dtoa_r+0x95e>
 8018186:	07f2      	lsls	r2, r6, #31
 8018188:	d505      	bpl.n	8018196 <_dtoa_r+0x4ee>
 801818a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801818e:	f7e8 fa33 	bl	80005f8 <__aeabi_dmul>
 8018192:	3501      	adds	r5, #1
 8018194:	2301      	movs	r3, #1
 8018196:	1076      	asrs	r6, r6, #1
 8018198:	3708      	adds	r7, #8
 801819a:	e76c      	b.n	8018076 <_dtoa_r+0x3ce>
 801819c:	2502      	movs	r5, #2
 801819e:	e76f      	b.n	8018080 <_dtoa_r+0x3d8>
 80181a0:	9b01      	ldr	r3, [sp, #4]
 80181a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80181a6:	930c      	str	r3, [sp, #48]	; 0x30
 80181a8:	e78d      	b.n	80180c6 <_dtoa_r+0x41e>
 80181aa:	9900      	ldr	r1, [sp, #0]
 80181ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80181ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80181b0:	4b4e      	ldr	r3, [pc, #312]	; (80182ec <_dtoa_r+0x644>)
 80181b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80181b6:	4401      	add	r1, r0
 80181b8:	9102      	str	r1, [sp, #8]
 80181ba:	9908      	ldr	r1, [sp, #32]
 80181bc:	eeb0 8a47 	vmov.f32	s16, s14
 80181c0:	eef0 8a67 	vmov.f32	s17, s15
 80181c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80181c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80181cc:	2900      	cmp	r1, #0
 80181ce:	d045      	beq.n	801825c <_dtoa_r+0x5b4>
 80181d0:	494c      	ldr	r1, [pc, #304]	; (8018304 <_dtoa_r+0x65c>)
 80181d2:	2000      	movs	r0, #0
 80181d4:	f7e8 fb3a 	bl	800084c <__aeabi_ddiv>
 80181d8:	ec53 2b18 	vmov	r2, r3, d8
 80181dc:	f7e8 f854 	bl	8000288 <__aeabi_dsub>
 80181e0:	9d00      	ldr	r5, [sp, #0]
 80181e2:	ec41 0b18 	vmov	d8, r0, r1
 80181e6:	4639      	mov	r1, r7
 80181e8:	4630      	mov	r0, r6
 80181ea:	f7e8 fcb5 	bl	8000b58 <__aeabi_d2iz>
 80181ee:	900c      	str	r0, [sp, #48]	; 0x30
 80181f0:	f7e8 f998 	bl	8000524 <__aeabi_i2d>
 80181f4:	4602      	mov	r2, r0
 80181f6:	460b      	mov	r3, r1
 80181f8:	4630      	mov	r0, r6
 80181fa:	4639      	mov	r1, r7
 80181fc:	f7e8 f844 	bl	8000288 <__aeabi_dsub>
 8018200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018202:	3330      	adds	r3, #48	; 0x30
 8018204:	f805 3b01 	strb.w	r3, [r5], #1
 8018208:	ec53 2b18 	vmov	r2, r3, d8
 801820c:	4606      	mov	r6, r0
 801820e:	460f      	mov	r7, r1
 8018210:	f7e8 fc64 	bl	8000adc <__aeabi_dcmplt>
 8018214:	2800      	cmp	r0, #0
 8018216:	d165      	bne.n	80182e4 <_dtoa_r+0x63c>
 8018218:	4632      	mov	r2, r6
 801821a:	463b      	mov	r3, r7
 801821c:	4935      	ldr	r1, [pc, #212]	; (80182f4 <_dtoa_r+0x64c>)
 801821e:	2000      	movs	r0, #0
 8018220:	f7e8 f832 	bl	8000288 <__aeabi_dsub>
 8018224:	ec53 2b18 	vmov	r2, r3, d8
 8018228:	f7e8 fc58 	bl	8000adc <__aeabi_dcmplt>
 801822c:	2800      	cmp	r0, #0
 801822e:	f040 80b9 	bne.w	80183a4 <_dtoa_r+0x6fc>
 8018232:	9b02      	ldr	r3, [sp, #8]
 8018234:	429d      	cmp	r5, r3
 8018236:	f43f af75 	beq.w	8018124 <_dtoa_r+0x47c>
 801823a:	4b2f      	ldr	r3, [pc, #188]	; (80182f8 <_dtoa_r+0x650>)
 801823c:	ec51 0b18 	vmov	r0, r1, d8
 8018240:	2200      	movs	r2, #0
 8018242:	f7e8 f9d9 	bl	80005f8 <__aeabi_dmul>
 8018246:	4b2c      	ldr	r3, [pc, #176]	; (80182f8 <_dtoa_r+0x650>)
 8018248:	ec41 0b18 	vmov	d8, r0, r1
 801824c:	2200      	movs	r2, #0
 801824e:	4630      	mov	r0, r6
 8018250:	4639      	mov	r1, r7
 8018252:	f7e8 f9d1 	bl	80005f8 <__aeabi_dmul>
 8018256:	4606      	mov	r6, r0
 8018258:	460f      	mov	r7, r1
 801825a:	e7c4      	b.n	80181e6 <_dtoa_r+0x53e>
 801825c:	ec51 0b17 	vmov	r0, r1, d7
 8018260:	f7e8 f9ca 	bl	80005f8 <__aeabi_dmul>
 8018264:	9b02      	ldr	r3, [sp, #8]
 8018266:	9d00      	ldr	r5, [sp, #0]
 8018268:	930c      	str	r3, [sp, #48]	; 0x30
 801826a:	ec41 0b18 	vmov	d8, r0, r1
 801826e:	4639      	mov	r1, r7
 8018270:	4630      	mov	r0, r6
 8018272:	f7e8 fc71 	bl	8000b58 <__aeabi_d2iz>
 8018276:	9011      	str	r0, [sp, #68]	; 0x44
 8018278:	f7e8 f954 	bl	8000524 <__aeabi_i2d>
 801827c:	4602      	mov	r2, r0
 801827e:	460b      	mov	r3, r1
 8018280:	4630      	mov	r0, r6
 8018282:	4639      	mov	r1, r7
 8018284:	f7e8 f800 	bl	8000288 <__aeabi_dsub>
 8018288:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801828a:	3330      	adds	r3, #48	; 0x30
 801828c:	f805 3b01 	strb.w	r3, [r5], #1
 8018290:	9b02      	ldr	r3, [sp, #8]
 8018292:	429d      	cmp	r5, r3
 8018294:	4606      	mov	r6, r0
 8018296:	460f      	mov	r7, r1
 8018298:	f04f 0200 	mov.w	r2, #0
 801829c:	d134      	bne.n	8018308 <_dtoa_r+0x660>
 801829e:	4b19      	ldr	r3, [pc, #100]	; (8018304 <_dtoa_r+0x65c>)
 80182a0:	ec51 0b18 	vmov	r0, r1, d8
 80182a4:	f7e7 fff2 	bl	800028c <__adddf3>
 80182a8:	4602      	mov	r2, r0
 80182aa:	460b      	mov	r3, r1
 80182ac:	4630      	mov	r0, r6
 80182ae:	4639      	mov	r1, r7
 80182b0:	f7e8 fc32 	bl	8000b18 <__aeabi_dcmpgt>
 80182b4:	2800      	cmp	r0, #0
 80182b6:	d175      	bne.n	80183a4 <_dtoa_r+0x6fc>
 80182b8:	ec53 2b18 	vmov	r2, r3, d8
 80182bc:	4911      	ldr	r1, [pc, #68]	; (8018304 <_dtoa_r+0x65c>)
 80182be:	2000      	movs	r0, #0
 80182c0:	f7e7 ffe2 	bl	8000288 <__aeabi_dsub>
 80182c4:	4602      	mov	r2, r0
 80182c6:	460b      	mov	r3, r1
 80182c8:	4630      	mov	r0, r6
 80182ca:	4639      	mov	r1, r7
 80182cc:	f7e8 fc06 	bl	8000adc <__aeabi_dcmplt>
 80182d0:	2800      	cmp	r0, #0
 80182d2:	f43f af27 	beq.w	8018124 <_dtoa_r+0x47c>
 80182d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80182d8:	1e6b      	subs	r3, r5, #1
 80182da:	930c      	str	r3, [sp, #48]	; 0x30
 80182dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80182e0:	2b30      	cmp	r3, #48	; 0x30
 80182e2:	d0f8      	beq.n	80182d6 <_dtoa_r+0x62e>
 80182e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80182e8:	e04a      	b.n	8018380 <_dtoa_r+0x6d8>
 80182ea:	bf00      	nop
 80182ec:	0801a600 	.word	0x0801a600
 80182f0:	0801a5d8 	.word	0x0801a5d8
 80182f4:	3ff00000 	.word	0x3ff00000
 80182f8:	40240000 	.word	0x40240000
 80182fc:	401c0000 	.word	0x401c0000
 8018300:	40140000 	.word	0x40140000
 8018304:	3fe00000 	.word	0x3fe00000
 8018308:	4baf      	ldr	r3, [pc, #700]	; (80185c8 <_dtoa_r+0x920>)
 801830a:	f7e8 f975 	bl	80005f8 <__aeabi_dmul>
 801830e:	4606      	mov	r6, r0
 8018310:	460f      	mov	r7, r1
 8018312:	e7ac      	b.n	801826e <_dtoa_r+0x5c6>
 8018314:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018318:	9d00      	ldr	r5, [sp, #0]
 801831a:	4642      	mov	r2, r8
 801831c:	464b      	mov	r3, r9
 801831e:	4630      	mov	r0, r6
 8018320:	4639      	mov	r1, r7
 8018322:	f7e8 fa93 	bl	800084c <__aeabi_ddiv>
 8018326:	f7e8 fc17 	bl	8000b58 <__aeabi_d2iz>
 801832a:	9002      	str	r0, [sp, #8]
 801832c:	f7e8 f8fa 	bl	8000524 <__aeabi_i2d>
 8018330:	4642      	mov	r2, r8
 8018332:	464b      	mov	r3, r9
 8018334:	f7e8 f960 	bl	80005f8 <__aeabi_dmul>
 8018338:	4602      	mov	r2, r0
 801833a:	460b      	mov	r3, r1
 801833c:	4630      	mov	r0, r6
 801833e:	4639      	mov	r1, r7
 8018340:	f7e7 ffa2 	bl	8000288 <__aeabi_dsub>
 8018344:	9e02      	ldr	r6, [sp, #8]
 8018346:	9f01      	ldr	r7, [sp, #4]
 8018348:	3630      	adds	r6, #48	; 0x30
 801834a:	f805 6b01 	strb.w	r6, [r5], #1
 801834e:	9e00      	ldr	r6, [sp, #0]
 8018350:	1bae      	subs	r6, r5, r6
 8018352:	42b7      	cmp	r7, r6
 8018354:	4602      	mov	r2, r0
 8018356:	460b      	mov	r3, r1
 8018358:	d137      	bne.n	80183ca <_dtoa_r+0x722>
 801835a:	f7e7 ff97 	bl	800028c <__adddf3>
 801835e:	4642      	mov	r2, r8
 8018360:	464b      	mov	r3, r9
 8018362:	4606      	mov	r6, r0
 8018364:	460f      	mov	r7, r1
 8018366:	f7e8 fbd7 	bl	8000b18 <__aeabi_dcmpgt>
 801836a:	b9c8      	cbnz	r0, 80183a0 <_dtoa_r+0x6f8>
 801836c:	4642      	mov	r2, r8
 801836e:	464b      	mov	r3, r9
 8018370:	4630      	mov	r0, r6
 8018372:	4639      	mov	r1, r7
 8018374:	f7e8 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 8018378:	b110      	cbz	r0, 8018380 <_dtoa_r+0x6d8>
 801837a:	9b02      	ldr	r3, [sp, #8]
 801837c:	07d9      	lsls	r1, r3, #31
 801837e:	d40f      	bmi.n	80183a0 <_dtoa_r+0x6f8>
 8018380:	4620      	mov	r0, r4
 8018382:	4659      	mov	r1, fp
 8018384:	f000 fbc6 	bl	8018b14 <_Bfree>
 8018388:	2300      	movs	r3, #0
 801838a:	702b      	strb	r3, [r5, #0]
 801838c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801838e:	f10a 0001 	add.w	r0, sl, #1
 8018392:	6018      	str	r0, [r3, #0]
 8018394:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018396:	2b00      	cmp	r3, #0
 8018398:	f43f acd8 	beq.w	8017d4c <_dtoa_r+0xa4>
 801839c:	601d      	str	r5, [r3, #0]
 801839e:	e4d5      	b.n	8017d4c <_dtoa_r+0xa4>
 80183a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80183a4:	462b      	mov	r3, r5
 80183a6:	461d      	mov	r5, r3
 80183a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80183ac:	2a39      	cmp	r2, #57	; 0x39
 80183ae:	d108      	bne.n	80183c2 <_dtoa_r+0x71a>
 80183b0:	9a00      	ldr	r2, [sp, #0]
 80183b2:	429a      	cmp	r2, r3
 80183b4:	d1f7      	bne.n	80183a6 <_dtoa_r+0x6fe>
 80183b6:	9a07      	ldr	r2, [sp, #28]
 80183b8:	9900      	ldr	r1, [sp, #0]
 80183ba:	3201      	adds	r2, #1
 80183bc:	9207      	str	r2, [sp, #28]
 80183be:	2230      	movs	r2, #48	; 0x30
 80183c0:	700a      	strb	r2, [r1, #0]
 80183c2:	781a      	ldrb	r2, [r3, #0]
 80183c4:	3201      	adds	r2, #1
 80183c6:	701a      	strb	r2, [r3, #0]
 80183c8:	e78c      	b.n	80182e4 <_dtoa_r+0x63c>
 80183ca:	4b7f      	ldr	r3, [pc, #508]	; (80185c8 <_dtoa_r+0x920>)
 80183cc:	2200      	movs	r2, #0
 80183ce:	f7e8 f913 	bl	80005f8 <__aeabi_dmul>
 80183d2:	2200      	movs	r2, #0
 80183d4:	2300      	movs	r3, #0
 80183d6:	4606      	mov	r6, r0
 80183d8:	460f      	mov	r7, r1
 80183da:	f7e8 fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80183de:	2800      	cmp	r0, #0
 80183e0:	d09b      	beq.n	801831a <_dtoa_r+0x672>
 80183e2:	e7cd      	b.n	8018380 <_dtoa_r+0x6d8>
 80183e4:	9a08      	ldr	r2, [sp, #32]
 80183e6:	2a00      	cmp	r2, #0
 80183e8:	f000 80c4 	beq.w	8018574 <_dtoa_r+0x8cc>
 80183ec:	9a05      	ldr	r2, [sp, #20]
 80183ee:	2a01      	cmp	r2, #1
 80183f0:	f300 80a8 	bgt.w	8018544 <_dtoa_r+0x89c>
 80183f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80183f6:	2a00      	cmp	r2, #0
 80183f8:	f000 80a0 	beq.w	801853c <_dtoa_r+0x894>
 80183fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018400:	9e06      	ldr	r6, [sp, #24]
 8018402:	4645      	mov	r5, r8
 8018404:	9a04      	ldr	r2, [sp, #16]
 8018406:	2101      	movs	r1, #1
 8018408:	441a      	add	r2, r3
 801840a:	4620      	mov	r0, r4
 801840c:	4498      	add	r8, r3
 801840e:	9204      	str	r2, [sp, #16]
 8018410:	f000 fc3c 	bl	8018c8c <__i2b>
 8018414:	4607      	mov	r7, r0
 8018416:	2d00      	cmp	r5, #0
 8018418:	dd0b      	ble.n	8018432 <_dtoa_r+0x78a>
 801841a:	9b04      	ldr	r3, [sp, #16]
 801841c:	2b00      	cmp	r3, #0
 801841e:	dd08      	ble.n	8018432 <_dtoa_r+0x78a>
 8018420:	42ab      	cmp	r3, r5
 8018422:	9a04      	ldr	r2, [sp, #16]
 8018424:	bfa8      	it	ge
 8018426:	462b      	movge	r3, r5
 8018428:	eba8 0803 	sub.w	r8, r8, r3
 801842c:	1aed      	subs	r5, r5, r3
 801842e:	1ad3      	subs	r3, r2, r3
 8018430:	9304      	str	r3, [sp, #16]
 8018432:	9b06      	ldr	r3, [sp, #24]
 8018434:	b1fb      	cbz	r3, 8018476 <_dtoa_r+0x7ce>
 8018436:	9b08      	ldr	r3, [sp, #32]
 8018438:	2b00      	cmp	r3, #0
 801843a:	f000 809f 	beq.w	801857c <_dtoa_r+0x8d4>
 801843e:	2e00      	cmp	r6, #0
 8018440:	dd11      	ble.n	8018466 <_dtoa_r+0x7be>
 8018442:	4639      	mov	r1, r7
 8018444:	4632      	mov	r2, r6
 8018446:	4620      	mov	r0, r4
 8018448:	f000 fcdc 	bl	8018e04 <__pow5mult>
 801844c:	465a      	mov	r2, fp
 801844e:	4601      	mov	r1, r0
 8018450:	4607      	mov	r7, r0
 8018452:	4620      	mov	r0, r4
 8018454:	f000 fc30 	bl	8018cb8 <__multiply>
 8018458:	4659      	mov	r1, fp
 801845a:	9007      	str	r0, [sp, #28]
 801845c:	4620      	mov	r0, r4
 801845e:	f000 fb59 	bl	8018b14 <_Bfree>
 8018462:	9b07      	ldr	r3, [sp, #28]
 8018464:	469b      	mov	fp, r3
 8018466:	9b06      	ldr	r3, [sp, #24]
 8018468:	1b9a      	subs	r2, r3, r6
 801846a:	d004      	beq.n	8018476 <_dtoa_r+0x7ce>
 801846c:	4659      	mov	r1, fp
 801846e:	4620      	mov	r0, r4
 8018470:	f000 fcc8 	bl	8018e04 <__pow5mult>
 8018474:	4683      	mov	fp, r0
 8018476:	2101      	movs	r1, #1
 8018478:	4620      	mov	r0, r4
 801847a:	f000 fc07 	bl	8018c8c <__i2b>
 801847e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018480:	2b00      	cmp	r3, #0
 8018482:	4606      	mov	r6, r0
 8018484:	dd7c      	ble.n	8018580 <_dtoa_r+0x8d8>
 8018486:	461a      	mov	r2, r3
 8018488:	4601      	mov	r1, r0
 801848a:	4620      	mov	r0, r4
 801848c:	f000 fcba 	bl	8018e04 <__pow5mult>
 8018490:	9b05      	ldr	r3, [sp, #20]
 8018492:	2b01      	cmp	r3, #1
 8018494:	4606      	mov	r6, r0
 8018496:	dd76      	ble.n	8018586 <_dtoa_r+0x8de>
 8018498:	2300      	movs	r3, #0
 801849a:	9306      	str	r3, [sp, #24]
 801849c:	6933      	ldr	r3, [r6, #16]
 801849e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80184a2:	6918      	ldr	r0, [r3, #16]
 80184a4:	f000 fba2 	bl	8018bec <__hi0bits>
 80184a8:	f1c0 0020 	rsb	r0, r0, #32
 80184ac:	9b04      	ldr	r3, [sp, #16]
 80184ae:	4418      	add	r0, r3
 80184b0:	f010 001f 	ands.w	r0, r0, #31
 80184b4:	f000 8086 	beq.w	80185c4 <_dtoa_r+0x91c>
 80184b8:	f1c0 0320 	rsb	r3, r0, #32
 80184bc:	2b04      	cmp	r3, #4
 80184be:	dd7f      	ble.n	80185c0 <_dtoa_r+0x918>
 80184c0:	f1c0 001c 	rsb	r0, r0, #28
 80184c4:	9b04      	ldr	r3, [sp, #16]
 80184c6:	4403      	add	r3, r0
 80184c8:	4480      	add	r8, r0
 80184ca:	4405      	add	r5, r0
 80184cc:	9304      	str	r3, [sp, #16]
 80184ce:	f1b8 0f00 	cmp.w	r8, #0
 80184d2:	dd05      	ble.n	80184e0 <_dtoa_r+0x838>
 80184d4:	4659      	mov	r1, fp
 80184d6:	4642      	mov	r2, r8
 80184d8:	4620      	mov	r0, r4
 80184da:	f000 fced 	bl	8018eb8 <__lshift>
 80184de:	4683      	mov	fp, r0
 80184e0:	9b04      	ldr	r3, [sp, #16]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	dd05      	ble.n	80184f2 <_dtoa_r+0x84a>
 80184e6:	4631      	mov	r1, r6
 80184e8:	461a      	mov	r2, r3
 80184ea:	4620      	mov	r0, r4
 80184ec:	f000 fce4 	bl	8018eb8 <__lshift>
 80184f0:	4606      	mov	r6, r0
 80184f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d069      	beq.n	80185cc <_dtoa_r+0x924>
 80184f8:	4631      	mov	r1, r6
 80184fa:	4658      	mov	r0, fp
 80184fc:	f000 fd48 	bl	8018f90 <__mcmp>
 8018500:	2800      	cmp	r0, #0
 8018502:	da63      	bge.n	80185cc <_dtoa_r+0x924>
 8018504:	2300      	movs	r3, #0
 8018506:	4659      	mov	r1, fp
 8018508:	220a      	movs	r2, #10
 801850a:	4620      	mov	r0, r4
 801850c:	f000 fb24 	bl	8018b58 <__multadd>
 8018510:	9b08      	ldr	r3, [sp, #32]
 8018512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018516:	4683      	mov	fp, r0
 8018518:	2b00      	cmp	r3, #0
 801851a:	f000 818f 	beq.w	801883c <_dtoa_r+0xb94>
 801851e:	4639      	mov	r1, r7
 8018520:	2300      	movs	r3, #0
 8018522:	220a      	movs	r2, #10
 8018524:	4620      	mov	r0, r4
 8018526:	f000 fb17 	bl	8018b58 <__multadd>
 801852a:	f1b9 0f00 	cmp.w	r9, #0
 801852e:	4607      	mov	r7, r0
 8018530:	f300 808e 	bgt.w	8018650 <_dtoa_r+0x9a8>
 8018534:	9b05      	ldr	r3, [sp, #20]
 8018536:	2b02      	cmp	r3, #2
 8018538:	dc50      	bgt.n	80185dc <_dtoa_r+0x934>
 801853a:	e089      	b.n	8018650 <_dtoa_r+0x9a8>
 801853c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801853e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018542:	e75d      	b.n	8018400 <_dtoa_r+0x758>
 8018544:	9b01      	ldr	r3, [sp, #4]
 8018546:	1e5e      	subs	r6, r3, #1
 8018548:	9b06      	ldr	r3, [sp, #24]
 801854a:	42b3      	cmp	r3, r6
 801854c:	bfbf      	itttt	lt
 801854e:	9b06      	ldrlt	r3, [sp, #24]
 8018550:	9606      	strlt	r6, [sp, #24]
 8018552:	1af2      	sublt	r2, r6, r3
 8018554:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018556:	bfb6      	itet	lt
 8018558:	189b      	addlt	r3, r3, r2
 801855a:	1b9e      	subge	r6, r3, r6
 801855c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801855e:	9b01      	ldr	r3, [sp, #4]
 8018560:	bfb8      	it	lt
 8018562:	2600      	movlt	r6, #0
 8018564:	2b00      	cmp	r3, #0
 8018566:	bfb5      	itete	lt
 8018568:	eba8 0503 	sublt.w	r5, r8, r3
 801856c:	9b01      	ldrge	r3, [sp, #4]
 801856e:	2300      	movlt	r3, #0
 8018570:	4645      	movge	r5, r8
 8018572:	e747      	b.n	8018404 <_dtoa_r+0x75c>
 8018574:	9e06      	ldr	r6, [sp, #24]
 8018576:	9f08      	ldr	r7, [sp, #32]
 8018578:	4645      	mov	r5, r8
 801857a:	e74c      	b.n	8018416 <_dtoa_r+0x76e>
 801857c:	9a06      	ldr	r2, [sp, #24]
 801857e:	e775      	b.n	801846c <_dtoa_r+0x7c4>
 8018580:	9b05      	ldr	r3, [sp, #20]
 8018582:	2b01      	cmp	r3, #1
 8018584:	dc18      	bgt.n	80185b8 <_dtoa_r+0x910>
 8018586:	9b02      	ldr	r3, [sp, #8]
 8018588:	b9b3      	cbnz	r3, 80185b8 <_dtoa_r+0x910>
 801858a:	9b03      	ldr	r3, [sp, #12]
 801858c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018590:	b9a3      	cbnz	r3, 80185bc <_dtoa_r+0x914>
 8018592:	9b03      	ldr	r3, [sp, #12]
 8018594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018598:	0d1b      	lsrs	r3, r3, #20
 801859a:	051b      	lsls	r3, r3, #20
 801859c:	b12b      	cbz	r3, 80185aa <_dtoa_r+0x902>
 801859e:	9b04      	ldr	r3, [sp, #16]
 80185a0:	3301      	adds	r3, #1
 80185a2:	9304      	str	r3, [sp, #16]
 80185a4:	f108 0801 	add.w	r8, r8, #1
 80185a8:	2301      	movs	r3, #1
 80185aa:	9306      	str	r3, [sp, #24]
 80185ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f47f af74 	bne.w	801849c <_dtoa_r+0x7f4>
 80185b4:	2001      	movs	r0, #1
 80185b6:	e779      	b.n	80184ac <_dtoa_r+0x804>
 80185b8:	2300      	movs	r3, #0
 80185ba:	e7f6      	b.n	80185aa <_dtoa_r+0x902>
 80185bc:	9b02      	ldr	r3, [sp, #8]
 80185be:	e7f4      	b.n	80185aa <_dtoa_r+0x902>
 80185c0:	d085      	beq.n	80184ce <_dtoa_r+0x826>
 80185c2:	4618      	mov	r0, r3
 80185c4:	301c      	adds	r0, #28
 80185c6:	e77d      	b.n	80184c4 <_dtoa_r+0x81c>
 80185c8:	40240000 	.word	0x40240000
 80185cc:	9b01      	ldr	r3, [sp, #4]
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	dc38      	bgt.n	8018644 <_dtoa_r+0x99c>
 80185d2:	9b05      	ldr	r3, [sp, #20]
 80185d4:	2b02      	cmp	r3, #2
 80185d6:	dd35      	ble.n	8018644 <_dtoa_r+0x99c>
 80185d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80185dc:	f1b9 0f00 	cmp.w	r9, #0
 80185e0:	d10d      	bne.n	80185fe <_dtoa_r+0x956>
 80185e2:	4631      	mov	r1, r6
 80185e4:	464b      	mov	r3, r9
 80185e6:	2205      	movs	r2, #5
 80185e8:	4620      	mov	r0, r4
 80185ea:	f000 fab5 	bl	8018b58 <__multadd>
 80185ee:	4601      	mov	r1, r0
 80185f0:	4606      	mov	r6, r0
 80185f2:	4658      	mov	r0, fp
 80185f4:	f000 fccc 	bl	8018f90 <__mcmp>
 80185f8:	2800      	cmp	r0, #0
 80185fa:	f73f adbd 	bgt.w	8018178 <_dtoa_r+0x4d0>
 80185fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018600:	9d00      	ldr	r5, [sp, #0]
 8018602:	ea6f 0a03 	mvn.w	sl, r3
 8018606:	f04f 0800 	mov.w	r8, #0
 801860a:	4631      	mov	r1, r6
 801860c:	4620      	mov	r0, r4
 801860e:	f000 fa81 	bl	8018b14 <_Bfree>
 8018612:	2f00      	cmp	r7, #0
 8018614:	f43f aeb4 	beq.w	8018380 <_dtoa_r+0x6d8>
 8018618:	f1b8 0f00 	cmp.w	r8, #0
 801861c:	d005      	beq.n	801862a <_dtoa_r+0x982>
 801861e:	45b8      	cmp	r8, r7
 8018620:	d003      	beq.n	801862a <_dtoa_r+0x982>
 8018622:	4641      	mov	r1, r8
 8018624:	4620      	mov	r0, r4
 8018626:	f000 fa75 	bl	8018b14 <_Bfree>
 801862a:	4639      	mov	r1, r7
 801862c:	4620      	mov	r0, r4
 801862e:	f000 fa71 	bl	8018b14 <_Bfree>
 8018632:	e6a5      	b.n	8018380 <_dtoa_r+0x6d8>
 8018634:	2600      	movs	r6, #0
 8018636:	4637      	mov	r7, r6
 8018638:	e7e1      	b.n	80185fe <_dtoa_r+0x956>
 801863a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801863c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018640:	4637      	mov	r7, r6
 8018642:	e599      	b.n	8018178 <_dtoa_r+0x4d0>
 8018644:	9b08      	ldr	r3, [sp, #32]
 8018646:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801864a:	2b00      	cmp	r3, #0
 801864c:	f000 80fd 	beq.w	801884a <_dtoa_r+0xba2>
 8018650:	2d00      	cmp	r5, #0
 8018652:	dd05      	ble.n	8018660 <_dtoa_r+0x9b8>
 8018654:	4639      	mov	r1, r7
 8018656:	462a      	mov	r2, r5
 8018658:	4620      	mov	r0, r4
 801865a:	f000 fc2d 	bl	8018eb8 <__lshift>
 801865e:	4607      	mov	r7, r0
 8018660:	9b06      	ldr	r3, [sp, #24]
 8018662:	2b00      	cmp	r3, #0
 8018664:	d05c      	beq.n	8018720 <_dtoa_r+0xa78>
 8018666:	6879      	ldr	r1, [r7, #4]
 8018668:	4620      	mov	r0, r4
 801866a:	f000 fa13 	bl	8018a94 <_Balloc>
 801866e:	4605      	mov	r5, r0
 8018670:	b928      	cbnz	r0, 801867e <_dtoa_r+0x9d6>
 8018672:	4b80      	ldr	r3, [pc, #512]	; (8018874 <_dtoa_r+0xbcc>)
 8018674:	4602      	mov	r2, r0
 8018676:	f240 21ea 	movw	r1, #746	; 0x2ea
 801867a:	f7ff bb2e 	b.w	8017cda <_dtoa_r+0x32>
 801867e:	693a      	ldr	r2, [r7, #16]
 8018680:	3202      	adds	r2, #2
 8018682:	0092      	lsls	r2, r2, #2
 8018684:	f107 010c 	add.w	r1, r7, #12
 8018688:	300c      	adds	r0, #12
 801868a:	f7fe fcb7 	bl	8016ffc <memcpy>
 801868e:	2201      	movs	r2, #1
 8018690:	4629      	mov	r1, r5
 8018692:	4620      	mov	r0, r4
 8018694:	f000 fc10 	bl	8018eb8 <__lshift>
 8018698:	9b00      	ldr	r3, [sp, #0]
 801869a:	3301      	adds	r3, #1
 801869c:	9301      	str	r3, [sp, #4]
 801869e:	9b00      	ldr	r3, [sp, #0]
 80186a0:	444b      	add	r3, r9
 80186a2:	9307      	str	r3, [sp, #28]
 80186a4:	9b02      	ldr	r3, [sp, #8]
 80186a6:	f003 0301 	and.w	r3, r3, #1
 80186aa:	46b8      	mov	r8, r7
 80186ac:	9306      	str	r3, [sp, #24]
 80186ae:	4607      	mov	r7, r0
 80186b0:	9b01      	ldr	r3, [sp, #4]
 80186b2:	4631      	mov	r1, r6
 80186b4:	3b01      	subs	r3, #1
 80186b6:	4658      	mov	r0, fp
 80186b8:	9302      	str	r3, [sp, #8]
 80186ba:	f7ff fa69 	bl	8017b90 <quorem>
 80186be:	4603      	mov	r3, r0
 80186c0:	3330      	adds	r3, #48	; 0x30
 80186c2:	9004      	str	r0, [sp, #16]
 80186c4:	4641      	mov	r1, r8
 80186c6:	4658      	mov	r0, fp
 80186c8:	9308      	str	r3, [sp, #32]
 80186ca:	f000 fc61 	bl	8018f90 <__mcmp>
 80186ce:	463a      	mov	r2, r7
 80186d0:	4681      	mov	r9, r0
 80186d2:	4631      	mov	r1, r6
 80186d4:	4620      	mov	r0, r4
 80186d6:	f000 fc77 	bl	8018fc8 <__mdiff>
 80186da:	68c2      	ldr	r2, [r0, #12]
 80186dc:	9b08      	ldr	r3, [sp, #32]
 80186de:	4605      	mov	r5, r0
 80186e0:	bb02      	cbnz	r2, 8018724 <_dtoa_r+0xa7c>
 80186e2:	4601      	mov	r1, r0
 80186e4:	4658      	mov	r0, fp
 80186e6:	f000 fc53 	bl	8018f90 <__mcmp>
 80186ea:	9b08      	ldr	r3, [sp, #32]
 80186ec:	4602      	mov	r2, r0
 80186ee:	4629      	mov	r1, r5
 80186f0:	4620      	mov	r0, r4
 80186f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80186f6:	f000 fa0d 	bl	8018b14 <_Bfree>
 80186fa:	9b05      	ldr	r3, [sp, #20]
 80186fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80186fe:	9d01      	ldr	r5, [sp, #4]
 8018700:	ea43 0102 	orr.w	r1, r3, r2
 8018704:	9b06      	ldr	r3, [sp, #24]
 8018706:	430b      	orrs	r3, r1
 8018708:	9b08      	ldr	r3, [sp, #32]
 801870a:	d10d      	bne.n	8018728 <_dtoa_r+0xa80>
 801870c:	2b39      	cmp	r3, #57	; 0x39
 801870e:	d029      	beq.n	8018764 <_dtoa_r+0xabc>
 8018710:	f1b9 0f00 	cmp.w	r9, #0
 8018714:	dd01      	ble.n	801871a <_dtoa_r+0xa72>
 8018716:	9b04      	ldr	r3, [sp, #16]
 8018718:	3331      	adds	r3, #49	; 0x31
 801871a:	9a02      	ldr	r2, [sp, #8]
 801871c:	7013      	strb	r3, [r2, #0]
 801871e:	e774      	b.n	801860a <_dtoa_r+0x962>
 8018720:	4638      	mov	r0, r7
 8018722:	e7b9      	b.n	8018698 <_dtoa_r+0x9f0>
 8018724:	2201      	movs	r2, #1
 8018726:	e7e2      	b.n	80186ee <_dtoa_r+0xa46>
 8018728:	f1b9 0f00 	cmp.w	r9, #0
 801872c:	db06      	blt.n	801873c <_dtoa_r+0xa94>
 801872e:	9905      	ldr	r1, [sp, #20]
 8018730:	ea41 0909 	orr.w	r9, r1, r9
 8018734:	9906      	ldr	r1, [sp, #24]
 8018736:	ea59 0101 	orrs.w	r1, r9, r1
 801873a:	d120      	bne.n	801877e <_dtoa_r+0xad6>
 801873c:	2a00      	cmp	r2, #0
 801873e:	ddec      	ble.n	801871a <_dtoa_r+0xa72>
 8018740:	4659      	mov	r1, fp
 8018742:	2201      	movs	r2, #1
 8018744:	4620      	mov	r0, r4
 8018746:	9301      	str	r3, [sp, #4]
 8018748:	f000 fbb6 	bl	8018eb8 <__lshift>
 801874c:	4631      	mov	r1, r6
 801874e:	4683      	mov	fp, r0
 8018750:	f000 fc1e 	bl	8018f90 <__mcmp>
 8018754:	2800      	cmp	r0, #0
 8018756:	9b01      	ldr	r3, [sp, #4]
 8018758:	dc02      	bgt.n	8018760 <_dtoa_r+0xab8>
 801875a:	d1de      	bne.n	801871a <_dtoa_r+0xa72>
 801875c:	07da      	lsls	r2, r3, #31
 801875e:	d5dc      	bpl.n	801871a <_dtoa_r+0xa72>
 8018760:	2b39      	cmp	r3, #57	; 0x39
 8018762:	d1d8      	bne.n	8018716 <_dtoa_r+0xa6e>
 8018764:	9a02      	ldr	r2, [sp, #8]
 8018766:	2339      	movs	r3, #57	; 0x39
 8018768:	7013      	strb	r3, [r2, #0]
 801876a:	462b      	mov	r3, r5
 801876c:	461d      	mov	r5, r3
 801876e:	3b01      	subs	r3, #1
 8018770:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018774:	2a39      	cmp	r2, #57	; 0x39
 8018776:	d050      	beq.n	801881a <_dtoa_r+0xb72>
 8018778:	3201      	adds	r2, #1
 801877a:	701a      	strb	r2, [r3, #0]
 801877c:	e745      	b.n	801860a <_dtoa_r+0x962>
 801877e:	2a00      	cmp	r2, #0
 8018780:	dd03      	ble.n	801878a <_dtoa_r+0xae2>
 8018782:	2b39      	cmp	r3, #57	; 0x39
 8018784:	d0ee      	beq.n	8018764 <_dtoa_r+0xabc>
 8018786:	3301      	adds	r3, #1
 8018788:	e7c7      	b.n	801871a <_dtoa_r+0xa72>
 801878a:	9a01      	ldr	r2, [sp, #4]
 801878c:	9907      	ldr	r1, [sp, #28]
 801878e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018792:	428a      	cmp	r2, r1
 8018794:	d02a      	beq.n	80187ec <_dtoa_r+0xb44>
 8018796:	4659      	mov	r1, fp
 8018798:	2300      	movs	r3, #0
 801879a:	220a      	movs	r2, #10
 801879c:	4620      	mov	r0, r4
 801879e:	f000 f9db 	bl	8018b58 <__multadd>
 80187a2:	45b8      	cmp	r8, r7
 80187a4:	4683      	mov	fp, r0
 80187a6:	f04f 0300 	mov.w	r3, #0
 80187aa:	f04f 020a 	mov.w	r2, #10
 80187ae:	4641      	mov	r1, r8
 80187b0:	4620      	mov	r0, r4
 80187b2:	d107      	bne.n	80187c4 <_dtoa_r+0xb1c>
 80187b4:	f000 f9d0 	bl	8018b58 <__multadd>
 80187b8:	4680      	mov	r8, r0
 80187ba:	4607      	mov	r7, r0
 80187bc:	9b01      	ldr	r3, [sp, #4]
 80187be:	3301      	adds	r3, #1
 80187c0:	9301      	str	r3, [sp, #4]
 80187c2:	e775      	b.n	80186b0 <_dtoa_r+0xa08>
 80187c4:	f000 f9c8 	bl	8018b58 <__multadd>
 80187c8:	4639      	mov	r1, r7
 80187ca:	4680      	mov	r8, r0
 80187cc:	2300      	movs	r3, #0
 80187ce:	220a      	movs	r2, #10
 80187d0:	4620      	mov	r0, r4
 80187d2:	f000 f9c1 	bl	8018b58 <__multadd>
 80187d6:	4607      	mov	r7, r0
 80187d8:	e7f0      	b.n	80187bc <_dtoa_r+0xb14>
 80187da:	f1b9 0f00 	cmp.w	r9, #0
 80187de:	9a00      	ldr	r2, [sp, #0]
 80187e0:	bfcc      	ite	gt
 80187e2:	464d      	movgt	r5, r9
 80187e4:	2501      	movle	r5, #1
 80187e6:	4415      	add	r5, r2
 80187e8:	f04f 0800 	mov.w	r8, #0
 80187ec:	4659      	mov	r1, fp
 80187ee:	2201      	movs	r2, #1
 80187f0:	4620      	mov	r0, r4
 80187f2:	9301      	str	r3, [sp, #4]
 80187f4:	f000 fb60 	bl	8018eb8 <__lshift>
 80187f8:	4631      	mov	r1, r6
 80187fa:	4683      	mov	fp, r0
 80187fc:	f000 fbc8 	bl	8018f90 <__mcmp>
 8018800:	2800      	cmp	r0, #0
 8018802:	dcb2      	bgt.n	801876a <_dtoa_r+0xac2>
 8018804:	d102      	bne.n	801880c <_dtoa_r+0xb64>
 8018806:	9b01      	ldr	r3, [sp, #4]
 8018808:	07db      	lsls	r3, r3, #31
 801880a:	d4ae      	bmi.n	801876a <_dtoa_r+0xac2>
 801880c:	462b      	mov	r3, r5
 801880e:	461d      	mov	r5, r3
 8018810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018814:	2a30      	cmp	r2, #48	; 0x30
 8018816:	d0fa      	beq.n	801880e <_dtoa_r+0xb66>
 8018818:	e6f7      	b.n	801860a <_dtoa_r+0x962>
 801881a:	9a00      	ldr	r2, [sp, #0]
 801881c:	429a      	cmp	r2, r3
 801881e:	d1a5      	bne.n	801876c <_dtoa_r+0xac4>
 8018820:	f10a 0a01 	add.w	sl, sl, #1
 8018824:	2331      	movs	r3, #49	; 0x31
 8018826:	e779      	b.n	801871c <_dtoa_r+0xa74>
 8018828:	4b13      	ldr	r3, [pc, #76]	; (8018878 <_dtoa_r+0xbd0>)
 801882a:	f7ff baaf 	b.w	8017d8c <_dtoa_r+0xe4>
 801882e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018830:	2b00      	cmp	r3, #0
 8018832:	f47f aa86 	bne.w	8017d42 <_dtoa_r+0x9a>
 8018836:	4b11      	ldr	r3, [pc, #68]	; (801887c <_dtoa_r+0xbd4>)
 8018838:	f7ff baa8 	b.w	8017d8c <_dtoa_r+0xe4>
 801883c:	f1b9 0f00 	cmp.w	r9, #0
 8018840:	dc03      	bgt.n	801884a <_dtoa_r+0xba2>
 8018842:	9b05      	ldr	r3, [sp, #20]
 8018844:	2b02      	cmp	r3, #2
 8018846:	f73f aec9 	bgt.w	80185dc <_dtoa_r+0x934>
 801884a:	9d00      	ldr	r5, [sp, #0]
 801884c:	4631      	mov	r1, r6
 801884e:	4658      	mov	r0, fp
 8018850:	f7ff f99e 	bl	8017b90 <quorem>
 8018854:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018858:	f805 3b01 	strb.w	r3, [r5], #1
 801885c:	9a00      	ldr	r2, [sp, #0]
 801885e:	1aaa      	subs	r2, r5, r2
 8018860:	4591      	cmp	r9, r2
 8018862:	ddba      	ble.n	80187da <_dtoa_r+0xb32>
 8018864:	4659      	mov	r1, fp
 8018866:	2300      	movs	r3, #0
 8018868:	220a      	movs	r2, #10
 801886a:	4620      	mov	r0, r4
 801886c:	f000 f974 	bl	8018b58 <__multadd>
 8018870:	4683      	mov	fp, r0
 8018872:	e7eb      	b.n	801884c <_dtoa_r+0xba4>
 8018874:	0801a503 	.word	0x0801a503
 8018878:	0801a45c 	.word	0x0801a45c
 801887c:	0801a480 	.word	0x0801a480

08018880 <std>:
 8018880:	2300      	movs	r3, #0
 8018882:	b510      	push	{r4, lr}
 8018884:	4604      	mov	r4, r0
 8018886:	e9c0 3300 	strd	r3, r3, [r0]
 801888a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801888e:	6083      	str	r3, [r0, #8]
 8018890:	8181      	strh	r1, [r0, #12]
 8018892:	6643      	str	r3, [r0, #100]	; 0x64
 8018894:	81c2      	strh	r2, [r0, #14]
 8018896:	6183      	str	r3, [r0, #24]
 8018898:	4619      	mov	r1, r3
 801889a:	2208      	movs	r2, #8
 801889c:	305c      	adds	r0, #92	; 0x5c
 801889e:	f7fe fbbb 	bl	8017018 <memset>
 80188a2:	4b05      	ldr	r3, [pc, #20]	; (80188b8 <std+0x38>)
 80188a4:	6263      	str	r3, [r4, #36]	; 0x24
 80188a6:	4b05      	ldr	r3, [pc, #20]	; (80188bc <std+0x3c>)
 80188a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80188aa:	4b05      	ldr	r3, [pc, #20]	; (80188c0 <std+0x40>)
 80188ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80188ae:	4b05      	ldr	r3, [pc, #20]	; (80188c4 <std+0x44>)
 80188b0:	6224      	str	r4, [r4, #32]
 80188b2:	6323      	str	r3, [r4, #48]	; 0x30
 80188b4:	bd10      	pop	{r4, pc}
 80188b6:	bf00      	nop
 80188b8:	08019719 	.word	0x08019719
 80188bc:	0801973b 	.word	0x0801973b
 80188c0:	08019773 	.word	0x08019773
 80188c4:	08019797 	.word	0x08019797

080188c8 <_cleanup_r>:
 80188c8:	4901      	ldr	r1, [pc, #4]	; (80188d0 <_cleanup_r+0x8>)
 80188ca:	f000 b8af 	b.w	8018a2c <_fwalk_reent>
 80188ce:	bf00      	nop
 80188d0:	08019aad 	.word	0x08019aad

080188d4 <__sfmoreglue>:
 80188d4:	b570      	push	{r4, r5, r6, lr}
 80188d6:	1e4a      	subs	r2, r1, #1
 80188d8:	2568      	movs	r5, #104	; 0x68
 80188da:	4355      	muls	r5, r2
 80188dc:	460e      	mov	r6, r1
 80188de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80188e2:	f7fe fbf1 	bl	80170c8 <_malloc_r>
 80188e6:	4604      	mov	r4, r0
 80188e8:	b140      	cbz	r0, 80188fc <__sfmoreglue+0x28>
 80188ea:	2100      	movs	r1, #0
 80188ec:	e9c0 1600 	strd	r1, r6, [r0]
 80188f0:	300c      	adds	r0, #12
 80188f2:	60a0      	str	r0, [r4, #8]
 80188f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80188f8:	f7fe fb8e 	bl	8017018 <memset>
 80188fc:	4620      	mov	r0, r4
 80188fe:	bd70      	pop	{r4, r5, r6, pc}

08018900 <__sfp_lock_acquire>:
 8018900:	4801      	ldr	r0, [pc, #4]	; (8018908 <__sfp_lock_acquire+0x8>)
 8018902:	f000 b8b8 	b.w	8018a76 <__retarget_lock_acquire_recursive>
 8018906:	bf00      	nop
 8018908:	200019b4 	.word	0x200019b4

0801890c <__sfp_lock_release>:
 801890c:	4801      	ldr	r0, [pc, #4]	; (8018914 <__sfp_lock_release+0x8>)
 801890e:	f000 b8b3 	b.w	8018a78 <__retarget_lock_release_recursive>
 8018912:	bf00      	nop
 8018914:	200019b4 	.word	0x200019b4

08018918 <__sinit_lock_acquire>:
 8018918:	4801      	ldr	r0, [pc, #4]	; (8018920 <__sinit_lock_acquire+0x8>)
 801891a:	f000 b8ac 	b.w	8018a76 <__retarget_lock_acquire_recursive>
 801891e:	bf00      	nop
 8018920:	200019af 	.word	0x200019af

08018924 <__sinit_lock_release>:
 8018924:	4801      	ldr	r0, [pc, #4]	; (801892c <__sinit_lock_release+0x8>)
 8018926:	f000 b8a7 	b.w	8018a78 <__retarget_lock_release_recursive>
 801892a:	bf00      	nop
 801892c:	200019af 	.word	0x200019af

08018930 <__sinit>:
 8018930:	b510      	push	{r4, lr}
 8018932:	4604      	mov	r4, r0
 8018934:	f7ff fff0 	bl	8018918 <__sinit_lock_acquire>
 8018938:	69a3      	ldr	r3, [r4, #24]
 801893a:	b11b      	cbz	r3, 8018944 <__sinit+0x14>
 801893c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018940:	f7ff bff0 	b.w	8018924 <__sinit_lock_release>
 8018944:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018948:	6523      	str	r3, [r4, #80]	; 0x50
 801894a:	4b13      	ldr	r3, [pc, #76]	; (8018998 <__sinit+0x68>)
 801894c:	4a13      	ldr	r2, [pc, #76]	; (801899c <__sinit+0x6c>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	62a2      	str	r2, [r4, #40]	; 0x28
 8018952:	42a3      	cmp	r3, r4
 8018954:	bf04      	itt	eq
 8018956:	2301      	moveq	r3, #1
 8018958:	61a3      	streq	r3, [r4, #24]
 801895a:	4620      	mov	r0, r4
 801895c:	f000 f820 	bl	80189a0 <__sfp>
 8018960:	6060      	str	r0, [r4, #4]
 8018962:	4620      	mov	r0, r4
 8018964:	f000 f81c 	bl	80189a0 <__sfp>
 8018968:	60a0      	str	r0, [r4, #8]
 801896a:	4620      	mov	r0, r4
 801896c:	f000 f818 	bl	80189a0 <__sfp>
 8018970:	2200      	movs	r2, #0
 8018972:	60e0      	str	r0, [r4, #12]
 8018974:	2104      	movs	r1, #4
 8018976:	6860      	ldr	r0, [r4, #4]
 8018978:	f7ff ff82 	bl	8018880 <std>
 801897c:	68a0      	ldr	r0, [r4, #8]
 801897e:	2201      	movs	r2, #1
 8018980:	2109      	movs	r1, #9
 8018982:	f7ff ff7d 	bl	8018880 <std>
 8018986:	68e0      	ldr	r0, [r4, #12]
 8018988:	2202      	movs	r2, #2
 801898a:	2112      	movs	r1, #18
 801898c:	f7ff ff78 	bl	8018880 <std>
 8018990:	2301      	movs	r3, #1
 8018992:	61a3      	str	r3, [r4, #24]
 8018994:	e7d2      	b.n	801893c <__sinit+0xc>
 8018996:	bf00      	nop
 8018998:	0801a448 	.word	0x0801a448
 801899c:	080188c9 	.word	0x080188c9

080189a0 <__sfp>:
 80189a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189a2:	4607      	mov	r7, r0
 80189a4:	f7ff ffac 	bl	8018900 <__sfp_lock_acquire>
 80189a8:	4b1e      	ldr	r3, [pc, #120]	; (8018a24 <__sfp+0x84>)
 80189aa:	681e      	ldr	r6, [r3, #0]
 80189ac:	69b3      	ldr	r3, [r6, #24]
 80189ae:	b913      	cbnz	r3, 80189b6 <__sfp+0x16>
 80189b0:	4630      	mov	r0, r6
 80189b2:	f7ff ffbd 	bl	8018930 <__sinit>
 80189b6:	3648      	adds	r6, #72	; 0x48
 80189b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80189bc:	3b01      	subs	r3, #1
 80189be:	d503      	bpl.n	80189c8 <__sfp+0x28>
 80189c0:	6833      	ldr	r3, [r6, #0]
 80189c2:	b30b      	cbz	r3, 8018a08 <__sfp+0x68>
 80189c4:	6836      	ldr	r6, [r6, #0]
 80189c6:	e7f7      	b.n	80189b8 <__sfp+0x18>
 80189c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80189cc:	b9d5      	cbnz	r5, 8018a04 <__sfp+0x64>
 80189ce:	4b16      	ldr	r3, [pc, #88]	; (8018a28 <__sfp+0x88>)
 80189d0:	60e3      	str	r3, [r4, #12]
 80189d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80189d6:	6665      	str	r5, [r4, #100]	; 0x64
 80189d8:	f000 f84c 	bl	8018a74 <__retarget_lock_init_recursive>
 80189dc:	f7ff ff96 	bl	801890c <__sfp_lock_release>
 80189e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80189e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80189e8:	6025      	str	r5, [r4, #0]
 80189ea:	61a5      	str	r5, [r4, #24]
 80189ec:	2208      	movs	r2, #8
 80189ee:	4629      	mov	r1, r5
 80189f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80189f4:	f7fe fb10 	bl	8017018 <memset>
 80189f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80189fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018a00:	4620      	mov	r0, r4
 8018a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a04:	3468      	adds	r4, #104	; 0x68
 8018a06:	e7d9      	b.n	80189bc <__sfp+0x1c>
 8018a08:	2104      	movs	r1, #4
 8018a0a:	4638      	mov	r0, r7
 8018a0c:	f7ff ff62 	bl	80188d4 <__sfmoreglue>
 8018a10:	4604      	mov	r4, r0
 8018a12:	6030      	str	r0, [r6, #0]
 8018a14:	2800      	cmp	r0, #0
 8018a16:	d1d5      	bne.n	80189c4 <__sfp+0x24>
 8018a18:	f7ff ff78 	bl	801890c <__sfp_lock_release>
 8018a1c:	230c      	movs	r3, #12
 8018a1e:	603b      	str	r3, [r7, #0]
 8018a20:	e7ee      	b.n	8018a00 <__sfp+0x60>
 8018a22:	bf00      	nop
 8018a24:	0801a448 	.word	0x0801a448
 8018a28:	ffff0001 	.word	0xffff0001

08018a2c <_fwalk_reent>:
 8018a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a30:	4606      	mov	r6, r0
 8018a32:	4688      	mov	r8, r1
 8018a34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018a38:	2700      	movs	r7, #0
 8018a3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018a3e:	f1b9 0901 	subs.w	r9, r9, #1
 8018a42:	d505      	bpl.n	8018a50 <_fwalk_reent+0x24>
 8018a44:	6824      	ldr	r4, [r4, #0]
 8018a46:	2c00      	cmp	r4, #0
 8018a48:	d1f7      	bne.n	8018a3a <_fwalk_reent+0xe>
 8018a4a:	4638      	mov	r0, r7
 8018a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a50:	89ab      	ldrh	r3, [r5, #12]
 8018a52:	2b01      	cmp	r3, #1
 8018a54:	d907      	bls.n	8018a66 <_fwalk_reent+0x3a>
 8018a56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018a5a:	3301      	adds	r3, #1
 8018a5c:	d003      	beq.n	8018a66 <_fwalk_reent+0x3a>
 8018a5e:	4629      	mov	r1, r5
 8018a60:	4630      	mov	r0, r6
 8018a62:	47c0      	blx	r8
 8018a64:	4307      	orrs	r7, r0
 8018a66:	3568      	adds	r5, #104	; 0x68
 8018a68:	e7e9      	b.n	8018a3e <_fwalk_reent+0x12>
	...

08018a6c <_localeconv_r>:
 8018a6c:	4800      	ldr	r0, [pc, #0]	; (8018a70 <_localeconv_r+0x4>)
 8018a6e:	4770      	bx	lr
 8018a70:	20000244 	.word	0x20000244

08018a74 <__retarget_lock_init_recursive>:
 8018a74:	4770      	bx	lr

08018a76 <__retarget_lock_acquire_recursive>:
 8018a76:	4770      	bx	lr

08018a78 <__retarget_lock_release_recursive>:
 8018a78:	4770      	bx	lr
	...

08018a7c <__malloc_lock>:
 8018a7c:	4801      	ldr	r0, [pc, #4]	; (8018a84 <__malloc_lock+0x8>)
 8018a7e:	f7ff bffa 	b.w	8018a76 <__retarget_lock_acquire_recursive>
 8018a82:	bf00      	nop
 8018a84:	200019b0 	.word	0x200019b0

08018a88 <__malloc_unlock>:
 8018a88:	4801      	ldr	r0, [pc, #4]	; (8018a90 <__malloc_unlock+0x8>)
 8018a8a:	f7ff bff5 	b.w	8018a78 <__retarget_lock_release_recursive>
 8018a8e:	bf00      	nop
 8018a90:	200019b0 	.word	0x200019b0

08018a94 <_Balloc>:
 8018a94:	b570      	push	{r4, r5, r6, lr}
 8018a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018a98:	4604      	mov	r4, r0
 8018a9a:	460d      	mov	r5, r1
 8018a9c:	b976      	cbnz	r6, 8018abc <_Balloc+0x28>
 8018a9e:	2010      	movs	r0, #16
 8018aa0:	f7fe faa4 	bl	8016fec <malloc>
 8018aa4:	4602      	mov	r2, r0
 8018aa6:	6260      	str	r0, [r4, #36]	; 0x24
 8018aa8:	b920      	cbnz	r0, 8018ab4 <_Balloc+0x20>
 8018aaa:	4b18      	ldr	r3, [pc, #96]	; (8018b0c <_Balloc+0x78>)
 8018aac:	4818      	ldr	r0, [pc, #96]	; (8018b10 <_Balloc+0x7c>)
 8018aae:	2166      	movs	r1, #102	; 0x66
 8018ab0:	f000 ff48 	bl	8019944 <__assert_func>
 8018ab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ab8:	6006      	str	r6, [r0, #0]
 8018aba:	60c6      	str	r6, [r0, #12]
 8018abc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018abe:	68f3      	ldr	r3, [r6, #12]
 8018ac0:	b183      	cbz	r3, 8018ae4 <_Balloc+0x50>
 8018ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ac4:	68db      	ldr	r3, [r3, #12]
 8018ac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018aca:	b9b8      	cbnz	r0, 8018afc <_Balloc+0x68>
 8018acc:	2101      	movs	r1, #1
 8018ace:	fa01 f605 	lsl.w	r6, r1, r5
 8018ad2:	1d72      	adds	r2, r6, #5
 8018ad4:	0092      	lsls	r2, r2, #2
 8018ad6:	4620      	mov	r0, r4
 8018ad8:	f000 fb5a 	bl	8019190 <_calloc_r>
 8018adc:	b160      	cbz	r0, 8018af8 <_Balloc+0x64>
 8018ade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018ae2:	e00e      	b.n	8018b02 <_Balloc+0x6e>
 8018ae4:	2221      	movs	r2, #33	; 0x21
 8018ae6:	2104      	movs	r1, #4
 8018ae8:	4620      	mov	r0, r4
 8018aea:	f000 fb51 	bl	8019190 <_calloc_r>
 8018aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018af0:	60f0      	str	r0, [r6, #12]
 8018af2:	68db      	ldr	r3, [r3, #12]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d1e4      	bne.n	8018ac2 <_Balloc+0x2e>
 8018af8:	2000      	movs	r0, #0
 8018afa:	bd70      	pop	{r4, r5, r6, pc}
 8018afc:	6802      	ldr	r2, [r0, #0]
 8018afe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018b02:	2300      	movs	r3, #0
 8018b04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018b08:	e7f7      	b.n	8018afa <_Balloc+0x66>
 8018b0a:	bf00      	nop
 8018b0c:	0801a48d 	.word	0x0801a48d
 8018b10:	0801a574 	.word	0x0801a574

08018b14 <_Bfree>:
 8018b14:	b570      	push	{r4, r5, r6, lr}
 8018b16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018b18:	4605      	mov	r5, r0
 8018b1a:	460c      	mov	r4, r1
 8018b1c:	b976      	cbnz	r6, 8018b3c <_Bfree+0x28>
 8018b1e:	2010      	movs	r0, #16
 8018b20:	f7fe fa64 	bl	8016fec <malloc>
 8018b24:	4602      	mov	r2, r0
 8018b26:	6268      	str	r0, [r5, #36]	; 0x24
 8018b28:	b920      	cbnz	r0, 8018b34 <_Bfree+0x20>
 8018b2a:	4b09      	ldr	r3, [pc, #36]	; (8018b50 <_Bfree+0x3c>)
 8018b2c:	4809      	ldr	r0, [pc, #36]	; (8018b54 <_Bfree+0x40>)
 8018b2e:	218a      	movs	r1, #138	; 0x8a
 8018b30:	f000 ff08 	bl	8019944 <__assert_func>
 8018b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018b38:	6006      	str	r6, [r0, #0]
 8018b3a:	60c6      	str	r6, [r0, #12]
 8018b3c:	b13c      	cbz	r4, 8018b4e <_Bfree+0x3a>
 8018b3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018b40:	6862      	ldr	r2, [r4, #4]
 8018b42:	68db      	ldr	r3, [r3, #12]
 8018b44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018b48:	6021      	str	r1, [r4, #0]
 8018b4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018b4e:	bd70      	pop	{r4, r5, r6, pc}
 8018b50:	0801a48d 	.word	0x0801a48d
 8018b54:	0801a574 	.word	0x0801a574

08018b58 <__multadd>:
 8018b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b5c:	690e      	ldr	r6, [r1, #16]
 8018b5e:	4607      	mov	r7, r0
 8018b60:	4698      	mov	r8, r3
 8018b62:	460c      	mov	r4, r1
 8018b64:	f101 0014 	add.w	r0, r1, #20
 8018b68:	2300      	movs	r3, #0
 8018b6a:	6805      	ldr	r5, [r0, #0]
 8018b6c:	b2a9      	uxth	r1, r5
 8018b6e:	fb02 8101 	mla	r1, r2, r1, r8
 8018b72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018b76:	0c2d      	lsrs	r5, r5, #16
 8018b78:	fb02 c505 	mla	r5, r2, r5, ip
 8018b7c:	b289      	uxth	r1, r1
 8018b7e:	3301      	adds	r3, #1
 8018b80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018b84:	429e      	cmp	r6, r3
 8018b86:	f840 1b04 	str.w	r1, [r0], #4
 8018b8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018b8e:	dcec      	bgt.n	8018b6a <__multadd+0x12>
 8018b90:	f1b8 0f00 	cmp.w	r8, #0
 8018b94:	d022      	beq.n	8018bdc <__multadd+0x84>
 8018b96:	68a3      	ldr	r3, [r4, #8]
 8018b98:	42b3      	cmp	r3, r6
 8018b9a:	dc19      	bgt.n	8018bd0 <__multadd+0x78>
 8018b9c:	6861      	ldr	r1, [r4, #4]
 8018b9e:	4638      	mov	r0, r7
 8018ba0:	3101      	adds	r1, #1
 8018ba2:	f7ff ff77 	bl	8018a94 <_Balloc>
 8018ba6:	4605      	mov	r5, r0
 8018ba8:	b928      	cbnz	r0, 8018bb6 <__multadd+0x5e>
 8018baa:	4602      	mov	r2, r0
 8018bac:	4b0d      	ldr	r3, [pc, #52]	; (8018be4 <__multadd+0x8c>)
 8018bae:	480e      	ldr	r0, [pc, #56]	; (8018be8 <__multadd+0x90>)
 8018bb0:	21b5      	movs	r1, #181	; 0xb5
 8018bb2:	f000 fec7 	bl	8019944 <__assert_func>
 8018bb6:	6922      	ldr	r2, [r4, #16]
 8018bb8:	3202      	adds	r2, #2
 8018bba:	f104 010c 	add.w	r1, r4, #12
 8018bbe:	0092      	lsls	r2, r2, #2
 8018bc0:	300c      	adds	r0, #12
 8018bc2:	f7fe fa1b 	bl	8016ffc <memcpy>
 8018bc6:	4621      	mov	r1, r4
 8018bc8:	4638      	mov	r0, r7
 8018bca:	f7ff ffa3 	bl	8018b14 <_Bfree>
 8018bce:	462c      	mov	r4, r5
 8018bd0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018bd4:	3601      	adds	r6, #1
 8018bd6:	f8c3 8014 	str.w	r8, [r3, #20]
 8018bda:	6126      	str	r6, [r4, #16]
 8018bdc:	4620      	mov	r0, r4
 8018bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018be2:	bf00      	nop
 8018be4:	0801a503 	.word	0x0801a503
 8018be8:	0801a574 	.word	0x0801a574

08018bec <__hi0bits>:
 8018bec:	0c03      	lsrs	r3, r0, #16
 8018bee:	041b      	lsls	r3, r3, #16
 8018bf0:	b9d3      	cbnz	r3, 8018c28 <__hi0bits+0x3c>
 8018bf2:	0400      	lsls	r0, r0, #16
 8018bf4:	2310      	movs	r3, #16
 8018bf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018bfa:	bf04      	itt	eq
 8018bfc:	0200      	lsleq	r0, r0, #8
 8018bfe:	3308      	addeq	r3, #8
 8018c00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018c04:	bf04      	itt	eq
 8018c06:	0100      	lsleq	r0, r0, #4
 8018c08:	3304      	addeq	r3, #4
 8018c0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018c0e:	bf04      	itt	eq
 8018c10:	0080      	lsleq	r0, r0, #2
 8018c12:	3302      	addeq	r3, #2
 8018c14:	2800      	cmp	r0, #0
 8018c16:	db05      	blt.n	8018c24 <__hi0bits+0x38>
 8018c18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018c1c:	f103 0301 	add.w	r3, r3, #1
 8018c20:	bf08      	it	eq
 8018c22:	2320      	moveq	r3, #32
 8018c24:	4618      	mov	r0, r3
 8018c26:	4770      	bx	lr
 8018c28:	2300      	movs	r3, #0
 8018c2a:	e7e4      	b.n	8018bf6 <__hi0bits+0xa>

08018c2c <__lo0bits>:
 8018c2c:	6803      	ldr	r3, [r0, #0]
 8018c2e:	f013 0207 	ands.w	r2, r3, #7
 8018c32:	4601      	mov	r1, r0
 8018c34:	d00b      	beq.n	8018c4e <__lo0bits+0x22>
 8018c36:	07da      	lsls	r2, r3, #31
 8018c38:	d424      	bmi.n	8018c84 <__lo0bits+0x58>
 8018c3a:	0798      	lsls	r0, r3, #30
 8018c3c:	bf49      	itett	mi
 8018c3e:	085b      	lsrmi	r3, r3, #1
 8018c40:	089b      	lsrpl	r3, r3, #2
 8018c42:	2001      	movmi	r0, #1
 8018c44:	600b      	strmi	r3, [r1, #0]
 8018c46:	bf5c      	itt	pl
 8018c48:	600b      	strpl	r3, [r1, #0]
 8018c4a:	2002      	movpl	r0, #2
 8018c4c:	4770      	bx	lr
 8018c4e:	b298      	uxth	r0, r3
 8018c50:	b9b0      	cbnz	r0, 8018c80 <__lo0bits+0x54>
 8018c52:	0c1b      	lsrs	r3, r3, #16
 8018c54:	2010      	movs	r0, #16
 8018c56:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018c5a:	bf04      	itt	eq
 8018c5c:	0a1b      	lsreq	r3, r3, #8
 8018c5e:	3008      	addeq	r0, #8
 8018c60:	071a      	lsls	r2, r3, #28
 8018c62:	bf04      	itt	eq
 8018c64:	091b      	lsreq	r3, r3, #4
 8018c66:	3004      	addeq	r0, #4
 8018c68:	079a      	lsls	r2, r3, #30
 8018c6a:	bf04      	itt	eq
 8018c6c:	089b      	lsreq	r3, r3, #2
 8018c6e:	3002      	addeq	r0, #2
 8018c70:	07da      	lsls	r2, r3, #31
 8018c72:	d403      	bmi.n	8018c7c <__lo0bits+0x50>
 8018c74:	085b      	lsrs	r3, r3, #1
 8018c76:	f100 0001 	add.w	r0, r0, #1
 8018c7a:	d005      	beq.n	8018c88 <__lo0bits+0x5c>
 8018c7c:	600b      	str	r3, [r1, #0]
 8018c7e:	4770      	bx	lr
 8018c80:	4610      	mov	r0, r2
 8018c82:	e7e8      	b.n	8018c56 <__lo0bits+0x2a>
 8018c84:	2000      	movs	r0, #0
 8018c86:	4770      	bx	lr
 8018c88:	2020      	movs	r0, #32
 8018c8a:	4770      	bx	lr

08018c8c <__i2b>:
 8018c8c:	b510      	push	{r4, lr}
 8018c8e:	460c      	mov	r4, r1
 8018c90:	2101      	movs	r1, #1
 8018c92:	f7ff feff 	bl	8018a94 <_Balloc>
 8018c96:	4602      	mov	r2, r0
 8018c98:	b928      	cbnz	r0, 8018ca6 <__i2b+0x1a>
 8018c9a:	4b05      	ldr	r3, [pc, #20]	; (8018cb0 <__i2b+0x24>)
 8018c9c:	4805      	ldr	r0, [pc, #20]	; (8018cb4 <__i2b+0x28>)
 8018c9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018ca2:	f000 fe4f 	bl	8019944 <__assert_func>
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	6144      	str	r4, [r0, #20]
 8018caa:	6103      	str	r3, [r0, #16]
 8018cac:	bd10      	pop	{r4, pc}
 8018cae:	bf00      	nop
 8018cb0:	0801a503 	.word	0x0801a503
 8018cb4:	0801a574 	.word	0x0801a574

08018cb8 <__multiply>:
 8018cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cbc:	4614      	mov	r4, r2
 8018cbe:	690a      	ldr	r2, [r1, #16]
 8018cc0:	6923      	ldr	r3, [r4, #16]
 8018cc2:	429a      	cmp	r2, r3
 8018cc4:	bfb8      	it	lt
 8018cc6:	460b      	movlt	r3, r1
 8018cc8:	460d      	mov	r5, r1
 8018cca:	bfbc      	itt	lt
 8018ccc:	4625      	movlt	r5, r4
 8018cce:	461c      	movlt	r4, r3
 8018cd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018cd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018cd8:	68ab      	ldr	r3, [r5, #8]
 8018cda:	6869      	ldr	r1, [r5, #4]
 8018cdc:	eb0a 0709 	add.w	r7, sl, r9
 8018ce0:	42bb      	cmp	r3, r7
 8018ce2:	b085      	sub	sp, #20
 8018ce4:	bfb8      	it	lt
 8018ce6:	3101      	addlt	r1, #1
 8018ce8:	f7ff fed4 	bl	8018a94 <_Balloc>
 8018cec:	b930      	cbnz	r0, 8018cfc <__multiply+0x44>
 8018cee:	4602      	mov	r2, r0
 8018cf0:	4b42      	ldr	r3, [pc, #264]	; (8018dfc <__multiply+0x144>)
 8018cf2:	4843      	ldr	r0, [pc, #268]	; (8018e00 <__multiply+0x148>)
 8018cf4:	f240 115d 	movw	r1, #349	; 0x15d
 8018cf8:	f000 fe24 	bl	8019944 <__assert_func>
 8018cfc:	f100 0614 	add.w	r6, r0, #20
 8018d00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018d04:	4633      	mov	r3, r6
 8018d06:	2200      	movs	r2, #0
 8018d08:	4543      	cmp	r3, r8
 8018d0a:	d31e      	bcc.n	8018d4a <__multiply+0x92>
 8018d0c:	f105 0c14 	add.w	ip, r5, #20
 8018d10:	f104 0314 	add.w	r3, r4, #20
 8018d14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018d18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018d1c:	9202      	str	r2, [sp, #8]
 8018d1e:	ebac 0205 	sub.w	r2, ip, r5
 8018d22:	3a15      	subs	r2, #21
 8018d24:	f022 0203 	bic.w	r2, r2, #3
 8018d28:	3204      	adds	r2, #4
 8018d2a:	f105 0115 	add.w	r1, r5, #21
 8018d2e:	458c      	cmp	ip, r1
 8018d30:	bf38      	it	cc
 8018d32:	2204      	movcc	r2, #4
 8018d34:	9201      	str	r2, [sp, #4]
 8018d36:	9a02      	ldr	r2, [sp, #8]
 8018d38:	9303      	str	r3, [sp, #12]
 8018d3a:	429a      	cmp	r2, r3
 8018d3c:	d808      	bhi.n	8018d50 <__multiply+0x98>
 8018d3e:	2f00      	cmp	r7, #0
 8018d40:	dc55      	bgt.n	8018dee <__multiply+0x136>
 8018d42:	6107      	str	r7, [r0, #16]
 8018d44:	b005      	add	sp, #20
 8018d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d4a:	f843 2b04 	str.w	r2, [r3], #4
 8018d4e:	e7db      	b.n	8018d08 <__multiply+0x50>
 8018d50:	f8b3 a000 	ldrh.w	sl, [r3]
 8018d54:	f1ba 0f00 	cmp.w	sl, #0
 8018d58:	d020      	beq.n	8018d9c <__multiply+0xe4>
 8018d5a:	f105 0e14 	add.w	lr, r5, #20
 8018d5e:	46b1      	mov	r9, r6
 8018d60:	2200      	movs	r2, #0
 8018d62:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018d66:	f8d9 b000 	ldr.w	fp, [r9]
 8018d6a:	b2a1      	uxth	r1, r4
 8018d6c:	fa1f fb8b 	uxth.w	fp, fp
 8018d70:	fb0a b101 	mla	r1, sl, r1, fp
 8018d74:	4411      	add	r1, r2
 8018d76:	f8d9 2000 	ldr.w	r2, [r9]
 8018d7a:	0c24      	lsrs	r4, r4, #16
 8018d7c:	0c12      	lsrs	r2, r2, #16
 8018d7e:	fb0a 2404 	mla	r4, sl, r4, r2
 8018d82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018d86:	b289      	uxth	r1, r1
 8018d88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018d8c:	45f4      	cmp	ip, lr
 8018d8e:	f849 1b04 	str.w	r1, [r9], #4
 8018d92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018d96:	d8e4      	bhi.n	8018d62 <__multiply+0xaa>
 8018d98:	9901      	ldr	r1, [sp, #4]
 8018d9a:	5072      	str	r2, [r6, r1]
 8018d9c:	9a03      	ldr	r2, [sp, #12]
 8018d9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018da2:	3304      	adds	r3, #4
 8018da4:	f1b9 0f00 	cmp.w	r9, #0
 8018da8:	d01f      	beq.n	8018dea <__multiply+0x132>
 8018daa:	6834      	ldr	r4, [r6, #0]
 8018dac:	f105 0114 	add.w	r1, r5, #20
 8018db0:	46b6      	mov	lr, r6
 8018db2:	f04f 0a00 	mov.w	sl, #0
 8018db6:	880a      	ldrh	r2, [r1, #0]
 8018db8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018dbc:	fb09 b202 	mla	r2, r9, r2, fp
 8018dc0:	4492      	add	sl, r2
 8018dc2:	b2a4      	uxth	r4, r4
 8018dc4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018dc8:	f84e 4b04 	str.w	r4, [lr], #4
 8018dcc:	f851 4b04 	ldr.w	r4, [r1], #4
 8018dd0:	f8be 2000 	ldrh.w	r2, [lr]
 8018dd4:	0c24      	lsrs	r4, r4, #16
 8018dd6:	fb09 2404 	mla	r4, r9, r4, r2
 8018dda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018dde:	458c      	cmp	ip, r1
 8018de0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018de4:	d8e7      	bhi.n	8018db6 <__multiply+0xfe>
 8018de6:	9a01      	ldr	r2, [sp, #4]
 8018de8:	50b4      	str	r4, [r6, r2]
 8018dea:	3604      	adds	r6, #4
 8018dec:	e7a3      	b.n	8018d36 <__multiply+0x7e>
 8018dee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d1a5      	bne.n	8018d42 <__multiply+0x8a>
 8018df6:	3f01      	subs	r7, #1
 8018df8:	e7a1      	b.n	8018d3e <__multiply+0x86>
 8018dfa:	bf00      	nop
 8018dfc:	0801a503 	.word	0x0801a503
 8018e00:	0801a574 	.word	0x0801a574

08018e04 <__pow5mult>:
 8018e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e08:	4615      	mov	r5, r2
 8018e0a:	f012 0203 	ands.w	r2, r2, #3
 8018e0e:	4606      	mov	r6, r0
 8018e10:	460f      	mov	r7, r1
 8018e12:	d007      	beq.n	8018e24 <__pow5mult+0x20>
 8018e14:	4c25      	ldr	r4, [pc, #148]	; (8018eac <__pow5mult+0xa8>)
 8018e16:	3a01      	subs	r2, #1
 8018e18:	2300      	movs	r3, #0
 8018e1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018e1e:	f7ff fe9b 	bl	8018b58 <__multadd>
 8018e22:	4607      	mov	r7, r0
 8018e24:	10ad      	asrs	r5, r5, #2
 8018e26:	d03d      	beq.n	8018ea4 <__pow5mult+0xa0>
 8018e28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018e2a:	b97c      	cbnz	r4, 8018e4c <__pow5mult+0x48>
 8018e2c:	2010      	movs	r0, #16
 8018e2e:	f7fe f8dd 	bl	8016fec <malloc>
 8018e32:	4602      	mov	r2, r0
 8018e34:	6270      	str	r0, [r6, #36]	; 0x24
 8018e36:	b928      	cbnz	r0, 8018e44 <__pow5mult+0x40>
 8018e38:	4b1d      	ldr	r3, [pc, #116]	; (8018eb0 <__pow5mult+0xac>)
 8018e3a:	481e      	ldr	r0, [pc, #120]	; (8018eb4 <__pow5mult+0xb0>)
 8018e3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8018e40:	f000 fd80 	bl	8019944 <__assert_func>
 8018e44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018e48:	6004      	str	r4, [r0, #0]
 8018e4a:	60c4      	str	r4, [r0, #12]
 8018e4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018e50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018e54:	b94c      	cbnz	r4, 8018e6a <__pow5mult+0x66>
 8018e56:	f240 2171 	movw	r1, #625	; 0x271
 8018e5a:	4630      	mov	r0, r6
 8018e5c:	f7ff ff16 	bl	8018c8c <__i2b>
 8018e60:	2300      	movs	r3, #0
 8018e62:	f8c8 0008 	str.w	r0, [r8, #8]
 8018e66:	4604      	mov	r4, r0
 8018e68:	6003      	str	r3, [r0, #0]
 8018e6a:	f04f 0900 	mov.w	r9, #0
 8018e6e:	07eb      	lsls	r3, r5, #31
 8018e70:	d50a      	bpl.n	8018e88 <__pow5mult+0x84>
 8018e72:	4639      	mov	r1, r7
 8018e74:	4622      	mov	r2, r4
 8018e76:	4630      	mov	r0, r6
 8018e78:	f7ff ff1e 	bl	8018cb8 <__multiply>
 8018e7c:	4639      	mov	r1, r7
 8018e7e:	4680      	mov	r8, r0
 8018e80:	4630      	mov	r0, r6
 8018e82:	f7ff fe47 	bl	8018b14 <_Bfree>
 8018e86:	4647      	mov	r7, r8
 8018e88:	106d      	asrs	r5, r5, #1
 8018e8a:	d00b      	beq.n	8018ea4 <__pow5mult+0xa0>
 8018e8c:	6820      	ldr	r0, [r4, #0]
 8018e8e:	b938      	cbnz	r0, 8018ea0 <__pow5mult+0x9c>
 8018e90:	4622      	mov	r2, r4
 8018e92:	4621      	mov	r1, r4
 8018e94:	4630      	mov	r0, r6
 8018e96:	f7ff ff0f 	bl	8018cb8 <__multiply>
 8018e9a:	6020      	str	r0, [r4, #0]
 8018e9c:	f8c0 9000 	str.w	r9, [r0]
 8018ea0:	4604      	mov	r4, r0
 8018ea2:	e7e4      	b.n	8018e6e <__pow5mult+0x6a>
 8018ea4:	4638      	mov	r0, r7
 8018ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018eaa:	bf00      	nop
 8018eac:	0801a6c8 	.word	0x0801a6c8
 8018eb0:	0801a48d 	.word	0x0801a48d
 8018eb4:	0801a574 	.word	0x0801a574

08018eb8 <__lshift>:
 8018eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ebc:	460c      	mov	r4, r1
 8018ebe:	6849      	ldr	r1, [r1, #4]
 8018ec0:	6923      	ldr	r3, [r4, #16]
 8018ec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018ec6:	68a3      	ldr	r3, [r4, #8]
 8018ec8:	4607      	mov	r7, r0
 8018eca:	4691      	mov	r9, r2
 8018ecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018ed0:	f108 0601 	add.w	r6, r8, #1
 8018ed4:	42b3      	cmp	r3, r6
 8018ed6:	db0b      	blt.n	8018ef0 <__lshift+0x38>
 8018ed8:	4638      	mov	r0, r7
 8018eda:	f7ff fddb 	bl	8018a94 <_Balloc>
 8018ede:	4605      	mov	r5, r0
 8018ee0:	b948      	cbnz	r0, 8018ef6 <__lshift+0x3e>
 8018ee2:	4602      	mov	r2, r0
 8018ee4:	4b28      	ldr	r3, [pc, #160]	; (8018f88 <__lshift+0xd0>)
 8018ee6:	4829      	ldr	r0, [pc, #164]	; (8018f8c <__lshift+0xd4>)
 8018ee8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018eec:	f000 fd2a 	bl	8019944 <__assert_func>
 8018ef0:	3101      	adds	r1, #1
 8018ef2:	005b      	lsls	r3, r3, #1
 8018ef4:	e7ee      	b.n	8018ed4 <__lshift+0x1c>
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	f100 0114 	add.w	r1, r0, #20
 8018efc:	f100 0210 	add.w	r2, r0, #16
 8018f00:	4618      	mov	r0, r3
 8018f02:	4553      	cmp	r3, sl
 8018f04:	db33      	blt.n	8018f6e <__lshift+0xb6>
 8018f06:	6920      	ldr	r0, [r4, #16]
 8018f08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018f0c:	f104 0314 	add.w	r3, r4, #20
 8018f10:	f019 091f 	ands.w	r9, r9, #31
 8018f14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018f18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018f1c:	d02b      	beq.n	8018f76 <__lshift+0xbe>
 8018f1e:	f1c9 0e20 	rsb	lr, r9, #32
 8018f22:	468a      	mov	sl, r1
 8018f24:	2200      	movs	r2, #0
 8018f26:	6818      	ldr	r0, [r3, #0]
 8018f28:	fa00 f009 	lsl.w	r0, r0, r9
 8018f2c:	4302      	orrs	r2, r0
 8018f2e:	f84a 2b04 	str.w	r2, [sl], #4
 8018f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f36:	459c      	cmp	ip, r3
 8018f38:	fa22 f20e 	lsr.w	r2, r2, lr
 8018f3c:	d8f3      	bhi.n	8018f26 <__lshift+0x6e>
 8018f3e:	ebac 0304 	sub.w	r3, ip, r4
 8018f42:	3b15      	subs	r3, #21
 8018f44:	f023 0303 	bic.w	r3, r3, #3
 8018f48:	3304      	adds	r3, #4
 8018f4a:	f104 0015 	add.w	r0, r4, #21
 8018f4e:	4584      	cmp	ip, r0
 8018f50:	bf38      	it	cc
 8018f52:	2304      	movcc	r3, #4
 8018f54:	50ca      	str	r2, [r1, r3]
 8018f56:	b10a      	cbz	r2, 8018f5c <__lshift+0xa4>
 8018f58:	f108 0602 	add.w	r6, r8, #2
 8018f5c:	3e01      	subs	r6, #1
 8018f5e:	4638      	mov	r0, r7
 8018f60:	612e      	str	r6, [r5, #16]
 8018f62:	4621      	mov	r1, r4
 8018f64:	f7ff fdd6 	bl	8018b14 <_Bfree>
 8018f68:	4628      	mov	r0, r5
 8018f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8018f72:	3301      	adds	r3, #1
 8018f74:	e7c5      	b.n	8018f02 <__lshift+0x4a>
 8018f76:	3904      	subs	r1, #4
 8018f78:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8018f80:	459c      	cmp	ip, r3
 8018f82:	d8f9      	bhi.n	8018f78 <__lshift+0xc0>
 8018f84:	e7ea      	b.n	8018f5c <__lshift+0xa4>
 8018f86:	bf00      	nop
 8018f88:	0801a503 	.word	0x0801a503
 8018f8c:	0801a574 	.word	0x0801a574

08018f90 <__mcmp>:
 8018f90:	b530      	push	{r4, r5, lr}
 8018f92:	6902      	ldr	r2, [r0, #16]
 8018f94:	690c      	ldr	r4, [r1, #16]
 8018f96:	1b12      	subs	r2, r2, r4
 8018f98:	d10e      	bne.n	8018fb8 <__mcmp+0x28>
 8018f9a:	f100 0314 	add.w	r3, r0, #20
 8018f9e:	3114      	adds	r1, #20
 8018fa0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018fa4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8018fa8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018fac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018fb0:	42a5      	cmp	r5, r4
 8018fb2:	d003      	beq.n	8018fbc <__mcmp+0x2c>
 8018fb4:	d305      	bcc.n	8018fc2 <__mcmp+0x32>
 8018fb6:	2201      	movs	r2, #1
 8018fb8:	4610      	mov	r0, r2
 8018fba:	bd30      	pop	{r4, r5, pc}
 8018fbc:	4283      	cmp	r3, r0
 8018fbe:	d3f3      	bcc.n	8018fa8 <__mcmp+0x18>
 8018fc0:	e7fa      	b.n	8018fb8 <__mcmp+0x28>
 8018fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8018fc6:	e7f7      	b.n	8018fb8 <__mcmp+0x28>

08018fc8 <__mdiff>:
 8018fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fcc:	460c      	mov	r4, r1
 8018fce:	4606      	mov	r6, r0
 8018fd0:	4611      	mov	r1, r2
 8018fd2:	4620      	mov	r0, r4
 8018fd4:	4617      	mov	r7, r2
 8018fd6:	f7ff ffdb 	bl	8018f90 <__mcmp>
 8018fda:	1e05      	subs	r5, r0, #0
 8018fdc:	d110      	bne.n	8019000 <__mdiff+0x38>
 8018fde:	4629      	mov	r1, r5
 8018fe0:	4630      	mov	r0, r6
 8018fe2:	f7ff fd57 	bl	8018a94 <_Balloc>
 8018fe6:	b930      	cbnz	r0, 8018ff6 <__mdiff+0x2e>
 8018fe8:	4b39      	ldr	r3, [pc, #228]	; (80190d0 <__mdiff+0x108>)
 8018fea:	4602      	mov	r2, r0
 8018fec:	f240 2132 	movw	r1, #562	; 0x232
 8018ff0:	4838      	ldr	r0, [pc, #224]	; (80190d4 <__mdiff+0x10c>)
 8018ff2:	f000 fca7 	bl	8019944 <__assert_func>
 8018ff6:	2301      	movs	r3, #1
 8018ff8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018ffc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019000:	bfa4      	itt	ge
 8019002:	463b      	movge	r3, r7
 8019004:	4627      	movge	r7, r4
 8019006:	4630      	mov	r0, r6
 8019008:	6879      	ldr	r1, [r7, #4]
 801900a:	bfa6      	itte	ge
 801900c:	461c      	movge	r4, r3
 801900e:	2500      	movge	r5, #0
 8019010:	2501      	movlt	r5, #1
 8019012:	f7ff fd3f 	bl	8018a94 <_Balloc>
 8019016:	b920      	cbnz	r0, 8019022 <__mdiff+0x5a>
 8019018:	4b2d      	ldr	r3, [pc, #180]	; (80190d0 <__mdiff+0x108>)
 801901a:	4602      	mov	r2, r0
 801901c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019020:	e7e6      	b.n	8018ff0 <__mdiff+0x28>
 8019022:	693e      	ldr	r6, [r7, #16]
 8019024:	60c5      	str	r5, [r0, #12]
 8019026:	6925      	ldr	r5, [r4, #16]
 8019028:	f107 0114 	add.w	r1, r7, #20
 801902c:	f104 0914 	add.w	r9, r4, #20
 8019030:	f100 0e14 	add.w	lr, r0, #20
 8019034:	f107 0210 	add.w	r2, r7, #16
 8019038:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801903c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019040:	46f2      	mov	sl, lr
 8019042:	2700      	movs	r7, #0
 8019044:	f859 3b04 	ldr.w	r3, [r9], #4
 8019048:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801904c:	fa1f f883 	uxth.w	r8, r3
 8019050:	fa17 f78b 	uxtah	r7, r7, fp
 8019054:	0c1b      	lsrs	r3, r3, #16
 8019056:	eba7 0808 	sub.w	r8, r7, r8
 801905a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801905e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019062:	fa1f f888 	uxth.w	r8, r8
 8019066:	141f      	asrs	r7, r3, #16
 8019068:	454d      	cmp	r5, r9
 801906a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801906e:	f84a 3b04 	str.w	r3, [sl], #4
 8019072:	d8e7      	bhi.n	8019044 <__mdiff+0x7c>
 8019074:	1b2b      	subs	r3, r5, r4
 8019076:	3b15      	subs	r3, #21
 8019078:	f023 0303 	bic.w	r3, r3, #3
 801907c:	3304      	adds	r3, #4
 801907e:	3415      	adds	r4, #21
 8019080:	42a5      	cmp	r5, r4
 8019082:	bf38      	it	cc
 8019084:	2304      	movcc	r3, #4
 8019086:	4419      	add	r1, r3
 8019088:	4473      	add	r3, lr
 801908a:	469e      	mov	lr, r3
 801908c:	460d      	mov	r5, r1
 801908e:	4565      	cmp	r5, ip
 8019090:	d30e      	bcc.n	80190b0 <__mdiff+0xe8>
 8019092:	f10c 0203 	add.w	r2, ip, #3
 8019096:	1a52      	subs	r2, r2, r1
 8019098:	f022 0203 	bic.w	r2, r2, #3
 801909c:	3903      	subs	r1, #3
 801909e:	458c      	cmp	ip, r1
 80190a0:	bf38      	it	cc
 80190a2:	2200      	movcc	r2, #0
 80190a4:	441a      	add	r2, r3
 80190a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80190aa:	b17b      	cbz	r3, 80190cc <__mdiff+0x104>
 80190ac:	6106      	str	r6, [r0, #16]
 80190ae:	e7a5      	b.n	8018ffc <__mdiff+0x34>
 80190b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80190b4:	fa17 f488 	uxtah	r4, r7, r8
 80190b8:	1422      	asrs	r2, r4, #16
 80190ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80190be:	b2a4      	uxth	r4, r4
 80190c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80190c4:	f84e 4b04 	str.w	r4, [lr], #4
 80190c8:	1417      	asrs	r7, r2, #16
 80190ca:	e7e0      	b.n	801908e <__mdiff+0xc6>
 80190cc:	3e01      	subs	r6, #1
 80190ce:	e7ea      	b.n	80190a6 <__mdiff+0xde>
 80190d0:	0801a503 	.word	0x0801a503
 80190d4:	0801a574 	.word	0x0801a574

080190d8 <__d2b>:
 80190d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80190dc:	4689      	mov	r9, r1
 80190de:	2101      	movs	r1, #1
 80190e0:	ec57 6b10 	vmov	r6, r7, d0
 80190e4:	4690      	mov	r8, r2
 80190e6:	f7ff fcd5 	bl	8018a94 <_Balloc>
 80190ea:	4604      	mov	r4, r0
 80190ec:	b930      	cbnz	r0, 80190fc <__d2b+0x24>
 80190ee:	4602      	mov	r2, r0
 80190f0:	4b25      	ldr	r3, [pc, #148]	; (8019188 <__d2b+0xb0>)
 80190f2:	4826      	ldr	r0, [pc, #152]	; (801918c <__d2b+0xb4>)
 80190f4:	f240 310a 	movw	r1, #778	; 0x30a
 80190f8:	f000 fc24 	bl	8019944 <__assert_func>
 80190fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019104:	bb35      	cbnz	r5, 8019154 <__d2b+0x7c>
 8019106:	2e00      	cmp	r6, #0
 8019108:	9301      	str	r3, [sp, #4]
 801910a:	d028      	beq.n	801915e <__d2b+0x86>
 801910c:	4668      	mov	r0, sp
 801910e:	9600      	str	r6, [sp, #0]
 8019110:	f7ff fd8c 	bl	8018c2c <__lo0bits>
 8019114:	9900      	ldr	r1, [sp, #0]
 8019116:	b300      	cbz	r0, 801915a <__d2b+0x82>
 8019118:	9a01      	ldr	r2, [sp, #4]
 801911a:	f1c0 0320 	rsb	r3, r0, #32
 801911e:	fa02 f303 	lsl.w	r3, r2, r3
 8019122:	430b      	orrs	r3, r1
 8019124:	40c2      	lsrs	r2, r0
 8019126:	6163      	str	r3, [r4, #20]
 8019128:	9201      	str	r2, [sp, #4]
 801912a:	9b01      	ldr	r3, [sp, #4]
 801912c:	61a3      	str	r3, [r4, #24]
 801912e:	2b00      	cmp	r3, #0
 8019130:	bf14      	ite	ne
 8019132:	2202      	movne	r2, #2
 8019134:	2201      	moveq	r2, #1
 8019136:	6122      	str	r2, [r4, #16]
 8019138:	b1d5      	cbz	r5, 8019170 <__d2b+0x98>
 801913a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801913e:	4405      	add	r5, r0
 8019140:	f8c9 5000 	str.w	r5, [r9]
 8019144:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019148:	f8c8 0000 	str.w	r0, [r8]
 801914c:	4620      	mov	r0, r4
 801914e:	b003      	add	sp, #12
 8019150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019158:	e7d5      	b.n	8019106 <__d2b+0x2e>
 801915a:	6161      	str	r1, [r4, #20]
 801915c:	e7e5      	b.n	801912a <__d2b+0x52>
 801915e:	a801      	add	r0, sp, #4
 8019160:	f7ff fd64 	bl	8018c2c <__lo0bits>
 8019164:	9b01      	ldr	r3, [sp, #4]
 8019166:	6163      	str	r3, [r4, #20]
 8019168:	2201      	movs	r2, #1
 801916a:	6122      	str	r2, [r4, #16]
 801916c:	3020      	adds	r0, #32
 801916e:	e7e3      	b.n	8019138 <__d2b+0x60>
 8019170:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019174:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019178:	f8c9 0000 	str.w	r0, [r9]
 801917c:	6918      	ldr	r0, [r3, #16]
 801917e:	f7ff fd35 	bl	8018bec <__hi0bits>
 8019182:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019186:	e7df      	b.n	8019148 <__d2b+0x70>
 8019188:	0801a503 	.word	0x0801a503
 801918c:	0801a574 	.word	0x0801a574

08019190 <_calloc_r>:
 8019190:	b513      	push	{r0, r1, r4, lr}
 8019192:	434a      	muls	r2, r1
 8019194:	4611      	mov	r1, r2
 8019196:	9201      	str	r2, [sp, #4]
 8019198:	f7fd ff96 	bl	80170c8 <_malloc_r>
 801919c:	4604      	mov	r4, r0
 801919e:	b118      	cbz	r0, 80191a8 <_calloc_r+0x18>
 80191a0:	9a01      	ldr	r2, [sp, #4]
 80191a2:	2100      	movs	r1, #0
 80191a4:	f7fd ff38 	bl	8017018 <memset>
 80191a8:	4620      	mov	r0, r4
 80191aa:	b002      	add	sp, #8
 80191ac:	bd10      	pop	{r4, pc}

080191ae <__ssputs_r>:
 80191ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80191b2:	688e      	ldr	r6, [r1, #8]
 80191b4:	429e      	cmp	r6, r3
 80191b6:	4682      	mov	sl, r0
 80191b8:	460c      	mov	r4, r1
 80191ba:	4690      	mov	r8, r2
 80191bc:	461f      	mov	r7, r3
 80191be:	d838      	bhi.n	8019232 <__ssputs_r+0x84>
 80191c0:	898a      	ldrh	r2, [r1, #12]
 80191c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80191c6:	d032      	beq.n	801922e <__ssputs_r+0x80>
 80191c8:	6825      	ldr	r5, [r4, #0]
 80191ca:	6909      	ldr	r1, [r1, #16]
 80191cc:	eba5 0901 	sub.w	r9, r5, r1
 80191d0:	6965      	ldr	r5, [r4, #20]
 80191d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80191d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80191da:	3301      	adds	r3, #1
 80191dc:	444b      	add	r3, r9
 80191de:	106d      	asrs	r5, r5, #1
 80191e0:	429d      	cmp	r5, r3
 80191e2:	bf38      	it	cc
 80191e4:	461d      	movcc	r5, r3
 80191e6:	0553      	lsls	r3, r2, #21
 80191e8:	d531      	bpl.n	801924e <__ssputs_r+0xa0>
 80191ea:	4629      	mov	r1, r5
 80191ec:	f7fd ff6c 	bl	80170c8 <_malloc_r>
 80191f0:	4606      	mov	r6, r0
 80191f2:	b950      	cbnz	r0, 801920a <__ssputs_r+0x5c>
 80191f4:	230c      	movs	r3, #12
 80191f6:	f8ca 3000 	str.w	r3, [sl]
 80191fa:	89a3      	ldrh	r3, [r4, #12]
 80191fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019200:	81a3      	strh	r3, [r4, #12]
 8019202:	f04f 30ff 	mov.w	r0, #4294967295
 8019206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801920a:	6921      	ldr	r1, [r4, #16]
 801920c:	464a      	mov	r2, r9
 801920e:	f7fd fef5 	bl	8016ffc <memcpy>
 8019212:	89a3      	ldrh	r3, [r4, #12]
 8019214:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801921c:	81a3      	strh	r3, [r4, #12]
 801921e:	6126      	str	r6, [r4, #16]
 8019220:	6165      	str	r5, [r4, #20]
 8019222:	444e      	add	r6, r9
 8019224:	eba5 0509 	sub.w	r5, r5, r9
 8019228:	6026      	str	r6, [r4, #0]
 801922a:	60a5      	str	r5, [r4, #8]
 801922c:	463e      	mov	r6, r7
 801922e:	42be      	cmp	r6, r7
 8019230:	d900      	bls.n	8019234 <__ssputs_r+0x86>
 8019232:	463e      	mov	r6, r7
 8019234:	4632      	mov	r2, r6
 8019236:	6820      	ldr	r0, [r4, #0]
 8019238:	4641      	mov	r1, r8
 801923a:	f000 fd0d 	bl	8019c58 <memmove>
 801923e:	68a3      	ldr	r3, [r4, #8]
 8019240:	6822      	ldr	r2, [r4, #0]
 8019242:	1b9b      	subs	r3, r3, r6
 8019244:	4432      	add	r2, r6
 8019246:	60a3      	str	r3, [r4, #8]
 8019248:	6022      	str	r2, [r4, #0]
 801924a:	2000      	movs	r0, #0
 801924c:	e7db      	b.n	8019206 <__ssputs_r+0x58>
 801924e:	462a      	mov	r2, r5
 8019250:	f000 fd1c 	bl	8019c8c <_realloc_r>
 8019254:	4606      	mov	r6, r0
 8019256:	2800      	cmp	r0, #0
 8019258:	d1e1      	bne.n	801921e <__ssputs_r+0x70>
 801925a:	6921      	ldr	r1, [r4, #16]
 801925c:	4650      	mov	r0, sl
 801925e:	f7fd fee3 	bl	8017028 <_free_r>
 8019262:	e7c7      	b.n	80191f4 <__ssputs_r+0x46>

08019264 <_svfiprintf_r>:
 8019264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019268:	4698      	mov	r8, r3
 801926a:	898b      	ldrh	r3, [r1, #12]
 801926c:	061b      	lsls	r3, r3, #24
 801926e:	b09d      	sub	sp, #116	; 0x74
 8019270:	4607      	mov	r7, r0
 8019272:	460d      	mov	r5, r1
 8019274:	4614      	mov	r4, r2
 8019276:	d50e      	bpl.n	8019296 <_svfiprintf_r+0x32>
 8019278:	690b      	ldr	r3, [r1, #16]
 801927a:	b963      	cbnz	r3, 8019296 <_svfiprintf_r+0x32>
 801927c:	2140      	movs	r1, #64	; 0x40
 801927e:	f7fd ff23 	bl	80170c8 <_malloc_r>
 8019282:	6028      	str	r0, [r5, #0]
 8019284:	6128      	str	r0, [r5, #16]
 8019286:	b920      	cbnz	r0, 8019292 <_svfiprintf_r+0x2e>
 8019288:	230c      	movs	r3, #12
 801928a:	603b      	str	r3, [r7, #0]
 801928c:	f04f 30ff 	mov.w	r0, #4294967295
 8019290:	e0d1      	b.n	8019436 <_svfiprintf_r+0x1d2>
 8019292:	2340      	movs	r3, #64	; 0x40
 8019294:	616b      	str	r3, [r5, #20]
 8019296:	2300      	movs	r3, #0
 8019298:	9309      	str	r3, [sp, #36]	; 0x24
 801929a:	2320      	movs	r3, #32
 801929c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80192a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80192a4:	2330      	movs	r3, #48	; 0x30
 80192a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019450 <_svfiprintf_r+0x1ec>
 80192aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80192ae:	f04f 0901 	mov.w	r9, #1
 80192b2:	4623      	mov	r3, r4
 80192b4:	469a      	mov	sl, r3
 80192b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80192ba:	b10a      	cbz	r2, 80192c0 <_svfiprintf_r+0x5c>
 80192bc:	2a25      	cmp	r2, #37	; 0x25
 80192be:	d1f9      	bne.n	80192b4 <_svfiprintf_r+0x50>
 80192c0:	ebba 0b04 	subs.w	fp, sl, r4
 80192c4:	d00b      	beq.n	80192de <_svfiprintf_r+0x7a>
 80192c6:	465b      	mov	r3, fp
 80192c8:	4622      	mov	r2, r4
 80192ca:	4629      	mov	r1, r5
 80192cc:	4638      	mov	r0, r7
 80192ce:	f7ff ff6e 	bl	80191ae <__ssputs_r>
 80192d2:	3001      	adds	r0, #1
 80192d4:	f000 80aa 	beq.w	801942c <_svfiprintf_r+0x1c8>
 80192d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192da:	445a      	add	r2, fp
 80192dc:	9209      	str	r2, [sp, #36]	; 0x24
 80192de:	f89a 3000 	ldrb.w	r3, [sl]
 80192e2:	2b00      	cmp	r3, #0
 80192e4:	f000 80a2 	beq.w	801942c <_svfiprintf_r+0x1c8>
 80192e8:	2300      	movs	r3, #0
 80192ea:	f04f 32ff 	mov.w	r2, #4294967295
 80192ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80192f2:	f10a 0a01 	add.w	sl, sl, #1
 80192f6:	9304      	str	r3, [sp, #16]
 80192f8:	9307      	str	r3, [sp, #28]
 80192fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80192fe:	931a      	str	r3, [sp, #104]	; 0x68
 8019300:	4654      	mov	r4, sl
 8019302:	2205      	movs	r2, #5
 8019304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019308:	4851      	ldr	r0, [pc, #324]	; (8019450 <_svfiprintf_r+0x1ec>)
 801930a:	f7e6 ff69 	bl	80001e0 <memchr>
 801930e:	9a04      	ldr	r2, [sp, #16]
 8019310:	b9d8      	cbnz	r0, 801934a <_svfiprintf_r+0xe6>
 8019312:	06d0      	lsls	r0, r2, #27
 8019314:	bf44      	itt	mi
 8019316:	2320      	movmi	r3, #32
 8019318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801931c:	0711      	lsls	r1, r2, #28
 801931e:	bf44      	itt	mi
 8019320:	232b      	movmi	r3, #43	; 0x2b
 8019322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019326:	f89a 3000 	ldrb.w	r3, [sl]
 801932a:	2b2a      	cmp	r3, #42	; 0x2a
 801932c:	d015      	beq.n	801935a <_svfiprintf_r+0xf6>
 801932e:	9a07      	ldr	r2, [sp, #28]
 8019330:	4654      	mov	r4, sl
 8019332:	2000      	movs	r0, #0
 8019334:	f04f 0c0a 	mov.w	ip, #10
 8019338:	4621      	mov	r1, r4
 801933a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801933e:	3b30      	subs	r3, #48	; 0x30
 8019340:	2b09      	cmp	r3, #9
 8019342:	d94e      	bls.n	80193e2 <_svfiprintf_r+0x17e>
 8019344:	b1b0      	cbz	r0, 8019374 <_svfiprintf_r+0x110>
 8019346:	9207      	str	r2, [sp, #28]
 8019348:	e014      	b.n	8019374 <_svfiprintf_r+0x110>
 801934a:	eba0 0308 	sub.w	r3, r0, r8
 801934e:	fa09 f303 	lsl.w	r3, r9, r3
 8019352:	4313      	orrs	r3, r2
 8019354:	9304      	str	r3, [sp, #16]
 8019356:	46a2      	mov	sl, r4
 8019358:	e7d2      	b.n	8019300 <_svfiprintf_r+0x9c>
 801935a:	9b03      	ldr	r3, [sp, #12]
 801935c:	1d19      	adds	r1, r3, #4
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	9103      	str	r1, [sp, #12]
 8019362:	2b00      	cmp	r3, #0
 8019364:	bfbb      	ittet	lt
 8019366:	425b      	neglt	r3, r3
 8019368:	f042 0202 	orrlt.w	r2, r2, #2
 801936c:	9307      	strge	r3, [sp, #28]
 801936e:	9307      	strlt	r3, [sp, #28]
 8019370:	bfb8      	it	lt
 8019372:	9204      	strlt	r2, [sp, #16]
 8019374:	7823      	ldrb	r3, [r4, #0]
 8019376:	2b2e      	cmp	r3, #46	; 0x2e
 8019378:	d10c      	bne.n	8019394 <_svfiprintf_r+0x130>
 801937a:	7863      	ldrb	r3, [r4, #1]
 801937c:	2b2a      	cmp	r3, #42	; 0x2a
 801937e:	d135      	bne.n	80193ec <_svfiprintf_r+0x188>
 8019380:	9b03      	ldr	r3, [sp, #12]
 8019382:	1d1a      	adds	r2, r3, #4
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	9203      	str	r2, [sp, #12]
 8019388:	2b00      	cmp	r3, #0
 801938a:	bfb8      	it	lt
 801938c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019390:	3402      	adds	r4, #2
 8019392:	9305      	str	r3, [sp, #20]
 8019394:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019460 <_svfiprintf_r+0x1fc>
 8019398:	7821      	ldrb	r1, [r4, #0]
 801939a:	2203      	movs	r2, #3
 801939c:	4650      	mov	r0, sl
 801939e:	f7e6 ff1f 	bl	80001e0 <memchr>
 80193a2:	b140      	cbz	r0, 80193b6 <_svfiprintf_r+0x152>
 80193a4:	2340      	movs	r3, #64	; 0x40
 80193a6:	eba0 000a 	sub.w	r0, r0, sl
 80193aa:	fa03 f000 	lsl.w	r0, r3, r0
 80193ae:	9b04      	ldr	r3, [sp, #16]
 80193b0:	4303      	orrs	r3, r0
 80193b2:	3401      	adds	r4, #1
 80193b4:	9304      	str	r3, [sp, #16]
 80193b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193ba:	4826      	ldr	r0, [pc, #152]	; (8019454 <_svfiprintf_r+0x1f0>)
 80193bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80193c0:	2206      	movs	r2, #6
 80193c2:	f7e6 ff0d 	bl	80001e0 <memchr>
 80193c6:	2800      	cmp	r0, #0
 80193c8:	d038      	beq.n	801943c <_svfiprintf_r+0x1d8>
 80193ca:	4b23      	ldr	r3, [pc, #140]	; (8019458 <_svfiprintf_r+0x1f4>)
 80193cc:	bb1b      	cbnz	r3, 8019416 <_svfiprintf_r+0x1b2>
 80193ce:	9b03      	ldr	r3, [sp, #12]
 80193d0:	3307      	adds	r3, #7
 80193d2:	f023 0307 	bic.w	r3, r3, #7
 80193d6:	3308      	adds	r3, #8
 80193d8:	9303      	str	r3, [sp, #12]
 80193da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193dc:	4433      	add	r3, r6
 80193de:	9309      	str	r3, [sp, #36]	; 0x24
 80193e0:	e767      	b.n	80192b2 <_svfiprintf_r+0x4e>
 80193e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80193e6:	460c      	mov	r4, r1
 80193e8:	2001      	movs	r0, #1
 80193ea:	e7a5      	b.n	8019338 <_svfiprintf_r+0xd4>
 80193ec:	2300      	movs	r3, #0
 80193ee:	3401      	adds	r4, #1
 80193f0:	9305      	str	r3, [sp, #20]
 80193f2:	4619      	mov	r1, r3
 80193f4:	f04f 0c0a 	mov.w	ip, #10
 80193f8:	4620      	mov	r0, r4
 80193fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193fe:	3a30      	subs	r2, #48	; 0x30
 8019400:	2a09      	cmp	r2, #9
 8019402:	d903      	bls.n	801940c <_svfiprintf_r+0x1a8>
 8019404:	2b00      	cmp	r3, #0
 8019406:	d0c5      	beq.n	8019394 <_svfiprintf_r+0x130>
 8019408:	9105      	str	r1, [sp, #20]
 801940a:	e7c3      	b.n	8019394 <_svfiprintf_r+0x130>
 801940c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019410:	4604      	mov	r4, r0
 8019412:	2301      	movs	r3, #1
 8019414:	e7f0      	b.n	80193f8 <_svfiprintf_r+0x194>
 8019416:	ab03      	add	r3, sp, #12
 8019418:	9300      	str	r3, [sp, #0]
 801941a:	462a      	mov	r2, r5
 801941c:	4b0f      	ldr	r3, [pc, #60]	; (801945c <_svfiprintf_r+0x1f8>)
 801941e:	a904      	add	r1, sp, #16
 8019420:	4638      	mov	r0, r7
 8019422:	f7fd ff4b 	bl	80172bc <_printf_float>
 8019426:	1c42      	adds	r2, r0, #1
 8019428:	4606      	mov	r6, r0
 801942a:	d1d6      	bne.n	80193da <_svfiprintf_r+0x176>
 801942c:	89ab      	ldrh	r3, [r5, #12]
 801942e:	065b      	lsls	r3, r3, #25
 8019430:	f53f af2c 	bmi.w	801928c <_svfiprintf_r+0x28>
 8019434:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019436:	b01d      	add	sp, #116	; 0x74
 8019438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801943c:	ab03      	add	r3, sp, #12
 801943e:	9300      	str	r3, [sp, #0]
 8019440:	462a      	mov	r2, r5
 8019442:	4b06      	ldr	r3, [pc, #24]	; (801945c <_svfiprintf_r+0x1f8>)
 8019444:	a904      	add	r1, sp, #16
 8019446:	4638      	mov	r0, r7
 8019448:	f7fe f9dc 	bl	8017804 <_printf_i>
 801944c:	e7eb      	b.n	8019426 <_svfiprintf_r+0x1c2>
 801944e:	bf00      	nop
 8019450:	0801a6d4 	.word	0x0801a6d4
 8019454:	0801a6de 	.word	0x0801a6de
 8019458:	080172bd 	.word	0x080172bd
 801945c:	080191af 	.word	0x080191af
 8019460:	0801a6da 	.word	0x0801a6da

08019464 <__sfputc_r>:
 8019464:	6893      	ldr	r3, [r2, #8]
 8019466:	3b01      	subs	r3, #1
 8019468:	2b00      	cmp	r3, #0
 801946a:	b410      	push	{r4}
 801946c:	6093      	str	r3, [r2, #8]
 801946e:	da08      	bge.n	8019482 <__sfputc_r+0x1e>
 8019470:	6994      	ldr	r4, [r2, #24]
 8019472:	42a3      	cmp	r3, r4
 8019474:	db01      	blt.n	801947a <__sfputc_r+0x16>
 8019476:	290a      	cmp	r1, #10
 8019478:	d103      	bne.n	8019482 <__sfputc_r+0x1e>
 801947a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801947e:	f000 b98f 	b.w	80197a0 <__swbuf_r>
 8019482:	6813      	ldr	r3, [r2, #0]
 8019484:	1c58      	adds	r0, r3, #1
 8019486:	6010      	str	r0, [r2, #0]
 8019488:	7019      	strb	r1, [r3, #0]
 801948a:	4608      	mov	r0, r1
 801948c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019490:	4770      	bx	lr

08019492 <__sfputs_r>:
 8019492:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019494:	4606      	mov	r6, r0
 8019496:	460f      	mov	r7, r1
 8019498:	4614      	mov	r4, r2
 801949a:	18d5      	adds	r5, r2, r3
 801949c:	42ac      	cmp	r4, r5
 801949e:	d101      	bne.n	80194a4 <__sfputs_r+0x12>
 80194a0:	2000      	movs	r0, #0
 80194a2:	e007      	b.n	80194b4 <__sfputs_r+0x22>
 80194a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194a8:	463a      	mov	r2, r7
 80194aa:	4630      	mov	r0, r6
 80194ac:	f7ff ffda 	bl	8019464 <__sfputc_r>
 80194b0:	1c43      	adds	r3, r0, #1
 80194b2:	d1f3      	bne.n	801949c <__sfputs_r+0xa>
 80194b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080194b8 <_vfiprintf_r>:
 80194b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194bc:	460d      	mov	r5, r1
 80194be:	b09d      	sub	sp, #116	; 0x74
 80194c0:	4614      	mov	r4, r2
 80194c2:	4698      	mov	r8, r3
 80194c4:	4606      	mov	r6, r0
 80194c6:	b118      	cbz	r0, 80194d0 <_vfiprintf_r+0x18>
 80194c8:	6983      	ldr	r3, [r0, #24]
 80194ca:	b90b      	cbnz	r3, 80194d0 <_vfiprintf_r+0x18>
 80194cc:	f7ff fa30 	bl	8018930 <__sinit>
 80194d0:	4b89      	ldr	r3, [pc, #548]	; (80196f8 <_vfiprintf_r+0x240>)
 80194d2:	429d      	cmp	r5, r3
 80194d4:	d11b      	bne.n	801950e <_vfiprintf_r+0x56>
 80194d6:	6875      	ldr	r5, [r6, #4]
 80194d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80194da:	07d9      	lsls	r1, r3, #31
 80194dc:	d405      	bmi.n	80194ea <_vfiprintf_r+0x32>
 80194de:	89ab      	ldrh	r3, [r5, #12]
 80194e0:	059a      	lsls	r2, r3, #22
 80194e2:	d402      	bmi.n	80194ea <_vfiprintf_r+0x32>
 80194e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80194e6:	f7ff fac6 	bl	8018a76 <__retarget_lock_acquire_recursive>
 80194ea:	89ab      	ldrh	r3, [r5, #12]
 80194ec:	071b      	lsls	r3, r3, #28
 80194ee:	d501      	bpl.n	80194f4 <_vfiprintf_r+0x3c>
 80194f0:	692b      	ldr	r3, [r5, #16]
 80194f2:	b9eb      	cbnz	r3, 8019530 <_vfiprintf_r+0x78>
 80194f4:	4629      	mov	r1, r5
 80194f6:	4630      	mov	r0, r6
 80194f8:	f000 f9b6 	bl	8019868 <__swsetup_r>
 80194fc:	b1c0      	cbz	r0, 8019530 <_vfiprintf_r+0x78>
 80194fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019500:	07dc      	lsls	r4, r3, #31
 8019502:	d50e      	bpl.n	8019522 <_vfiprintf_r+0x6a>
 8019504:	f04f 30ff 	mov.w	r0, #4294967295
 8019508:	b01d      	add	sp, #116	; 0x74
 801950a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801950e:	4b7b      	ldr	r3, [pc, #492]	; (80196fc <_vfiprintf_r+0x244>)
 8019510:	429d      	cmp	r5, r3
 8019512:	d101      	bne.n	8019518 <_vfiprintf_r+0x60>
 8019514:	68b5      	ldr	r5, [r6, #8]
 8019516:	e7df      	b.n	80194d8 <_vfiprintf_r+0x20>
 8019518:	4b79      	ldr	r3, [pc, #484]	; (8019700 <_vfiprintf_r+0x248>)
 801951a:	429d      	cmp	r5, r3
 801951c:	bf08      	it	eq
 801951e:	68f5      	ldreq	r5, [r6, #12]
 8019520:	e7da      	b.n	80194d8 <_vfiprintf_r+0x20>
 8019522:	89ab      	ldrh	r3, [r5, #12]
 8019524:	0598      	lsls	r0, r3, #22
 8019526:	d4ed      	bmi.n	8019504 <_vfiprintf_r+0x4c>
 8019528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801952a:	f7ff faa5 	bl	8018a78 <__retarget_lock_release_recursive>
 801952e:	e7e9      	b.n	8019504 <_vfiprintf_r+0x4c>
 8019530:	2300      	movs	r3, #0
 8019532:	9309      	str	r3, [sp, #36]	; 0x24
 8019534:	2320      	movs	r3, #32
 8019536:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801953a:	f8cd 800c 	str.w	r8, [sp, #12]
 801953e:	2330      	movs	r3, #48	; 0x30
 8019540:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019704 <_vfiprintf_r+0x24c>
 8019544:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019548:	f04f 0901 	mov.w	r9, #1
 801954c:	4623      	mov	r3, r4
 801954e:	469a      	mov	sl, r3
 8019550:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019554:	b10a      	cbz	r2, 801955a <_vfiprintf_r+0xa2>
 8019556:	2a25      	cmp	r2, #37	; 0x25
 8019558:	d1f9      	bne.n	801954e <_vfiprintf_r+0x96>
 801955a:	ebba 0b04 	subs.w	fp, sl, r4
 801955e:	d00b      	beq.n	8019578 <_vfiprintf_r+0xc0>
 8019560:	465b      	mov	r3, fp
 8019562:	4622      	mov	r2, r4
 8019564:	4629      	mov	r1, r5
 8019566:	4630      	mov	r0, r6
 8019568:	f7ff ff93 	bl	8019492 <__sfputs_r>
 801956c:	3001      	adds	r0, #1
 801956e:	f000 80aa 	beq.w	80196c6 <_vfiprintf_r+0x20e>
 8019572:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019574:	445a      	add	r2, fp
 8019576:	9209      	str	r2, [sp, #36]	; 0x24
 8019578:	f89a 3000 	ldrb.w	r3, [sl]
 801957c:	2b00      	cmp	r3, #0
 801957e:	f000 80a2 	beq.w	80196c6 <_vfiprintf_r+0x20e>
 8019582:	2300      	movs	r3, #0
 8019584:	f04f 32ff 	mov.w	r2, #4294967295
 8019588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801958c:	f10a 0a01 	add.w	sl, sl, #1
 8019590:	9304      	str	r3, [sp, #16]
 8019592:	9307      	str	r3, [sp, #28]
 8019594:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019598:	931a      	str	r3, [sp, #104]	; 0x68
 801959a:	4654      	mov	r4, sl
 801959c:	2205      	movs	r2, #5
 801959e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195a2:	4858      	ldr	r0, [pc, #352]	; (8019704 <_vfiprintf_r+0x24c>)
 80195a4:	f7e6 fe1c 	bl	80001e0 <memchr>
 80195a8:	9a04      	ldr	r2, [sp, #16]
 80195aa:	b9d8      	cbnz	r0, 80195e4 <_vfiprintf_r+0x12c>
 80195ac:	06d1      	lsls	r1, r2, #27
 80195ae:	bf44      	itt	mi
 80195b0:	2320      	movmi	r3, #32
 80195b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195b6:	0713      	lsls	r3, r2, #28
 80195b8:	bf44      	itt	mi
 80195ba:	232b      	movmi	r3, #43	; 0x2b
 80195bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195c0:	f89a 3000 	ldrb.w	r3, [sl]
 80195c4:	2b2a      	cmp	r3, #42	; 0x2a
 80195c6:	d015      	beq.n	80195f4 <_vfiprintf_r+0x13c>
 80195c8:	9a07      	ldr	r2, [sp, #28]
 80195ca:	4654      	mov	r4, sl
 80195cc:	2000      	movs	r0, #0
 80195ce:	f04f 0c0a 	mov.w	ip, #10
 80195d2:	4621      	mov	r1, r4
 80195d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195d8:	3b30      	subs	r3, #48	; 0x30
 80195da:	2b09      	cmp	r3, #9
 80195dc:	d94e      	bls.n	801967c <_vfiprintf_r+0x1c4>
 80195de:	b1b0      	cbz	r0, 801960e <_vfiprintf_r+0x156>
 80195e0:	9207      	str	r2, [sp, #28]
 80195e2:	e014      	b.n	801960e <_vfiprintf_r+0x156>
 80195e4:	eba0 0308 	sub.w	r3, r0, r8
 80195e8:	fa09 f303 	lsl.w	r3, r9, r3
 80195ec:	4313      	orrs	r3, r2
 80195ee:	9304      	str	r3, [sp, #16]
 80195f0:	46a2      	mov	sl, r4
 80195f2:	e7d2      	b.n	801959a <_vfiprintf_r+0xe2>
 80195f4:	9b03      	ldr	r3, [sp, #12]
 80195f6:	1d19      	adds	r1, r3, #4
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	9103      	str	r1, [sp, #12]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	bfbb      	ittet	lt
 8019600:	425b      	neglt	r3, r3
 8019602:	f042 0202 	orrlt.w	r2, r2, #2
 8019606:	9307      	strge	r3, [sp, #28]
 8019608:	9307      	strlt	r3, [sp, #28]
 801960a:	bfb8      	it	lt
 801960c:	9204      	strlt	r2, [sp, #16]
 801960e:	7823      	ldrb	r3, [r4, #0]
 8019610:	2b2e      	cmp	r3, #46	; 0x2e
 8019612:	d10c      	bne.n	801962e <_vfiprintf_r+0x176>
 8019614:	7863      	ldrb	r3, [r4, #1]
 8019616:	2b2a      	cmp	r3, #42	; 0x2a
 8019618:	d135      	bne.n	8019686 <_vfiprintf_r+0x1ce>
 801961a:	9b03      	ldr	r3, [sp, #12]
 801961c:	1d1a      	adds	r2, r3, #4
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	9203      	str	r2, [sp, #12]
 8019622:	2b00      	cmp	r3, #0
 8019624:	bfb8      	it	lt
 8019626:	f04f 33ff 	movlt.w	r3, #4294967295
 801962a:	3402      	adds	r4, #2
 801962c:	9305      	str	r3, [sp, #20]
 801962e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019714 <_vfiprintf_r+0x25c>
 8019632:	7821      	ldrb	r1, [r4, #0]
 8019634:	2203      	movs	r2, #3
 8019636:	4650      	mov	r0, sl
 8019638:	f7e6 fdd2 	bl	80001e0 <memchr>
 801963c:	b140      	cbz	r0, 8019650 <_vfiprintf_r+0x198>
 801963e:	2340      	movs	r3, #64	; 0x40
 8019640:	eba0 000a 	sub.w	r0, r0, sl
 8019644:	fa03 f000 	lsl.w	r0, r3, r0
 8019648:	9b04      	ldr	r3, [sp, #16]
 801964a:	4303      	orrs	r3, r0
 801964c:	3401      	adds	r4, #1
 801964e:	9304      	str	r3, [sp, #16]
 8019650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019654:	482c      	ldr	r0, [pc, #176]	; (8019708 <_vfiprintf_r+0x250>)
 8019656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801965a:	2206      	movs	r2, #6
 801965c:	f7e6 fdc0 	bl	80001e0 <memchr>
 8019660:	2800      	cmp	r0, #0
 8019662:	d03f      	beq.n	80196e4 <_vfiprintf_r+0x22c>
 8019664:	4b29      	ldr	r3, [pc, #164]	; (801970c <_vfiprintf_r+0x254>)
 8019666:	bb1b      	cbnz	r3, 80196b0 <_vfiprintf_r+0x1f8>
 8019668:	9b03      	ldr	r3, [sp, #12]
 801966a:	3307      	adds	r3, #7
 801966c:	f023 0307 	bic.w	r3, r3, #7
 8019670:	3308      	adds	r3, #8
 8019672:	9303      	str	r3, [sp, #12]
 8019674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019676:	443b      	add	r3, r7
 8019678:	9309      	str	r3, [sp, #36]	; 0x24
 801967a:	e767      	b.n	801954c <_vfiprintf_r+0x94>
 801967c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019680:	460c      	mov	r4, r1
 8019682:	2001      	movs	r0, #1
 8019684:	e7a5      	b.n	80195d2 <_vfiprintf_r+0x11a>
 8019686:	2300      	movs	r3, #0
 8019688:	3401      	adds	r4, #1
 801968a:	9305      	str	r3, [sp, #20]
 801968c:	4619      	mov	r1, r3
 801968e:	f04f 0c0a 	mov.w	ip, #10
 8019692:	4620      	mov	r0, r4
 8019694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019698:	3a30      	subs	r2, #48	; 0x30
 801969a:	2a09      	cmp	r2, #9
 801969c:	d903      	bls.n	80196a6 <_vfiprintf_r+0x1ee>
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d0c5      	beq.n	801962e <_vfiprintf_r+0x176>
 80196a2:	9105      	str	r1, [sp, #20]
 80196a4:	e7c3      	b.n	801962e <_vfiprintf_r+0x176>
 80196a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80196aa:	4604      	mov	r4, r0
 80196ac:	2301      	movs	r3, #1
 80196ae:	e7f0      	b.n	8019692 <_vfiprintf_r+0x1da>
 80196b0:	ab03      	add	r3, sp, #12
 80196b2:	9300      	str	r3, [sp, #0]
 80196b4:	462a      	mov	r2, r5
 80196b6:	4b16      	ldr	r3, [pc, #88]	; (8019710 <_vfiprintf_r+0x258>)
 80196b8:	a904      	add	r1, sp, #16
 80196ba:	4630      	mov	r0, r6
 80196bc:	f7fd fdfe 	bl	80172bc <_printf_float>
 80196c0:	4607      	mov	r7, r0
 80196c2:	1c78      	adds	r0, r7, #1
 80196c4:	d1d6      	bne.n	8019674 <_vfiprintf_r+0x1bc>
 80196c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80196c8:	07d9      	lsls	r1, r3, #31
 80196ca:	d405      	bmi.n	80196d8 <_vfiprintf_r+0x220>
 80196cc:	89ab      	ldrh	r3, [r5, #12]
 80196ce:	059a      	lsls	r2, r3, #22
 80196d0:	d402      	bmi.n	80196d8 <_vfiprintf_r+0x220>
 80196d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80196d4:	f7ff f9d0 	bl	8018a78 <__retarget_lock_release_recursive>
 80196d8:	89ab      	ldrh	r3, [r5, #12]
 80196da:	065b      	lsls	r3, r3, #25
 80196dc:	f53f af12 	bmi.w	8019504 <_vfiprintf_r+0x4c>
 80196e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196e2:	e711      	b.n	8019508 <_vfiprintf_r+0x50>
 80196e4:	ab03      	add	r3, sp, #12
 80196e6:	9300      	str	r3, [sp, #0]
 80196e8:	462a      	mov	r2, r5
 80196ea:	4b09      	ldr	r3, [pc, #36]	; (8019710 <_vfiprintf_r+0x258>)
 80196ec:	a904      	add	r1, sp, #16
 80196ee:	4630      	mov	r0, r6
 80196f0:	f7fe f888 	bl	8017804 <_printf_i>
 80196f4:	e7e4      	b.n	80196c0 <_vfiprintf_r+0x208>
 80196f6:	bf00      	nop
 80196f8:	0801a534 	.word	0x0801a534
 80196fc:	0801a554 	.word	0x0801a554
 8019700:	0801a514 	.word	0x0801a514
 8019704:	0801a6d4 	.word	0x0801a6d4
 8019708:	0801a6de 	.word	0x0801a6de
 801970c:	080172bd 	.word	0x080172bd
 8019710:	08019493 	.word	0x08019493
 8019714:	0801a6da 	.word	0x0801a6da

08019718 <__sread>:
 8019718:	b510      	push	{r4, lr}
 801971a:	460c      	mov	r4, r1
 801971c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019720:	f000 fada 	bl	8019cd8 <_read_r>
 8019724:	2800      	cmp	r0, #0
 8019726:	bfab      	itete	ge
 8019728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801972a:	89a3      	ldrhlt	r3, [r4, #12]
 801972c:	181b      	addge	r3, r3, r0
 801972e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019732:	bfac      	ite	ge
 8019734:	6563      	strge	r3, [r4, #84]	; 0x54
 8019736:	81a3      	strhlt	r3, [r4, #12]
 8019738:	bd10      	pop	{r4, pc}

0801973a <__swrite>:
 801973a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801973e:	461f      	mov	r7, r3
 8019740:	898b      	ldrh	r3, [r1, #12]
 8019742:	05db      	lsls	r3, r3, #23
 8019744:	4605      	mov	r5, r0
 8019746:	460c      	mov	r4, r1
 8019748:	4616      	mov	r6, r2
 801974a:	d505      	bpl.n	8019758 <__swrite+0x1e>
 801974c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019750:	2302      	movs	r3, #2
 8019752:	2200      	movs	r2, #0
 8019754:	f000 f9f8 	bl	8019b48 <_lseek_r>
 8019758:	89a3      	ldrh	r3, [r4, #12]
 801975a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801975e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019762:	81a3      	strh	r3, [r4, #12]
 8019764:	4632      	mov	r2, r6
 8019766:	463b      	mov	r3, r7
 8019768:	4628      	mov	r0, r5
 801976a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801976e:	f000 b869 	b.w	8019844 <_write_r>

08019772 <__sseek>:
 8019772:	b510      	push	{r4, lr}
 8019774:	460c      	mov	r4, r1
 8019776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801977a:	f000 f9e5 	bl	8019b48 <_lseek_r>
 801977e:	1c43      	adds	r3, r0, #1
 8019780:	89a3      	ldrh	r3, [r4, #12]
 8019782:	bf15      	itete	ne
 8019784:	6560      	strne	r0, [r4, #84]	; 0x54
 8019786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801978a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801978e:	81a3      	strheq	r3, [r4, #12]
 8019790:	bf18      	it	ne
 8019792:	81a3      	strhne	r3, [r4, #12]
 8019794:	bd10      	pop	{r4, pc}

08019796 <__sclose>:
 8019796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801979a:	f000 b8f1 	b.w	8019980 <_close_r>
	...

080197a0 <__swbuf_r>:
 80197a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197a2:	460e      	mov	r6, r1
 80197a4:	4614      	mov	r4, r2
 80197a6:	4605      	mov	r5, r0
 80197a8:	b118      	cbz	r0, 80197b2 <__swbuf_r+0x12>
 80197aa:	6983      	ldr	r3, [r0, #24]
 80197ac:	b90b      	cbnz	r3, 80197b2 <__swbuf_r+0x12>
 80197ae:	f7ff f8bf 	bl	8018930 <__sinit>
 80197b2:	4b21      	ldr	r3, [pc, #132]	; (8019838 <__swbuf_r+0x98>)
 80197b4:	429c      	cmp	r4, r3
 80197b6:	d12b      	bne.n	8019810 <__swbuf_r+0x70>
 80197b8:	686c      	ldr	r4, [r5, #4]
 80197ba:	69a3      	ldr	r3, [r4, #24]
 80197bc:	60a3      	str	r3, [r4, #8]
 80197be:	89a3      	ldrh	r3, [r4, #12]
 80197c0:	071a      	lsls	r2, r3, #28
 80197c2:	d52f      	bpl.n	8019824 <__swbuf_r+0x84>
 80197c4:	6923      	ldr	r3, [r4, #16]
 80197c6:	b36b      	cbz	r3, 8019824 <__swbuf_r+0x84>
 80197c8:	6923      	ldr	r3, [r4, #16]
 80197ca:	6820      	ldr	r0, [r4, #0]
 80197cc:	1ac0      	subs	r0, r0, r3
 80197ce:	6963      	ldr	r3, [r4, #20]
 80197d0:	b2f6      	uxtb	r6, r6
 80197d2:	4283      	cmp	r3, r0
 80197d4:	4637      	mov	r7, r6
 80197d6:	dc04      	bgt.n	80197e2 <__swbuf_r+0x42>
 80197d8:	4621      	mov	r1, r4
 80197da:	4628      	mov	r0, r5
 80197dc:	f000 f966 	bl	8019aac <_fflush_r>
 80197e0:	bb30      	cbnz	r0, 8019830 <__swbuf_r+0x90>
 80197e2:	68a3      	ldr	r3, [r4, #8]
 80197e4:	3b01      	subs	r3, #1
 80197e6:	60a3      	str	r3, [r4, #8]
 80197e8:	6823      	ldr	r3, [r4, #0]
 80197ea:	1c5a      	adds	r2, r3, #1
 80197ec:	6022      	str	r2, [r4, #0]
 80197ee:	701e      	strb	r6, [r3, #0]
 80197f0:	6963      	ldr	r3, [r4, #20]
 80197f2:	3001      	adds	r0, #1
 80197f4:	4283      	cmp	r3, r0
 80197f6:	d004      	beq.n	8019802 <__swbuf_r+0x62>
 80197f8:	89a3      	ldrh	r3, [r4, #12]
 80197fa:	07db      	lsls	r3, r3, #31
 80197fc:	d506      	bpl.n	801980c <__swbuf_r+0x6c>
 80197fe:	2e0a      	cmp	r6, #10
 8019800:	d104      	bne.n	801980c <__swbuf_r+0x6c>
 8019802:	4621      	mov	r1, r4
 8019804:	4628      	mov	r0, r5
 8019806:	f000 f951 	bl	8019aac <_fflush_r>
 801980a:	b988      	cbnz	r0, 8019830 <__swbuf_r+0x90>
 801980c:	4638      	mov	r0, r7
 801980e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019810:	4b0a      	ldr	r3, [pc, #40]	; (801983c <__swbuf_r+0x9c>)
 8019812:	429c      	cmp	r4, r3
 8019814:	d101      	bne.n	801981a <__swbuf_r+0x7a>
 8019816:	68ac      	ldr	r4, [r5, #8]
 8019818:	e7cf      	b.n	80197ba <__swbuf_r+0x1a>
 801981a:	4b09      	ldr	r3, [pc, #36]	; (8019840 <__swbuf_r+0xa0>)
 801981c:	429c      	cmp	r4, r3
 801981e:	bf08      	it	eq
 8019820:	68ec      	ldreq	r4, [r5, #12]
 8019822:	e7ca      	b.n	80197ba <__swbuf_r+0x1a>
 8019824:	4621      	mov	r1, r4
 8019826:	4628      	mov	r0, r5
 8019828:	f000 f81e 	bl	8019868 <__swsetup_r>
 801982c:	2800      	cmp	r0, #0
 801982e:	d0cb      	beq.n	80197c8 <__swbuf_r+0x28>
 8019830:	f04f 37ff 	mov.w	r7, #4294967295
 8019834:	e7ea      	b.n	801980c <__swbuf_r+0x6c>
 8019836:	bf00      	nop
 8019838:	0801a534 	.word	0x0801a534
 801983c:	0801a554 	.word	0x0801a554
 8019840:	0801a514 	.word	0x0801a514

08019844 <_write_r>:
 8019844:	b538      	push	{r3, r4, r5, lr}
 8019846:	4d07      	ldr	r5, [pc, #28]	; (8019864 <_write_r+0x20>)
 8019848:	4604      	mov	r4, r0
 801984a:	4608      	mov	r0, r1
 801984c:	4611      	mov	r1, r2
 801984e:	2200      	movs	r2, #0
 8019850:	602a      	str	r2, [r5, #0]
 8019852:	461a      	mov	r2, r3
 8019854:	f7e8 fd93 	bl	800237e <_write>
 8019858:	1c43      	adds	r3, r0, #1
 801985a:	d102      	bne.n	8019862 <_write_r+0x1e>
 801985c:	682b      	ldr	r3, [r5, #0]
 801985e:	b103      	cbz	r3, 8019862 <_write_r+0x1e>
 8019860:	6023      	str	r3, [r4, #0]
 8019862:	bd38      	pop	{r3, r4, r5, pc}
 8019864:	200019b8 	.word	0x200019b8

08019868 <__swsetup_r>:
 8019868:	4b32      	ldr	r3, [pc, #200]	; (8019934 <__swsetup_r+0xcc>)
 801986a:	b570      	push	{r4, r5, r6, lr}
 801986c:	681d      	ldr	r5, [r3, #0]
 801986e:	4606      	mov	r6, r0
 8019870:	460c      	mov	r4, r1
 8019872:	b125      	cbz	r5, 801987e <__swsetup_r+0x16>
 8019874:	69ab      	ldr	r3, [r5, #24]
 8019876:	b913      	cbnz	r3, 801987e <__swsetup_r+0x16>
 8019878:	4628      	mov	r0, r5
 801987a:	f7ff f859 	bl	8018930 <__sinit>
 801987e:	4b2e      	ldr	r3, [pc, #184]	; (8019938 <__swsetup_r+0xd0>)
 8019880:	429c      	cmp	r4, r3
 8019882:	d10f      	bne.n	80198a4 <__swsetup_r+0x3c>
 8019884:	686c      	ldr	r4, [r5, #4]
 8019886:	89a3      	ldrh	r3, [r4, #12]
 8019888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801988c:	0719      	lsls	r1, r3, #28
 801988e:	d42c      	bmi.n	80198ea <__swsetup_r+0x82>
 8019890:	06dd      	lsls	r5, r3, #27
 8019892:	d411      	bmi.n	80198b8 <__swsetup_r+0x50>
 8019894:	2309      	movs	r3, #9
 8019896:	6033      	str	r3, [r6, #0]
 8019898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801989c:	81a3      	strh	r3, [r4, #12]
 801989e:	f04f 30ff 	mov.w	r0, #4294967295
 80198a2:	e03e      	b.n	8019922 <__swsetup_r+0xba>
 80198a4:	4b25      	ldr	r3, [pc, #148]	; (801993c <__swsetup_r+0xd4>)
 80198a6:	429c      	cmp	r4, r3
 80198a8:	d101      	bne.n	80198ae <__swsetup_r+0x46>
 80198aa:	68ac      	ldr	r4, [r5, #8]
 80198ac:	e7eb      	b.n	8019886 <__swsetup_r+0x1e>
 80198ae:	4b24      	ldr	r3, [pc, #144]	; (8019940 <__swsetup_r+0xd8>)
 80198b0:	429c      	cmp	r4, r3
 80198b2:	bf08      	it	eq
 80198b4:	68ec      	ldreq	r4, [r5, #12]
 80198b6:	e7e6      	b.n	8019886 <__swsetup_r+0x1e>
 80198b8:	0758      	lsls	r0, r3, #29
 80198ba:	d512      	bpl.n	80198e2 <__swsetup_r+0x7a>
 80198bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80198be:	b141      	cbz	r1, 80198d2 <__swsetup_r+0x6a>
 80198c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80198c4:	4299      	cmp	r1, r3
 80198c6:	d002      	beq.n	80198ce <__swsetup_r+0x66>
 80198c8:	4630      	mov	r0, r6
 80198ca:	f7fd fbad 	bl	8017028 <_free_r>
 80198ce:	2300      	movs	r3, #0
 80198d0:	6363      	str	r3, [r4, #52]	; 0x34
 80198d2:	89a3      	ldrh	r3, [r4, #12]
 80198d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80198d8:	81a3      	strh	r3, [r4, #12]
 80198da:	2300      	movs	r3, #0
 80198dc:	6063      	str	r3, [r4, #4]
 80198de:	6923      	ldr	r3, [r4, #16]
 80198e0:	6023      	str	r3, [r4, #0]
 80198e2:	89a3      	ldrh	r3, [r4, #12]
 80198e4:	f043 0308 	orr.w	r3, r3, #8
 80198e8:	81a3      	strh	r3, [r4, #12]
 80198ea:	6923      	ldr	r3, [r4, #16]
 80198ec:	b94b      	cbnz	r3, 8019902 <__swsetup_r+0x9a>
 80198ee:	89a3      	ldrh	r3, [r4, #12]
 80198f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80198f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80198f8:	d003      	beq.n	8019902 <__swsetup_r+0x9a>
 80198fa:	4621      	mov	r1, r4
 80198fc:	4630      	mov	r0, r6
 80198fe:	f000 f959 	bl	8019bb4 <__smakebuf_r>
 8019902:	89a0      	ldrh	r0, [r4, #12]
 8019904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019908:	f010 0301 	ands.w	r3, r0, #1
 801990c:	d00a      	beq.n	8019924 <__swsetup_r+0xbc>
 801990e:	2300      	movs	r3, #0
 8019910:	60a3      	str	r3, [r4, #8]
 8019912:	6963      	ldr	r3, [r4, #20]
 8019914:	425b      	negs	r3, r3
 8019916:	61a3      	str	r3, [r4, #24]
 8019918:	6923      	ldr	r3, [r4, #16]
 801991a:	b943      	cbnz	r3, 801992e <__swsetup_r+0xc6>
 801991c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019920:	d1ba      	bne.n	8019898 <__swsetup_r+0x30>
 8019922:	bd70      	pop	{r4, r5, r6, pc}
 8019924:	0781      	lsls	r1, r0, #30
 8019926:	bf58      	it	pl
 8019928:	6963      	ldrpl	r3, [r4, #20]
 801992a:	60a3      	str	r3, [r4, #8]
 801992c:	e7f4      	b.n	8019918 <__swsetup_r+0xb0>
 801992e:	2000      	movs	r0, #0
 8019930:	e7f7      	b.n	8019922 <__swsetup_r+0xba>
 8019932:	bf00      	nop
 8019934:	200000f0 	.word	0x200000f0
 8019938:	0801a534 	.word	0x0801a534
 801993c:	0801a554 	.word	0x0801a554
 8019940:	0801a514 	.word	0x0801a514

08019944 <__assert_func>:
 8019944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019946:	4614      	mov	r4, r2
 8019948:	461a      	mov	r2, r3
 801994a:	4b09      	ldr	r3, [pc, #36]	; (8019970 <__assert_func+0x2c>)
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	4605      	mov	r5, r0
 8019950:	68d8      	ldr	r0, [r3, #12]
 8019952:	b14c      	cbz	r4, 8019968 <__assert_func+0x24>
 8019954:	4b07      	ldr	r3, [pc, #28]	; (8019974 <__assert_func+0x30>)
 8019956:	9100      	str	r1, [sp, #0]
 8019958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801995c:	4906      	ldr	r1, [pc, #24]	; (8019978 <__assert_func+0x34>)
 801995e:	462b      	mov	r3, r5
 8019960:	f000 f8e0 	bl	8019b24 <fiprintf>
 8019964:	f7fd fb10 	bl	8016f88 <abort>
 8019968:	4b04      	ldr	r3, [pc, #16]	; (801997c <__assert_func+0x38>)
 801996a:	461c      	mov	r4, r3
 801996c:	e7f3      	b.n	8019956 <__assert_func+0x12>
 801996e:	bf00      	nop
 8019970:	200000f0 	.word	0x200000f0
 8019974:	0801a6e5 	.word	0x0801a6e5
 8019978:	0801a6f2 	.word	0x0801a6f2
 801997c:	0801a720 	.word	0x0801a720

08019980 <_close_r>:
 8019980:	b538      	push	{r3, r4, r5, lr}
 8019982:	4d06      	ldr	r5, [pc, #24]	; (801999c <_close_r+0x1c>)
 8019984:	2300      	movs	r3, #0
 8019986:	4604      	mov	r4, r0
 8019988:	4608      	mov	r0, r1
 801998a:	602b      	str	r3, [r5, #0]
 801998c:	f7e8 fd13 	bl	80023b6 <_close>
 8019990:	1c43      	adds	r3, r0, #1
 8019992:	d102      	bne.n	801999a <_close_r+0x1a>
 8019994:	682b      	ldr	r3, [r5, #0]
 8019996:	b103      	cbz	r3, 801999a <_close_r+0x1a>
 8019998:	6023      	str	r3, [r4, #0]
 801999a:	bd38      	pop	{r3, r4, r5, pc}
 801999c:	200019b8 	.word	0x200019b8

080199a0 <__sflush_r>:
 80199a0:	898a      	ldrh	r2, [r1, #12]
 80199a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199a6:	4605      	mov	r5, r0
 80199a8:	0710      	lsls	r0, r2, #28
 80199aa:	460c      	mov	r4, r1
 80199ac:	d458      	bmi.n	8019a60 <__sflush_r+0xc0>
 80199ae:	684b      	ldr	r3, [r1, #4]
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	dc05      	bgt.n	80199c0 <__sflush_r+0x20>
 80199b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	dc02      	bgt.n	80199c0 <__sflush_r+0x20>
 80199ba:	2000      	movs	r0, #0
 80199bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199c2:	2e00      	cmp	r6, #0
 80199c4:	d0f9      	beq.n	80199ba <__sflush_r+0x1a>
 80199c6:	2300      	movs	r3, #0
 80199c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80199cc:	682f      	ldr	r7, [r5, #0]
 80199ce:	602b      	str	r3, [r5, #0]
 80199d0:	d032      	beq.n	8019a38 <__sflush_r+0x98>
 80199d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80199d4:	89a3      	ldrh	r3, [r4, #12]
 80199d6:	075a      	lsls	r2, r3, #29
 80199d8:	d505      	bpl.n	80199e6 <__sflush_r+0x46>
 80199da:	6863      	ldr	r3, [r4, #4]
 80199dc:	1ac0      	subs	r0, r0, r3
 80199de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199e0:	b10b      	cbz	r3, 80199e6 <__sflush_r+0x46>
 80199e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80199e4:	1ac0      	subs	r0, r0, r3
 80199e6:	2300      	movs	r3, #0
 80199e8:	4602      	mov	r2, r0
 80199ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199ec:	6a21      	ldr	r1, [r4, #32]
 80199ee:	4628      	mov	r0, r5
 80199f0:	47b0      	blx	r6
 80199f2:	1c43      	adds	r3, r0, #1
 80199f4:	89a3      	ldrh	r3, [r4, #12]
 80199f6:	d106      	bne.n	8019a06 <__sflush_r+0x66>
 80199f8:	6829      	ldr	r1, [r5, #0]
 80199fa:	291d      	cmp	r1, #29
 80199fc:	d82c      	bhi.n	8019a58 <__sflush_r+0xb8>
 80199fe:	4a2a      	ldr	r2, [pc, #168]	; (8019aa8 <__sflush_r+0x108>)
 8019a00:	40ca      	lsrs	r2, r1
 8019a02:	07d6      	lsls	r6, r2, #31
 8019a04:	d528      	bpl.n	8019a58 <__sflush_r+0xb8>
 8019a06:	2200      	movs	r2, #0
 8019a08:	6062      	str	r2, [r4, #4]
 8019a0a:	04d9      	lsls	r1, r3, #19
 8019a0c:	6922      	ldr	r2, [r4, #16]
 8019a0e:	6022      	str	r2, [r4, #0]
 8019a10:	d504      	bpl.n	8019a1c <__sflush_r+0x7c>
 8019a12:	1c42      	adds	r2, r0, #1
 8019a14:	d101      	bne.n	8019a1a <__sflush_r+0x7a>
 8019a16:	682b      	ldr	r3, [r5, #0]
 8019a18:	b903      	cbnz	r3, 8019a1c <__sflush_r+0x7c>
 8019a1a:	6560      	str	r0, [r4, #84]	; 0x54
 8019a1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a1e:	602f      	str	r7, [r5, #0]
 8019a20:	2900      	cmp	r1, #0
 8019a22:	d0ca      	beq.n	80199ba <__sflush_r+0x1a>
 8019a24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a28:	4299      	cmp	r1, r3
 8019a2a:	d002      	beq.n	8019a32 <__sflush_r+0x92>
 8019a2c:	4628      	mov	r0, r5
 8019a2e:	f7fd fafb 	bl	8017028 <_free_r>
 8019a32:	2000      	movs	r0, #0
 8019a34:	6360      	str	r0, [r4, #52]	; 0x34
 8019a36:	e7c1      	b.n	80199bc <__sflush_r+0x1c>
 8019a38:	6a21      	ldr	r1, [r4, #32]
 8019a3a:	2301      	movs	r3, #1
 8019a3c:	4628      	mov	r0, r5
 8019a3e:	47b0      	blx	r6
 8019a40:	1c41      	adds	r1, r0, #1
 8019a42:	d1c7      	bne.n	80199d4 <__sflush_r+0x34>
 8019a44:	682b      	ldr	r3, [r5, #0]
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	d0c4      	beq.n	80199d4 <__sflush_r+0x34>
 8019a4a:	2b1d      	cmp	r3, #29
 8019a4c:	d001      	beq.n	8019a52 <__sflush_r+0xb2>
 8019a4e:	2b16      	cmp	r3, #22
 8019a50:	d101      	bne.n	8019a56 <__sflush_r+0xb6>
 8019a52:	602f      	str	r7, [r5, #0]
 8019a54:	e7b1      	b.n	80199ba <__sflush_r+0x1a>
 8019a56:	89a3      	ldrh	r3, [r4, #12]
 8019a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a5c:	81a3      	strh	r3, [r4, #12]
 8019a5e:	e7ad      	b.n	80199bc <__sflush_r+0x1c>
 8019a60:	690f      	ldr	r7, [r1, #16]
 8019a62:	2f00      	cmp	r7, #0
 8019a64:	d0a9      	beq.n	80199ba <__sflush_r+0x1a>
 8019a66:	0793      	lsls	r3, r2, #30
 8019a68:	680e      	ldr	r6, [r1, #0]
 8019a6a:	bf08      	it	eq
 8019a6c:	694b      	ldreq	r3, [r1, #20]
 8019a6e:	600f      	str	r7, [r1, #0]
 8019a70:	bf18      	it	ne
 8019a72:	2300      	movne	r3, #0
 8019a74:	eba6 0807 	sub.w	r8, r6, r7
 8019a78:	608b      	str	r3, [r1, #8]
 8019a7a:	f1b8 0f00 	cmp.w	r8, #0
 8019a7e:	dd9c      	ble.n	80199ba <__sflush_r+0x1a>
 8019a80:	6a21      	ldr	r1, [r4, #32]
 8019a82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a84:	4643      	mov	r3, r8
 8019a86:	463a      	mov	r2, r7
 8019a88:	4628      	mov	r0, r5
 8019a8a:	47b0      	blx	r6
 8019a8c:	2800      	cmp	r0, #0
 8019a8e:	dc06      	bgt.n	8019a9e <__sflush_r+0xfe>
 8019a90:	89a3      	ldrh	r3, [r4, #12]
 8019a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a96:	81a3      	strh	r3, [r4, #12]
 8019a98:	f04f 30ff 	mov.w	r0, #4294967295
 8019a9c:	e78e      	b.n	80199bc <__sflush_r+0x1c>
 8019a9e:	4407      	add	r7, r0
 8019aa0:	eba8 0800 	sub.w	r8, r8, r0
 8019aa4:	e7e9      	b.n	8019a7a <__sflush_r+0xda>
 8019aa6:	bf00      	nop
 8019aa8:	20400001 	.word	0x20400001

08019aac <_fflush_r>:
 8019aac:	b538      	push	{r3, r4, r5, lr}
 8019aae:	690b      	ldr	r3, [r1, #16]
 8019ab0:	4605      	mov	r5, r0
 8019ab2:	460c      	mov	r4, r1
 8019ab4:	b913      	cbnz	r3, 8019abc <_fflush_r+0x10>
 8019ab6:	2500      	movs	r5, #0
 8019ab8:	4628      	mov	r0, r5
 8019aba:	bd38      	pop	{r3, r4, r5, pc}
 8019abc:	b118      	cbz	r0, 8019ac6 <_fflush_r+0x1a>
 8019abe:	6983      	ldr	r3, [r0, #24]
 8019ac0:	b90b      	cbnz	r3, 8019ac6 <_fflush_r+0x1a>
 8019ac2:	f7fe ff35 	bl	8018930 <__sinit>
 8019ac6:	4b14      	ldr	r3, [pc, #80]	; (8019b18 <_fflush_r+0x6c>)
 8019ac8:	429c      	cmp	r4, r3
 8019aca:	d11b      	bne.n	8019b04 <_fflush_r+0x58>
 8019acc:	686c      	ldr	r4, [r5, #4]
 8019ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d0ef      	beq.n	8019ab6 <_fflush_r+0xa>
 8019ad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019ad8:	07d0      	lsls	r0, r2, #31
 8019ada:	d404      	bmi.n	8019ae6 <_fflush_r+0x3a>
 8019adc:	0599      	lsls	r1, r3, #22
 8019ade:	d402      	bmi.n	8019ae6 <_fflush_r+0x3a>
 8019ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ae2:	f7fe ffc8 	bl	8018a76 <__retarget_lock_acquire_recursive>
 8019ae6:	4628      	mov	r0, r5
 8019ae8:	4621      	mov	r1, r4
 8019aea:	f7ff ff59 	bl	80199a0 <__sflush_r>
 8019aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019af0:	07da      	lsls	r2, r3, #31
 8019af2:	4605      	mov	r5, r0
 8019af4:	d4e0      	bmi.n	8019ab8 <_fflush_r+0xc>
 8019af6:	89a3      	ldrh	r3, [r4, #12]
 8019af8:	059b      	lsls	r3, r3, #22
 8019afa:	d4dd      	bmi.n	8019ab8 <_fflush_r+0xc>
 8019afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019afe:	f7fe ffbb 	bl	8018a78 <__retarget_lock_release_recursive>
 8019b02:	e7d9      	b.n	8019ab8 <_fflush_r+0xc>
 8019b04:	4b05      	ldr	r3, [pc, #20]	; (8019b1c <_fflush_r+0x70>)
 8019b06:	429c      	cmp	r4, r3
 8019b08:	d101      	bne.n	8019b0e <_fflush_r+0x62>
 8019b0a:	68ac      	ldr	r4, [r5, #8]
 8019b0c:	e7df      	b.n	8019ace <_fflush_r+0x22>
 8019b0e:	4b04      	ldr	r3, [pc, #16]	; (8019b20 <_fflush_r+0x74>)
 8019b10:	429c      	cmp	r4, r3
 8019b12:	bf08      	it	eq
 8019b14:	68ec      	ldreq	r4, [r5, #12]
 8019b16:	e7da      	b.n	8019ace <_fflush_r+0x22>
 8019b18:	0801a534 	.word	0x0801a534
 8019b1c:	0801a554 	.word	0x0801a554
 8019b20:	0801a514 	.word	0x0801a514

08019b24 <fiprintf>:
 8019b24:	b40e      	push	{r1, r2, r3}
 8019b26:	b503      	push	{r0, r1, lr}
 8019b28:	4601      	mov	r1, r0
 8019b2a:	ab03      	add	r3, sp, #12
 8019b2c:	4805      	ldr	r0, [pc, #20]	; (8019b44 <fiprintf+0x20>)
 8019b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b32:	6800      	ldr	r0, [r0, #0]
 8019b34:	9301      	str	r3, [sp, #4]
 8019b36:	f7ff fcbf 	bl	80194b8 <_vfiprintf_r>
 8019b3a:	b002      	add	sp, #8
 8019b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b40:	b003      	add	sp, #12
 8019b42:	4770      	bx	lr
 8019b44:	200000f0 	.word	0x200000f0

08019b48 <_lseek_r>:
 8019b48:	b538      	push	{r3, r4, r5, lr}
 8019b4a:	4d07      	ldr	r5, [pc, #28]	; (8019b68 <_lseek_r+0x20>)
 8019b4c:	4604      	mov	r4, r0
 8019b4e:	4608      	mov	r0, r1
 8019b50:	4611      	mov	r1, r2
 8019b52:	2200      	movs	r2, #0
 8019b54:	602a      	str	r2, [r5, #0]
 8019b56:	461a      	mov	r2, r3
 8019b58:	f7e8 fc54 	bl	8002404 <_lseek>
 8019b5c:	1c43      	adds	r3, r0, #1
 8019b5e:	d102      	bne.n	8019b66 <_lseek_r+0x1e>
 8019b60:	682b      	ldr	r3, [r5, #0]
 8019b62:	b103      	cbz	r3, 8019b66 <_lseek_r+0x1e>
 8019b64:	6023      	str	r3, [r4, #0]
 8019b66:	bd38      	pop	{r3, r4, r5, pc}
 8019b68:	200019b8 	.word	0x200019b8

08019b6c <__swhatbuf_r>:
 8019b6c:	b570      	push	{r4, r5, r6, lr}
 8019b6e:	460e      	mov	r6, r1
 8019b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b74:	2900      	cmp	r1, #0
 8019b76:	b096      	sub	sp, #88	; 0x58
 8019b78:	4614      	mov	r4, r2
 8019b7a:	461d      	mov	r5, r3
 8019b7c:	da07      	bge.n	8019b8e <__swhatbuf_r+0x22>
 8019b7e:	2300      	movs	r3, #0
 8019b80:	602b      	str	r3, [r5, #0]
 8019b82:	89b3      	ldrh	r3, [r6, #12]
 8019b84:	061a      	lsls	r2, r3, #24
 8019b86:	d410      	bmi.n	8019baa <__swhatbuf_r+0x3e>
 8019b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b8c:	e00e      	b.n	8019bac <__swhatbuf_r+0x40>
 8019b8e:	466a      	mov	r2, sp
 8019b90:	f000 f8c2 	bl	8019d18 <_fstat_r>
 8019b94:	2800      	cmp	r0, #0
 8019b96:	dbf2      	blt.n	8019b7e <__swhatbuf_r+0x12>
 8019b98:	9a01      	ldr	r2, [sp, #4]
 8019b9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019b9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019ba2:	425a      	negs	r2, r3
 8019ba4:	415a      	adcs	r2, r3
 8019ba6:	602a      	str	r2, [r5, #0]
 8019ba8:	e7ee      	b.n	8019b88 <__swhatbuf_r+0x1c>
 8019baa:	2340      	movs	r3, #64	; 0x40
 8019bac:	2000      	movs	r0, #0
 8019bae:	6023      	str	r3, [r4, #0]
 8019bb0:	b016      	add	sp, #88	; 0x58
 8019bb2:	bd70      	pop	{r4, r5, r6, pc}

08019bb4 <__smakebuf_r>:
 8019bb4:	898b      	ldrh	r3, [r1, #12]
 8019bb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019bb8:	079d      	lsls	r5, r3, #30
 8019bba:	4606      	mov	r6, r0
 8019bbc:	460c      	mov	r4, r1
 8019bbe:	d507      	bpl.n	8019bd0 <__smakebuf_r+0x1c>
 8019bc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019bc4:	6023      	str	r3, [r4, #0]
 8019bc6:	6123      	str	r3, [r4, #16]
 8019bc8:	2301      	movs	r3, #1
 8019bca:	6163      	str	r3, [r4, #20]
 8019bcc:	b002      	add	sp, #8
 8019bce:	bd70      	pop	{r4, r5, r6, pc}
 8019bd0:	ab01      	add	r3, sp, #4
 8019bd2:	466a      	mov	r2, sp
 8019bd4:	f7ff ffca 	bl	8019b6c <__swhatbuf_r>
 8019bd8:	9900      	ldr	r1, [sp, #0]
 8019bda:	4605      	mov	r5, r0
 8019bdc:	4630      	mov	r0, r6
 8019bde:	f7fd fa73 	bl	80170c8 <_malloc_r>
 8019be2:	b948      	cbnz	r0, 8019bf8 <__smakebuf_r+0x44>
 8019be4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019be8:	059a      	lsls	r2, r3, #22
 8019bea:	d4ef      	bmi.n	8019bcc <__smakebuf_r+0x18>
 8019bec:	f023 0303 	bic.w	r3, r3, #3
 8019bf0:	f043 0302 	orr.w	r3, r3, #2
 8019bf4:	81a3      	strh	r3, [r4, #12]
 8019bf6:	e7e3      	b.n	8019bc0 <__smakebuf_r+0xc>
 8019bf8:	4b0d      	ldr	r3, [pc, #52]	; (8019c30 <__smakebuf_r+0x7c>)
 8019bfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8019bfc:	89a3      	ldrh	r3, [r4, #12]
 8019bfe:	6020      	str	r0, [r4, #0]
 8019c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c04:	81a3      	strh	r3, [r4, #12]
 8019c06:	9b00      	ldr	r3, [sp, #0]
 8019c08:	6163      	str	r3, [r4, #20]
 8019c0a:	9b01      	ldr	r3, [sp, #4]
 8019c0c:	6120      	str	r0, [r4, #16]
 8019c0e:	b15b      	cbz	r3, 8019c28 <__smakebuf_r+0x74>
 8019c10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c14:	4630      	mov	r0, r6
 8019c16:	f000 f891 	bl	8019d3c <_isatty_r>
 8019c1a:	b128      	cbz	r0, 8019c28 <__smakebuf_r+0x74>
 8019c1c:	89a3      	ldrh	r3, [r4, #12]
 8019c1e:	f023 0303 	bic.w	r3, r3, #3
 8019c22:	f043 0301 	orr.w	r3, r3, #1
 8019c26:	81a3      	strh	r3, [r4, #12]
 8019c28:	89a0      	ldrh	r0, [r4, #12]
 8019c2a:	4305      	orrs	r5, r0
 8019c2c:	81a5      	strh	r5, [r4, #12]
 8019c2e:	e7cd      	b.n	8019bcc <__smakebuf_r+0x18>
 8019c30:	080188c9 	.word	0x080188c9

08019c34 <__ascii_mbtowc>:
 8019c34:	b082      	sub	sp, #8
 8019c36:	b901      	cbnz	r1, 8019c3a <__ascii_mbtowc+0x6>
 8019c38:	a901      	add	r1, sp, #4
 8019c3a:	b142      	cbz	r2, 8019c4e <__ascii_mbtowc+0x1a>
 8019c3c:	b14b      	cbz	r3, 8019c52 <__ascii_mbtowc+0x1e>
 8019c3e:	7813      	ldrb	r3, [r2, #0]
 8019c40:	600b      	str	r3, [r1, #0]
 8019c42:	7812      	ldrb	r2, [r2, #0]
 8019c44:	1e10      	subs	r0, r2, #0
 8019c46:	bf18      	it	ne
 8019c48:	2001      	movne	r0, #1
 8019c4a:	b002      	add	sp, #8
 8019c4c:	4770      	bx	lr
 8019c4e:	4610      	mov	r0, r2
 8019c50:	e7fb      	b.n	8019c4a <__ascii_mbtowc+0x16>
 8019c52:	f06f 0001 	mvn.w	r0, #1
 8019c56:	e7f8      	b.n	8019c4a <__ascii_mbtowc+0x16>

08019c58 <memmove>:
 8019c58:	4288      	cmp	r0, r1
 8019c5a:	b510      	push	{r4, lr}
 8019c5c:	eb01 0402 	add.w	r4, r1, r2
 8019c60:	d902      	bls.n	8019c68 <memmove+0x10>
 8019c62:	4284      	cmp	r4, r0
 8019c64:	4623      	mov	r3, r4
 8019c66:	d807      	bhi.n	8019c78 <memmove+0x20>
 8019c68:	1e43      	subs	r3, r0, #1
 8019c6a:	42a1      	cmp	r1, r4
 8019c6c:	d008      	beq.n	8019c80 <memmove+0x28>
 8019c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019c76:	e7f8      	b.n	8019c6a <memmove+0x12>
 8019c78:	4402      	add	r2, r0
 8019c7a:	4601      	mov	r1, r0
 8019c7c:	428a      	cmp	r2, r1
 8019c7e:	d100      	bne.n	8019c82 <memmove+0x2a>
 8019c80:	bd10      	pop	{r4, pc}
 8019c82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019c8a:	e7f7      	b.n	8019c7c <memmove+0x24>

08019c8c <_realloc_r>:
 8019c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c8e:	4607      	mov	r7, r0
 8019c90:	4614      	mov	r4, r2
 8019c92:	460e      	mov	r6, r1
 8019c94:	b921      	cbnz	r1, 8019ca0 <_realloc_r+0x14>
 8019c96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019c9a:	4611      	mov	r1, r2
 8019c9c:	f7fd ba14 	b.w	80170c8 <_malloc_r>
 8019ca0:	b922      	cbnz	r2, 8019cac <_realloc_r+0x20>
 8019ca2:	f7fd f9c1 	bl	8017028 <_free_r>
 8019ca6:	4625      	mov	r5, r4
 8019ca8:	4628      	mov	r0, r5
 8019caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cac:	f000 f856 	bl	8019d5c <_malloc_usable_size_r>
 8019cb0:	42a0      	cmp	r0, r4
 8019cb2:	d20f      	bcs.n	8019cd4 <_realloc_r+0x48>
 8019cb4:	4621      	mov	r1, r4
 8019cb6:	4638      	mov	r0, r7
 8019cb8:	f7fd fa06 	bl	80170c8 <_malloc_r>
 8019cbc:	4605      	mov	r5, r0
 8019cbe:	2800      	cmp	r0, #0
 8019cc0:	d0f2      	beq.n	8019ca8 <_realloc_r+0x1c>
 8019cc2:	4631      	mov	r1, r6
 8019cc4:	4622      	mov	r2, r4
 8019cc6:	f7fd f999 	bl	8016ffc <memcpy>
 8019cca:	4631      	mov	r1, r6
 8019ccc:	4638      	mov	r0, r7
 8019cce:	f7fd f9ab 	bl	8017028 <_free_r>
 8019cd2:	e7e9      	b.n	8019ca8 <_realloc_r+0x1c>
 8019cd4:	4635      	mov	r5, r6
 8019cd6:	e7e7      	b.n	8019ca8 <_realloc_r+0x1c>

08019cd8 <_read_r>:
 8019cd8:	b538      	push	{r3, r4, r5, lr}
 8019cda:	4d07      	ldr	r5, [pc, #28]	; (8019cf8 <_read_r+0x20>)
 8019cdc:	4604      	mov	r4, r0
 8019cde:	4608      	mov	r0, r1
 8019ce0:	4611      	mov	r1, r2
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	602a      	str	r2, [r5, #0]
 8019ce6:	461a      	mov	r2, r3
 8019ce8:	f7e8 fb2c 	bl	8002344 <_read>
 8019cec:	1c43      	adds	r3, r0, #1
 8019cee:	d102      	bne.n	8019cf6 <_read_r+0x1e>
 8019cf0:	682b      	ldr	r3, [r5, #0]
 8019cf2:	b103      	cbz	r3, 8019cf6 <_read_r+0x1e>
 8019cf4:	6023      	str	r3, [r4, #0]
 8019cf6:	bd38      	pop	{r3, r4, r5, pc}
 8019cf8:	200019b8 	.word	0x200019b8

08019cfc <__ascii_wctomb>:
 8019cfc:	b149      	cbz	r1, 8019d12 <__ascii_wctomb+0x16>
 8019cfe:	2aff      	cmp	r2, #255	; 0xff
 8019d00:	bf85      	ittet	hi
 8019d02:	238a      	movhi	r3, #138	; 0x8a
 8019d04:	6003      	strhi	r3, [r0, #0]
 8019d06:	700a      	strbls	r2, [r1, #0]
 8019d08:	f04f 30ff 	movhi.w	r0, #4294967295
 8019d0c:	bf98      	it	ls
 8019d0e:	2001      	movls	r0, #1
 8019d10:	4770      	bx	lr
 8019d12:	4608      	mov	r0, r1
 8019d14:	4770      	bx	lr
	...

08019d18 <_fstat_r>:
 8019d18:	b538      	push	{r3, r4, r5, lr}
 8019d1a:	4d07      	ldr	r5, [pc, #28]	; (8019d38 <_fstat_r+0x20>)
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	4604      	mov	r4, r0
 8019d20:	4608      	mov	r0, r1
 8019d22:	4611      	mov	r1, r2
 8019d24:	602b      	str	r3, [r5, #0]
 8019d26:	f7e8 fb52 	bl	80023ce <_fstat>
 8019d2a:	1c43      	adds	r3, r0, #1
 8019d2c:	d102      	bne.n	8019d34 <_fstat_r+0x1c>
 8019d2e:	682b      	ldr	r3, [r5, #0]
 8019d30:	b103      	cbz	r3, 8019d34 <_fstat_r+0x1c>
 8019d32:	6023      	str	r3, [r4, #0]
 8019d34:	bd38      	pop	{r3, r4, r5, pc}
 8019d36:	bf00      	nop
 8019d38:	200019b8 	.word	0x200019b8

08019d3c <_isatty_r>:
 8019d3c:	b538      	push	{r3, r4, r5, lr}
 8019d3e:	4d06      	ldr	r5, [pc, #24]	; (8019d58 <_isatty_r+0x1c>)
 8019d40:	2300      	movs	r3, #0
 8019d42:	4604      	mov	r4, r0
 8019d44:	4608      	mov	r0, r1
 8019d46:	602b      	str	r3, [r5, #0]
 8019d48:	f7e8 fb51 	bl	80023ee <_isatty>
 8019d4c:	1c43      	adds	r3, r0, #1
 8019d4e:	d102      	bne.n	8019d56 <_isatty_r+0x1a>
 8019d50:	682b      	ldr	r3, [r5, #0]
 8019d52:	b103      	cbz	r3, 8019d56 <_isatty_r+0x1a>
 8019d54:	6023      	str	r3, [r4, #0]
 8019d56:	bd38      	pop	{r3, r4, r5, pc}
 8019d58:	200019b8 	.word	0x200019b8

08019d5c <_malloc_usable_size_r>:
 8019d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019d60:	1f18      	subs	r0, r3, #4
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	bfbc      	itt	lt
 8019d66:	580b      	ldrlt	r3, [r1, r0]
 8019d68:	18c0      	addlt	r0, r0, r3
 8019d6a:	4770      	bx	lr

08019d6c <_init>:
 8019d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d6e:	bf00      	nop
 8019d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d72:	bc08      	pop	{r3}
 8019d74:	469e      	mov	lr, r3
 8019d76:	4770      	bx	lr

08019d78 <_fini>:
 8019d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d7a:	bf00      	nop
 8019d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d7e:	bc08      	pop	{r3}
 8019d80:	469e      	mov	lr, r3
 8019d82:	4770      	bx	lr
