
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a03c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a9c  0801a1d0  0801a1d0  0002a1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ac6c  0801ac6c  000302c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801ac6c  0801ac6c  0002ac6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ac74  0801ac74  000302c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ac74  0801ac74  0002ac74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ac78  0801ac78  0002ac78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  0801ac7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001748  200002c0  0801af3c  000302c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  0801af3c  00031a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a462  00000000  00000000  000302f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b3f  00000000  00000000  0007a752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002b50  00000000  00000000  00080298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002908  00000000  00000000  00082de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000307b3  00000000  00000000  000856f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a887  00000000  00000000  000b5ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f35c  00000000  00000000  000e072a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001efa86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf98  00000000  00000000  001efadc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c0 	.word	0x200002c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a1b4 	.word	0x0801a1b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c4 	.word	0x200002c4
 80001cc:	0801a1b4 	.word	0x0801a1b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <_ZN14WobbleBoardAppC1Ev>:

#define STREAMING_MSG_LENGTH  107

#define DEV_ADDR  50U

WobbleBoardApp::WobbleBoardApp()
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2200      	movs	r2, #0
 8000f52:	635a      	str	r2, [r3, #52]	; 0x34
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
{
	// TODO Auto-generated constructor stub

}
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_ZN14WobbleBoardApp4InitEv>:

void WobbleBoardApp::Init()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	// Initialize Virtual COM Port
	BSP_COM_Init(COM1);
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f005 f815 	bl	8005fd8 <BSP_COM_Init>

	// Initialize Timer
	BSP_IP_TIM_Init();
 8000fae:	f001 fbe9 	bl	8002784 <MX_TIM3_Init>

	// Configure Timer to run with desired algorithm frequency
	DataStreamTimerConfig(ALGO_FREQ);
 8000fb2:	2164      	movs	r1, #100	; 0x64
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f000 fc57 	bl	8001868 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>

	InitInertialSensors();
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f85e 	bl	800107c <_ZN14WobbleBoardApp19InitInertialSensorsEv>

	// Sensor Fusion API initialization function
	MotionFX_manager_init();
 8000fc0:	f000 fffe 	bl	8001fc0 <MotionFX_manager_init>

	//Enable magnetometer calibration
	MotionFX_manager_MagCal_start(ALGO_PERIOD);
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f001 f8b6 	bl	8002136 <MotionFX_manager_MagCal_start>

	// Test if calibration data are available
	MFX_MagCal_output_t mag_cal_test;
	MotionFX_MagCal_getParams(&mag_cal_test);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f014 faa4 	bl	801551c <MotionFX_MagCal_getParams>

	// If calibration data are available load HI coefficients
	if (mag_cal_test.cal_quality == MFX_MAGCALGOOD)
 8000fd4:	7e3b      	ldrb	r3, [r7, #24]
 8000fd6:	2b03      	cmp	r3, #3
 8000fd8:	d132      	bne.n	8001040 <_ZN14WobbleBoardApp4InitEv+0xa0>
	{
		float ans_float;
		ans_float = (mag_cal_test.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8000fda:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fde:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001078 <_ZN14WobbleBoardApp4InitEv+0xd8>
 8000fe2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe6:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.x = (int32_t)ans_float;
 8000fea:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff2:	ee17 2a90 	vmov	r2, s15
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	605a      	str	r2, [r3, #4]
		ans_float = (mag_cal_test.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8000ffa:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ffe:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001078 <_ZN14WobbleBoardApp4InitEv+0xd8>
 8001002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001006:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.y = (int32_t)ans_float;
 800100a:	edd7 7a07 	vldr	s15, [r7, #28]
 800100e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001012:	ee17 2a90 	vmov	r2, s15
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	609a      	str	r2, [r3, #8]
		ans_float = (mag_cal_test.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 800101a:	edd7 7a05 	vldr	s15, [r7, #20]
 800101e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001078 <_ZN14WobbleBoardApp4InitEv+0xd8>
 8001022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001026:	edc7 7a07 	vstr	s15, [r7, #28]
		MagOffset.z = (int32_t)ans_float;
 800102a:	edd7 7a07 	vldr	s15, [r7, #28]
 800102e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001032:	ee17 2a90 	vmov	r2, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60da      	str	r2, [r3, #12]

		MagCalStatus = 1;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
	}

	DWTInit();
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 fb53 	bl	80016ec <_ZN14WobbleBoardApp7DWTInitEv>

	// Start receiving messages via DMA
	UART_StartReceiveMsg();
 8001046:	f000 fc97 	bl	8001978 <UART_StartReceiveMsg>

	SensorReadRequest = 1;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	if(Enable6XMotionFusion == 1U)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001058:	2b01      	cmp	r3, #1
 800105a:	d103      	bne.n	8001064 <_ZN14WobbleBoardApp4InitEv+0xc4>
	{
		Enable6AxisMotionFusion();
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 fbeb 	bl	8001838 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>
 8001062:	e002      	b.n	800106a <_ZN14WobbleBoardApp4InitEv+0xca>
	}
	else
	{
		Enable9AxisMotionFusion();
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fbf3 	bl	8001850 <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>
	}

	StartDataStreaming();
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fbb0 	bl	80017d0 <_ZN14WobbleBoardApp18StartDataStreamingEv>
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	43fa0000 	.word	0x43fa0000

0800107c <_ZN14WobbleBoardApp19InitInertialSensorsEv>:

void WobbleBoardApp::InitInertialSensors()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Init();
 8001084:	f000 fe22 	bl	8001ccc <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8001088:	f000 fe28 	bl	8001cdc <BSP_SENSOR_GYR_Init>
	BSP_SENSOR_MAG_Init();
 800108c:	f000 fe2e 	bl	8001cec <BSP_SENSOR_MAG_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8001090:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80010a8 <_ZN14WobbleBoardApp19InitInertialSensorsEv+0x2c>
 8001094:	f000 fe89 	bl	8001daa <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8001098:	2004      	movs	r0, #4
 800109a:	f000 fe95 	bl	8001dc8 <BSP_SENSOR_ACC_SetFullScale>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	42c80000 	.word	0x42c80000

080010ac <_ZN14WobbleBoardApp7ProcessEv>:

void WobbleBoardApp::Process()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	6018      	str	r0, [r3, #0]
//		}
//	}
//
//	HandleMSG((TMsg *)&msg_cmd);

	if (MagCalRequest == 1U)
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	bf0c      	ite	eq
 80010c6:	2301      	moveq	r3, #1
 80010c8:	2300      	movne	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d017      	beq.n	8001100 <_ZN14WobbleBoardApp7ProcessEv+0x54>
	{
		MagCalRequest = 0;
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		/* Reset magnetometer calibration value*/
		MagCalStatus = 0;
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
		MagOffset.x = 0;
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
		MagOffset.y = 0;
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
		MagOffset.z = 0;
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]

		/* Enable magnetometer calibration */
		MotionFX_manager_MagCal_start(ALGO_PERIOD);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f001 f81b 	bl	8002136 <MotionFX_manager_MagCal_start>
//	int sensorDataTimerCount = __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle);
//	snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n Sensor counter: %d \r\n",
//			sensorDataTimerCount);
//	    printf("%s", DataOut);

	if(!ShouldStartUserCalibrationMode && __HAL_TIM_GET_COUNTER(&BSP_IP_TIM_Handle) == 0)
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8001108:	f083 0301 	eor.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <_ZN14WobbleBoardApp7ProcessEv+0x74>
 8001112:	4b28      	ldr	r3, [pc, #160]	; (80011b4 <_ZN14WobbleBoardApp7ProcessEv+0x108>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <_ZN14WobbleBoardApp7ProcessEv+0x74>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <_ZN14WobbleBoardApp7ProcessEv+0x76>
 8001120:	2300      	movs	r3, #0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <_ZN14WobbleBoardApp7ProcessEv+0x84>
	{
		SensorReadRequest = 1;
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	// When the user calibration timer reaches 0 (4 seconds)
	// then stop the user calibration mode
	if(ShouldStartUserCalibrationMode && __HAL_TIM_GET_COUNTER(&htim15) == 0)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x9e>
 800113c:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <_ZN14WobbleBoardApp7ProcessEv+0x10c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <_ZN14WobbleBoardApp7ProcessEv+0x9e>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <_ZN14WobbleBoardApp7ProcessEv+0xa0>
 800114a:	2300      	movs	r3, #0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <_ZN14WobbleBoardApp7ProcessEv+0xac>
	{
		ExitUserCalibrationMode();
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	f000 fbfa 	bl	800194c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv>
	}

	if (SensorReadRequest == 1U)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b01      	cmp	r3, #1
 8001164:	bf0c      	ite	eq
 8001166:	2301      	moveq	r3, #1
 8001168:	2300      	movne	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	d01b      	beq.n	80011a8 <_ZN14WobbleBoardApp7ProcessEv+0xfc>
	{
		SensorReadRequest = 0;
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

		// Write the motion sensor data to the terminal
		AccelerometerSensorHandler();
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f000 f81d 	bl	80011bc <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>
		GyroSensorHandler();
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	f000 f847 	bl	8001218 <_ZN14WobbleBoardApp17GyroSensorHandlerEv>
		MagnetometerSensorHandler();
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	6818      	ldr	r0, [r3, #0]
 800118e:	f000 f871 	bl	8001274 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>

		// Write the sensor motion fusion data to the terminal
		MotionFXDataHandler();
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	f000 f925 	bl	80013e4 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>

		// Add the header that contains the command
		InitStreamingHeader(&msg_dat);
 800119a:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4611      	mov	r1, r2
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	f000 fafa 	bl	800179c <_ZN14WobbleBoardApp19InitStreamingHeaderEP4TMsg>
		// in FX_Data Handler and add 4 to that
		//msg_dat.Len = STREAMING_MSG_LENGTH;

		//UART_SendMsg(&msg_dat);
	}
}
 80011a8:	bf00      	nop
 80011aa:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200014a8 	.word	0x200014a8
 80011b8:	2000145c 	.word	0x2000145c

080011bc <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv>:
//		ExitUserCalibrationMode();
//	}
//}

void WobbleBoardApp::AccelerometerSensorHandler()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3310      	adds	r3, #16
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fdc7 	bl	8001d5c <BSP_SENSOR_ACC_GetAxes>

	if(MotionDataVerbosityLevel == All)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d116      	bne.n	8001206 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x4a>

	//	Serialize_s32(&Msg->Data[3], (int32_t)AccValue.x, 4);
	//	Serialize_s32(&Msg->Data[7], (int32_t)AccValue.y, 4);
	//	Serialize_s32(&Msg->Data[11], (int32_t)AccValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f103 0044 	add.w	r0, r3, #68	; 0x44
					 (int)AccValue.x, (int)AccValue.y, (int)AccValue.z);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6919      	ldr	r1, [r3, #16]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6992      	ldr	r2, [r2, #24]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nAccelerometer Axes X: %d, Y: %d, Z: %d\r\n",
 80011ea:	9201      	str	r2, [sp, #4]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	460b      	mov	r3, r1
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x54>)
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	f016 febb 	bl	8017f70 <sniprintf>
		printf("%s", DataOut);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3344      	adds	r3, #68	; 0x44
 80011fe:	4619      	mov	r1, r3
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <_ZN14WobbleBoardApp26AccelerometerSensorHandlerEv+0x58>)
 8001202:	f016 fe49 	bl	8017e98 <iprintf>
	}
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	0801a1d0 	.word	0x0801a1d0
 8001214:	0801a1fc 	.word	0x0801a1fc

08001218 <_ZN14WobbleBoardApp17GyroSensorHandlerEv>:

void WobbleBoardApp::GyroSensorHandler()
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af02      	add	r7, sp, #8
 800121e:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	331c      	adds	r3, #28
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fda6 	bl	8001d76 <BSP_SENSOR_GYR_GetAxes>

	if(MotionDataVerbosityLevel == All)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8001230:	2b00      	cmp	r3, #0
 8001232:	d116      	bne.n	8001262 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x4a>
	{
	//	Serialize_s32(&Msg->Data[15], GyrValue.x, 4);
	//	Serialize_s32(&Msg->Data[19], GyrValue.y, 4);
	//	Serialize_s32(&Msg->Data[23], GyrValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f103 0044 	add.w	r0, r3, #68	; 0x44
					 (int)GyrValue.x, (int)GyrValue.y, (int)GyrValue.z);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69d9      	ldr	r1, [r3, #28]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6a52      	ldr	r2, [r2, #36]	; 0x24
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nGyro Axes X: %d, Y: %d, Z: %d\r\n",
 8001246:	9201      	str	r2, [sp, #4]
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	460b      	mov	r3, r1
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x54>)
 800124e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001252:	f016 fe8d 	bl	8017f70 <sniprintf>
		printf("%s", DataOut);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3344      	adds	r3, #68	; 0x44
 800125a:	4619      	mov	r1, r3
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <_ZN14WobbleBoardApp17GyroSensorHandlerEv+0x58>)
 800125e:	f016 fe1b 	bl	8017e98 <iprintf>
	}
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	0801a200 	.word	0x0801a200
 8001270:	0801a1fc 	.word	0x0801a1fc

08001274 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv>:

void WobbleBoardApp::MagnetometerSensorHandler()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	; 0x38
 8001278:	af02      	add	r7, sp, #8
 800127a:	6078      	str	r0, [r7, #4]
	float ans_float;
	MFX_MagCal_input_t mag_data_in;
	MFX_MagCal_output_t mag_data_out;

	BSP_SENSOR_MAG_GetAxes(&MagValue);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3328      	adds	r3, #40	; 0x28
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fd85 	bl	8001d90 <BSP_SENSOR_MAG_GetAxes>

	if (MagCalStatus == 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d16d      	bne.n	800136a <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
	{
		mag_data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80013d4 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 800129e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a2:	edc7 7a07 	vstr	s15, [r7, #28]
		mag_data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80013d4 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ba:	edc7 7a08 	vstr	s15, [r7, #32]
		mag_data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80013d4 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x160>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		mag_data_in.time_stamp = (int)TimeStamp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
		TimeStamp += (uint32_t)ALGO_PERIOD;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	f103 020a 	add.w	r2, r3, #10
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34

		MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 80012e8:	f107 020c 	add.w	r2, r7, #12
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4611      	mov	r1, r2
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 ff10 	bl	8002118 <MotionFX_manager_MagCal_run>

		if (mag_data_out.cal_quality == MFX_MAGCALGOOD)
 80012f8:	7e3b      	ldrb	r3, [r7, #24]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d135      	bne.n	800136a <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0xf6>
		{
			MagCalStatus = 1;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]

			ans_float = (mag_data_out.hi_bias[0] * FROM_UT50_TO_MGAUSS);
 8001304:	edd7 7a03 	vldr	s15, [r7, #12]
 8001308:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 800130c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001310:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.x = (int32_t)ans_float;
 8001314:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131c:	ee17 2a90 	vmov	r2, s15
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	605a      	str	r2, [r3, #4]
			ans_float = (mag_data_out.hi_bias[1] * FROM_UT50_TO_MGAUSS);
 8001324:	edd7 7a04 	vldr	s15, [r7, #16]
 8001328:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 800132c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001330:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.y = (int32_t)ans_float;
 8001334:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001338:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133c:	ee17 2a90 	vmov	r2, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	609a      	str	r2, [r3, #8]
			ans_float = (mag_data_out.hi_bias[2] * FROM_UT50_TO_MGAUSS);
 8001344:	edd7 7a05 	vldr	s15, [r7, #20]
 8001348:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013d8 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x164>
 800134c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001350:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			MagOffset.z = (int32_t)ans_float;
 8001354:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135c:	ee17 2a90 	vmov	r2, s15
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]

			/* Disable magnetometer calibration */
			MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 8001364:	200a      	movs	r0, #10
 8001366:	f000 fef2 	bl	800214e <MotionFX_manager_MagCal_stop>
		}
	}

	MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	1ad2      	subs	r2, r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
	MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	1ad2      	subs	r2, r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
	MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	1ad2      	subs	r2, r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	631a      	str	r2, [r3, #48]	; 0x30

	if(MotionDataVerbosityLevel == All)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 800139a:	2b00      	cmp	r3, #0
 800139c:	d116      	bne.n	80013cc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x158>
	{
	//	Serialize_s32(&Msg->Data[27], MagValue.x, 4);
	//	Serialize_s32(&Msg->Data[31], MagValue.y, 4);
	//	Serialize_s32(&Msg->Data[35], MagValue.z, 4);

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f103 0044 	add.w	r0, r3, #68	; 0x44
					 (int)MagValue.x, (int)MagValue.y, (int)MagValue.z);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\nMagnetometer Axes X: %d, Y: %d, Z: %d\r\n",
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	460b      	mov	r3, r1
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x168>)
 80013b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013bc:	f016 fdd8 	bl	8017f70 <sniprintf>
		printf("%s", DataOut);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3344      	adds	r3, #68	; 0x44
 80013c4:	4619      	mov	r1, r3
 80013c6:	4806      	ldr	r0, [pc, #24]	; (80013e0 <_ZN14WobbleBoardApp25MagnetometerSensorHandlerEv+0x16c>)
 80013c8:	f016 fd66 	bl	8017e98 <iprintf>
	}
}
 80013cc:	bf00      	nop
 80013ce:	3730      	adds	r7, #48	; 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	3b03126f 	.word	0x3b03126f
 80013d8:	43fa0000 	.word	0x43fa0000
 80013dc:	0801a224 	.word	0x0801a224
 80013e0:	0801a1fc 	.word	0x0801a1fc

080013e4 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv>:

void WobbleBoardApp::MotionFXDataHandler()
{
 80013e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013e8:	b0a5      	sub	sp, #148	; 0x94
 80013ea:	af06      	add	r7, sp, #24
 80013ec:	6078      	str	r0, [r7, #4]
	uint32_t elapsed_time_us = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	677b      	str	r3, [r7, #116]	; 0x74
	MFX_input_t data_in;
	MFX_input_t *pdata_in = &data_in;
 80013f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013f6:	673b      	str	r3, [r7, #112]	; 0x70
	MFX_output_t data_out;
	MFX_output_t *pdata_out = &data_out;
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	66fb      	str	r3, [r7, #108]	; 0x6c

	/* Convert angular velocity from [mdps] to [dps] */
	data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 80016c8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001422:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80016c8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 8001426:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143a:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80016c8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 800143e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001442:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	/* Convert acceleration from [mg] to [g] */
	data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001452:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80016c8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 8001456:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146a:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80016c8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 800146e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001472:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001482:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80016c8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e4>
 8001486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	/* Convert magnetic field intensity from [mGauss] to [uT / 50] */
	data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 80016cc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e8>
 800149e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	ee07 3a90 	vmov	s15, r3
 80014ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014b2:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80016cc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e8>
 80014b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ba:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80016cc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2e8>
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

	/* Run Sensor Fusion algorithm */
	DWTStart();
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f922 	bl	8001720 <_ZN14WobbleBoardApp8DWTStartEv>
	MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 80014dc:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 80016d0 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2ec>
 80014e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80014e2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80014e4:	f000 fdc4 	bl	8002070 <MotionFX_manager_run>
	elapsed_time_us = DWTStop();
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f92f 	bl	800174c <_ZN14WobbleBoardApp7DWTStopEv>
 80014ee:	6778      	str	r0, [r7, #116]	; 0x74
//	(void)memcpy(&Msg->Data[95], (void *) & (pdata_out->heading), sizeof(float));
//	(void)memcpy(&Msg->Data[99], (void *) & (pdata_out->headingErr), sizeof(float));
//
//	Serialize_s32(&Msg->Data[103], (int32_t)elapsed_time_us, 4);

	if((MotionDataVerbosityLevel == All || MotionDataVerbosityLevel == MotionFXOnly) &&
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x122>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f893 3145 	ldrb.w	r3, [r3, #325]	; 0x145
 8001500:	2b01      	cmp	r3, #1
 8001502:	f040 80dc 	bne.w	80016be <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2da>
 8001506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80d8 	beq.w	80016be <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2da>
			(pdata_out != nullptr))
	{
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 8001514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001516:	68db      	ldr	r3, [r3, #12]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f815 	bl	8000548 <__aeabi_f2d>
 800151e:	4604      	mov	r4, r0
 8001520:	460d      	mov	r5, r1
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 8001522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001524:	691b      	ldr	r3, [r3, #16]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f80e 	bl	8000548 <__aeabi_f2d>
 800152c:	4680      	mov	r8, r0
 800152e:	4689      	mov	r9, r1
				pdata_out->quaternion[0], pdata_out->quaternion[1], pdata_out->quaternion[2]);
 8001530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001532:	695b      	ldr	r3, [r3, #20]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f807 	bl	8000548 <__aeabi_f2d>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001542:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001546:	e9cd 4500 	strd	r4, r5, [sp]
 800154a:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f0>)
 800154c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001550:	4630      	mov	r0, r6
 8001552:	f016 fd0d 	bl	8017f70 <sniprintf>
	    printf("%s", DataOut);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3344      	adds	r3, #68	; 0x44
 800155a:	4619      	mov	r1, r3
 800155c:	485e      	ldr	r0, [pc, #376]	; (80016d8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 800155e:	f016 fc9b 	bl	8017e98 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 8001568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800156a:	681b      	ldr	r3, [r3, #0]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffeb 	bl	8000548 <__aeabi_f2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 8001576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001578:	685b      	ldr	r3, [r3, #4]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffe4 	bl	8000548 <__aeabi_f2d>
 8001580:	4680      	mov	r8, r0
 8001582:	4689      	mov	r9, r1
				pdata_out->rotation[0], pdata_out->rotation[1], pdata_out->rotation[2]);
 8001584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001586:	689b      	ldr	r3, [r3, #8]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Rotation X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ffdd 	bl	8000548 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001596:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800159a:	e9cd 4500 	strd	r4, r5, [sp]
 800159e:	4a4f      	ldr	r2, [pc, #316]	; (80016dc <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f8>)
 80015a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a4:	4630      	mov	r0, r6
 80015a6:	f016 fce3 	bl	8017f70 <sniprintf>
	    printf("%s", DataOut);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3344      	adds	r3, #68	; 0x44
 80015ae:	4619      	mov	r1, r3
 80015b0:	4849      	ldr	r0, [pc, #292]	; (80016d8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 80015b2:	f016 fc71 	bl	8017e98 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 80015bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015be:	69db      	ldr	r3, [r3, #28]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffc1 	bl	8000548 <__aeabi_f2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 80015ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015cc:	6a1b      	ldr	r3, [r3, #32]
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffba 	bl	8000548 <__aeabi_f2d>
 80015d4:	4680      	mov	r8, r0
 80015d6:	4689      	mov	r9, r1
				pdata_out->gravity[0], pdata_out->gravity[1], pdata_out->gravity[2]);
 80015d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80015da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Gravity X: %.1f, Y: %.1f, Z: %.1f\r\n",
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffb3 	bl	8000548 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015ee:	e9cd 4500 	strd	r4, r5, [sp]
 80015f2:	4a3b      	ldr	r2, [pc, #236]	; (80016e0 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2fc>)
 80015f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f8:	4630      	mov	r0, r6
 80015fa:	f016 fcb9 	bl	8017f70 <sniprintf>
	    printf("%s", DataOut);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3344      	adds	r3, #68	; 0x44
 8001602:	4619      	mov	r1, r3
 8001604:	4834      	ldr	r0, [pc, #208]	; (80016d8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 8001606:	f016 fc47 	bl	8017e98 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f103 0644 	add.w	r6, r3, #68	; 0x44
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 8001610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff97 	bl	8000548 <__aeabi_f2d>
 800161a:	4604      	mov	r4, r0
 800161c:	460d      	mov	r5, r1
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 800161e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff90 	bl	8000548 <__aeabi_f2d>
 8001628:	4680      	mov	r8, r0
 800162a:	4689      	mov	r9, r1
				pdata_out->linear_acceleration[0], pdata_out->linear_acceleration[1], pdata_out->linear_acceleration[2]);
 800162c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Quaternion X: %.1f, Y: %.1f, Z: %.1f\r\n",
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff89 	bl	8000548 <__aeabi_f2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800163e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001642:	e9cd 4500 	strd	r4, r5, [sp]
 8001646:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f0>)
 8001648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164c:	4630      	mov	r0, r6
 800164e:	f016 fc8f 	bl	8017f70 <sniprintf>
	    printf("%s", DataOut);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3344      	adds	r3, #68	; 0x44
 8001656:	4619      	mov	r1, r3
 8001658:	481f      	ldr	r0, [pc, #124]	; (80016d8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 800165a:	f016 fc1d 	bl	8017e98 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f103 0444 	add.w	r4, r3, #68	; 0x44
				pdata_out->heading);
 8001664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading: %.1f\r\n",
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff6d 	bl	8000548 <__aeabi_f2d>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9cd 2300 	strd	r2, r3, [sp]
 8001676:	4a1b      	ldr	r2, [pc, #108]	; (80016e4 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x300>)
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	4620      	mov	r0, r4
 800167e:	f016 fc77 	bl	8017f70 <sniprintf>
	    printf("%s", DataOut);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	3344      	adds	r3, #68	; 0x44
 8001686:	4619      	mov	r1, r3
 8001688:	4813      	ldr	r0, [pc, #76]	; (80016d8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 800168a:	f016 fc05 	bl	8017e98 <iprintf>

		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f103 0444 	add.w	r4, r3, #68	; 0x44
				pdata_out->headingErr);
 8001694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
		snprintf(DataOut, MAX_BUFFER_SIZE, "\r\n MotionFusion Heading Error: %.1f\r\n",
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff55 	bl	8000548 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	e9cd 2300 	strd	r2, r3, [sp]
 80016a6:	4a10      	ldr	r2, [pc, #64]	; (80016e8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x304>)
 80016a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ac:	4620      	mov	r0, r4
 80016ae:	f016 fc5f 	bl	8017f70 <sniprintf>
	    printf("%s", DataOut);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3344      	adds	r3, #68	; 0x44
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <_ZN14WobbleBoardApp19MotionFXDataHandlerEv+0x2f4>)
 80016ba:	f016 fbed 	bl	8017e98 <iprintf>
	}
}
 80016be:	bf00      	nop
 80016c0:	377c      	adds	r7, #124	; 0x7c
 80016c2:	46bd      	mov	sp, r7
 80016c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016c8:	3a83126f 	.word	0x3a83126f
 80016cc:	3b03126f 	.word	0x3b03126f
 80016d0:	3c23d70a 	.word	0x3c23d70a
 80016d4:	0801a250 	.word	0x0801a250
 80016d8:	0801a1fc 	.word	0x0801a1fc
 80016dc:	0801a288 	.word	0x0801a288
 80016e0:	0801a2c0 	.word	0x0801a2c0
 80016e4:	0801a2f4 	.word	0x0801a2f4
 80016e8:	0801a314 	.word	0x0801a314

080016ec <_ZN14WobbleBoardApp7DWTInitEv>:
 * @brief  Initialize DWT register for counting clock cycles purpose
 * @param  None
 * @retval None
 */
void WobbleBoardApp::DWTInit()
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <_ZN14WobbleBoardApp7DWTInitEv+0x2c>)
 80016fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fe:	60d3      	str	r3, [r2, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <_ZN14WobbleBoardApp7DWTInitEv+0x30>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000edf0 	.word	0xe000edf0
 800171c:	e0001000 	.word	0xe0001000

08001720 <_ZN14WobbleBoardApp8DWTStartEv>:

void WobbleBoardApp::DWTStart()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	DWT->CYCCNT = 0; /* Clear count of clock cycles */
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_ZN14WobbleBoardApp8DWTStartEv+0x28>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e0001000 	.word	0xe0001000

0800174c <_ZN14WobbleBoardApp7DWTStopEv>:
 * @brief  Stop counting clock cycles and calculate elapsed time in [us]
 * @param  None
 * @retval Elapsed time in [us]
 */
uint32_t WobbleBoardApp::DWTStop()
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	volatile uint32_t cycles_count = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
	uint32_t system_core_clock_mhz = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]

	DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 8001762:	f023 0301 	bic.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]
	cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <_ZN14WobbleBoardApp7DWTStopEv+0x44>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60bb      	str	r3, [r7, #8]

	/* Calculate elapsed time in [us] */
	system_core_clock_mhz = SystemCoreClock / 1000000U;
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <_ZN14WobbleBoardApp7DWTStopEv+0x48>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a09      	ldr	r2, [pc, #36]	; (8001798 <_ZN14WobbleBoardApp7DWTStopEv+0x4c>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0c9b      	lsrs	r3, r3, #18
 800177a:	60fb      	str	r3, [r7, #12]
	return cycles_count / system_core_clock_mhz;
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e0001000 	.word	0xe0001000
 8001794:	2000000c 	.word	0x2000000c
 8001798:	431bde83 	.word	0x431bde83

0800179c <_ZN14WobbleBoardApp19InitStreamingHeaderEP4TMsg>:

void WobbleBoardApp::InitStreamingHeader(TMsg* Msg)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
	Msg->Data[0] = DataStreamingDest;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	711a      	strb	r2, [r3, #4]
	Msg->Data[1] = DEV_ADDR;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2232      	movs	r2, #50	; 0x32
 80017b6:	715a      	strb	r2, [r3, #5]
	Msg->Data[2] = CMD_Start_Data_Streaming;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2208      	movs	r2, #8
 80017bc:	719a      	strb	r2, [r3, #6]
	Msg->Len = 3;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	2203      	movs	r2, #3
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_ZN14WobbleBoardApp18StartDataStreamingEv>:

  return hasHandledMessage;
}

void WobbleBoardApp::StartDataStreaming()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	BSP_SENSOR_ACC_Enable();
 80017d8:	f000 fa90 	bl	8001cfc <BSP_SENSOR_ACC_Enable>
	BSP_SENSOR_GYR_Enable();
 80017dc:	f000 fa96 	bl	8001d0c <BSP_SENSOR_GYR_Enable>
	BSP_SENSOR_MAG_Enable();
 80017e0:	f000 fa9c 	bl	8001d1c <BSP_SENSOR_MAG_Enable>

	//HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);

	// Start the data stream timer
	HAL_TIM_Base_Start(&BSP_IP_TIM_Handle);
 80017e4:	4806      	ldr	r0, [pc, #24]	; (8001800 <_ZN14WobbleBoardApp18StartDataStreamingEv+0x30>)
 80017e6:	f008 f82d 	bl	8009844 <HAL_TIM_Base_Start>

	DataLoggerActive = 1;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	SensorsEnabled = 1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	200014a8 	.word	0x200014a8

08001804 <_ZN14WobbleBoardApp17StopDataStreamingEv>:

void WobbleBoardApp::StopDataStreaming()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	DataLoggerActive = 0;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	//HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);

	// Stop the data stream timer
	HAL_TIM_Base_Stop(&BSP_IP_TIM_Handle);
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <_ZN14WobbleBoardApp17StopDataStreamingEv+0x30>)
 8001816:	f008 f87d 	bl	8009914 <HAL_TIM_Base_Stop>

	/* Disable all sensors */
	BSP_SENSOR_ACC_Disable();
 800181a:	f000 fa87 	bl	8001d2c <BSP_SENSOR_ACC_Disable>
	BSP_SENSOR_GYR_Disable();
 800181e:	f000 fa8d 	bl	8001d3c <BSP_SENSOR_GYR_Disable>
	BSP_SENSOR_MAG_Disable();
 8001822:	f000 fa93 	bl	8001d4c <BSP_SENSOR_MAG_Disable>

	SensorsEnabled = 0;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200014a8 	.word	0x200014a8

08001838 <_ZN14WobbleBoardApp23Enable6AxisMotionFusionEv>:

void WobbleBoardApp::Enable6AxisMotionFusion()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_9X();
 8001840:	f000 fc60 	bl	8002104 <MotionFX_manager_stop_9X>
	MotionFX_manager_start_6X();
 8001844:	f000 fc40 	bl	80020c8 <MotionFX_manager_start_6X>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_ZN14WobbleBoardApp23Enable9AxisMotionFusionEv>:

void WobbleBoardApp::Enable9AxisMotionFusion()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	MotionFX_manager_stop_6X();
 8001858:	f000 fc40 	bl	80020dc <MotionFX_manager_stop_6X>
	MotionFX_manager_start_9X();
 800185c:	f000 fc48 	bl	80020f0 <MotionFX_manager_start_9X>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm>:

void WobbleBoardApp::DataStreamTimerConfig(uint32_t Freq)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 8001872:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001876:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x70>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a17      	ldr	r2, [pc, #92]	; (80018dc <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x74>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	09db      	lsrs	r3, r3, #7
 8001884:	3b01      	subs	r3, #1
 8001886:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8001888:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8001896:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a8:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 80018b4:	480a      	ldr	r0, [pc, #40]	; (80018e0 <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x78>)
 80018b6:	f007 ff6d 	bl	8009794 <HAL_TIM_Base_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	bf14      	ite	ne
 80018c0:	2301      	movne	r3, #1
 80018c2:	2300      	moveq	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <_ZN14WobbleBoardApp21DataStreamTimerConfigEm+0x66>
  {
    Error_Handler();
 80018ca:	f000 fb73 	bl	8001fb4 <Error_Handler>
  }
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	10624dd3 	.word	0x10624dd3
 80018e0:	200014a8 	.word	0x200014a8

080018e4 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>:

void WobbleBoardApp::ToggleUserCalibrationMode()
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	ShouldStartUserCalibrationMode = !ShouldStartUserCalibrationMode;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 80018f2:	f083 0301 	eor.w	r3, r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144

	if(ShouldStartUserCalibrationMode)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 3144 	ldrb.w	r3, [r3, #324]	; 0x144
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x2c>
	{
		EnterUserCalibrationMode();
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f809 	bl	8001920 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>
	}
	else
	{
		ExitUserCalibrationMode();
	}
}
 800190e:	e002      	b.n	8001916 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv+0x32>
		ExitUserCalibrationMode();
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f81b 	bl	800194c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv>:

void WobbleBoardApp::EnterUserCalibrationMode()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	StopDataStreaming();
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff6b 	bl	8001804 <_ZN14WobbleBoardApp17StopDataStreamingEv>
	// Start the interrupt of timer 15 that is specifically
	// for the user calibration mode timer
	//HAL_TIM_Base_Start_IT(&htim15);

	// Start the user calibration timer
	HAL_TIM_Base_Start(&htim15);
 800192e:	4805      	ldr	r0, [pc, #20]	; (8001944 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0x24>)
 8001930:	f007 ff88 	bl	8009844 <HAL_TIM_Base_Start>

	printf("Entered User Calibration Mode");
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <_ZN14WobbleBoardApp24EnterUserCalibrationModeEv+0x28>)
 8001936:	f016 faaf 	bl	8017e98 <iprintf>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000145c 	.word	0x2000145c
 8001948:	0801a33c 	.word	0x0801a33c

0800194c <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv>:
{

}

void WobbleBoardApp::ExitUserCalibrationMode()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	// Stop the user calibration timer interrupt mode
	//HAL_TIM_Base_Stop_IT(&htim15);

	// Stop the user calibration timer
	HAL_TIM_Base_Stop(&htim15);
 8001954:	4806      	ldr	r0, [pc, #24]	; (8001970 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv+0x24>)
 8001956:	f007 ffdd 	bl	8009914 <HAL_TIM_Base_Stop>

	// Start streaming out the motion data again
	StartDataStreaming();
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ff38 	bl	80017d0 <_ZN14WobbleBoardApp18StartDataStreamingEv>

	printf("Exited User Calibration Mode");
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <_ZN14WobbleBoardApp23ExitUserCalibrationModeEv+0x28>)
 8001962:	f016 fa99 	bl	8017e98 <iprintf>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000145c 	.word	0x2000145c
 8001974:	0801a35c 	.word	0x0801a35c

08001978 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <UART_StartReceiveMsg+0x2c>)
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <UART_StartReceiveMsg+0x30>)
 8001980:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <UART_StartReceiveMsg+0x2c>)
 8001984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001988:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <UART_StartReceiveMsg+0x2c>)
 800198e:	2200      	movs	r2, #0
 8001990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8001994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001998:	4903      	ldr	r1, [pc, #12]	; (80019a8 <UART_StartReceiveMsg+0x30>)
 800199a:	4802      	ldr	r0, [pc, #8]	; (80019a4 <UART_StartReceiveMsg+0x2c>)
 800199c:	f008 fcc2 	bl	800a324 <HAL_UART_Receive_DMA>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20001548 	.word	0x20001548
 80019a8:	200011c0 	.word	0x200011c0

080019ac <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019b0:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <MX_CRC_Init+0x3c>)
 80019b2:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <MX_CRC_Init+0x40>)
 80019b4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <MX_CRC_Init+0x3c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <MX_CRC_Init+0x3c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <MX_CRC_Init+0x3c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <MX_CRC_Init+0x3c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <MX_CRC_Init+0x3c>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_CRC_Init+0x3c>)
 80019d6:	f004 fd87 	bl	80064e8 <HAL_CRC_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80019e0:	f000 fae8 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	200013c8 	.word	0x200013c8
 80019ec:	40023000 	.word	0x40023000

080019f0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_CRC_MspInit+0x38>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d10b      	bne.n	8001a1a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_CRC_MspInit+0x3c>)
 8001a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_CRC_MspInit+0x3c>)
 8001a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a0c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_CRC_MspInit+0x3c>)
 8001a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	3714      	adds	r7, #20
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023000 	.word	0x40023000
 8001a2c:	40021000 	.word	0x40021000

08001a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_DMA_Init+0x38>)
 8001a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3a:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <MX_DMA_Init+0x38>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6493      	str	r3, [r2, #72]	; 0x48
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_DMA_Init+0x38>)
 8001a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	607b      	str	r3, [r7, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	2010      	movs	r0, #16
 8001a54:	f004 fd11 	bl	800647a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001a58:	2010      	movs	r0, #16
 8001a5a:	f004 fd2a 	bl	80064b2 <HAL_NVIC_EnableIRQ>

}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000

08001a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	4b2f      	ldr	r3, [pc, #188]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4a28      	ldr	r2, [pc, #160]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4b26      	ldr	r3, [pc, #152]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4a22      	ldr	r2, [pc, #136]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_GPIO_Init+0xd4>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2120      	movs	r1, #32
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aea:	f005 fa7d 	bl	8006fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8001aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001af4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	480f      	ldr	r0, [pc, #60]	; (8001b44 <MX_GPIO_Init+0xd8>)
 8001b06:	f004 ffd1 	bl	8006aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b0a:	2320      	movs	r3, #32
 8001b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b24:	f004 ffc2 	bl	8006aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2028      	movs	r0, #40	; 0x28
 8001b2e:	f004 fca4 	bl	800647a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b32:	2028      	movs	r0, #40	; 0x28
 8001b34:	f004 fcbd 	bl	80064b2 <HAL_NVIC_EnableIRQ>

}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000800 	.word	0x48000800

08001b48 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <MX_I2C1_Init+0x78>)
 8001b50:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001b52:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b54:	4a1b      	ldr	r2, [pc, #108]	; (8001bc4 <MX_I2C1_Init+0x7c>)
 8001b56:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b82:	480e      	ldr	r0, [pc, #56]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b84:	f005 fa60 	bl	8007048 <HAL_I2C_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b8e:	f000 fa11 	bl	8001fb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b92:	2100      	movs	r1, #0
 8001b94:	4809      	ldr	r0, [pc, #36]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001b96:	f006 f803 	bl	8007ba0 <HAL_I2CEx_ConfigAnalogFilter>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001ba0:	f000 fa08 	bl	8001fb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_I2C1_Init+0x74>)
 8001ba8:	f006 f845 	bl	8007c36 <HAL_I2CEx_ConfigDigitalFilter>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bb2:	f000 f9ff 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200013ec 	.word	0x200013ec
 8001bc0:	40005400 	.word	0x40005400
 8001bc4:	00702991 	.word	0x00702991

08001bc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b0ac      	sub	sp, #176	; 0xb0
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2288      	movs	r2, #136	; 0x88
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f015 fc39 	bl	8017460 <memset>
  if(i2cHandle->Instance==I2C1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a21      	ldr	r2, [pc, #132]	; (8001c78 <HAL_I2C_MspInit+0xb0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d13b      	bne.n	8001c70 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bf8:	2340      	movs	r3, #64	; 0x40
 8001bfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4618      	mov	r0, r3
 8001c06:	f006 feb3 	bl	8008970 <HAL_RCCEx_PeriphCLKConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c10:	f000 f9d0 	bl	8001fb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c14:	4b19      	ldr	r3, [pc, #100]	; (8001c7c <HAL_I2C_MspInit+0xb4>)
 8001c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c18:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <HAL_I2C_MspInit+0xb4>)
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_I2C_MspInit+0xb4>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c34:	2312      	movs	r3, #18
 8001c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c40:	2303      	movs	r3, #3
 8001c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c46:	2304      	movs	r3, #4
 8001c48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c50:	4619      	mov	r1, r3
 8001c52:	480b      	ldr	r0, [pc, #44]	; (8001c80 <HAL_I2C_MspInit+0xb8>)
 8001c54:	f004 ff2a 	bl	8006aac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <HAL_I2C_MspInit+0xb4>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	4a07      	ldr	r2, [pc, #28]	; (8001c7c <HAL_I2C_MspInit+0xb4>)
 8001c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c62:	6593      	str	r3, [r2, #88]	; 0x58
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_I2C_MspInit+0xb4>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001c70:	bf00      	nop
 8001c72:	37b0      	adds	r7, #176	; 0xb0
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	48000400 	.word	0x48000400

08001c84 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <HAL_I2C_MspDeInit+0x3c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d10f      	bne.n	8001cb6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_I2C_MspDeInit+0x40>)
 8001c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <HAL_I2C_MspDeInit+0x40>)
 8001c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ca0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca6:	4808      	ldr	r0, [pc, #32]	; (8001cc8 <HAL_I2C_MspDeInit+0x44>)
 8001ca8:	f005 f8aa 	bl	8006e00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001cac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <HAL_I2C_MspDeInit+0x44>)
 8001cb2:	f005 f8a5 	bl	8006e00 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000400 	.word	0x48000400

08001ccc <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f003 fd2e 	bl	8005734 <IKS01A2_MOTION_SENSOR_Init>
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f003 fd26 	bl	8005734 <IKS01A2_MOTION_SENSOR_Init>
}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}

08001cec <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Init(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001cf0:	2104      	movs	r1, #4
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f003 fd1e 	bl	8005734 <IKS01A2_MOTION_SENSOR_Init>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001d00:	2102      	movs	r1, #2
 8001d02:	2000      	movs	r0, #0
 8001d04:	f003 fe12 	bl	800592c <IKS01A2_MOTION_SENSOR_Enable>
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001d10:	2101      	movs	r1, #1
 8001d12:	2000      	movs	r0, #0
 8001d14:	f003 fe0a 	bl	800592c <IKS01A2_MOTION_SENSOR_Enable>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Enable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001d20:	2104      	movs	r1, #4
 8001d22:	2002      	movs	r0, #2
 8001d24:	f003 fe02 	bl	800592c <IKS01A2_MOTION_SENSOR_Enable>
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_ACCELERO);
 8001d30:	2102      	movs	r1, #2
 8001d32:	2000      	movs	r0, #0
 8001d34:	f003 fe3c 	bl	80059b0 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM6DSL_0, MOTION_GYRO);
 8001d40:	2101      	movs	r1, #1
 8001d42:	2000      	movs	r0, #0
 8001d44:	f003 fe34 	bl	80059b0 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  (void)IKS01A2_MOTION_SENSOR_Disable(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO);
 8001d50:	2104      	movs	r1, #4
 8001d52:	2002      	movs	r0, #2
 8001d54:	f003 fe2c 	bl	80059b0 <IKS01A2_MOTION_SENSOR_Disable>
}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Axes);
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	2102      	movs	r1, #2
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f003 fe63 	bl	8005a34 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM6DSL_0, MOTION_GYRO, Axes);
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	2101      	movs	r1, #1
 8001d82:	2000      	movs	r0, #0
 8001d84:	f003 fe56 	bl	8005a34 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_GetAxes(IKS01A2_LSM303AGR_MAG_0, MOTION_MAGNETO, Axes);
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f003 fe49 	bl	8005a34 <IKS01A2_MOTION_SENSOR_GetAxes>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetOutputDataRate(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Odr);
 8001db4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001db8:	2102      	movs	r1, #2
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f003 fe7e 	bl	8005abc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for acclerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  (void)IKS01A2_MOTION_SENSOR_SetFullScale(IKS01A2_LSM6DSL_0, MOTION_ACCELERO, Fullscale);
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f003 feb7 	bl	8005b48 <IKS01A2_MOTION_SENSOR_SetFullScale>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	226e      	movs	r2, #110	; 0x6e
 8001dee:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3301      	adds	r3, #1
 8001df4:	2277      	movs	r2, #119	; 0x77
 8001df6:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	2275      	movs	r2, #117	; 0x75
 8001dfe:	701a      	strb	r2, [r3, #0]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	226e      	movs	r2, #110	; 0x6e
 8001e18:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'w';
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	2277      	movs	r2, #119	; 0x77
 8001e20:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3302      	adds	r3, #2
 8001e26:	2275      	movs	r2, #117	; 0x75
 8001e28:	701a      	strb	r2, [r3, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	226e      	movs	r2, #110	; 0x6e
 8001e42:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3301      	adds	r3, #1
 8001e48:	2265      	movs	r2, #101	; 0x65
 8001e4a:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3302      	adds	r3, #2
 8001e50:	2275      	movs	r2, #117	; 0x75
 8001e52:	701a      	strb	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b598      	push	{r3, r4, r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e64:	f004 f9b2 	bl	80061cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e68:	f000 f82a 	bl	8001ec0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6c:	f7ff fdfe 	bl	8001a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001e70:	f7ff fdde 	bl	8001a30 <MX_DMA_Init>
  MX_CRC_Init();
 8001e74:	f7ff fd9a 	bl	80019ac <MX_CRC_Init>
  MX_RTC_Init();
 8001e78:	f000 f976 	bl	8002168 <MX_RTC_Init>
  MX_TIM15_Init();
 8001e7c:	f000 fcd0 	bl	8002820 <MX_TIM15_Init>

  /* USER CODE BEGIN 2 */
  wobbleBoardApp = new WobbleBoardApp();
 8001e80:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8001e84:	f013 fb86 	bl	8015594 <_Znwj>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	461c      	mov	r4, r3
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7ff f857 	bl	8000f40 <_ZN14WobbleBoardAppC1Ev>
 8001e92:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <main+0x5c>)
 8001e94:	601c      	str	r4, [r3, #0]
  if(wobbleBoardApp != nullptr)
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <main+0x5c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <main+0x48>
  {
	  wobbleBoardApp->Init();
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <main+0x5c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f87c 	bl	8000fa0 <_ZN14WobbleBoardApp4InitEv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(wobbleBoardApp != nullptr)
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <main+0x5c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0fb      	beq.n	8001ea8 <main+0x48>
	  {
		  wobbleBoardApp->Process();
 8001eb0:	4b02      	ldr	r3, [pc, #8]	; (8001ebc <main+0x5c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f8f9 	bl	80010ac <_ZN14WobbleBoardApp7ProcessEv>
	  if(wobbleBoardApp != nullptr)
 8001eba:	e7f5      	b.n	8001ea8 <main+0x48>
 8001ebc:	2000072c 	.word	0x2000072c

08001ec0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b096      	sub	sp, #88	; 0x58
 8001ec4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ec6:	f107 0314 	add.w	r3, r7, #20
 8001eca:	2244      	movs	r2, #68	; 0x44
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f015 fac6 	bl	8017460 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed4:	463b      	mov	r3, r7
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ee2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ee6:	f005 ff01 	bl	8007cec <HAL_PWREx_ControlVoltageScaling>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <_Z18SystemClock_Configv+0x3e>
	{
		Error_Handler();
 8001efa:	f000 f85b 	bl	8001fb4 <Error_Handler>
	}
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001efe:	230a      	movs	r3, #10
 8001f00:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f06:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f08:	2310      	movs	r3, #16
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f10:	2302      	movs	r3, #2
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f14:	2302      	movs	r3, #2
 8001f16:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001f1c:	230a      	movs	r3, #10
 8001f1e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f20:	2307      	movs	r3, #7
 8001f22:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f24:	2302      	movs	r3, #2
 8001f26:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4618      	mov	r0, r3
 8001f32:	f005 ff31 	bl	8007d98 <HAL_RCC_OscConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <_Z18SystemClock_Configv+0x8a>
	{
		Error_Handler();
 8001f46:	f000 f835 	bl	8001fb4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f4a:	230f      	movs	r3, #15
 8001f4c:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f5e:	463b      	mov	r3, r7
 8001f60:	2104      	movs	r1, #4
 8001f62:	4618      	mov	r0, r3
 8001f64:	f006 fafe 	bl	8008564 <HAL_RCC_ClockConfig>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	bf14      	ite	ne
 8001f6e:	2301      	movne	r3, #1
 8001f70:	2300      	moveq	r3, #0
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <_Z18SystemClock_Configv+0xbc>
	{
		Error_Handler();
 8001f78:	f000 f81c 	bl	8001fb4 <Error_Handler>
	}
}
 8001f7c:	bf00      	nop
 8001f7e:	3758      	adds	r7, #88	; 0x58
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */
// This gets triggered by a falling edge detection of the button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f94:	d108      	bne.n	8001fa8 <HAL_GPIO_EXTI_Callback+0x24>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		if(wobbleBoardApp != nullptr)
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d004      	beq.n	8001fa8 <HAL_GPIO_EXTI_Callback+0x24>
		{
			wobbleBoardApp->ToggleUserCalibrationMode();
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fc9e 	bl	80018e4 <_ZN14WobbleBoardApp25ToggleUserCalibrationModeEv>
			Error_Handler();
		}*/

		//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, iIsUserCalibrationLEDOn);
	}
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	2000072c 	.word	0x2000072c

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <Error_Handler+0x8>
	...

08001fc0 <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  if (STATE_SIZE < MotionFX_GetStateSize())
 8001fc4:	f012 fd2c 	bl	8014a20 <MotionFX_GetStateSize>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f5b3 6f18 	cmp.w	r3, #2432	; 0x980
 8001fce:	d901      	bls.n	8001fd4 <MotionFX_manager_init+0x14>
    Error_Handler();
 8001fd0:	f7ff fff0 	bl	8001fb4 <Error_Handler>

  MotionFX_initialize((MFXState_t *)mfxstate);
 8001fd4:	4821      	ldr	r0, [pc, #132]	; (800205c <MotionFX_manager_init+0x9c>)
 8001fd6:	f012 fd27 	bl	8014a28 <MotionFX_initialize>

  MotionFX_getKnobs(mfxstate, ipKnobs);
 8001fda:	4b21      	ldr	r3, [pc, #132]	; (8002060 <MotionFX_manager_init+0xa0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	481e      	ldr	r0, [pc, #120]	; (800205c <MotionFX_manager_init+0x9c>)
 8001fe2:	f012 fe05 	bl	8014bf0 <MotionFX_getKnobs>

  BSP_SENSOR_ACC_GetOrientation(ipKnobs->acc_orientation);
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <MotionFX_manager_init+0xa0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	331d      	adds	r3, #29
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fef8 	bl	8001de2 <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(ipKnobs->gyro_orientation);
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <MotionFX_manager_init+0xa0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	3321      	adds	r3, #33	; 0x21
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff07 	bl	8001e0c <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(ipKnobs->mag_orientation);
 8001ffe:	4b18      	ldr	r3, [pc, #96]	; (8002060 <MotionFX_manager_init+0xa0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3325      	adds	r3, #37	; 0x25
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff16 	bl	8001e36 <BSP_SENSOR_MAG_GetOrientation>

  ipKnobs->gbias_acc_th_sc = GBIAS_ACC_TH_SC;
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <MotionFX_manager_init+0xa0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a15      	ldr	r2, [pc, #84]	; (8002064 <MotionFX_manager_init+0xa4>)
 8002010:	615a      	str	r2, [r3, #20]
  ipKnobs->gbias_gyro_th_sc = GBIAS_GYRO_TH_SC;
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <MotionFX_manager_init+0xa0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a14      	ldr	r2, [pc, #80]	; (8002068 <MotionFX_manager_init+0xa8>)
 8002018:	619a      	str	r2, [r3, #24]
  ipKnobs->gbias_mag_th_sc = GBIAS_MAG_TH_SC;
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <MotionFX_manager_init+0xa0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a13      	ldr	r2, [pc, #76]	; (800206c <MotionFX_manager_init+0xac>)
 8002020:	611a      	str	r2, [r3, #16]

  ipKnobs->output_type = MFX_ENGINE_OUTPUT_ENU;
 8002022:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <MotionFX_manager_init+0xa0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->LMode = 1;
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <MotionFX_manager_init+0xa0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	731a      	strb	r2, [r3, #12]
  ipKnobs->modx = DECIMATION;
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <MotionFX_manager_init+0xa0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	771a      	strb	r2, [r3, #28]

  MotionFX_setKnobs(mfxstate, ipKnobs);
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <MotionFX_manager_init+0xa0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4619      	mov	r1, r3
 8002042:	4806      	ldr	r0, [pc, #24]	; (800205c <MotionFX_manager_init+0x9c>)
 8002044:	f012 fd8a 	bl	8014b5c <MotionFX_setKnobs>

  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 8002048:	2100      	movs	r1, #0
 800204a:	4804      	ldr	r0, [pc, #16]	; (800205c <MotionFX_manager_init+0x9c>)
 800204c:	f012 fe0c 	bl	8014c68 <MotionFX_enable_6X>
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002050:	2100      	movs	r1, #0
 8002052:	4802      	ldr	r0, [pc, #8]	; (800205c <MotionFX_manager_init+0x9c>)
 8002054:	f012 fe28 	bl	8014ca8 <MotionFX_enable_9X>
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000764 	.word	0x20000764
 8002060:	20000004 	.word	0x20000004
 8002064:	3ac88a48 	.word	0x3ac88a48
 8002068:	3b83126f 	.word	0x3b83126f
 800206c:	3b449ba6 	.word	0x3b449ba6

08002070 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_input_t *data_in, MFX_output_t *data_out, float delta_time)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <MotionFX_manager_run+0x4c>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <MotionFX_manager_run+0x50>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d10e      	bne.n	80020a8 <MotionFX_manager_run+0x38>
  {
    MotionFX_propagate(mfxstate, data_out, data_in, &delta_time);
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	68b9      	ldr	r1, [r7, #8]
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <MotionFX_manager_run+0x54>)
 8002092:	f012 fe39 	bl	8014d08 <MotionFX_propagate>
    MotionFX_update(mfxstate, data_out, data_in, &delta_time, NULL);
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	2200      	movs	r2, #0
 800209a:	9200      	str	r2, [sp, #0]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	68b9      	ldr	r1, [r7, #8]
 80020a0:	4808      	ldr	r0, [pc, #32]	; (80020c4 <MotionFX_manager_run+0x54>)
 80020a2:	f012 fe21 	bl	8014ce8 <MotionFX_update>
  }
  else
  {
    discardedCount++;
  }
}
 80020a6:	e004      	b.n	80020b2 <MotionFX_manager_run+0x42>
    discardedCount++;
 80020a8:	4b04      	ldr	r3, [pc, #16]	; (80020bc <MotionFX_manager_run+0x4c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	3301      	adds	r3, #1
 80020ae:	4a03      	ldr	r2, [pc, #12]	; (80020bc <MotionFX_manager_run+0x4c>)
 80020b0:	6013      	str	r3, [r2, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000760 	.word	0x20000760
 80020c0:	20000008 	.word	0x20000008
 80020c4:	20000764 	.word	0x20000764

080020c8 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_ENABLE);
 80020cc:	2101      	movs	r1, #1
 80020ce:	4802      	ldr	r0, [pc, #8]	; (80020d8 <MotionFX_manager_start_6X+0x10>)
 80020d0:	f012 fdca 	bl	8014c68 <MotionFX_enable_6X>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000764 	.word	0x20000764

080020dc <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  MotionFX_enable_6X(mfxstate, MFX_ENGINE_DISABLE);
 80020e0:	2100      	movs	r1, #0
 80020e2:	4802      	ldr	r0, [pc, #8]	; (80020ec <MotionFX_manager_stop_6X+0x10>)
 80020e4:	f012 fdc0 	bl	8014c68 <MotionFX_enable_6X>
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000764 	.word	0x20000764

080020f0 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_ENABLE);
 80020f4:	2101      	movs	r1, #1
 80020f6:	4802      	ldr	r0, [pc, #8]	; (8002100 <MotionFX_manager_start_9X+0x10>)
 80020f8:	f012 fdd6 	bl	8014ca8 <MotionFX_enable_9X>
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000764 	.word	0x20000764

08002104 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  MotionFX_enable_9X(mfxstate, MFX_ENGINE_DISABLE);
 8002108:	2100      	movs	r1, #0
 800210a:	4802      	ldr	r0, [pc, #8]	; (8002114 <MotionFX_manager_stop_9X+0x10>)
 800210c:	f012 fdcc 	bl	8014ca8 <MotionFX_enable_9X>
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000764 	.word	0x20000764

08002118 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_MagCal_input_t *data_in, MFX_MagCal_output_t *data_out)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  MotionFX_MagCal_run(data_in);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f012 ffd8 	bl	80150d8 <MotionFX_MagCal_run>
  MotionFX_MagCal_getParams(data_out);
 8002128:	6838      	ldr	r0, [r7, #0]
 800212a:	f013 f9f7 	bl	801551c <MotionFX_MagCal_getParams>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 1);
 800213e:	2101      	movs	r1, #1
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f012 ff33 	bl	8014fac <MotionFX_MagCal_init>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  MotionFX_MagCal_init(sampletime, 0);
 8002156:	2100      	movs	r1, #0
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f012 ff27 	bl	8014fac <MotionFX_MagCal_init>
}
 800215e:	bf00      	nop
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
 800217a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800217c:	2300      	movs	r3, #0
 800217e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002180:	4b25      	ldr	r3, [pc, #148]	; (8002218 <MX_RTC_Init+0xb0>)
 8002182:	4a26      	ldr	r2, [pc, #152]	; (800221c <MX_RTC_Init+0xb4>)
 8002184:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <MX_RTC_Init+0xb0>)
 8002188:	2200      	movs	r2, #0
 800218a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800218c:	4b22      	ldr	r3, [pc, #136]	; (8002218 <MX_RTC_Init+0xb0>)
 800218e:	227f      	movs	r2, #127	; 0x7f
 8002190:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002192:	4b21      	ldr	r3, [pc, #132]	; (8002218 <MX_RTC_Init+0xb0>)
 8002194:	22ff      	movs	r2, #255	; 0xff
 8002196:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002198:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <MX_RTC_Init+0xb0>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800219e:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <MX_RTC_Init+0xb0>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021a4:	4b1c      	ldr	r3, [pc, #112]	; (8002218 <MX_RTC_Init+0xb0>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021aa:	4b1b      	ldr	r3, [pc, #108]	; (8002218 <MX_RTC_Init+0xb0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021b0:	4819      	ldr	r0, [pc, #100]	; (8002218 <MX_RTC_Init+0xb0>)
 80021b2:	f007 f899 	bl	80092e8 <HAL_RTC_Init>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80021bc:	f7ff fefa 	bl	8001fb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2201      	movs	r2, #1
 80021d8:	4619      	mov	r1, r3
 80021da:	480f      	ldr	r0, [pc, #60]	; (8002218 <MX_RTC_Init+0xb0>)
 80021dc:	f007 f8ff 	bl	80093de <HAL_RTC_SetTime>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80021e6:	f7ff fee5 	bl	8001fb4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80021ea:	2301      	movs	r3, #1
 80021ec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80021ee:	2301      	movs	r3, #1
 80021f0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80021fa:	463b      	mov	r3, r7
 80021fc:	2201      	movs	r2, #1
 80021fe:	4619      	mov	r1, r3
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_RTC_Init+0xb0>)
 8002202:	f007 f989 	bl	8009518 <HAL_RTC_SetDate>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800220c:	f7ff fed2 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002210:	bf00      	nop
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20001438 	.word	0x20001438
 800221c:	40002800 	.word	0x40002800

08002220 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0a4      	sub	sp, #144	; 0x90
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002228:	f107 0308 	add.w	r3, r7, #8
 800222c:	2288      	movs	r2, #136	; 0x88
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f015 f915 	bl	8017460 <memset>
  if(rtcHandle->Instance==RTC)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a10      	ldr	r2, [pc, #64]	; (800227c <HAL_RTC_MspInit+0x5c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d118      	bne.n	8002272 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002240:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002246:	f44f 7300 	mov.w	r3, #512	; 0x200
 800224a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	4618      	mov	r0, r3
 8002254:	f006 fb8c 	bl	8008970 <HAL_RCCEx_PeriphCLKConfig>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800225e:	f7ff fea9 	bl	8001fb4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <HAL_RTC_MspInit+0x60>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <HAL_RTC_MspInit+0x60>)
 800226a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800226e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002272:	bf00      	nop
 8002274:	3790      	adds	r7, #144	; 0x90
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40002800 	.word	0x40002800
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <HAL_MspInit+0x44>)
 800228c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_MspInit+0x44>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6613      	str	r3, [r2, #96]	; 0x60
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <HAL_MspInit+0x44>)
 8002298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_MspInit+0x44>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <HAL_MspInit+0x44>)
 80022a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ac:	6593      	str	r3, [r2, #88]	; 0x58
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_MspInit+0x44>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000

080022cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <NMI_Handler+0x4>

080022d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022d6:	e7fe      	b.n	80022d6 <HardFault_Handler+0x4>

080022d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022dc:	e7fe      	b.n	80022dc <MemManage_Handler+0x4>

080022de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <BusFault_Handler+0x4>

080022e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <UsageFault_Handler+0x4>

080022ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002318:	f003 ffb4 	bl	8006284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <DMA1_Channel6_IRQHandler+0x10>)
 8002326:	f004 fae1 	bl	80068ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20001500 	.word	0x20001500

08002334 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800233a:	f007 fb12 	bl	8009962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000145c 	.word	0x2000145c

08002348 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <TIM3_IRQHandler+0x10>)
 800234e:	f007 fb08 	bl	8009962 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	200014a8 	.word	0x200014a8

0800235c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8002360:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002364:	f004 fe58 	bl	8007018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}

0800236c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <BSP_I2C1_Init+0x70>)
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <BSP_I2C1_Init+0x74>)
 800237a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <BSP_I2C1_Init+0x78>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	4918      	ldr	r1, [pc, #96]	; (80023e4 <BSP_I2C1_Init+0x78>)
 8002384:	600a      	str	r2, [r1, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d122      	bne.n	80023d0 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800238a:	4814      	ldr	r0, [pc, #80]	; (80023dc <BSP_I2C1_Init+0x70>)
 800238c:	f005 f948 	bl	8007620 <HAL_I2C_GetState>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d11c      	bne.n	80023d0 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8002396:	4811      	ldr	r0, [pc, #68]	; (80023dc <BSP_I2C1_Init+0x70>)
 8002398:	f000 f8ba 	bl	8002510 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d116      	bne.n	80023d0 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80023a2:	480e      	ldr	r0, [pc, #56]	; (80023dc <BSP_I2C1_Init+0x70>)
 80023a4:	f7ff fbd0 	bl	8001b48 <MX_I2C1_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80023ae:	f06f 0307 	mvn.w	r3, #7
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	e00c      	b.n	80023d0 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023b6:	2100      	movs	r1, #0
 80023b8:	4808      	ldr	r0, [pc, #32]	; (80023dc <BSP_I2C1_Init+0x70>)
 80023ba:	f005 fbf1 	bl	8007ba0 <HAL_I2CEx_ConfigAnalogFilter>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80023c4:	f06f 0307 	mvn.w	r3, #7
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	e001      	b.n	80023d0 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80023d0:	687b      	ldr	r3, [r7, #4]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200013ec 	.word	0x200013ec
 80023e0:	40005400 	.word	0x40005400
 80023e4:	200010e4 	.word	0x200010e4

080023e8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80023f2:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <BSP_I2C1_DeInit+0x48>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d014      	beq.n	8002424 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80023fa:	4b0d      	ldr	r3, [pc, #52]	; (8002430 <BSP_I2C1_DeInit+0x48>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	3b01      	subs	r3, #1
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <BSP_I2C1_DeInit+0x48>)
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <BSP_I2C1_DeInit+0x48>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10b      	bne.n	8002424 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800240c:	4809      	ldr	r0, [pc, #36]	; (8002434 <BSP_I2C1_DeInit+0x4c>)
 800240e:	f000 f8c5 	bl	800259c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8002412:	4808      	ldr	r0, [pc, #32]	; (8002434 <BSP_I2C1_DeInit+0x4c>)
 8002414:	f004 fea7 	bl	8007166 <HAL_I2C_DeInit>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800241e:	f06f 0307 	mvn.w	r3, #7
 8002422:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8002424:	687b      	ldr	r3, [r7, #4]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200010e4 	.word	0x200010e4
 8002434:	200013ec 	.word	0x200013ec

08002438 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af04      	add	r7, sp, #16
 800243e:	60ba      	str	r2, [r7, #8]
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	81fb      	strh	r3, [r7, #14]
 8002446:	460b      	mov	r3, r1
 8002448:	81bb      	strh	r3, [r7, #12]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8002452:	89ba      	ldrh	r2, [r7, #12]
 8002454:	89f9      	ldrh	r1, [r7, #14]
 8002456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245a:	9302      	str	r3, [sp, #8]
 800245c:	88fb      	ldrh	r3, [r7, #6]
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2301      	movs	r3, #1
 8002466:	480c      	ldr	r0, [pc, #48]	; (8002498 <BSP_I2C1_WriteReg+0x60>)
 8002468:	f004 feac 	bl	80071c4 <HAL_I2C_Mem_Write>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00c      	beq.n	800248c <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8002472:	4809      	ldr	r0, [pc, #36]	; (8002498 <BSP_I2C1_WriteReg+0x60>)
 8002474:	f005 f8e2 	bl	800763c <HAL_I2C_GetError>
 8002478:	4603      	mov	r3, r0
 800247a:	2b04      	cmp	r3, #4
 800247c:	d103      	bne.n	8002486 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800247e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	e002      	b.n	800248c <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002486:	f06f 0303 	mvn.w	r3, #3
 800248a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800248c:	697b      	ldr	r3, [r7, #20]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200013ec 	.word	0x200013ec

0800249c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af04      	add	r7, sp, #16
 80024a2:	60ba      	str	r2, [r7, #8]
 80024a4:	461a      	mov	r2, r3
 80024a6:	4603      	mov	r3, r0
 80024a8:	81fb      	strh	r3, [r7, #14]
 80024aa:	460b      	mov	r3, r1
 80024ac:	81bb      	strh	r3, [r7, #12]
 80024ae:	4613      	mov	r3, r2
 80024b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80024b6:	89ba      	ldrh	r2, [r7, #12]
 80024b8:	89f9      	ldrh	r1, [r7, #14]
 80024ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024be:	9302      	str	r3, [sp, #8]
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	480c      	ldr	r0, [pc, #48]	; (80024fc <BSP_I2C1_ReadReg+0x60>)
 80024cc:	f004 ff8e 	bl	80073ec <HAL_I2C_Mem_Read>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80024d6:	4809      	ldr	r0, [pc, #36]	; (80024fc <BSP_I2C1_ReadReg+0x60>)
 80024d8:	f005 f8b0 	bl	800763c <HAL_I2C_GetError>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d103      	bne.n	80024ea <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80024e2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e002      	b.n	80024f0 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80024ea:	f06f 0303 	mvn.w	r3, #3
 80024ee:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80024f0:	697b      	ldr	r3, [r7, #20]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200013ec 	.word	0x200013ec

08002500 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8002504:	f003 fed2 	bl	80062ac <HAL_GetTick>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <I2C1_MspInit>:

  return ret;
}

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002518:	4b1e      	ldr	r3, [pc, #120]	; (8002594 <I2C1_MspInit+0x84>)
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <I2C1_MspInit+0x84>)
 800251e:	f043 0302 	orr.w	r3, r3, #2
 8002522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <I2C1_MspInit+0x84>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8002530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002536:	2312      	movs	r3, #18
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8002542:	2304      	movs	r3, #4
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4812      	ldr	r0, [pc, #72]	; (8002598 <I2C1_MspInit+0x88>)
 800254e:	f004 faad 	bl	8006aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8002552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002558:	2312      	movs	r3, #18
 800255a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002560:	2303      	movs	r3, #3
 8002562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8002564:	2304      	movs	r3, #4
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	4619      	mov	r1, r3
 800256e:	480a      	ldr	r0, [pc, #40]	; (8002598 <I2C1_MspInit+0x88>)
 8002570:	f004 fa9c 	bl	8006aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <I2C1_MspInit+0x84>)
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <I2C1_MspInit+0x84>)
 800257a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800257e:	6593      	str	r3, [r2, #88]	; 0x58
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <I2C1_MspInit+0x84>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800258c:	bf00      	nop
 800258e:	3728      	adds	r7, #40	; 0x28
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40021000 	.word	0x40021000
 8002598:	48000400 	.word	0x48000400

0800259c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <I2C1_MspDeInit+0x30>)
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	4a08      	ldr	r2, [pc, #32]	; (80025cc <I2C1_MspDeInit+0x30>)
 80025aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025ae:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80025b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b4:	4806      	ldr	r0, [pc, #24]	; (80025d0 <I2C1_MspDeInit+0x34>)
 80025b6:	f004 fc23 	bl	8006e00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80025ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025be:	4804      	ldr	r0, [pc, #16]	; (80025d0 <I2C1_MspDeInit+0x34>)
 80025c0:	f004 fc1e 	bl	8006e00 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40021000 	.word	0x40021000
 80025d0:	48000400 	.word	0x48000400

080025d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
	return 1;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_kill>:

int _kill(int pid, int sig)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025ee:	f014 fef7 	bl	80173e0 <__errno>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2216      	movs	r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
	return -1;
 80025f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <_exit>:

void _exit (int status)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800260c:	f04f 31ff 	mov.w	r1, #4294967295
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f7ff ffe7 	bl	80025e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002616:	e7fe      	b.n	8002616 <_exit+0x12>

08002618 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e00a      	b.n	8002640 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800262a:	f3af 8000 	nop.w
 800262e:	4601      	mov	r1, r0
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	60ba      	str	r2, [r7, #8]
 8002636:	b2ca      	uxtb	r2, r1
 8002638:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	3301      	adds	r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	dbf0      	blt.n	800262a <_read+0x12>
	}

return len;
 8002648:	687b      	ldr	r3, [r7, #4]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	e009      	b.n	8002678 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	60ba      	str	r2, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f003 fd25 	bl	80060bc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	3301      	adds	r3, #1
 8002676:	617b      	str	r3, [r7, #20]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbf1      	blt.n	8002664 <_write+0x12>
	}
	return len;
 8002680:	687b      	ldr	r3, [r7, #4]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <_close>:

int _close(int file)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
	return -1;
 8002692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026b2:	605a      	str	r2, [r3, #4]
	return 0;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_isatty>:

int _isatty(int file)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	return 1;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
	return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026fc:	4a14      	ldr	r2, [pc, #80]	; (8002750 <_sbrk+0x5c>)
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <_sbrk+0x60>)
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002708:	4b13      	ldr	r3, [pc, #76]	; (8002758 <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <_sbrk+0x64>)
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <_sbrk+0x68>)
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <_sbrk+0x64>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	429a      	cmp	r2, r3
 8002722:	d207      	bcs.n	8002734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002724:	f014 fe5c 	bl	80173e0 <__errno>
 8002728:	4603      	mov	r3, r0
 800272a:	220c      	movs	r2, #12
 800272c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	e009      	b.n	8002748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <_sbrk+0x64>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <_sbrk+0x64>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4413      	add	r3, r2
 8002742:	4a05      	ldr	r2, [pc, #20]	; (8002758 <_sbrk+0x64>)
 8002744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002746:	68fb      	ldr	r3, [r7, #12]
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20018000 	.word	0x20018000
 8002754:	00000400 	.word	0x00000400
 8002758:	200010e8 	.word	0x200010e8
 800275c:	20001a08 	.word	0x20001a08

08002760 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <SystemInit+0x20>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <SystemInit+0x20>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim15;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002798:	1d3b      	adds	r3, r7, #4
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	605a      	str	r2, [r3, #4]
 80027a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <MX_TIM3_Init+0x94>)
 80027a4:	4a1d      	ldr	r2, [pc, #116]	; (800281c <MX_TIM3_Init+0x98>)
 80027a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80027a8:	4b1b      	ldr	r3, [pc, #108]	; (8002818 <MX_TIM3_Init+0x94>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <MX_TIM3_Init+0x94>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80027b4:	4b18      	ldr	r3, [pc, #96]	; (8002818 <MX_TIM3_Init+0x94>)
 80027b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027bc:	4b16      	ldr	r3, [pc, #88]	; (8002818 <MX_TIM3_Init+0x94>)
 80027be:	2200      	movs	r2, #0
 80027c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <MX_TIM3_Init+0x94>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027c8:	4813      	ldr	r0, [pc, #76]	; (8002818 <MX_TIM3_Init+0x94>)
 80027ca:	f006 ffe3 	bl	8009794 <HAL_TIM_Base_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80027d4:	f7ff fbee 	bl	8001fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027de:	f107 0310 	add.w	r3, r7, #16
 80027e2:	4619      	mov	r1, r3
 80027e4:	480c      	ldr	r0, [pc, #48]	; (8002818 <MX_TIM3_Init+0x94>)
 80027e6:	f007 f9db 	bl	8009ba0 <HAL_TIM_ConfigClockSource>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80027f0:	f7ff fbe0 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f4:	2300      	movs	r3, #0
 80027f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_TIM3_Init+0x94>)
 8002802:	f007 fbfd 	bl	800a000 <HAL_TIMEx_MasterConfigSynchronization>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800280c:	f7ff fbd2 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002810:	bf00      	nop
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200014a8 	.word	0x200014a8
 800281c:	40000400 	.word	0x40000400

08002820 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002826:	f107 0310 	add.w	r3, r7, #16
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <MX_TIM15_Init+0x9c>)
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <MX_TIM15_Init+0xa0>)
 8002842:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_TIM15_Init+0x9c>)
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <MX_TIM15_Init+0x9c>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <MX_TIM15_Init+0x9c>)
 8002852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002856:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <MX_TIM15_Init+0x9c>)
 800285a:	2200      	movs	r2, #0
 800285c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MX_TIM15_Init+0x9c>)
 8002860:	2200      	movs	r2, #0
 8002862:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <MX_TIM15_Init+0x9c>)
 8002866:	2200      	movs	r2, #0
 8002868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800286a:	4814      	ldr	r0, [pc, #80]	; (80028bc <MX_TIM15_Init+0x9c>)
 800286c:	f006 ff92 	bl	8009794 <HAL_TIM_Base_Init>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002876:	f7ff fb9d 	bl	8001fb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800287a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002880:	f107 0310 	add.w	r3, r7, #16
 8002884:	4619      	mov	r1, r3
 8002886:	480d      	ldr	r0, [pc, #52]	; (80028bc <MX_TIM15_Init+0x9c>)
 8002888:	f007 f98a 	bl	8009ba0 <HAL_TIM_ConfigClockSource>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002892:	f7ff fb8f 	bl	8001fb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4806      	ldr	r0, [pc, #24]	; (80028bc <MX_TIM15_Init+0x9c>)
 80028a4:	f007 fbac 	bl	800a000 <HAL_TIMEx_MasterConfigSynchronization>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80028ae:	f7ff fb81 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80028b2:	bf00      	nop
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	2000145c 	.word	0x2000145c
 80028c0:	40014000 	.word	0x40014000

080028c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1a      	ldr	r2, [pc, #104]	; (800293c <HAL_TIM_Base_MspInit+0x78>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d114      	bne.n	8002900 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d6:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_TIM_Base_MspInit+0x7c>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	4a19      	ldr	r2, [pc, #100]	; (8002940 <HAL_TIM_Base_MspInit+0x7c>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	6593      	str	r3, [r2, #88]	; 0x58
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_TIM_Base_MspInit+0x7c>)
 80028e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	201d      	movs	r0, #29
 80028f4:	f003 fdc1 	bl	800647a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028f8:	201d      	movs	r0, #29
 80028fa:	f003 fdda 	bl	80064b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80028fe:	e018      	b.n	8002932 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM15)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0f      	ldr	r2, [pc, #60]	; (8002944 <HAL_TIM_Base_MspInit+0x80>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d113      	bne.n	8002932 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_TIM_Base_MspInit+0x7c>)
 800290c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290e:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <HAL_TIM_Base_MspInit+0x7c>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	6613      	str	r3, [r2, #96]	; 0x60
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_TIM_Base_MspInit+0x7c>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2100      	movs	r1, #0
 8002926:	2018      	movs	r0, #24
 8002928:	f003 fda7 	bl	800647a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800292c:	2018      	movs	r0, #24
 800292e:	f003 fdc0 	bl	80064b2 <HAL_NVIC_EnableIRQ>
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40000400 	.word	0x40000400
 8002940:	40021000 	.word	0x40021000
 8002944:	40014000 	.word	0x40014000

08002948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002980 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800294c:	f7ff ff08 	bl	8002760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002950:	480c      	ldr	r0, [pc, #48]	; (8002984 <LoopForever+0x6>)
  ldr r1, =_edata
 8002952:	490d      	ldr	r1, [pc, #52]	; (8002988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002954:	4a0d      	ldr	r2, [pc, #52]	; (800298c <LoopForever+0xe>)
  movs r3, #0
 8002956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002958:	e002      	b.n	8002960 <LoopCopyDataInit>

0800295a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800295c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800295e:	3304      	adds	r3, #4

08002960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002964:	d3f9      	bcc.n	800295a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002966:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002968:	4c0a      	ldr	r4, [pc, #40]	; (8002994 <LoopForever+0x16>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800296c:	e001      	b.n	8002972 <LoopFillZerobss>

0800296e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800296e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002970:	3204      	adds	r2, #4

08002972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002974:	d3fb      	bcc.n	800296e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002976:	f014 fd39 	bl	80173ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800297a:	f7ff fa71 	bl	8001e60 <main>

0800297e <LoopForever>:

LoopForever:
    b LoopForever
 800297e:	e7fe      	b.n	800297e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002980:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002988:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 800298c:	0801ac7c 	.word	0x0801ac7c
  ldr r2, =_sbss
 8002990:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8002994:	20001a08 	.word	0x20001a08

08002998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002998:	e7fe      	b.n	8002998 <ADC1_2_IRQHandler>
	...

0800299c <LSM303AGR_ACC_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <LSM303AGR_ACC_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 80029b0:	f04f 33ff 	mov.w	r3, #4294967295
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	e04d      	b.n	8002a54 <LSM303AGR_ACC_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	7b1a      	ldrb	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	695a      	ldr	r2, [r3, #20]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadAccRegWrap;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <LSM303AGR_ACC_RegisterBusIO+0xc4>)
 80029f4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteAccRegWrap;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1a      	ldr	r2, [pc, #104]	; (8002a64 <LSM303AGR_ACC_RegisterBusIO+0xc8>)
 80029fa:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <LSM303AGR_ACC_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e020      	b.n	8002a54 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4798      	blx	r3
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <LSM303AGR_ACC_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e016      	b.n	8002a54 <LSM303AGR_ACC_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d112      	bne.n	8002a54 <LSM303AGR_ACC_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10d      	bne.n	8002a54 <LSM303AGR_ACC_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	72fb      	strb	r3, [r7, #11]

          if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
 8002a3c:	7afb      	ldrb	r3, [r7, #11]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	2123      	movs	r1, #35	; 0x23
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fb55 	bl	80030f2 <LSM303AGR_ACC_Write_Reg>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <LSM303AGR_ACC_RegisterBusIO+0xb8>
          {
            return LSM303AGR_ERROR;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a52:	e000      	b.n	8002a56 <LSM303AGR_ACC_RegisterBusIO+0xba>
        }
      }
    }
  }

  return ret;
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	08003901 	.word	0x08003901
 8002a64:	08003963 	.word	0x08003963

08002a68 <LSM303AGR_ACC_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	331c      	adds	r3, #28
 8002a74:	2101      	movs	r1, #1
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 f94a 	bl	8003d10 <lsm303agr_xl_block_data_update_set>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <LSM303AGR_ACC_Init+0x20>
  {
    return LSM303AGR_ERROR;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295
 8002a86:	e02c      	b.n	8002ae2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* FIFO mode selection */
  if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	331c      	adds	r3, #28
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f001 faed 	bl	800406e <lsm303agr_xl_fifo_mode_set>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <LSM303AGR_ACC_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9e:	e020      	b.n	8002ae2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2205      	movs	r2, #5
 8002aa4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	331c      	adds	r3, #28
 8002aac:	2100      	movs	r1, #0
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 f84e 	bl	8003b50 <lsm303agr_xl_data_rate_set>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <LSM303AGR_ACC_Init+0x58>
  {
    return LSM303AGR_ERROR;
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295
 8002abe:	e010      	b.n	8002ae2 <LSM303AGR_ACC_Init+0x7a>
  }

  /* Full scale selection. */
  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	331c      	adds	r3, #28
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 f8c4 	bl	8003c54 <lsm303agr_xl_full_scale_set>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <LSM303AGR_ACC_Init+0x70>
  {
    return LSM303AGR_ERROR;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	e004      	b.n	8002ae2 <LSM303AGR_ACC_Init+0x7a>
  }

  pObj->is_initialized = 1;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <LSM303AGR_ACC_DeInit>:
 * @brief  Deinitialize the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b082      	sub	sp, #8
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f87c 	bl	8002bf0 <LSM303AGR_ACC_Disable>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <LSM303AGR_ACC_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 8002afe:	f04f 33ff 	mov.w	r3, #4294967295
 8002b02:	e008      	b.n	8002b16 <LSM303AGR_ACC_DeInit+0x2c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pObj->is_initialized = 0;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <LSM303AGR_ACC_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	331c      	adds	r3, #28
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 fa55 	bl	8003fde <lsm303agr_xl_device_id_get>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <LSM303AGR_ACC_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e000      	b.n	8002b42 <LSM303AGR_ACC_ReadID+0x24>
  }

  return LSM303AGR_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <LSM303AGR_ACC_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR accelerometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2200      	movs	r2, #0
 8002b66:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	2210      	movs	r2, #16
 8002b78:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 400.0f;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <LSM303AGR_ACC_GetCapabilities+0x58>)
 8002b8c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	43c80000 	.word	0x43c80000

08002ba8 <LSM303AGR_ACC_Enable>:
 * @brief  Enable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <LSM303AGR_ACC_Enable+0x16>
  {
    return LSM303AGR_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e014      	b.n	8002be8 <LSM303AGR_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f103 021c 	add.w	r2, r3, #28
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f000 ffbf 	bl	8003b50 <lsm303agr_xl_data_rate_set>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <LSM303AGR_ACC_Enable+0x36>
  {
    return LSM303AGR_ERROR;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bdc:	e004      	b.n	8002be8 <LSM303AGR_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <LSM303AGR_ACC_Disable>:
 * @brief  Disable the LSM303AGR accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <LSM303AGR_ACC_Disable+0x16>
  {
    return LSM303AGR_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e01f      	b.n	8002c46 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 021c 	add.w	r2, r3, #28
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	332a      	adds	r3, #42	; 0x2a
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f000 ffc2 	bl	8003b9c <lsm303agr_xl_data_rate_get>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <LSM303AGR_ACC_Disable+0x34>
  {
    return LSM303AGR_ERROR;
 8002c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c22:	e010      	b.n	8002c46 <LSM303AGR_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	331c      	adds	r3, #28
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 ff90 	bl	8003b50 <lsm303agr_xl_data_rate_set>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <LSM303AGR_ACC_Disable+0x4c>
  {
    return LSM303AGR_ERROR;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3a:	e004      	b.n	8002c46 <LSM303AGR_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <LSM303AGR_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	331c      	adds	r3, #28
 8002c60:	f107 020b 	add.w	r2, r7, #11
 8002c64:	4611      	mov	r1, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 ff3e 	bl	8003ae8 <lsm303agr_xl_operating_mode_get>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <LSM303AGR_ACC_GetSensitivity+0x2a>
  {
    return LSM303AGR_ERROR;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e031      	b.n	8002cdc <LSM303AGR_ACC_GetSensitivity+0x8e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (op_mode)
 8002c78:	7afb      	ldrb	r3, [r7, #11]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d01a      	beq.n	8002cb4 <LSM303AGR_ACC_GetSensitivity+0x66>
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	dc22      	bgt.n	8002cc8 <LSM303AGR_ACC_GetSensitivity+0x7a>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <LSM303AGR_ACC_GetSensitivity+0x3e>
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d00a      	beq.n	8002ca0 <LSM303AGR_ACC_GetSensitivity+0x52>
 8002c8a:	e01d      	b.n	8002cc8 <LSM303AGR_ACC_GetSensitivity+0x7a>
  {
    case LSM303AGR_HR_12bit:
      if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fca8 	bl	80035e4 <LSM303AGR_ACC_GetSensitivityHR>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01a      	beq.n	8002cd0 <LSM303AGR_ACC_GetSensitivity+0x82>
      {
        return LSM303AGR_ERROR;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	e01d      	b.n	8002cdc <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_NM_10bit:
      if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fce4 	bl	8003670 <LSM303AGR_ACC_GetSensitivityNM>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d012      	beq.n	8002cd4 <LSM303AGR_ACC_GetSensitivity+0x86>
      {
        return LSM303AGR_ERROR;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb2:	e013      	b.n	8002cdc <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    case LSM303AGR_LP_8bit:
      if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fd20 	bl	80036fc <LSM303AGR_ACC_GetSensitivityLP>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00a      	beq.n	8002cd8 <LSM303AGR_ACC_GetSensitivity+0x8a>
      {
        return LSM303AGR_ERROR;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc6:	e009      	b.n	8002cdc <LSM303AGR_ACC_GetSensitivity+0x8e>
      }
      break;

    default:
      ret = LSM303AGR_ERROR;
 8002cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ccc:	60fb      	str	r3, [r7, #12]
      break;
 8002cce:	e004      	b.n	8002cda <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002cd0:	bf00      	nop
 8002cd2:	e002      	b.n	8002cda <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002cd4:	bf00      	nop
 8002cd6:	e000      	b.n	8002cda <LSM303AGR_ACC_GetSensitivity+0x8c>
      break;
 8002cd8:	bf00      	nop
  }

  return ret;
 8002cda:	68fb      	ldr	r3, [r7, #12]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <LSM303AGR_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
  lsm303agr_op_md_a_t op_mode;
  lsm303agr_odr_a_t odr_low_level;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	331c      	adds	r3, #28
 8002cf6:	f107 020b 	add.w	r2, r7, #11
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fef3 	bl	8003ae8 <lsm303agr_xl_operating_mode_get>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <LSM303AGR_ACC_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0c:	e09d      	b.n	8002e4a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  /* Get current output data rate. */
  if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	331c      	adds	r3, #28
 8002d12:	f107 020a 	add.w	r2, r7, #10
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 ff3f 	bl	8003b9c <lsm303agr_xl_data_rate_get>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <LSM303AGR_ACC_GetOutputDataRate+0x46>
  {
    return LSM303AGR_ERROR;
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
 8002d28:	e08f      	b.n	8002e4a <LSM303AGR_ACC_GetOutputDataRate+0x166>
  }

  if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
 8002d2a:	7afb      	ldrb	r3, [r7, #11]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d147      	bne.n	8002dc0 <LSM303AGR_ACC_GetOutputDataRate+0xdc>
  {
    switch (odr_low_level)
 8002d30:	7abb      	ldrb	r3, [r7, #10]
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d840      	bhi.n	8002db8 <LSM303AGR_ACC_GetOutputDataRate+0xd4>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <LSM303AGR_ACC_GetOutputDataRate+0x58>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d65 	.word	0x08002d65
 8002d40:	08002d6f 	.word	0x08002d6f
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002d81 	.word	0x08002d81
 8002d4c:	08002d89 	.word	0x08002d89
 8002d50:	08002d91 	.word	0x08002d91
 8002d54:	08002d99 	.word	0x08002d99
 8002d58:	08002da1 	.word	0x08002da1
 8002d5c:	08002da9 	.word	0x08002da9
 8002d60:	08002db1 	.word	0x08002db1
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
        break;
 8002d6c:	e06c      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d74:	601a      	str	r2, [r3, #0]
        break;
 8002d76:	e067      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4a36      	ldr	r2, [pc, #216]	; (8002e54 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002d7c:	601a      	str	r2, [r3, #0]
        break;
 8002d7e:	e063      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002d84:	601a      	str	r2, [r3, #0]
        break;
 8002d86:	e05f      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4a34      	ldr	r2, [pc, #208]	; (8002e5c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002d8c:	601a      	str	r2, [r3, #0]
        break;
 8002d8e:	e05b      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4a33      	ldr	r2, [pc, #204]	; (8002e60 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002d94:	601a      	str	r2, [r3, #0]
        break;
 8002d96:	e057      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	4a32      	ldr	r2, [pc, #200]	; (8002e64 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002d9c:	601a      	str	r2, [r3, #0]
        break;
 8002d9e:	e053      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	4a31      	ldr	r2, [pc, #196]	; (8002e68 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002da4:	601a      	str	r2, [r3, #0]
        break;
 8002da6:	e04f      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz620_LP:
        *Odr = 1620.0f;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4a30      	ldr	r2, [pc, #192]	; (8002e6c <LSM303AGR_ACC_GetOutputDataRate+0x188>)
 8002dac:	601a      	str	r2, [r3, #0]
        break;
 8002dae:	e04b      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 5376.0f;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <LSM303AGR_ACC_GetOutputDataRate+0x18c>)
 8002db4:	601a      	str	r2, [r3, #0]
        break;
 8002db6:	e047      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbc:	60fb      	str	r3, [r7, #12]
        break;
 8002dbe:	e043      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>
    }
  }
  else /* HR and NM modes */
  {
    switch (odr_low_level)
 8002dc0:	7abb      	ldrb	r3, [r7, #10]
 8002dc2:	2b09      	cmp	r3, #9
 8002dc4:	d83c      	bhi.n	8002e40 <LSM303AGR_ACC_GetOutputDataRate+0x15c>
 8002dc6:	a201      	add	r2, pc, #4	; (adr r2, 8002dcc <LSM303AGR_ACC_GetOutputDataRate+0xe8>)
 8002dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	08002dff 	.word	0x08002dff
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002e11 	.word	0x08002e11
 8002ddc:	08002e19 	.word	0x08002e19
 8002de0:	08002e21 	.word	0x08002e21
 8002de4:	08002e29 	.word	0x08002e29
 8002de8:	08002e31 	.word	0x08002e31
 8002dec:	08002e41 	.word	0x08002e41
 8002df0:	08002e39 	.word	0x08002e39
    {
      case LSM303AGR_XL_POWER_DOWN:
        *Odr = 0.0f;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
        break;
 8002dfc:	e024      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1Hz:
        *Odr = 1.0f;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e04:	601a      	str	r2, [r3, #0]
        break;
 8002e06:	e01f      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_10Hz:
        *Odr = 10.0f;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <LSM303AGR_ACC_GetOutputDataRate+0x170>)
 8002e0c:	601a      	str	r2, [r3, #0]
        break;
 8002e0e:	e01b      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_25Hz:
        *Odr = 25.0f;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	4a11      	ldr	r2, [pc, #68]	; (8002e58 <LSM303AGR_ACC_GetOutputDataRate+0x174>)
 8002e14:	601a      	str	r2, [r3, #0]
        break;
 8002e16:	e017      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_50Hz:
        *Odr = 50.0f;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <LSM303AGR_ACC_GetOutputDataRate+0x178>)
 8002e1c:	601a      	str	r2, [r3, #0]
        break;
 8002e1e:	e013      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_100Hz:
        *Odr = 100.0f;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <LSM303AGR_ACC_GetOutputDataRate+0x17c>)
 8002e24:	601a      	str	r2, [r3, #0]
        break;
 8002e26:	e00f      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_200Hz:
        *Odr = 200.0f;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	4a0e      	ldr	r2, [pc, #56]	; (8002e64 <LSM303AGR_ACC_GetOutputDataRate+0x180>)
 8002e2c:	601a      	str	r2, [r3, #0]
        break;
 8002e2e:	e00b      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_400Hz:
        *Odr = 400.0f;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <LSM303AGR_ACC_GetOutputDataRate+0x184>)
 8002e34:	601a      	str	r2, [r3, #0]
        break;
 8002e36:	e007      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
        *Odr = 1344.0f;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	4a0e      	ldr	r2, [pc, #56]	; (8002e74 <LSM303AGR_ACC_GetOutputDataRate+0x190>)
 8002e3c:	601a      	str	r2, [r3, #0]
        break;
 8002e3e:	e003      	b.n	8002e48 <LSM303AGR_ACC_GetOutputDataRate+0x164>

      default:
        ret = LSM303AGR_ERROR;
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295
 8002e44:	60fb      	str	r3, [r7, #12]
        break;
 8002e46:	bf00      	nop
    }
  }

  return ret;
 8002e48:	68fb      	ldr	r3, [r7, #12]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	41200000 	.word	0x41200000
 8002e58:	41c80000 	.word	0x41c80000
 8002e5c:	42480000 	.word	0x42480000
 8002e60:	42c80000 	.word	0x42c80000
 8002e64:	43480000 	.word	0x43480000
 8002e68:	43c80000 	.word	0x43c80000
 8002e6c:	44ca8000 	.word	0x44ca8000
 8002e70:	45a80000 	.word	0x45a80000
 8002e74:	44a80000 	.word	0x44a80000

08002e78 <LSM303AGR_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d106      	bne.n	8002e9c <LSM303AGR_ACC_SetOutputDataRate+0x24>
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002e8e:	ed97 0a00 	vldr	s0, [r7]
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fc78 	bl	8003788 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	e005      	b.n	8002ea8 <LSM303AGR_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002e9c:	ed97 0a00 	vldr	s0, [r7]
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fcd3 	bl	800384c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>
 8002ea6:	4603      	mov	r3, r0
  }
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <LSM303AGR_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	331c      	adds	r3, #28
 8002ec2:	f107 020b 	add.w	r2, r7, #11
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fee9 	bl	8003ca0 <lsm303agr_xl_full_scale_get>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <LSM303AGR_ACC_GetFullScale+0x2a>
  {
    return LSM303AGR_ERROR;
 8002ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed8:	e023      	b.n	8002f22 <LSM303AGR_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8002eda:	7afb      	ldrb	r3, [r7, #11]
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d81b      	bhi.n	8002f18 <LSM303AGR_ACC_GetFullScale+0x68>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <LSM303AGR_ACC_GetFullScale+0x38>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002f01 	.word	0x08002f01
 8002ef0:	08002f09 	.word	0x08002f09
 8002ef4:	08002f11 	.word	0x08002f11
  {
    case LSM303AGR_2g:
      *FullScale =  2;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	2202      	movs	r2, #2
 8002efc:	601a      	str	r2, [r3, #0]
      break;
 8002efe:	e00f      	b.n	8002f20 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_4g:
      *FullScale =  4;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2204      	movs	r2, #4
 8002f04:	601a      	str	r2, [r3, #0]
      break;
 8002f06:	e00b      	b.n	8002f20 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_8g:
      *FullScale =  8;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	601a      	str	r2, [r3, #0]
      break;
 8002f0e:	e007      	b.n	8002f20 <LSM303AGR_ACC_GetFullScale+0x70>

    case LSM303AGR_16g:
      *FullScale = 16;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2210      	movs	r2, #16
 8002f14:	601a      	str	r2, [r3, #0]
      break;
 8002f16:	e003      	b.n	8002f20 <LSM303AGR_ACC_GetFullScale+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	60fb      	str	r3, [r7, #12]
      break;
 8002f1e:	bf00      	nop
  }

  return ret;
 8002f20:	68fb      	ldr	r3, [r7, #12]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop

08002f2c <LSM303AGR_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  lsm303agr_fs_a_t new_fs;

  new_fs = (FullScale <= 2) ? LSM303AGR_2g
           : (FullScale <= 4) ? LSM303AGR_4g
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	dd0b      	ble.n	8002f54 <LSM303AGR_ACC_SetFullScale+0x28>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	dd06      	ble.n	8002f50 <LSM303AGR_ACC_SetFullScale+0x24>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	dc01      	bgt.n	8002f4c <LSM303AGR_ACC_SetFullScale+0x20>
 8002f48:	2302      	movs	r3, #2
 8002f4a:	e004      	b.n	8002f56 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e002      	b.n	8002f56 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <LSM303AGR_ACC_SetFullScale+0x2a>
 8002f54:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM303AGR_2g
 8002f56:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM303AGR_8g
           :                    LSM303AGR_16g;

  if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	331c      	adds	r3, #28
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fe77 	bl	8003c54 <lsm303agr_xl_full_scale_set>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <LSM303AGR_ACC_SetFullScale+0x46>
  {
    return LSM303AGR_ERROR;
 8002f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f70:	e000      	b.n	8002f74 <LSM303AGR_ACC_SetFullScale+0x48>
  }

  return LSM303AGR_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <LSM303AGR_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  int16_t divisor = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	83fb      	strh	r3, [r7, #30]
  lsm303agr_axis3bit16_t data_raw;
  int32_t ret = LSM303AGR_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
  lsm303agr_op_md_a_t op_mode;

  /* Read operative mode from sensor. */
  if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	331c      	adds	r3, #28
 8002f92:	f107 020f 	add.w	r2, r7, #15
 8002f96:	4611      	mov	r1, r2
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 fda5 	bl	8003ae8 <lsm303agr_xl_operating_mode_get>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <LSM303AGR_ACC_GetAxesRaw+0x2e>
  {
    return LSM303AGR_ERROR;
 8002fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa8:	e04a      	b.n	8003040 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (op_mode)
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d00c      	beq.n	8002fca <LSM303AGR_ACC_GetAxesRaw+0x4e>
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	dc0e      	bgt.n	8002fd2 <LSM303AGR_ACC_GetAxesRaw+0x56>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <LSM303AGR_ACC_GetAxesRaw+0x42>
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d003      	beq.n	8002fc4 <LSM303AGR_ACC_GetAxesRaw+0x48>
 8002fbc:	e009      	b.n	8002fd2 <LSM303AGR_ACC_GetAxesRaw+0x56>
  {
    case LSM303AGR_HR_12bit:
      divisor = 16;
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	83fb      	strh	r3, [r7, #30]
      break;
 8002fc2:	e00a      	b.n	8002fda <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_NM_10bit:
      divisor = 64;
 8002fc4:	2340      	movs	r3, #64	; 0x40
 8002fc6:	83fb      	strh	r3, [r7, #30]
      break;
 8002fc8:	e007      	b.n	8002fda <LSM303AGR_ACC_GetAxesRaw+0x5e>

    case LSM303AGR_LP_8bit:
      divisor = 256;
 8002fca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fce:	83fb      	strh	r3, [r7, #30]
      break;
 8002fd0:	e003      	b.n	8002fda <LSM303AGR_ACC_GetAxesRaw+0x5e>

    default:
      ret = LSM303AGR_ERROR;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	61bb      	str	r3, [r7, #24]
      break;
 8002fd8:	bf00      	nop
  }

  if (ret == LSM303AGR_ERROR)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe0:	d101      	bne.n	8002fe6 <LSM303AGR_ACC_GetAxesRaw+0x6a>
  {
    return ret;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	e02c      	b.n	8003040 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Read raw data values. */
  if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	331c      	adds	r3, #28
 8002fea:	f107 0210 	add.w	r2, r7, #16
 8002fee:	4611      	mov	r1, r2
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 feb3 	bl	8003d5c <lsm303agr_acceleration_raw_get>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d002      	beq.n	8003002 <LSM303AGR_ACC_GetAxesRaw+0x86>
  {
    return LSM303AGR_ERROR;
 8002ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8003000:	e01e      	b.n	8003040 <LSM303AGR_ACC_GetAxesRaw+0xc4>
  }

  /* Format the data. */
  Value->x = (data_raw.i16bit[0] / divisor);
 8003002:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003006:	461a      	mov	r2, r3
 8003008:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800300c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003010:	b21a      	sxth	r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	801a      	strh	r2, [r3, #0]
  Value->y = (data_raw.i16bit[1] / divisor);
 8003016:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800301a:	461a      	mov	r2, r3
 800301c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003020:	fb92 f3f3 	sdiv	r3, r2, r3
 8003024:	b21a      	sxth	r2, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	805a      	strh	r2, [r3, #2]
  Value->z = (data_raw.i16bit[2] / divisor);
 800302a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800302e:	461a      	mov	r2, r3
 8003030:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003034:	fb92 f3f3 	sdiv	r3, r2, r3
 8003038:	b21a      	sxth	r2, r3
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	809a      	strh	r2, [r3, #4]

  return ret;
 800303e:	69bb      	ldr	r3, [r7, #24]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <LSM303AGR_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  LSM303AGR_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
 8003058:	f107 0310 	add.w	r3, r7, #16
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7ff ff8c 	bl	8002f7c <LSM303AGR_ACC_GetAxesRaw>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <LSM303AGR_ACC_GetAxes+0x28>
  {
    return LSM303AGR_ERROR;
 800306a:	f04f 33ff 	mov.w	r3, #4294967295
 800306e:	e03c      	b.n	80030ea <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Get LSM303AGR actual sensitivity. */
  if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	4619      	mov	r1, r3
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fde9 	bl	8002c4e <LSM303AGR_ACC_GetSensitivity>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <LSM303AGR_ACC_GetAxes+0x40>
  {
    return LSM303AGR_ERROR;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	e030      	b.n	80030ea <LSM303AGR_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8003088:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800308c:	ee07 3a90 	vmov	s15, r3
 8003090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003094:	edd7 7a03 	vldr	s15, [r7, #12]
 8003098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030a0:	ee17 2a90 	vmov	r2, s15
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80030a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c0:	ee17 2a90 	vmov	r2, s15
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80030c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80030cc:	ee07 3a90 	vmov	s15, r3
 80030d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80030d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030e0:	ee17 2a90 	vmov	r2, s15
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <LSM303AGR_ACC_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	70fb      	strb	r3, [r7, #3]
 80030fe:	4613      	mov	r3, r2
 8003100:	70bb      	strb	r3, [r7, #2]
  if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f103 001c 	add.w	r0, r3, #28
 8003108:	1cba      	adds	r2, r7, #2
 800310a:	78f9      	ldrb	r1, [r7, #3]
 800310c:	2301      	movs	r3, #1
 800310e:	f000 fcd3 	bl	8003ab8 <lsm303agr_write_reg>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d002      	beq.n	800311e <LSM303AGR_ACC_Write_Reg+0x2c>
  {
    return LSM303AGR_ERROR;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
 800311c:	e000      	b.n	8003120 <LSM303AGR_ACC_Write_Reg+0x2e>
  }

  return LSM303AGR_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <LSM303AGR_MAG_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <LSM303AGR_MAG_RegisterBusIO+0x1c>
  {
    ret = LSM303AGR_ERROR;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e04b      	b.n	80031dc <LSM303AGR_MAG_RegisterBusIO+0xb4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	7b1a      	ldrb	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	695a      	ldr	r2, [r3, #20]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a1a      	ldr	r2, [pc, #104]	; (80031e8 <LSM303AGR_MAG_RegisterBusIO+0xc0>)
 8003180:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a19      	ldr	r2, [pc, #100]	; (80031ec <LSM303AGR_MAG_RegisterBusIO+0xc4>)
 8003186:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <LSM303AGR_MAG_RegisterBusIO+0x76>
    {
      ret = LSM303AGR_ERROR;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e01e      	b.n	80031dc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else if (pObj->IO.Init() != LSM303AGR_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4798      	blx	r3
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <LSM303AGR_MAG_RegisterBusIO+0x8a>
    {
      ret = LSM303AGR_ERROR;
 80031aa:	f04f 33ff 	mov.w	r3, #4294967295
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	e014      	b.n	80031dc <LSM303AGR_MAG_RegisterBusIO+0xb4>
    }
    else
    {
      if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d010      	beq.n	80031dc <LSM303AGR_MAG_RegisterBusIO+0xb4>
      {
        /* Disable I2C interface support only the first time */
        if (pObj->is_initialized == 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10b      	bne.n	80031dc <LSM303AGR_MAG_RegisterBusIO+0xb4>
        {
          /* Disable I2C interface on the component */
          if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	331c      	adds	r3, #28
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 ff75 	bl	80040ba <lsm303agr_mag_i2c_interface_set>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <LSM303AGR_MAG_RegisterBusIO+0xb4>
          {
            return LSM303AGR_ERROR;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	e000      	b.n	80031de <LSM303AGR_MAG_RegisterBusIO+0xb6>
        }
      }
    }
  }

  return ret;
 80031dc:	68fb      	ldr	r3, [r7, #12]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	080039c5 	.word	0x080039c5
 80031ec:	08003a27 	.word	0x08003a27

080031f0 <LSM303AGR_MAG_Init>:
 * @brief  Initialize the LSM303AGR sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Enable BDU */
  if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	331c      	adds	r3, #28
 80031fc:	2101      	movs	r1, #1
 80031fe:	4618      	mov	r0, r3
 8003200:	f000 fe7c 	bl	8003efc <lsm303agr_mag_block_data_update_set>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <LSM303AGR_MAG_Init+0x20>
  {
    return LSM303AGR_ERROR;
 800320a:	f04f 33ff 	mov.w	r3, #4294967295
 800320e:	e028      	b.n	8003262 <LSM303AGR_MAG_Init+0x72>
  }

  /* Operating mode selection - power down */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	331c      	adds	r3, #28
 8003214:	2102      	movs	r1, #2
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fdeb 	bl	8003df2 <lsm303agr_mag_operating_mode_set>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <LSM303AGR_MAG_Init+0x38>
  {
    return LSM303AGR_ERROR;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	e01c      	b.n	8003262 <LSM303AGR_MAG_Init+0x72>
  }

  /* Output data rate selection */
  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	331c      	adds	r3, #28
 800322c:	2103      	movs	r1, #3
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fe05 	bl	8003e3e <lsm303agr_mag_data_rate_set>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <LSM303AGR_MAG_Init+0x50>
  {
    return LSM303AGR_ERROR;
 800323a:	f04f 33ff 	mov.w	r3, #4294967295
 800323e:	e010      	b.n	8003262 <LSM303AGR_MAG_Init+0x72>
  }

  /* Self Test disabled. */
  if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	331c      	adds	r3, #28
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f000 feeb 	bl	8004022 <lsm303agr_mag_self_test_set>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <LSM303AGR_MAG_Init+0x68>
  {
    return LSM303AGR_ERROR;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295
 8003256:	e004      	b.n	8003262 <LSM303AGR_MAG_Init+0x72>
  }

  pObj->is_initialized = 1;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <LSM303AGR_MAG_DeInit>:
 * @brief  Deinitialize the LSM303AGR magnetometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b082      	sub	sp, #8
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f874 	bl	8003360 <LSM303AGR_MAG_Disable>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <LSM303AGR_MAG_DeInit+0x1a>
  {
    return LSM303AGR_ERROR;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295
 8003282:	e004      	b.n	800328e <LSM303AGR_MAG_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM303AGR_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <LSM303AGR_MAG_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	331c      	adds	r3, #28
 80032a4:	6839      	ldr	r1, [r7, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 feaa 	bl	8004000 <lsm303agr_mag_device_id_get>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <LSM303AGR_MAG_ReadID+0x22>
  {
    return LSM303AGR_ERROR;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295
 80032b6:	e000      	b.n	80032ba <LSM303AGR_MAG_ReadID+0x24>
  }

  return LSM303AGR_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <LSM303AGR_MAG_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM303AGR magnetometer sensor capabilities
 * @retval Component status
 */
int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	2200      	movs	r2, #0
 80032d8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2201      	movs	r2, #1
 80032de:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2200      	movs	r2, #0
 80032e4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2200      	movs	r2, #0
 80032ea:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2232      	movs	r2, #50	; 0x32
 80032f6:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	4a04      	ldr	r2, [pc, #16]	; (800331c <LSM303AGR_MAG_GetCapabilities+0x58>)
 800330c:	619a      	str	r2, [r3, #24]
  return LSM303AGR_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	42c80000 	.word	0x42c80000

08003320 <LSM303AGR_MAG_Enable>:
 * @brief Enable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <LSM303AGR_MAG_Enable+0x16>
  {
    return LSM303AGR_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e010      	b.n	8003358 <LSM303AGR_MAG_Enable+0x38>
  }

  /* Output data rate selection. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	331c      	adds	r3, #28
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fd58 	bl	8003df2 <lsm303agr_mag_operating_mode_set>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <LSM303AGR_MAG_Enable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003348:	f04f 33ff 	mov.w	r3, #4294967295
 800334c:	e004      	b.n	8003358 <LSM303AGR_MAG_Enable+0x38>
  }

  pObj->mag_is_enabled = 1;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <LSM303AGR_MAG_Disable>:
 * @brief Disable the LSM303AGR magnetometer sensor
 * @param pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <LSM303AGR_MAG_Disable+0x16>
  {
    return LSM303AGR_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e010      	b.n	8003398 <LSM303AGR_MAG_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	331c      	adds	r3, #28
 800337a:	2102      	movs	r1, #2
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fd38 	bl	8003df2 <lsm303agr_mag_operating_mode_set>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <LSM303AGR_MAG_Disable+0x2e>
  {
    return LSM303AGR_ERROR;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295
 800338c:	e004      	b.n	8003398 <LSM303AGR_MAG_Disable+0x38>
  }

  pObj->mag_is_enabled = 0;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM303AGR_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <LSM303AGR_MAG_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80033b0:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LSM303AGR_MAG_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
  lsm303agr_mg_odr_m_t odr_low_level;

  /* Get current output data rate. */
  if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	331c      	adds	r3, #28
 80033d2:	f107 020b 	add.w	r2, r7, #11
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 fd57 	bl	8003e8c <lsm303agr_mag_data_rate_get>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <LSM303AGR_MAG_GetOutputDataRate+0x2a>
  {
    return LSM303AGR_ERROR;
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	e023      	b.n	8003432 <LSM303AGR_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80033ea:	7afb      	ldrb	r3, [r7, #11]
 80033ec:	2b03      	cmp	r3, #3
 80033ee:	d81b      	bhi.n	8003428 <LSM303AGR_MAG_GetOutputDataRate+0x68>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <LSM303AGR_MAG_GetOutputDataRate+0x38>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003409 	.word	0x08003409
 80033fc:	08003411 	.word	0x08003411
 8003400:	08003419 	.word	0x08003419
 8003404:	08003421 	.word	0x08003421
  {
    case LSM303AGR_MG_ODR_10Hz:
      *Odr = 10.0f;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	4a0c      	ldr	r2, [pc, #48]	; (800343c <LSM303AGR_MAG_GetOutputDataRate+0x7c>)
 800340c:	601a      	str	r2, [r3, #0]
      break;
 800340e:	e00f      	b.n	8003430 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_20Hz:
      *Odr = 20.0f;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <LSM303AGR_MAG_GetOutputDataRate+0x80>)
 8003414:	601a      	str	r2, [r3, #0]
      break;
 8003416:	e00b      	b.n	8003430 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_50Hz:
      *Odr = 50.0f;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <LSM303AGR_MAG_GetOutputDataRate+0x84>)
 800341c:	601a      	str	r2, [r3, #0]
      break;
 800341e:	e007      	b.n	8003430 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    case LSM303AGR_MG_ODR_100Hz:
      *Odr = 100.0f;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4a09      	ldr	r2, [pc, #36]	; (8003448 <LSM303AGR_MAG_GetOutputDataRate+0x88>)
 8003424:	601a      	str	r2, [r3, #0]
      break;
 8003426:	e003      	b.n	8003430 <LSM303AGR_MAG_GetOutputDataRate+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003428:	f04f 33ff 	mov.w	r3, #4294967295
 800342c:	60fb      	str	r3, [r7, #12]
      break;
 800342e:	bf00      	nop
  }

  return ret;
 8003430:	68fb      	ldr	r3, [r7, #12]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	41200000 	.word	0x41200000
 8003440:	41a00000 	.word	0x41a00000
 8003444:	42480000 	.word	0x42480000
 8003448:	42c80000 	.word	0x42c80000

0800344c <LSM303AGR_MAG_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_mg_odr_m_t new_odr;

  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
            : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
 8003458:	edd7 7a00 	vldr	s15, [r7]
 800345c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003468:	d801      	bhi.n	800346e <LSM303AGR_MAG_SetOutputDataRate+0x22>
 800346a:	2300      	movs	r3, #0
 800346c:	e016      	b.n	800349c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800346e:	edd7 7a00 	vldr	s15, [r7]
 8003472:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800347a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347e:	d801      	bhi.n	8003484 <LSM303AGR_MAG_SetOutputDataRate+0x38>
 8003480:	2301      	movs	r3, #1
 8003482:	e00b      	b.n	800349c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 8003484:	edd7 7a00 	vldr	s15, [r7]
 8003488:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80034c4 <LSM303AGR_MAG_SetOutputDataRate+0x78>
 800348c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003494:	d801      	bhi.n	800349a <LSM303AGR_MAG_SetOutputDataRate+0x4e>
 8003496:	2302      	movs	r3, #2
 8003498:	e000      	b.n	800349c <LSM303AGR_MAG_SetOutputDataRate+0x50>
 800349a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
 800349c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
            :                    LSM303AGR_MG_ODR_100Hz;

  if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	331c      	adds	r3, #28
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fcc9 	bl	8003e3e <lsm303agr_mag_data_rate_set>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <LSM303AGR_MAG_SetOutputDataRate+0x6c>
  {
    return LSM303AGR_ERROR;
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295
 80034b6:	e000      	b.n	80034ba <LSM303AGR_MAG_SetOutputDataRate+0x6e>
  }

  return LSM303AGR_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	42480000 	.word	0x42480000

080034c8 <LSM303AGR_MAG_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2232      	movs	r2, #50	; 0x32
 80034d6:	601a      	str	r2, [r3, #0]

  return LSM303AGR_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LSM303AGR_MAG_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
 80034ee:	6039      	str	r1, [r7, #0]
  return LSM303AGR_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LSM303AGR_MAG_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b084      	sub	sp, #16
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	331c      	adds	r3, #28
 800350c:	f107 0208 	add.w	r2, r7, #8
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fd18 	bl	8003f48 <lsm303agr_magnetic_raw_get>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <LSM303AGR_MAG_GetAxesRaw+0x26>
  {
    return LSM303AGR_ERROR;
 800351e:	f04f 33ff 	mov.w	r3, #4294967295
 8003522:	e00c      	b.n	800353e <LSM303AGR_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8003524:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800352c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8003534:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	809a      	strh	r2, [r3, #4]

  return LSM303AGR_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <LSM303AGR_MAG_GetAxes>:
 * @param  pObj the device pObj
 * @param  MagneticField pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b086      	sub	sp, #24
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  lsm303agr_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM303AGR_OK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	331c      	adds	r3, #28
 8003554:	f107 0210 	add.w	r2, r7, #16
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fcf4 	bl	8003f48 <lsm303agr_magnetic_raw_get>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <LSM303AGR_MAG_GetAxes+0x26>
  {
    return LSM303AGR_ERROR;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	e036      	b.n	80035da <LSM303AGR_MAG_GetAxes+0x94>
  }

  /* Get LSM303AGR actual sensitivity. */
  (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
 800356c:	f107 030c 	add.w	r3, r7, #12
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ff14 	bl	80033a0 <LSM303AGR_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8003578:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800357c:	ee07 3a90 	vmov	s15, r3
 8003580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003584:	edd7 7a03 	vldr	s15, [r7, #12]
 8003588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003590:	ee17 2a90 	vmov	r2, s15
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8003598:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800359c:	ee07 3a90 	vmov	s15, r3
 80035a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80035a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035b0:	ee17 2a90 	vmov	r2, s15
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80035b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035bc:	ee07 3a90 	vmov	s15, r3
 80035c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80035c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035d0:	ee17 2a90 	vmov	r2, s15
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	609a      	str	r2, [r3, #8]

  return LSM303AGR_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <LSM303AGR_ACC_GetSensitivityHR>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	331c      	adds	r3, #28
 80035f6:	f107 020b 	add.w	r2, r7, #11
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fb4f 	bl	8003ca0 <lsm303agr_xl_full_scale_get>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <LSM303AGR_ACC_GetSensitivityHR+0x2a>
  {
    return LSM303AGR_ERROR;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295
 800360c:	e023      	b.n	8003656 <LSM303AGR_ACC_GetSensitivityHR+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d81b      	bhi.n	800364c <LSM303AGR_ACC_GetSensitivityHR+0x68>
 8003614:	a201      	add	r2, pc, #4	; (adr r2, 800361c <LSM303AGR_ACC_GetSensitivityHR+0x38>)
 8003616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361a:	bf00      	nop
 800361c:	0800362d 	.word	0x0800362d
 8003620:	08003635 	.word	0x08003635
 8003624:	0800363d 	.word	0x0800363d
 8003628:	08003645 	.word	0x08003645
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <LSM303AGR_ACC_GetSensitivityHR+0x7c>)
 8003630:	601a      	str	r2, [r3, #0]
      break;
 8003632:	e00f      	b.n	8003654 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	4a0b      	ldr	r2, [pc, #44]	; (8003664 <LSM303AGR_ACC_GetSensitivityHR+0x80>)
 8003638:	601a      	str	r2, [r3, #0]
      break;
 800363a:	e00b      	b.n	8003654 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <LSM303AGR_ACC_GetSensitivityHR+0x84>)
 8003640:	601a      	str	r2, [r3, #0]
      break;
 8003642:	e007      	b.n	8003654 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <LSM303AGR_ACC_GetSensitivityHR+0x88>)
 8003648:	601a      	str	r2, [r3, #0]
      break;
 800364a:	e003      	b.n	8003654 <LSM303AGR_ACC_GetSensitivityHR+0x70>

    default:
      ret = LSM303AGR_ERROR;
 800364c:	f04f 33ff 	mov.w	r3, #4294967295
 8003650:	60fb      	str	r3, [r7, #12]
      break;
 8003652:	bf00      	nop
  }

  return ret;
 8003654:	68fb      	ldr	r3, [r7, #12]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	3f7ae148 	.word	0x3f7ae148
 8003664:	3ff9999a 	.word	0x3ff9999a
 8003668:	4079999a 	.word	0x4079999a
 800366c:	413b851f 	.word	0x413b851f

08003670 <LSM303AGR_ACC_GetSensitivityNM>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	331c      	adds	r3, #28
 8003682:	f107 020b 	add.w	r2, r7, #11
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f000 fb09 	bl	8003ca0 <lsm303agr_xl_full_scale_get>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <LSM303AGR_ACC_GetSensitivityNM+0x2a>
  {
    return LSM303AGR_ERROR;
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	e023      	b.n	80036e2 <LSM303AGR_ACC_GetSensitivityNM+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d81b      	bhi.n	80036d8 <LSM303AGR_ACC_GetSensitivityNM+0x68>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <LSM303AGR_ACC_GetSensitivityNM+0x38>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036c1 	.word	0x080036c1
 80036b0:	080036c9 	.word	0x080036c9
 80036b4:	080036d1 	.word	0x080036d1
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	4a0c      	ldr	r2, [pc, #48]	; (80036ec <LSM303AGR_ACC_GetSensitivityNM+0x7c>)
 80036bc:	601a      	str	r2, [r3, #0]
      break;
 80036be:	e00f      	b.n	80036e0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <LSM303AGR_ACC_GetSensitivityNM+0x80>)
 80036c4:	601a      	str	r2, [r3, #0]
      break;
 80036c6:	e00b      	b.n	80036e0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <LSM303AGR_ACC_GetSensitivityNM+0x84>)
 80036cc:	601a      	str	r2, [r3, #0]
      break;
 80036ce:	e007      	b.n	80036e0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4a09      	ldr	r2, [pc, #36]	; (80036f8 <LSM303AGR_ACC_GetSensitivityNM+0x88>)
 80036d4:	601a      	str	r2, [r3, #0]
      break;
 80036d6:	e003      	b.n	80036e0 <LSM303AGR_ACC_GetSensitivityNM+0x70>

    default:
      ret = LSM303AGR_ERROR;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	60fb      	str	r3, [r7, #12]
      break;
 80036de:	bf00      	nop
  }

  return ret;
 80036e0:	68fb      	ldr	r3, [r7, #12]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	4079999a 	.word	0x4079999a
 80036f0:	40fa3d71 	.word	0x40fa3d71
 80036f4:	417a147b 	.word	0x417a147b
 80036f8:	423b999a 	.word	0x423b999a

080036fc <LSM303AGR_ACC_GetSensitivityLP>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer to sensitivity
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM303AGR_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]
  lsm303agr_fs_a_t fullscale;

  /* Read actual full scale selection from sensor. */
  if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	331c      	adds	r3, #28
 800370e:	f107 020b 	add.w	r2, r7, #11
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fac3 	bl	8003ca0 <lsm303agr_xl_full_scale_get>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <LSM303AGR_ACC_GetSensitivityLP+0x2a>
  {
    return LSM303AGR_ERROR;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295
 8003724:	e023      	b.n	800376e <LSM303AGR_ACC_GetSensitivityLP+0x72>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (fullscale)
 8003726:	7afb      	ldrb	r3, [r7, #11]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d81b      	bhi.n	8003764 <LSM303AGR_ACC_GetSensitivityLP+0x68>
 800372c:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <LSM303AGR_ACC_GetSensitivityLP+0x38>)
 800372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003732:	bf00      	nop
 8003734:	08003745 	.word	0x08003745
 8003738:	0800374d 	.word	0x0800374d
 800373c:	08003755 	.word	0x08003755
 8003740:	0800375d 	.word	0x0800375d
  {
    case LSM303AGR_2g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4a0c      	ldr	r2, [pc, #48]	; (8003778 <LSM303AGR_ACC_GetSensitivityLP+0x7c>)
 8003748:	601a      	str	r2, [r3, #0]
      break;
 800374a:	e00f      	b.n	800376c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_4g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <LSM303AGR_ACC_GetSensitivityLP+0x80>)
 8003750:	601a      	str	r2, [r3, #0]
      break;
 8003752:	e00b      	b.n	800376c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_8g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <LSM303AGR_ACC_GetSensitivityLP+0x84>)
 8003758:	601a      	str	r2, [r3, #0]
      break;
 800375a:	e007      	b.n	800376c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    case LSM303AGR_16g:
      *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4a09      	ldr	r2, [pc, #36]	; (8003784 <LSM303AGR_ACC_GetSensitivityLP+0x88>)
 8003760:	601a      	str	r2, [r3, #0]
      break;
 8003762:	e003      	b.n	800376c <LSM303AGR_ACC_GetSensitivityLP+0x70>

    default:
      ret = LSM303AGR_ERROR;
 8003764:	f04f 33ff 	mov.w	r3, #4294967295
 8003768:	60fb      	str	r3, [r7, #12]
      break;
 800376a:	bf00      	nop
  }

  return ret;
 800376c:	68fb      	ldr	r3, [r7, #12]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	417a147b 	.word	0x417a147b
 800377c:	41fa147b 	.word	0x41fa147b
 8003780:	427a147b 	.word	0x427a147b
 8003784:	433b947b 	.word	0x433b947b

08003788 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	ed87 0a00 	vstr	s0, [r7]
  lsm303agr_odr_a_t new_odr;

  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
            : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003794:	edd7 7a00 	vldr	s15, [r7]
 8003798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800379c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a4:	d801      	bhi.n	80037aa <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x22>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e037      	b.n	800381a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80037aa:	edd7 7a00 	vldr	s15, [r7]
 80037ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80037b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ba:	d801      	bhi.n	80037c0 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x38>
 80037bc:	2302      	movs	r3, #2
 80037be:	e02c      	b.n	800381a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80037c0:	edd7 7a00 	vldr	s15, [r7]
 80037c4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80037c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	d801      	bhi.n	80037d6 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x4e>
 80037d2:	2303      	movs	r3, #3
 80037d4:	e021      	b.n	800381a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80037d6:	edd7 7a00 	vldr	s15, [r7]
 80037da:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003840 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb8>
 80037de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	d801      	bhi.n	80037ec <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x64>
 80037e8:	2304      	movs	r3, #4
 80037ea:	e016      	b.n	800381a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 80037ec:	edd7 7a00 	vldr	s15, [r7]
 80037f0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003844 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80037f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fc:	d801      	bhi.n	8003802 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80037fe:	2305      	movs	r3, #5
 8003800:	e00b      	b.n	800381a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003802:	edd7 7a00 	vldr	s15, [r7]
 8003806:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003848 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800380a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d801      	bhi.n	8003818 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x90>
 8003814:	2306      	movs	r3, #6
 8003816:	e000      	b.n	800381a <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0x92>
 8003818:	2307      	movs	r3, #7
  new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 800381a:	73fb      	strb	r3, [r7, #15]
            : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
            : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
            :                    LSM303AGR_XL_ODR_400Hz;

  /* Output data rate selection. */
  if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	331c      	adds	r3, #28
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 f993 	bl	8003b50 <lsm303agr_xl_data_rate_set>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xae>
  {
    return LSM303AGR_ERROR;
 8003830:	f04f 33ff 	mov.w	r3, #4294967295
 8003834:	e000      	b.n	8003838 <LSM303AGR_ACC_SetOutputDataRate_When_Enabled+0xb0>
  }

  return LSM303AGR_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	42480000 	.word	0x42480000
 8003844:	42c80000 	.word	0x42c80000
 8003848:	43480000 	.word	0x43480000

0800384c <LSM303AGR_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
                  : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
 8003858:	edd7 7a00 	vldr	s15, [r7]
 800385c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003868:	d801      	bhi.n	800386e <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x22>
 800386a:	2301      	movs	r3, #1
 800386c:	e037      	b.n	80038de <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800386e:	edd7 7a00 	vldr	s15, [r7]
 8003872:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	d801      	bhi.n	8003884 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x38>
 8003880:	2302      	movs	r3, #2
 8003882:	e02c      	b.n	80038de <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003884:	edd7 7a00 	vldr	s15, [r7]
 8003888:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800388c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003894:	d801      	bhi.n	800389a <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8003896:	2303      	movs	r3, #3
 8003898:	e021      	b.n	80038de <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 800389a:	edd7 7a00 	vldr	s15, [r7]
 800389e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80038f4 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80038a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	d801      	bhi.n	80038b0 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x64>
 80038ac:	2304      	movs	r3, #4
 80038ae:	e016      	b.n	80038de <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80038b0:	edd7 7a00 	vldr	s15, [r7]
 80038b4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80038f8 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xac>
 80038b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c0:	d801      	bhi.n	80038c6 <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80038c2:	2305      	movs	r3, #5
 80038c4:	e00b      	b.n	80038de <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80038c6:	edd7 7a00 	vldr	s15, [r7]
 80038ca:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80038fc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0xb0>
 80038ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d6:	d801      	bhi.n	80038dc <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x90>
 80038d8:	2306      	movs	r3, #6
 80038da:	e000      	b.n	80038de <LSM303AGR_ACC_SetOutputDataRate_When_Disabled+0x92>
 80038dc:	2307      	movs	r3, #7
  pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
                  : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
                  : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
                  : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
                  :                    LSM303AGR_XL_ODR_400Hz;

  return LSM303AGR_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	42480000 	.word	0x42480000
 80038f8:	42c80000 	.word	0x42c80000
 80038fc:	43480000 	.word	0x43480000

08003900 <ReadAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003900:	b590      	push	{r4, r7, lr}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	461a      	mov	r2, r3
 800390c:	460b      	mov	r3, r1
 800390e:	72fb      	strb	r3, [r7, #11]
 8003910:	4613      	mov	r3, r2
 8003912:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10e      	bne.n	800393e <ReadAccRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	695c      	ldr	r4, [r3, #20]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	7b1b      	ldrb	r3, [r3, #12]
 8003928:	b298      	uxth	r0, r3
 800392a:	7afb      	ldrb	r3, [r7, #11]
 800392c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003930:	b2db      	uxtb	r3, r3
 8003932:	b299      	uxth	r1, r3
 8003934:	893b      	ldrh	r3, [r7, #8]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	47a0      	blx	r4
 800393a:	4603      	mov	r3, r0
 800393c:	e00d      	b.n	800395a <ReadAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	695c      	ldr	r4, [r3, #20]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	7b1b      	ldrb	r3, [r3, #12]
 8003946:	b298      	uxth	r0, r3
 8003948:	7afb      	ldrb	r3, [r7, #11]
 800394a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800394e:	b2db      	uxtb	r3, r3
 8003950:	b299      	uxth	r1, r3
 8003952:	893b      	ldrh	r3, [r7, #8]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	47a0      	blx	r4
 8003958:	4603      	mov	r3, r0
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}

08003962 <WriteAccRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003962:	b590      	push	{r4, r7, lr}
 8003964:	b087      	sub	sp, #28
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	461a      	mov	r2, r3
 800396e:	460b      	mov	r3, r1
 8003970:	72fb      	strb	r3, [r7, #11]
 8003972:	4613      	mov	r3, r2
 8003974:	813b      	strh	r3, [r7, #8]
  LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10e      	bne.n	80039a0 <WriteAccRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	691c      	ldr	r4, [r3, #16]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	7b1b      	ldrb	r3, [r3, #12]
 800398a:	b298      	uxth	r0, r3
 800398c:	7afb      	ldrb	r3, [r7, #11]
 800398e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003992:	b2db      	uxtb	r3, r3
 8003994:	b299      	uxth	r1, r3
 8003996:	893b      	ldrh	r3, [r7, #8]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	47a0      	blx	r4
 800399c:	4603      	mov	r3, r0
 800399e:	e00d      	b.n	80039bc <WriteAccRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	691c      	ldr	r4, [r3, #16]
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	7b1b      	ldrb	r3, [r3, #12]
 80039a8:	b298      	uxth	r0, r3
 80039aa:	7afb      	ldrb	r3, [r7, #11]
 80039ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	b299      	uxth	r1, r3
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	47a0      	blx	r4
 80039ba:	4603      	mov	r3, r0
  }
}
 80039bc:	4618      	mov	r0, r3
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd90      	pop	{r4, r7, pc}

080039c4 <ReadMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80039c4:	b590      	push	{r4, r7, lr}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	461a      	mov	r2, r3
 80039d0:	460b      	mov	r3, r1
 80039d2:	72fb      	strb	r3, [r7, #11]
 80039d4:	4613      	mov	r3, r2
 80039d6:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10e      	bne.n	8003a02 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	695c      	ldr	r4, [r3, #20]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	7b1b      	ldrb	r3, [r3, #12]
 80039ec:	b298      	uxth	r0, r3
 80039ee:	7afb      	ldrb	r3, [r7, #11]
 80039f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	b299      	uxth	r1, r3
 80039f8:	893b      	ldrh	r3, [r7, #8]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	47a0      	blx	r4
 80039fe:	4603      	mov	r3, r0
 8003a00:	e00d      	b.n	8003a1e <ReadMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	695c      	ldr	r4, [r3, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	7b1b      	ldrb	r3, [r3, #12]
 8003a0a:	b298      	uxth	r0, r3
 8003a0c:	7afb      	ldrb	r3, [r7, #11]
 8003a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	b299      	uxth	r1, r3
 8003a16:	893b      	ldrh	r3, [r7, #8]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	47a0      	blx	r4
 8003a1c:	4603      	mov	r3, r0
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd90      	pop	{r4, r7, pc}

08003a26 <WriteMagRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003a26:	b590      	push	{r4, r7, lr}
 8003a28:	b087      	sub	sp, #28
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	461a      	mov	r2, r3
 8003a32:	460b      	mov	r3, r1
 8003a34:	72fb      	strb	r3, [r7, #11]
 8003a36:	4613      	mov	r3, r2
 8003a38:	813b      	strh	r3, [r7, #8]
  LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10e      	bne.n	8003a64 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	691c      	ldr	r4, [r3, #16]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	7b1b      	ldrb	r3, [r3, #12]
 8003a4e:	b298      	uxth	r0, r3
 8003a50:	7afb      	ldrb	r3, [r7, #11]
 8003a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	b299      	uxth	r1, r3
 8003a5a:	893b      	ldrh	r3, [r7, #8]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	47a0      	blx	r4
 8003a60:	4603      	mov	r3, r0
 8003a62:	e00d      	b.n	8003a80 <WriteMagRegWrap+0x5a>
  }
  else   /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	691c      	ldr	r4, [r3, #16]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	7b1b      	ldrb	r3, [r3, #12]
 8003a6c:	b298      	uxth	r0, r3
 8003a6e:	7afb      	ldrb	r3, [r7, #11]
 8003a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	b299      	uxth	r1, r3
 8003a78:	893b      	ldrh	r3, [r7, #8]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	47a0      	blx	r4
 8003a7e:	4603      	mov	r3, r0
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	371c      	adds	r7, #28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd90      	pop	{r4, r7, pc}

08003a88 <lsm303agr_read_reg>:
  *
  */
int32_t lsm303agr_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	607a      	str	r2, [r7, #4]
 8003a92:	461a      	mov	r2, r3
 8003a94:	460b      	mov	r3, r1
 8003a96:	72fb      	strb	r3, [r7, #11]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	685c      	ldr	r4, [r3, #4]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6898      	ldr	r0, [r3, #8]
 8003aa4:	893b      	ldrh	r3, [r7, #8]
 8003aa6:	7af9      	ldrb	r1, [r7, #11]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	47a0      	blx	r4
 8003aac:	6178      	str	r0, [r7, #20]
  return ret;
 8003aae:	697b      	ldr	r3, [r7, #20]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd90      	pop	{r4, r7, pc}

08003ab8 <lsm303agr_write_reg>:
  *
  */
int32_t lsm303agr_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8003ab8:	b590      	push	{r4, r7, lr}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	72fb      	strb	r3, [r7, #11]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681c      	ldr	r4, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6898      	ldr	r0, [r3, #8]
 8003ad4:	893b      	ldrh	r3, [r7, #8]
 8003ad6:	7af9      	ldrb	r1, [r7, #11]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	47a0      	blx	r4
 8003adc:	6178      	str	r0, [r7, #20]
  return ret;
 8003ade:	697b      	ldr	r3, [r7, #20]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	371c      	adds	r7, #28
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd90      	pop	{r4, r7, pc}

08003ae8 <lsm303agr_xl_operating_mode_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_operating_mode_get(stmdev_ctx_t *ctx,
                                        lsm303agr_op_md_a_t *val)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003af2:	f107 020c 	add.w	r2, r7, #12
 8003af6:	2301      	movs	r3, #1
 8003af8:	2120      	movs	r1, #32
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ffc4 	bl	8003a88 <lsm303agr_read_reg>
 8003b00:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <lsm303agr_xl_operating_mode_get+0x30>
    ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003b08:	f107 0210 	add.w	r2, r7, #16
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	2123      	movs	r1, #35	; 0x23
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7ff ffb9 	bl	8003a88 <lsm303agr_read_reg>
 8003b16:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4_a, 1);
  }

  if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ) {
 8003b18:	7b3b      	ldrb	r3, [r7, #12]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <lsm303agr_xl_operating_mode_get+0x44>
    *val = LSM303AGR_LP_8bit;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2202      	movs	r2, #2
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	e00c      	b.n	8003b46 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
 8003b2c:	7c3b      	ldrb	r3, [r7, #16]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <lsm303agr_xl_operating_mode_get+0x58>
    *val = LSM303AGR_HR_12bit;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e002      	b.n	8003b46 <lsm303agr_xl_operating_mode_get+0x5e>
  }

  else {
    *val = LSM303AGR_NM_10bit;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8003b46:	697b      	ldr	r3, [r7, #20]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <lsm303agr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t val)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	460b      	mov	r3, r1
 8003b5a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003b5c:	f107 0208 	add.w	r2, r7, #8
 8003b60:	2301      	movs	r3, #1
 8003b62:	2120      	movs	r1, #32
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff ff8f 	bl	8003a88 <lsm303agr_read_reg>
 8003b6a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  if (ret == 0) {
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <lsm303agr_xl_data_rate_set+0x42>
    ctrl_reg1_a.odr = (uint8_t)val;
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	7a3b      	ldrb	r3, [r7, #8]
 8003b7c:	f362 1307 	bfi	r3, r2, #4, #4
 8003b80:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003b82:	f107 0208 	add.w	r2, r7, #8
 8003b86:	2301      	movs	r3, #1
 8003b88:	2120      	movs	r1, #32
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ff94 	bl	8003ab8 <lsm303agr_write_reg>
 8003b90:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg1_a, 1);
  }

  return ret;
 8003b92:	68fb      	ldr	r3, [r7, #12]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <lsm303agr_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_data_rate_get(stmdev_ctx_t *ctx,
                                   lsm303agr_odr_a_t *val)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
 8003ba6:	f107 0208 	add.w	r2, r7, #8
 8003baa:	2301      	movs	r3, #1
 8003bac:	2120      	movs	r1, #32
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ff6a 	bl	8003a88 <lsm303agr_read_reg>
 8003bb4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg1_a, 1);

  switch (ctrl_reg1_a.odr) {
 8003bb6:	7a3b      	ldrb	r3, [r7, #8]
 8003bb8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b09      	cmp	r3, #9
 8003bc0:	d83e      	bhi.n	8003c40 <lsm303agr_xl_data_rate_get+0xa4>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <lsm303agr_xl_data_rate_get+0x2c>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003bf1 	.word	0x08003bf1
 8003bcc:	08003bf9 	.word	0x08003bf9
 8003bd0:	08003c01 	.word	0x08003c01
 8003bd4:	08003c09 	.word	0x08003c09
 8003bd8:	08003c11 	.word	0x08003c11
 8003bdc:	08003c19 	.word	0x08003c19
 8003be0:	08003c21 	.word	0x08003c21
 8003be4:	08003c29 	.word	0x08003c29
 8003be8:	08003c31 	.word	0x08003c31
 8003bec:	08003c39 	.word	0x08003c39
    case LSM303AGR_XL_POWER_DOWN:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
      break;
 8003bf6:	e027      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1Hz:
      *val = LSM303AGR_XL_ODR_1Hz;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
      break;
 8003bfe:	e023      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_10Hz:
      *val = LSM303AGR_XL_ODR_10Hz;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	2202      	movs	r2, #2
 8003c04:	701a      	strb	r2, [r3, #0]
      break;
 8003c06:	e01f      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_25Hz:
      *val = LSM303AGR_XL_ODR_25Hz;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	701a      	strb	r2, [r3, #0]
      break;
 8003c0e:	e01b      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_50Hz:
      *val = LSM303AGR_XL_ODR_50Hz;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2204      	movs	r2, #4
 8003c14:	701a      	strb	r2, [r3, #0]
      break;
 8003c16:	e017      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_100Hz:
      *val = LSM303AGR_XL_ODR_100Hz;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2205      	movs	r2, #5
 8003c1c:	701a      	strb	r2, [r3, #0]
      break;
 8003c1e:	e013      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_200Hz:
      *val = LSM303AGR_XL_ODR_200Hz;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	2206      	movs	r2, #6
 8003c24:	701a      	strb	r2, [r3, #0]
      break;
 8003c26:	e00f      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_400Hz:
      *val = LSM303AGR_XL_ODR_400Hz;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	701a      	strb	r2, [r3, #0]
      break;
 8003c2e:	e00b      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz620_LP:
      *val = LSM303AGR_XL_ODR_1kHz620_LP;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2208      	movs	r2, #8
 8003c34:	701a      	strb	r2, [r3, #0]
      break;
 8003c36:	e007      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
      *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2209      	movs	r2, #9
 8003c3c:	701a      	strb	r2, [r3, #0]
      break;
 8003c3e:	e003      	b.n	8003c48 <lsm303agr_xl_data_rate_get+0xac>

    default:
      *val = LSM303AGR_XL_POWER_DOWN;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
      break;
 8003c46:	bf00      	nop
  }

  return ret;
 8003c48:	68fb      	ldr	r3, [r7, #12]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop

08003c54 <lsm303agr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t val)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003c60:	f107 0208 	add.w	r2, r7, #8
 8003c64:	2301      	movs	r3, #1
 8003c66:	2123      	movs	r1, #35	; 0x23
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ff0d 	bl	8003a88 <lsm303agr_read_reg>
 8003c6e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <lsm303agr_xl_full_scale_set+0x42>
    ctrl_reg4_a.fs = (uint8_t)val;
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 0303 	and.w	r3, r3, #3
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	7a3b      	ldrb	r3, [r7, #8]
 8003c80:	f362 1305 	bfi	r3, r2, #4, #2
 8003c84:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003c86:	f107 0208 	add.w	r2, r7, #8
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	2123      	movs	r1, #35	; 0x23
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7ff ff12 	bl	8003ab8 <lsm303agr_write_reg>
 8003c94:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003c96:	68fb      	ldr	r3, [r7, #12]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <lsm303agr_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_full_scale_get(stmdev_ctx_t *ctx,
                                    lsm303agr_fs_a_t *val)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003caa:	f107 0208 	add.w	r2, r7, #8
 8003cae:	2301      	movs	r3, #1
 8003cb0:	2123      	movs	r1, #35	; 0x23
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff fee8 	bl	8003a88 <lsm303agr_read_reg>
 8003cb8:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  switch (ctrl_reg4_a.fs) {
 8003cba:	7a3b      	ldrb	r3, [r7, #8]
 8003cbc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d81a      	bhi.n	8003cfc <lsm303agr_xl_full_scale_get+0x5c>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <lsm303agr_xl_full_scale_get+0x2c>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ce5 	.word	0x08003ce5
 8003cd4:	08003ced 	.word	0x08003ced
 8003cd8:	08003cf5 	.word	0x08003cf5
    case LSM303AGR_2g:
      *val = LSM303AGR_2g;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]
      break;
 8003ce2:	e00f      	b.n	8003d04 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_4g:
      *val = LSM303AGR_4g;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
      break;
 8003cea:	e00b      	b.n	8003d04 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_8g:
      *val = LSM303AGR_8g;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	701a      	strb	r2, [r3, #0]
      break;
 8003cf2:	e007      	b.n	8003d04 <lsm303agr_xl_full_scale_get+0x64>

    case LSM303AGR_16g:
      *val = LSM303AGR_16g;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	701a      	strb	r2, [r3, #0]
      break;
 8003cfa:	e003      	b.n	8003d04 <lsm303agr_xl_full_scale_get+0x64>

    default:
      *val = LSM303AGR_2g;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
      break;
 8003d02:	bf00      	nop
  }

  return ret;
 8003d04:	68fb      	ldr	r3, [r7, #12]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop

08003d10 <lsm303agr_xl_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_block_data_update_set(stmdev_ctx_t *ctx,
                                           uint8_t val)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
  lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003d1c:	f107 0208 	add.w	r2, r7, #8
 8003d20:	2301      	movs	r3, #1
 8003d22:	2123      	movs	r1, #35	; 0x23
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff feaf 	bl	8003a88 <lsm303agr_read_reg>
 8003d2a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl_reg4_a, 1);

  if (ret == 0) {
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10f      	bne.n	8003d52 <lsm303agr_xl_block_data_update_set+0x42>
    ctrl_reg4_a.bdu = (uint8_t)val;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	7a3b      	ldrb	r3, [r7, #8]
 8003d3c:	f362 13c7 	bfi	r3, r2, #7, #1
 8003d40:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
 8003d42:	f107 0208 	add.w	r2, r7, #8
 8003d46:	2301      	movs	r3, #1
 8003d48:	2123      	movs	r1, #35	; 0x23
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff feb4 	bl	8003ab8 <lsm303agr_write_reg>
 8003d50:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl_reg4_a, 1);
  }

  return ret;
 8003d52:	68fb      	ldr	r3, [r7, #12]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <lsm303agr_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
 8003d66:	f107 020c 	add.w	r2, r7, #12
 8003d6a:	2306      	movs	r3, #6
 8003d6c:	2128      	movs	r1, #40	; 0x28
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7ff fe8a 	bl	8003a88 <lsm303agr_read_reg>
 8003d74:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003d76:	7b7b      	ldrb	r3, [r7, #13]
 8003d78:	b21a      	sxth	r2, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	7b3b      	ldrb	r3, [r7, #12]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	b21a      	sxth	r2, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	b212      	sxth	r2, r2
 8003da0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	3302      	adds	r3, #2
 8003da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	021b      	lsls	r3, r3, #8
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	7bbb      	ldrb	r3, [r7, #14]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	4413      	add	r3, r2
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	3302      	adds	r3, #2
 8003dbc:	b212      	sxth	r2, r2
 8003dbe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003dc0:	7c7a      	ldrb	r2, [r7, #17]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	b212      	sxth	r2, r2
 8003dc8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	021b      	lsls	r3, r3, #8
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	7c3b      	ldrb	r3, [r7, #16]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	3304      	adds	r3, #4
 8003de4:	b212      	sxth	r2, r2
 8003de6:	801a      	strh	r2, [r3, #0]
  return ret;
 8003de8:	697b      	ldr	r3, [r7, #20]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <lsm303agr_mag_operating_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_operating_mode_set(stmdev_ctx_t *ctx,
                                         lsm303agr_md_m_t val)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003dfe:	f107 0208 	add.w	r2, r7, #8
 8003e02:	2301      	movs	r3, #1
 8003e04:	2160      	movs	r1, #96	; 0x60
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fe3e 	bl	8003a88 <lsm303agr_read_reg>
 8003e0c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10f      	bne.n	8003e34 <lsm303agr_mag_operating_mode_set+0x42>
    cfg_reg_a_m.md = (uint8_t)val;
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	f003 0303 	and.w	r3, r3, #3
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	7a3b      	ldrb	r3, [r7, #8]
 8003e1e:	f362 0301 	bfi	r3, r2, #0, #2
 8003e22:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003e24:	f107 0208 	add.w	r2, r7, #8
 8003e28:	2301      	movs	r3, #1
 8003e2a:	2160      	movs	r1, #96	; 0x60
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fe43 	bl	8003ab8 <lsm303agr_write_reg>
 8003e32:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003e34:	68fb      	ldr	r3, [r7, #12]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <lsm303agr_mag_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_set(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t val)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003e4a:	f107 0208 	add.w	r2, r7, #8
 8003e4e:	2301      	movs	r3, #1
 8003e50:	2160      	movs	r1, #96	; 0x60
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff fe18 	bl	8003a88 <lsm303agr_read_reg>
 8003e58:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  if (ret == 0) {
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10f      	bne.n	8003e80 <lsm303agr_mag_data_rate_set+0x42>
    cfg_reg_a_m.odr = (uint8_t)val;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	7a3b      	ldrb	r3, [r7, #8]
 8003e6a:	f362 0383 	bfi	r3, r2, #2, #2
 8003e6e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003e70:	f107 0208 	add.w	r2, r7, #8
 8003e74:	2301      	movs	r3, #1
 8003e76:	2160      	movs	r1, #96	; 0x60
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff fe1d 	bl	8003ab8 <lsm303agr_write_reg>
 8003e7e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_a_m, 1);
  }

  return ret;
 8003e80:	68fb      	ldr	r3, [r7, #12]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <lsm303agr_mag_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_data_rate_get(stmdev_ctx_t *ctx,
                                    lsm303agr_mg_odr_m_t *val)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
 8003e96:	f107 0208 	add.w	r2, r7, #8
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	2160      	movs	r1, #96	; 0x60
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fdf2 	bl	8003a88 <lsm303agr_read_reg>
 8003ea4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_a_m, 1);

  switch (cfg_reg_a_m.odr) {
 8003ea6:	7a3b      	ldrb	r3, [r7, #8]
 8003ea8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d81a      	bhi.n	8003ee8 <lsm303agr_mag_data_rate_get+0x5c>
 8003eb2:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <lsm303agr_mag_data_rate_get+0x2c>)
 8003eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003ed1 	.word	0x08003ed1
 8003ec0:	08003ed9 	.word	0x08003ed9
 8003ec4:	08003ee1 	.word	0x08003ee1
    case LSM303AGR_MG_ODR_10Hz:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	701a      	strb	r2, [r3, #0]
      break;
 8003ece:	e00f      	b.n	8003ef0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_20Hz:
      *val = LSM303AGR_MG_ODR_20Hz;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
      break;
 8003ed6:	e00b      	b.n	8003ef0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_50Hz:
      *val = LSM303AGR_MG_ODR_50Hz;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	2202      	movs	r2, #2
 8003edc:	701a      	strb	r2, [r3, #0]
      break;
 8003ede:	e007      	b.n	8003ef0 <lsm303agr_mag_data_rate_get+0x64>

    case LSM303AGR_MG_ODR_100Hz:
      *val = LSM303AGR_MG_ODR_100Hz;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	701a      	strb	r2, [r3, #0]
      break;
 8003ee6:	e003      	b.n	8003ef0 <lsm303agr_mag_data_rate_get+0x64>

    default:
      *val = LSM303AGR_MG_ODR_10Hz;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
      break;
 8003eee:	bf00      	nop
  }

  return ret;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop

08003efc <lsm303agr_mag_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_block_data_update_set(stmdev_ctx_t *ctx,
                                            uint8_t val)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003f08:	f107 0208 	add.w	r2, r7, #8
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	2162      	movs	r1, #98	; 0x62
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff fdb9 	bl	8003a88 <lsm303agr_read_reg>
 8003f16:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <lsm303agr_mag_block_data_update_set+0x42>
    cfg_reg_c_m.bdu = (uint8_t)val;
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	7a3b      	ldrb	r3, [r7, #8]
 8003f28:	f362 1304 	bfi	r3, r2, #4, #1
 8003f2c:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8003f2e:	f107 0208 	add.w	r2, r7, #8
 8003f32:	2301      	movs	r3, #1
 8003f34:	2162      	movs	r1, #98	; 0x62
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff fdbe 	bl	8003ab8 <lsm303agr_write_reg>
 8003f3c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <lsm303agr_magnetic_raw_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
 8003f52:	f107 020c 	add.w	r2, r7, #12
 8003f56:	2306      	movs	r3, #6
 8003f58:	2168      	movs	r1, #104	; 0x68
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fd94 	bl	8003a88 <lsm303agr_read_reg>
 8003f60:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003f62:	7b7b      	ldrb	r3, [r7, #13]
 8003f64:	b21a      	sxth	r2, r3
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	7b3b      	ldrb	r3, [r7, #12]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	b21a      	sxth	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	3302      	adds	r3, #2
 8003f8a:	b212      	sxth	r2, r2
 8003f8c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	3302      	adds	r3, #2
 8003f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	021b      	lsls	r3, r3, #8
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	7bbb      	ldrb	r3, [r7, #14]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	b212      	sxth	r2, r2
 8003faa:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003fac:	7c7a      	ldrb	r2, [r7, #17]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	b212      	sxth	r2, r2
 8003fb4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	021b      	lsls	r3, r3, #8
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	7c3b      	ldrb	r3, [r7, #16]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	4413      	add	r3, r2
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	b212      	sxth	r2, r2
 8003fd2:	801a      	strh	r2, [r3, #0]
  return ret;
 8003fd4:	697b      	ldr	r3, [r7, #20]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <lsm303agr_xl_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
 8003fe8:	2301      	movs	r3, #1
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	210f      	movs	r1, #15
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fd4a 	bl	8003a88 <lsm303agr_read_reg>
 8003ff4:	60f8      	str	r0, [r7, #12]
  return ret;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <lsm303agr_mag_device_id_get>:
  * @param  buff   Buffer that stores data read.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
 800400a:	2301      	movs	r3, #1
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	214f      	movs	r1, #79	; 0x4f
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fd39 	bl	8003a88 <lsm303agr_read_reg>
 8004016:	60f8      	str	r0, [r7, #12]
  return ret;
 8004018:	68fb      	ldr	r3, [r7, #12]
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <lsm303agr_mag_self_test_set>:
  * @param  val    Change the values of self_test in reg CFG_REG_C_M
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	460b      	mov	r3, r1
 800402c:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 800402e:	f107 0208 	add.w	r2, r7, #8
 8004032:	2301      	movs	r3, #1
 8004034:	2162      	movs	r1, #98	; 0x62
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fd26 	bl	8003a88 <lsm303agr_read_reg>
 800403c:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10f      	bne.n	8004064 <lsm303agr_mag_self_test_set+0x42>
    cfg_reg_c_m.self_test = (uint8_t)val;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	7a3b      	ldrb	r3, [r7, #8]
 800404e:	f362 0341 	bfi	r3, r2, #1, #1
 8004052:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 8004054:	f107 0208 	add.w	r2, r7, #8
 8004058:	2301      	movs	r3, #1
 800405a:	2162      	movs	r1, #98	; 0x62
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fd2b 	bl	8003ab8 <lsm303agr_write_reg>
 8004062:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 8004064:	68fb      	ldr	r3, [r7, #12]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <lsm303agr_xl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_xl_fifo_mode_set(stmdev_ctx_t *ctx,
                                   lsm303agr_fm_a_t val)
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b084      	sub	sp, #16
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	460b      	mov	r3, r1
 8004078:	70fb      	strb	r3, [r7, #3]
  lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 800407a:	f107 0208 	add.w	r2, r7, #8
 800407e:	2301      	movs	r3, #1
 8004080:	212e      	movs	r1, #46	; 0x2e
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7ff fd00 	bl	8003a88 <lsm303agr_read_reg>
 8004088:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&fifo_ctrl_reg_a, 1);

  if (ret == 0) {
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10f      	bne.n	80040b0 <lsm303agr_xl_fifo_mode_set+0x42>
    fifo_ctrl_reg_a.fm = (uint8_t)val;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	b2da      	uxtb	r2, r3
 8004098:	7a3b      	ldrb	r3, [r7, #8]
 800409a:	f362 1387 	bfi	r3, r2, #6, #2
 800409e:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
 80040a0:	f107 0208 	add.w	r2, r7, #8
 80040a4:	2301      	movs	r3, #1
 80040a6:	212e      	movs	r1, #46	; 0x2e
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff fd05 	bl	8003ab8 <lsm303agr_write_reg>
 80040ae:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&fifo_ctrl_reg_a, 1);
  }

  return ret;
 80040b0:	68fb      	ldr	r3, [r7, #12]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <lsm303agr_mag_i2c_interface_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm303agr_mag_i2c_interface_set(stmdev_ctx_t *ctx,
                                        lsm303agr_i2c_dis_m_t val)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	70fb      	strb	r3, [r7, #3]
  lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
  int32_t ret;
  ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80040c6:	f107 0208 	add.w	r2, r7, #8
 80040ca:	2301      	movs	r3, #1
 80040cc:	2162      	movs	r1, #98	; 0x62
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fcda 	bl	8003a88 <lsm303agr_read_reg>
 80040d4:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&cfg_reg_c_m, 1);

  if (ret == 0) {
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10f      	bne.n	80040fc <lsm303agr_mag_i2c_interface_set+0x42>
    cfg_reg_c_m.i2c_dis = (uint8_t)val;
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	7a3b      	ldrb	r3, [r7, #8]
 80040e6:	f362 1345 	bfi	r3, r2, #5, #1
 80040ea:	723b      	strb	r3, [r7, #8]
    ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
 80040ec:	f107 0208 	add.w	r2, r7, #8
 80040f0:	2301      	movs	r3, #1
 80040f2:	2162      	movs	r1, #98	; 0x62
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fcdf 	bl	8003ab8 <lsm303agr_write_reg>
 80040fa:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&cfg_reg_c_m, 1);
  }

  return ret;
 80040fc:	68fb      	ldr	r3, [r7, #12]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d103      	bne.n	8004124 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 800411c:	f04f 33ff 	mov.w	r3, #4294967295
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e04d      	b.n	80041c0 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	7b1a      	ldrb	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	699a      	ldr	r2, [r3, #24]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1b      	ldr	r2, [pc, #108]	; (80041cc <LSM6DSL_RegisterBusIO+0xc4>)
 8004160:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <LSM6DSL_RegisterBusIO+0xc8>)
 8004166:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d103      	bne.n	800417e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e020      	b.n	80041c0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4798      	blx	r3
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e016      	b.n	80041c0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d112      	bne.n	80041c0 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10d      	bne.n	80041c0 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80041a4:	230c      	movs	r3, #12
 80041a6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 80041a8:	7afb      	ldrb	r3, [r7, #11]
 80041aa:	461a      	mov	r2, r3
 80041ac:	2112      	movs	r1, #18
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fd2d 	bl	8004c0e <LSM6DSL_Write_Reg>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295
 80041be:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80041c0:	68fb      	ldr	r3, [r7, #12]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	0800507d 	.word	0x0800507d
 80041d0:	080050b3 	.word	0x080050b3

080041d4 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	331c      	adds	r3, #28
 80041e0:	2101      	movs	r1, #1
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 fa59 	bl	800569a <lsm6dsl_auto_increment_set>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80041ee:	f04f 33ff 	mov.w	r3, #4294967295
 80041f2:	e054      	b.n	800429e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	331c      	adds	r3, #28
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f980 	bl	8005500 <lsm6dsl_block_data_update_set>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	e048      	b.n	800429e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	331c      	adds	r3, #28
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f001 fa67 	bl	80056e6 <lsm6dsl_fifo_mode_set>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	e03c      	b.n	800429e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2204      	movs	r2, #4
 8004228:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	331c      	adds	r3, #28
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f000 ffe6 	bl	8005204 <lsm6dsl_xl_data_rate_set>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295
 8004242:	e02c      	b.n	800429e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	331c      	adds	r3, #28
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f000 ff7c 	bl	8005148 <lsm6dsl_xl_full_scale_set>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	e020      	b.n	800429e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2204      	movs	r2, #4
 8004260:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	331c      	adds	r3, #28
 8004268:	2100      	movs	r1, #0
 800426a:	4618      	mov	r0, r3
 800426c:	f001 f8c0 	bl	80053f0 <lsm6dsl_gy_data_rate_set>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8004276:	f04f 33ff 	mov.w	r3, #4294967295
 800427a:	e010      	b.n	800429e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	331c      	adds	r3, #28
 8004280:	2106      	movs	r1, #6
 8004282:	4618      	mov	r0, r3
 8004284:	f001 f84c 	bl	8005320 <lsm6dsl_gy_full_scale_set>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	e004      	b.n	800429e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <LSM6DSL_DeInit>:
 * @brief  Deinitialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b082      	sub	sp, #8
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f888 	bl	80043c4 <LSM6DSL_ACC_Disable>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <LSM6DSL_DeInit+0x1a>
  {
    return LSM6DSL_ERROR;
 80042ba:	f04f 33ff 	mov.w	r3, #4294967295
 80042be:	e015      	b.n	80042ec <LSM6DSL_DeInit+0x46>
  }

  if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fa9a 	bl	80047fa <LSM6DSL_GYRO_Disable>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <LSM6DSL_DeInit+0x2c>
  {
    return LSM6DSL_ERROR;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
 80042d0:	e00c      	b.n	80042ec <LSM6DSL_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	331c      	adds	r3, #28
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f001 f9b7 	bl	8005678 <lsm6dsl_device_id_get>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8004310:	f04f 33ff 	mov.w	r3, #4294967295
 8004314:	e000      	b.n	8004318 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <LSM6DSL_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSL sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2200      	movs	r2, #0
 800433a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004348:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2210      	movs	r2, #16
 800434e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	4a07      	ldr	r2, [pc, #28]	; (8004378 <LSM6DSL_GetCapabilities+0x58>)
 800435a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4a06      	ldr	r2, [pc, #24]	; (8004378 <LSM6DSL_GetCapabilities+0x58>)
 8004360:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	619a      	str	r2, [r3, #24]
  return LSM6DSL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	45d02000 	.word	0x45d02000

0800437c <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e014      	b.n	80043bc <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f103 021c 	add.w	r2, r3, #28
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f000 ff2f 	bl	8005204 <lsm6dsl_xl_data_rate_set>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295
 80043b0:	e004      	b.n	80043bc <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <LSM6DSL_ACC_Disable>:
 * @brief  Disable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <LSM6DSL_ACC_Disable+0x16>
  {
    return LSM6DSL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e01f      	b.n	800441a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f103 021c 	add.w	r2, r3, #28
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	332b      	adds	r3, #43	; 0x2b
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 ff32 	bl	8005250 <lsm6dsl_xl_data_rate_get>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <LSM6DSL_ACC_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 80043f2:	f04f 33ff 	mov.w	r3, #4294967295
 80043f6:	e010      	b.n	800441a <LSM6DSL_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	331c      	adds	r3, #28
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 ff00 	bl	8005204 <lsm6dsl_xl_data_rate_set>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <LSM6DSL_ACC_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295
 800440e:	e004      	b.n	800441a <LSM6DSL_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	331c      	adds	r3, #28
 8004436:	f107 020b 	add.w	r2, r7, #11
 800443a:	4611      	mov	r1, r2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fea9 	bl	8005194 <lsm6dsl_xl_full_scale_get>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295
 800444c:	e023      	b.n	8004496 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 800444e:	7afb      	ldrb	r3, [r7, #11]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d81b      	bhi.n	800448c <LSM6DSL_ACC_GetSensitivity+0x68>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <LSM6DSL_ACC_GetSensitivity+0x38>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	0800446d 	.word	0x0800446d
 8004460:	08004485 	.word	0x08004485
 8004464:	08004475 	.word	0x08004475
 8004468:	0800447d 	.word	0x0800447d
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	4a0c      	ldr	r2, [pc, #48]	; (80044a0 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8004470:	601a      	str	r2, [r3, #0]
      break;
 8004472:	e00f      	b.n	8004494 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8004478:	601a      	str	r2, [r3, #0]
      break;
 800447a:	e00b      	b.n	8004494 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8004480:	601a      	str	r2, [r3, #0]
      break;
 8004482:	e007      	b.n	8004494 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4a09      	ldr	r2, [pc, #36]	; (80044ac <LSM6DSL_ACC_GetSensitivity+0x88>)
 8004488:	601a      	str	r2, [r3, #0]
      break;
 800448a:	e003      	b.n	8004494 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 800448c:	f04f 33ff 	mov.w	r3, #4294967295
 8004490:	60fb      	str	r3, [r7, #12]
      break;
 8004492:	bf00      	nop
  }

  return ret;
 8004494:	68fb      	ldr	r3, [r7, #12]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	3d79db23 	.word	0x3d79db23
 80044a4:	3df9db23 	.word	0x3df9db23
 80044a8:	3e79db23 	.word	0x3e79db23
 80044ac:	3ef9db23 	.word	0x3ef9db23

080044b0 <LSM6DSL_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	331c      	adds	r3, #28
 80044c2:	f107 020b 	add.w	r2, r7, #11
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fec1 	bl	8005250 <lsm6dsl_xl_data_rate_get>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <LSM6DSL_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 80044d4:	f04f 33ff 	mov.w	r3, #4294967295
 80044d8:	e054      	b.n	8004584 <LSM6DSL_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 80044da:	7afb      	ldrb	r3, [r7, #11]
 80044dc:	2b0b      	cmp	r3, #11
 80044de:	d84c      	bhi.n	800457a <LSM6DSL_ACC_GetOutputDataRate+0xca>
 80044e0:	a201      	add	r2, pc, #4	; (adr r2, 80044e8 <LSM6DSL_ACC_GetOutputDataRate+0x38>)
 80044e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e6:	bf00      	nop
 80044e8:	08004519 	.word	0x08004519
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	08004533 	.word	0x08004533
 80044f4:	0800453b 	.word	0x0800453b
 80044f8:	08004543 	.word	0x08004543
 80044fc:	0800454b 	.word	0x0800454b
 8004500:	08004553 	.word	0x08004553
 8004504:	0800455b 	.word	0x0800455b
 8004508:	08004563 	.word	0x08004563
 800450c:	0800456b 	.word	0x0800456b
 8004510:	08004573 	.word	0x08004573
 8004514:	08004523 	.word	0x08004523
  {
    case LSM6DSL_XL_ODR_OFF:
      *Odr = 0.0f;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
      break;
 8004520:	e02f      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <LSM6DSL_ACC_GetOutputDataRate+0xdc>)
 8004526:	601a      	str	r2, [r3, #0]
      break;
 8004528:	e02b      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	4a18      	ldr	r2, [pc, #96]	; (8004590 <LSM6DSL_ACC_GetOutputDataRate+0xe0>)
 800452e:	601a      	str	r2, [r3, #0]
      break;
 8004530:	e027      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_26Hz:
      *Odr = 26.0f;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	4a17      	ldr	r2, [pc, #92]	; (8004594 <LSM6DSL_ACC_GetOutputDataRate+0xe4>)
 8004536:	601a      	str	r2, [r3, #0]
      break;
 8004538:	e023      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_52Hz:
      *Odr = 52.0f;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	4a16      	ldr	r2, [pc, #88]	; (8004598 <LSM6DSL_ACC_GetOutputDataRate+0xe8>)
 800453e:	601a      	str	r2, [r3, #0]
      break;
 8004540:	e01f      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_104Hz:
      *Odr = 104.0f;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	4a15      	ldr	r2, [pc, #84]	; (800459c <LSM6DSL_ACC_GetOutputDataRate+0xec>)
 8004546:	601a      	str	r2, [r3, #0]
      break;
 8004548:	e01b      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_208Hz:
      *Odr = 208.0f;
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <LSM6DSL_ACC_GetOutputDataRate+0xf0>)
 800454e:	601a      	str	r2, [r3, #0]
      break;
 8004550:	e017      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_416Hz:
      *Odr = 416.0f;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <LSM6DSL_ACC_GetOutputDataRate+0xf4>)
 8004556:	601a      	str	r2, [r3, #0]
      break;
 8004558:	e013      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_833Hz:
      *Odr = 833.0f;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <LSM6DSL_ACC_GetOutputDataRate+0xf8>)
 800455e:	601a      	str	r2, [r3, #0]
      break;
 8004560:	e00f      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_1k66Hz:
      *Odr = 1660.0f;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	4a11      	ldr	r2, [pc, #68]	; (80045ac <LSM6DSL_ACC_GetOutputDataRate+0xfc>)
 8004566:	601a      	str	r2, [r3, #0]
      break;
 8004568:	e00b      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_3k33Hz:
      *Odr = 3330.0f;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	4a10      	ldr	r2, [pc, #64]	; (80045b0 <LSM6DSL_ACC_GetOutputDataRate+0x100>)
 800456e:	601a      	str	r2, [r3, #0]
      break;
 8004570:	e007      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    case LSM6DSL_XL_ODR_6k66Hz:
      *Odr = 6660.0f;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <LSM6DSL_ACC_GetOutputDataRate+0x104>)
 8004576:	601a      	str	r2, [r3, #0]
      break;
 8004578:	e003      	b.n	8004582 <LSM6DSL_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSL_ERROR;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	60fb      	str	r3, [r7, #12]
      break;
 8004580:	bf00      	nop
  }

  return ret;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	3fcccccd 	.word	0x3fcccccd
 8004590:	41480000 	.word	0x41480000
 8004594:	41d00000 	.word	0x41d00000
 8004598:	42500000 	.word	0x42500000
 800459c:	42d00000 	.word	0x42d00000
 80045a0:	43500000 	.word	0x43500000
 80045a4:	43d00000 	.word	0x43d00000
 80045a8:	44504000 	.word	0x44504000
 80045ac:	44cf8000 	.word	0x44cf8000
 80045b0:	45502000 	.word	0x45502000
 80045b4:	45d02000 	.word	0x45d02000

080045b8 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d106      	bne.n	80045dc <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 80045ce:	ed97 0a00 	vldr	s0, [r7]
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fb36 	bl	8004c44 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80045d8:	4603      	mov	r3, r0
 80045da:	e005      	b.n	80045e8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80045dc:	ed97 0a00 	vldr	s0, [r7]
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fbbb 	bl	8004d5c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80045e6:	4603      	mov	r3, r0
  }
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3708      	adds	r7, #8
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <LSM6DSL_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	331c      	adds	r3, #28
 8004602:	f107 020b 	add.w	r2, r7, #11
 8004606:	4611      	mov	r1, r2
 8004608:	4618      	mov	r0, r3
 800460a:	f000 fdc3 	bl	8005194 <lsm6dsl_xl_full_scale_get>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <LSM6DSL_ACC_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004614:	f04f 33ff 	mov.w	r3, #4294967295
 8004618:	e023      	b.n	8004662 <LSM6DSL_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	2b03      	cmp	r3, #3
 800461e:	d81b      	bhi.n	8004658 <LSM6DSL_ACC_GetFullScale+0x68>
 8004620:	a201      	add	r2, pc, #4	; (adr r2, 8004628 <LSM6DSL_ACC_GetFullScale+0x38>)
 8004622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004626:	bf00      	nop
 8004628:	08004639 	.word	0x08004639
 800462c:	08004651 	.word	0x08004651
 8004630:	08004641 	.word	0x08004641
 8004634:	08004649 	.word	0x08004649
  {
    case LSM6DSL_2g:
      *FullScale =  2;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2202      	movs	r2, #2
 800463c:	601a      	str	r2, [r3, #0]
      break;
 800463e:	e00f      	b.n	8004660 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_4g:
      *FullScale =  4;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2204      	movs	r2, #4
 8004644:	601a      	str	r2, [r3, #0]
      break;
 8004646:	e00b      	b.n	8004660 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_8g:
      *FullScale =  8;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2208      	movs	r2, #8
 800464c:	601a      	str	r2, [r3, #0]
      break;
 800464e:	e007      	b.n	8004660 <LSM6DSL_ACC_GetFullScale+0x70>

    case LSM6DSL_16g:
      *FullScale = 16;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2210      	movs	r2, #16
 8004654:	601a      	str	r2, [r3, #0]
      break;
 8004656:	e003      	b.n	8004660 <LSM6DSL_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8004658:	f04f 33ff 	mov.w	r3, #4294967295
 800465c:	60fb      	str	r3, [r7, #12]
      break;
 800465e:	bf00      	nop
  }

  return ret;
 8004660:	68fb      	ldr	r3, [r7, #12]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop

0800466c <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b02      	cmp	r3, #2
 800467a:	dd0b      	ble.n	8004694 <LSM6DSL_ACC_SetFullScale+0x28>
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b04      	cmp	r3, #4
 8004680:	dd06      	ble.n	8004690 <LSM6DSL_ACC_SetFullScale+0x24>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b08      	cmp	r3, #8
 8004686:	dc01      	bgt.n	800468c <LSM6DSL_ACC_SetFullScale+0x20>
 8004688:	2303      	movs	r3, #3
 800468a:	e004      	b.n	8004696 <LSM6DSL_ACC_SetFullScale+0x2a>
 800468c:	2301      	movs	r3, #1
 800468e:	e002      	b.n	8004696 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004690:	2302      	movs	r3, #2
 8004692:	e000      	b.n	8004696 <LSM6DSL_ACC_SetFullScale+0x2a>
 8004694:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8004696:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	331c      	adds	r3, #28
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	4611      	mov	r1, r2
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fd51 	bl	8005148 <lsm6dsl_xl_full_scale_set>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d002      	beq.n	80046b2 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80046ac:	f04f 33ff 	mov.w	r3, #4294967295
 80046b0:	e000      	b.n	80046b4 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	331c      	adds	r3, #28
 80046ca:	f107 0208 	add.w	r2, r7, #8
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 ff86 	bl	80055e2 <lsm6dsl_acceleration_raw_get>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d002      	beq.n	80046e2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80046dc:	f04f 33ff 	mov.w	r3, #4294967295
 80046e0:	e00c      	b.n	80046fc <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80046e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80046ea:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80046f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	331c      	adds	r3, #28
 8004718:	f107 0210 	add.w	r2, r7, #16
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f000 ff5f 	bl	80055e2 <lsm6dsl_acceleration_raw_get>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 800472a:	f04f 33ff 	mov.w	r3, #4294967295
 800472e:	e03c      	b.n	80047aa <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	4619      	mov	r1, r3
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fe74 	bl	8004424 <LSM6DSL_ACC_GetSensitivity>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8004742:	f04f 33ff 	mov.w	r3, #4294967295
 8004746:	e030      	b.n	80047aa <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004748:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004754:	edd7 7a03 	vldr	s15, [r7, #12]
 8004758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004760:	ee17 2a90 	vmov	r2, s15
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004768:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004774:	edd7 7a03 	vldr	s15, [r7, #12]
 8004778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004780:	ee17 2a90 	vmov	r2, s15
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004788:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004794:	edd7 7a03 	vldr	s15, [r7, #12]
 8004798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047a0:	ee17 2a90 	vmov	r2, s15
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <LSM6DSL_GYRO_Enable>:
 * @brief  Enable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d101      	bne.n	80047c8 <LSM6DSL_GYRO_Enable+0x16>
  {
    return LSM6DSL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e014      	b.n	80047f2 <LSM6DSL_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f103 021c 	add.w	r2, r3, #28
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f000 fe0a 	bl	80053f0 <lsm6dsl_gy_data_rate_set>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <LSM6DSL_GYRO_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
 80047e6:	e004      	b.n	80047f2 <LSM6DSL_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <LSM6DSL_GYRO_Disable>:
 * @brief  Disable the LSM6DSL gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <LSM6DSL_GYRO_Disable+0x16>
  {
    return LSM6DSL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	e01f      	b.n	8004850 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f103 021c 	add.w	r2, r3, #28
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	332c      	adds	r3, #44	; 0x2c
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f000 fe0d 	bl	800543c <lsm6dsl_gy_data_rate_get>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <LSM6DSL_GYRO_Disable+0x34>
  {
    return LSM6DSL_ERROR;
 8004828:	f04f 33ff 	mov.w	r3, #4294967295
 800482c:	e010      	b.n	8004850 <LSM6DSL_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	331c      	adds	r3, #28
 8004832:	2100      	movs	r1, #0
 8004834:	4618      	mov	r0, r3
 8004836:	f000 fddb 	bl	80053f0 <lsm6dsl_gy_data_rate_set>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <LSM6DSL_GYRO_Disable+0x4c>
  {
    return LSM6DSL_ERROR;
 8004840:	f04f 33ff 	mov.w	r3, #4294967295
 8004844:	e004      	b.n	8004850 <LSM6DSL_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <LSM6DSL_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	331c      	adds	r3, #28
 800486a:	f107 020b 	add.w	r2, r7, #11
 800486e:	4611      	mov	r1, r2
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fd7b 	bl	800536c <lsm6dsl_gy_full_scale_get>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <LSM6DSL_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 800487c:	f04f 33ff 	mov.w	r3, #4294967295
 8004880:	e02d      	b.n	80048de <LSM6DSL_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	2b06      	cmp	r3, #6
 8004886:	d825      	bhi.n	80048d4 <LSM6DSL_GYRO_GetSensitivity+0x7c>
 8004888:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <LSM6DSL_GYRO_GetSensitivity+0x38>)
 800488a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488e:	bf00      	nop
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048ad 	.word	0x080048ad
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048d5 	.word	0x080048d5
 80048a8:	080048cd 	.word	0x080048cd
  {
    case LSM6DSL_125dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	4a0e      	ldr	r2, [pc, #56]	; (80048e8 <LSM6DSL_GYRO_GetSensitivity+0x90>)
 80048b0:	601a      	str	r2, [r3, #0]
      break;
 80048b2:	e013      	b.n	80048dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_250dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <LSM6DSL_GYRO_GetSensitivity+0x94>)
 80048b8:	601a      	str	r2, [r3, #0]
      break;
 80048ba:	e00f      	b.n	80048dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_500dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	4a0c      	ldr	r2, [pc, #48]	; (80048f0 <LSM6DSL_GYRO_GetSensitivity+0x98>)
 80048c0:	601a      	str	r2, [r3, #0]
      break;
 80048c2:	e00b      	b.n	80048dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_1000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4a0b      	ldr	r2, [pc, #44]	; (80048f4 <LSM6DSL_GYRO_GetSensitivity+0x9c>)
 80048c8:	601a      	str	r2, [r3, #0]
      break;
 80048ca:	e007      	b.n	80048dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    case LSM6DSL_2000dps:
      *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <LSM6DSL_GYRO_GetSensitivity+0xa0>)
 80048d0:	601a      	str	r2, [r3, #0]
      break;
 80048d2:	e003      	b.n	80048dc <LSM6DSL_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSL_ERROR;
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295
 80048d8:	60fb      	str	r3, [r7, #12]
      break;
 80048da:	bf00      	nop
  }

  return ret;
 80048dc:	68fb      	ldr	r3, [r7, #12]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	408c0000 	.word	0x408c0000
 80048ec:	410c0000 	.word	0x410c0000
 80048f0:	418c0000 	.word	0x418c0000
 80048f4:	420c0000 	.word	0x420c0000
 80048f8:	428c0000 	.word	0x428c0000

080048fc <LSM6DSL_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
  lsm6dsl_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	331c      	adds	r3, #28
 800490e:	f107 020b 	add.w	r2, r7, #11
 8004912:	4611      	mov	r1, r2
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fd91 	bl	800543c <lsm6dsl_gy_data_rate_get>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <LSM6DSL_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSL_ERROR;
 8004920:	f04f 33ff 	mov.w	r3, #4294967295
 8004924:	e04e      	b.n	80049c4 <LSM6DSL_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8004926:	7afb      	ldrb	r3, [r7, #11]
 8004928:	2b0a      	cmp	r3, #10
 800492a:	d846      	bhi.n	80049ba <LSM6DSL_GYRO_GetOutputDataRate+0xbe>
 800492c:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <LSM6DSL_GYRO_GetOutputDataRate+0x38>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004961 	.word	0x08004961
 8004938:	0800496b 	.word	0x0800496b
 800493c:	08004973 	.word	0x08004973
 8004940:	0800497b 	.word	0x0800497b
 8004944:	08004983 	.word	0x08004983
 8004948:	0800498b 	.word	0x0800498b
 800494c:	08004993 	.word	0x08004993
 8004950:	0800499b 	.word	0x0800499b
 8004954:	080049a3 	.word	0x080049a3
 8004958:	080049ab 	.word	0x080049ab
 800495c:	080049b3 	.word	0x080049b3
  {
    case LSM6DSL_GY_ODR_OFF:
      *Odr = 0.0f;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
      break;
 8004968:	e02b      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	4a17      	ldr	r2, [pc, #92]	; (80049cc <LSM6DSL_GYRO_GetOutputDataRate+0xd0>)
 800496e:	601a      	str	r2, [r3, #0]
      break;
 8004970:	e027      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_26Hz:
      *Odr = 26.0f;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <LSM6DSL_GYRO_GetOutputDataRate+0xd4>)
 8004976:	601a      	str	r2, [r3, #0]
      break;
 8004978:	e023      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_52Hz:
      *Odr = 52.0f;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	4a15      	ldr	r2, [pc, #84]	; (80049d4 <LSM6DSL_GYRO_GetOutputDataRate+0xd8>)
 800497e:	601a      	str	r2, [r3, #0]
      break;
 8004980:	e01f      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_104Hz:
      *Odr = 104.0f;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	4a14      	ldr	r2, [pc, #80]	; (80049d8 <LSM6DSL_GYRO_GetOutputDataRate+0xdc>)
 8004986:	601a      	str	r2, [r3, #0]
      break;
 8004988:	e01b      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_208Hz:
      *Odr = 208.0f;
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	4a13      	ldr	r2, [pc, #76]	; (80049dc <LSM6DSL_GYRO_GetOutputDataRate+0xe0>)
 800498e:	601a      	str	r2, [r3, #0]
      break;
 8004990:	e017      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_416Hz:
      *Odr = 416.0f;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <LSM6DSL_GYRO_GetOutputDataRate+0xe4>)
 8004996:	601a      	str	r2, [r3, #0]
      break;
 8004998:	e013      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_833Hz:
      *Odr = 833.0f;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	4a11      	ldr	r2, [pc, #68]	; (80049e4 <LSM6DSL_GYRO_GetOutputDataRate+0xe8>)
 800499e:	601a      	str	r2, [r3, #0]
      break;
 80049a0:	e00f      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_1k66Hz:
      *Odr =  1660.0f;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <LSM6DSL_GYRO_GetOutputDataRate+0xec>)
 80049a6:	601a      	str	r2, [r3, #0]
      break;
 80049a8:	e00b      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_3k33Hz:
      *Odr =  3330.0f;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <LSM6DSL_GYRO_GetOutputDataRate+0xf0>)
 80049ae:	601a      	str	r2, [r3, #0]
      break;
 80049b0:	e007      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSL_GY_ODR_6k66Hz:
      *Odr =  6660.0f;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	4a0e      	ldr	r2, [pc, #56]	; (80049f0 <LSM6DSL_GYRO_GetOutputDataRate+0xf4>)
 80049b6:	601a      	str	r2, [r3, #0]
      break;
 80049b8:	e003      	b.n	80049c2 <LSM6DSL_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSL_ERROR;
 80049ba:	f04f 33ff 	mov.w	r3, #4294967295
 80049be:	60fb      	str	r3, [r7, #12]
      break;
 80049c0:	bf00      	nop
  }

  return ret;
 80049c2:	68fb      	ldr	r3, [r7, #12]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	41480000 	.word	0x41480000
 80049d0:	41d00000 	.word	0x41d00000
 80049d4:	42500000 	.word	0x42500000
 80049d8:	42d00000 	.word	0x42d00000
 80049dc:	43500000 	.word	0x43500000
 80049e0:	43d00000 	.word	0x43d00000
 80049e4:	44504000 	.word	0x44504000
 80049e8:	44cf8000 	.word	0x44cf8000
 80049ec:	45502000 	.word	0x45502000
 80049f0:	45d02000 	.word	0x45d02000

080049f4 <LSM6DSL_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->gyro_is_enabled == 1U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d106      	bne.n	8004a18 <LSM6DSL_GYRO_SetOutputDataRate+0x24>
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
 8004a0a:	ed97 0a00 	vldr	s0, [r7]
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa26 	bl	8004e60 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>
 8004a14:	4603      	mov	r3, r0
 8004a16:	e005      	b.n	8004a24 <LSM6DSL_GYRO_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
 8004a18:	ed97 0a00 	vldr	s0, [r7]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 faab 	bl	8004f78 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>
 8004a22:	4603      	mov	r3, r0
  }
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <LSM6DSL_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	331c      	adds	r3, #28
 8004a3e:	f107 020b 	add.w	r2, r7, #11
 8004a42:	4611      	mov	r1, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fc91 	bl	800536c <lsm6dsl_gy_full_scale_get>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <LSM6DSL_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSL_ERROR;
 8004a50:	f04f 33ff 	mov.w	r3, #4294967295
 8004a54:	e030      	b.n	8004ab8 <LSM6DSL_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	d828      	bhi.n	8004aae <LSM6DSL_GYRO_GetFullScale+0x82>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <LSM6DSL_GYRO_GetFullScale+0x38>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004a81 	.word	0x08004a81
 8004a6c:	08004a91 	.word	0x08004a91
 8004a70:	08004aaf 	.word	0x08004aaf
 8004a74:	08004a9b 	.word	0x08004a9b
 8004a78:	08004aaf 	.word	0x08004aaf
 8004a7c:	08004aa5 	.word	0x08004aa5
  {
    case LSM6DSL_125dps:
      *FullScale =  125;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	227d      	movs	r2, #125	; 0x7d
 8004a84:	601a      	str	r2, [r3, #0]
      break;
 8004a86:	e016      	b.n	8004ab6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_250dps:
      *FullScale =  250;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	22fa      	movs	r2, #250	; 0xfa
 8004a8c:	601a      	str	r2, [r3, #0]
      break;
 8004a8e:	e012      	b.n	8004ab6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_500dps:
      *FullScale =  500;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a96:	601a      	str	r2, [r3, #0]
      break;
 8004a98:	e00d      	b.n	8004ab6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_1000dps:
      *FullScale = 1000;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004aa0:	601a      	str	r2, [r3, #0]
      break;
 8004aa2:	e008      	b.n	8004ab6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    case LSM6DSL_2000dps:
      *FullScale = 2000;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004aaa:	601a      	str	r2, [r3, #0]
      break;
 8004aac:	e003      	b.n	8004ab6 <LSM6DSL_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSL_ERROR;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	60fb      	str	r3, [r7, #12]
      break;
 8004ab4:	bf00      	nop
  }

  return ret;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <LSM6DSL_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
           : (FullScale <= 250)  ? LSM6DSL_250dps
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b7d      	cmp	r3, #125	; 0x7d
 8004ace:	dd12      	ble.n	8004af6 <LSM6DSL_GYRO_SetFullScale+0x36>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2bfa      	cmp	r3, #250	; 0xfa
 8004ad4:	dd0d      	ble.n	8004af2 <LSM6DSL_GYRO_SetFullScale+0x32>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004adc:	dd07      	ble.n	8004aee <LSM6DSL_GYRO_SetFullScale+0x2e>
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ae4:	dc01      	bgt.n	8004aea <LSM6DSL_GYRO_SetFullScale+0x2a>
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	e006      	b.n	8004af8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004aea:	2306      	movs	r3, #6
 8004aec:	e004      	b.n	8004af8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e002      	b.n	8004af8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004af2:	2300      	movs	r3, #0
 8004af4:	e000      	b.n	8004af8 <LSM6DSL_GYRO_SetFullScale+0x38>
 8004af6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
 8004af8:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSL_500dps
           : (FullScale <= 1000) ? LSM6DSL_1000dps
           :                       LSM6DSL_2000dps;

  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	331c      	adds	r3, #28
 8004afe:	7bfa      	ldrb	r2, [r7, #15]
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fc0c 	bl	8005320 <lsm6dsl_gy_full_scale_set>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <LSM6DSL_GYRO_SetFullScale+0x54>
  {
    return LSM6DSL_ERROR;
 8004b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b12:	e000      	b.n	8004b16 <LSM6DSL_GYRO_SetFullScale+0x56>
  }

  return LSM6DSL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <LSM6DSL_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	331c      	adds	r3, #28
 8004b2c:	f107 0208 	add.w	r2, r7, #8
 8004b30:	4611      	mov	r1, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fd0a 	bl	800554c <lsm6dsl_angular_rate_raw_get>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <LSM6DSL_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8004b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b42:	e00c      	b.n	8004b5e <LSM6DSL_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8004b44:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004b4c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004b54:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <LSM6DSL_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b086      	sub	sp, #24
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity;

  /* Read raw data values. */
  if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	331c      	adds	r3, #28
 8004b74:	f107 0210 	add.w	r2, r7, #16
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fce6 	bl	800554c <lsm6dsl_angular_rate_raw_get>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <LSM6DSL_GYRO_GetAxes+0x26>
  {
    return LSM6DSL_ERROR;
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	e03c      	b.n	8004c06 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8004b8c:	f107 030c 	add.w	r3, r7, #12
 8004b90:	4619      	mov	r1, r3
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fe60 	bl	8004858 <LSM6DSL_GYRO_GetSensitivity>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <LSM6DSL_GYRO_GetAxes+0x3e>
  {
    return LSM6DSL_ERROR;
 8004b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba2:	e030      	b.n	8004c06 <LSM6DSL_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8004ba4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ba8:	ee07 3a90 	vmov	s15, r3
 8004bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bbc:	ee17 2a90 	vmov	r2, s15
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004bc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004bc8:	ee07 3a90 	vmov	s15, r3
 8004bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bdc:	ee17 2a90 	vmov	r2, s15
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8004be4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004be8:	ee07 3a90 	vmov	s15, r3
 8004bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bfc:	ee17 2a90 	vmov	r2, s15
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b082      	sub	sp, #8
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70fb      	strb	r3, [r7, #3]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f103 001c 	add.w	r0, r3, #28
 8004c24:	1cba      	adds	r2, r7, #2
 8004c26:	78f9      	ldrb	r1, [r7, #3]
 8004c28:	2301      	movs	r3, #1
 8004c2a:	f000 fa75 	bl	8005118 <lsm6dsl_write_reg>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8004c34:	f04f 33ff 	mov.w	r3, #4294967295
 8004c38:	e000      	b.n	8004c3c <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004c50:	edd7 7a00 	vldr	s15, [r7]
 8004c54:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c60:	d801      	bhi.n	8004c66 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e058      	b.n	8004d18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c66:	edd7 7a00 	vldr	s15, [r7]
 8004c6a:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c76:	d801      	bhi.n	8004c7c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e04d      	b.n	8004d18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c7c:	edd7 7a00 	vldr	s15, [r7]
 8004c80:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004d40 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8004c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c8c:	d801      	bhi.n	8004c92 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e042      	b.n	8004d18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004c92:	edd7 7a00 	vldr	s15, [r7]
 8004c96:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004d44 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8004c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca2:	d801      	bhi.n	8004ca8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8004ca4:	2304      	movs	r3, #4
 8004ca6:	e037      	b.n	8004d18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004ca8:	edd7 7a00 	vldr	s15, [r7]
 8004cac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004d48 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8004cb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb8:	d801      	bhi.n	8004cbe <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8004cba:	2305      	movs	r3, #5
 8004cbc:	e02c      	b.n	8004d18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004cbe:	edd7 7a00 	vldr	s15, [r7]
 8004cc2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004d4c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8004cc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	d801      	bhi.n	8004cd4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8004cd0:	2306      	movs	r3, #6
 8004cd2:	e021      	b.n	8004d18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004cd4:	edd7 7a00 	vldr	s15, [r7]
 8004cd8:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004d50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8004cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ce4:	d801      	bhi.n	8004cea <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8004ce6:	2307      	movs	r3, #7
 8004ce8:	e016      	b.n	8004d18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004cea:	edd7 7a00 	vldr	s15, [r7]
 8004cee:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004d54 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8004cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfa:	d801      	bhi.n	8004d00 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	e00b      	b.n	8004d18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004d00:	edd7 7a00 	vldr	s15, [r7]
 8004d04:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004d58 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8004d08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d10:	d801      	bhi.n	8004d16 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8004d12:	2309      	movs	r3, #9
 8004d14:	e000      	b.n	8004d18 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8004d16:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004d18:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	331c      	adds	r3, #28
 8004d1e:	7bfa      	ldrb	r2, [r7, #15]
 8004d20:	4611      	mov	r1, r2
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fa6e 	bl	8005204 <lsm6dsl_xl_data_rate_set>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	e000      	b.n	8004d36 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	42500000 	.word	0x42500000
 8004d44:	42d00000 	.word	0x42d00000
 8004d48:	43500000 	.word	0x43500000
 8004d4c:	43d00000 	.word	0x43d00000
 8004d50:	44504000 	.word	0x44504000
 8004d54:	44cf8000 	.word	0x44cf8000
 8004d58:	45502000 	.word	0x45502000

08004d5c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8004d68:	edd7 7a00 	vldr	s15, [r7]
 8004d6c:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d78:	d801      	bhi.n	8004d7e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e058      	b.n	8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d7e:	edd7 7a00 	vldr	s15, [r7]
 8004d82:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004d86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d8e:	d801      	bhi.n	8004d94 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e04d      	b.n	8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004d94:	edd7 7a00 	vldr	s15, [r7]
 8004d98:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8004e44 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004da4:	d801      	bhi.n	8004daa <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8004da6:	2303      	movs	r3, #3
 8004da8:	e042      	b.n	8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004daa:	edd7 7a00 	vldr	s15, [r7]
 8004dae:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e48 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8004db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dba:	d801      	bhi.n	8004dc0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8004dbc:	2304      	movs	r3, #4
 8004dbe:	e037      	b.n	8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004dc0:	edd7 7a00 	vldr	s15, [r7]
 8004dc4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8004e4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8004dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd0:	d801      	bhi.n	8004dd6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8004dd2:	2305      	movs	r3, #5
 8004dd4:	e02c      	b.n	8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004dd6:	edd7 7a00 	vldr	s15, [r7]
 8004dda:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004e50 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8004dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de6:	d801      	bhi.n	8004dec <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8004de8:	2306      	movs	r3, #6
 8004dea:	e021      	b.n	8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004dec:	edd7 7a00 	vldr	s15, [r7]
 8004df0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004e54 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfc:	d801      	bhi.n	8004e02 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8004dfe:	2307      	movs	r3, #7
 8004e00:	e016      	b.n	8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004e02:	edd7 7a00 	vldr	s15, [r7]
 8004e06:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004e58 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8004e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e12:	d801      	bhi.n	8004e18 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8004e14:	2308      	movs	r3, #8
 8004e16:	e00b      	b.n	8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004e18:	edd7 7a00 	vldr	s15, [r7]
 8004e1c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004e5c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e28:	d801      	bhi.n	8004e2e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8004e2a:	2309      	movs	r3, #9
 8004e2c:	e000      	b.n	8004e30 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004e2e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	42500000 	.word	0x42500000
 8004e48:	42d00000 	.word	0x42d00000
 8004e4c:	43500000 	.word	0x43500000
 8004e50:	43d00000 	.word	0x43d00000
 8004e54:	44504000 	.word	0x44504000
 8004e58:	44cf8000 	.word	0x44cf8000
 8004e5c:	45502000 	.word	0x45502000

08004e60 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004e6c:	edd7 7a00 	vldr	s15, [r7]
 8004e70:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	d801      	bhi.n	8004e82 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e058      	b.n	8004f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e82:	edd7 7a00 	vldr	s15, [r7]
 8004e86:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e92:	d801      	bhi.n	8004e98 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e04d      	b.n	8004f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004e98:	edd7 7a00 	vldr	s15, [r7]
 8004e9c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8004f5c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8004ea0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ea8:	d801      	bhi.n	8004eae <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e042      	b.n	8004f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004eae:	edd7 7a00 	vldr	s15, [r7]
 8004eb2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8004f60 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8004eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebe:	d801      	bhi.n	8004ec4 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8004ec0:	2304      	movs	r3, #4
 8004ec2:	e037      	b.n	8004f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ec4:	edd7 7a00 	vldr	s15, [r7]
 8004ec8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004f64 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8004ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed4:	d801      	bhi.n	8004eda <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8004ed6:	2305      	movs	r3, #5
 8004ed8:	e02c      	b.n	8004f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004eda:	edd7 7a00 	vldr	s15, [r7]
 8004ede:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004f68 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8004ee2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eea:	d801      	bhi.n	8004ef0 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8004eec:	2306      	movs	r3, #6
 8004eee:	e021      	b.n	8004f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004ef0:	edd7 7a00 	vldr	s15, [r7]
 8004ef4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004f6c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8004ef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f00:	d801      	bhi.n	8004f06 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8004f02:	2307      	movs	r3, #7
 8004f04:	e016      	b.n	8004f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004f06:	edd7 7a00 	vldr	s15, [r7]
 8004f0a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004f70 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8004f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f16:	d801      	bhi.n	8004f1c <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	e00b      	b.n	8004f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004f1c:	edd7 7a00 	vldr	s15, [r7]
 8004f20:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004f74 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8004f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2c:	d801      	bhi.n	8004f32 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8004f2e:	2309      	movs	r3, #9
 8004f30:	e000      	b.n	8004f34 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8004f32:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 8004f34:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
          :                    LSM6DSL_GY_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	331c      	adds	r3, #28
 8004f3a:	7bfa      	ldrb	r2, [r7, #15]
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fa56 	bl	80053f0 <lsm6dsl_gy_data_rate_set>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8004f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4e:	e000      	b.n	8004f52 <LSM6DSL_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	42500000 	.word	0x42500000
 8004f60:	42d00000 	.word	0x42d00000
 8004f64:	43500000 	.word	0x43500000
 8004f68:	43d00000 	.word	0x43d00000
 8004f6c:	44504000 	.word	0x44504000
 8004f70:	44cf8000 	.word	0x44cf8000
 8004f74:	45502000 	.word	0x45502000

08004f78 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
 8004f84:	edd7 7a00 	vldr	s15, [r7]
 8004f88:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8004f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f94:	d801      	bhi.n	8004f9a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8004f96:	2301      	movs	r3, #1
 8004f98:	e058      	b.n	800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004f9a:	edd7 7a00 	vldr	s15, [r7]
 8004f9e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004faa:	d801      	bhi.n	8004fb0 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8004fac:	2302      	movs	r3, #2
 8004fae:	e04d      	b.n	800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004fb0:	edd7 7a00 	vldr	s15, [r7]
 8004fb4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005060 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8004fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fc0:	d801      	bhi.n	8004fc6 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e042      	b.n	800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004fc6:	edd7 7a00 	vldr	s15, [r7]
 8004fca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8005064 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8004fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fd6:	d801      	bhi.n	8004fdc <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	e037      	b.n	800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004fdc:	edd7 7a00 	vldr	s15, [r7]
 8004fe0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005068 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8004fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fec:	d801      	bhi.n	8004ff2 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8004fee:	2305      	movs	r3, #5
 8004ff0:	e02c      	b.n	800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8004ff2:	edd7 7a00 	vldr	s15, [r7]
 8004ff6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800506c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8004ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005002:	d801      	bhi.n	8005008 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8005004:	2306      	movs	r3, #6
 8005006:	e021      	b.n	800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005008:	edd7 7a00 	vldr	s15, [r7]
 800500c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005070 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8005010:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005018:	d801      	bhi.n	800501e <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800501a:	2307      	movs	r3, #7
 800501c:	e016      	b.n	800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800501e:	edd7 7a00 	vldr	s15, [r7]
 8005022:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005074 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8005026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800502a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502e:	d801      	bhi.n	8005034 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8005030:	2308      	movs	r3, #8
 8005032:	e00b      	b.n	800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8005034:	edd7 7a00 	vldr	s15, [r7]
 8005038:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005078 <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800503c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005044:	d801      	bhi.n	800504a <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8005046:	2309      	movs	r3, #9
 8005048:	e000      	b.n	800504c <LSM6DSL_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800504a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
                 : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
                 : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
                 :                    LSM6DSL_GY_ODR_6k66Hz;

  return LSM6DSL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	42500000 	.word	0x42500000
 8005064:	42d00000 	.word	0x42d00000
 8005068:	43500000 	.word	0x43500000
 800506c:	43d00000 	.word	0x43d00000
 8005070:	44504000 	.word	0x44504000
 8005074:	44cf8000 	.word	0x44cf8000
 8005078:	45502000 	.word	0x45502000

0800507c <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	607a      	str	r2, [r7, #4]
 8005086:	461a      	mov	r2, r3
 8005088:	460b      	mov	r3, r1
 800508a:	72fb      	strb	r3, [r7, #11]
 800508c:	4613      	mov	r3, r2
 800508e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	695c      	ldr	r4, [r3, #20]
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	7b1b      	ldrb	r3, [r3, #12]
 800509c:	b298      	uxth	r0, r3
 800509e:	7afb      	ldrb	r3, [r7, #11]
 80050a0:	b299      	uxth	r1, r3
 80050a2:	893b      	ldrh	r3, [r7, #8]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	47a0      	blx	r4
 80050a8:	4603      	mov	r3, r0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd90      	pop	{r4, r7, pc}

080050b2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80050b2:	b590      	push	{r4, r7, lr}
 80050b4:	b087      	sub	sp, #28
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	461a      	mov	r2, r3
 80050be:	460b      	mov	r3, r1
 80050c0:	72fb      	strb	r3, [r7, #11]
 80050c2:	4613      	mov	r3, r2
 80050c4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	691c      	ldr	r4, [r3, #16]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	7b1b      	ldrb	r3, [r3, #12]
 80050d2:	b298      	uxth	r0, r3
 80050d4:	7afb      	ldrb	r3, [r7, #11]
 80050d6:	b299      	uxth	r1, r3
 80050d8:	893b      	ldrh	r3, [r7, #8]
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	47a0      	blx	r4
 80050de:	4603      	mov	r3, r0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd90      	pop	{r4, r7, pc}

080050e8 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	461a      	mov	r2, r3
 80050f4:	460b      	mov	r3, r1
 80050f6:	72fb      	strb	r3, [r7, #11]
 80050f8:	4613      	mov	r3, r2
 80050fa:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	685c      	ldr	r4, [r3, #4]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6898      	ldr	r0, [r3, #8]
 8005104:	893b      	ldrh	r3, [r7, #8]
 8005106:	7af9      	ldrb	r1, [r7, #11]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	47a0      	blx	r4
 800510c:	6178      	str	r0, [r7, #20]
  return ret;
 800510e:	697b      	ldr	r3, [r7, #20]
}
 8005110:	4618      	mov	r0, r3
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	bd90      	pop	{r4, r7, pc}

08005118 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	607a      	str	r2, [r7, #4]
 8005122:	461a      	mov	r2, r3
 8005124:	460b      	mov	r3, r1
 8005126:	72fb      	strb	r3, [r7, #11]
 8005128:	4613      	mov	r3, r2
 800512a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681c      	ldr	r4, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6898      	ldr	r0, [r3, #8]
 8005134:	893b      	ldrh	r3, [r7, #8]
 8005136:	7af9      	ldrb	r1, [r7, #11]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	47a0      	blx	r4
 800513c:	6178      	str	r0, [r7, #20]
  return ret;
 800513e:	697b      	ldr	r3, [r7, #20]
}
 8005140:	4618      	mov	r0, r3
 8005142:	371c      	adds	r7, #28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd90      	pop	{r4, r7, pc}

08005148 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005154:	f107 0208 	add.w	r2, r7, #8
 8005158:	2301      	movs	r3, #1
 800515a:	2110      	movs	r1, #16
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff ffc3 	bl	80050e8 <lsm6dsl_read_reg>
 8005162:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10f      	bne.n	800518a <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	b2da      	uxtb	r2, r3
 8005172:	7a3b      	ldrb	r3, [r7, #8]
 8005174:	f362 0383 	bfi	r3, r2, #2, #2
 8005178:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800517a:	f107 0208 	add.w	r2, r7, #8
 800517e:	2301      	movs	r3, #1
 8005180:	2110      	movs	r1, #16
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff ffc8 	bl	8005118 <lsm6dsl_write_reg>
 8005188:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 800518a:	68fb      	ldr	r3, [r7, #12]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800519e:	f107 0208 	add.w	r2, r7, #8
 80051a2:	2301      	movs	r3, #1
 80051a4:	2110      	movs	r1, #16
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7ff ff9e 	bl	80050e8 <lsm6dsl_read_reg>
 80051ac:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 80051ae:	7a3b      	ldrb	r3, [r7, #8]
 80051b0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d81a      	bhi.n	80051f0 <lsm6dsl_xl_full_scale_get+0x5c>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <lsm6dsl_xl_full_scale_get+0x2c>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051d1 	.word	0x080051d1
 80051c4:	080051d9 	.word	0x080051d9
 80051c8:	080051e1 	.word	0x080051e1
 80051cc:	080051e9 	.word	0x080051e9
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
      break;
 80051d6:	e00f      	b.n	80051f8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
      break;
 80051de:	e00b      	b.n	80051f8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2202      	movs	r2, #2
 80051e4:	701a      	strb	r2, [r3, #0]
      break;
 80051e6:	e007      	b.n	80051f8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2203      	movs	r2, #3
 80051ec:	701a      	strb	r2, [r3, #0]
      break;
 80051ee:	e003      	b.n	80051f8 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2204      	movs	r2, #4
 80051f4:	701a      	strb	r2, [r3, #0]
      break;
 80051f6:	bf00      	nop
  }

  return ret;
 80051f8:	68fb      	ldr	r3, [r7, #12]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop

08005204 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005210:	f107 0208 	add.w	r2, r7, #8
 8005214:	2301      	movs	r3, #1
 8005216:	2110      	movs	r1, #16
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff ff65 	bl	80050e8 <lsm6dsl_read_reg>
 800521e:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10f      	bne.n	8005246 <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	f003 030f 	and.w	r3, r3, #15
 800522c:	b2da      	uxtb	r2, r3
 800522e:	7a3b      	ldrb	r3, [r7, #8]
 8005230:	f362 1307 	bfi	r3, r2, #4, #4
 8005234:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8005236:	f107 0208 	add.w	r2, r7, #8
 800523a:	2301      	movs	r3, #1
 800523c:	2110      	movs	r1, #16
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7ff ff6a 	bl	8005118 <lsm6dsl_write_reg>
 8005244:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8005246:	68fb      	ldr	r3, [r7, #12]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <lsm6dsl_xl_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t *val)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 800525a:	f107 0208 	add.w	r2, r7, #8
 800525e:	2301      	movs	r3, #1
 8005260:	2110      	movs	r1, #16
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff ff40 	bl	80050e8 <lsm6dsl_read_reg>
 8005268:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.odr_xl) {
 800526a:	7a3b      	ldrb	r3, [r7, #8]
 800526c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b0b      	cmp	r3, #11
 8005274:	d84a      	bhi.n	800530c <lsm6dsl_xl_data_rate_get+0xbc>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <lsm6dsl_xl_data_rate_get+0x2c>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	080052ad 	.word	0x080052ad
 8005280:	080052b5 	.word	0x080052b5
 8005284:	080052bd 	.word	0x080052bd
 8005288:	080052c5 	.word	0x080052c5
 800528c:	080052cd 	.word	0x080052cd
 8005290:	080052d5 	.word	0x080052d5
 8005294:	080052dd 	.word	0x080052dd
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052ed 	.word	0x080052ed
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	08005305 	.word	0x08005305
    case LSM6DSL_XL_ODR_OFF:
      *val = LSM6DSL_XL_ODR_OFF;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
      break;
 80052b2:	e02f      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_12Hz5:
      *val = LSM6DSL_XL_ODR_12Hz5;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	701a      	strb	r2, [r3, #0]
      break;
 80052ba:	e02b      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_26Hz:
      *val = LSM6DSL_XL_ODR_26Hz;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2202      	movs	r2, #2
 80052c0:	701a      	strb	r2, [r3, #0]
      break;
 80052c2:	e027      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_52Hz:
      *val = LSM6DSL_XL_ODR_52Hz;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	2203      	movs	r2, #3
 80052c8:	701a      	strb	r2, [r3, #0]
      break;
 80052ca:	e023      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_104Hz:
      *val = LSM6DSL_XL_ODR_104Hz;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	2204      	movs	r2, #4
 80052d0:	701a      	strb	r2, [r3, #0]
      break;
 80052d2:	e01f      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_208Hz:
      *val = LSM6DSL_XL_ODR_208Hz;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2205      	movs	r2, #5
 80052d8:	701a      	strb	r2, [r3, #0]
      break;
 80052da:	e01b      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_416Hz:
      *val = LSM6DSL_XL_ODR_416Hz;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2206      	movs	r2, #6
 80052e0:	701a      	strb	r2, [r3, #0]
      break;
 80052e2:	e017      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_833Hz:
      *val = LSM6DSL_XL_ODR_833Hz;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2207      	movs	r2, #7
 80052e8:	701a      	strb	r2, [r3, #0]
      break;
 80052ea:	e013      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1k66Hz:
      *val = LSM6DSL_XL_ODR_1k66Hz;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2208      	movs	r2, #8
 80052f0:	701a      	strb	r2, [r3, #0]
      break;
 80052f2:	e00f      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_3k33Hz:
      *val = LSM6DSL_XL_ODR_3k33Hz;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2209      	movs	r2, #9
 80052f8:	701a      	strb	r2, [r3, #0]
      break;
 80052fa:	e00b      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_6k66Hz:
      *val = LSM6DSL_XL_ODR_6k66Hz;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	220a      	movs	r2, #10
 8005300:	701a      	strb	r2, [r3, #0]
      break;
 8005302:	e007      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    case LSM6DSL_XL_ODR_1Hz6:
      *val = LSM6DSL_XL_ODR_1Hz6;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	220b      	movs	r2, #11
 8005308:	701a      	strb	r2, [r3, #0]
      break;
 800530a:	e003      	b.n	8005314 <lsm6dsl_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSL_XL_ODR_ND;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	220c      	movs	r2, #12
 8005310:	701a      	strb	r2, [r3, #0]
      break;
 8005312:	bf00      	nop
  }

  return ret;
 8005314:	68fb      	ldr	r3, [r7, #12]
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop

08005320 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800532c:	f107 0208 	add.w	r2, r7, #8
 8005330:	2301      	movs	r3, #1
 8005332:	2111      	movs	r1, #17
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fed7 	bl	80050e8 <lsm6dsl_read_reg>
 800533a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10f      	bne.n	8005362 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8005342:	78fb      	ldrb	r3, [r7, #3]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	b2da      	uxtb	r2, r3
 800534a:	7a3b      	ldrb	r3, [r7, #8]
 800534c:	f362 0343 	bfi	r3, r2, #1, #3
 8005350:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005352:	f107 0208 	add.w	r2, r7, #8
 8005356:	2301      	movs	r3, #1
 8005358:	2111      	movs	r1, #17
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff fedc 	bl	8005118 <lsm6dsl_write_reg>
 8005360:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <lsm6dsl_gy_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t *val)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005376:	f107 0208 	add.w	r2, r7, #8
 800537a:	2301      	movs	r3, #1
 800537c:	2111      	movs	r1, #17
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff feb2 	bl	80050e8 <lsm6dsl_read_reg>
 8005384:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.fs_g) {
 8005386:	7a3b      	ldrb	r3, [r7, #8]
 8005388:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b06      	cmp	r3, #6
 8005390:	d824      	bhi.n	80053dc <lsm6dsl_gy_full_scale_get+0x70>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <lsm6dsl_gy_full_scale_get+0x2c>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053b5 	.word	0x080053b5
 800539c:	080053bd 	.word	0x080053bd
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053dd 	.word	0x080053dd
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053dd 	.word	0x080053dd
 80053b0:	080053d5 	.word	0x080053d5
    case LSM6DSL_250dps:
      *val = LSM6DSL_250dps;
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
      break;
 80053ba:	e013      	b.n	80053e4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_125dps:
      *val = LSM6DSL_125dps;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
      break;
 80053c2:	e00f      	b.n	80053e4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_500dps:
      *val = LSM6DSL_500dps;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2202      	movs	r2, #2
 80053c8:	701a      	strb	r2, [r3, #0]
      break;
 80053ca:	e00b      	b.n	80053e4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_1000dps:
      *val = LSM6DSL_1000dps;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2204      	movs	r2, #4
 80053d0:	701a      	strb	r2, [r3, #0]
      break;
 80053d2:	e007      	b.n	80053e4 <lsm6dsl_gy_full_scale_get+0x78>

    case LSM6DSL_2000dps:
      *val = LSM6DSL_2000dps;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2206      	movs	r2, #6
 80053d8:	701a      	strb	r2, [r3, #0]
      break;
 80053da:	e003      	b.n	80053e4 <lsm6dsl_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSL_GY_FS_ND;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2207      	movs	r2, #7
 80053e0:	701a      	strb	r2, [r3, #0]
      break;
 80053e2:	bf00      	nop
  }

  return ret;
 80053e4:	68fb      	ldr	r3, [r7, #12]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3710      	adds	r7, #16
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop

080053f0 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80053fc:	f107 0208 	add.w	r2, r7, #8
 8005400:	2301      	movs	r3, #1
 8005402:	2111      	movs	r1, #17
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff fe6f 	bl	80050e8 <lsm6dsl_read_reg>
 800540a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10f      	bne.n	8005432 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8005412:	78fb      	ldrb	r3, [r7, #3]
 8005414:	f003 030f 	and.w	r3, r3, #15
 8005418:	b2da      	uxtb	r2, r3
 800541a:	7a3b      	ldrb	r3, [r7, #8]
 800541c:	f362 1307 	bfi	r3, r2, #4, #4
 8005420:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005422:	f107 0208 	add.w	r2, r7, #8
 8005426:	2301      	movs	r3, #1
 8005428:	2111      	movs	r1, #17
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff fe74 	bl	8005118 <lsm6dsl_write_reg>
 8005430:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005432:	68fb      	ldr	r3, [r7, #12]
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <lsm6dsl_gy_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t *val)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8005446:	f107 0208 	add.w	r2, r7, #8
 800544a:	2301      	movs	r3, #1
 800544c:	2111      	movs	r1, #17
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7ff fe4a 	bl	80050e8 <lsm6dsl_read_reg>
 8005454:	60f8      	str	r0, [r7, #12]

  switch (ctrl2_g.odr_g) {
 8005456:	7a3b      	ldrb	r3, [r7, #8]
 8005458:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b0a      	cmp	r3, #10
 8005460:	d844      	bhi.n	80054ec <lsm6dsl_gy_data_rate_get+0xb0>
 8005462:	a201      	add	r2, pc, #4	; (adr r2, 8005468 <lsm6dsl_gy_data_rate_get+0x2c>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	08005495 	.word	0x08005495
 800546c:	0800549d 	.word	0x0800549d
 8005470:	080054a5 	.word	0x080054a5
 8005474:	080054ad 	.word	0x080054ad
 8005478:	080054b5 	.word	0x080054b5
 800547c:	080054bd 	.word	0x080054bd
 8005480:	080054c5 	.word	0x080054c5
 8005484:	080054cd 	.word	0x080054cd
 8005488:	080054d5 	.word	0x080054d5
 800548c:	080054dd 	.word	0x080054dd
 8005490:	080054e5 	.word	0x080054e5
    case LSM6DSL_GY_ODR_OFF:
      *val = LSM6DSL_GY_ODR_OFF;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]
      break;
 800549a:	e02b      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_12Hz5:
      *val = LSM6DSL_GY_ODR_12Hz5;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	701a      	strb	r2, [r3, #0]
      break;
 80054a2:	e027      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_26Hz:
      *val = LSM6DSL_GY_ODR_26Hz;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	2202      	movs	r2, #2
 80054a8:	701a      	strb	r2, [r3, #0]
      break;
 80054aa:	e023      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_52Hz:
      *val = LSM6DSL_GY_ODR_52Hz;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2203      	movs	r2, #3
 80054b0:	701a      	strb	r2, [r3, #0]
      break;
 80054b2:	e01f      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_104Hz:
      *val = LSM6DSL_GY_ODR_104Hz;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2204      	movs	r2, #4
 80054b8:	701a      	strb	r2, [r3, #0]
      break;
 80054ba:	e01b      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_208Hz:
      *val = LSM6DSL_GY_ODR_208Hz;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	2205      	movs	r2, #5
 80054c0:	701a      	strb	r2, [r3, #0]
      break;
 80054c2:	e017      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_416Hz:
      *val = LSM6DSL_GY_ODR_416Hz;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2206      	movs	r2, #6
 80054c8:	701a      	strb	r2, [r3, #0]
      break;
 80054ca:	e013      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_833Hz:
      *val = LSM6DSL_GY_ODR_833Hz;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2207      	movs	r2, #7
 80054d0:	701a      	strb	r2, [r3, #0]
      break;
 80054d2:	e00f      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_1k66Hz:
      *val = LSM6DSL_GY_ODR_1k66Hz;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	2208      	movs	r2, #8
 80054d8:	701a      	strb	r2, [r3, #0]
      break;
 80054da:	e00b      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_3k33Hz:
      *val = LSM6DSL_GY_ODR_3k33Hz;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2209      	movs	r2, #9
 80054e0:	701a      	strb	r2, [r3, #0]
      break;
 80054e2:	e007      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    case LSM6DSL_GY_ODR_6k66Hz:
      *val = LSM6DSL_GY_ODR_6k66Hz;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	220a      	movs	r2, #10
 80054e8:	701a      	strb	r2, [r3, #0]
      break;
 80054ea:	e003      	b.n	80054f4 <lsm6dsl_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSL_GY_ODR_ND;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	220b      	movs	r2, #11
 80054f0:	701a      	strb	r2, [r3, #0]
      break;
 80054f2:	bf00      	nop
  }

  return ret;
 80054f4:	68fb      	ldr	r3, [r7, #12]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop

08005500 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800550c:	f107 0208 	add.w	r2, r7, #8
 8005510:	2301      	movs	r3, #1
 8005512:	2112      	movs	r1, #18
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f7ff fde7 	bl	80050e8 <lsm6dsl_read_reg>
 800551a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10f      	bne.n	8005542 <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	b2da      	uxtb	r2, r3
 800552a:	7a3b      	ldrb	r3, [r7, #8]
 800552c:	f362 1386 	bfi	r3, r2, #6, #1
 8005530:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8005532:	f107 0208 	add.w	r2, r7, #8
 8005536:	2301      	movs	r3, #1
 8005538:	2112      	movs	r1, #18
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fdec 	bl	8005118 <lsm6dsl_write_reg>
 8005540:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005542:	68fb      	ldr	r3, [r7, #12]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8005556:	f107 020c 	add.w	r2, r7, #12
 800555a:	2306      	movs	r3, #6
 800555c:	2122      	movs	r1, #34	; 0x22
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff fdc2 	bl	80050e8 <lsm6dsl_read_reg>
 8005564:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005566:	7b7b      	ldrb	r3, [r7, #13]
 8005568:	b21a      	sxth	r2, r3
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005574:	b29b      	uxth	r3, r3
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	b29a      	uxth	r2, r3
 800557a:	7b3b      	ldrb	r3, [r7, #12]
 800557c:	b29b      	uxth	r3, r3
 800557e:	4413      	add	r3, r2
 8005580:	b29b      	uxth	r3, r3
 8005582:	b21a      	sxth	r2, r3
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005588:	7bfa      	ldrb	r2, [r7, #15]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	3302      	adds	r3, #2
 800558e:	b212      	sxth	r2, r2
 8005590:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	3302      	adds	r3, #2
 8005596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800559a:	b29b      	uxth	r3, r3
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	b29a      	uxth	r2, r3
 80055a0:	7bbb      	ldrb	r3, [r7, #14]
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	3302      	adds	r3, #2
 80055ac:	b212      	sxth	r2, r2
 80055ae:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80055b0:	7c7a      	ldrb	r2, [r7, #17]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	3304      	adds	r3, #4
 80055b6:	b212      	sxth	r2, r2
 80055b8:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	3304      	adds	r3, #4
 80055be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	7c3b      	ldrb	r3, [r7, #16]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	4413      	add	r3, r2
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	3304      	adds	r3, #4
 80055d4:	b212      	sxth	r2, r2
 80055d6:	801a      	strh	r2, [r3, #0]
  return ret;
 80055d8:	697b      	ldr	r3, [r7, #20]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b086      	sub	sp, #24
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80055ec:	f107 020c 	add.w	r2, r7, #12
 80055f0:	2306      	movs	r3, #6
 80055f2:	2128      	movs	r1, #40	; 0x28
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff fd77 	bl	80050e8 <lsm6dsl_read_reg>
 80055fa:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80055fc:	7b7b      	ldrb	r3, [r7, #13]
 80055fe:	b21a      	sxth	r2, r3
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800560a:	b29b      	uxth	r3, r3
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	b29a      	uxth	r2, r3
 8005610:	7b3b      	ldrb	r3, [r7, #12]
 8005612:	b29b      	uxth	r3, r3
 8005614:	4413      	add	r3, r2
 8005616:	b29b      	uxth	r3, r3
 8005618:	b21a      	sxth	r2, r3
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	3302      	adds	r3, #2
 8005624:	b212      	sxth	r2, r2
 8005626:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	3302      	adds	r3, #2
 800562c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005630:	b29b      	uxth	r3, r3
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	b29a      	uxth	r2, r3
 8005636:	7bbb      	ldrb	r3, [r7, #14]
 8005638:	b29b      	uxth	r3, r3
 800563a:	4413      	add	r3, r2
 800563c:	b29a      	uxth	r2, r3
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	3302      	adds	r3, #2
 8005642:	b212      	sxth	r2, r2
 8005644:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005646:	7c7a      	ldrb	r2, [r7, #17]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	3304      	adds	r3, #4
 800564c:	b212      	sxth	r2, r2
 800564e:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	3304      	adds	r3, #4
 8005654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005658:	b29b      	uxth	r3, r3
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	b29a      	uxth	r2, r3
 800565e:	7c3b      	ldrb	r3, [r7, #16]
 8005660:	b29b      	uxth	r3, r3
 8005662:	4413      	add	r3, r2
 8005664:	b29a      	uxth	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	3304      	adds	r3, #4
 800566a:	b212      	sxth	r2, r2
 800566c:	801a      	strh	r2, [r3, #0]
  return ret;
 800566e:	697b      	ldr	r3, [r7, #20]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8005682:	2301      	movs	r3, #1
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	210f      	movs	r1, #15
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f7ff fd2d 	bl	80050e8 <lsm6dsl_read_reg>
 800568e:	60f8      	str	r0, [r7, #12]
  return ret;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	460b      	mov	r3, r1
 80056a4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80056a6:	f107 0208 	add.w	r2, r7, #8
 80056aa:	2301      	movs	r3, #1
 80056ac:	2112      	movs	r1, #18
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fd1a 	bl	80050e8 <lsm6dsl_read_reg>
 80056b4:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10f      	bne.n	80056dc <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 80056bc:	78fb      	ldrb	r3, [r7, #3]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	7a3b      	ldrb	r3, [r7, #8]
 80056c6:	f362 0382 	bfi	r3, r2, #2, #1
 80056ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80056cc:	f107 0208 	add.w	r2, r7, #8
 80056d0:	2301      	movs	r3, #1
 80056d2:	2112      	movs	r1, #18
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff fd1f 	bl	8005118 <lsm6dsl_write_reg>
 80056da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80056dc:	68fb      	ldr	r3, [r7, #12]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	460b      	mov	r3, r1
 80056f0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80056f2:	f107 0208 	add.w	r2, r7, #8
 80056f6:	2301      	movs	r3, #1
 80056f8:	210a      	movs	r1, #10
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7ff fcf4 	bl	80050e8 <lsm6dsl_read_reg>
 8005700:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10f      	bne.n	8005728 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	b2da      	uxtb	r2, r3
 8005710:	7a3b      	ldrb	r3, [r7, #8]
 8005712:	f362 0302 	bfi	r3, r2, #0, #3
 8005716:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8005718:	f107 0208 	add.w	r2, r7, #8
 800571c:	2301      	movs	r3, #1
 800571e:	210a      	movs	r1, #10
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f7ff fcf9 	bl	8005118 <lsm6dsl_write_reg>
 8005726:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8005728:	68fb      	ldr	r3, [r7, #12]
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <IKS01A2_MOTION_SENSOR_Init>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08e      	sub	sp, #56	; 0x38
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800573e:	2300      	movs	r3, #0
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005742:	2301      	movs	r3, #1
 8005744:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A2_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d06e      	beq.n	800582e <IKS01A2_MOTION_SENSOR_Init+0xfa>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b02      	cmp	r3, #2
 8005754:	f200 809d 	bhi.w	8005892 <IKS01A2_MOTION_SENSOR_Init+0x15e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <IKS01A2_MOTION_SENSOR_Init+0x32>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d032      	beq.n	80057ca <IKS01A2_MOTION_SENSOR_Init+0x96>
 8005764:	e095      	b.n	8005892 <IKS01A2_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A2_MOTION_SENSOR_LSM6DSL_0 == 1)
    case IKS01A2_LSM6DSL_0:
      if (LSM6DSL_0_Probe(Functions) != BSP_ERROR_NONE)
 8005766:	6838      	ldr	r0, [r7, #0]
 8005768:	f000 fa32 	bl	8005bd0 <LSM6DSL_0_Probe>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <IKS01A2_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8005772:	f04f 33ff 	mov.w	r3, #4294967295
 8005776:	e0cc      	b.n	8005912 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005778:	4a68      	ldr	r2, [pc, #416]	; (800591c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	4967      	ldr	r1, [pc, #412]	; (8005920 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800578a:	f107 010c 	add.w	r1, r7, #12
 800578e:	4610      	mov	r0, r2
 8005790:	4798      	blx	r3
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <IKS01A2_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005798:	f06f 0306 	mvn.w	r3, #6
 800579c:	e0b9      	b.n	8005912 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 800579e:	7b3b      	ldrb	r3, [r7, #12]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d103      	bne.n	80057ac <IKS01A2_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	f043 0302 	orr.w	r3, r3, #2
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80057ac:	7b7b      	ldrb	r3, [r7, #13]
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d103      	bne.n	80057ba <IKS01A2_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80057ba:	7bbb      	ldrb	r3, [r7, #14]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d16c      	bne.n	800589a <IKS01A2_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	f043 0304 	orr.w	r3, r3, #4
 80057c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80057c8:	e067      	b.n	800589a <IKS01A2_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_ACC_0 == 1)
    case IKS01A2_LSM303AGR_ACC_0:
      if (LSM303AGR_ACC_0_Probe(Functions) != BSP_ERROR_NONE)
 80057ca:	6838      	ldr	r0, [r7, #0]
 80057cc:	f000 fabc 	bl	8005d48 <LSM303AGR_ACC_0_Probe>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <IKS01A2_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 80057d6:	f04f 33ff 	mov.w	r3, #4294967295
 80057da:	e09a      	b.n	8005912 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80057dc:	4a4f      	ldr	r2, [pc, #316]	; (800591c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	494e      	ldr	r1, [pc, #312]	; (8005920 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80057ee:	f107 010c 	add.w	r1, r7, #12
 80057f2:	4610      	mov	r0, r2
 80057f4:	4798      	blx	r3
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <IKS01A2_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80057fc:	f06f 0306 	mvn.w	r3, #6
 8005800:	e087      	b.n	8005912 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005802:	7b3b      	ldrb	r3, [r7, #12]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d103      	bne.n	8005810 <IKS01A2_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8005808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580a:	f043 0302 	orr.w	r3, r3, #2
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005810:	7b7b      	ldrb	r3, [r7, #13]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d103      	bne.n	800581e <IKS01A2_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800581e:	7bbb      	ldrb	r3, [r7, #14]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d13c      	bne.n	800589e <IKS01A2_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	f043 0304 	orr.w	r3, r3, #4
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800582c:	e037      	b.n	800589e <IKS01A2_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A2_MOTION_SENSOR_LSM303AGR_MAG_0 == 1)
    case IKS01A2_LSM303AGR_MAG_0:
      if (LSM303AGR_MAG_0_Probe(Functions) != BSP_ERROR_NONE)
 800582e:	6838      	ldr	r0, [r7, #0]
 8005830:	f000 fb2e 	bl	8005e90 <LSM303AGR_MAG_0_Probe>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <IKS01A2_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 800583a:	f04f 33ff 	mov.w	r3, #4294967295
 800583e:	e068      	b.n	8005912 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005840:	4a36      	ldr	r2, [pc, #216]	; (800591c <IKS01A2_MOTION_SENSOR_Init+0x1e8>)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	4935      	ldr	r1, [pc, #212]	; (8005920 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005852:	f107 010c 	add.w	r1, r7, #12
 8005856:	4610      	mov	r0, r2
 8005858:	4798      	blx	r3
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <IKS01A2_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005860:	f06f 0306 	mvn.w	r3, #6
 8005864:	e055      	b.n	8005912 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8005866:	7b3b      	ldrb	r3, [r7, #12]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d103      	bne.n	8005874 <IKS01A2_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	f043 0302 	orr.w	r3, r3, #2
 8005872:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005874:	7b7b      	ldrb	r3, [r7, #13]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d103      	bne.n	8005882 <IKS01A2_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	f043 0301 	orr.w	r3, r3, #1
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005882:	7bbb      	ldrb	r3, [r7, #14]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d10c      	bne.n	80058a2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	f043 0304 	orr.w	r3, r3, #4
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005890:	e007      	b.n	80058a2 <IKS01A2_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005892:	f06f 0301 	mvn.w	r3, #1
 8005896:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005898:	e004      	b.n	80058a4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800589a:	bf00      	nop
 800589c:	e002      	b.n	80058a4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <IKS01A2_MOTION_SENSOR_Init+0x170>
      break;
 80058a2:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80058a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <IKS01A2_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80058aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ac:	e031      	b.n	8005912 <IKS01A2_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b2:	e02a      	b.n	800590a <IKS01A2_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	4013      	ands	r3, r2
 80058ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058bc:	429a      	cmp	r2, r3
 80058be:	d11e      	bne.n	80058fe <IKS01A2_MOTION_SENSOR_Init+0x1ca>
 80058c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	4013      	ands	r3, r2
 80058c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d118      	bne.n	80058fe <IKS01A2_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <IKS01A2_MOTION_SENSOR_Init+0x1f0>)
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058d4:	4814      	ldr	r0, [pc, #80]	; (8005928 <IKS01A2_MOTION_SENSOR_Init+0x1f4>)
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4613      	mov	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	4413      	add	r3, r2
 80058de:	440b      	add	r3, r1
 80058e0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	490e      	ldr	r1, [pc, #56]	; (8005920 <IKS01A2_MOTION_SENSOR_Init+0x1ec>)
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80058ee:	4610      	mov	r0, r2
 80058f0:	4798      	blx	r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <IKS01A2_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80058f8:	f06f 0304 	mvn.w	r3, #4
 80058fc:	e009      	b.n	8005912 <IKS01A2_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A2_MOTION_FUNCTIONS_NBR; i++)
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	3301      	adds	r3, #1
 8005908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	2b02      	cmp	r3, #2
 800590e:	d9d1      	bls.n	80058b4 <IKS01A2_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005912:	4618      	mov	r0, r3
 8005914:	3738      	adds	r7, #56	; 0x38
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20001110 	.word	0x20001110
 8005920:	200014f4 	.word	0x200014f4
 8005924:	200000d0 	.word	0x200000d0
 8005928:	200010ec 	.word	0x200010ec

0800592c <IKS01A2_MOTION_SENSOR_Enable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d903      	bls.n	8005944 <IKS01A2_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800593c:	f06f 0301 	mvn.w	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e028      	b.n	8005996 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005944:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <IKS01A2_MOTION_SENSOR_Enable+0x74>)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	4013      	ands	r3, r2
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d11c      	bne.n	8005990 <IKS01A2_MOTION_SENSOR_Enable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005956:	4a13      	ldr	r2, [pc, #76]	; (80059a4 <IKS01A2_MOTION_SENSOR_Enable+0x78>)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800595e:	4812      	ldr	r0, [pc, #72]	; (80059a8 <IKS01A2_MOTION_SENSOR_Enable+0x7c>)
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4413      	add	r3, r2
 8005968:	440b      	add	r3, r1
 800596a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	490e      	ldr	r1, [pc, #56]	; (80059ac <IKS01A2_MOTION_SENSOR_Enable+0x80>)
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005978:	4610      	mov	r0, r2
 800597a:	4798      	blx	r3
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <IKS01A2_MOTION_SENSOR_Enable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005982:	f06f 0304 	mvn.w	r3, #4
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	e005      	b.n	8005996 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	e002      	b.n	8005996 <IKS01A2_MOTION_SENSOR_Enable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005990:	f06f 0301 	mvn.w	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	2000111c 	.word	0x2000111c
 80059a4:	200000d0 	.word	0x200000d0
 80059a8:	200010ec 	.word	0x200010ec
 80059ac:	200014f4 	.word	0x200014f4

080059b0 <IKS01A2_MOTION_SENSOR_Disable>:
 *         - MOTION_ACCELERO for instance 1
 *         - MOTION_MAGNETO for instance 2
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d903      	bls.n	80059c8 <IKS01A2_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80059c0:	f06f 0301 	mvn.w	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	e028      	b.n	8005a1a <IKS01A2_MOTION_SENSOR_Disable+0x6a>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <IKS01A2_MOTION_SENSOR_Disable+0x74>)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	4013      	ands	r3, r2
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d11c      	bne.n	8005a14 <IKS01A2_MOTION_SENSOR_Disable+0x64>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80059da:	4a13      	ldr	r2, [pc, #76]	; (8005a28 <IKS01A2_MOTION_SENSOR_Disable+0x78>)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059e2:	4812      	ldr	r0, [pc, #72]	; (8005a2c <IKS01A2_MOTION_SENSOR_Disable+0x7c>)
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	4413      	add	r3, r2
 80059ec:	440b      	add	r3, r1
 80059ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	490e      	ldr	r1, [pc, #56]	; (8005a30 <IKS01A2_MOTION_SENSOR_Disable+0x80>)
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059fc:	4610      	mov	r0, r2
 80059fe:	4798      	blx	r3
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <IKS01A2_MOTION_SENSOR_Disable+0x5e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a06:	f06f 0304 	mvn.w	r3, #4
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e005      	b.n	8005a1a <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e002      	b.n	8005a1a <IKS01A2_MOTION_SENSOR_Disable+0x6a>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005a14:	f06f 0301 	mvn.w	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	2000111c 	.word	0x2000111c
 8005a28:	200000d0 	.word	0x200000d0
 8005a2c:	200010ec 	.word	0x200010ec
 8005a30:	200014f4 	.word	0x200014f4

08005a34 <IKS01A2_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A2_MOTION_SENSOR_Axes_t *Axes)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d903      	bls.n	8005a4e <IKS01A2_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a46:	f06f 0301 	mvn.w	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e029      	b.n	8005aa2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <IKS01A2_MOTION_SENSOR_GetAxes+0x78>)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	4013      	ands	r3, r2
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d11d      	bne.n	8005a9c <IKS01A2_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005a60:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <IKS01A2_MOTION_SENSOR_GetAxes+0x7c>)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005a68:	4812      	ldr	r0, [pc, #72]	; (8005ab4 <IKS01A2_MOTION_SENSOR_GetAxes+0x80>)
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	4413      	add	r3, r2
 8005a72:	440b      	add	r3, r1
 8005a74:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	490f      	ldr	r1, [pc, #60]	; (8005ab8 <IKS01A2_MOTION_SENSOR_GetAxes+0x84>)
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005a82:	6879      	ldr	r1, [r7, #4]
 8005a84:	4610      	mov	r0, r2
 8005a86:	4798      	blx	r3
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d003      	beq.n	8005a96 <IKS01A2_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a8e:	f06f 0304 	mvn.w	r3, #4
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e005      	b.n	8005aa2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e002      	b.n	8005aa2 <IKS01A2_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005a9c:	f06f 0301 	mvn.w	r3, #1
 8005aa0:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005aa2:	697b      	ldr	r3, [r7, #20]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	2000111c 	.word	0x2000111c
 8005ab0:	200000d0 	.word	0x200000d0
 8005ab4:	200010ec 	.word	0x200010ec
 8005ab8:	200014f4 	.word	0x200014f4

08005abc <IKS01A2_MOTION_SENSOR_SetOutputDataRate>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Odr Output Data Rate value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d903      	bls.n	8005ad8 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005ad0:	f06f 0301 	mvn.w	r3, #1
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e02a      	b.n	8005b2e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005ad8:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d11e      	bne.n	8005b28 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8005aea:	4a14      	ldr	r2, [pc, #80]	; (8005b3c <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005af2:	4813      	ldr	r0, [pc, #76]	; (8005b40 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4613      	mov	r3, r2
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	4413      	add	r3, r2
 8005afc:	440b      	add	r3, r1
 8005afe:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	490f      	ldr	r1, [pc, #60]	; (8005b44 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b0c:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b10:	4610      	mov	r0, r2
 8005b12:	4798      	blx	r3
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005b1a:	f06f 0304 	mvn.w	r3, #4
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	e005      	b.n	8005b2e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	e002      	b.n	8005b2e <IKS01A2_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005b28:	f06f 0301 	mvn.w	r3, #1
 8005b2c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005b2e:	697b      	ldr	r3, [r7, #20]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	2000111c 	.word	0x2000111c
 8005b3c:	200000d0 	.word	0x200000d0
 8005b40:	200010ec 	.word	0x200010ec
 8005b44:	200014f4 	.word	0x200014f4

08005b48 <IKS01A2_MOTION_SENSOR_SetFullScale>:
 *         - MOTION_MAGNETO for instance 2
 * @param  Fullscale Fullscale value to be set
 * @retval BSP status
 */
int32_t IKS01A2_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A2_MOTION_INSTANCES_NBR)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d903      	bls.n	8005b62 <IKS01A2_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005b5a:	f06f 0301 	mvn.w	r3, #1
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e029      	b.n	8005bb6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005b62:	4a17      	ldr	r2, [pc, #92]	; (8005bc0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x78>)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d11d      	bne.n	8005bb0 <IKS01A2_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8005b74:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <IKS01A2_MOTION_SENSOR_SetFullScale+0x7c>)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b7c:	4812      	ldr	r0, [pc, #72]	; (8005bc8 <IKS01A2_MOTION_SENSOR_SetFullScale+0x80>)
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	4413      	add	r3, r2
 8005b86:	440b      	add	r3, r1
 8005b88:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	490f      	ldr	r1, [pc, #60]	; (8005bcc <IKS01A2_MOTION_SENSOR_SetFullScale+0x84>)
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4610      	mov	r0, r2
 8005b9a:	4798      	blx	r3
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <IKS01A2_MOTION_SENSOR_SetFullScale+0x62>
          Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ba2:	f06f 0304 	mvn.w	r3, #4
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e005      	b.n	8005bb6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005baa:	2300      	movs	r3, #0
 8005bac:	617b      	str	r3, [r7, #20]
 8005bae:	e002      	b.n	8005bb6 <IKS01A2_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005bb0:	f06f 0301 	mvn.w	r3, #1
 8005bb4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005bb6:	697b      	ldr	r3, [r7, #20]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3718      	adds	r7, #24
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	2000111c 	.word	0x2000111c
 8005bc4:	200000d0 	.word	0x200000d0
 8005bc8:	200010ec 	.word	0x200010ec
 8005bcc:	200014f4 	.word	0x200014f4

08005bd0 <LSM6DSL_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 0 if component ID is OK
 * @retval BSP status
 */
static int32_t LSM6DSL_0_Probe(uint32_t Functions)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b092      	sub	sp, #72	; 0x48
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  LSM6DSL_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSL_Object_t lsm6dsl_obj_0;
  LSM6DSL_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS; /* I2C */
 8005bdc:	2300      	movs	r3, #0
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSL_I2C_ADD_H;
 8005be0:	23d7      	movs	r3, #215	; 0xd7
 8005be2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005be6:	4b4a      	ldr	r3, [pc, #296]	; (8005d10 <LSM6DSL_0_Probe+0x140>)
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005bea:	4b4a      	ldr	r3, [pc, #296]	; (8005d14 <LSM6DSL_0_Probe+0x144>)
 8005bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005bee:	4b4a      	ldr	r3, [pc, #296]	; (8005d18 <LSM6DSL_0_Probe+0x148>)
 8005bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005bf2:	4b4a      	ldr	r3, [pc, #296]	; (8005d1c <LSM6DSL_0_Probe+0x14c>)
 8005bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005bf6:	4b4a      	ldr	r3, [pc, #296]	; (8005d20 <LSM6DSL_0_Probe+0x150>)
 8005bf8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSL_RegisterBusIO(&lsm6dsl_obj_0, &io_ctx) != LSM6DSL_OK)
 8005bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4848      	ldr	r0, [pc, #288]	; (8005d24 <LSM6DSL_0_Probe+0x154>)
 8005c02:	f7fe fa81 	bl	8004108 <LSM6DSL_RegisterBusIO>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <LSM6DSL_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c0c:	f06f 0306 	mvn.w	r3, #6
 8005c10:	647b      	str	r3, [r7, #68]	; 0x44
 8005c12:	e077      	b.n	8005d04 <LSM6DSL_0_Probe+0x134>
  }
  else if (LSM6DSL_ReadID(&lsm6dsl_obj_0, &id) != LSM6DSL_OK)
 8005c14:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005c18:	4619      	mov	r1, r3
 8005c1a:	4842      	ldr	r0, [pc, #264]	; (8005d24 <LSM6DSL_0_Probe+0x154>)
 8005c1c:	f7fe fb6a 	bl	80042f4 <LSM6DSL_ReadID>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <LSM6DSL_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c26:	f06f 0306 	mvn.w	r3, #6
 8005c2a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2c:	e06a      	b.n	8005d04 <LSM6DSL_0_Probe+0x134>
  }
  else if (id != LSM6DSL_ID)
 8005c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c32:	2b6a      	cmp	r3, #106	; 0x6a
 8005c34:	d003      	beq.n	8005c3e <LSM6DSL_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005c36:	f06f 0306 	mvn.w	r3, #6
 8005c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c3c:	e062      	b.n	8005d04 <LSM6DSL_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSL_GetCapabilities(&lsm6dsl_obj_0, &cap);
 8005c3e:	f107 0308 	add.w	r3, r7, #8
 8005c42:	4619      	mov	r1, r3
 8005c44:	4837      	ldr	r0, [pc, #220]	; (8005d24 <LSM6DSL_0_Probe+0x154>)
 8005c46:	f7fe fb6b 	bl	8004320 <LSM6DSL_GetCapabilities>
    MotionCtx[IKS01A2_LSM6DSL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005c4a:	7a7b      	ldrb	r3, [r7, #9]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	7a3b      	ldrb	r3, [r7, #8]
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	431a      	orrs	r2, r3
 8005c54:	7abb      	ldrb	r3, [r7, #10]
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	4a33      	ldr	r2, [pc, #204]	; (8005d28 <LSM6DSL_0_Probe+0x158>)
 8005c5c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A2_LSM6DSL_0] = &lsm6dsl_obj_0;
 8005c5e:	4b33      	ldr	r3, [pc, #204]	; (8005d2c <LSM6DSL_0_Probe+0x15c>)
 8005c60:	4a30      	ldr	r2, [pc, #192]	; (8005d24 <LSM6DSL_0_Probe+0x154>)
 8005c62:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM6DSL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSL_COMMON_Driver;
 8005c64:	4b32      	ldr	r3, [pc, #200]	; (8005d30 <LSM6DSL_0_Probe+0x160>)
 8005c66:	4a33      	ldr	r2, [pc, #204]	; (8005d34 <LSM6DSL_0_Probe+0x164>)
 8005c68:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11d      	bne.n	8005cac <LSM6DSL_0_Probe+0xdc>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d018      	beq.n	8005cac <LSM6DSL_0_Probe+0xdc>
 8005c7a:	7a7b      	ldrb	r3, [r7, #9]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d115      	bne.n	8005cac <LSM6DSL_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSL_GYRO_Driver;
 8005c80:	4b2d      	ldr	r3, [pc, #180]	; (8005d38 <LSM6DSL_0_Probe+0x168>)
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a2d      	ldr	r2, [pc, #180]	; (8005d3c <LSM6DSL_0_Probe+0x16c>)
 8005c86:	492e      	ldr	r1, [pc, #184]	; (8005d40 <LSM6DSL_0_Probe+0x170>)
 8005c88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005c8c:	4b28      	ldr	r3, [pc, #160]	; (8005d30 <LSM6DSL_0_Probe+0x160>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a26      	ldr	r2, [pc, #152]	; (8005d2c <LSM6DSL_0_Probe+0x15c>)
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	4610      	mov	r0, r2
 8005c98:	4798      	blx	r3
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <LSM6DSL_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ca0:	f06f 0304 	mvn.w	r3, #4
 8005ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca6:	e001      	b.n	8005cac <LSM6DSL_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11d      	bne.n	8005cee <LSM6DSL_0_Probe+0x11e>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d018      	beq.n	8005cee <LSM6DSL_0_Probe+0x11e>
 8005cbc:	7a3b      	ldrb	r3, [r7, #8]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d115      	bne.n	8005cee <LSM6DSL_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM6DSL_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005cc2:	4b1d      	ldr	r3, [pc, #116]	; (8005d38 <LSM6DSL_0_Probe+0x168>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	4a1d      	ldr	r2, [pc, #116]	; (8005d3c <LSM6DSL_0_Probe+0x16c>)
 8005cc8:	491e      	ldr	r1, [pc, #120]	; (8005d44 <LSM6DSL_0_Probe+0x174>)
 8005cca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM6DSL_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM6DSL_0]->Init(MotionCompObj[IKS01A2_LSM6DSL_0]) != LSM6DSL_OK)
 8005cce:	4b18      	ldr	r3, [pc, #96]	; (8005d30 <LSM6DSL_0_Probe+0x160>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <LSM6DSL_0_Probe+0x15c>)
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4798      	blx	r3
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <LSM6DSL_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ce2:	f06f 0304 	mvn.w	r3, #4
 8005ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce8:	e001      	b.n	8005cee <LSM6DSL_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d107      	bne.n	8005d04 <LSM6DSL_0_Probe+0x134>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d002      	beq.n	8005d04 <LSM6DSL_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cfe:	f06f 0304 	mvn.w	r3, #4
 8005d02:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8005d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3748      	adds	r7, #72	; 0x48
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	0800236d 	.word	0x0800236d
 8005d14:	080023e9 	.word	0x080023e9
 8005d18:	0800249d 	.word	0x0800249d
 8005d1c:	08002439 	.word	0x08002439
 8005d20:	08002501 	.word	0x08002501
 8005d24:	20001128 	.word	0x20001128
 8005d28:	2000111c 	.word	0x2000111c
 8005d2c:	200014f4 	.word	0x200014f4
 8005d30:	20001110 	.word	0x20001110
 8005d34:	20000078 	.word	0x20000078
 8005d38:	200000d0 	.word	0x200000d0
 8005d3c:	200010ec 	.word	0x200010ec
 8005d40:	200000ac 	.word	0x200000ac
 8005d44:	20000088 	.word	0x20000088

08005d48 <LSM303AGR_ACC_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 1 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_ACC_0_Probe(uint32_t Functions)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b092      	sub	sp, #72	; 0x48
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_ACC_Object_t lsm303agr_acc_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005d54:	2300      	movs	r3, #0
 8005d56:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_XL;
 8005d58:	2333      	movs	r3, #51	; 0x33
 8005d5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005d5e:	4b3f      	ldr	r3, [pc, #252]	; (8005e5c <LSM303AGR_ACC_0_Probe+0x114>)
 8005d60:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005d62:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <LSM303AGR_ACC_0_Probe+0x118>)
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005d66:	4b3f      	ldr	r3, [pc, #252]	; (8005e64 <LSM303AGR_ACC_0_Probe+0x11c>)
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005d6a:	4b3f      	ldr	r3, [pc, #252]	; (8005e68 <LSM303AGR_ACC_0_Probe+0x120>)
 8005d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005d6e:	4b3f      	ldr	r3, [pc, #252]	; (8005e6c <LSM303AGR_ACC_0_Probe+0x124>)
 8005d70:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_ACC_RegisterBusIO(&lsm303agr_acc_obj_0, &io_ctx) != LSM303AGR_OK)
 8005d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d76:	4619      	mov	r1, r3
 8005d78:	483d      	ldr	r0, [pc, #244]	; (8005e70 <LSM303AGR_ACC_0_Probe+0x128>)
 8005d7a:	f7fc fe0f 	bl	800299c <LSM303AGR_ACC_RegisterBusIO>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <LSM303AGR_ACC_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d84:	f06f 0306 	mvn.w	r3, #6
 8005d88:	647b      	str	r3, [r7, #68]	; 0x44
 8005d8a:	e062      	b.n	8005e52 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (LSM303AGR_ACC_ReadID(&lsm303agr_acc_obj_0, &id) != LSM303AGR_OK)
 8005d8c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005d90:	4619      	mov	r1, r3
 8005d92:	4837      	ldr	r0, [pc, #220]	; (8005e70 <LSM303AGR_ACC_0_Probe+0x128>)
 8005d94:	f7fc fec3 	bl	8002b1e <LSM303AGR_ACC_ReadID>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <LSM303AGR_ACC_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d9e:	f06f 0306 	mvn.w	r3, #6
 8005da2:	647b      	str	r3, [r7, #68]	; 0x44
 8005da4:	e055      	b.n	8005e52 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_XL)
 8005da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005daa:	2b33      	cmp	r3, #51	; 0x33
 8005dac:	d003      	beq.n	8005db6 <LSM303AGR_ACC_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dae:	f06f 0306 	mvn.w	r3, #6
 8005db2:	647b      	str	r3, [r7, #68]	; 0x44
 8005db4:	e04d      	b.n	8005e52 <LSM303AGR_ACC_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_ACC_GetCapabilities(&lsm303agr_acc_obj_0, &cap);
 8005db6:	f107 0308 	add.w	r3, r7, #8
 8005dba:	4619      	mov	r1, r3
 8005dbc:	482c      	ldr	r0, [pc, #176]	; (8005e70 <LSM303AGR_ACC_0_Probe+0x128>)
 8005dbe:	f7fc fec5 	bl	8002b4c <LSM303AGR_ACC_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005dc2:	7a7b      	ldrb	r3, [r7, #9]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	7a3b      	ldrb	r3, [r7, #8]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005dcc:	7abb      	ldrb	r3, [r7, #10]
 8005dce:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_ACC_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <LSM303AGR_ACC_0_Probe+0x12c>)
 8005dd4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A2_LSM303AGR_ACC_0] = &lsm303agr_acc_obj_0;
 8005dd6:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <LSM303AGR_ACC_0_Probe+0x130>)
 8005dd8:	4a25      	ldr	r2, [pc, #148]	; (8005e70 <LSM303AGR_ACC_0_Probe+0x128>)
 8005dda:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_ACC_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_ACC_COMMON_Driver;
 8005ddc:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <LSM303AGR_ACC_0_Probe+0x134>)
 8005dde:	4a28      	ldr	r2, [pc, #160]	; (8005e80 <LSM303AGR_ACC_0_Probe+0x138>)
 8005de0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d11e      	bne.n	8005e26 <LSM303AGR_ACC_0_Probe+0xde>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d019      	beq.n	8005e26 <LSM303AGR_ACC_0_Probe+0xde>
 8005df2:	7a3b      	ldrb	r3, [r7, #8]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d116      	bne.n	8005e26 <LSM303AGR_ACC_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_ACC_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005df8:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <LSM303AGR_ACC_0_Probe+0x13c>)
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <LSM303AGR_ACC_0_Probe+0x140>)
 8005dfe:	3303      	adds	r3, #3
 8005e00:	4922      	ldr	r1, [pc, #136]	; (8005e8c <LSM303AGR_ACC_0_Probe+0x144>)
 8005e02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_ACC_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_ACC_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_ACC_0]) != LSM303AGR_OK)
 8005e06:	4b1d      	ldr	r3, [pc, #116]	; (8005e7c <LSM303AGR_ACC_0_Probe+0x134>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1a      	ldr	r2, [pc, #104]	; (8005e78 <LSM303AGR_ACC_0_Probe+0x130>)
 8005e0e:	6852      	ldr	r2, [r2, #4]
 8005e10:	4610      	mov	r0, r2
 8005e12:	4798      	blx	r3
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <LSM303AGR_ACC_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e1a:	f06f 0304 	mvn.w	r3, #4
 8005e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e20:	e001      	b.n	8005e26 <LSM303AGR_ACC_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e22:	2300      	movs	r3, #0
 8005e24:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d107      	bne.n	8005e3c <LSM303AGR_ACC_0_Probe+0xf4>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <LSM303AGR_ACC_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e36:	f06f 0304 	mvn.w	r3, #4
 8005e3a:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d107      	bne.n	8005e52 <LSM303AGR_ACC_0_Probe+0x10a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <LSM303AGR_ACC_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e4c:	f06f 0304 	mvn.w	r3, #4
 8005e50:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3748      	adds	r7, #72	; 0x48
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	0800236d 	.word	0x0800236d
 8005e60:	080023e9 	.word	0x080023e9
 8005e64:	0800249d 	.word	0x0800249d
 8005e68:	08002439 	.word	0x08002439
 8005e6c:	08002501 	.word	0x08002501
 8005e70:	20001158 	.word	0x20001158
 8005e74:	2000111c 	.word	0x2000111c
 8005e78:	200014f4 	.word	0x200014f4
 8005e7c:	20001110 	.word	0x20001110
 8005e80:	20000010 	.word	0x20000010
 8005e84:	200000d0 	.word	0x200000d0
 8005e88:	200010ec 	.word	0x200010ec
 8005e8c:	20000020 	.word	0x20000020

08005e90 <LSM303AGR_MAG_0_Probe>:
/**
 * @brief  Register Bus IOs for instance 2 if component ID is OK
 * @retval error status
 */
static int32_t LSM303AGR_MAG_0_Probe(uint32_t Functions)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b092      	sub	sp, #72	; 0x48
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  LSM303AGR_IO_t                io_ctx;
  uint8_t                       id;
  static LSM303AGR_MAG_Object_t lsm303agr_mag_obj_0;
  LSM303AGR_Capabilities_t      cap;
  int32_t ret = BSP_ERROR_NONE;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the magneto driver */
  io_ctx.BusType     = LSM303AGR_I2C_BUS; /* I2C */
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM303AGR_I2C_ADD_MG;
 8005ea0:	233d      	movs	r3, #61	; 0x3d
 8005ea2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = IKS01A2_I2C_Init;
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	; (8005fa4 <LSM303AGR_MAG_0_Probe+0x114>)
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = IKS01A2_I2C_DeInit;
 8005eaa:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <LSM303AGR_MAG_0_Probe+0x118>)
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = IKS01A2_I2C_ReadReg;
 8005eae:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <LSM303AGR_MAG_0_Probe+0x11c>)
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = IKS01A2_I2C_WriteReg;
 8005eb2:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <LSM303AGR_MAG_0_Probe+0x120>)
 8005eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = IKS01A2_GetTick;
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <LSM303AGR_MAG_0_Probe+0x124>)
 8005eb8:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM303AGR_MAG_RegisterBusIO(&lsm303agr_mag_obj_0, &io_ctx) != LSM303AGR_OK)
 8005eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	483d      	ldr	r0, [pc, #244]	; (8005fb8 <LSM303AGR_MAG_0_Probe+0x128>)
 8005ec2:	f7fd f931 	bl	8003128 <LSM303AGR_MAG_RegisterBusIO>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <LSM303AGR_MAG_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ecc:	f06f 0306 	mvn.w	r3, #6
 8005ed0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ed2:	e062      	b.n	8005f9a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (LSM303AGR_MAG_ReadID(&lsm303agr_mag_obj_0, &id) != LSM303AGR_OK)
 8005ed4:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4837      	ldr	r0, [pc, #220]	; (8005fb8 <LSM303AGR_MAG_0_Probe+0x128>)
 8005edc:	f7fd f9db 	bl	8003296 <LSM303AGR_MAG_ReadID>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <LSM303AGR_MAG_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ee6:	f06f 0306 	mvn.w	r3, #6
 8005eea:	647b      	str	r3, [r7, #68]	; 0x44
 8005eec:	e055      	b.n	8005f9a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else if (id != (uint8_t)LSM303AGR_ID_MG)
 8005eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ef2:	2b40      	cmp	r3, #64	; 0x40
 8005ef4:	d003      	beq.n	8005efe <LSM303AGR_MAG_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005ef6:	f06f 0306 	mvn.w	r3, #6
 8005efa:	647b      	str	r3, [r7, #68]	; 0x44
 8005efc:	e04d      	b.n	8005f9a <LSM303AGR_MAG_0_Probe+0x10a>
  }
  else
  {
    (void)LSM303AGR_MAG_GetCapabilities(&lsm303agr_mag_obj_0, &cap);
 8005efe:	f107 0308 	add.w	r3, r7, #8
 8005f02:	4619      	mov	r1, r3
 8005f04:	482c      	ldr	r0, [pc, #176]	; (8005fb8 <LSM303AGR_MAG_0_Probe+0x128>)
 8005f06:	f7fd f9dd 	bl	80032c4 <LSM303AGR_MAG_GetCapabilities>
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005f0a:	7a7b      	ldrb	r3, [r7, #9]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	7a3b      	ldrb	r3, [r7, #8]
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	431a      	orrs	r2, r3
                                                     uint32_t)cap.Magneto << 2);
 8005f14:	7abb      	ldrb	r3, [r7, #10]
 8005f16:	009b      	lsls	r3, r3, #2
    MotionCtx[IKS01A2_LSM303AGR_MAG_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	4a28      	ldr	r2, [pc, #160]	; (8005fbc <LSM303AGR_MAG_0_Probe+0x12c>)
 8005f1c:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A2_LSM303AGR_MAG_0] = &lsm303agr_mag_obj_0;
 8005f1e:	4b28      	ldr	r3, [pc, #160]	; (8005fc0 <LSM303AGR_MAG_0_Probe+0x130>)
 8005f20:	4a25      	ldr	r2, [pc, #148]	; (8005fb8 <LSM303AGR_MAG_0_Probe+0x128>)
 8005f22:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A2_LSM303AGR_MAG_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM303AGR_MAG_COMMON_Driver;
 8005f24:	4b27      	ldr	r3, [pc, #156]	; (8005fc4 <LSM303AGR_MAG_0_Probe+0x134>)
 8005f26:	4a28      	ldr	r2, [pc, #160]	; (8005fc8 <LSM303AGR_MAG_0_Probe+0x138>)
 8005f28:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8005f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11e      	bne.n	8005f6e <LSM303AGR_MAG_0_Probe+0xde>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d019      	beq.n	8005f6e <LSM303AGR_MAG_0_Probe+0xde>
 8005f3a:	7abb      	ldrb	r3, [r7, #10]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d116      	bne.n	8005f6e <LSM303AGR_MAG_0_Probe+0xde>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A2_LSM303AGR_MAG_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8005f40:	4b22      	ldr	r3, [pc, #136]	; (8005fcc <LSM303AGR_MAG_0_Probe+0x13c>)
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <LSM303AGR_MAG_0_Probe+0x140>)
 8005f46:	3306      	adds	r3, #6
 8005f48:	4922      	ldr	r1, [pc, #136]	; (8005fd4 <LSM303AGR_MAG_0_Probe+0x144>)
 8005f4a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            void *)&LSM303AGR_MAG_Driver;

      if (MotionDrv[IKS01A2_LSM303AGR_MAG_0]->Init(MotionCompObj[IKS01A2_LSM303AGR_MAG_0]) != LSM303AGR_OK)
 8005f4e:	4b1d      	ldr	r3, [pc, #116]	; (8005fc4 <LSM303AGR_MAG_0_Probe+0x134>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a1a      	ldr	r2, [pc, #104]	; (8005fc0 <LSM303AGR_MAG_0_Probe+0x130>)
 8005f56:	6892      	ldr	r2, [r2, #8]
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4798      	blx	r3
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <LSM303AGR_MAG_0_Probe+0xda>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f62:	f06f 0304 	mvn.w	r3, #4
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
 8005f68:	e001      	b.n	8005f6e <LSM303AGR_MAG_0_Probe+0xde>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8005f6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d107      	bne.n	8005f84 <LSM303AGR_MAG_0_Probe+0xf4>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <LSM303AGR_MAG_0_Probe+0xf4>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f7e:	f06f 0304 	mvn.w	r3, #4
 8005f82:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8005f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d107      	bne.n	8005f9a <LSM303AGR_MAG_0_Probe+0x10a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <LSM303AGR_MAG_0_Probe+0x10a>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f94:	f06f 0304 	mvn.w	r3, #4
 8005f98:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3748      	adds	r7, #72	; 0x48
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	0800236d 	.word	0x0800236d
 8005fa8:	080023e9 	.word	0x080023e9
 8005fac:	0800249d 	.word	0x0800249d
 8005fb0:	08002439 	.word	0x08002439
 8005fb4:	08002501 	.word	0x08002501
 8005fb8:	20001184 	.word	0x20001184
 8005fbc:	2000111c 	.word	0x2000111c
 8005fc0:	200014f4 	.word	0x200014f4
 8005fc4:	20001110 	.word	0x20001110
 8005fc8:	20000044 	.word	0x20000044
 8005fcc:	200000d0 	.word	0x200000d0
 8005fd0:	200010ec 	.word	0x200010ec
 8005fd4:	20000054 	.word	0x20000054

08005fd8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d903      	bls.n	8005ff4 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005fec:	f06f 0301 	mvn.w	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e025      	b.n	8006040 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8005ff4:	79fb      	ldrb	r3, [r7, #7]
 8005ff6:	79fa      	ldrb	r2, [r7, #7]
 8005ff8:	4914      	ldr	r1, [pc, #80]	; (800604c <BSP_COM_Init+0x74>)
 8005ffa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005ffe:	4814      	ldr	r0, [pc, #80]	; (8006050 <BSP_COM_Init+0x78>)
 8006000:	4613      	mov	r3, r2
 8006002:	015b      	lsls	r3, r3, #5
 8006004:	4413      	add	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4403      	add	r3, r0
 800600a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 800600c:	79fa      	ldrb	r2, [r7, #7]
 800600e:	4613      	mov	r3, r2
 8006010:	015b      	lsls	r3, r3, #5
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4a0e      	ldr	r2, [pc, #56]	; (8006050 <BSP_COM_Init+0x78>)
 8006018:	4413      	add	r3, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f000 f86a 	bl	80060f4 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8006020:	79fa      	ldrb	r2, [r7, #7]
 8006022:	4613      	mov	r3, r2
 8006024:	015b      	lsls	r3, r3, #5
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4a09      	ldr	r2, [pc, #36]	; (8006050 <BSP_COM_Init+0x78>)
 800602c:	4413      	add	r3, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f810 	bl	8006054 <MX_USART2_UART_Init>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800603a:	f06f 0303 	mvn.w	r3, #3
 800603e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8006040:	68fb      	ldr	r3, [r7, #12]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200000e4 	.word	0x200000e4
 8006050:	20001548 	.word	0x20001548

08006054 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <MX_USART2_UART_Init+0x64>)
 8006064:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800606c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	220c      	movs	r2, #12
 8006084:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f004 f854 	bl	800a14c <HAL_UART_Init>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40004400 	.word	0x40004400

080060bc <__io_putchar>:
#if defined(__ICCARM__) || defined(__CC_ARM) || (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)) /* For IAR and ARM Compiler 5 and 6*/
 int fputc (int ch, FILE *f)
#else /* For GCC Toolchains */
 int __io_putchar (int ch)
#endif /* For IAR and ARM Compiler 5 and 6 */
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80060c4:	4b09      	ldr	r3, [pc, #36]	; (80060ec <__io_putchar+0x30>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	4613      	mov	r3, r2
 80060cc:	015b      	lsls	r3, r3, #5
 80060ce:	4413      	add	r3, r2
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4a07      	ldr	r2, [pc, #28]	; (80060f0 <__io_putchar+0x34>)
 80060d4:	1898      	adds	r0, r3, r2
 80060d6:	1d39      	adds	r1, r7, #4
 80060d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060dc:	2201      	movs	r2, #1
 80060de:	f004 f88d 	bl	800a1fc <HAL_UART_Transmit>
  return ch;
 80060e2:	687b      	ldr	r3, [r7, #4]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3708      	adds	r7, #8
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	200011b0 	.word	0x200011b0
 80060f0:	20001548 	.word	0x20001548

080060f4 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	; 0x28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80060fc:	4b30      	ldr	r3, [pc, #192]	; (80061c0 <USART2_MspInit+0xcc>)
 80060fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006100:	4a2f      	ldr	r2, [pc, #188]	; (80061c0 <USART2_MspInit+0xcc>)
 8006102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006106:	6593      	str	r3, [r2, #88]	; 0x58
 8006108:	4b2d      	ldr	r3, [pc, #180]	; (80061c0 <USART2_MspInit+0xcc>)
 800610a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006114:	4b2a      	ldr	r3, [pc, #168]	; (80061c0 <USART2_MspInit+0xcc>)
 8006116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006118:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <USART2_MspInit+0xcc>)
 800611a:	f043 0301 	orr.w	r3, r3, #1
 800611e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006120:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <USART2_MspInit+0xcc>)
 8006122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800612c:	2304      	movs	r3, #4
 800612e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006130:	2302      	movs	r3, #2
 8006132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006138:	2303      	movs	r3, #3
 800613a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800613c:	2307      	movs	r3, #7
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8006140:	f107 0314 	add.w	r3, r7, #20
 8006144:	4619      	mov	r1, r3
 8006146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800614a:	f000 fcaf 	bl	8006aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800614e:	2308      	movs	r3, #8
 8006150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006152:	2302      	movs	r3, #2
 8006154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800615a:	2303      	movs	r3, #3
 800615c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 800615e:	2307      	movs	r3, #7
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8006162:	f107 0314 	add.w	r3, r7, #20
 8006166:	4619      	mov	r1, r3
 8006168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800616c:	f000 fc9e 	bl	8006aac <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel6;
 8006170:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <USART2_MspInit+0xd0>)
 8006172:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <USART2_MspInit+0xd4>)
 8006174:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8006176:	4b13      	ldr	r3, [pc, #76]	; (80061c4 <USART2_MspInit+0xd0>)
 8006178:	2202      	movs	r2, #2
 800617a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800617c:	4b11      	ldr	r3, [pc, #68]	; (80061c4 <USART2_MspInit+0xd0>)
 800617e:	2200      	movs	r2, #0
 8006180:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <USART2_MspInit+0xd0>)
 8006184:	2200      	movs	r2, #0
 8006186:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006188:	4b0e      	ldr	r3, [pc, #56]	; (80061c4 <USART2_MspInit+0xd0>)
 800618a:	2280      	movs	r2, #128	; 0x80
 800618c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800618e:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <USART2_MspInit+0xd0>)
 8006190:	2200      	movs	r2, #0
 8006192:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <USART2_MspInit+0xd0>)
 8006196:	2200      	movs	r2, #0
 8006198:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <USART2_MspInit+0xd0>)
 800619c:	2220      	movs	r2, #32
 800619e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80061a0:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <USART2_MspInit+0xd0>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 80061a6:	4807      	ldr	r0, [pc, #28]	; (80061c4 <USART2_MspInit+0xd0>)
 80061a8:	f000 fa88 	bl	80066bc <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a05      	ldr	r2, [pc, #20]	; (80061c4 <USART2_MspInit+0xd0>)
 80061b0:	671a      	str	r2, [r3, #112]	; 0x70
 80061b2:	4a04      	ldr	r2, [pc, #16]	; (80061c4 <USART2_MspInit+0xd0>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80061b8:	bf00      	nop
 80061ba:	3728      	adds	r7, #40	; 0x28
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40021000 	.word	0x40021000
 80061c4:	20001500 	.word	0x20001500
 80061c8:	4002006c 	.word	0x4002006c

080061cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061d6:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <HAL_Init+0x3c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <HAL_Init+0x3c>)
 80061dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061e2:	2003      	movs	r0, #3
 80061e4:	f000 f93e 	bl	8006464 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061e8:	2000      	movs	r0, #0
 80061ea:	f000 f80f 	bl	800620c <HAL_InitTick>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	71fb      	strb	r3, [r7, #7]
 80061f8:	e001      	b.n	80061fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80061fa:	f7fc f843 	bl	8002284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80061fe:	79fb      	ldrb	r3, [r7, #7]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40022000 	.word	0x40022000

0800620c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8006218:	4b17      	ldr	r3, [pc, #92]	; (8006278 <HAL_InitTick+0x6c>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d023      	beq.n	8006268 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006220:	4b16      	ldr	r3, [pc, #88]	; (800627c <HAL_InitTick+0x70>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <HAL_InitTick+0x6c>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800622e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006232:	fbb2 f3f3 	udiv	r3, r2, r3
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f949 	bl	80064ce <HAL_SYSTICK_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10f      	bne.n	8006262 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b0f      	cmp	r3, #15
 8006246:	d809      	bhi.n	800625c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006248:	2200      	movs	r2, #0
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	f000 f913 	bl	800647a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006254:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <HAL_InitTick+0x74>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e007      	b.n	800626c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	73fb      	strb	r3, [r7, #15]
 8006260:	e004      	b.n	800626c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	73fb      	strb	r3, [r7, #15]
 8006266:	e001      	b.n	800626c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	200000ec 	.word	0x200000ec
 800627c:	2000000c 	.word	0x2000000c
 8006280:	200000e8 	.word	0x200000e8

08006284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006288:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <HAL_IncTick+0x20>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	461a      	mov	r2, r3
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <HAL_IncTick+0x24>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4413      	add	r3, r2
 8006294:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <HAL_IncTick+0x24>)
 8006296:	6013      	str	r3, [r2, #0]
}
 8006298:	bf00      	nop
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	200000ec 	.word	0x200000ec
 80062a8:	200015cc 	.word	0x200015cc

080062ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  return uwTick;
 80062b0:	4b03      	ldr	r3, [pc, #12]	; (80062c0 <HAL_GetTick+0x14>)
 80062b2:	681b      	ldr	r3, [r3, #0]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	200015cc 	.word	0x200015cc

080062c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <__NVIC_SetPriorityGrouping+0x44>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062e0:	4013      	ands	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80062f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062f6:	4a04      	ldr	r2, [pc, #16]	; (8006308 <__NVIC_SetPriorityGrouping+0x44>)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	60d3      	str	r3, [r2, #12]
}
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	e000ed00 	.word	0xe000ed00

0800630c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006310:	4b04      	ldr	r3, [pc, #16]	; (8006324 <__NVIC_GetPriorityGrouping+0x18>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	0a1b      	lsrs	r3, r3, #8
 8006316:	f003 0307 	and.w	r3, r3, #7
}
 800631a:	4618      	mov	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006336:	2b00      	cmp	r3, #0
 8006338:	db0b      	blt.n	8006352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	f003 021f 	and.w	r2, r3, #31
 8006340:	4907      	ldr	r1, [pc, #28]	; (8006360 <__NVIC_EnableIRQ+0x38>)
 8006342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	2001      	movs	r0, #1
 800634a:	fa00 f202 	lsl.w	r2, r0, r2
 800634e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e100 	.word	0xe000e100

08006364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	6039      	str	r1, [r7, #0]
 800636e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006374:	2b00      	cmp	r3, #0
 8006376:	db0a      	blt.n	800638e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	490c      	ldr	r1, [pc, #48]	; (80063b0 <__NVIC_SetPriority+0x4c>)
 800637e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006382:	0112      	lsls	r2, r2, #4
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	440b      	add	r3, r1
 8006388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800638c:	e00a      	b.n	80063a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	4908      	ldr	r1, [pc, #32]	; (80063b4 <__NVIC_SetPriority+0x50>)
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	3b04      	subs	r3, #4
 800639c:	0112      	lsls	r2, r2, #4
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	440b      	add	r3, r1
 80063a2:	761a      	strb	r2, [r3, #24]
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	e000e100 	.word	0xe000e100
 80063b4:	e000ed00 	.word	0xe000ed00

080063b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b089      	sub	sp, #36	; 0x24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f1c3 0307 	rsb	r3, r3, #7
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	bf28      	it	cs
 80063d6:	2304      	movcs	r3, #4
 80063d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	3304      	adds	r3, #4
 80063de:	2b06      	cmp	r3, #6
 80063e0:	d902      	bls.n	80063e8 <NVIC_EncodePriority+0x30>
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	3b03      	subs	r3, #3
 80063e6:	e000      	b.n	80063ea <NVIC_EncodePriority+0x32>
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	43da      	mvns	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	401a      	ands	r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006400:	f04f 31ff 	mov.w	r1, #4294967295
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	fa01 f303 	lsl.w	r3, r1, r3
 800640a:	43d9      	mvns	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006410:	4313      	orrs	r3, r2
         );
}
 8006412:	4618      	mov	r0, r3
 8006414:	3724      	adds	r7, #36	; 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3b01      	subs	r3, #1
 800642c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006430:	d301      	bcc.n	8006436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006432:	2301      	movs	r3, #1
 8006434:	e00f      	b.n	8006456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006436:	4a0a      	ldr	r2, [pc, #40]	; (8006460 <SysTick_Config+0x40>)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3b01      	subs	r3, #1
 800643c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800643e:	210f      	movs	r1, #15
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	f7ff ff8e 	bl	8006364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <SysTick_Config+0x40>)
 800644a:	2200      	movs	r2, #0
 800644c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800644e:	4b04      	ldr	r3, [pc, #16]	; (8006460 <SysTick_Config+0x40>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	e000e010 	.word	0xe000e010

08006464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ff29 	bl	80062c4 <__NVIC_SetPriorityGrouping>
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	4603      	mov	r3, r0
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800648c:	f7ff ff3e 	bl	800630c <__NVIC_GetPriorityGrouping>
 8006490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	6978      	ldr	r0, [r7, #20]
 8006498:	f7ff ff8e 	bl	80063b8 <NVIC_EncodePriority>
 800649c:	4602      	mov	r2, r0
 800649e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7ff ff5d 	bl	8006364 <__NVIC_SetPriority>
}
 80064aa:	bf00      	nop
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	4603      	mov	r3, r0
 80064ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff ff31 	bl	8006328 <__NVIC_EnableIRQ>
}
 80064c6:	bf00      	nop
 80064c8:	3708      	adds	r7, #8
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff ffa2 	bl	8006420 <SysTick_Config>
 80064dc:	4603      	mov	r3, r0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e054      	b.n	80065a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	7f5b      	ldrb	r3, [r3, #29]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7fb fa70 	bl	80019f0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	791b      	ldrb	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10c      	bne.n	8006538 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a22      	ldr	r2, [pc, #136]	; (80065ac <HAL_CRC_Init+0xc4>)
 8006524:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0218 	bic.w	r2, r2, #24
 8006534:	609a      	str	r2, [r3, #8]
 8006536:	e00c      	b.n	8006552 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6899      	ldr	r1, [r3, #8]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	461a      	mov	r2, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f834 	bl	80065b0 <HAL_CRCEx_Polynomial_Set>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e028      	b.n	80065a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	795b      	ldrb	r3, [r3, #5]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d105      	bne.n	8006566 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f04f 32ff 	mov.w	r2, #4294967295
 8006562:	611a      	str	r2, [r3, #16]
 8006564:	e004      	b.n	8006570 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6912      	ldr	r2, [r2, #16]
 800656e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699a      	ldr	r2, [r3, #24]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	430a      	orrs	r2, r1
 800659a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	04c11db7 	.word	0x04c11db7

080065b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80065c0:	231f      	movs	r3, #31
 80065c2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80065c4:	bf00      	nop
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1e5a      	subs	r2, r3, #1
 80065ca:	613a      	str	r2, [r7, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <HAL_CRCEx_Polynomial_Set+0x34>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f003 031f 	and.w	r3, r3, #31
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	fa22 f303 	lsr.w	r3, r2, r3
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f0      	beq.n	80065c6 <HAL_CRCEx_Polynomial_Set+0x16>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b18      	cmp	r3, #24
 80065e8:	d846      	bhi.n	8006678 <HAL_CRCEx_Polynomial_Set+0xc8>
 80065ea:	a201      	add	r2, pc, #4	; (adr r2, 80065f0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80065ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f0:	0800667f 	.word	0x0800667f
 80065f4:	08006679 	.word	0x08006679
 80065f8:	08006679 	.word	0x08006679
 80065fc:	08006679 	.word	0x08006679
 8006600:	08006679 	.word	0x08006679
 8006604:	08006679 	.word	0x08006679
 8006608:	08006679 	.word	0x08006679
 800660c:	08006679 	.word	0x08006679
 8006610:	0800666d 	.word	0x0800666d
 8006614:	08006679 	.word	0x08006679
 8006618:	08006679 	.word	0x08006679
 800661c:	08006679 	.word	0x08006679
 8006620:	08006679 	.word	0x08006679
 8006624:	08006679 	.word	0x08006679
 8006628:	08006679 	.word	0x08006679
 800662c:	08006679 	.word	0x08006679
 8006630:	08006661 	.word	0x08006661
 8006634:	08006679 	.word	0x08006679
 8006638:	08006679 	.word	0x08006679
 800663c:	08006679 	.word	0x08006679
 8006640:	08006679 	.word	0x08006679
 8006644:	08006679 	.word	0x08006679
 8006648:	08006679 	.word	0x08006679
 800664c:	08006679 	.word	0x08006679
 8006650:	08006655 	.word	0x08006655
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	2b06      	cmp	r3, #6
 8006658:	d913      	bls.n	8006682 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800665e:	e010      	b.n	8006682 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b07      	cmp	r3, #7
 8006664:	d90f      	bls.n	8006686 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800666a:	e00c      	b.n	8006686 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	2b0f      	cmp	r3, #15
 8006670:	d90b      	bls.n	800668a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006676:	e008      	b.n	800668a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	75fb      	strb	r3, [r7, #23]
      break;
 800667c:	e006      	b.n	800668c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800667e:	bf00      	nop
 8006680:	e004      	b.n	800668c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006682:	bf00      	nop
 8006684:	e002      	b.n	800668c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006686:	bf00      	nop
 8006688:	e000      	b.n	800668c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800668a:	bf00      	nop
  }
  if (status == HAL_OK)
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10d      	bne.n	80066ae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68ba      	ldr	r2, [r7, #8]
 8006698:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f023 0118 	bic.w	r1, r3, #24
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	371c      	adds	r7, #28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e098      	b.n	8006800 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	4b4d      	ldr	r3, [pc, #308]	; (800680c <HAL_DMA_Init+0x150>)
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d80f      	bhi.n	80066fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	4b4b      	ldr	r3, [pc, #300]	; (8006810 <HAL_DMA_Init+0x154>)
 80066e2:	4413      	add	r3, r2
 80066e4:	4a4b      	ldr	r2, [pc, #300]	; (8006814 <HAL_DMA_Init+0x158>)
 80066e6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	009a      	lsls	r2, r3, #2
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a48      	ldr	r2, [pc, #288]	; (8006818 <HAL_DMA_Init+0x15c>)
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40
 80066f8:	e00e      	b.n	8006718 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	4b46      	ldr	r3, [pc, #280]	; (800681c <HAL_DMA_Init+0x160>)
 8006702:	4413      	add	r3, r2
 8006704:	4a43      	ldr	r2, [pc, #268]	; (8006814 <HAL_DMA_Init+0x158>)
 8006706:	fba2 2303 	umull	r2, r3, r2, r3
 800670a:	091b      	lsrs	r3, r3, #4
 800670c:	009a      	lsls	r2, r3, #2
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a42      	ldr	r2, [pc, #264]	; (8006820 <HAL_DMA_Init+0x164>)
 8006716:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800673c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68fa      	ldr	r2, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006772:	d039      	beq.n	80067e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006778:	4a27      	ldr	r2, [pc, #156]	; (8006818 <HAL_DMA_Init+0x15c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d11a      	bne.n	80067b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800677e:	4b29      	ldr	r3, [pc, #164]	; (8006824 <HAL_DMA_Init+0x168>)
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	f003 031c 	and.w	r3, r3, #28
 800678a:	210f      	movs	r1, #15
 800678c:	fa01 f303 	lsl.w	r3, r1, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	4924      	ldr	r1, [pc, #144]	; (8006824 <HAL_DMA_Init+0x168>)
 8006794:	4013      	ands	r3, r2
 8006796:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8006798:	4b22      	ldr	r3, [pc, #136]	; (8006824 <HAL_DMA_Init+0x168>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6859      	ldr	r1, [r3, #4]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	f003 031c 	and.w	r3, r3, #28
 80067a8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ac:	491d      	ldr	r1, [pc, #116]	; (8006824 <HAL_DMA_Init+0x168>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	600b      	str	r3, [r1, #0]
 80067b2:	e019      	b.n	80067e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80067b4:	4b1c      	ldr	r3, [pc, #112]	; (8006828 <HAL_DMA_Init+0x16c>)
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067bc:	f003 031c 	and.w	r3, r3, #28
 80067c0:	210f      	movs	r1, #15
 80067c2:	fa01 f303 	lsl.w	r3, r1, r3
 80067c6:	43db      	mvns	r3, r3
 80067c8:	4917      	ldr	r1, [pc, #92]	; (8006828 <HAL_DMA_Init+0x16c>)
 80067ca:	4013      	ands	r3, r2
 80067cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80067ce:	4b16      	ldr	r3, [pc, #88]	; (8006828 <HAL_DMA_Init+0x16c>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6859      	ldr	r1, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067da:	f003 031c 	and.w	r3, r3, #28
 80067de:	fa01 f303 	lsl.w	r3, r1, r3
 80067e2:	4911      	ldr	r1, [pc, #68]	; (8006828 <HAL_DMA_Init+0x16c>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40020407 	.word	0x40020407
 8006810:	bffdfff8 	.word	0xbffdfff8
 8006814:	cccccccd 	.word	0xcccccccd
 8006818:	40020000 	.word	0x40020000
 800681c:	bffdfbf8 	.word	0xbffdfbf8
 8006820:	40020400 	.word	0x40020400
 8006824:	400200a8 	.word	0x400200a8
 8006828:	400204a8 	.word	0x400204a8

0800682c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_DMA_Start_IT+0x20>
 8006848:	2302      	movs	r3, #2
 800684a:	e04b      	b.n	80068e4 <HAL_DMA_Start_IT+0xb8>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	d13a      	bne.n	80068d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f8e0 	bl	8006a4a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 020e 	orr.w	r2, r2, #14
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e00f      	b.n	80068c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0204 	bic.w	r2, r2, #4
 80068b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f042 020a 	orr.w	r2, r2, #10
 80068c2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0201 	orr.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	e005      	b.n	80068e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80068de:	2302      	movs	r3, #2
 80068e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	f003 031c 	and.w	r3, r3, #28
 800690c:	2204      	movs	r2, #4
 800690e:	409a      	lsls	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4013      	ands	r3, r2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d026      	beq.n	8006966 <HAL_DMA_IRQHandler+0x7a>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f003 0304 	and.w	r3, r3, #4
 800691e:	2b00      	cmp	r3, #0
 8006920:	d021      	beq.n	8006966 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0320 	and.w	r3, r3, #32
 800692c:	2b00      	cmp	r3, #0
 800692e:	d107      	bne.n	8006940 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0204 	bic.w	r2, r2, #4
 800693e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006944:	f003 021c 	and.w	r2, r3, #28
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694c:	2104      	movs	r1, #4
 800694e:	fa01 f202 	lsl.w	r2, r1, r2
 8006952:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	2b00      	cmp	r3, #0
 800695a:	d071      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8006964:	e06c      	b.n	8006a40 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	f003 031c 	and.w	r3, r3, #28
 800696e:	2202      	movs	r2, #2
 8006970:	409a      	lsls	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4013      	ands	r3, r2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d02e      	beq.n	80069d8 <HAL_DMA_IRQHandler+0xec>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d029      	beq.n	80069d8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0320 	and.w	r3, r3, #32
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10b      	bne.n	80069aa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 020a 	bic.w	r2, r2, #10
 80069a0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	f003 021c 	and.w	r2, r3, #28
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	2102      	movs	r1, #2
 80069b8:	fa01 f202 	lsl.w	r2, r1, r2
 80069bc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d038      	beq.n	8006a40 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80069d6:	e033      	b.n	8006a40 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069dc:	f003 031c 	and.w	r3, r3, #28
 80069e0:	2208      	movs	r2, #8
 80069e2:	409a      	lsls	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	4013      	ands	r3, r2
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d02a      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x156>
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 0308 	and.w	r3, r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d025      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 020e 	bic.w	r2, r2, #14
 8006a04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0a:	f003 021c 	and.w	r2, r3, #28
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	2101      	movs	r1, #1
 8006a14:	fa01 f202 	lsl.w	r2, r1, r2
 8006a18:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d004      	beq.n	8006a42 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
}
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5c:	f003 021c 	and.w	r2, r3, #28
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	2101      	movs	r1, #1
 8006a66:	fa01 f202 	lsl.w	r2, r1, r2
 8006a6a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b10      	cmp	r3, #16
 8006a7a:	d108      	bne.n	8006a8e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006a8c:	e007      	b.n	8006a9e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	60da      	str	r2, [r3, #12]
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
	...

08006aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006aba:	e17f      	b.n	8006dbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac8:	4013      	ands	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 8171 	beq.w	8006db6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	f003 0303 	and.w	r3, r3, #3
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d005      	beq.n	8006aec <HAL_GPIO_Init+0x40>
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f003 0303 	and.w	r3, r3, #3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d130      	bne.n	8006b4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	2203      	movs	r2, #3
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	43db      	mvns	r3, r3
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4013      	ands	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b22:	2201      	movs	r2, #1
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	091b      	lsrs	r3, r3, #4
 8006b38:	f003 0201 	and.w	r2, r3, #1
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d118      	bne.n	8006b8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006b60:	2201      	movs	r2, #1
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	fa02 f303 	lsl.w	r3, r2, r3
 8006b68:	43db      	mvns	r3, r3
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	08db      	lsrs	r3, r3, #3
 8006b76:	f003 0201 	and.w	r2, r3, #1
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f003 0303 	and.w	r3, r3, #3
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d017      	beq.n	8006bc8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	2203      	movs	r2, #3
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	4013      	ands	r3, r2
 8006bae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	693a      	ldr	r2, [r7, #16]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d123      	bne.n	8006c1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	08da      	lsrs	r2, r3, #3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3208      	adds	r2, #8
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	220f      	movs	r2, #15
 8006bec:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f003 0307 	and.w	r3, r3, #7
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	fa02 f303 	lsl.w	r3, r2, r3
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	08da      	lsrs	r2, r3, #3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3208      	adds	r2, #8
 8006c16:	6939      	ldr	r1, [r7, #16]
 8006c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	2203      	movs	r2, #3
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	43db      	mvns	r3, r3
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4013      	ands	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f003 0203 	and.w	r2, r3, #3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	fa02 f303 	lsl.w	r3, r2, r3
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 80ac 	beq.w	8006db6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c5e:	4b5f      	ldr	r3, [pc, #380]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c62:	4a5e      	ldr	r2, [pc, #376]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006c64:	f043 0301 	orr.w	r3, r3, #1
 8006c68:	6613      	str	r3, [r2, #96]	; 0x60
 8006c6a:	4b5c      	ldr	r3, [pc, #368]	; (8006ddc <HAL_GPIO_Init+0x330>)
 8006c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	60bb      	str	r3, [r7, #8]
 8006c74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006c76:	4a5a      	ldr	r2, [pc, #360]	; (8006de0 <HAL_GPIO_Init+0x334>)
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	089b      	lsrs	r3, r3, #2
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	220f      	movs	r2, #15
 8006c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c92:	43db      	mvns	r3, r3
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4013      	ands	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006ca0:	d025      	beq.n	8006cee <HAL_GPIO_Init+0x242>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a4f      	ldr	r2, [pc, #316]	; (8006de4 <HAL_GPIO_Init+0x338>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d01f      	beq.n	8006cea <HAL_GPIO_Init+0x23e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a4e      	ldr	r2, [pc, #312]	; (8006de8 <HAL_GPIO_Init+0x33c>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d019      	beq.n	8006ce6 <HAL_GPIO_Init+0x23a>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a4d      	ldr	r2, [pc, #308]	; (8006dec <HAL_GPIO_Init+0x340>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d013      	beq.n	8006ce2 <HAL_GPIO_Init+0x236>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a4c      	ldr	r2, [pc, #304]	; (8006df0 <HAL_GPIO_Init+0x344>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00d      	beq.n	8006cde <HAL_GPIO_Init+0x232>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4a4b      	ldr	r2, [pc, #300]	; (8006df4 <HAL_GPIO_Init+0x348>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d007      	beq.n	8006cda <HAL_GPIO_Init+0x22e>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a4a      	ldr	r2, [pc, #296]	; (8006df8 <HAL_GPIO_Init+0x34c>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d101      	bne.n	8006cd6 <HAL_GPIO_Init+0x22a>
 8006cd2:	2306      	movs	r3, #6
 8006cd4:	e00c      	b.n	8006cf0 <HAL_GPIO_Init+0x244>
 8006cd6:	2307      	movs	r3, #7
 8006cd8:	e00a      	b.n	8006cf0 <HAL_GPIO_Init+0x244>
 8006cda:	2305      	movs	r3, #5
 8006cdc:	e008      	b.n	8006cf0 <HAL_GPIO_Init+0x244>
 8006cde:	2304      	movs	r3, #4
 8006ce0:	e006      	b.n	8006cf0 <HAL_GPIO_Init+0x244>
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e004      	b.n	8006cf0 <HAL_GPIO_Init+0x244>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e002      	b.n	8006cf0 <HAL_GPIO_Init+0x244>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e000      	b.n	8006cf0 <HAL_GPIO_Init+0x244>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	f002 0203 	and.w	r2, r2, #3
 8006cf6:	0092      	lsls	r2, r2, #2
 8006cf8:	4093      	lsls	r3, r2
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d00:	4937      	ldr	r1, [pc, #220]	; (8006de0 <HAL_GPIO_Init+0x334>)
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	089b      	lsrs	r3, r3, #2
 8006d06:	3302      	adds	r3, #2
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d0e:	4b3b      	ldr	r3, [pc, #236]	; (8006dfc <HAL_GPIO_Init+0x350>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	43db      	mvns	r3, r3
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d32:	4a32      	ldr	r2, [pc, #200]	; (8006dfc <HAL_GPIO_Init+0x350>)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d38:	4b30      	ldr	r3, [pc, #192]	; (8006dfc <HAL_GPIO_Init+0x350>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	43db      	mvns	r3, r3
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4013      	ands	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d5c:	4a27      	ldr	r2, [pc, #156]	; (8006dfc <HAL_GPIO_Init+0x350>)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006d62:	4b26      	ldr	r3, [pc, #152]	; (8006dfc <HAL_GPIO_Init+0x350>)
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	43db      	mvns	r3, r3
 8006d6c:	693a      	ldr	r2, [r7, #16]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d86:	4a1d      	ldr	r2, [pc, #116]	; (8006dfc <HAL_GPIO_Init+0x350>)
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <HAL_GPIO_Init+0x350>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	43db      	mvns	r3, r3
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006db0:	4a12      	ldr	r2, [pc, #72]	; (8006dfc <HAL_GPIO_Init+0x350>)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	3301      	adds	r3, #1
 8006dba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f47f ae78 	bne.w	8006abc <HAL_GPIO_Init+0x10>
  }
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	371c      	adds	r7, #28
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	40010000 	.word	0x40010000
 8006de4:	48000400 	.word	0x48000400
 8006de8:	48000800 	.word	0x48000800
 8006dec:	48000c00 	.word	0x48000c00
 8006df0:	48001000 	.word	0x48001000
 8006df4:	48001400 	.word	0x48001400
 8006df8:	48001800 	.word	0x48001800
 8006dfc:	40010400 	.word	0x40010400

08006e00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b087      	sub	sp, #28
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006e0e:	e0cd      	b.n	8006fac <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006e10:	2201      	movs	r2, #1
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 80c0 	beq.w	8006fa6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006e26:	4a68      	ldr	r2, [pc, #416]	; (8006fc8 <HAL_GPIO_DeInit+0x1c8>)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	089b      	lsrs	r3, r3, #2
 8006e2c:	3302      	adds	r3, #2
 8006e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e32:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	220f      	movs	r2, #15
 8006e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4013      	ands	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006e4e:	d025      	beq.n	8006e9c <HAL_GPIO_DeInit+0x9c>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a5e      	ldr	r2, [pc, #376]	; (8006fcc <HAL_GPIO_DeInit+0x1cc>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d01f      	beq.n	8006e98 <HAL_GPIO_DeInit+0x98>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a5d      	ldr	r2, [pc, #372]	; (8006fd0 <HAL_GPIO_DeInit+0x1d0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d019      	beq.n	8006e94 <HAL_GPIO_DeInit+0x94>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a5c      	ldr	r2, [pc, #368]	; (8006fd4 <HAL_GPIO_DeInit+0x1d4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d013      	beq.n	8006e90 <HAL_GPIO_DeInit+0x90>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a5b      	ldr	r2, [pc, #364]	; (8006fd8 <HAL_GPIO_DeInit+0x1d8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00d      	beq.n	8006e8c <HAL_GPIO_DeInit+0x8c>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a5a      	ldr	r2, [pc, #360]	; (8006fdc <HAL_GPIO_DeInit+0x1dc>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <HAL_GPIO_DeInit+0x88>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a59      	ldr	r2, [pc, #356]	; (8006fe0 <HAL_GPIO_DeInit+0x1e0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d101      	bne.n	8006e84 <HAL_GPIO_DeInit+0x84>
 8006e80:	2306      	movs	r3, #6
 8006e82:	e00c      	b.n	8006e9e <HAL_GPIO_DeInit+0x9e>
 8006e84:	2307      	movs	r3, #7
 8006e86:	e00a      	b.n	8006e9e <HAL_GPIO_DeInit+0x9e>
 8006e88:	2305      	movs	r3, #5
 8006e8a:	e008      	b.n	8006e9e <HAL_GPIO_DeInit+0x9e>
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	e006      	b.n	8006e9e <HAL_GPIO_DeInit+0x9e>
 8006e90:	2303      	movs	r3, #3
 8006e92:	e004      	b.n	8006e9e <HAL_GPIO_DeInit+0x9e>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e002      	b.n	8006e9e <HAL_GPIO_DeInit+0x9e>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <HAL_GPIO_DeInit+0x9e>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	f002 0203 	and.w	r2, r2, #3
 8006ea4:	0092      	lsls	r2, r2, #2
 8006ea6:	4093      	lsls	r3, r2
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d132      	bne.n	8006f14 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8006eae:	4b4d      	ldr	r3, [pc, #308]	; (8006fe4 <HAL_GPIO_DeInit+0x1e4>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	494b      	ldr	r1, [pc, #300]	; (8006fe4 <HAL_GPIO_DeInit+0x1e4>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8006ebc:	4b49      	ldr	r3, [pc, #292]	; (8006fe4 <HAL_GPIO_DeInit+0x1e4>)
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	4947      	ldr	r1, [pc, #284]	; (8006fe4 <HAL_GPIO_DeInit+0x1e4>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8006eca:	4b46      	ldr	r3, [pc, #280]	; (8006fe4 <HAL_GPIO_DeInit+0x1e4>)
 8006ecc:	68da      	ldr	r2, [r3, #12]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	43db      	mvns	r3, r3
 8006ed2:	4944      	ldr	r1, [pc, #272]	; (8006fe4 <HAL_GPIO_DeInit+0x1e4>)
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8006ed8:	4b42      	ldr	r3, [pc, #264]	; (8006fe4 <HAL_GPIO_DeInit+0x1e4>)
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	43db      	mvns	r3, r3
 8006ee0:	4940      	ldr	r1, [pc, #256]	; (8006fe4 <HAL_GPIO_DeInit+0x1e4>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	220f      	movs	r2, #15
 8006ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8006ef6:	4a34      	ldr	r2, [pc, #208]	; (8006fc8 <HAL_GPIO_DeInit+0x1c8>)
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	089b      	lsrs	r3, r3, #2
 8006efc:	3302      	adds	r3, #2
 8006efe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	43da      	mvns	r2, r3
 8006f06:	4830      	ldr	r0, [pc, #192]	; (8006fc8 <HAL_GPIO_DeInit+0x1c8>)
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	089b      	lsrs	r3, r3, #2
 8006f0c:	400a      	ands	r2, r1
 8006f0e:	3302      	adds	r3, #2
 8006f10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	2103      	movs	r1, #3
 8006f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f22:	431a      	orrs	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	08da      	lsrs	r2, r3, #3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3208      	adds	r2, #8
 8006f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	220f      	movs	r2, #15
 8006f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f42:	43db      	mvns	r3, r3
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	08d2      	lsrs	r2, r2, #3
 8006f48:	4019      	ands	r1, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	3208      	adds	r2, #8
 8006f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	2103      	movs	r1, #3
 8006f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f60:	43db      	mvns	r3, r3
 8006f62:	401a      	ands	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	fa01 f303 	lsl.w	r3, r1, r3
 8006f74:	43db      	mvns	r3, r3
 8006f76:	401a      	ands	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68da      	ldr	r2, [r3, #12]
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	005b      	lsls	r3, r3, #1
 8006f84:	2103      	movs	r1, #3
 8006f86:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8a:	43db      	mvns	r3, r3
 8006f8c:	401a      	ands	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f96:	2101      	movs	r1, #1
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	401a      	ands	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f47f af2b 	bne.w	8006e10 <HAL_GPIO_DeInit+0x10>
  }
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	48000400 	.word	0x48000400
 8006fd0:	48000800 	.word	0x48000800
 8006fd4:	48000c00 	.word	0x48000c00
 8006fd8:	48001000 	.word	0x48001000
 8006fdc:	48001400 	.word	0x48001400
 8006fe0:	48001800 	.word	0x48001800
 8006fe4:	40010400 	.word	0x40010400

08006fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	807b      	strh	r3, [r7, #2]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ff8:	787b      	ldrb	r3, [r7, #1]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006ffe:	887a      	ldrh	r2, [r7, #2]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007004:	e002      	b.n	800700c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007006:	887a      	ldrh	r2, [r7, #2]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007022:	4b08      	ldr	r3, [pc, #32]	; (8007044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	88fb      	ldrh	r3, [r7, #6]
 8007028:	4013      	ands	r3, r2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d006      	beq.n	800703c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800702e:	4a05      	ldr	r2, [pc, #20]	; (8007044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007034:	88fb      	ldrh	r3, [r7, #6]
 8007036:	4618      	mov	r0, r3
 8007038:	f7fa ffa4 	bl	8001f84 <HAL_GPIO_EXTI_Callback>
  }
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40010400 	.word	0x40010400

08007048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e081      	b.n	800715e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fa fdaa 	bl	8001bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2224      	movs	r2, #36	; 0x24
 8007078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d107      	bne.n	80070c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070be:	609a      	str	r2, [r3, #8]
 80070c0:	e006      	b.n	80070d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80070ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d104      	bne.n	80070e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007104:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	69d9      	ldr	r1, [r3, #28]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a1a      	ldr	r2, [r3, #32]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0201 	orr.w	r2, r2, #1
 800713e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d101      	bne.n	8007178 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e021      	b.n	80071bc <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2224      	movs	r2, #36	; 0x24
 800717c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7fa fd77 	bl	8001c84 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	4608      	mov	r0, r1
 80071ce:	4611      	mov	r1, r2
 80071d0:	461a      	mov	r2, r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	817b      	strh	r3, [r7, #10]
 80071d6:	460b      	mov	r3, r1
 80071d8:	813b      	strh	r3, [r7, #8]
 80071da:	4613      	mov	r3, r2
 80071dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b20      	cmp	r3, #32
 80071e8:	f040 80f9 	bne.w	80073de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d002      	beq.n	80071f8 <HAL_I2C_Mem_Write+0x34>
 80071f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e0ed      	b.n	80073e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_I2C_Mem_Write+0x4e>
 800720e:	2302      	movs	r3, #2
 8007210:	e0e6      	b.n	80073e0 <HAL_I2C_Mem_Write+0x21c>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800721a:	f7ff f847 	bl	80062ac <HAL_GetTick>
 800721e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	2319      	movs	r3, #25
 8007226:	2201      	movs	r2, #1
 8007228:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fadd 	bl	80077ec <I2C_WaitOnFlagUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d001      	beq.n	800723c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e0d1      	b.n	80073e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2221      	movs	r2, #33	; 0x21
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2240      	movs	r2, #64	; 0x40
 8007248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6a3a      	ldr	r2, [r7, #32]
 8007256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800725c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007264:	88f8      	ldrh	r0, [r7, #6]
 8007266:	893a      	ldrh	r2, [r7, #8]
 8007268:	8979      	ldrh	r1, [r7, #10]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	4603      	mov	r3, r0
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f9ed 	bl	8007654 <I2C_RequestMemoryWrite>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e0a9      	b.n	80073e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	2bff      	cmp	r3, #255	; 0xff
 8007294:	d90e      	bls.n	80072b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	22ff      	movs	r2, #255	; 0xff
 800729a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	8979      	ldrh	r1, [r7, #10]
 80072a4:	2300      	movs	r3, #0
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 fc45 	bl	8007b3c <I2C_TransferConfig>
 80072b2:	e00f      	b.n	80072d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	8979      	ldrh	r1, [r7, #10]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 fc34 	bl	8007b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 fac7 	bl	800786c <I2C_WaitOnTXISFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e07b      	b.n	80073e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	781a      	ldrb	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007310:	3b01      	subs	r3, #1
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d034      	beq.n	800738c <HAL_I2C_Mem_Write+0x1c8>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007326:	2b00      	cmp	r3, #0
 8007328:	d130      	bne.n	800738c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007330:	2200      	movs	r2, #0
 8007332:	2180      	movs	r1, #128	; 0x80
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 fa59 	bl	80077ec <I2C_WaitOnFlagUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e04d      	b.n	80073e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007348:	b29b      	uxth	r3, r3
 800734a:	2bff      	cmp	r3, #255	; 0xff
 800734c:	d90e      	bls.n	800736c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	22ff      	movs	r2, #255	; 0xff
 8007352:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007358:	b2da      	uxtb	r2, r3
 800735a:	8979      	ldrh	r1, [r7, #10]
 800735c:	2300      	movs	r3, #0
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 fbe9 	bl	8007b3c <I2C_TransferConfig>
 800736a:	e00f      	b.n	800738c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007370:	b29a      	uxth	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737a:	b2da      	uxtb	r2, r3
 800737c:	8979      	ldrh	r1, [r7, #10]
 800737e:	2300      	movs	r3, #0
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 fbd8 	bl	8007b3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d19e      	bne.n	80072d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007396:	697a      	ldr	r2, [r7, #20]
 8007398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 faa6 	bl	80078ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e01a      	b.n	80073e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2220      	movs	r2, #32
 80073b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6859      	ldr	r1, [r3, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <HAL_I2C_Mem_Write+0x224>)
 80073be:	400b      	ands	r3, r1
 80073c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2220      	movs	r2, #32
 80073c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e000      	b.n	80073e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80073de:	2302      	movs	r3, #2
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	fe00e800 	.word	0xfe00e800

080073ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	4608      	mov	r0, r1
 80073f6:	4611      	mov	r1, r2
 80073f8:	461a      	mov	r2, r3
 80073fa:	4603      	mov	r3, r0
 80073fc:	817b      	strh	r3, [r7, #10]
 80073fe:	460b      	mov	r3, r1
 8007400:	813b      	strh	r3, [r7, #8]
 8007402:	4613      	mov	r3, r2
 8007404:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b20      	cmp	r3, #32
 8007410:	f040 80fd 	bne.w	800760e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <HAL_I2C_Mem_Read+0x34>
 800741a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	d105      	bne.n	800742c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007426:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e0f1      	b.n	8007610 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_I2C_Mem_Read+0x4e>
 8007436:	2302      	movs	r3, #2
 8007438:	e0ea      	b.n	8007610 <HAL_I2C_Mem_Read+0x224>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007442:	f7fe ff33 	bl	80062ac <HAL_GetTick>
 8007446:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	9300      	str	r3, [sp, #0]
 800744c:	2319      	movs	r3, #25
 800744e:	2201      	movs	r2, #1
 8007450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f9c9 	bl	80077ec <I2C_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e0d5      	b.n	8007610 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2222      	movs	r2, #34	; 0x22
 8007468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2240      	movs	r2, #64	; 0x40
 8007470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6a3a      	ldr	r2, [r7, #32]
 800747e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007484:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800748c:	88f8      	ldrh	r0, [r7, #6]
 800748e:	893a      	ldrh	r2, [r7, #8]
 8007490:	8979      	ldrh	r1, [r7, #10]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	9301      	str	r3, [sp, #4]
 8007496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	4603      	mov	r3, r0
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f92d 	bl	80076fc <I2C_RequestMemoryRead>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d005      	beq.n	80074b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e0ad      	b.n	8007610 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2bff      	cmp	r3, #255	; 0xff
 80074bc:	d90e      	bls.n	80074dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	22ff      	movs	r2, #255	; 0xff
 80074c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	8979      	ldrh	r1, [r7, #10]
 80074cc:	4b52      	ldr	r3, [pc, #328]	; (8007618 <HAL_I2C_Mem_Read+0x22c>)
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fb31 	bl	8007b3c <I2C_TransferConfig>
 80074da:	e00f      	b.n	80074fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	8979      	ldrh	r1, [r7, #10]
 80074ee:	4b4a      	ldr	r3, [pc, #296]	; (8007618 <HAL_I2C_Mem_Read+0x22c>)
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fb20 	bl	8007b3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	2200      	movs	r2, #0
 8007504:	2104      	movs	r1, #4
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f970 	bl	80077ec <I2C_WaitOnFlagUntilTimeout>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e07c      	b.n	8007610 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b01      	subs	r3, #1
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754c:	b29b      	uxth	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d034      	beq.n	80075bc <HAL_I2C_Mem_Read+0x1d0>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d130      	bne.n	80075bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	2200      	movs	r2, #0
 8007562:	2180      	movs	r1, #128	; 0x80
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f941 	bl	80077ec <I2C_WaitOnFlagUntilTimeout>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e04d      	b.n	8007610 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007578:	b29b      	uxth	r3, r3
 800757a:	2bff      	cmp	r3, #255	; 0xff
 800757c:	d90e      	bls.n	800759c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	22ff      	movs	r2, #255	; 0xff
 8007582:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007588:	b2da      	uxtb	r2, r3
 800758a:	8979      	ldrh	r1, [r7, #10]
 800758c:	2300      	movs	r3, #0
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f000 fad1 	bl	8007b3c <I2C_TransferConfig>
 800759a:	e00f      	b.n	80075bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	8979      	ldrh	r1, [r7, #10]
 80075ae:	2300      	movs	r3, #0
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 fac0 	bl	8007b3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d19a      	bne.n	80074fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 f98e 	bl	80078ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e01a      	b.n	8007610 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2220      	movs	r2, #32
 80075e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6859      	ldr	r1, [r3, #4]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	4b0b      	ldr	r3, [pc, #44]	; (800761c <HAL_I2C_Mem_Read+0x230>)
 80075ee:	400b      	ands	r3, r1
 80075f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2220      	movs	r2, #32
 80075f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	e000      	b.n	8007610 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800760e:	2302      	movs	r3, #2
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	80002400 	.word	0x80002400
 800761c:	fe00e800 	.word	0xfe00e800

08007620 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800762e:	b2db      	uxtb	r3, r3
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8007648:	4618      	mov	r0, r3
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	4608      	mov	r0, r1
 800765e:	4611      	mov	r1, r2
 8007660:	461a      	mov	r2, r3
 8007662:	4603      	mov	r3, r0
 8007664:	817b      	strh	r3, [r7, #10]
 8007666:	460b      	mov	r3, r1
 8007668:	813b      	strh	r3, [r7, #8]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800766e:	88fb      	ldrh	r3, [r7, #6]
 8007670:	b2da      	uxtb	r2, r3
 8007672:	8979      	ldrh	r1, [r7, #10]
 8007674:	4b20      	ldr	r3, [pc, #128]	; (80076f8 <I2C_RequestMemoryWrite+0xa4>)
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fa5d 	bl	8007b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	69b9      	ldr	r1, [r7, #24]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f8f0 	bl	800786c <I2C_WaitOnTXISFlagUntilTimeout>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e02c      	b.n	80076f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007696:	88fb      	ldrh	r3, [r7, #6]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d105      	bne.n	80076a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800769c:	893b      	ldrh	r3, [r7, #8]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	629a      	str	r2, [r3, #40]	; 0x28
 80076a6:	e015      	b.n	80076d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076a8:	893b      	ldrh	r3, [r7, #8]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	69b9      	ldr	r1, [r7, #24]
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 f8d6 	bl	800786c <I2C_WaitOnTXISFlagUntilTimeout>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e012      	b.n	80076f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076ca:	893b      	ldrh	r3, [r7, #8]
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	2200      	movs	r2, #0
 80076dc:	2180      	movs	r1, #128	; 0x80
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 f884 	bl	80077ec <I2C_WaitOnFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	80002000 	.word	0x80002000

080076fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af02      	add	r7, sp, #8
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	4608      	mov	r0, r1
 8007706:	4611      	mov	r1, r2
 8007708:	461a      	mov	r2, r3
 800770a:	4603      	mov	r3, r0
 800770c:	817b      	strh	r3, [r7, #10]
 800770e:	460b      	mov	r3, r1
 8007710:	813b      	strh	r3, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007716:	88fb      	ldrh	r3, [r7, #6]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	8979      	ldrh	r1, [r7, #10]
 800771c:	4b20      	ldr	r3, [pc, #128]	; (80077a0 <I2C_RequestMemoryRead+0xa4>)
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2300      	movs	r3, #0
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 fa0a 	bl	8007b3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007728:	69fa      	ldr	r2, [r7, #28]
 800772a:	69b9      	ldr	r1, [r7, #24]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f89d 	bl	800786c <I2C_WaitOnTXISFlagUntilTimeout>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e02c      	b.n	8007796 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800773c:	88fb      	ldrh	r3, [r7, #6]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d105      	bne.n	800774e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007742:	893b      	ldrh	r3, [r7, #8]
 8007744:	b2da      	uxtb	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	629a      	str	r2, [r3, #40]	; 0x28
 800774c:	e015      	b.n	800777a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800774e:	893b      	ldrh	r3, [r7, #8]
 8007750:	0a1b      	lsrs	r3, r3, #8
 8007752:	b29b      	uxth	r3, r3
 8007754:	b2da      	uxtb	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	69b9      	ldr	r1, [r7, #24]
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f883 	bl	800786c <I2C_WaitOnTXISFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e012      	b.n	8007796 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007770:	893b      	ldrh	r3, [r7, #8]
 8007772:	b2da      	uxtb	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	2200      	movs	r2, #0
 8007782:	2140      	movs	r1, #64	; 0x40
 8007784:	68f8      	ldr	r0, [r7, #12]
 8007786:	f000 f831 	bl	80077ec <I2C_WaitOnFlagUntilTimeout>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	80002000 	.word	0x80002000

080077a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d103      	bne.n	80077c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2200      	movs	r2, #0
 80077c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d007      	beq.n	80077e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	619a      	str	r2, [r3, #24]
  }
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	4613      	mov	r3, r2
 80077fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80077fc:	e022      	b.n	8007844 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d01e      	beq.n	8007844 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007806:	f7fe fd51 	bl	80062ac <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d113      	bne.n	8007844 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007820:	f043 0220 	orr.w	r2, r3, #32
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2220      	movs	r2, #32
 800782c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e00f      	b.n	8007864 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	4013      	ands	r3, r2
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	429a      	cmp	r2, r3
 8007852:	bf0c      	ite	eq
 8007854:	2301      	moveq	r3, #1
 8007856:	2300      	movne	r3, #0
 8007858:	b2db      	uxtb	r3, r3
 800785a:	461a      	mov	r2, r3
 800785c:	79fb      	ldrb	r3, [r7, #7]
 800785e:	429a      	cmp	r2, r3
 8007860:	d0cd      	beq.n	80077fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007878:	e02c      	b.n	80078d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f870 	bl	8007964 <I2C_IsErrorOccurred>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e02a      	b.n	80078e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007894:	d01e      	beq.n	80078d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007896:	f7fe fd09 	bl	80062ac <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d302      	bcc.n	80078ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d113      	bne.n	80078d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b0:	f043 0220 	orr.w	r2, r3, #32
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e007      	b.n	80078e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	f003 0302 	and.w	r3, r3, #2
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d1cb      	bne.n	800787a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80078f8:	e028      	b.n	800794c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 f830 	bl	8007964 <I2C_IsErrorOccurred>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e026      	b.n	800795c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800790e:	f7fe fccd 	bl	80062ac <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	429a      	cmp	r2, r3
 800791c:	d302      	bcc.n	8007924 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d113      	bne.n	800794c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007928:	f043 0220 	orr.w	r2, r3, #32
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e007      	b.n	800795c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	f003 0320 	and.w	r3, r3, #32
 8007956:	2b20      	cmp	r3, #32
 8007958:	d1cf      	bne.n	80078fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08a      	sub	sp, #40	; 0x28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800797e:	2300      	movs	r3, #0
 8007980:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d075      	beq.n	8007a7c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2210      	movs	r2, #16
 8007996:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007998:	e056      	b.n	8007a48 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a0:	d052      	beq.n	8007a48 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80079a2:	f7fe fc83 	bl	80062ac <HAL_GetTick>
 80079a6:	4602      	mov	r2, r0
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	1ad3      	subs	r3, r2, r3
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d302      	bcc.n	80079b8 <I2C_IsErrorOccurred+0x54>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d147      	bne.n	8007a48 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079da:	d12e      	bne.n	8007a3a <I2C_IsErrorOccurred+0xd6>
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079e2:	d02a      	beq.n	8007a3a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80079e4:	7cfb      	ldrb	r3, [r7, #19]
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d027      	beq.n	8007a3a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80079fa:	f7fe fc57 	bl	80062ac <HAL_GetTick>
 80079fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a00:	e01b      	b.n	8007a3a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007a02:	f7fe fc53 	bl	80062ac <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b19      	cmp	r3, #25
 8007a0e:	d914      	bls.n	8007a3a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d1dc      	bne.n	8007a02 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d003      	beq.n	8007a5e <I2C_IsErrorOccurred+0xfa>
 8007a56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d09d      	beq.n	800799a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d103      	bne.n	8007a6e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	f043 0304 	orr.w	r3, r3, #4
 8007a74:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00b      	beq.n	8007aa6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	f043 0301 	orr.w	r3, r3, #1
 8007a94:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a9e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00b      	beq.n	8007ac8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	f043 0308 	orr.w	r3, r3, #8
 8007ab6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ac0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00b      	beq.n	8007aea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	f043 0302 	orr.w	r3, r3, #2
 8007ad8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d01c      	beq.n	8007b2c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f7ff fe56 	bl	80077a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6859      	ldr	r1, [r3, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <I2C_IsErrorOccurred+0x1d4>)
 8007b04:	400b      	ands	r3, r1
 8007b06:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b0c:	6a3b      	ldr	r3, [r7, #32]
 8007b0e:	431a      	orrs	r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3728      	adds	r7, #40	; 0x28
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	fe00e800 	.word	0xfe00e800

08007b3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	817b      	strh	r3, [r7, #10]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b4e:	897b      	ldrh	r3, [r7, #10]
 8007b50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b54:	7a7b      	ldrb	r3, [r7, #9]
 8007b56:	041b      	lsls	r3, r3, #16
 8007b58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b5c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b6a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	0d5b      	lsrs	r3, r3, #21
 8007b76:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b7a:	4b08      	ldr	r3, [pc, #32]	; (8007b9c <I2C_TransferConfig+0x60>)
 8007b7c:	430b      	orrs	r3, r1
 8007b7e:	43db      	mvns	r3, r3
 8007b80:	ea02 0103 	and.w	r1, r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007b8e:	bf00      	nop
 8007b90:	371c      	adds	r7, #28
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	03ff63ff 	.word	0x03ff63ff

08007ba0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	d138      	bne.n	8007c28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e032      	b.n	8007c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2224      	movs	r2, #36	; 0x24
 8007bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0201 	bic.w	r2, r2, #1
 8007be2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007bf2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6819      	ldr	r1, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2220      	movs	r2, #32
 8007c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	e000      	b.n	8007c2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007c28:	2302      	movs	r3, #2
  }
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b085      	sub	sp, #20
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	d139      	bne.n	8007cc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d101      	bne.n	8007c5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007c56:	2302      	movs	r3, #2
 8007c58:	e033      	b.n	8007cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2224      	movs	r2, #36	; 0x24
 8007c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0201 	bic.w	r2, r2, #1
 8007c78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f042 0201 	orr.w	r2, r2, #1
 8007caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e000      	b.n	8007cc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007cc0:	2302      	movs	r3, #2
  }
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3714      	adds	r7, #20
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8007cd4:	4b04      	ldr	r3, [pc, #16]	; (8007ce8 <HAL_PWREx_GetVoltageRange+0x18>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40007000 	.word	0x40007000

08007cec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cfa:	d130      	bne.n	8007d5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007cfc:	4b23      	ldr	r3, [pc, #140]	; (8007d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d08:	d038      	beq.n	8007d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d0a:	4b20      	ldr	r3, [pc, #128]	; (8007d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d12:	4a1e      	ldr	r2, [pc, #120]	; (8007d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d1a:	4b1d      	ldr	r3, [pc, #116]	; (8007d90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2232      	movs	r2, #50	; 0x32
 8007d20:	fb02 f303 	mul.w	r3, r2, r3
 8007d24:	4a1b      	ldr	r2, [pc, #108]	; (8007d94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007d26:	fba2 2303 	umull	r2, r3, r2, r3
 8007d2a:	0c9b      	lsrs	r3, r3, #18
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d30:	e002      	b.n	8007d38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d38:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d44:	d102      	bne.n	8007d4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1f2      	bne.n	8007d32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d58:	d110      	bne.n	8007d7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e00f      	b.n	8007d7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d6a:	d007      	beq.n	8007d7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007d6c:	4b07      	ldr	r3, [pc, #28]	; (8007d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d74:	4a05      	ldr	r2, [pc, #20]	; (8007d8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40007000 	.word	0x40007000
 8007d90:	2000000c 	.word	0x2000000c
 8007d94:	431bde83 	.word	0x431bde83

08007d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	e3d4      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007daa:	4ba1      	ldr	r3, [pc, #644]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f003 030c 	and.w	r3, r3, #12
 8007db2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007db4:	4b9e      	ldr	r3, [pc, #632]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f003 0303 	and.w	r3, r3, #3
 8007dbc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0310 	and.w	r3, r3, #16
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80e4 	beq.w	8007f94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d007      	beq.n	8007de2 <HAL_RCC_OscConfig+0x4a>
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2b0c      	cmp	r3, #12
 8007dd6:	f040 808b 	bne.w	8007ef0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	f040 8087 	bne.w	8007ef0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007de2:	4b93      	ldr	r3, [pc, #588]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <HAL_RCC_OscConfig+0x62>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e3ac      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1a      	ldr	r2, [r3, #32]
 8007dfe:	4b8c      	ldr	r3, [pc, #560]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 0308 	and.w	r3, r3, #8
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <HAL_RCC_OscConfig+0x7c>
 8007e0a:	4b89      	ldr	r3, [pc, #548]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e12:	e005      	b.n	8007e20 <HAL_RCC_OscConfig+0x88>
 8007e14:	4b86      	ldr	r3, [pc, #536]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e1a:	091b      	lsrs	r3, r3, #4
 8007e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d223      	bcs.n	8007e6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fd41 	bl	80088b0 <RCC_SetFlashLatencyFromMSIRange>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e38d      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e38:	4b7d      	ldr	r3, [pc, #500]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a7c      	ldr	r2, [pc, #496]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e3e:	f043 0308 	orr.w	r3, r3, #8
 8007e42:	6013      	str	r3, [r2, #0]
 8007e44:	4b7a      	ldr	r3, [pc, #488]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	4977      	ldr	r1, [pc, #476]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e56:	4b76      	ldr	r3, [pc, #472]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	021b      	lsls	r3, r3, #8
 8007e64:	4972      	ldr	r1, [pc, #456]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	604b      	str	r3, [r1, #4]
 8007e6a:	e025      	b.n	8007eb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007e6c:	4b70      	ldr	r3, [pc, #448]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a6f      	ldr	r2, [pc, #444]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e72:	f043 0308 	orr.w	r3, r3, #8
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	4b6d      	ldr	r3, [pc, #436]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	496a      	ldr	r1, [pc, #424]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007e8a:	4b69      	ldr	r3, [pc, #420]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	4965      	ldr	r1, [pc, #404]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d109      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f000 fd01 	bl	80088b0 <RCC_SetFlashLatencyFromMSIRange>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e34d      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007eb8:	f000 fc36 	bl	8008728 <HAL_RCC_GetSysClockFreq>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	4b5c      	ldr	r3, [pc, #368]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	091b      	lsrs	r3, r3, #4
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	495a      	ldr	r1, [pc, #360]	; (8008034 <HAL_RCC_OscConfig+0x29c>)
 8007eca:	5ccb      	ldrb	r3, [r1, r3]
 8007ecc:	f003 031f 	and.w	r3, r3, #31
 8007ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed4:	4a58      	ldr	r2, [pc, #352]	; (8008038 <HAL_RCC_OscConfig+0x2a0>)
 8007ed6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007ed8:	4b58      	ldr	r3, [pc, #352]	; (800803c <HAL_RCC_OscConfig+0x2a4>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fe f995 	bl	800620c <HAL_InitTick>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d052      	beq.n	8007f92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	e331      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d032      	beq.n	8007f5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007ef8:	4b4d      	ldr	r3, [pc, #308]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a4c      	ldr	r2, [pc, #304]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007efe:	f043 0301 	orr.w	r3, r3, #1
 8007f02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007f04:	f7fe f9d2 	bl	80062ac <HAL_GetTick>
 8007f08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f0c:	f7fe f9ce 	bl	80062ac <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e31a      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007f1e:	4b44      	ldr	r3, [pc, #272]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0f0      	beq.n	8007f0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007f2a:	4b41      	ldr	r3, [pc, #260]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a40      	ldr	r2, [pc, #256]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f30:	f043 0308 	orr.w	r3, r3, #8
 8007f34:	6013      	str	r3, [r2, #0]
 8007f36:	4b3e      	ldr	r3, [pc, #248]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	493b      	ldr	r1, [pc, #236]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f44:	4313      	orrs	r3, r2
 8007f46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007f48:	4b39      	ldr	r3, [pc, #228]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	4936      	ldr	r1, [pc, #216]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	604b      	str	r3, [r1, #4]
 8007f5c:	e01a      	b.n	8007f94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007f5e:	4b34      	ldr	r3, [pc, #208]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a33      	ldr	r2, [pc, #204]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f64:	f023 0301 	bic.w	r3, r3, #1
 8007f68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007f6a:	f7fe f99f 	bl	80062ac <HAL_GetTick>
 8007f6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007f70:	e008      	b.n	8007f84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007f72:	f7fe f99b 	bl	80062ac <HAL_GetTick>
 8007f76:	4602      	mov	r2, r0
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d901      	bls.n	8007f84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8007f80:	2303      	movs	r3, #3
 8007f82:	e2e7      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007f84:	4b2a      	ldr	r3, [pc, #168]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1f0      	bne.n	8007f72 <HAL_RCC_OscConfig+0x1da>
 8007f90:	e000      	b.n	8007f94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007f92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d074      	beq.n	800808a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	2b08      	cmp	r3, #8
 8007fa4:	d005      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x21a>
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	2b0c      	cmp	r3, #12
 8007faa:	d10e      	bne.n	8007fca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d10b      	bne.n	8007fca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fb2:	4b1f      	ldr	r3, [pc, #124]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d064      	beq.n	8008088 <HAL_RCC_OscConfig+0x2f0>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d160      	bne.n	8008088 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e2c4      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd2:	d106      	bne.n	8007fe2 <HAL_RCC_OscConfig+0x24a>
 8007fd4:	4b16      	ldr	r3, [pc, #88]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a15      	ldr	r2, [pc, #84]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	e01d      	b.n	800801e <HAL_RCC_OscConfig+0x286>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fea:	d10c      	bne.n	8008006 <HAL_RCC_OscConfig+0x26e>
 8007fec:	4b10      	ldr	r3, [pc, #64]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ff6:	6013      	str	r3, [r2, #0]
 8007ff8:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a0c      	ldr	r2, [pc, #48]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8007ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	e00b      	b.n	800801e <HAL_RCC_OscConfig+0x286>
 8008006:	4b0a      	ldr	r3, [pc, #40]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a09      	ldr	r2, [pc, #36]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 800800c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	4b07      	ldr	r3, [pc, #28]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a06      	ldr	r2, [pc, #24]	; (8008030 <HAL_RCC_OscConfig+0x298>)
 8008018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800801c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01c      	beq.n	8008060 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008026:	f7fe f941 	bl	80062ac <HAL_GetTick>
 800802a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800802c:	e011      	b.n	8008052 <HAL_RCC_OscConfig+0x2ba>
 800802e:	bf00      	nop
 8008030:	40021000 	.word	0x40021000
 8008034:	0801a3c8 	.word	0x0801a3c8
 8008038:	2000000c 	.word	0x2000000c
 800803c:	200000e8 	.word	0x200000e8
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008040:	f7fe f934 	bl	80062ac <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	2b64      	cmp	r3, #100	; 0x64
 800804c:	d901      	bls.n	8008052 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e280      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008052:	4baf      	ldr	r3, [pc, #700]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0f0      	beq.n	8008040 <HAL_RCC_OscConfig+0x2a8>
 800805e:	e014      	b.n	800808a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008060:	f7fe f924 	bl	80062ac <HAL_GetTick>
 8008064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008068:	f7fe f920 	bl	80062ac <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b64      	cmp	r3, #100	; 0x64
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e26c      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800807a:	4ba5      	ldr	r3, [pc, #660]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f0      	bne.n	8008068 <HAL_RCC_OscConfig+0x2d0>
 8008086:	e000      	b.n	800808a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b00      	cmp	r3, #0
 8008094:	d060      	beq.n	8008158 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	2b04      	cmp	r3, #4
 800809a:	d005      	beq.n	80080a8 <HAL_RCC_OscConfig+0x310>
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b0c      	cmp	r3, #12
 80080a0:	d119      	bne.n	80080d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d116      	bne.n	80080d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080a8:	4b99      	ldr	r3, [pc, #612]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d005      	beq.n	80080c0 <HAL_RCC_OscConfig+0x328>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e249      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080c0:	4b93      	ldr	r3, [pc, #588]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	061b      	lsls	r3, r3, #24
 80080ce:	4990      	ldr	r1, [pc, #576]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080d4:	e040      	b.n	8008158 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d023      	beq.n	8008126 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080de:	4b8c      	ldr	r3, [pc, #560]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a8b      	ldr	r2, [pc, #556]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80080e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ea:	f7fe f8df 	bl	80062ac <HAL_GetTick>
 80080ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080f0:	e008      	b.n	8008104 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080f2:	f7fe f8db 	bl	80062ac <HAL_GetTick>
 80080f6:	4602      	mov	r2, r0
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	2b02      	cmp	r3, #2
 80080fe:	d901      	bls.n	8008104 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008100:	2303      	movs	r3, #3
 8008102:	e227      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008104:	4b82      	ldr	r3, [pc, #520]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800810c:	2b00      	cmp	r3, #0
 800810e:	d0f0      	beq.n	80080f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008110:	4b7f      	ldr	r3, [pc, #508]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	061b      	lsls	r3, r3, #24
 800811e:	497c      	ldr	r1, [pc, #496]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008120:	4313      	orrs	r3, r2
 8008122:	604b      	str	r3, [r1, #4]
 8008124:	e018      	b.n	8008158 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008126:	4b7a      	ldr	r3, [pc, #488]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a79      	ldr	r2, [pc, #484]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 800812c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008132:	f7fe f8bb 	bl	80062ac <HAL_GetTick>
 8008136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008138:	e008      	b.n	800814c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800813a:	f7fe f8b7 	bl	80062ac <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	2b02      	cmp	r3, #2
 8008146:	d901      	bls.n	800814c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e203      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800814c:	4b70      	ldr	r3, [pc, #448]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008154:	2b00      	cmp	r3, #0
 8008156:	d1f0      	bne.n	800813a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b00      	cmp	r3, #0
 8008162:	d03c      	beq.n	80081de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01c      	beq.n	80081a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800816c:	4b68      	ldr	r3, [pc, #416]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 800816e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008172:	4a67      	ldr	r2, [pc, #412]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008174:	f043 0301 	orr.w	r3, r3, #1
 8008178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800817c:	f7fe f896 	bl	80062ac <HAL_GetTick>
 8008180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008182:	e008      	b.n	8008196 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008184:	f7fe f892 	bl	80062ac <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d901      	bls.n	8008196 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e1de      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008196:	4b5e      	ldr	r3, [pc, #376]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008198:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0ef      	beq.n	8008184 <HAL_RCC_OscConfig+0x3ec>
 80081a4:	e01b      	b.n	80081de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081a6:	4b5a      	ldr	r3, [pc, #360]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80081a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081ac:	4a58      	ldr	r2, [pc, #352]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b6:	f7fe f879 	bl	80062ac <HAL_GetTick>
 80081ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081bc:	e008      	b.n	80081d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081be:	f7fe f875 	bl	80062ac <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d901      	bls.n	80081d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	e1c1      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081d0:	4b4f      	ldr	r3, [pc, #316]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80081d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1ef      	bne.n	80081be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f000 80a6 	beq.w	8008338 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081ec:	2300      	movs	r3, #0
 80081ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80081f0:	4b47      	ldr	r3, [pc, #284]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80081f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10d      	bne.n	8008218 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081fc:	4b44      	ldr	r3, [pc, #272]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80081fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008200:	4a43      	ldr	r2, [pc, #268]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008202:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008206:	6593      	str	r3, [r2, #88]	; 0x58
 8008208:	4b41      	ldr	r3, [pc, #260]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 800820a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008210:	60bb      	str	r3, [r7, #8]
 8008212:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008214:	2301      	movs	r3, #1
 8008216:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008218:	4b3e      	ldr	r3, [pc, #248]	; (8008314 <HAL_RCC_OscConfig+0x57c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008220:	2b00      	cmp	r3, #0
 8008222:	d118      	bne.n	8008256 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008224:	4b3b      	ldr	r3, [pc, #236]	; (8008314 <HAL_RCC_OscConfig+0x57c>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a3a      	ldr	r2, [pc, #232]	; (8008314 <HAL_RCC_OscConfig+0x57c>)
 800822a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800822e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008230:	f7fe f83c 	bl	80062ac <HAL_GetTick>
 8008234:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008236:	e008      	b.n	800824a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008238:	f7fe f838 	bl	80062ac <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e184      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800824a:	4b32      	ldr	r3, [pc, #200]	; (8008314 <HAL_RCC_OscConfig+0x57c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d108      	bne.n	8008270 <HAL_RCC_OscConfig+0x4d8>
 800825e:	4b2c      	ldr	r3, [pc, #176]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008264:	4a2a      	ldr	r2, [pc, #168]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800826e:	e024      	b.n	80082ba <HAL_RCC_OscConfig+0x522>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	2b05      	cmp	r3, #5
 8008276:	d110      	bne.n	800829a <HAL_RCC_OscConfig+0x502>
 8008278:	4b25      	ldr	r3, [pc, #148]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 800827a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827e:	4a24      	ldr	r2, [pc, #144]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008280:	f043 0304 	orr.w	r3, r3, #4
 8008284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008288:	4b21      	ldr	r3, [pc, #132]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 800828a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800828e:	4a20      	ldr	r2, [pc, #128]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 8008290:	f043 0301 	orr.w	r3, r3, #1
 8008294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008298:	e00f      	b.n	80082ba <HAL_RCC_OscConfig+0x522>
 800829a:	4b1d      	ldr	r3, [pc, #116]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 800829c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a0:	4a1b      	ldr	r2, [pc, #108]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082aa:	4b19      	ldr	r3, [pc, #100]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80082ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b0:	4a17      	ldr	r2, [pc, #92]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80082b2:	f023 0304 	bic.w	r3, r3, #4
 80082b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d016      	beq.n	80082f0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082c2:	f7fd fff3 	bl	80062ac <HAL_GetTick>
 80082c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082c8:	e00a      	b.n	80082e0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082ca:	f7fd ffef 	bl	80062ac <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d8:	4293      	cmp	r3, r2
 80082da:	d901      	bls.n	80082e0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e139      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <HAL_RCC_OscConfig+0x578>)
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0ed      	beq.n	80082ca <HAL_RCC_OscConfig+0x532>
 80082ee:	e01a      	b.n	8008326 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082f0:	f7fd ffdc 	bl	80062ac <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80082f6:	e00f      	b.n	8008318 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082f8:	f7fd ffd8 	bl	80062ac <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	f241 3288 	movw	r2, #5000	; 0x1388
 8008306:	4293      	cmp	r3, r2
 8008308:	d906      	bls.n	8008318 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e122      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
 800830e:	bf00      	nop
 8008310:	40021000 	.word	0x40021000
 8008314:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008318:	4b90      	ldr	r3, [pc, #576]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 800831a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e8      	bne.n	80082f8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008326:	7ffb      	ldrb	r3, [r7, #31]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d105      	bne.n	8008338 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800832c:	4b8b      	ldr	r3, [pc, #556]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 800832e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008330:	4a8a      	ldr	r2, [pc, #552]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 8008332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008336:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8108 	beq.w	8008552 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	2b02      	cmp	r3, #2
 8008348:	f040 80d0 	bne.w	80084ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800834c:	4b83      	ldr	r3, [pc, #524]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f003 0203 	and.w	r2, r3, #3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800835c:	429a      	cmp	r2, r3
 800835e:	d130      	bne.n	80083c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836a:	3b01      	subs	r3, #1
 800836c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800836e:	429a      	cmp	r2, r3
 8008370:	d127      	bne.n	80083c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800837e:	429a      	cmp	r2, r3
 8008380:	d11f      	bne.n	80083c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800838c:	2a07      	cmp	r2, #7
 800838e:	bf14      	ite	ne
 8008390:	2201      	movne	r2, #1
 8008392:	2200      	moveq	r2, #0
 8008394:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008396:	4293      	cmp	r3, r2
 8008398:	d113      	bne.n	80083c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a4:	085b      	lsrs	r3, r3, #1
 80083a6:	3b01      	subs	r3, #1
 80083a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d109      	bne.n	80083c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	085b      	lsrs	r3, r3, #1
 80083ba:	3b01      	subs	r3, #1
 80083bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80083be:	429a      	cmp	r2, r3
 80083c0:	d06e      	beq.n	80084a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b0c      	cmp	r3, #12
 80083c6:	d069      	beq.n	800849c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80083c8:	4b64      	ldr	r3, [pc, #400]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d105      	bne.n	80083e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80083d4:	4b61      	ldr	r3, [pc, #388]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e0b7      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80083e4:	4b5d      	ldr	r3, [pc, #372]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a5c      	ldr	r2, [pc, #368]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80083ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80083f0:	f7fd ff5c 	bl	80062ac <HAL_GetTick>
 80083f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083f6:	e008      	b.n	800840a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083f8:	f7fd ff58 	bl	80062ac <HAL_GetTick>
 80083fc:	4602      	mov	r2, r0
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	2b02      	cmp	r3, #2
 8008404:	d901      	bls.n	800840a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e0a4      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800840a:	4b54      	ldr	r3, [pc, #336]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1f0      	bne.n	80083f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008416:	4b51      	ldr	r3, [pc, #324]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 8008418:	68da      	ldr	r2, [r3, #12]
 800841a:	4b51      	ldr	r3, [pc, #324]	; (8008560 <HAL_RCC_OscConfig+0x7c8>)
 800841c:	4013      	ands	r3, r2
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008426:	3a01      	subs	r2, #1
 8008428:	0112      	lsls	r2, r2, #4
 800842a:	4311      	orrs	r1, r2
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008430:	0212      	lsls	r2, r2, #8
 8008432:	4311      	orrs	r1, r2
 8008434:	687a      	ldr	r2, [r7, #4]
 8008436:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008438:	0852      	lsrs	r2, r2, #1
 800843a:	3a01      	subs	r2, #1
 800843c:	0552      	lsls	r2, r2, #21
 800843e:	4311      	orrs	r1, r2
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008444:	0852      	lsrs	r2, r2, #1
 8008446:	3a01      	subs	r2, #1
 8008448:	0652      	lsls	r2, r2, #25
 800844a:	4311      	orrs	r1, r2
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008450:	0912      	lsrs	r2, r2, #4
 8008452:	0452      	lsls	r2, r2, #17
 8008454:	430a      	orrs	r2, r1
 8008456:	4941      	ldr	r1, [pc, #260]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 8008458:	4313      	orrs	r3, r2
 800845a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800845c:	4b3f      	ldr	r3, [pc, #252]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a3e      	ldr	r2, [pc, #248]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 8008462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008466:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008468:	4b3c      	ldr	r3, [pc, #240]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a3b      	ldr	r2, [pc, #236]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 800846e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008472:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008474:	f7fd ff1a 	bl	80062ac <HAL_GetTick>
 8008478:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800847c:	f7fd ff16 	bl	80062ac <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e062      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800848e:	4b33      	ldr	r3, [pc, #204]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d0f0      	beq.n	800847c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800849a:	e05a      	b.n	8008552 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	e059      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084a0:	4b2e      	ldr	r3, [pc, #184]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d152      	bne.n	8008552 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80084ac:	4b2b      	ldr	r3, [pc, #172]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a2a      	ldr	r2, [pc, #168]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80084b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084b8:	4b28      	ldr	r3, [pc, #160]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	4a27      	ldr	r2, [pc, #156]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80084be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084c4:	f7fd fef2 	bl	80062ac <HAL_GetTick>
 80084c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084ca:	e008      	b.n	80084de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084cc:	f7fd feee 	bl	80062ac <HAL_GetTick>
 80084d0:	4602      	mov	r2, r0
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	1ad3      	subs	r3, r2, r3
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e03a      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084de:	4b1f      	ldr	r3, [pc, #124]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0f0      	beq.n	80084cc <HAL_RCC_OscConfig+0x734>
 80084ea:	e032      	b.n	8008552 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	2b0c      	cmp	r3, #12
 80084f0:	d02d      	beq.n	800854e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084f2:	4b1a      	ldr	r3, [pc, #104]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a19      	ldr	r2, [pc, #100]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 80084f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084fc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80084fe:	4b17      	ldr	r3, [pc, #92]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800850a:	4b14      	ldr	r3, [pc, #80]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	4a13      	ldr	r2, [pc, #76]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 8008510:	f023 0303 	bic.w	r3, r3, #3
 8008514:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	4a10      	ldr	r2, [pc, #64]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 800851c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008524:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008526:	f7fd fec1 	bl	80062ac <HAL_GetTick>
 800852a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800852c:	e008      	b.n	8008540 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800852e:	f7fd febd 	bl	80062ac <HAL_GetTick>
 8008532:	4602      	mov	r2, r0
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d901      	bls.n	8008540 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e009      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008540:	4b06      	ldr	r3, [pc, #24]	; (800855c <HAL_RCC_OscConfig+0x7c4>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1f0      	bne.n	800852e <HAL_RCC_OscConfig+0x796>
 800854c:	e001      	b.n	8008552 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e000      	b.n	8008554 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3720      	adds	r7, #32
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	40021000 	.word	0x40021000
 8008560:	f99d808c 	.word	0xf99d808c

08008564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e0c8      	b.n	800870a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008578:	4b66      	ldr	r3, [pc, #408]	; (8008714 <HAL_RCC_ClockConfig+0x1b0>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0307 	and.w	r3, r3, #7
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d910      	bls.n	80085a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008586:	4b63      	ldr	r3, [pc, #396]	; (8008714 <HAL_RCC_ClockConfig+0x1b0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f023 0207 	bic.w	r2, r3, #7
 800858e:	4961      	ldr	r1, [pc, #388]	; (8008714 <HAL_RCC_ClockConfig+0x1b0>)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	4313      	orrs	r3, r2
 8008594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008596:	4b5f      	ldr	r3, [pc, #380]	; (8008714 <HAL_RCC_ClockConfig+0x1b0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d001      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e0b0      	b.n	800870a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d04c      	beq.n	800864e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d107      	bne.n	80085cc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80085bc:	4b56      	ldr	r3, [pc, #344]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d121      	bne.n	800860c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e09e      	b.n	800870a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d107      	bne.n	80085e4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085d4:	4b50      	ldr	r3, [pc, #320]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d115      	bne.n	800860c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e092      	b.n	800870a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d107      	bne.n	80085fc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80085ec:	4b4a      	ldr	r3, [pc, #296]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d109      	bne.n	800860c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e086      	b.n	800870a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085fc:	4b46      	ldr	r3, [pc, #280]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e07e      	b.n	800870a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800860c:	4b42      	ldr	r3, [pc, #264]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f023 0203 	bic.w	r2, r3, #3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	493f      	ldr	r1, [pc, #252]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 800861a:	4313      	orrs	r3, r2
 800861c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800861e:	f7fd fe45 	bl	80062ac <HAL_GetTick>
 8008622:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008624:	e00a      	b.n	800863c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008626:	f7fd fe41 	bl	80062ac <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	f241 3288 	movw	r2, #5000	; 0x1388
 8008634:	4293      	cmp	r3, r2
 8008636:	d901      	bls.n	800863c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e066      	b.n	800870a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800863c:	4b36      	ldr	r3, [pc, #216]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f003 020c 	and.w	r2, r3, #12
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	429a      	cmp	r2, r3
 800864c:	d1eb      	bne.n	8008626 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800865a:	4b2f      	ldr	r3, [pc, #188]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	492c      	ldr	r1, [pc, #176]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 8008668:	4313      	orrs	r3, r2
 800866a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800866c:	4b29      	ldr	r3, [pc, #164]	; (8008714 <HAL_RCC_ClockConfig+0x1b0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0307 	and.w	r3, r3, #7
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d210      	bcs.n	800869c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800867a:	4b26      	ldr	r3, [pc, #152]	; (8008714 <HAL_RCC_ClockConfig+0x1b0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f023 0207 	bic.w	r2, r3, #7
 8008682:	4924      	ldr	r1, [pc, #144]	; (8008714 <HAL_RCC_ClockConfig+0x1b0>)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	4313      	orrs	r3, r2
 8008688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800868a:	4b22      	ldr	r3, [pc, #136]	; (8008714 <HAL_RCC_ClockConfig+0x1b0>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0307 	and.w	r3, r3, #7
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	429a      	cmp	r2, r3
 8008696:	d001      	beq.n	800869c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e036      	b.n	800870a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0304 	and.w	r3, r3, #4
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d008      	beq.n	80086ba <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086a8:	4b1b      	ldr	r3, [pc, #108]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	4918      	ldr	r1, [pc, #96]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 0308 	and.w	r3, r3, #8
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d009      	beq.n	80086da <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086c6:	4b14      	ldr	r3, [pc, #80]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	4910      	ldr	r1, [pc, #64]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086da:	f000 f825 	bl	8008728 <HAL_RCC_GetSysClockFreq>
 80086de:	4602      	mov	r2, r0
 80086e0:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <HAL_RCC_ClockConfig+0x1b4>)
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	091b      	lsrs	r3, r3, #4
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	490c      	ldr	r1, [pc, #48]	; (800871c <HAL_RCC_ClockConfig+0x1b8>)
 80086ec:	5ccb      	ldrb	r3, [r1, r3]
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	fa22 f303 	lsr.w	r3, r2, r3
 80086f6:	4a0a      	ldr	r2, [pc, #40]	; (8008720 <HAL_RCC_ClockConfig+0x1bc>)
 80086f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80086fa:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <HAL_RCC_ClockConfig+0x1c0>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fd fd84 	bl	800620c <HAL_InitTick>
 8008704:	4603      	mov	r3, r0
 8008706:	72fb      	strb	r3, [r7, #11]

  return status;
 8008708:	7afb      	ldrb	r3, [r7, #11]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	40022000 	.word	0x40022000
 8008718:	40021000 	.word	0x40021000
 800871c:	0801a3c8 	.word	0x0801a3c8
 8008720:	2000000c 	.word	0x2000000c
 8008724:	200000e8 	.word	0x200000e8

08008728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008728:	b480      	push	{r7}
 800872a:	b089      	sub	sp, #36	; 0x24
 800872c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800872e:	2300      	movs	r3, #0
 8008730:	61fb      	str	r3, [r7, #28]
 8008732:	2300      	movs	r3, #0
 8008734:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008736:	4b3e      	ldr	r3, [pc, #248]	; (8008830 <HAL_RCC_GetSysClockFreq+0x108>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	f003 030c 	and.w	r3, r3, #12
 800873e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008740:	4b3b      	ldr	r3, [pc, #236]	; (8008830 <HAL_RCC_GetSysClockFreq+0x108>)
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f003 0303 	and.w	r3, r3, #3
 8008748:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <HAL_RCC_GetSysClockFreq+0x34>
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	2b0c      	cmp	r3, #12
 8008754:	d121      	bne.n	800879a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d11e      	bne.n	800879a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800875c:	4b34      	ldr	r3, [pc, #208]	; (8008830 <HAL_RCC_GetSysClockFreq+0x108>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 0308 	and.w	r3, r3, #8
 8008764:	2b00      	cmp	r3, #0
 8008766:	d107      	bne.n	8008778 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008768:	4b31      	ldr	r3, [pc, #196]	; (8008830 <HAL_RCC_GetSysClockFreq+0x108>)
 800876a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	f003 030f 	and.w	r3, r3, #15
 8008774:	61fb      	str	r3, [r7, #28]
 8008776:	e005      	b.n	8008784 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008778:	4b2d      	ldr	r3, [pc, #180]	; (8008830 <HAL_RCC_GetSysClockFreq+0x108>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	091b      	lsrs	r3, r3, #4
 800877e:	f003 030f 	and.w	r3, r3, #15
 8008782:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008784:	4a2b      	ldr	r2, [pc, #172]	; (8008834 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800878c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10d      	bne.n	80087b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008798:	e00a      	b.n	80087b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b04      	cmp	r3, #4
 800879e:	d102      	bne.n	80087a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80087a0:	4b25      	ldr	r3, [pc, #148]	; (8008838 <HAL_RCC_GetSysClockFreq+0x110>)
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	e004      	b.n	80087b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	2b08      	cmp	r3, #8
 80087aa:	d101      	bne.n	80087b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80087ac:	4b23      	ldr	r3, [pc, #140]	; (800883c <HAL_RCC_GetSysClockFreq+0x114>)
 80087ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	2b0c      	cmp	r3, #12
 80087b4:	d134      	bne.n	8008820 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80087b6:	4b1e      	ldr	r3, [pc, #120]	; (8008830 <HAL_RCC_GetSysClockFreq+0x108>)
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	f003 0303 	and.w	r3, r3, #3
 80087be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d003      	beq.n	80087ce <HAL_RCC_GetSysClockFreq+0xa6>
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d003      	beq.n	80087d4 <HAL_RCC_GetSysClockFreq+0xac>
 80087cc:	e005      	b.n	80087da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80087ce:	4b1a      	ldr	r3, [pc, #104]	; (8008838 <HAL_RCC_GetSysClockFreq+0x110>)
 80087d0:	617b      	str	r3, [r7, #20]
      break;
 80087d2:	e005      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80087d4:	4b19      	ldr	r3, [pc, #100]	; (800883c <HAL_RCC_GetSysClockFreq+0x114>)
 80087d6:	617b      	str	r3, [r7, #20]
      break;
 80087d8:	e002      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	617b      	str	r3, [r7, #20]
      break;
 80087de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087e0:	4b13      	ldr	r3, [pc, #76]	; (8008830 <HAL_RCC_GetSysClockFreq+0x108>)
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	091b      	lsrs	r3, r3, #4
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	3301      	adds	r3, #1
 80087ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80087ee:	4b10      	ldr	r3, [pc, #64]	; (8008830 <HAL_RCC_GetSysClockFreq+0x108>)
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	0a1b      	lsrs	r3, r3, #8
 80087f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f8:	697a      	ldr	r2, [r7, #20]
 80087fa:	fb02 f203 	mul.w	r2, r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	fbb2 f3f3 	udiv	r3, r2, r3
 8008804:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008806:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <HAL_RCC_GetSysClockFreq+0x108>)
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	0e5b      	lsrs	r3, r3, #25
 800880c:	f003 0303 	and.w	r3, r3, #3
 8008810:	3301      	adds	r3, #1
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	fbb2 f3f3 	udiv	r3, r2, r3
 800881e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008820:	69bb      	ldr	r3, [r7, #24]
}
 8008822:	4618      	mov	r0, r3
 8008824:	3724      	adds	r7, #36	; 0x24
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	40021000 	.word	0x40021000
 8008834:	0801a3e0 	.word	0x0801a3e0
 8008838:	00f42400 	.word	0x00f42400
 800883c:	007a1200 	.word	0x007a1200

08008840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008844:	4b03      	ldr	r3, [pc, #12]	; (8008854 <HAL_RCC_GetHCLKFreq+0x14>)
 8008846:	681b      	ldr	r3, [r3, #0]
}
 8008848:	4618      	mov	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	2000000c 	.word	0x2000000c

08008858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800885c:	f7ff fff0 	bl	8008840 <HAL_RCC_GetHCLKFreq>
 8008860:	4602      	mov	r2, r0
 8008862:	4b06      	ldr	r3, [pc, #24]	; (800887c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	0a1b      	lsrs	r3, r3, #8
 8008868:	f003 0307 	and.w	r3, r3, #7
 800886c:	4904      	ldr	r1, [pc, #16]	; (8008880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800886e:	5ccb      	ldrb	r3, [r1, r3]
 8008870:	f003 031f 	and.w	r3, r3, #31
 8008874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008878:	4618      	mov	r0, r3
 800887a:	bd80      	pop	{r7, pc}
 800887c:	40021000 	.word	0x40021000
 8008880:	0801a3d8 	.word	0x0801a3d8

08008884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008888:	f7ff ffda 	bl	8008840 <HAL_RCC_GetHCLKFreq>
 800888c:	4602      	mov	r2, r0
 800888e:	4b06      	ldr	r3, [pc, #24]	; (80088a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	0adb      	lsrs	r3, r3, #11
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	4904      	ldr	r1, [pc, #16]	; (80088ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800889a:	5ccb      	ldrb	r3, [r1, r3]
 800889c:	f003 031f 	and.w	r3, r3, #31
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	40021000 	.word	0x40021000
 80088ac:	0801a3d8 	.word	0x0801a3d8

080088b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80088b8:	2300      	movs	r3, #0
 80088ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80088bc:	4b2a      	ldr	r3, [pc, #168]	; (8008968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80088be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80088c8:	f7ff fa02 	bl	8007cd0 <HAL_PWREx_GetVoltageRange>
 80088cc:	6178      	str	r0, [r7, #20]
 80088ce:	e014      	b.n	80088fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80088d0:	4b25      	ldr	r3, [pc, #148]	; (8008968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80088d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d4:	4a24      	ldr	r2, [pc, #144]	; (8008968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80088d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088da:	6593      	str	r3, [r2, #88]	; 0x58
 80088dc:	4b22      	ldr	r3, [pc, #136]	; (8008968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80088de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80088e8:	f7ff f9f2 	bl	8007cd0 <HAL_PWREx_GetVoltageRange>
 80088ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80088ee:	4b1e      	ldr	r3, [pc, #120]	; (8008968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f2:	4a1d      	ldr	r2, [pc, #116]	; (8008968 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80088f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008900:	d10b      	bne.n	800891a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b80      	cmp	r3, #128	; 0x80
 8008906:	d919      	bls.n	800893c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2ba0      	cmp	r3, #160	; 0xa0
 800890c:	d902      	bls.n	8008914 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800890e:	2302      	movs	r3, #2
 8008910:	613b      	str	r3, [r7, #16]
 8008912:	e013      	b.n	800893c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008914:	2301      	movs	r3, #1
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	e010      	b.n	800893c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b80      	cmp	r3, #128	; 0x80
 800891e:	d902      	bls.n	8008926 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008920:	2303      	movs	r3, #3
 8008922:	613b      	str	r3, [r7, #16]
 8008924:	e00a      	b.n	800893c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b80      	cmp	r3, #128	; 0x80
 800892a:	d102      	bne.n	8008932 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800892c:	2302      	movs	r3, #2
 800892e:	613b      	str	r3, [r7, #16]
 8008930:	e004      	b.n	800893c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b70      	cmp	r3, #112	; 0x70
 8008936:	d101      	bne.n	800893c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008938:	2301      	movs	r3, #1
 800893a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800893c:	4b0b      	ldr	r3, [pc, #44]	; (800896c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f023 0207 	bic.w	r2, r3, #7
 8008944:	4909      	ldr	r1, [pc, #36]	; (800896c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	4313      	orrs	r3, r2
 800894a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800894c:	4b07      	ldr	r3, [pc, #28]	; (800896c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0307 	and.w	r3, r3, #7
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	429a      	cmp	r2, r3
 8008958:	d001      	beq.n	800895e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	40021000 	.word	0x40021000
 800896c:	40022000 	.word	0x40022000

08008970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008978:	2300      	movs	r3, #0
 800897a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800897c:	2300      	movs	r3, #0
 800897e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008988:	2b00      	cmp	r3, #0
 800898a:	d041      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008990:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008994:	d02a      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008996:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800899a:	d824      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800899c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089a0:	d008      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80089a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089a6:	d81e      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80089ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089b0:	d010      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089b2:	e018      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80089b4:	4b86      	ldr	r3, [pc, #536]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089b6:	68db      	ldr	r3, [r3, #12]
 80089b8:	4a85      	ldr	r2, [pc, #532]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80089c0:	e015      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3304      	adds	r3, #4
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fabb 	bl	8008f44 <RCCEx_PLLSAI1_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80089d2:	e00c      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3320      	adds	r3, #32
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f000 fba6 	bl	800912c <RCCEx_PLLSAI2_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80089e4:	e003      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	74fb      	strb	r3, [r7, #19]
      break;
 80089ea:	e000      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80089ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089ee:	7cfb      	ldrb	r3, [r7, #19]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10b      	bne.n	8008a0c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089f4:	4b76      	ldr	r3, [pc, #472]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80089f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a02:	4973      	ldr	r1, [pc, #460]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008a0a:	e001      	b.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a0c:	7cfb      	ldrb	r3, [r7, #19]
 8008a0e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d041      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a24:	d02a      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8008a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008a2a:	d824      	bhi.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008a2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a30:	d008      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a36:	d81e      	bhi.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00a      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8008a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a40:	d010      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8008a42:	e018      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008a44:	4b62      	ldr	r3, [pc, #392]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	4a61      	ldr	r2, [pc, #388]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a4e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008a50:	e015      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3304      	adds	r3, #4
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fa73 	bl	8008f44 <RCCEx_PLLSAI1_Config>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008a62:	e00c      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3320      	adds	r3, #32
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 fb5e 	bl	800912c <RCCEx_PLLSAI2_Config>
 8008a70:	4603      	mov	r3, r0
 8008a72:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008a74:	e003      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	74fb      	strb	r3, [r7, #19]
      break;
 8008a7a:	e000      	b.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8008a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a7e:	7cfb      	ldrb	r3, [r7, #19]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10b      	bne.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008a84:	4b52      	ldr	r3, [pc, #328]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a92:	494f      	ldr	r1, [pc, #316]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008a9a:	e001      	b.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9c:	7cfb      	ldrb	r3, [r7, #19]
 8008a9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 80a0 	beq.w	8008bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008ab2:	4b47      	ldr	r3, [pc, #284]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e000      	b.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d00d      	beq.n	8008ae4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ac8:	4b41      	ldr	r3, [pc, #260]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008acc:	4a40      	ldr	r2, [pc, #256]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ad2:	6593      	str	r3, [r2, #88]	; 0x58
 8008ad4:	4b3e      	ldr	r3, [pc, #248]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008adc:	60bb      	str	r3, [r7, #8]
 8008ade:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008ae4:	4b3b      	ldr	r3, [pc, #236]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a3a      	ldr	r2, [pc, #232]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008af0:	f7fd fbdc 	bl	80062ac <HAL_GetTick>
 8008af4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008af6:	e009      	b.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008af8:	f7fd fbd8 	bl	80062ac <HAL_GetTick>
 8008afc:	4602      	mov	r2, r0
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d902      	bls.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8008b06:	2303      	movs	r3, #3
 8008b08:	74fb      	strb	r3, [r7, #19]
        break;
 8008b0a:	e005      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008b0c:	4b31      	ldr	r3, [pc, #196]	; (8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0ef      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8008b18:	7cfb      	ldrb	r3, [r7, #19]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d15c      	bne.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b1e:	4b2c      	ldr	r3, [pc, #176]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b28:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01f      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d019      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008b3c:	4b24      	ldr	r3, [pc, #144]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008b48:	4b21      	ldr	r3, [pc, #132]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b4e:	4a20      	ldr	r2, [pc, #128]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008b58:	4b1d      	ldr	r3, [pc, #116]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b5e:	4a1c      	ldr	r2, [pc, #112]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008b68:	4a19      	ldr	r2, [pc, #100]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d016      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b7a:	f7fd fb97 	bl	80062ac <HAL_GetTick>
 8008b7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b80:	e00b      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b82:	f7fd fb93 	bl	80062ac <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d902      	bls.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	74fb      	strb	r3, [r7, #19]
            break;
 8008b98:	e006      	b.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b9a:	4b0d      	ldr	r3, [pc, #52]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba0:	f003 0302 	and.w	r3, r3, #2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d0ec      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8008ba8:	7cfb      	ldrb	r3, [r7, #19]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10c      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008bae:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bbe:	4904      	ldr	r1, [pc, #16]	; (8008bd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008bc6:	e009      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008bc8:	7cfb      	ldrb	r3, [r7, #19]
 8008bca:	74bb      	strb	r3, [r7, #18]
 8008bcc:	e006      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8008bce:	bf00      	nop
 8008bd0:	40021000 	.word	0x40021000
 8008bd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bd8:	7cfb      	ldrb	r3, [r7, #19]
 8008bda:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008bdc:	7c7b      	ldrb	r3, [r7, #17]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d105      	bne.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008be2:	4b9e      	ldr	r3, [pc, #632]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be6:	4a9d      	ldr	r2, [pc, #628]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008be8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008bfa:	4b98      	ldr	r3, [pc, #608]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c00:	f023 0203 	bic.w	r2, r3, #3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c08:	4994      	ldr	r1, [pc, #592]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f003 0302 	and.w	r3, r3, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00a      	beq.n	8008c32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c1c:	4b8f      	ldr	r3, [pc, #572]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c22:	f023 020c 	bic.w	r2, r3, #12
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	498c      	ldr	r1, [pc, #560]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0304 	and.w	r3, r3, #4
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008c3e:	4b87      	ldr	r3, [pc, #540]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4c:	4983      	ldr	r1, [pc, #524]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0308 	and.w	r3, r3, #8
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00a      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008c60:	4b7e      	ldr	r3, [pc, #504]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	497b      	ldr	r1, [pc, #492]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0310 	and.w	r3, r3, #16
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00a      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008c82:	4b76      	ldr	r3, [pc, #472]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c90:	4972      	ldr	r1, [pc, #456]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0320 	and.w	r3, r3, #32
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00a      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ca4:	4b6d      	ldr	r3, [pc, #436]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008caa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cb2:	496a      	ldr	r1, [pc, #424]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00a      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cc6:	4b65      	ldr	r3, [pc, #404]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd4:	4961      	ldr	r1, [pc, #388]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00a      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ce8:	4b5c      	ldr	r3, [pc, #368]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf6:	4959      	ldr	r1, [pc, #356]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00a      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d0a:	4b54      	ldr	r3, [pc, #336]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d18:	4950      	ldr	r1, [pc, #320]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d00a      	beq.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d2c:	4b4b      	ldr	r3, [pc, #300]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d32:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3a:	4948      	ldr	r1, [pc, #288]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00a      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d4e:	4b43      	ldr	r3, [pc, #268]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d5c:	493f      	ldr	r1, [pc, #252]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d028      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d70:	4b3a      	ldr	r3, [pc, #232]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d7e:	4937      	ldr	r1, [pc, #220]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d8e:	d106      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d90:	4b32      	ldr	r3, [pc, #200]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	4a31      	ldr	r2, [pc, #196]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008d96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d9a:	60d3      	str	r3, [r2, #12]
 8008d9c:	e011      	b.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008da6:	d10c      	bne.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3304      	adds	r3, #4
 8008dac:	2101      	movs	r1, #1
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 f8c8 	bl	8008f44 <RCCEx_PLLSAI1_Config>
 8008db4:	4603      	mov	r3, r0
 8008db6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008db8:	7cfb      	ldrb	r3, [r7, #19]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8008dbe:	7cfb      	ldrb	r3, [r7, #19]
 8008dc0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d028      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008dce:	4b23      	ldr	r3, [pc, #140]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dd4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ddc:	491f      	ldr	r1, [pc, #124]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dec:	d106      	bne.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008dee:	4b1b      	ldr	r3, [pc, #108]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	4a1a      	ldr	r2, [pc, #104]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008df8:	60d3      	str	r3, [r2, #12]
 8008dfa:	e011      	b.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e04:	d10c      	bne.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	2101      	movs	r1, #1
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f000 f899 	bl	8008f44 <RCCEx_PLLSAI1_Config>
 8008e12:	4603      	mov	r3, r0
 8008e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008e16:	7cfb      	ldrb	r3, [r7, #19]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d001      	beq.n	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8008e1c:	7cfb      	ldrb	r3, [r7, #19]
 8008e1e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d02b      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e2c:	4b0b      	ldr	r3, [pc, #44]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e3a:	4908      	ldr	r1, [pc, #32]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e4a:	d109      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e4c:	4b03      	ldr	r3, [pc, #12]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	4a02      	ldr	r2, [pc, #8]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008e52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e56:	60d3      	str	r3, [r2, #12]
 8008e58:	e014      	b.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8008e5a:	bf00      	nop
 8008e5c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008e68:	d10c      	bne.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	3304      	adds	r3, #4
 8008e6e:	2101      	movs	r1, #1
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 f867 	bl	8008f44 <RCCEx_PLLSAI1_Config>
 8008e76:	4603      	mov	r3, r0
 8008e78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008e7a:	7cfb      	ldrb	r3, [r7, #19]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8008e80:	7cfb      	ldrb	r3, [r7, #19]
 8008e82:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d02f      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e90:	4b2b      	ldr	r3, [pc, #172]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e9e:	4928      	ldr	r1, [pc, #160]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eae:	d10d      	bne.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	2102      	movs	r1, #2
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 f844 	bl	8008f44 <RCCEx_PLLSAI1_Config>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ec0:	7cfb      	ldrb	r3, [r7, #19]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d014      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008ec6:	7cfb      	ldrb	r3, [r7, #19]
 8008ec8:	74bb      	strb	r3, [r7, #18]
 8008eca:	e011      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ed4:	d10c      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3320      	adds	r3, #32
 8008eda:	2102      	movs	r1, #2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f925 	bl	800912c <RCCEx_PLLSAI2_Config>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008ee6:	7cfb      	ldrb	r3, [r7, #19]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8008eec:	7cfb      	ldrb	r3, [r7, #19]
 8008eee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00a      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008efc:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f02:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f0a:	490d      	ldr	r1, [pc, #52]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f1e:	4b08      	ldr	r3, [pc, #32]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f2e:	4904      	ldr	r1, [pc, #16]	; (8008f40 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008f36:	7cbb      	ldrb	r3, [r7, #18]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3718      	adds	r7, #24
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	40021000 	.word	0x40021000

08008f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008f52:	4b75      	ldr	r3, [pc, #468]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d018      	beq.n	8008f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008f5e:	4b72      	ldr	r3, [pc, #456]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f003 0203 	and.w	r2, r3, #3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d10d      	bne.n	8008f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
       ||
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d009      	beq.n	8008f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008f76:	4b6c      	ldr	r3, [pc, #432]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	091b      	lsrs	r3, r3, #4
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	1c5a      	adds	r2, r3, #1
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
       ||
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d047      	beq.n	800901a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	73fb      	strb	r3, [r7, #15]
 8008f8e:	e044      	b.n	800901a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b03      	cmp	r3, #3
 8008f96:	d018      	beq.n	8008fca <RCCEx_PLLSAI1_Config+0x86>
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d825      	bhi.n	8008fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d002      	beq.n	8008fa6 <RCCEx_PLLSAI1_Config+0x62>
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d009      	beq.n	8008fb8 <RCCEx_PLLSAI1_Config+0x74>
 8008fa4:	e020      	b.n	8008fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008fa6:	4b60      	ldr	r3, [pc, #384]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d11d      	bne.n	8008fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fb6:	e01a      	b.n	8008fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008fb8:	4b5b      	ldr	r3, [pc, #364]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d116      	bne.n	8008ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fc8:	e013      	b.n	8008ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008fca:	4b57      	ldr	r3, [pc, #348]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10f      	bne.n	8008ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008fd6:	4b54      	ldr	r3, [pc, #336]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008fe6:	e006      	b.n	8008ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	73fb      	strb	r3, [r7, #15]
      break;
 8008fec:	e004      	b.n	8008ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008fee:	bf00      	nop
 8008ff0:	e002      	b.n	8008ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008ff2:	bf00      	nop
 8008ff4:	e000      	b.n	8008ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10d      	bne.n	800901a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008ffe:	4b4a      	ldr	r3, [pc, #296]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6819      	ldr	r1, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	3b01      	subs	r3, #1
 8009010:	011b      	lsls	r3, r3, #4
 8009012:	430b      	orrs	r3, r1
 8009014:	4944      	ldr	r1, [pc, #272]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009016:	4313      	orrs	r3, r2
 8009018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d17d      	bne.n	800911c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009020:	4b41      	ldr	r3, [pc, #260]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a40      	ldr	r2, [pc, #256]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800902a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800902c:	f7fd f93e 	bl	80062ac <HAL_GetTick>
 8009030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009032:	e009      	b.n	8009048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009034:	f7fd f93a 	bl	80062ac <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d902      	bls.n	8009048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	73fb      	strb	r3, [r7, #15]
        break;
 8009046:	e005      	b.n	8009054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009048:	4b37      	ldr	r3, [pc, #220]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1ef      	bne.n	8009034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d160      	bne.n	800911c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d111      	bne.n	8009084 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009060:	4b31      	ldr	r3, [pc, #196]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	6892      	ldr	r2, [r2, #8]
 8009070:	0211      	lsls	r1, r2, #8
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	68d2      	ldr	r2, [r2, #12]
 8009076:	0912      	lsrs	r2, r2, #4
 8009078:	0452      	lsls	r2, r2, #17
 800907a:	430a      	orrs	r2, r1
 800907c:	492a      	ldr	r1, [pc, #168]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800907e:	4313      	orrs	r3, r2
 8009080:	610b      	str	r3, [r1, #16]
 8009082:	e027      	b.n	80090d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2b01      	cmp	r3, #1
 8009088:	d112      	bne.n	80090b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800908a:	4b27      	ldr	r3, [pc, #156]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009092:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6892      	ldr	r2, [r2, #8]
 800909a:	0211      	lsls	r1, r2, #8
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6912      	ldr	r2, [r2, #16]
 80090a0:	0852      	lsrs	r2, r2, #1
 80090a2:	3a01      	subs	r2, #1
 80090a4:	0552      	lsls	r2, r2, #21
 80090a6:	430a      	orrs	r2, r1
 80090a8:	491f      	ldr	r1, [pc, #124]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	610b      	str	r3, [r1, #16]
 80090ae:	e011      	b.n	80090d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80090b0:	4b1d      	ldr	r3, [pc, #116]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80090b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	6892      	ldr	r2, [r2, #8]
 80090c0:	0211      	lsls	r1, r2, #8
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6952      	ldr	r2, [r2, #20]
 80090c6:	0852      	lsrs	r2, r2, #1
 80090c8:	3a01      	subs	r2, #1
 80090ca:	0652      	lsls	r2, r2, #25
 80090cc:	430a      	orrs	r2, r1
 80090ce:	4916      	ldr	r1, [pc, #88]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80090d4:	4b14      	ldr	r3, [pc, #80]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a13      	ldr	r2, [pc, #76]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090e0:	f7fd f8e4 	bl	80062ac <HAL_GetTick>
 80090e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80090e6:	e009      	b.n	80090fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80090e8:	f7fd f8e0 	bl	80062ac <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d902      	bls.n	80090fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	73fb      	strb	r3, [r7, #15]
          break;
 80090fa:	e005      	b.n	8009108 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0ef      	beq.n	80090e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d106      	bne.n	800911c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800910e:	4b06      	ldr	r3, [pc, #24]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009110:	691a      	ldr	r2, [r3, #16]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	4904      	ldr	r1, [pc, #16]	; (8009128 <RCCEx_PLLSAI1_Config+0x1e4>)
 8009118:	4313      	orrs	r3, r2
 800911a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800911c:	7bfb      	ldrb	r3, [r7, #15]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	40021000 	.word	0x40021000

0800912c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800913a:	4b6a      	ldr	r3, [pc, #424]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d018      	beq.n	8009178 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8009146:	4b67      	ldr	r3, [pc, #412]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f003 0203 	and.w	r2, r3, #3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d10d      	bne.n	8009172 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
       ||
 800915a:	2b00      	cmp	r3, #0
 800915c:	d009      	beq.n	8009172 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800915e:	4b61      	ldr	r3, [pc, #388]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	091b      	lsrs	r3, r3, #4
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
       ||
 800916e:	429a      	cmp	r2, r3
 8009170:	d047      	beq.n	8009202 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	73fb      	strb	r3, [r7, #15]
 8009176:	e044      	b.n	8009202 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b03      	cmp	r3, #3
 800917e:	d018      	beq.n	80091b2 <RCCEx_PLLSAI2_Config+0x86>
 8009180:	2b03      	cmp	r3, #3
 8009182:	d825      	bhi.n	80091d0 <RCCEx_PLLSAI2_Config+0xa4>
 8009184:	2b01      	cmp	r3, #1
 8009186:	d002      	beq.n	800918e <RCCEx_PLLSAI2_Config+0x62>
 8009188:	2b02      	cmp	r3, #2
 800918a:	d009      	beq.n	80091a0 <RCCEx_PLLSAI2_Config+0x74>
 800918c:	e020      	b.n	80091d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800918e:	4b55      	ldr	r3, [pc, #340]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0302 	and.w	r3, r3, #2
 8009196:	2b00      	cmp	r3, #0
 8009198:	d11d      	bne.n	80091d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800919e:	e01a      	b.n	80091d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80091a0:	4b50      	ldr	r3, [pc, #320]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d116      	bne.n	80091da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091b0:	e013      	b.n	80091da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80091b2:	4b4c      	ldr	r3, [pc, #304]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10f      	bne.n	80091de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80091be:	4b49      	ldr	r3, [pc, #292]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80091ce:	e006      	b.n	80091de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	73fb      	strb	r3, [r7, #15]
      break;
 80091d4:	e004      	b.n	80091e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80091d6:	bf00      	nop
 80091d8:	e002      	b.n	80091e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80091da:	bf00      	nop
 80091dc:	e000      	b.n	80091e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80091de:	bf00      	nop
    }

    if(status == HAL_OK)
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10d      	bne.n	8009202 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80091e6:	4b3f      	ldr	r3, [pc, #252]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6819      	ldr	r1, [r3, #0]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	3b01      	subs	r3, #1
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	430b      	orrs	r3, r1
 80091fc:	4939      	ldr	r1, [pc, #228]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80091fe:	4313      	orrs	r3, r2
 8009200:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009202:	7bfb      	ldrb	r3, [r7, #15]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d167      	bne.n	80092d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8009208:	4b36      	ldr	r3, [pc, #216]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a35      	ldr	r2, [pc, #212]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800920e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009212:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009214:	f7fd f84a 	bl	80062ac <HAL_GetTick>
 8009218:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800921a:	e009      	b.n	8009230 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800921c:	f7fd f846 	bl	80062ac <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d902      	bls.n	8009230 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	73fb      	strb	r3, [r7, #15]
        break;
 800922e:	e005      	b.n	800923c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009230:	4b2c      	ldr	r3, [pc, #176]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1ef      	bne.n	800921c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d14a      	bne.n	80092d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d111      	bne.n	800926c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8009248:	4b26      	ldr	r3, [pc, #152]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800924a:	695b      	ldr	r3, [r3, #20]
 800924c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8009250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6892      	ldr	r2, [r2, #8]
 8009258:	0211      	lsls	r1, r2, #8
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	68d2      	ldr	r2, [r2, #12]
 800925e:	0912      	lsrs	r2, r2, #4
 8009260:	0452      	lsls	r2, r2, #17
 8009262:	430a      	orrs	r2, r1
 8009264:	491f      	ldr	r1, [pc, #124]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009266:	4313      	orrs	r3, r2
 8009268:	614b      	str	r3, [r1, #20]
 800926a:	e011      	b.n	8009290 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800926c:	4b1d      	ldr	r3, [pc, #116]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009274:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	6892      	ldr	r2, [r2, #8]
 800927c:	0211      	lsls	r1, r2, #8
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	6912      	ldr	r2, [r2, #16]
 8009282:	0852      	lsrs	r2, r2, #1
 8009284:	3a01      	subs	r2, #1
 8009286:	0652      	lsls	r2, r2, #25
 8009288:	430a      	orrs	r2, r1
 800928a:	4916      	ldr	r1, [pc, #88]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800928c:	4313      	orrs	r3, r2
 800928e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8009290:	4b14      	ldr	r3, [pc, #80]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a13      	ldr	r2, [pc, #76]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8009296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800929a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800929c:	f7fd f806 	bl	80062ac <HAL_GetTick>
 80092a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80092a2:	e009      	b.n	80092b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80092a4:	f7fd f802 	bl	80062ac <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d902      	bls.n	80092b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	73fb      	strb	r3, [r7, #15]
          break;
 80092b6:	e005      	b.n	80092c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80092b8:	4b0a      	ldr	r3, [pc, #40]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0ef      	beq.n	80092a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80092ca:	4b06      	ldr	r3, [pc, #24]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80092cc:	695a      	ldr	r2, [r3, #20]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	4904      	ldr	r1, [pc, #16]	; (80092e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40021000 	.word	0x40021000

080092e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d06c      	beq.n	80093d4 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b00      	cmp	r3, #0
 8009304:	d106      	bne.n	8009314 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7f8 ff86 	bl	8002220 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2202      	movs	r2, #2
 8009318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	22ca      	movs	r2, #202	; 0xca
 8009322:	625a      	str	r2, [r3, #36]	; 0x24
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2253      	movs	r2, #83	; 0x53
 800932a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f9a0 	bl	8009672 <RTC_EnterInitMode>
 8009332:	4603      	mov	r3, r0
 8009334:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d14b      	bne.n	80093d4 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	6812      	ldr	r2, [r2, #0]
 8009346:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800934a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800934e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	6899      	ldr	r1, [r3, #8]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	431a      	orrs	r2, r3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	431a      	orrs	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	430a      	orrs	r2, r1
 800936c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	68d2      	ldr	r2, [r2, #12]
 8009376:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6919      	ldr	r1, [r3, #16]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	041a      	lsls	r2, r3, #16
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f9a3 	bl	80096d8 <RTC_ExitInitMode>
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8009396:	7bfb      	ldrb	r3, [r7, #15]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d11b      	bne.n	80093d4 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0203 	bic.w	r2, r2, #3
 80093aa:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	69da      	ldr	r2, [r3, #28]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	431a      	orrs	r2, r3
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	430a      	orrs	r2, r1
 80093c2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	22ff      	movs	r2, #255	; 0xff
 80093ca:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80093de:	b590      	push	{r4, r7, lr}
 80093e0:	b087      	sub	sp, #28
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_RTC_SetTime+0x1a>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e08b      	b.n	8009510 <HAL_RTC_SetTime+0x132>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2202      	movs	r2, #2
 8009404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	22ca      	movs	r2, #202	; 0xca
 800940e:	625a      	str	r2, [r3, #36]	; 0x24
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2253      	movs	r2, #83	; 0x53
 8009416:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 f92a 	bl	8009672 <RTC_EnterInitMode>
 800941e:	4603      	mov	r3, r0
 8009420:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8009422:	7cfb      	ldrb	r3, [r7, #19]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d163      	bne.n	80094f0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d126      	bne.n	800947c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009438:	2b00      	cmp	r3, #0
 800943a:	d102      	bne.n	8009442 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2200      	movs	r2, #0
 8009440:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	4618      	mov	r0, r3
 8009448:	f000 f984 	bl	8009754 <RTC_ByteToBcd2>
 800944c:	4603      	mov	r3, r0
 800944e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	785b      	ldrb	r3, [r3, #1]
 8009454:	4618      	mov	r0, r3
 8009456:	f000 f97d 	bl	8009754 <RTC_ByteToBcd2>
 800945a:	4603      	mov	r3, r0
 800945c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800945e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	789b      	ldrb	r3, [r3, #2]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f975 	bl	8009754 <RTC_ByteToBcd2>
 800946a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800946c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	78db      	ldrb	r3, [r3, #3]
 8009474:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009476:	4313      	orrs	r3, r2
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	e018      	b.n	80094ae <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2200      	movs	r2, #0
 800948e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	785b      	ldrb	r3, [r3, #1]
 800949a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800949c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80094a2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	78db      	ldrb	r3, [r3, #3]
 80094a8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80094aa:	4313      	orrs	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80094b8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80094bc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80094cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6899      	ldr	r1, [r3, #8]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	68da      	ldr	r2, [r3, #12]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	691b      	ldr	r3, [r3, #16]
 80094dc:	431a      	orrs	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 f8f6 	bl	80096d8 <RTC_ExitInitMode>
 80094ec:	4603      	mov	r3, r0
 80094ee:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	22ff      	movs	r2, #255	; 0xff
 80094f6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80094f8:	7cfb      	ldrb	r3, [r7, #19]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d103      	bne.n	8009506 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800950e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009510:	4618      	mov	r0, r3
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	bd90      	pop	{r4, r7, pc}

08009518 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009518:	b590      	push	{r4, r7, lr}
 800951a:	b087      	sub	sp, #28
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d101      	bne.n	8009532 <HAL_RTC_SetDate+0x1a>
 800952e:	2302      	movs	r3, #2
 8009530:	e075      	b.n	800961e <HAL_RTC_SetDate+0x106>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2202      	movs	r2, #2
 800953e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10e      	bne.n	8009566 <HAL_RTC_SetDate+0x4e>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	785b      	ldrb	r3, [r3, #1]
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b00      	cmp	r3, #0
 8009552:	d008      	beq.n	8009566 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	f023 0310 	bic.w	r3, r3, #16
 800955c:	b2db      	uxtb	r3, r3
 800955e:	330a      	adds	r3, #10
 8009560:	b2da      	uxtb	r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d11c      	bne.n	80095a6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	78db      	ldrb	r3, [r3, #3]
 8009570:	4618      	mov	r0, r3
 8009572:	f000 f8ef 	bl	8009754 <RTC_ByteToBcd2>
 8009576:	4603      	mov	r3, r0
 8009578:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	785b      	ldrb	r3, [r3, #1]
 800957e:	4618      	mov	r0, r3
 8009580:	f000 f8e8 	bl	8009754 <RTC_ByteToBcd2>
 8009584:	4603      	mov	r3, r0
 8009586:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8009588:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	789b      	ldrb	r3, [r3, #2]
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f8e0 	bl	8009754 <RTC_ByteToBcd2>
 8009594:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009596:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80095a0:	4313      	orrs	r3, r2
 80095a2:	617b      	str	r3, [r7, #20]
 80095a4:	e00e      	b.n	80095c4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	78db      	ldrb	r3, [r3, #3]
 80095aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	785b      	ldrb	r3, [r3, #1]
 80095b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80095b2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80095b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80095c0:	4313      	orrs	r3, r2
 80095c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	22ca      	movs	r2, #202	; 0xca
 80095ca:	625a      	str	r2, [r3, #36]	; 0x24
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2253      	movs	r2, #83	; 0x53
 80095d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 f84c 	bl	8009672 <RTC_EnterInitMode>
 80095da:	4603      	mov	r3, r0
 80095dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80095de:	7cfb      	ldrb	r3, [r7, #19]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10c      	bne.n	80095fe <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681a      	ldr	r2, [r3, #0]
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80095ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80095f2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80095f4:	68f8      	ldr	r0, [r7, #12]
 80095f6:	f000 f86f 	bl	80096d8 <RTC_ExitInitMode>
 80095fa:	4603      	mov	r3, r0
 80095fc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	22ff      	movs	r2, #255	; 0xff
 8009604:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8009606:	7cfb      	ldrb	r3, [r7, #19]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d103      	bne.n	8009614 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800961c:	7cfb      	ldrb	r3, [r7, #19]
}
 800961e:	4618      	mov	r0, r3
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	bd90      	pop	{r4, r7, pc}

08009626 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b084      	sub	sp, #16
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68da      	ldr	r2, [r3, #12]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800963c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800963e:	f7fc fe35 	bl	80062ac <HAL_GetTick>
 8009642:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009644:	e009      	b.n	800965a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009646:	f7fc fe31 	bl	80062ac <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009654:	d901      	bls.n	800965a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e007      	b.n	800966a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b00      	cmp	r3, #0
 8009666:	d0ee      	beq.n	8009646 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3710      	adds	r7, #16
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009688:	2b00      	cmp	r3, #0
 800968a:	d120      	bne.n	80096ce <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f04f 32ff 	mov.w	r2, #4294967295
 8009694:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009696:	f7fc fe09 	bl	80062ac <HAL_GetTick>
 800969a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800969c:	e00d      	b.n	80096ba <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800969e:	f7fc fe05 	bl	80062ac <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096ac:	d905      	bls.n	80096ba <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2203      	movs	r2, #3
 80096b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d102      	bne.n	80096ce <RTC_EnterInitMode+0x5c>
 80096c8:	7bfb      	ldrb	r3, [r7, #15]
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d1e7      	bne.n	800969e <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80096e4:	4b1a      	ldr	r3, [pc, #104]	; (8009750 <RTC_ExitInitMode+0x78>)
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	4a19      	ldr	r2, [pc, #100]	; (8009750 <RTC_ExitInitMode+0x78>)
 80096ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096ee:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80096f0:	4b17      	ldr	r3, [pc, #92]	; (8009750 <RTC_ExitInitMode+0x78>)
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f003 0320 	and.w	r3, r3, #32
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10c      	bne.n	8009716 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7ff ff92 	bl	8009626 <HAL_RTC_WaitForSynchro>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01e      	beq.n	8009746 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2203      	movs	r2, #3
 800970c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	73fb      	strb	r3, [r7, #15]
 8009714:	e017      	b.n	8009746 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009716:	4b0e      	ldr	r3, [pc, #56]	; (8009750 <RTC_ExitInitMode+0x78>)
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	4a0d      	ldr	r2, [pc, #52]	; (8009750 <RTC_ExitInitMode+0x78>)
 800971c:	f023 0320 	bic.w	r3, r3, #32
 8009720:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7ff ff7f 	bl	8009626 <HAL_RTC_WaitForSynchro>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d005      	beq.n	800973a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2203      	movs	r2, #3
 8009732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800973a:	4b05      	ldr	r3, [pc, #20]	; (8009750 <RTC_ExitInitMode+0x78>)
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	4a04      	ldr	r2, [pc, #16]	; (8009750 <RTC_ExitInitMode+0x78>)
 8009740:	f043 0320 	orr.w	r3, r3, #32
 8009744:	6093      	str	r3, [r2, #8]
  }

  return status;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	40002800 	.word	0x40002800

08009754 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800975e:	2300      	movs	r3, #0
 8009760:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8009766:	e005      	b.n	8009774 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800976e:	7afb      	ldrb	r3, [r7, #11]
 8009770:	3b0a      	subs	r3, #10
 8009772:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8009774:	7afb      	ldrb	r3, [r7, #11]
 8009776:	2b09      	cmp	r3, #9
 8009778:	d8f6      	bhi.n	8009768 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	011b      	lsls	r3, r3, #4
 8009780:	b2da      	uxtb	r2, r3
 8009782:	7afb      	ldrb	r3, [r7, #11]
 8009784:	4313      	orrs	r3, r2
 8009786:	b2db      	uxtb	r3, r3
}
 8009788:	4618      	mov	r0, r3
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e049      	b.n	800983a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7f9 f882 	bl	80028c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f000 fae0 	bl	8009d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
	...

08009844 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b01      	cmp	r3, #1
 8009856:	d001      	beq.n	800985c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e047      	b.n	80098ec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a23      	ldr	r2, [pc, #140]	; (80098f8 <HAL_TIM_Base_Start+0xb4>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d01d      	beq.n	80098aa <HAL_TIM_Base_Start+0x66>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009876:	d018      	beq.n	80098aa <HAL_TIM_Base_Start+0x66>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a1f      	ldr	r2, [pc, #124]	; (80098fc <HAL_TIM_Base_Start+0xb8>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d013      	beq.n	80098aa <HAL_TIM_Base_Start+0x66>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a1e      	ldr	r2, [pc, #120]	; (8009900 <HAL_TIM_Base_Start+0xbc>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d00e      	beq.n	80098aa <HAL_TIM_Base_Start+0x66>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a1c      	ldr	r2, [pc, #112]	; (8009904 <HAL_TIM_Base_Start+0xc0>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d009      	beq.n	80098aa <HAL_TIM_Base_Start+0x66>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a1b      	ldr	r2, [pc, #108]	; (8009908 <HAL_TIM_Base_Start+0xc4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d004      	beq.n	80098aa <HAL_TIM_Base_Start+0x66>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a19      	ldr	r2, [pc, #100]	; (800990c <HAL_TIM_Base_Start+0xc8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d115      	bne.n	80098d6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	4b17      	ldr	r3, [pc, #92]	; (8009910 <HAL_TIM_Base_Start+0xcc>)
 80098b2:	4013      	ands	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2b06      	cmp	r3, #6
 80098ba:	d015      	beq.n	80098e8 <HAL_TIM_Base_Start+0xa4>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c2:	d011      	beq.n	80098e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0201 	orr.w	r2, r2, #1
 80098d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d4:	e008      	b.n	80098e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f042 0201 	orr.w	r2, r2, #1
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	e000      	b.n	80098ea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr
 80098f8:	40012c00 	.word	0x40012c00
 80098fc:	40000400 	.word	0x40000400
 8009900:	40000800 	.word	0x40000800
 8009904:	40000c00 	.word	0x40000c00
 8009908:	40013400 	.word	0x40013400
 800990c:	40014000 	.word	0x40014000
 8009910:	00010007 	.word	0x00010007

08009914 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6a1a      	ldr	r2, [r3, #32]
 8009922:	f241 1311 	movw	r3, #4369	; 0x1111
 8009926:	4013      	ands	r3, r2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10f      	bne.n	800994c <HAL_TIM_Base_Stop+0x38>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6a1a      	ldr	r2, [r3, #32]
 8009932:	f240 4344 	movw	r3, #1092	; 0x444
 8009936:	4013      	ands	r3, r2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d107      	bne.n	800994c <HAL_TIM_Base_Stop+0x38>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f022 0201 	bic.w	r2, r2, #1
 800994a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	f003 0302 	and.w	r3, r3, #2
 8009974:	2b02      	cmp	r3, #2
 8009976:	d122      	bne.n	80099be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b02      	cmp	r3, #2
 8009984:	d11b      	bne.n	80099be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f06f 0202 	mvn.w	r2, #2
 800998e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	f003 0303 	and.w	r3, r3, #3
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d003      	beq.n	80099ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f9d8 	bl	8009d5a <HAL_TIM_IC_CaptureCallback>
 80099aa:	e005      	b.n	80099b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f000 f9ca 	bl	8009d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f9db 	bl	8009d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b04      	cmp	r3, #4
 80099ca:	d122      	bne.n	8009a12 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d11b      	bne.n	8009a12 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f06f 0204 	mvn.w	r2, #4
 80099e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f9ae 	bl	8009d5a <HAL_TIM_IC_CaptureCallback>
 80099fe:	e005      	b.n	8009a0c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f9a0 	bl	8009d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9b1 	bl	8009d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	f003 0308 	and.w	r3, r3, #8
 8009a1c:	2b08      	cmp	r3, #8
 8009a1e:	d122      	bne.n	8009a66 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	f003 0308 	and.w	r3, r3, #8
 8009a2a:	2b08      	cmp	r3, #8
 8009a2c:	d11b      	bne.n	8009a66 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f06f 0208 	mvn.w	r2, #8
 8009a36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2204      	movs	r2, #4
 8009a3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	69db      	ldr	r3, [r3, #28]
 8009a44:	f003 0303 	and.w	r3, r3, #3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f984 	bl	8009d5a <HAL_TIM_IC_CaptureCallback>
 8009a52:	e005      	b.n	8009a60 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f976 	bl	8009d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f987 	bl	8009d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	f003 0310 	and.w	r3, r3, #16
 8009a70:	2b10      	cmp	r3, #16
 8009a72:	d122      	bne.n	8009aba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68db      	ldr	r3, [r3, #12]
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	2b10      	cmp	r3, #16
 8009a80:	d11b      	bne.n	8009aba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f06f 0210 	mvn.w	r2, #16
 8009a8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2208      	movs	r2, #8
 8009a90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d003      	beq.n	8009aa8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f95a 	bl	8009d5a <HAL_TIM_IC_CaptureCallback>
 8009aa6:	e005      	b.n	8009ab4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f94c 	bl	8009d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f95d 	bl	8009d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	f003 0301 	and.w	r3, r3, #1
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d10e      	bne.n	8009ae6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d107      	bne.n	8009ae6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f06f 0201 	mvn.w	r2, #1
 8009ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 f926 	bl	8009d32 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af0:	2b80      	cmp	r3, #128	; 0x80
 8009af2:	d10e      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009afe:	2b80      	cmp	r3, #128	; 0x80
 8009b00:	d107      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 fb09 	bl	800a124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b20:	d10e      	bne.n	8009b40 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2c:	2b80      	cmp	r3, #128	; 0x80
 8009b2e:	d107      	bne.n	8009b40 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 fafc 	bl	800a138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	691b      	ldr	r3, [r3, #16]
 8009b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b4a:	2b40      	cmp	r3, #64	; 0x40
 8009b4c:	d10e      	bne.n	8009b6c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b58:	2b40      	cmp	r3, #64	; 0x40
 8009b5a:	d107      	bne.n	8009b6c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f90b 	bl	8009d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b20      	cmp	r3, #32
 8009b78:	d10e      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b20      	cmp	r3, #32
 8009b86:	d107      	bne.n	8009b98 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f06f 0220 	mvn.w	r2, #32
 8009b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fabc 	bl	800a110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b98:	bf00      	nop
 8009b9a:	3708      	adds	r7, #8
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d101      	bne.n	8009bbc <HAL_TIM_ConfigClockSource+0x1c>
 8009bb8:	2302      	movs	r3, #2
 8009bba:	e0b6      	b.n	8009d2a <HAL_TIM_ConfigClockSource+0x18a>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2202      	movs	r2, #2
 8009bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bf8:	d03e      	beq.n	8009c78 <HAL_TIM_ConfigClockSource+0xd8>
 8009bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bfe:	f200 8087 	bhi.w	8009d10 <HAL_TIM_ConfigClockSource+0x170>
 8009c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c06:	f000 8086 	beq.w	8009d16 <HAL_TIM_ConfigClockSource+0x176>
 8009c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c0e:	d87f      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x170>
 8009c10:	2b70      	cmp	r3, #112	; 0x70
 8009c12:	d01a      	beq.n	8009c4a <HAL_TIM_ConfigClockSource+0xaa>
 8009c14:	2b70      	cmp	r3, #112	; 0x70
 8009c16:	d87b      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x170>
 8009c18:	2b60      	cmp	r3, #96	; 0x60
 8009c1a:	d050      	beq.n	8009cbe <HAL_TIM_ConfigClockSource+0x11e>
 8009c1c:	2b60      	cmp	r3, #96	; 0x60
 8009c1e:	d877      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x170>
 8009c20:	2b50      	cmp	r3, #80	; 0x50
 8009c22:	d03c      	beq.n	8009c9e <HAL_TIM_ConfigClockSource+0xfe>
 8009c24:	2b50      	cmp	r3, #80	; 0x50
 8009c26:	d873      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x170>
 8009c28:	2b40      	cmp	r3, #64	; 0x40
 8009c2a:	d058      	beq.n	8009cde <HAL_TIM_ConfigClockSource+0x13e>
 8009c2c:	2b40      	cmp	r3, #64	; 0x40
 8009c2e:	d86f      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x170>
 8009c30:	2b30      	cmp	r3, #48	; 0x30
 8009c32:	d064      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0x15e>
 8009c34:	2b30      	cmp	r3, #48	; 0x30
 8009c36:	d86b      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x170>
 8009c38:	2b20      	cmp	r3, #32
 8009c3a:	d060      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0x15e>
 8009c3c:	2b20      	cmp	r3, #32
 8009c3e:	d867      	bhi.n	8009d10 <HAL_TIM_ConfigClockSource+0x170>
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d05c      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0x15e>
 8009c44:	2b10      	cmp	r3, #16
 8009c46:	d05a      	beq.n	8009cfe <HAL_TIM_ConfigClockSource+0x15e>
 8009c48:	e062      	b.n	8009d10 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	6899      	ldr	r1, [r3, #8]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685a      	ldr	r2, [r3, #4]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	f000 f9b1 	bl	8009fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	609a      	str	r2, [r3, #8]
      break;
 8009c76:	e04f      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6818      	ldr	r0, [r3, #0]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	6899      	ldr	r1, [r3, #8]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f000 f99a 	bl	8009fc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689a      	ldr	r2, [r3, #8]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c9a:	609a      	str	r2, [r3, #8]
      break;
 8009c9c:	e03c      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6818      	ldr	r0, [r3, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	6859      	ldr	r1, [r3, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	461a      	mov	r2, r3
 8009cac:	f000 f90e 	bl	8009ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2150      	movs	r1, #80	; 0x50
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 f967 	bl	8009f8a <TIM_ITRx_SetConfig>
      break;
 8009cbc:	e02c      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6818      	ldr	r0, [r3, #0]
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	6859      	ldr	r1, [r3, #4]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	461a      	mov	r2, r3
 8009ccc:	f000 f92d 	bl	8009f2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2160      	movs	r1, #96	; 0x60
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f957 	bl	8009f8a <TIM_ITRx_SetConfig>
      break;
 8009cdc:	e01c      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	6859      	ldr	r1, [r3, #4]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	461a      	mov	r2, r3
 8009cec:	f000 f8ee 	bl	8009ecc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2140      	movs	r1, #64	; 0x40
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 f947 	bl	8009f8a <TIM_ITRx_SetConfig>
      break;
 8009cfc:	e00c      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f000 f93e 	bl	8009f8a <TIM_ITRx_SetConfig>
      break;
 8009d0e:	e003      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	73fb      	strb	r3, [r7, #15]
      break;
 8009d14:	e000      	b.n	8009d18 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009d3a:	bf00      	nop
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b083      	sub	sp, #12
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d4e:	bf00      	nop
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr

08009d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d5a:	b480      	push	{r7}
 8009d5c:	b083      	sub	sp, #12
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d76:	bf00      	nop
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
	...

08009d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a40      	ldr	r2, [pc, #256]	; (8009eac <TIM_Base_SetConfig+0x114>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d013      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009db6:	d00f      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a3d      	ldr	r2, [pc, #244]	; (8009eb0 <TIM_Base_SetConfig+0x118>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d00b      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a3c      	ldr	r2, [pc, #240]	; (8009eb4 <TIM_Base_SetConfig+0x11c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d007      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a3b      	ldr	r2, [pc, #236]	; (8009eb8 <TIM_Base_SetConfig+0x120>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d003      	beq.n	8009dd8 <TIM_Base_SetConfig+0x40>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a3a      	ldr	r2, [pc, #232]	; (8009ebc <TIM_Base_SetConfig+0x124>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d108      	bne.n	8009dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a2f      	ldr	r2, [pc, #188]	; (8009eac <TIM_Base_SetConfig+0x114>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d01f      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df8:	d01b      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a2c      	ldr	r2, [pc, #176]	; (8009eb0 <TIM_Base_SetConfig+0x118>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d017      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a2b      	ldr	r2, [pc, #172]	; (8009eb4 <TIM_Base_SetConfig+0x11c>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d013      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a2a      	ldr	r2, [pc, #168]	; (8009eb8 <TIM_Base_SetConfig+0x120>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d00f      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a29      	ldr	r2, [pc, #164]	; (8009ebc <TIM_Base_SetConfig+0x124>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d00b      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a28      	ldr	r2, [pc, #160]	; (8009ec0 <TIM_Base_SetConfig+0x128>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d007      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a27      	ldr	r2, [pc, #156]	; (8009ec4 <TIM_Base_SetConfig+0x12c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d003      	beq.n	8009e32 <TIM_Base_SetConfig+0x9a>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a26      	ldr	r2, [pc, #152]	; (8009ec8 <TIM_Base_SetConfig+0x130>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d108      	bne.n	8009e44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	4313      	orrs	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	689a      	ldr	r2, [r3, #8]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	4a10      	ldr	r2, [pc, #64]	; (8009eac <TIM_Base_SetConfig+0x114>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d00f      	beq.n	8009e90 <TIM_Base_SetConfig+0xf8>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a12      	ldr	r2, [pc, #72]	; (8009ebc <TIM_Base_SetConfig+0x124>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00b      	beq.n	8009e90 <TIM_Base_SetConfig+0xf8>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a11      	ldr	r2, [pc, #68]	; (8009ec0 <TIM_Base_SetConfig+0x128>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d007      	beq.n	8009e90 <TIM_Base_SetConfig+0xf8>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a10      	ldr	r2, [pc, #64]	; (8009ec4 <TIM_Base_SetConfig+0x12c>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d003      	beq.n	8009e90 <TIM_Base_SetConfig+0xf8>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a0f      	ldr	r2, [pc, #60]	; (8009ec8 <TIM_Base_SetConfig+0x130>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d103      	bne.n	8009e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	691a      	ldr	r2, [r3, #16]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	615a      	str	r2, [r3, #20]
}
 8009e9e:	bf00      	nop
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	40012c00 	.word	0x40012c00
 8009eb0:	40000400 	.word	0x40000400
 8009eb4:	40000800 	.word	0x40000800
 8009eb8:	40000c00 	.word	0x40000c00
 8009ebc:	40013400 	.word	0x40013400
 8009ec0:	40014000 	.word	0x40014000
 8009ec4:	40014400 	.word	0x40014400
 8009ec8:	40014800 	.word	0x40014800

08009ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b087      	sub	sp, #28
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	6a1b      	ldr	r3, [r3, #32]
 8009ee2:	f023 0201 	bic.w	r2, r3, #1
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	011b      	lsls	r3, r3, #4
 8009efc:	693a      	ldr	r2, [r7, #16]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	f023 030a 	bic.w	r3, r3, #10
 8009f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	621a      	str	r2, [r3, #32]
}
 8009f1e:	bf00      	nop
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b087      	sub	sp, #28
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	f023 0210 	bic.w	r2, r3, #16
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a1b      	ldr	r3, [r3, #32]
 8009f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	031b      	lsls	r3, r3, #12
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	693a      	ldr	r2, [r7, #16]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	697a      	ldr	r2, [r7, #20]
 8009f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	621a      	str	r2, [r3, #32]
}
 8009f7e:	bf00      	nop
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	f043 0307 	orr.w	r3, r3, #7
 8009fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	609a      	str	r2, [r3, #8]
}
 8009fb4:	bf00      	nop
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b087      	sub	sp, #28
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	021a      	lsls	r2, r3, #8
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	609a      	str	r2, [r3, #8]
}
 8009ff4:	bf00      	nop
 8009ff6:	371c      	adds	r7, #28
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a010:	2b01      	cmp	r3, #1
 800a012:	d101      	bne.n	800a018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a014:	2302      	movs	r3, #2
 800a016:	e068      	b.n	800a0ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a2e      	ldr	r2, [pc, #184]	; (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d004      	beq.n	800a04c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a2d      	ldr	r2, [pc, #180]	; (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d108      	bne.n	800a05e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a052:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a064:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a1e      	ldr	r2, [pc, #120]	; (800a0f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d01d      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a08a:	d018      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a1b      	ldr	r2, [pc, #108]	; (800a100 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d013      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a1a      	ldr	r2, [pc, #104]	; (800a104 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d00e      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a18      	ldr	r2, [pc, #96]	; (800a108 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d009      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4a13      	ldr	r2, [pc, #76]	; (800a0fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d004      	beq.n	800a0be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a14      	ldr	r2, [pc, #80]	; (800a10c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d10c      	bne.n	800a0d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	40012c00 	.word	0x40012c00
 800a0fc:	40013400 	.word	0x40013400
 800a100:	40000400 	.word	0x40000400
 800a104:	40000800 	.word	0x40000800
 800a108:	40000c00 	.word	0x40000c00
 800a10c:	40014000 	.word	0x40014000

0800a110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e040      	b.n	800a1e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f83a 	bl	800a1e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2224      	movs	r2, #36	; 0x24
 800a178:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f022 0201 	bic.w	r2, r2, #1
 800a188:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f94a 	bl	800a424 <UART_SetConfig>
 800a190:	4603      	mov	r3, r0
 800a192:	2b01      	cmp	r3, #1
 800a194:	d101      	bne.n	800a19a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e022      	b.n	800a1e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d002      	beq.n	800a1a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fbc8 	bl	800a938 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a1b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	689a      	ldr	r2, [r3, #8]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a1c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0201 	orr.w	r2, r2, #1
 800a1d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fc4f 	bl	800aa7c <UART_CheckIdleState>
 800a1de:	4603      	mov	r3, r0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b08a      	sub	sp, #40	; 0x28
 800a200:	af02      	add	r7, sp, #8
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	603b      	str	r3, [r7, #0]
 800a208:	4613      	mov	r3, r2
 800a20a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a210:	2b20      	cmp	r3, #32
 800a212:	f040 8082 	bne.w	800a31a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d002      	beq.n	800a222 <HAL_UART_Transmit+0x26>
 800a21c:	88fb      	ldrh	r3, [r7, #6]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d101      	bne.n	800a226 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a222:	2301      	movs	r3, #1
 800a224:	e07a      	b.n	800a31c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d101      	bne.n	800a234 <HAL_UART_Transmit+0x38>
 800a230:	2302      	movs	r3, #2
 800a232:	e073      	b.n	800a31c <HAL_UART_Transmit+0x120>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2201      	movs	r2, #1
 800a238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2221      	movs	r2, #33	; 0x21
 800a248:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a24a:	f7fc f82f 	bl	80062ac <HAL_GetTick>
 800a24e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	88fa      	ldrh	r2, [r7, #6]
 800a254:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	88fa      	ldrh	r2, [r7, #6]
 800a25c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a268:	d108      	bne.n	800a27c <HAL_UART_Transmit+0x80>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	691b      	ldr	r3, [r3, #16]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d104      	bne.n	800a27c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a272:	2300      	movs	r3, #0
 800a274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	61bb      	str	r3, [r7, #24]
 800a27a:	e003      	b.n	800a284 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a280:	2300      	movs	r3, #0
 800a282:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a28c:	e02d      	b.n	800a2ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2200      	movs	r2, #0
 800a296:	2180      	movs	r1, #128	; 0x80
 800a298:	68f8      	ldr	r0, [r7, #12]
 800a29a:	f000 fc38 	bl	800ab0e <UART_WaitOnFlagUntilTimeout>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d001      	beq.n	800a2a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e039      	b.n	800a31c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10b      	bne.n	800a2c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	881a      	ldrh	r2, [r3, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a2ba:	b292      	uxth	r2, r2
 800a2bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	3302      	adds	r3, #2
 800a2c2:	61bb      	str	r3, [r7, #24]
 800a2c4:	e008      	b.n	800a2d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	781a      	ldrb	r2, [r3, #0]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	b292      	uxth	r2, r2
 800a2d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1cb      	bne.n	800a28e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	9300      	str	r3, [sp, #0]
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2140      	movs	r1, #64	; 0x40
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 fc04 	bl	800ab0e <UART_WaitOnFlagUntilTimeout>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d001      	beq.n	800a310 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e005      	b.n	800a31c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2220      	movs	r2, #32
 800a314:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	e000      	b.n	800a31c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a31a:	2302      	movs	r3, #2
  }
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3720      	adds	r7, #32
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08a      	sub	sp, #40	; 0x28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	4613      	mov	r3, r2
 800a330:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a336:	2b20      	cmp	r3, #32
 800a338:	d142      	bne.n	800a3c0 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <HAL_UART_Receive_DMA+0x22>
 800a340:	88fb      	ldrh	r3, [r7, #6]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e03b      	b.n	800a3c2 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a350:	2b01      	cmp	r3, #1
 800a352:	d101      	bne.n	800a358 <HAL_UART_Receive_DMA+0x34>
 800a354:	2302      	movs	r3, #2
 800a356:	e034      	b.n	800a3c2 <HAL_UART_Receive_DMA+0x9e>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	4a18      	ldr	r2, [pc, #96]	; (800a3cc <HAL_UART_Receive_DMA+0xa8>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d01f      	beq.n	800a3b0 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d018      	beq.n	800a3b0 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	e853 3f00 	ldrex	r3, [r3]
 800a38a:	613b      	str	r3, [r7, #16]
   return(result);
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	461a      	mov	r2, r3
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	623b      	str	r3, [r7, #32]
 800a39e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a0:	69f9      	ldr	r1, [r7, #28]
 800a3a2:	6a3a      	ldr	r2, [r7, #32]
 800a3a4:	e841 2300 	strex	r3, r2, [r1]
 800a3a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3aa:	69bb      	ldr	r3, [r7, #24]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e6      	bne.n	800a37e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a3b0:	88fb      	ldrh	r3, [r7, #6]
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	68b9      	ldr	r1, [r7, #8]
 800a3b6:	68f8      	ldr	r0, [r7, #12]
 800a3b8:	f000 fc6e 	bl	800ac98 <UART_Start_Receive_DMA>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	e000      	b.n	800a3c2 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a3c0:	2302      	movs	r3, #2
  }
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3728      	adds	r7, #40	; 0x28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	40008000 	.word	0x40008000

0800a3d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a418:	bf00      	nop
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a424:	b5b0      	push	{r4, r5, r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689a      	ldr	r2, [r3, #8]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	431a      	orrs	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	69db      	ldr	r3, [r3, #28]
 800a444:	4313      	orrs	r3, r2
 800a446:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	4bad      	ldr	r3, [pc, #692]	; (800a704 <UART_SetConfig+0x2e0>)
 800a450:	4013      	ands	r3, r2
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	6812      	ldr	r2, [r2, #0]
 800a456:	69f9      	ldr	r1, [r7, #28]
 800a458:	430b      	orrs	r3, r1
 800a45a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	68da      	ldr	r2, [r3, #12]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	430a      	orrs	r2, r1
 800a470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4aa2      	ldr	r2, [pc, #648]	; (800a708 <UART_SetConfig+0x2e4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d004      	beq.n	800a48c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6a1b      	ldr	r3, [r3, #32]
 800a486:	69fa      	ldr	r2, [r7, #28]
 800a488:	4313      	orrs	r3, r2
 800a48a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	69fa      	ldr	r2, [r7, #28]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a99      	ldr	r2, [pc, #612]	; (800a70c <UART_SetConfig+0x2e8>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d121      	bne.n	800a4ee <UART_SetConfig+0xca>
 800a4aa:	4b99      	ldr	r3, [pc, #612]	; (800a710 <UART_SetConfig+0x2ec>)
 800a4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b0:	f003 0303 	and.w	r3, r3, #3
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d817      	bhi.n	800a4e8 <UART_SetConfig+0xc4>
 800a4b8:	a201      	add	r2, pc, #4	; (adr r2, 800a4c0 <UART_SetConfig+0x9c>)
 800a4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4be:	bf00      	nop
 800a4c0:	0800a4d1 	.word	0x0800a4d1
 800a4c4:	0800a4dd 	.word	0x0800a4dd
 800a4c8:	0800a4d7 	.word	0x0800a4d7
 800a4cc:	0800a4e3 	.word	0x0800a4e3
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	76fb      	strb	r3, [r7, #27]
 800a4d4:	e0e7      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	76fb      	strb	r3, [r7, #27]
 800a4da:	e0e4      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a4dc:	2304      	movs	r3, #4
 800a4de:	76fb      	strb	r3, [r7, #27]
 800a4e0:	e0e1      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a4e2:	2308      	movs	r3, #8
 800a4e4:	76fb      	strb	r3, [r7, #27]
 800a4e6:	e0de      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	76fb      	strb	r3, [r7, #27]
 800a4ec:	e0db      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a88      	ldr	r2, [pc, #544]	; (800a714 <UART_SetConfig+0x2f0>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d132      	bne.n	800a55e <UART_SetConfig+0x13a>
 800a4f8:	4b85      	ldr	r3, [pc, #532]	; (800a710 <UART_SetConfig+0x2ec>)
 800a4fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4fe:	f003 030c 	and.w	r3, r3, #12
 800a502:	2b0c      	cmp	r3, #12
 800a504:	d828      	bhi.n	800a558 <UART_SetConfig+0x134>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <UART_SetConfig+0xe8>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a541 	.word	0x0800a541
 800a510:	0800a559 	.word	0x0800a559
 800a514:	0800a559 	.word	0x0800a559
 800a518:	0800a559 	.word	0x0800a559
 800a51c:	0800a54d 	.word	0x0800a54d
 800a520:	0800a559 	.word	0x0800a559
 800a524:	0800a559 	.word	0x0800a559
 800a528:	0800a559 	.word	0x0800a559
 800a52c:	0800a547 	.word	0x0800a547
 800a530:	0800a559 	.word	0x0800a559
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a559 	.word	0x0800a559
 800a53c:	0800a553 	.word	0x0800a553
 800a540:	2300      	movs	r3, #0
 800a542:	76fb      	strb	r3, [r7, #27]
 800a544:	e0af      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a546:	2302      	movs	r3, #2
 800a548:	76fb      	strb	r3, [r7, #27]
 800a54a:	e0ac      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a54c:	2304      	movs	r3, #4
 800a54e:	76fb      	strb	r3, [r7, #27]
 800a550:	e0a9      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a552:	2308      	movs	r3, #8
 800a554:	76fb      	strb	r3, [r7, #27]
 800a556:	e0a6      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a558:	2310      	movs	r3, #16
 800a55a:	76fb      	strb	r3, [r7, #27]
 800a55c:	e0a3      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a6d      	ldr	r2, [pc, #436]	; (800a718 <UART_SetConfig+0x2f4>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d120      	bne.n	800a5aa <UART_SetConfig+0x186>
 800a568:	4b69      	ldr	r3, [pc, #420]	; (800a710 <UART_SetConfig+0x2ec>)
 800a56a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a572:	2b30      	cmp	r3, #48	; 0x30
 800a574:	d013      	beq.n	800a59e <UART_SetConfig+0x17a>
 800a576:	2b30      	cmp	r3, #48	; 0x30
 800a578:	d814      	bhi.n	800a5a4 <UART_SetConfig+0x180>
 800a57a:	2b20      	cmp	r3, #32
 800a57c:	d009      	beq.n	800a592 <UART_SetConfig+0x16e>
 800a57e:	2b20      	cmp	r3, #32
 800a580:	d810      	bhi.n	800a5a4 <UART_SetConfig+0x180>
 800a582:	2b00      	cmp	r3, #0
 800a584:	d002      	beq.n	800a58c <UART_SetConfig+0x168>
 800a586:	2b10      	cmp	r3, #16
 800a588:	d006      	beq.n	800a598 <UART_SetConfig+0x174>
 800a58a:	e00b      	b.n	800a5a4 <UART_SetConfig+0x180>
 800a58c:	2300      	movs	r3, #0
 800a58e:	76fb      	strb	r3, [r7, #27]
 800a590:	e089      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a592:	2302      	movs	r3, #2
 800a594:	76fb      	strb	r3, [r7, #27]
 800a596:	e086      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a598:	2304      	movs	r3, #4
 800a59a:	76fb      	strb	r3, [r7, #27]
 800a59c:	e083      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a59e:	2308      	movs	r3, #8
 800a5a0:	76fb      	strb	r3, [r7, #27]
 800a5a2:	e080      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a5a4:	2310      	movs	r3, #16
 800a5a6:	76fb      	strb	r3, [r7, #27]
 800a5a8:	e07d      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a5b      	ldr	r2, [pc, #364]	; (800a71c <UART_SetConfig+0x2f8>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d120      	bne.n	800a5f6 <UART_SetConfig+0x1d2>
 800a5b4:	4b56      	ldr	r3, [pc, #344]	; (800a710 <UART_SetConfig+0x2ec>)
 800a5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5be:	2bc0      	cmp	r3, #192	; 0xc0
 800a5c0:	d013      	beq.n	800a5ea <UART_SetConfig+0x1c6>
 800a5c2:	2bc0      	cmp	r3, #192	; 0xc0
 800a5c4:	d814      	bhi.n	800a5f0 <UART_SetConfig+0x1cc>
 800a5c6:	2b80      	cmp	r3, #128	; 0x80
 800a5c8:	d009      	beq.n	800a5de <UART_SetConfig+0x1ba>
 800a5ca:	2b80      	cmp	r3, #128	; 0x80
 800a5cc:	d810      	bhi.n	800a5f0 <UART_SetConfig+0x1cc>
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d002      	beq.n	800a5d8 <UART_SetConfig+0x1b4>
 800a5d2:	2b40      	cmp	r3, #64	; 0x40
 800a5d4:	d006      	beq.n	800a5e4 <UART_SetConfig+0x1c0>
 800a5d6:	e00b      	b.n	800a5f0 <UART_SetConfig+0x1cc>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	76fb      	strb	r3, [r7, #27]
 800a5dc:	e063      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a5de:	2302      	movs	r3, #2
 800a5e0:	76fb      	strb	r3, [r7, #27]
 800a5e2:	e060      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a5e4:	2304      	movs	r3, #4
 800a5e6:	76fb      	strb	r3, [r7, #27]
 800a5e8:	e05d      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a5ea:	2308      	movs	r3, #8
 800a5ec:	76fb      	strb	r3, [r7, #27]
 800a5ee:	e05a      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a5f0:	2310      	movs	r3, #16
 800a5f2:	76fb      	strb	r3, [r7, #27]
 800a5f4:	e057      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a49      	ldr	r2, [pc, #292]	; (800a720 <UART_SetConfig+0x2fc>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d125      	bne.n	800a64c <UART_SetConfig+0x228>
 800a600:	4b43      	ldr	r3, [pc, #268]	; (800a710 <UART_SetConfig+0x2ec>)
 800a602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a60a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a60e:	d017      	beq.n	800a640 <UART_SetConfig+0x21c>
 800a610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a614:	d817      	bhi.n	800a646 <UART_SetConfig+0x222>
 800a616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a61a:	d00b      	beq.n	800a634 <UART_SetConfig+0x210>
 800a61c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a620:	d811      	bhi.n	800a646 <UART_SetConfig+0x222>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <UART_SetConfig+0x20a>
 800a626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a62a:	d006      	beq.n	800a63a <UART_SetConfig+0x216>
 800a62c:	e00b      	b.n	800a646 <UART_SetConfig+0x222>
 800a62e:	2300      	movs	r3, #0
 800a630:	76fb      	strb	r3, [r7, #27]
 800a632:	e038      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a634:	2302      	movs	r3, #2
 800a636:	76fb      	strb	r3, [r7, #27]
 800a638:	e035      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a63a:	2304      	movs	r3, #4
 800a63c:	76fb      	strb	r3, [r7, #27]
 800a63e:	e032      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a640:	2308      	movs	r3, #8
 800a642:	76fb      	strb	r3, [r7, #27]
 800a644:	e02f      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a646:	2310      	movs	r3, #16
 800a648:	76fb      	strb	r3, [r7, #27]
 800a64a:	e02c      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a2d      	ldr	r2, [pc, #180]	; (800a708 <UART_SetConfig+0x2e4>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d125      	bne.n	800a6a2 <UART_SetConfig+0x27e>
 800a656:	4b2e      	ldr	r3, [pc, #184]	; (800a710 <UART_SetConfig+0x2ec>)
 800a658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a65c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a664:	d017      	beq.n	800a696 <UART_SetConfig+0x272>
 800a666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a66a:	d817      	bhi.n	800a69c <UART_SetConfig+0x278>
 800a66c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a670:	d00b      	beq.n	800a68a <UART_SetConfig+0x266>
 800a672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a676:	d811      	bhi.n	800a69c <UART_SetConfig+0x278>
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d003      	beq.n	800a684 <UART_SetConfig+0x260>
 800a67c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a680:	d006      	beq.n	800a690 <UART_SetConfig+0x26c>
 800a682:	e00b      	b.n	800a69c <UART_SetConfig+0x278>
 800a684:	2300      	movs	r3, #0
 800a686:	76fb      	strb	r3, [r7, #27]
 800a688:	e00d      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a68a:	2302      	movs	r3, #2
 800a68c:	76fb      	strb	r3, [r7, #27]
 800a68e:	e00a      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a690:	2304      	movs	r3, #4
 800a692:	76fb      	strb	r3, [r7, #27]
 800a694:	e007      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a696:	2308      	movs	r3, #8
 800a698:	76fb      	strb	r3, [r7, #27]
 800a69a:	e004      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a69c:	2310      	movs	r3, #16
 800a69e:	76fb      	strb	r3, [r7, #27]
 800a6a0:	e001      	b.n	800a6a6 <UART_SetConfig+0x282>
 800a6a2:	2310      	movs	r3, #16
 800a6a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a17      	ldr	r2, [pc, #92]	; (800a708 <UART_SetConfig+0x2e4>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	f040 8087 	bne.w	800a7c0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6b2:	7efb      	ldrb	r3, [r7, #27]
 800a6b4:	2b08      	cmp	r3, #8
 800a6b6:	d837      	bhi.n	800a728 <UART_SetConfig+0x304>
 800a6b8:	a201      	add	r2, pc, #4	; (adr r2, 800a6c0 <UART_SetConfig+0x29c>)
 800a6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6be:	bf00      	nop
 800a6c0:	0800a6e5 	.word	0x0800a6e5
 800a6c4:	0800a729 	.word	0x0800a729
 800a6c8:	0800a6ed 	.word	0x0800a6ed
 800a6cc:	0800a729 	.word	0x0800a729
 800a6d0:	0800a6f3 	.word	0x0800a6f3
 800a6d4:	0800a729 	.word	0x0800a729
 800a6d8:	0800a729 	.word	0x0800a729
 800a6dc:	0800a729 	.word	0x0800a729
 800a6e0:	0800a6fb 	.word	0x0800a6fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6e4:	f7fe f8b8 	bl	8008858 <HAL_RCC_GetPCLK1Freq>
 800a6e8:	6178      	str	r0, [r7, #20]
        break;
 800a6ea:	e022      	b.n	800a732 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6ec:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <UART_SetConfig+0x300>)
 800a6ee:	617b      	str	r3, [r7, #20]
        break;
 800a6f0:	e01f      	b.n	800a732 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6f2:	f7fe f819 	bl	8008728 <HAL_RCC_GetSysClockFreq>
 800a6f6:	6178      	str	r0, [r7, #20]
        break;
 800a6f8:	e01b      	b.n	800a732 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6fe:	617b      	str	r3, [r7, #20]
        break;
 800a700:	e017      	b.n	800a732 <UART_SetConfig+0x30e>
 800a702:	bf00      	nop
 800a704:	efff69f3 	.word	0xefff69f3
 800a708:	40008000 	.word	0x40008000
 800a70c:	40013800 	.word	0x40013800
 800a710:	40021000 	.word	0x40021000
 800a714:	40004400 	.word	0x40004400
 800a718:	40004800 	.word	0x40004800
 800a71c:	40004c00 	.word	0x40004c00
 800a720:	40005000 	.word	0x40005000
 800a724:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a728:	2300      	movs	r3, #0
 800a72a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	76bb      	strb	r3, [r7, #26]
        break;
 800a730:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 80f1 	beq.w	800a91c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	4613      	mov	r3, r2
 800a740:	005b      	lsls	r3, r3, #1
 800a742:	4413      	add	r3, r2
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	429a      	cmp	r2, r3
 800a748:	d305      	bcc.n	800a756 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	429a      	cmp	r2, r3
 800a754:	d902      	bls.n	800a75c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	76bb      	strb	r3, [r7, #26]
 800a75a:	e0df      	b.n	800a91c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	4618      	mov	r0, r3
 800a760:	f04f 0100 	mov.w	r1, #0
 800a764:	f04f 0200 	mov.w	r2, #0
 800a768:	f04f 0300 	mov.w	r3, #0
 800a76c:	020b      	lsls	r3, r1, #8
 800a76e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a772:	0202      	lsls	r2, r0, #8
 800a774:	6879      	ldr	r1, [r7, #4]
 800a776:	6849      	ldr	r1, [r1, #4]
 800a778:	0849      	lsrs	r1, r1, #1
 800a77a:	4608      	mov	r0, r1
 800a77c:	f04f 0100 	mov.w	r1, #0
 800a780:	1814      	adds	r4, r2, r0
 800a782:	eb43 0501 	adc.w	r5, r3, r1
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	461a      	mov	r2, r3
 800a78c:	f04f 0300 	mov.w	r3, #0
 800a790:	4620      	mov	r0, r4
 800a792:	4629      	mov	r1, r5
 800a794:	f7f6 fa58 	bl	8000c48 <__aeabi_uldivmod>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4613      	mov	r3, r2
 800a79e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7a6:	d308      	bcc.n	800a7ba <UART_SetConfig+0x396>
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7ae:	d204      	bcs.n	800a7ba <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	693a      	ldr	r2, [r7, #16]
 800a7b6:	60da      	str	r2, [r3, #12]
 800a7b8:	e0b0      	b.n	800a91c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	76bb      	strb	r3, [r7, #26]
 800a7be:	e0ad      	b.n	800a91c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7c8:	d15b      	bne.n	800a882 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a7ca:	7efb      	ldrb	r3, [r7, #27]
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d828      	bhi.n	800a822 <UART_SetConfig+0x3fe>
 800a7d0:	a201      	add	r2, pc, #4	; (adr r2, 800a7d8 <UART_SetConfig+0x3b4>)
 800a7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d6:	bf00      	nop
 800a7d8:	0800a7fd 	.word	0x0800a7fd
 800a7dc:	0800a805 	.word	0x0800a805
 800a7e0:	0800a80d 	.word	0x0800a80d
 800a7e4:	0800a823 	.word	0x0800a823
 800a7e8:	0800a813 	.word	0x0800a813
 800a7ec:	0800a823 	.word	0x0800a823
 800a7f0:	0800a823 	.word	0x0800a823
 800a7f4:	0800a823 	.word	0x0800a823
 800a7f8:	0800a81b 	.word	0x0800a81b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7fc:	f7fe f82c 	bl	8008858 <HAL_RCC_GetPCLK1Freq>
 800a800:	6178      	str	r0, [r7, #20]
        break;
 800a802:	e013      	b.n	800a82c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a804:	f7fe f83e 	bl	8008884 <HAL_RCC_GetPCLK2Freq>
 800a808:	6178      	str	r0, [r7, #20]
        break;
 800a80a:	e00f      	b.n	800a82c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a80c:	4b49      	ldr	r3, [pc, #292]	; (800a934 <UART_SetConfig+0x510>)
 800a80e:	617b      	str	r3, [r7, #20]
        break;
 800a810:	e00c      	b.n	800a82c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a812:	f7fd ff89 	bl	8008728 <HAL_RCC_GetSysClockFreq>
 800a816:	6178      	str	r0, [r7, #20]
        break;
 800a818:	e008      	b.n	800a82c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a81a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a81e:	617b      	str	r3, [r7, #20]
        break;
 800a820:	e004      	b.n	800a82c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a822:	2300      	movs	r3, #0
 800a824:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	76bb      	strb	r3, [r7, #26]
        break;
 800a82a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d074      	beq.n	800a91c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	005a      	lsls	r2, r3, #1
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	085b      	lsrs	r3, r3, #1
 800a83c:	441a      	add	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	fbb2 f3f3 	udiv	r3, r2, r3
 800a846:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	2b0f      	cmp	r3, #15
 800a84c:	d916      	bls.n	800a87c <UART_SetConfig+0x458>
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a854:	d212      	bcs.n	800a87c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	b29b      	uxth	r3, r3
 800a85a:	f023 030f 	bic.w	r3, r3, #15
 800a85e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	085b      	lsrs	r3, r3, #1
 800a864:	b29b      	uxth	r3, r3
 800a866:	f003 0307 	and.w	r3, r3, #7
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	89fb      	ldrh	r3, [r7, #14]
 800a86e:	4313      	orrs	r3, r2
 800a870:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	89fa      	ldrh	r2, [r7, #14]
 800a878:	60da      	str	r2, [r3, #12]
 800a87a:	e04f      	b.n	800a91c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	76bb      	strb	r3, [r7, #26]
 800a880:	e04c      	b.n	800a91c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a882:	7efb      	ldrb	r3, [r7, #27]
 800a884:	2b08      	cmp	r3, #8
 800a886:	d828      	bhi.n	800a8da <UART_SetConfig+0x4b6>
 800a888:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <UART_SetConfig+0x46c>)
 800a88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88e:	bf00      	nop
 800a890:	0800a8b5 	.word	0x0800a8b5
 800a894:	0800a8bd 	.word	0x0800a8bd
 800a898:	0800a8c5 	.word	0x0800a8c5
 800a89c:	0800a8db 	.word	0x0800a8db
 800a8a0:	0800a8cb 	.word	0x0800a8cb
 800a8a4:	0800a8db 	.word	0x0800a8db
 800a8a8:	0800a8db 	.word	0x0800a8db
 800a8ac:	0800a8db 	.word	0x0800a8db
 800a8b0:	0800a8d3 	.word	0x0800a8d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8b4:	f7fd ffd0 	bl	8008858 <HAL_RCC_GetPCLK1Freq>
 800a8b8:	6178      	str	r0, [r7, #20]
        break;
 800a8ba:	e013      	b.n	800a8e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8bc:	f7fd ffe2 	bl	8008884 <HAL_RCC_GetPCLK2Freq>
 800a8c0:	6178      	str	r0, [r7, #20]
        break;
 800a8c2:	e00f      	b.n	800a8e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8c4:	4b1b      	ldr	r3, [pc, #108]	; (800a934 <UART_SetConfig+0x510>)
 800a8c6:	617b      	str	r3, [r7, #20]
        break;
 800a8c8:	e00c      	b.n	800a8e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8ca:	f7fd ff2d 	bl	8008728 <HAL_RCC_GetSysClockFreq>
 800a8ce:	6178      	str	r0, [r7, #20]
        break;
 800a8d0:	e008      	b.n	800a8e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8d6:	617b      	str	r3, [r7, #20]
        break;
 800a8d8:	e004      	b.n	800a8e4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	76bb      	strb	r3, [r7, #26]
        break;
 800a8e2:	bf00      	nop
    }

    if (pclk != 0U)
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d018      	beq.n	800a91c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	085a      	lsrs	r2, r3, #1
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	441a      	add	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8fc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	2b0f      	cmp	r3, #15
 800a902:	d909      	bls.n	800a918 <UART_SetConfig+0x4f4>
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a90a:	d205      	bcs.n	800a918 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	b29a      	uxth	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60da      	str	r2, [r3, #12]
 800a916:	e001      	b.n	800a91c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a928:	7ebb      	ldrb	r3, [r7, #26]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3720      	adds	r7, #32
 800a92e:	46bd      	mov	sp, r7
 800a930:	bdb0      	pop	{r4, r5, r7, pc}
 800a932:	bf00      	nop
 800a934:	00f42400 	.word	0x00f42400

0800a938 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	f003 0301 	and.w	r3, r3, #1
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a966:	f003 0302 	and.w	r3, r3, #2
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00a      	beq.n	800a9a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9aa:	f003 0308 	and.w	r3, r3, #8
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00a      	beq.n	800a9c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	430a      	orrs	r2, r1
 800a9c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9cc:	f003 0310 	and.w	r3, r3, #16
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00a      	beq.n	800a9ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	f003 0320 	and.w	r3, r3, #32
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d01a      	beq.n	800aa4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa36:	d10a      	bne.n	800aa4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	430a      	orrs	r2, r1
 800aa6e:	605a      	str	r2, [r3, #4]
  }
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af02      	add	r7, sp, #8
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa8c:	f7fb fc0e 	bl	80062ac <HAL_GetTick>
 800aa90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 0308 	and.w	r3, r3, #8
 800aa9c:	2b08      	cmp	r3, #8
 800aa9e:	d10e      	bne.n	800aabe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aaa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f82d 	bl	800ab0e <UART_WaitOnFlagUntilTimeout>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e023      	b.n	800ab06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d10e      	bne.n	800aaea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aacc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aad0:	9300      	str	r3, [sp, #0]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f817 	bl	800ab0e <UART_WaitOnFlagUntilTimeout>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d001      	beq.n	800aaea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e00d      	b.n	800ab06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2220      	movs	r2, #32
 800aaee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2220      	movs	r2, #32
 800aaf4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b09c      	sub	sp, #112	; 0x70
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	60f8      	str	r0, [r7, #12]
 800ab16:	60b9      	str	r1, [r7, #8]
 800ab18:	603b      	str	r3, [r7, #0]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab1e:	e0a5      	b.n	800ac6c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab26:	f000 80a1 	beq.w	800ac6c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab2a:	f7fb fbbf 	bl	80062ac <HAL_GetTick>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d302      	bcc.n	800ab40 <UART_WaitOnFlagUntilTimeout+0x32>
 800ab3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d13e      	bne.n	800abbe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ab4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab54:	667b      	str	r3, [r7, #100]	; 0x64
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ab6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e6      	bne.n	800ab40 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3308      	adds	r3, #8
 800ab78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab84:	f023 0301 	bic.w	r3, r3, #1
 800ab88:	663b      	str	r3, [r7, #96]	; 0x60
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3308      	adds	r3, #8
 800ab90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab92:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e5      	bne.n	800ab72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2220      	movs	r2, #32
 800abaa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2220      	movs	r2, #32
 800abb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e067      	b.n	800ac8e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 0304 	and.w	r3, r3, #4
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d04f      	beq.n	800ac6c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800abd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abda:	d147      	bne.n	800ac6c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abe4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abee:	e853 3f00 	ldrex	r3, [r3]
 800abf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800abfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	461a      	mov	r2, r3
 800ac02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac04:	637b      	str	r3, [r7, #52]	; 0x34
 800ac06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac0c:	e841 2300 	strex	r3, r2, [r1]
 800ac10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ac12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e6      	bne.n	800abe6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	3308      	adds	r3, #8
 800ac1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	e853 3f00 	ldrex	r3, [r3]
 800ac26:	613b      	str	r3, [r7, #16]
   return(result);
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	f023 0301 	bic.w	r3, r3, #1
 800ac2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3308      	adds	r3, #8
 800ac36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ac38:	623a      	str	r2, [r7, #32]
 800ac3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	69f9      	ldr	r1, [r7, #28]
 800ac3e:	6a3a      	ldr	r2, [r7, #32]
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	61bb      	str	r3, [r7, #24]
   return(result);
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e5      	bne.n	800ac18 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2220      	movs	r2, #32
 800ac56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2220      	movs	r2, #32
 800ac5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	e010      	b.n	800ac8e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	69da      	ldr	r2, [r3, #28]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	4013      	ands	r3, r2
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	bf0c      	ite	eq
 800ac7c:	2301      	moveq	r3, #1
 800ac7e:	2300      	movne	r3, #0
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	461a      	mov	r2, r3
 800ac84:	79fb      	ldrb	r3, [r7, #7]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	f43f af4a 	beq.w	800ab20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac8c:	2300      	movs	r3, #0
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3770      	adds	r7, #112	; 0x70
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
	...

0800ac98 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b096      	sub	sp, #88	; 0x58
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	4613      	mov	r3, r2
 800aca4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	88fa      	ldrh	r2, [r7, #6]
 800acb0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2222      	movs	r2, #34	; 0x22
 800acc0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d02b      	beq.n	800ad22 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acce:	4a42      	ldr	r2, [pc, #264]	; (800add8 <UART_Start_Receive_DMA+0x140>)
 800acd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd6:	4a41      	ldr	r2, [pc, #260]	; (800addc <UART_Start_Receive_DMA+0x144>)
 800acd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acde:	4a40      	ldr	r2, [pc, #256]	; (800ade0 <UART_Start_Receive_DMA+0x148>)
 800ace0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace6:	2200      	movs	r2, #0
 800ace8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3324      	adds	r3, #36	; 0x24
 800acf4:	4619      	mov	r1, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acfa:	461a      	mov	r2, r3
 800acfc:	88fb      	ldrh	r3, [r7, #6]
 800acfe:	f7fb fd95 	bl	800682c <HAL_DMA_Start_IT>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00c      	beq.n	800ad22 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2210      	movs	r2, #16
 800ad0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2220      	movs	r2, #32
 800ad1c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e055      	b.n	800adce <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d018      	beq.n	800ad64 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3a:	e853 3f00 	ldrex	r3, [r3]
 800ad3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad46:	657b      	str	r3, [r7, #84]	; 0x54
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad50:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad52:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ad56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad58:	e841 2300 	strex	r3, r2, [r1]
 800ad5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ad5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1e6      	bne.n	800ad32 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	3308      	adds	r3, #8
 800ad6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	e853 3f00 	ldrex	r3, [r3]
 800ad72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	f043 0301 	orr.w	r3, r3, #1
 800ad7a:	653b      	str	r3, [r7, #80]	; 0x50
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	3308      	adds	r3, #8
 800ad82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad84:	637a      	str	r2, [r7, #52]	; 0x34
 800ad86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad8c:	e841 2300 	strex	r3, r2, [r1]
 800ad90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1e5      	bne.n	800ad64 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3308      	adds	r3, #8
 800ad9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	e853 3f00 	ldrex	r3, [r3]
 800ada6:	613b      	str	r3, [r7, #16]
   return(result);
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	3308      	adds	r3, #8
 800adb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800adb8:	623a      	str	r2, [r7, #32]
 800adba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbc:	69f9      	ldr	r1, [r7, #28]
 800adbe:	6a3a      	ldr	r2, [r7, #32]
 800adc0:	e841 2300 	strex	r3, r2, [r1]
 800adc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d1e5      	bne.n	800ad98 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3758      	adds	r7, #88	; 0x58
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	0800aef7 	.word	0x0800aef7
 800addc:	0800b01b 	.word	0x0800b01b
 800ade0:	0800b053 	.word	0x0800b053

0800ade4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b089      	sub	sp, #36	; 0x24
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ae00:	61fb      	str	r3, [r7, #28]
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	6979      	ldr	r1, [r7, #20]
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	e841 2300 	strex	r3, r2, [r1]
 800ae16:	613b      	str	r3, [r7, #16]
   return(result);
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1e6      	bne.n	800adec <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2220      	movs	r2, #32
 800ae22:	679a      	str	r2, [r3, #120]	; 0x78
}
 800ae24:	bf00      	nop
 800ae26:	3724      	adds	r7, #36	; 0x24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b095      	sub	sp, #84	; 0x54
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ae4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae56:	643b      	str	r3, [r7, #64]	; 0x40
 800ae58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ae5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e6      	bne.n	800ae38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3308      	adds	r3, #8
 800ae70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	e853 3f00 	ldrex	r3, [r3]
 800ae78:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	f023 0301 	bic.w	r3, r3, #1
 800ae80:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3308      	adds	r3, #8
 800ae88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e5      	bne.n	800ae6a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d118      	bne.n	800aed8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	e853 3f00 	ldrex	r3, [r3]
 800aeb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	f023 0310 	bic.w	r3, r3, #16
 800aeba:	647b      	str	r3, [r7, #68]	; 0x44
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	461a      	mov	r2, r3
 800aec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aec4:	61bb      	str	r3, [r7, #24]
 800aec6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec8:	6979      	ldr	r1, [r7, #20]
 800aeca:	69ba      	ldr	r2, [r7, #24]
 800aecc:	e841 2300 	strex	r3, r2, [r1]
 800aed0:	613b      	str	r3, [r7, #16]
   return(result);
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1e6      	bne.n	800aea6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2220      	movs	r2, #32
 800aedc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2200      	movs	r2, #0
 800aee8:	665a      	str	r2, [r3, #100]	; 0x64
}
 800aeea:	bf00      	nop
 800aeec:	3754      	adds	r7, #84	; 0x54
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr

0800aef6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b09c      	sub	sp, #112	; 0x70
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af02:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d170      	bne.n	800aff4 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800af12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af14:	2200      	movs	r2, #0
 800af16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af22:	e853 3f00 	ldrex	r3, [r3]
 800af26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800af30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	461a      	mov	r2, r3
 800af36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af38:	65bb      	str	r3, [r7, #88]	; 0x58
 800af3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af40:	e841 2300 	strex	r3, r2, [r1]
 800af44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e6      	bne.n	800af1a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	3308      	adds	r3, #8
 800af52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af56:	e853 3f00 	ldrex	r3, [r3]
 800af5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5e:	f023 0301 	bic.w	r3, r3, #1
 800af62:	667b      	str	r3, [r7, #100]	; 0x64
 800af64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3308      	adds	r3, #8
 800af6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af6c:	647a      	str	r2, [r7, #68]	; 0x44
 800af6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af74:	e841 2300 	strex	r3, r2, [r1]
 800af78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1e5      	bne.n	800af4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	3308      	adds	r3, #8
 800af86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	e853 3f00 	ldrex	r3, [r3]
 800af8e:	623b      	str	r3, [r7, #32]
   return(result);
 800af90:	6a3b      	ldr	r3, [r7, #32]
 800af92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af96:	663b      	str	r3, [r7, #96]	; 0x60
 800af98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	3308      	adds	r3, #8
 800af9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afa0:	633a      	str	r2, [r7, #48]	; 0x30
 800afa2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800afa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afa8:	e841 2300 	strex	r3, r2, [r1]
 800afac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800afae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1e5      	bne.n	800af80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800afb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afb6:	2220      	movs	r2, #32
 800afb8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d118      	bne.n	800aff4 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	e853 3f00 	ldrex	r3, [r3]
 800afce:	60fb      	str	r3, [r7, #12]
   return(result);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f023 0310 	bic.w	r3, r3, #16
 800afd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	461a      	mov	r2, r3
 800afde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afe0:	61fb      	str	r3, [r7, #28]
 800afe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe4:	69b9      	ldr	r1, [r7, #24]
 800afe6:	69fa      	ldr	r2, [r7, #28]
 800afe8:	e841 2300 	strex	r3, r2, [r1]
 800afec:	617b      	str	r3, [r7, #20]
   return(result);
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1e6      	bne.n	800afc2 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d107      	bne.n	800b00c <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800affc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800affe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b002:	4619      	mov	r1, r3
 800b004:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b006:	f7ff fa01 	bl	800a40c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b00a:	e002      	b.n	800b012 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800b00c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b00e:	f7ff f9df 	bl	800a3d0 <HAL_UART_RxCpltCallback>
}
 800b012:	bf00      	nop
 800b014:	3770      	adds	r7, #112	; 0x70
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b026:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d109      	bne.n	800b044 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b036:	085b      	lsrs	r3, r3, #1
 800b038:	b29b      	uxth	r3, r3
 800b03a:	4619      	mov	r1, r3
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff f9e5 	bl	800a40c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b042:	e002      	b.n	800b04a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f7ff f9cd 	bl	800a3e4 <HAL_UART_RxHalfCpltCallback>
}
 800b04a:	bf00      	nop
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b086      	sub	sp, #24
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b05e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b064:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b06a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b076:	2b80      	cmp	r3, #128	; 0x80
 800b078:	d109      	bne.n	800b08e <UART_DMAError+0x3c>
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2b21      	cmp	r3, #33	; 0x21
 800b07e:	d106      	bne.n	800b08e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	2200      	movs	r2, #0
 800b084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b088:	6978      	ldr	r0, [r7, #20]
 800b08a:	f7ff feab 	bl	800ade4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b098:	2b40      	cmp	r3, #64	; 0x40
 800b09a:	d109      	bne.n	800b0b0 <UART_DMAError+0x5e>
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b22      	cmp	r3, #34	; 0x22
 800b0a0:	d106      	bne.n	800b0b0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b0aa:	6978      	ldr	r0, [r7, #20]
 800b0ac:	f7ff fec0 	bl	800ae30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0b6:	f043 0210 	orr.w	r2, r3, #16
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0c0:	6978      	ldr	r0, [r7, #20]
 800b0c2:	f7ff f999 	bl	800a3f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0c6:	bf00      	nop
 800b0c8:	3718      	adds	r7, #24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
	...

0800b0d0 <DataHist_parameters>:
 800b0d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b0d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b0d8:	7020      	strb	r0, [r4, #0]
 800b0da:	6808      	ldr	r0, [r1, #0]
 800b0dc:	6060      	str	r0, [r4, #4]
 800b0de:	6848      	ldr	r0, [r1, #4]
 800b0e0:	60a0      	str	r0, [r4, #8]
 800b0e2:	6888      	ldr	r0, [r1, #8]
 800b0e4:	60e0      	str	r0, [r4, #12]
 800b0e6:	68c8      	ldr	r0, [r1, #12]
 800b0e8:	6120      	str	r0, [r4, #16]
 800b0ea:	6908      	ldr	r0, [r1, #16]
 800b0ec:	6160      	str	r0, [r4, #20]
 800b0ee:	6948      	ldr	r0, [r1, #20]
 800b0f0:	61a0      	str	r0, [r4, #24]
 800b0f2:	6988      	ldr	r0, [r1, #24]
 800b0f4:	61e0      	str	r0, [r4, #28]
 800b0f6:	69c8      	ldr	r0, [r1, #28]
 800b0f8:	6220      	str	r0, [r4, #32]
 800b0fa:	6a09      	ldr	r1, [r1, #32]
 800b0fc:	6261      	str	r1, [r4, #36]	; 0x24
 800b0fe:	e9dd 7607 	ldrd	r7, r6, [sp, #28]
 800b102:	8811      	ldrh	r1, [r2, #0]
 800b104:	f8d2 9004 	ldr.w	r9, [r2, #4]
 800b108:	8521      	strh	r1, [r4, #40]	; 0x28
 800b10a:	f102 0c80 	add.w	ip, r2, #128	; 0x80
 800b10e:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800b112:	f04f 0e00 	mov.w	lr, #0
 800b116:	f1ac 0278 	sub.w	r2, ip, #120	; 0x78
 800b11a:	4641      	mov	r1, r8
 800b11c:	f852 0b04 	ldr.w	r0, [r2], #4
 800b120:	f841 0b04 	str.w	r0, [r1], #4
 800b124:	4562      	cmp	r2, ip
 800b126:	d1f9      	bne.n	800b11c <DataHist_parameters+0x4c>
 800b128:	f10e 0e1e 	add.w	lr, lr, #30
 800b12c:	f1be 0f5a 	cmp.w	lr, #90	; 0x5a
 800b130:	f108 0878 	add.w	r8, r8, #120	; 0x78
 800b134:	f102 0c78 	add.w	ip, r2, #120	; 0x78
 800b138:	d1ed      	bne.n	800b116 <DataHist_parameters+0x46>
 800b13a:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 800b13e:	881a      	ldrh	r2, [r3, #0]
 800b140:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800b144:	f8a4 2198 	strh.w	r2, [r4, #408]	; 0x198
 800b148:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800b14c:	f504 7ed0 	add.w	lr, r4, #416	; 0x1a0
 800b150:	f04f 0c00 	mov.w	ip, #0
 800b154:	f1a0 0378 	sub.w	r3, r0, #120	; 0x78
 800b158:	4672      	mov	r2, lr
 800b15a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b15e:	f842 1b04 	str.w	r1, [r2], #4
 800b162:	4283      	cmp	r3, r0
 800b164:	d1f9      	bne.n	800b15a <DataHist_parameters+0x8a>
 800b166:	f10c 0c1e 	add.w	ip, ip, #30
 800b16a:	f1bc 0f5a 	cmp.w	ip, #90	; 0x5a
 800b16e:	f10e 0e78 	add.w	lr, lr, #120	; 0x78
 800b172:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800b176:	d1ed      	bne.n	800b154 <DataHist_parameters+0x84>
 800b178:	f8c4 819c 	str.w	r8, [r4, #412]	; 0x19c
 800b17c:	883b      	ldrh	r3, [r7, #0]
 800b17e:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800b182:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
 800b186:	3780      	adds	r7, #128	; 0x80
 800b188:	f504 7c44 	add.w	ip, r4, #784	; 0x310
 800b18c:	2000      	movs	r0, #0
 800b18e:	f1a7 0378 	sub.w	r3, r7, #120	; 0x78
 800b192:	4662      	mov	r2, ip
 800b194:	f853 1b04 	ldr.w	r1, [r3], #4
 800b198:	f842 1b04 	str.w	r1, [r2], #4
 800b19c:	42bb      	cmp	r3, r7
 800b19e:	d1f9      	bne.n	800b194 <DataHist_parameters+0xc4>
 800b1a0:	301e      	adds	r0, #30
 800b1a2:	285a      	cmp	r0, #90	; 0x5a
 800b1a4:	f10c 0c78 	add.w	ip, ip, #120	; 0x78
 800b1a8:	f103 0778 	add.w	r7, r3, #120	; 0x78
 800b1ac:	d1ef      	bne.n	800b18e <DataHist_parameters+0xbe>
 800b1ae:	f8c4 e30c 	str.w	lr, [r4, #780]	; 0x30c
 800b1b2:	8833      	ldrh	r3, [r6, #0]
 800b1b4:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b1b8:	f8a4 3478 	strh.w	r3, [r4, #1144]	; 0x478
 800b1bc:	3680      	adds	r6, #128	; 0x80
 800b1be:	f504 6790 	add.w	r7, r4, #1152	; 0x480
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	f1a6 0378 	sub.w	r3, r6, #120	; 0x78
 800b1c8:	463a      	mov	r2, r7
 800b1ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800b1ce:	f842 1b04 	str.w	r1, [r2], #4
 800b1d2:	429e      	cmp	r6, r3
 800b1d4:	d1f9      	bne.n	800b1ca <DataHist_parameters+0xfa>
 800b1d6:	301e      	adds	r0, #30
 800b1d8:	285a      	cmp	r0, #90	; 0x5a
 800b1da:	f107 0778 	add.w	r7, r7, #120	; 0x78
 800b1de:	f106 0678 	add.w	r6, r6, #120	; 0x78
 800b1e2:	d1ef      	bne.n	800b1c4 <DataHist_parameters+0xf4>
 800b1e4:	f504 638f 	add.w	r3, r4, #1144	; 0x478
 800b1e8:	69aa      	ldr	r2, [r5, #24]
 800b1ea:	f8c3 c004 	str.w	ip, [r3, #4]
 800b1ee:	782b      	ldrb	r3, [r5, #0]
 800b1f0:	f884 35e8 	strb.w	r3, [r4, #1512]	; 0x5e8
 800b1f4:	f504 63bd 	add.w	r3, r4, #1512	; 0x5e8
 800b1f8:	619a      	str	r2, [r3, #24]
 800b1fa:	686a      	ldr	r2, [r5, #4]
 800b1fc:	605a      	str	r2, [r3, #4]
 800b1fe:	f504 62be 	add.w	r2, r4, #1520	; 0x5f0
 800b202:	68a9      	ldr	r1, [r5, #8]
 800b204:	6011      	str	r1, [r2, #0]
 800b206:	f204 52f4 	addw	r2, r4, #1524	; 0x5f4
 800b20a:	68e9      	ldr	r1, [r5, #12]
 800b20c:	6011      	str	r1, [r2, #0]
 800b20e:	f504 62bf 	add.w	r2, r4, #1528	; 0x5f8
 800b212:	6929      	ldr	r1, [r5, #16]
 800b214:	6011      	str	r1, [r2, #0]
 800b216:	f204 52fc 	addw	r2, r4, #1532	; 0x5fc
 800b21a:	6969      	ldr	r1, [r5, #20]
 800b21c:	6011      	str	r1, [r2, #0]
 800b21e:	69ea      	ldr	r2, [r5, #28]
 800b220:	61da      	str	r2, [r3, #28]
 800b222:	f504 63c1 	add.w	r3, r4, #1544	; 0x608
 800b226:	6a2a      	ldr	r2, [r5, #32]
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	f204 630c 	addw	r3, r4, #1548	; 0x60c
 800b22e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	f504 63c2 	add.w	r3, r4, #1552	; 0x610
 800b236:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b238:	601a      	str	r2, [r3, #0]
 800b23a:	f204 6414 	addw	r4, r4, #1556	; 0x614
 800b23e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b246:	bf00      	nop

0800b248 <rotVect>:
 800b248:	f991 3001 	ldrsb.w	r3, [r1, #1]
 800b24c:	ed92 5a01 	vldr	s10, [r2, #4]
 800b250:	edd2 5a00 	vldr	s11, [r2]
 800b254:	ed92 6a02 	vldr	s12, [r2, #8]
 800b258:	ee07 3a90 	vmov	s15, r3
 800b25c:	f991 3000 	ldrsb.w	r3, [r1]
 800b260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b264:	ee06 3a90 	vmov	s13, r3
 800b268:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b26c:	f991 3002 	ldrsb.w	r3, [r1, #2]
 800b270:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b274:	ee07 3a10 	vmov	s14, r3
 800b278:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b27c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b280:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b284:	edc0 7a00 	vstr	s15, [r0]
 800b288:	f991 3004 	ldrsb.w	r3, [r1, #4]
 800b28c:	ed92 5a01 	vldr	s10, [r2, #4]
 800b290:	edd2 5a00 	vldr	s11, [r2]
 800b294:	ed92 6a02 	vldr	s12, [r2, #8]
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b2a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2a4:	ee06 3a90 	vmov	s13, r3
 800b2a8:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b2ac:	f991 3005 	ldrsb.w	r3, [r1, #5]
 800b2b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b2b4:	ee07 3a10 	vmov	s14, r3
 800b2b8:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b2bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b2c0:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b2c4:	edc0 7a01 	vstr	s15, [r0, #4]
 800b2c8:	f991 3007 	ldrsb.w	r3, [r1, #7]
 800b2cc:	ed92 5a01 	vldr	s10, [r2, #4]
 800b2d0:	edd2 5a00 	vldr	s11, [r2]
 800b2d4:	ed92 6a02 	vldr	s12, [r2, #8]
 800b2d8:	ee07 3a90 	vmov	s15, r3
 800b2dc:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800b2e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2e4:	ee06 3a90 	vmov	s13, r3
 800b2e8:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b2ec:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800b2f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b2f4:	ee07 3a10 	vmov	s14, r3
 800b2f8:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b2fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b300:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b304:	edc0 7a02 	vstr	s15, [r0, #8]
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop

0800b30c <findAxis>:
 800b30c:	f990 3000 	ldrsb.w	r3, [r0]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d027      	beq.n	800b364 <findAxis+0x58>
 800b314:	3301      	adds	r3, #1
 800b316:	d00e      	beq.n	800b336 <findAxis+0x2a>
 800b318:	f990 3003 	ldrsb.w	r3, [r0, #3]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d053      	beq.n	800b3c8 <findAxis+0xbc>
 800b320:	3301      	adds	r3, #1
 800b322:	d048      	beq.n	800b3b6 <findAxis+0xaa>
 800b324:	f990 3006 	ldrsb.w	r3, [r0, #6]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d053      	beq.n	800b3d4 <findAxis+0xc8>
 800b32c:	3301      	adds	r3, #1
 800b32e:	d104      	bne.n	800b33a <findAxis+0x2e>
 800b330:	2364      	movs	r3, #100	; 0x64
 800b332:	700b      	strb	r3, [r1, #0]
 800b334:	e001      	b.n	800b33a <findAxis+0x2e>
 800b336:	2377      	movs	r3, #119	; 0x77
 800b338:	700b      	strb	r3, [r1, #0]
 800b33a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d016      	beq.n	800b370 <findAxis+0x64>
 800b342:	3301      	adds	r3, #1
 800b344:	d02e      	beq.n	800b3a4 <findAxis+0x98>
 800b346:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d039      	beq.n	800b3c2 <findAxis+0xb6>
 800b34e:	3301      	adds	r3, #1
 800b350:	d034      	beq.n	800b3bc <findAxis+0xb0>
 800b352:	f990 3007 	ldrsb.w	r3, [r0, #7]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d03f      	beq.n	800b3da <findAxis+0xce>
 800b35a:	3301      	adds	r3, #1
 800b35c:	d10a      	bne.n	800b374 <findAxis+0x68>
 800b35e:	2364      	movs	r3, #100	; 0x64
 800b360:	704b      	strb	r3, [r1, #1]
 800b362:	e007      	b.n	800b374 <findAxis+0x68>
 800b364:	2365      	movs	r3, #101	; 0x65
 800b366:	700b      	strb	r3, [r1, #0]
 800b368:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d1e8      	bne.n	800b342 <findAxis+0x36>
 800b370:	2365      	movs	r3, #101	; 0x65
 800b372:	704b      	strb	r3, [r1, #1]
 800b374:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d010      	beq.n	800b39e <findAxis+0x92>
 800b37c:	3301      	adds	r3, #1
 800b37e:	d014      	beq.n	800b3aa <findAxis+0x9e>
 800b380:	f990 3005 	ldrsb.w	r3, [r0, #5]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d022      	beq.n	800b3ce <findAxis+0xc2>
 800b388:	3301      	adds	r3, #1
 800b38a:	d011      	beq.n	800b3b0 <findAxis+0xa4>
 800b38c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d025      	beq.n	800b3e0 <findAxis+0xd4>
 800b394:	3301      	adds	r3, #1
 800b396:	bf04      	itt	eq
 800b398:	2364      	moveq	r3, #100	; 0x64
 800b39a:	708b      	strbeq	r3, [r1, #2]
 800b39c:	4770      	bx	lr
 800b39e:	2365      	movs	r3, #101	; 0x65
 800b3a0:	708b      	strb	r3, [r1, #2]
 800b3a2:	4770      	bx	lr
 800b3a4:	2377      	movs	r3, #119	; 0x77
 800b3a6:	704b      	strb	r3, [r1, #1]
 800b3a8:	e7e4      	b.n	800b374 <findAxis+0x68>
 800b3aa:	2377      	movs	r3, #119	; 0x77
 800b3ac:	708b      	strb	r3, [r1, #2]
 800b3ae:	4770      	bx	lr
 800b3b0:	2373      	movs	r3, #115	; 0x73
 800b3b2:	708b      	strb	r3, [r1, #2]
 800b3b4:	4770      	bx	lr
 800b3b6:	2373      	movs	r3, #115	; 0x73
 800b3b8:	700b      	strb	r3, [r1, #0]
 800b3ba:	e7be      	b.n	800b33a <findAxis+0x2e>
 800b3bc:	2373      	movs	r3, #115	; 0x73
 800b3be:	704b      	strb	r3, [r1, #1]
 800b3c0:	e7d8      	b.n	800b374 <findAxis+0x68>
 800b3c2:	236e      	movs	r3, #110	; 0x6e
 800b3c4:	704b      	strb	r3, [r1, #1]
 800b3c6:	e7d5      	b.n	800b374 <findAxis+0x68>
 800b3c8:	236e      	movs	r3, #110	; 0x6e
 800b3ca:	700b      	strb	r3, [r1, #0]
 800b3cc:	e7b5      	b.n	800b33a <findAxis+0x2e>
 800b3ce:	236e      	movs	r3, #110	; 0x6e
 800b3d0:	708b      	strb	r3, [r1, #2]
 800b3d2:	4770      	bx	lr
 800b3d4:	2375      	movs	r3, #117	; 0x75
 800b3d6:	700b      	strb	r3, [r1, #0]
 800b3d8:	e7af      	b.n	800b33a <findAxis+0x2e>
 800b3da:	2375      	movs	r3, #117	; 0x75
 800b3dc:	704b      	strb	r3, [r1, #1]
 800b3de:	e7c9      	b.n	800b374 <findAxis+0x68>
 800b3e0:	2375      	movs	r3, #117	; 0x75
 800b3e2:	708b      	strb	r3, [r1, #2]
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop

0800b3e8 <findDirection>:
 800b3e8:	b5d0      	push	{r4, r6, r7, lr}
 800b3ea:	ed2d 8b04 	vpush	{d8-d9}
 800b3ee:	eef0 8ac0 	vabs.f32	s17, s0
 800b3f2:	eeb0 8ae0 	vabs.f32	s16, s1
 800b3f6:	eef4 8ac8 	vcmpe.f32	s17, s16
 800b3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fe:	4604      	mov	r4, r0
 800b400:	eeb0 9ac1 	vabs.f32	s18, s2
 800b404:	dd36      	ble.n	800b474 <findDirection+0x8c>
 800b406:	eef4 8ac9 	vcmpe.f32	s17, s18
 800b40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40e:	dd31      	ble.n	800b474 <findDirection+0x8c>
 800b410:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b418:	ee18 0a90 	vmov	r0, s17
 800b41c:	f340 8094 	ble.w	800b548 <findDirection+0x160>
 800b420:	f7f5 f892 	bl	8000548 <__aeabi_f2d>
 800b424:	4606      	mov	r6, r0
 800b426:	ee18 0a10 	vmov	r0, s16
 800b42a:	460f      	mov	r7, r1
 800b42c:	f7f5 f88c 	bl	8000548 <__aeabi_f2d>
 800b430:	a387      	add	r3, pc, #540	; (adr r3, 800b650 <findDirection+0x268>)
 800b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b436:	f7f5 f8df 	bl	80005f8 <__aeabi_dmul>
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	4630      	mov	r0, r6
 800b440:	4639      	mov	r1, r7
 800b442:	f7f5 fb69 	bl	8000b18 <__aeabi_dcmpgt>
 800b446:	b188      	cbz	r0, 800b46c <findDirection+0x84>
 800b448:	ee19 0a10 	vmov	r0, s18
 800b44c:	f7f5 f87c 	bl	8000548 <__aeabi_f2d>
 800b450:	a37f      	add	r3, pc, #508	; (adr r3, 800b650 <findDirection+0x268>)
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	f7f5 f8cf 	bl	80005f8 <__aeabi_dmul>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4630      	mov	r0, r6
 800b460:	4639      	mov	r1, r7
 800b462:	f7f5 fb59 	bl	8000b18 <__aeabi_dcmpgt>
 800b466:	2800      	cmp	r0, #0
 800b468:	bf18      	it	ne
 800b46a:	2404      	movne	r4, #4
 800b46c:	ecbd 8b04 	vpop	{d8-d9}
 800b470:	4620      	mov	r0, r4
 800b472:	bdd0      	pop	{r4, r6, r7, pc}
 800b474:	eeb4 8ac9 	vcmpe.f32	s16, s18
 800b478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47c:	dd32      	ble.n	800b4e4 <findDirection+0xfc>
 800b47e:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800b482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b486:	ee18 0a10 	vmov	r0, s16
 800b48a:	f340 8086 	ble.w	800b59a <findDirection+0x1b2>
 800b48e:	f7f5 f85b 	bl	8000548 <__aeabi_f2d>
 800b492:	4606      	mov	r6, r0
 800b494:	ee18 0a90 	vmov	r0, s17
 800b498:	460f      	mov	r7, r1
 800b49a:	f7f5 f855 	bl	8000548 <__aeabi_f2d>
 800b49e:	a36c      	add	r3, pc, #432	; (adr r3, 800b650 <findDirection+0x268>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f5 f8a8 	bl	80005f8 <__aeabi_dmul>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4630      	mov	r0, r6
 800b4ae:	4639      	mov	r1, r7
 800b4b0:	f7f5 fb32 	bl	8000b18 <__aeabi_dcmpgt>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d0d9      	beq.n	800b46c <findDirection+0x84>
 800b4b8:	ee19 0a10 	vmov	r0, s18
 800b4bc:	f7f5 f844 	bl	8000548 <__aeabi_f2d>
 800b4c0:	a363      	add	r3, pc, #396	; (adr r3, 800b650 <findDirection+0x268>)
 800b4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c6:	f7f5 f897 	bl	80005f8 <__aeabi_dmul>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	4639      	mov	r1, r7
 800b4d2:	f7f5 fb21 	bl	8000b18 <__aeabi_dcmpgt>
 800b4d6:	ecbd 8b04 	vpop	{d8-d9}
 800b4da:	2800      	cmp	r0, #0
 800b4dc:	bf18      	it	ne
 800b4de:	2401      	movne	r4, #1
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	bdd0      	pop	{r4, r6, r7, pc}
 800b4e4:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ec:	ee19 0a10 	vmov	r0, s18
 800b4f0:	dd7f      	ble.n	800b5f2 <findDirection+0x20a>
 800b4f2:	f7f5 f829 	bl	8000548 <__aeabi_f2d>
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	ee18 0a10 	vmov	r0, s16
 800b4fc:	460f      	mov	r7, r1
 800b4fe:	f7f5 f823 	bl	8000548 <__aeabi_f2d>
 800b502:	a353      	add	r3, pc, #332	; (adr r3, 800b650 <findDirection+0x268>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f5 f876 	bl	80005f8 <__aeabi_dmul>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4630      	mov	r0, r6
 800b512:	4639      	mov	r1, r7
 800b514:	f7f5 fb00 	bl	8000b18 <__aeabi_dcmpgt>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d0a7      	beq.n	800b46c <findDirection+0x84>
 800b51c:	ee18 0a90 	vmov	r0, s17
 800b520:	f7f5 f812 	bl	8000548 <__aeabi_f2d>
 800b524:	a34a      	add	r3, pc, #296	; (adr r3, 800b650 <findDirection+0x268>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	f7f5 f865 	bl	80005f8 <__aeabi_dmul>
 800b52e:	4602      	mov	r2, r0
 800b530:	460b      	mov	r3, r1
 800b532:	4630      	mov	r0, r6
 800b534:	4639      	mov	r1, r7
 800b536:	f7f5 faef 	bl	8000b18 <__aeabi_dcmpgt>
 800b53a:	ecbd 8b04 	vpop	{d8-d9}
 800b53e:	2800      	cmp	r0, #0
 800b540:	bf18      	it	ne
 800b542:	2400      	movne	r4, #0
 800b544:	4620      	mov	r0, r4
 800b546:	bdd0      	pop	{r4, r6, r7, pc}
 800b548:	f7f4 fffe 	bl	8000548 <__aeabi_f2d>
 800b54c:	4606      	mov	r6, r0
 800b54e:	ee18 0a10 	vmov	r0, s16
 800b552:	460f      	mov	r7, r1
 800b554:	f7f4 fff8 	bl	8000548 <__aeabi_f2d>
 800b558:	a33d      	add	r3, pc, #244	; (adr r3, 800b650 <findDirection+0x268>)
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	f7f5 f84b 	bl	80005f8 <__aeabi_dmul>
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4630      	mov	r0, r6
 800b568:	4639      	mov	r1, r7
 800b56a:	f7f5 fad5 	bl	8000b18 <__aeabi_dcmpgt>
 800b56e:	2800      	cmp	r0, #0
 800b570:	f43f af7c 	beq.w	800b46c <findDirection+0x84>
 800b574:	ee19 0a10 	vmov	r0, s18
 800b578:	f7f4 ffe6 	bl	8000548 <__aeabi_f2d>
 800b57c:	a334      	add	r3, pc, #208	; (adr r3, 800b650 <findDirection+0x268>)
 800b57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b582:	f7f5 f839 	bl	80005f8 <__aeabi_dmul>
 800b586:	4602      	mov	r2, r0
 800b588:	460b      	mov	r3, r1
 800b58a:	4630      	mov	r0, r6
 800b58c:	4639      	mov	r1, r7
 800b58e:	f7f5 fac3 	bl	8000b18 <__aeabi_dcmpgt>
 800b592:	2800      	cmp	r0, #0
 800b594:	bf18      	it	ne
 800b596:	2405      	movne	r4, #5
 800b598:	e768      	b.n	800b46c <findDirection+0x84>
 800b59a:	f7f4 ffd5 	bl	8000548 <__aeabi_f2d>
 800b59e:	4606      	mov	r6, r0
 800b5a0:	ee18 0a90 	vmov	r0, s17
 800b5a4:	460f      	mov	r7, r1
 800b5a6:	f7f4 ffcf 	bl	8000548 <__aeabi_f2d>
 800b5aa:	a329      	add	r3, pc, #164	; (adr r3, 800b650 <findDirection+0x268>)
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	f7f5 f822 	bl	80005f8 <__aeabi_dmul>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	f7f5 faac 	bl	8000b18 <__aeabi_dcmpgt>
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	f43f af53 	beq.w	800b46c <findDirection+0x84>
 800b5c6:	ee19 0a10 	vmov	r0, s18
 800b5ca:	f7f4 ffbd 	bl	8000548 <__aeabi_f2d>
 800b5ce:	a320      	add	r3, pc, #128	; (adr r3, 800b650 <findDirection+0x268>)
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f7f5 f810 	bl	80005f8 <__aeabi_dmul>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4630      	mov	r0, r6
 800b5de:	4639      	mov	r1, r7
 800b5e0:	f7f5 fa9a 	bl	8000b18 <__aeabi_dcmpgt>
 800b5e4:	ecbd 8b04 	vpop	{d8-d9}
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	bf18      	it	ne
 800b5ec:	2403      	movne	r4, #3
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	bdd0      	pop	{r4, r6, r7, pc}
 800b5f2:	f7f4 ffa9 	bl	8000548 <__aeabi_f2d>
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	ee18 0a10 	vmov	r0, s16
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	f7f4 ffa3 	bl	8000548 <__aeabi_f2d>
 800b602:	a313      	add	r3, pc, #76	; (adr r3, 800b650 <findDirection+0x268>)
 800b604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b608:	f7f4 fff6 	bl	80005f8 <__aeabi_dmul>
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	4630      	mov	r0, r6
 800b612:	4639      	mov	r1, r7
 800b614:	f7f5 fa80 	bl	8000b18 <__aeabi_dcmpgt>
 800b618:	2800      	cmp	r0, #0
 800b61a:	f43f af27 	beq.w	800b46c <findDirection+0x84>
 800b61e:	ee18 0a90 	vmov	r0, s17
 800b622:	f7f4 ff91 	bl	8000548 <__aeabi_f2d>
 800b626:	a30a      	add	r3, pc, #40	; (adr r3, 800b650 <findDirection+0x268>)
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f7f4 ffe4 	bl	80005f8 <__aeabi_dmul>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4630      	mov	r0, r6
 800b636:	4639      	mov	r1, r7
 800b638:	f7f5 fa6e 	bl	8000b18 <__aeabi_dcmpgt>
 800b63c:	ecbd 8b04 	vpop	{d8-d9}
 800b640:	2800      	cmp	r0, #0
 800b642:	bf18      	it	ne
 800b644:	2402      	movne	r4, #2
 800b646:	4620      	mov	r0, r4
 800b648:	bdd0      	pop	{r4, r6, r7, pc}
 800b64a:	bf00      	nop
 800b64c:	f3af 8000 	nop.w
 800b650:	e0000000 	.word	0xe0000000
 800b654:	3ff6b851 	.word	0x3ff6b851

0800b658 <updateOrientation>:
 800b658:	b410      	push	{r4}
 800b65a:	2300      	movs	r3, #0
 800b65c:	6003      	str	r3, [r0, #0]
 800b65e:	6043      	str	r3, [r0, #4]
 800b660:	7203      	strb	r3, [r0, #8]
 800b662:	780c      	ldrb	r4, [r1, #0]
 800b664:	784a      	ldrb	r2, [r1, #1]
 800b666:	f1a4 0342 	sub.w	r3, r4, #66	; 0x42
 800b66a:	2b17      	cmp	r3, #23
 800b66c:	bf98      	it	ls
 800b66e:	3420      	addls	r4, #32
 800b670:	f1a2 0342 	sub.w	r3, r2, #66	; 0x42
 800b674:	bf98      	it	ls
 800b676:	b2e4      	uxtbls	r4, r4
 800b678:	2b17      	cmp	r3, #23
 800b67a:	788b      	ldrb	r3, [r1, #2]
 800b67c:	bf98      	it	ls
 800b67e:	3220      	addls	r2, #32
 800b680:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 800b684:	bf98      	it	ls
 800b686:	b2d2      	uxtbls	r2, r2
 800b688:	2917      	cmp	r1, #23
 800b68a:	bf98      	it	ls
 800b68c:	3320      	addls	r3, #32
 800b68e:	f1a4 0464 	sub.w	r4, r4, #100	; 0x64
 800b692:	bf98      	it	ls
 800b694:	b2db      	uxtbls	r3, r3
 800b696:	2c13      	cmp	r4, #19
 800b698:	d80d      	bhi.n	800b6b6 <updateOrientation+0x5e>
 800b69a:	e8df f004 	tbb	[pc, r4]
 800b69e:	0a36      	.short	0x0a36
 800b6a0:	0c0c0c0c 	.word	0x0c0c0c0c
 800b6a4:	0c0c0c0c 	.word	0x0c0c0c0c
 800b6a8:	0c0c0c39 	.word	0x0c0c0c39
 800b6ac:	3f0c3c0c 	.word	0x3f0c3c0c
 800b6b0:	420c      	.short	0x420c
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	7001      	strb	r1, [r0, #0]
 800b6b6:	3a64      	subs	r2, #100	; 0x64
 800b6b8:	2a13      	cmp	r2, #19
 800b6ba:	d80d      	bhi.n	800b6d8 <updateOrientation+0x80>
 800b6bc:	e8df f002 	tbb	[pc, r2]
 800b6c0:	0c0c0a34 	.word	0x0c0c0a34
 800b6c4:	0c0c0c0c 	.word	0x0c0c0c0c
 800b6c8:	0c370c0c 	.word	0x0c370c0c
 800b6cc:	3a0c0c0c 	.word	0x3a0c0c0c
 800b6d0:	400c3d0c 	.word	0x400c3d0c
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	7042      	strb	r2, [r0, #1]
 800b6d8:	3b64      	subs	r3, #100	; 0x64
 800b6da:	2b13      	cmp	r3, #19
 800b6dc:	d80d      	bhi.n	800b6fa <updateOrientation+0xa2>
 800b6de:	e8df f003 	tbb	[pc, r3]
 800b6e2:	320a      	.short	0x320a
 800b6e4:	0c0c0c0c 	.word	0x0c0c0c0c
 800b6e8:	0c0c0c0c 	.word	0x0c0c0c0c
 800b6ec:	0c0c0c37 	.word	0x0c0c0c37
 800b6f0:	410c3c0c 	.word	0x410c3c0c
 800b6f4:	0f0c      	.short	0x0f0c
 800b6f6:	23ff      	movs	r3, #255	; 0xff
 800b6f8:	7203      	strb	r3, [r0, #8]
 800b6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	23ff      	movs	r3, #255	; 0xff
 800b702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b706:	7083      	strb	r3, [r0, #2]
 800b708:	4770      	bx	lr
 800b70a:	21ff      	movs	r1, #255	; 0xff
 800b70c:	7181      	strb	r1, [r0, #6]
 800b70e:	e7d2      	b.n	800b6b6 <updateOrientation+0x5e>
 800b710:	2101      	movs	r1, #1
 800b712:	70c1      	strb	r1, [r0, #3]
 800b714:	e7cf      	b.n	800b6b6 <updateOrientation+0x5e>
 800b716:	21ff      	movs	r1, #255	; 0xff
 800b718:	70c1      	strb	r1, [r0, #3]
 800b71a:	e7cc      	b.n	800b6b6 <updateOrientation+0x5e>
 800b71c:	2101      	movs	r1, #1
 800b71e:	7181      	strb	r1, [r0, #6]
 800b720:	e7c9      	b.n	800b6b6 <updateOrientation+0x5e>
 800b722:	21ff      	movs	r1, #255	; 0xff
 800b724:	7001      	strb	r1, [r0, #0]
 800b726:	e7c6      	b.n	800b6b6 <updateOrientation+0x5e>
 800b728:	22ff      	movs	r2, #255	; 0xff
 800b72a:	71c2      	strb	r2, [r0, #7]
 800b72c:	e7d4      	b.n	800b6d8 <updateOrientation+0x80>
 800b72e:	2201      	movs	r2, #1
 800b730:	7102      	strb	r2, [r0, #4]
 800b732:	e7d1      	b.n	800b6d8 <updateOrientation+0x80>
 800b734:	22ff      	movs	r2, #255	; 0xff
 800b736:	7102      	strb	r2, [r0, #4]
 800b738:	e7ce      	b.n	800b6d8 <updateOrientation+0x80>
 800b73a:	2201      	movs	r2, #1
 800b73c:	71c2      	strb	r2, [r0, #7]
 800b73e:	e7cb      	b.n	800b6d8 <updateOrientation+0x80>
 800b740:	22ff      	movs	r2, #255	; 0xff
 800b742:	7042      	strb	r2, [r0, #1]
 800b744:	e7c8      	b.n	800b6d8 <updateOrientation+0x80>
 800b746:	2301      	movs	r3, #1
 800b748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b74c:	7083      	strb	r3, [r0, #2]
 800b74e:	4770      	bx	lr
 800b750:	2301      	movs	r3, #1
 800b752:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b756:	7143      	strb	r3, [r0, #5]
 800b758:	4770      	bx	lr
 800b75a:	23ff      	movs	r3, #255	; 0xff
 800b75c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b760:	7143      	strb	r3, [r0, #5]
 800b762:	4770      	bx	lr
 800b764:	2301      	movs	r3, #1
 800b766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b76a:	7203      	strb	r3, [r0, #8]
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop

0800b770 <qmult>:
 800b770:	ed91 2a03 	vldr	s4, [r1, #12]
 800b774:	ed90 3a01 	vldr	s6, [r0, #4]
 800b778:	edd0 5a02 	vldr	s11, [r0, #8]
 800b77c:	edd1 4a01 	vldr	s9, [r1, #4]
 800b780:	ed90 4a00 	vldr	s8, [r0]
 800b784:	edd1 3a00 	vldr	s7, [r1]
 800b788:	ed91 5a02 	vldr	s10, [r1, #8]
 800b78c:	edd0 2a03 	vldr	s5, [r0, #12]
 800b790:	ee25 6aa4 	vmul.f32	s12, s11, s9
 800b794:	ee62 6a03 	vmul.f32	s13, s4, s6
 800b798:	ee22 7a25 	vmul.f32	s14, s4, s11
 800b79c:	ee64 7ac3 	vnmul.f32	s15, s9, s6
 800b7a0:	eea4 6a02 	vfma.f32	s12, s8, s4
 800b7a4:	eee4 6a05 	vfma.f32	s13, s8, s10
 800b7a8:	eea3 7a23 	vfma.f32	s14, s6, s7
 800b7ac:	eee4 7a63 	vfms.f32	s15, s8, s7
 800b7b0:	eea2 6aa3 	vfma.f32	s12, s5, s7
 800b7b4:	eee4 6aa2 	vfma.f32	s13, s9, s5
 800b7b8:	eea5 7a22 	vfma.f32	s14, s10, s5
 800b7bc:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b7c0:	eea3 6a45 	vfms.f32	s12, s6, s10
 800b7c4:	eee5 6ae3 	vfms.f32	s13, s11, s7
 800b7c8:	eea4 7a64 	vfms.f32	s14, s8, s9
 800b7cc:	eee5 7a65 	vfms.f32	s15, s10, s11
 800b7d0:	ed82 6a00 	vstr	s12, [r2]
 800b7d4:	edc2 6a01 	vstr	s13, [r2, #4]
 800b7d8:	ed82 7a02 	vstr	s14, [r2, #8]
 800b7dc:	edc2 7a03 	vstr	s15, [r2, #12]
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop

0800b7e4 <MEMS_setMagIndexToOne>:
 800b7e4:	291f      	cmp	r1, #31
 800b7e6:	b430      	push	{r4, r5}
 800b7e8:	d920      	bls.n	800b82c <MEMS_setMagIndexToOne+0x48>
 800b7ea:	6885      	ldr	r5, [r0, #8]
 800b7ec:	3920      	subs	r1, #32
 800b7ee:	2401      	movs	r4, #1
 800b7f0:	fa04 f101 	lsl.w	r1, r4, r1
 800b7f4:	ea21 0105 	bic.w	r1, r1, r5
 800b7f8:	4069      	eors	r1, r5
 800b7fa:	2a1f      	cmp	r2, #31
 800b7fc:	6081      	str	r1, [r0, #8]
 800b7fe:	d91f      	bls.n	800b840 <MEMS_setMagIndexToOne+0x5c>
 800b800:	6901      	ldr	r1, [r0, #16]
 800b802:	f1a2 0420 	sub.w	r4, r2, #32
 800b806:	2201      	movs	r2, #1
 800b808:	40a2      	lsls	r2, r4
 800b80a:	ea22 0201 	bic.w	r2, r2, r1
 800b80e:	404a      	eors	r2, r1
 800b810:	2b1f      	cmp	r3, #31
 800b812:	6102      	str	r2, [r0, #16]
 800b814:	d91e      	bls.n	800b854 <MEMS_setMagIndexToOne+0x70>
 800b816:	69c2      	ldr	r2, [r0, #28]
 800b818:	f1a3 0120 	sub.w	r1, r3, #32
 800b81c:	2301      	movs	r3, #1
 800b81e:	408b      	lsls	r3, r1
 800b820:	ea23 0302 	bic.w	r3, r3, r2
 800b824:	4053      	eors	r3, r2
 800b826:	bc30      	pop	{r4, r5}
 800b828:	61c3      	str	r3, [r0, #28]
 800b82a:	4770      	bx	lr
 800b82c:	68c5      	ldr	r5, [r0, #12]
 800b82e:	2401      	movs	r4, #1
 800b830:	fa04 f101 	lsl.w	r1, r4, r1
 800b834:	ea21 0105 	bic.w	r1, r1, r5
 800b838:	4069      	eors	r1, r5
 800b83a:	2a1f      	cmp	r2, #31
 800b83c:	60c1      	str	r1, [r0, #12]
 800b83e:	d8df      	bhi.n	800b800 <MEMS_setMagIndexToOne+0x1c>
 800b840:	6944      	ldr	r4, [r0, #20]
 800b842:	2101      	movs	r1, #1
 800b844:	fa01 f202 	lsl.w	r2, r1, r2
 800b848:	ea22 0204 	bic.w	r2, r2, r4
 800b84c:	4062      	eors	r2, r4
 800b84e:	2b1f      	cmp	r3, #31
 800b850:	6142      	str	r2, [r0, #20]
 800b852:	d8e0      	bhi.n	800b816 <MEMS_setMagIndexToOne+0x32>
 800b854:	6981      	ldr	r1, [r0, #24]
 800b856:	2201      	movs	r2, #1
 800b858:	fa02 f303 	lsl.w	r3, r2, r3
 800b85c:	ea23 0301 	bic.w	r3, r3, r1
 800b860:	404b      	eors	r3, r1
 800b862:	bc30      	pop	{r4, r5}
 800b864:	6183      	str	r3, [r0, #24]
 800b866:	4770      	bx	lr

0800b868 <getRotationMatrix>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4605      	mov	r5, r0
 800b86c:	460c      	mov	r4, r1
 800b86e:	4610      	mov	r0, r2
 800b870:	2100      	movs	r1, #0
 800b872:	2224      	movs	r2, #36	; 0x24
 800b874:	f00b fdf4 	bl	8017460 <memset>
 800b878:	edd5 5a00 	vldr	s11, [r5]
 800b87c:	ed9f 3a49 	vldr	s6, [pc, #292]	; 800b9a4 <getRotationMatrix+0x13c>
 800b880:	edc0 5a02 	vstr	s11, [r0, #8]
 800b884:	ed95 7a01 	vldr	s14, [r5, #4]
 800b888:	ed80 7a05 	vstr	s14, [r0, #20]
 800b88c:	ed95 5a02 	vldr	s10, [r5, #8]
 800b890:	ed80 5a08 	vstr	s10, [r0, #32]
 800b894:	ed94 4a02 	vldr	s8, [r4, #8]
 800b898:	edd4 3a01 	vldr	s7, [r4, #4]
 800b89c:	edd4 4a00 	vldr	s9, [r4]
 800b8a0:	ee67 7a44 	vnmul.f32	s15, s14, s8
 800b8a4:	ee65 6ae3 	vnmul.f32	s13, s11, s7
 800b8a8:	eee3 7a85 	vfma.f32	s15, s7, s10
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	eee4 6a87 	vfma.f32	s13, s9, s14
 800b8b2:	eeb0 7ae7 	vabs.f32	s14, s15
 800b8b6:	eeb4 7ac3 	vcmpe.f32	s14, s6
 800b8ba:	ee25 6a64 	vnmul.f32	s12, s10, s9
 800b8be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c2:	eea4 6a25 	vfma.f32	s12, s8, s11
 800b8c6:	bfdc      	itt	le
 800b8c8:	eec7 5a83 	vdivle.f32	s11, s15, s6
 800b8cc:	eeb0 7a43 	vmovle.f32	s14, s6
 800b8d0:	eeb0 5ac6 	vabs.f32	s10, s12
 800b8d4:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b8d8:	edc0 6a06 	vstr	s13, [r0, #24]
 800b8dc:	bfd4      	ite	le
 800b8de:	ee65 6aa5 	vmulle.f32	s13, s11, s11
 800b8e2:	eef7 6a00 	vmovgt.f32	s13, #112	; 0x3f800000  1.0
 800b8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ea:	ed80 6a03 	vstr	s12, [r0, #12]
 800b8ee:	edc0 7a00 	vstr	s15, [r0]
 800b8f2:	d447      	bmi.n	800b984 <getRotationMatrix+0x11c>
 800b8f4:	eec6 5a07 	vdiv.f32	s11, s12, s14
 800b8f8:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800b8fc:	eef0 5a66 	vmov.f32	s11, s13
 800b900:	edd3 6a06 	vldr	s13, [r3, #24]
 800b904:	eeb0 5ae6 	vabs.f32	s10, s13
 800b908:	eeb4 7ac5 	vcmpe.f32	s14, s10
 800b90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b910:	d543      	bpl.n	800b99a <getRotationMatrix+0x132>
 800b912:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b916:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800b91a:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b91e:	eeb0 7a45 	vmov.f32	s14, s10
 800b922:	eea5 4aa4 	vfma.f32	s8, s11, s9
 800b926:	eef0 5a44 	vmov.f32	s11, s8
 800b92a:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800b92e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 800b932:	ee65 5a07 	vmul.f32	s11, s10, s14
 800b936:	edd3 3a08 	vldr	s7, [r3, #32]
 800b93a:	edd3 4a02 	vldr	s9, [r3, #8]
 800b93e:	ed93 4a05 	vldr	s8, [r3, #20]
 800b942:	ee83 7a25 	vdiv.f32	s14, s6, s11
 800b946:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b94a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b94e:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b952:	ee66 5a63 	vnmul.f32	s11, s12, s7
 800b956:	ee24 5ac7 	vnmul.f32	s10, s9, s14
 800b95a:	ee67 6ac4 	vnmul.f32	s13, s15, s8
 800b95e:	eea3 5aa7 	vfma.f32	s10, s7, s15
 800b962:	eee4 5a07 	vfma.f32	s11, s8, s14
 800b966:	eee6 6a24 	vfma.f32	s13, s12, s9
 800b96a:	edc3 7a00 	vstr	s15, [r3]
 800b96e:	ed83 6a03 	vstr	s12, [r3, #12]
 800b972:	ed83 7a06 	vstr	s14, [r3, #24]
 800b976:	ed83 5a04 	vstr	s10, [r3, #16]
 800b97a:	edc3 5a01 	vstr	s11, [r3, #4]
 800b97e:	edc3 6a07 	vstr	s13, [r3, #28]
 800b982:	bd38      	pop	{r3, r4, r5, pc}
 800b984:	eec7 4a05 	vdiv.f32	s9, s14, s10
 800b988:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b98c:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800b990:	eeb0 7a45 	vmov.f32	s14, s10
 800b994:	eee6 5aa4 	vfma.f32	s11, s13, s9
 800b998:	e7b2      	b.n	800b900 <getRotationMatrix+0x98>
 800b99a:	ee86 5a87 	vdiv.f32	s10, s13, s14
 800b99e:	eee5 5a05 	vfma.f32	s11, s10, s10
 800b9a2:	e7c2      	b.n	800b92a <getRotationMatrix+0xc2>
 800b9a4:	00000000 	.word	0x00000000

0800b9a8 <b_dcm2q>:
 800b9a8:	ed90 5a08 	vldr	s10, [r0, #32]
 800b9ac:	edd0 7a00 	vldr	s15, [r0]
 800b9b0:	edd0 6a04 	vldr	s13, [r0, #16]
 800b9b4:	ee37 7a85 	vadd.f32	s14, s15, s10
 800b9b8:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800b9bc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b9c0:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800b9c4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800b9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9cc:	bfc5      	ittet	gt
 800b9ce:	eeb7 6a00 	vmovgt.f32	s12, #112	; 0x3f800000  1.0
 800b9d2:	ee37 7a06 	vaddgt.f32	s14, s14, s12
 800b9d6:	eddf 5a43 	vldrle	s11, [pc, #268]	; 800bae4 <b_dcm2q+0x13c>
 800b9da:	eef1 5ac7 	vsqrtgt.f32	s11, s14
 800b9de:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800b9e2:	ee35 6a47 	vsub.f32	s12, s10, s14
 800b9e6:	ee35 7a07 	vadd.f32	s14, s10, s14
 800b9ea:	eeb4 6ae4 	vcmpe.f32	s12, s9
 800b9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f2:	bfc5      	ittet	gt
 800b9f4:	eef7 4a00 	vmovgt.f32	s9, #112	; 0x3f800000  1.0
 800b9f8:	ee76 4a24 	vaddgt.f32	s9, s12, s9
 800b9fc:	ed9f 6a39 	vldrle	s12, [pc, #228]	; 800bae4 <b_dcm2q+0x13c>
 800ba00:	eeb1 6ae4 	vsqrtgt.f32	s12, s9
 800ba04:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
 800ba08:	eeb4 7ae4 	vcmpe.f32	s14, s9
 800ba0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba10:	dd5b      	ble.n	800baca <b_dcm2q+0x122>
 800ba12:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800ba16:	ee37 7a24 	vadd.f32	s14, s14, s9
 800ba1a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800ba1e:	eef1 4ac7 	vsqrt.f32	s9, s14
 800ba22:	ee64 4a84 	vmul.f32	s9, s9, s8
 800ba26:	ee76 6a85 	vadd.f32	s13, s13, s10
 800ba2a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ba2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba32:	edd0 6a07 	vldr	s13, [r0, #28]
 800ba36:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba3e:	bf85      	ittet	hi
 800ba40:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800ba44:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800ba48:	ed9f 7a26 	vldrls	s14, [pc, #152]	; 800bae4 <b_dcm2q+0x13c>
 800ba4c:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800ba50:	edd0 7a05 	vldr	s15, [r0, #20]
 800ba54:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba60:	d43c      	bmi.n	800badc <b_dcm2q+0x134>
 800ba62:	bfd8      	it	le
 800ba64:	ee27 7a27 	vmulle.f32	s14, s14, s15
 800ba68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba70:	ed81 7a00 	vstr	s14, [r1]
 800ba74:	edd0 7a06 	vldr	s15, [r0, #24]
 800ba78:	ed90 7a02 	vldr	s14, [r0, #8]
 800ba7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba88:	d425      	bmi.n	800bad6 <b_dcm2q+0x12e>
 800ba8a:	bfd8      	it	le
 800ba8c:	ee65 5aa7 	vmulle.f32	s11, s11, s15
 800ba90:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba94:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800ba98:	edc1 5a01 	vstr	s11, [r1, #4]
 800ba9c:	edd0 7a01 	vldr	s15, [r0, #4]
 800baa0:	ed90 7a03 	vldr	s14, [r0, #12]
 800baa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800baa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800baac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab0:	d40e      	bmi.n	800bad0 <b_dcm2q+0x128>
 800bab2:	bfd8      	it	le
 800bab4:	ee26 6a27 	vmulle.f32	s12, s12, s15
 800bab8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800babc:	ee26 6a27 	vmul.f32	s12, s12, s15
 800bac0:	edc1 4a03 	vstr	s9, [r1, #12]
 800bac4:	ed81 6a02 	vstr	s12, [r1, #8]
 800bac8:	4770      	bx	lr
 800baca:	eddf 4a06 	vldr	s9, [pc, #24]	; 800bae4 <b_dcm2q+0x13c>
 800bace:	e7aa      	b.n	800ba26 <b_dcm2q+0x7e>
 800bad0:	eeb1 6a46 	vneg.f32	s12, s12
 800bad4:	e7f0      	b.n	800bab8 <b_dcm2q+0x110>
 800bad6:	eef1 5a65 	vneg.f32	s11, s11
 800bada:	e7d9      	b.n	800ba90 <b_dcm2q+0xe8>
 800badc:	eeb1 7a47 	vneg.f32	s14, s14
 800bae0:	e7c2      	b.n	800ba68 <b_dcm2q+0xc0>
 800bae2:	bf00      	nop
 800bae4:	00000000 	.word	0x00000000

0800bae8 <q2hpr>:
 800bae8:	b510      	push	{r4, lr}
 800baea:	ed90 7a00 	vldr	s14, [r0]
 800baee:	edd0 6a01 	vldr	s13, [r0, #4]
 800baf2:	edd0 7a02 	vldr	s15, [r0, #8]
 800baf6:	ed90 5a03 	vldr	s10, [r0, #12]
 800bafa:	ed2d 8b0a 	vpush	{d8-d12}
 800bafe:	ee27 0a27 	vmul.f32	s0, s14, s15
 800bb02:	ee27 8a26 	vmul.f32	s16, s14, s13
 800bb06:	ee66 5aa7 	vmul.f32	s11, s13, s15
 800bb0a:	ee67 0a07 	vmul.f32	s1, s14, s14
 800bb0e:	ee26 aaa6 	vmul.f32	s20, s13, s13
 800bb12:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800bb16:	ee27 7a05 	vmul.f32	s14, s14, s10
 800bb1a:	ee66 6a85 	vmul.f32	s13, s13, s10
 800bb1e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bb22:	ee78 aa08 	vadd.f32	s21, s16, s16
 800bb26:	ee70 9aa0 	vadd.f32	s19, s1, s1
 800bb2a:	ee3a aa0a 	vadd.f32	s20, s20, s20
 800bb2e:	ee30 ca00 	vadd.f32	s24, s0, s0
 800bb32:	ee36 ba06 	vadd.f32	s22, s12, s12
 800bb36:	ee77 8a07 	vadd.f32	s17, s14, s14
 800bb3a:	ee75 baa5 	vadd.f32	s23, s11, s11
 800bb3e:	ee36 9aa6 	vadd.f32	s18, s13, s13
 800bb42:	ee37 8aa7 	vadd.f32	s16, s15, s15
 800bb46:	460c      	mov	r4, r1
 800bb48:	bb8a      	cbnz	r2, 800bbae <q2hpr+0xc6>
 800bb4a:	ee79 0a8b 	vadd.f32	s1, s19, s22
 800bb4e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800bb52:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bb56:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 800bb5a:	f009 ffa3 	bl	8015aa4 <atan2f>
 800bb5e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb62:	ed84 8a00 	vstr	s16, [r4]
 800bb66:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bb6a:	f009 ff69 	bl	8015a40 <asinf>
 800bb6e:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bb72:	eef0 8a40 	vmov.f32	s17, s0
 800bb76:	ee7b 0a60 	vsub.f32	s1, s22, s1
 800bb7a:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bb7e:	f009 ff91 	bl	8015aa4 <atan2f>
 800bb82:	eef1 8a68 	vneg.f32	s17, s17
 800bb86:	eeb0 9a40 	vmov.f32	s18, s0
 800bb8a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb92:	ed84 9a02 	vstr	s18, [r4, #8]
 800bb96:	edc4 8a01 	vstr	s17, [r4, #4]
 800bb9a:	d505      	bpl.n	800bba8 <q2hpr+0xc0>
 800bb9c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800bbf4 <q2hpr+0x10c>
 800bba0:	ee38 8a00 	vadd.f32	s16, s16, s0
 800bba4:	ed84 8a00 	vstr	s16, [r4]
 800bba8:	ecbd 8b0a 	vpop	{d8-d12}
 800bbac:	bd10      	pop	{r4, pc}
 800bbae:	ee3c 0a49 	vsub.f32	s0, s24, s18
 800bbb2:	f009 ff45 	bl	8015a40 <asinf>
 800bbb6:	ee79 0a8a 	vadd.f32	s1, s19, s20
 800bbba:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800bbbe:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bbc2:	eeb0 9a40 	vmov.f32	s18, s0
 800bbc6:	ee38 0aab 	vadd.f32	s0, s17, s23
 800bbca:	f009 ff6b 	bl	8015aa4 <atan2f>
 800bbce:	ee3a 8a88 	vadd.f32	s16, s21, s16
 800bbd2:	ee7a 0a0b 	vadd.f32	s1, s20, s22
 800bbd6:	eef0 8a40 	vmov.f32	s17, s0
 800bbda:	ee79 0ae0 	vsub.f32	s1, s19, s1
 800bbde:	eeb1 0a48 	vneg.f32	s0, s16
 800bbe2:	f009 ff5f 	bl	8015aa4 <atan2f>
 800bbe6:	eef1 8a68 	vneg.f32	s17, s17
 800bbea:	eeb0 8a40 	vmov.f32	s16, s0
 800bbee:	ed84 0a00 	vstr	s0, [r4]
 800bbf2:	e7ca      	b.n	800bb8a <q2hpr+0xa2>
 800bbf4:	40c90fdb 	.word	0x40c90fdb

0800bbf8 <llEvaluate.constprop.0>:
 800bbf8:	edd2 0a00 	vldr	s1, [r2]
 800bbfc:	ed90 1a00 	vldr	s2, [r0]
 800bc00:	edd0 1a04 	vldr	s3, [r0, #16]
 800bc04:	edd2 5a01 	vldr	s11, [r2, #4]
 800bc08:	ed90 6a08 	vldr	s12, [r0, #32]
 800bc0c:	ed90 2a05 	vldr	s4, [r0, #20]
 800bc10:	ed92 7a02 	vldr	s14, [r2, #8]
 800bc14:	ed90 3a09 	vldr	s6, [r0, #36]	; 0x24
 800bc18:	ed90 4a0a 	vldr	s8, [r0, #40]	; 0x28
 800bc1c:	edd0 2a0c 	vldr	s5, [r0, #48]	; 0x30
 800bc20:	edd2 7a03 	vldr	s15, [r2, #12]
 800bc24:	edd0 3a0d 	vldr	s7, [r0, #52]	; 0x34
 800bc28:	edd0 4a0e 	vldr	s9, [r0, #56]	; 0x38
 800bc2c:	ed90 5a0f 	vldr	s10, [r0, #60]	; 0x3c
 800bc30:	eec0 6a81 	vdiv.f32	s13, s1, s2
 800bc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc38:	b084      	sub	sp, #16
 800bc3a:	f10d 0810 	add.w	r8, sp, #16
 800bc3e:	2704      	movs	r7, #4
 800bc40:	f101 0510 	add.w	r5, r1, #16
 800bc44:	2f04      	cmp	r7, #4
 800bc46:	4686      	mov	lr, r0
 800bc48:	f04f 0c03 	mov.w	ip, #3
 800bc4c:	b27b      	sxtb	r3, r7
 800bc4e:	eee1 5ae6 	vfms.f32	s11, s3, s13
 800bc52:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800bc56:	ee85 6a82 	vdiv.f32	s12, s11, s4
 800bc5a:	eee6 7ae2 	vfms.f32	s15, s13, s5
 800bc5e:	eea6 7a43 	vfms.f32	s14, s12, s6
 800bc62:	edcd 6a00 	vstr	s13, [sp]
 800bc66:	eec7 6a04 	vdiv.f32	s13, s14, s8
 800bc6a:	eee6 7a63 	vfms.f32	s15, s12, s7
 800bc6e:	ed8d 6a01 	vstr	s12, [sp, #4]
 800bc72:	eee6 7ae4 	vfms.f32	s15, s13, s9
 800bc76:	edcd 6a02 	vstr	s13, [sp, #8]
 800bc7a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bc7e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bc82:	ed78 7a01 	vldmdb	r8!, {s15}
 800bc86:	ed65 7a01 	vstmdb	r5!, {s15}
 800bc8a:	d029      	beq.n	800bce0 <llEvaluate.constprop.0+0xe8>
 800bc8c:	ea4f 068c 	mov.w	r6, ip, lsl #2
 800bc90:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 800bc94:	4432      	add	r2, r6
 800bc96:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 800bc9a:	edd2 6a00 	vldr	s13, [r2]
 800bc9e:	ed94 7a00 	vldr	s14, [r4]
 800bca2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800bca6:	3301      	adds	r3, #1
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	2a04      	cmp	r2, #4
 800bcac:	b25b      	sxtb	r3, r3
 800bcae:	edc5 7a00 	vstr	s15, [r5]
 800bcb2:	d1ed      	bne.n	800bc90 <llEvaluate.constprop.0+0x98>
 800bcb4:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800bcb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bcbc:	f01c 0fff 	tst.w	ip, #255	; 0xff
 800bcc0:	ed85 7a00 	vstr	s14, [r5]
 800bcc4:	d013      	beq.n	800bcee <llEvaluate.constprop.0+0xf6>
 800bcc6:	3f01      	subs	r7, #1
 800bcc8:	b2ff      	uxtb	r7, r7
 800bcca:	ed78 7a01 	vldmdb	r8!, {s15}
 800bcce:	2f04      	cmp	r7, #4
 800bcd0:	f1ae 0e14 	sub.w	lr, lr, #20
 800bcd4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bcd8:	b27b      	sxtb	r3, r7
 800bcda:	ed65 7a01 	vstmdb	r5!, {s15}
 800bcde:	d1d5      	bne.n	800bc8c <llEvaluate.constprop.0+0x94>
 800bce0:	edde 6a0f 	vldr	s13, [lr, #60]	; 0x3c
 800bce4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bce8:	ed85 7a00 	vstr	s14, [r5]
 800bcec:	e7eb      	b.n	800bcc6 <llEvaluate.constprop.0+0xce>
 800bcee:	b004      	add	sp, #16
 800bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bcf4 <MEMS_updateMagBufferIndex>:
 800bcf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bcf8:	ed2d 8b02 	vpush	{d8}
 800bcfc:	7804      	ldrb	r4, [r0, #0]
 800bcfe:	7842      	ldrb	r2, [r0, #1]
 800bd00:	4606      	mov	r6, r0
 800bd02:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800bd06:	2300      	movs	r3, #0
 800bd08:	4294      	cmp	r4, r2
 800bd0a:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800bd0e:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800bd12:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800bd16:	b083      	sub	sp, #12
 800bd18:	460d      	mov	r5, r1
 800bd1a:	f100 0001 	add.w	r0, r0, #1
 800bd1e:	f000 8083 	beq.w	800be28 <MEMS_updateMagBufferIndex+0x134>
 800bd22:	1b00      	subs	r0, r0, r4
 800bd24:	fb90 f8f2 	sdiv	r8, r0, r2
 800bd28:	fb02 0018 	mls	r0, r2, r8, r0
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	bfb6      	itet	lt
 800bd30:	eb02 0800 	addlt.w	r8, r2, r0
 800bd34:	fa0f f880 	sxthge.w	r8, r0
 800bd38:	fa0f f888 	sxthlt.w	r8, r8
 800bd3c:	b934      	cbnz	r4, 800bd4c <MEMS_updateMagBufferIndex+0x58>
 800bd3e:	23ff      	movs	r3, #255	; 0xff
 800bd40:	70b3      	strb	r3, [r6, #2]
 800bd42:	b003      	add	sp, #12
 800bd44:	ecbd 8b02 	vpop	{d8}
 800bd48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bd50:	2700      	movs	r7, #0
 800bd52:	ee87 8a80 	vdiv.f32	s16, s15, s0
 800bd56:	463b      	mov	r3, r7
 800bd58:	e000      	b.n	800bd5c <MEMS_updateMagBufferIndex+0x68>
 800bd5a:	7872      	ldrb	r2, [r6, #1]
 800bd5c:	4443      	add	r3, r8
 800bd5e:	fb93 f4f2 	sdiv	r4, r3, r2
 800bd62:	fb02 3314 	mls	r3, r2, r4, r3
 800bd66:	b2dc      	uxtb	r4, r3
 800bd68:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800bd6c:	3701      	adds	r7, #1
 800bd6e:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 800bd72:	fb92 f3f5 	sdiv	r3, r2, r5
 800bd76:	fb05 2313 	mls	r3, r5, r3, r2
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	bfb8      	it	lt
 800bd7e:	195b      	addlt	r3, r3, r5
 800bd80:	b21b      	sxth	r3, r3
 800bd82:	ee00 3a10 	vmov	s0, r3
 800bd86:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bd8a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bd8e:	f009 fd5f 	bl	8015850 <roundf>
 800bd92:	f9b4 2024 	ldrsh.w	r2, [r4, #36]	; 0x24
 800bd96:	fb92 f3f5 	sdiv	r3, r2, r5
 800bd9a:	fb05 2313 	mls	r3, r5, r3, r2
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	bfb8      	it	lt
 800bda2:	195b      	addlt	r3, r3, r5
 800bda4:	b21b      	sxth	r3, r3
 800bda6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bdaa:	ee00 3a10 	vmov	s0, r3
 800bdae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bdb2:	edcd 7a01 	vstr	s15, [sp, #4]
 800bdb6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bdba:	f009 fd49 	bl	8015850 <roundf>
 800bdbe:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	; 0x26
 800bdc2:	fb92 f3f5 	sdiv	r3, r2, r5
 800bdc6:	fb05 2313 	mls	r3, r5, r3, r2
 800bdca:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800bdce:	18ea      	adds	r2, r5, r3
 800bdd0:	b219      	sxth	r1, r3
 800bdd2:	b212      	sxth	r2, r2
 800bdd4:	f89d 9004 	ldrb.w	r9, [sp, #4]
 800bdd8:	edcd 7a01 	vstr	s15, [sp, #4]
 800bddc:	ee00 1a10 	vmov	s0, r1
 800bde0:	ee07 2a90 	vmov	s15, r2
 800bde4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800bde8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bdf2:	bfb8      	it	lt
 800bdf4:	ee27 0a88 	vmullt.f32	s0, s15, s16
 800bdf8:	f009 fd2a 	bl	8015850 <roundf>
 800bdfc:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800be00:	f89d 4004 	ldrb.w	r4, [sp, #4]
 800be04:	edcd 7a01 	vstr	s15, [sp, #4]
 800be08:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800be0c:	4622      	mov	r2, r4
 800be0e:	4649      	mov	r1, r9
 800be10:	4630      	mov	r0, r6
 800be12:	f7ff fce7 	bl	800b7e4 <MEMS_setMagIndexToOne>
 800be16:	7832      	ldrb	r2, [r6, #0]
 800be18:	b2fb      	uxtb	r3, r7
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d89d      	bhi.n	800bd5a <MEMS_updateMagBufferIndex+0x66>
 800be1e:	b003      	add	sp, #12
 800be20:	ecbd 8b02 	vpop	{d8}
 800be24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be28:	fb90 f8f4 	sdiv	r8, r0, r4
 800be2c:	fb04 0018 	mls	r0, r4, r8, r0
 800be30:	fa0f f880 	sxth.w	r8, r0
 800be34:	e782      	b.n	800bd3c <MEMS_updateMagBufferIndex+0x48>
 800be36:	bf00      	nop

0800be38 <getMagStats.constprop.0>:
 800be38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800be3e:	2400      	movs	r4, #0
 800be40:	4607      	mov	r7, r0
 800be42:	6034      	str	r4, [r6, #0]
 800be44:	601c      	str	r4, [r3, #0]
 800be46:	7800      	ldrb	r0, [r0, #0]
 800be48:	787d      	ldrb	r5, [r7, #1]
 800be4a:	f997 4002 	ldrsb.w	r4, [r7, #2]
 800be4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800be52:	42a8      	cmp	r0, r5
 800be54:	eec7 5a80 	vdiv.f32	s11, s15, s0
 800be58:	f000 80c0 	beq.w	800bfdc <getMagStats.constprop.0+0x1a4>
 800be5c:	3401      	adds	r4, #1
 800be5e:	eba4 0c00 	sub.w	ip, r4, r0
 800be62:	fb9c f4f5 	sdiv	r4, ip, r5
 800be66:	fb05 c414 	mls	r4, r5, r4, ip
 800be6a:	2c00      	cmp	r4, #0
 800be6c:	bfb8      	it	lt
 800be6e:	1964      	addlt	r4, r4, r5
 800be70:	b224      	sxth	r4, r4
 800be72:	ee04 0a90 	vmov	s9, r0
 800be76:	ed9f 5a60 	vldr	s10, [pc, #384]	; 800bff8 <getMagStats.constprop.0+0x1c0>
 800be7a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800be7e:	ee25 5a85 	vmul.f32	s10, s11, s10
 800be82:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800be86:	2800      	cmp	r0, #0
 800be88:	f000 80b2 	beq.w	800bff0 <getMagStats.constprop.0+0x1b8>
 800be8c:	3801      	subs	r0, #1
 800be8e:	fa54 fc80 	uxtab	ip, r4, r0
 800be92:	f8b1 9000 	ldrh.w	r9, [r1]
 800be96:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 800be9a:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 800be9e:	ed9f 3a57 	vldr	s6, [pc, #348]	; 800bffc <getMagStats.constprop.0+0x1c4>
 800bea2:	2000      	movs	r0, #0
 800bea4:	e002      	b.n	800beac <getMagStats.constprop.0+0x74>
 800bea6:	ed93 3a00 	vldr	s6, [r3]
 800beaa:	3401      	adds	r4, #1
 800beac:	fb94 f1f5 	sdiv	r1, r4, r5
 800beb0:	fb05 4111 	mls	r1, r5, r1, r4
 800beb4:	b2c9      	uxtb	r1, r1
 800beb6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800beba:	edd2 3a00 	vldr	s7, [r2]
 800bebe:	f8b1 a022 	ldrh.w	sl, [r1, #34]	; 0x22
 800bec2:	f8b1 b024 	ldrh.w	fp, [r1, #36]	; 0x24
 800bec6:	8cc9      	ldrh	r1, [r1, #38]	; 0x26
 800bec8:	ed92 4a04 	vldr	s8, [r2, #16]
 800becc:	ed92 6a08 	vldr	s12, [r2, #32]
 800bed0:	ebaa 0a09 	sub.w	sl, sl, r9
 800bed4:	ebab 0b08 	sub.w	fp, fp, r8
 800bed8:	fa0f fa8a 	sxth.w	sl, sl
 800bedc:	ee07 aa10 	vmov	s14, sl
 800bee0:	fa0f fa8b 	sxth.w	sl, fp
 800bee4:	ee06 aa90 	vmov	s13, sl
 800bee8:	eba1 010e 	sub.w	r1, r1, lr
 800beec:	b209      	sxth	r1, r1
 800beee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bef2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bef6:	ee07 1a90 	vmov	s15, r1
 800befa:	ee27 7a23 	vmul.f32	s14, s14, s7
 800befe:	ee66 6a84 	vmul.f32	s13, s13, s8
 800bf02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf06:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800bf0a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800bf0e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800bf12:	ee16 1a90 	vmov	r1, s13
 800bf16:	ee17 aa10 	vmov	sl, s14
 800bf1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf1e:	fb11 f101 	smulbb	r1, r1, r1
 800bf22:	fa0f fa8a 	sxth.w	sl, sl
 800bf26:	fb0a 1a0a 	mla	sl, sl, sl, r1
 800bf2a:	ee17 1a90 	vmov	r1, s15
 800bf2e:	b209      	sxth	r1, r1
 800bf30:	fb01 a101 	mla	r1, r1, r1, sl
 800bf34:	ee07 1a90 	vmov	s15, r1
 800bf38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf3c:	f100 0a01 	add.w	sl, r0, #1
 800bf40:	eef1 6ae7 	vsqrt.f32	s13, s15
 800bf44:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bf48:	ee17 1a90 	vmov	r1, s15
 800bf4c:	b209      	sxth	r1, r1
 800bf4e:	ee07 1a10 	vmov	s14, r1
 800bf52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bf56:	ee77 7a45 	vsub.f32	s15, s14, s10
 800bf5a:	ee37 7a03 	vadd.f32	s14, s14, s6
 800bf5e:	eef0 7ae7 	vabs.f32	s15, s15
 800bf62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf66:	ed83 7a00 	vstr	s14, [r3]
 800bf6a:	ee17 1a90 	vmov	r1, s15
 800bf6e:	b209      	sxth	r1, r1
 800bf70:	fb01 fb01 	mul.w	fp, r1, r1
 800bf74:	ee07 ba90 	vmov	s15, fp
 800bf78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bf7c:	ee07 1a90 	vmov	s15, r1
 800bf80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf84:	eef4 5ae7 	vcmpe.f32	s11, s15
 800bf88:	edd6 7a00 	vldr	s15, [r6]
 800bf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf94:	bf48      	it	mi
 800bf96:	fa5f f08a 	uxtbmi.w	r0, sl
 800bf9a:	45a4      	cmp	ip, r4
 800bf9c:	edc6 7a00 	vstr	s15, [r6]
 800bfa0:	d181      	bne.n	800bea6 <getMagStats.constprop.0+0x6e>
 800bfa2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 800bfa6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800c000 <getMagStats.constprop.0+0x1c8>
 800bfaa:	eec7 6aa4 	vdiv.f32	s13, s15, s9
 800bfae:	eef1 7ae6 	vsqrt.f32	s15, s13
 800bfb2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bfb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfbe:	bfb8      	it	lt
 800bfc0:	eef0 7a47 	vmovlt.f32	s15, s14
 800bfc4:	edc6 7a00 	vstr	s15, [r6]
 800bfc8:	edd3 7a00 	vldr	s15, [r3]
 800bfcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bfd0:	eec0 7a24 	vdiv.f32	s15, s0, s9
 800bfd4:	edc3 7a00 	vstr	s15, [r3]
 800bfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfdc:	1c65      	adds	r5, r4, #1
 800bfde:	fb95 f4f0 	sdiv	r4, r5, r0
 800bfe2:	fb00 5414 	mls	r4, r0, r4, r5
 800bfe6:	ee04 0a90 	vmov	s9, r0
 800bfea:	b224      	sxth	r4, r4
 800bfec:	4605      	mov	r5, r0
 800bfee:	e742      	b.n	800be76 <getMagStats.constprop.0+0x3e>
 800bff0:	edd6 7a00 	vldr	s15, [r6]
 800bff4:	e7d5      	b.n	800bfa2 <getMagStats.constprop.0+0x16a>
 800bff6:	bf00      	nop
 800bff8:	423c0000 	.word	0x423c0000
 800bffc:	00000000 	.word	0x00000000
 800c000:	3f59999a 	.word	0x3f59999a

0800c004 <MFX_emptyAttitude>:
 800c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	ed2d 8b10 	vpush	{d8-d15}
 800c00c:	f6ad 6d34 	subw	sp, sp, #3636	; 0xe34
 800c010:	f60d 0418 	addw	r4, sp, #2072	; 0x818
 800c014:	f04f 0a00 	mov.w	sl, #0
 800c018:	4fef      	ldr	r7, [pc, #956]	; (800c3d8 <MFX_emptyAttitude+0x3d4>)
 800c01a:	f8c4 a008 	str.w	sl, [r4, #8]
 800c01e:	e9c4 aa00 	strd	sl, sl, [r4]
 800c022:	f837 3b04 	ldrh.w	r3, [r7], #4
 800c026:	f8ad 36a8 	strh.w	r3, [sp, #1704]	; 0x6a8
 800c02a:	f88d a6aa 	strb.w	sl, [sp, #1706]	; 0x6aa
 800c02e:	4680      	mov	r8, r0
 800c030:	f8dd 36a8 	ldr.w	r3, [sp, #1704]	; 0x6a8
 800c034:	f8ad 3098 	strh.w	r3, [sp, #152]	; 0x98
 800c038:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800c03c:	0c1b      	lsrs	r3, r3, #16
 800c03e:	f88d 309a 	strb.w	r3, [sp, #154]	; 0x9a
 800c042:	ab27      	add	r3, sp, #156	; 0x9c
 800c044:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c048:	f10d 09a8 	add.w	r9, sp, #168	; 0xa8
 800c04c:	ab2d      	add	r3, sp, #180	; 0xb4
 800c04e:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800c052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c056:	ab30      	add	r3, sp, #192	; 0xc0
 800c058:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c05c:	ab33      	add	r3, sp, #204	; 0xcc
 800c05e:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800c062:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c066:	f04f 0c00 	mov.w	ip, #0
 800c06a:	ab36      	add	r3, sp, #216	; 0xd8
 800c06c:	f04f 0b00 	mov.w	fp, #0
 800c070:	e9cd bc22 	strd	fp, ip, [sp, #136]	; 0x88
 800c074:	e9cd bc24 	strd	fp, ip, [sp, #144]	; 0x90
 800c078:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c07c:	4628      	mov	r0, r5
 800c07e:	2224      	movs	r2, #36	; 0x24
 800c080:	f00b f9ee 	bl	8017460 <memset>
 800c084:	4651      	mov	r1, sl
 800c086:	4620      	mov	r0, r4
 800c088:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800c08c:	ed9f bad3 	vldr	s22, [pc, #844]	; 800c3dc <MFX_emptyAttitude+0x3d8>
 800c090:	eddf ead3 	vldr	s29, [pc, #844]	; 800c3e0 <MFX_emptyAttitude+0x3dc>
 800c094:	f00b f9e4 	bl	8017460 <memset>
 800c098:	edd5 4a00 	vldr	s9, [r5]
 800c09c:	ed95 5a01 	vldr	s10, [r5, #4]
 800c0a0:	edd5 5a02 	vldr	s11, [r5, #8]
 800c0a4:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 800c0a8:	edcd 4a0b 	vstr	s9, [sp, #44]	; 0x2c
 800c0ac:	ed8d 5a3d 	vstr	s10, [sp, #244]	; 0xf4
 800c0b0:	ed8d 5a0a 	vstr	s10, [sp, #40]	; 0x28
 800c0b4:	edcd 5a3e 	vstr	s11, [sp, #248]	; 0xf8
 800c0b8:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 800c0bc:	edcd ea45 	vstr	s29, [sp, #276]	; 0x114
 800c0c0:	edcd ea4f 	vstr	s29, [sp, #316]	; 0x13c
 800c0c4:	edcd ea59 	vstr	s29, [sp, #356]	; 0x164
 800c0c8:	ed8d ba46 	vstr	s22, [sp, #280]	; 0x118
 800c0cc:	ed8d ba47 	vstr	s22, [sp, #284]	; 0x11c
 800c0d0:	ed8d ba48 	vstr	s22, [sp, #288]	; 0x120
 800c0d4:	ed8d ba49 	vstr	s22, [sp, #292]	; 0x124
 800c0d8:	ed8d ba4a 	vstr	s22, [sp, #296]	; 0x128
 800c0dc:	ed8d ba4b 	vstr	s22, [sp, #300]	; 0x12c
 800c0e0:	ed8d ba4c 	vstr	s22, [sp, #304]	; 0x130
 800c0e4:	ed8d ba4d 	vstr	s22, [sp, #308]	; 0x134
 800c0e8:	ed8d ba4e 	vstr	s22, [sp, #312]	; 0x138
 800c0ec:	ed8d ba50 	vstr	s22, [sp, #320]	; 0x140
 800c0f0:	ed8d ba51 	vstr	s22, [sp, #324]	; 0x144
 800c0f4:	ed8d ba52 	vstr	s22, [sp, #328]	; 0x148
 800c0f8:	ed8d ba53 	vstr	s22, [sp, #332]	; 0x14c
 800c0fc:	ed8d ba54 	vstr	s22, [sp, #336]	; 0x150
 800c100:	ed8d ba55 	vstr	s22, [sp, #340]	; 0x154
 800c104:	ed8d ba56 	vstr	s22, [sp, #344]	; 0x158
 800c108:	ed8d ba57 	vstr	s22, [sp, #348]	; 0x15c
 800c10c:	ed8d ba58 	vstr	s22, [sp, #352]	; 0x160
 800c110:	ed8d ba5a 	vstr	s22, [sp, #360]	; 0x168
 800c114:	ed8d ba5b 	vstr	s22, [sp, #364]	; 0x16c
 800c118:	ed8d ba5c 	vstr	s22, [sp, #368]	; 0x170
 800c11c:	ed95 6a03 	vldr	s12, [r5, #12]
 800c120:	edd5 6a04 	vldr	s13, [r5, #16]
 800c124:	ed95 7a05 	vldr	s14, [r5, #20]
 800c128:	ed8d 6a3f 	vstr	s12, [sp, #252]	; 0xfc
 800c12c:	ed8d 6a08 	vstr	s12, [sp, #32]
 800c130:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800c134:	edcd 6a07 	vstr	s13, [sp, #28]
 800c138:	ed8d 7a41 	vstr	s14, [sp, #260]	; 0x104
 800c13c:	ed8d 7a06 	vstr	s14, [sp, #24]
 800c140:	ed8d ba5d 	vstr	s22, [sp, #372]	; 0x174
 800c144:	ed8d ba5e 	vstr	s22, [sp, #376]	; 0x178
 800c148:	ed8d ba5f 	vstr	s22, [sp, #380]	; 0x17c
 800c14c:	edcd ea63 	vstr	s29, [sp, #396]	; 0x18c
 800c150:	edcd ea6d 	vstr	s29, [sp, #436]	; 0x1b4
 800c154:	edcd ea77 	vstr	s29, [sp, #476]	; 0x1dc
 800c158:	ed8d ba60 	vstr	s22, [sp, #384]	; 0x180
 800c15c:	ed8d ba61 	vstr	s22, [sp, #388]	; 0x184
 800c160:	ed8d ba62 	vstr	s22, [sp, #392]	; 0x188
 800c164:	ed8d ba64 	vstr	s22, [sp, #400]	; 0x190
 800c168:	ed8d ba65 	vstr	s22, [sp, #404]	; 0x194
 800c16c:	ed8d ba66 	vstr	s22, [sp, #408]	; 0x198
 800c170:	ed8d ba67 	vstr	s22, [sp, #412]	; 0x19c
 800c174:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800c178:	ed8d ba69 	vstr	s22, [sp, #420]	; 0x1a4
 800c17c:	ed8d ba6a 	vstr	s22, [sp, #424]	; 0x1a8
 800c180:	ed8d ba6b 	vstr	s22, [sp, #428]	; 0x1ac
 800c184:	ed8d ba6c 	vstr	s22, [sp, #432]	; 0x1b0
 800c188:	ed8d ba6e 	vstr	s22, [sp, #440]	; 0x1b8
 800c18c:	ed8d ba6f 	vstr	s22, [sp, #444]	; 0x1bc
 800c190:	ed8d ba70 	vstr	s22, [sp, #448]	; 0x1c0
 800c194:	ed8d ba71 	vstr	s22, [sp, #452]	; 0x1c4
 800c198:	ed8d ba72 	vstr	s22, [sp, #456]	; 0x1c8
 800c19c:	ed8d ba73 	vstr	s22, [sp, #460]	; 0x1cc
 800c1a0:	edd5 7a06 	vldr	s15, [r5, #24]
 800c1a4:	edd5 fa07 	vldr	s31, [r5, #28]
 800c1a8:	ed95 fa08 	vldr	s30, [r5, #32]
 800c1ac:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c1b0:	edcd 7a05 	vstr	s15, [sp, #20]
 800c1b4:	ed8d ba74 	vstr	s22, [sp, #464]	; 0x1d0
 800c1b8:	ed8d ba75 	vstr	s22, [sp, #468]	; 0x1d4
 800c1bc:	ed8d ba76 	vstr	s22, [sp, #472]	; 0x1d8
 800c1c0:	ed8d ba78 	vstr	s22, [sp, #480]	; 0x1e0
 800c1c4:	ed8d ba79 	vstr	s22, [sp, #484]	; 0x1e4
 800c1c8:	ed8d ba7a 	vstr	s22, [sp, #488]	; 0x1e8
 800c1cc:	edcd ea81 	vstr	s29, [sp, #516]	; 0x204
 800c1d0:	edcd ea8b 	vstr	s29, [sp, #556]	; 0x22c
 800c1d4:	edcd fa43 	vstr	s31, [sp, #268]	; 0x10c
 800c1d8:	ed8d fa44 	vstr	s30, [sp, #272]	; 0x110
 800c1dc:	ed8d ba7b 	vstr	s22, [sp, #492]	; 0x1ec
 800c1e0:	ed8d ba7c 	vstr	s22, [sp, #496]	; 0x1f0
 800c1e4:	ed8d ba7d 	vstr	s22, [sp, #500]	; 0x1f4
 800c1e8:	ed8d ba7e 	vstr	s22, [sp, #504]	; 0x1f8
 800c1ec:	ed8d ba7f 	vstr	s22, [sp, #508]	; 0x1fc
 800c1f0:	ed8d ba80 	vstr	s22, [sp, #512]	; 0x200
 800c1f4:	ed8d ba82 	vstr	s22, [sp, #520]	; 0x208
 800c1f8:	ed8d ba83 	vstr	s22, [sp, #524]	; 0x20c
 800c1fc:	ed8d ba84 	vstr	s22, [sp, #528]	; 0x210
 800c200:	ed8d ba85 	vstr	s22, [sp, #532]	; 0x214
 800c204:	ed8d ba86 	vstr	s22, [sp, #536]	; 0x218
 800c208:	ed8d ba87 	vstr	s22, [sp, #540]	; 0x21c
 800c20c:	ed8d ba88 	vstr	s22, [sp, #544]	; 0x220
 800c210:	ed8d ba89 	vstr	s22, [sp, #548]	; 0x224
 800c214:	ed8d ba8a 	vstr	s22, [sp, #552]	; 0x228
 800c218:	ed8d ba8c 	vstr	s22, [sp, #560]	; 0x230
 800c21c:	ed8d ba8d 	vstr	s22, [sp, #564]	; 0x234
 800c220:	ed8d ba8e 	vstr	s22, [sp, #568]	; 0x238
 800c224:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c226:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
 800c22a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c22e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c230:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	f8cc 3000 	str.w	r3, [ip]
 800c23a:	4651      	mov	r1, sl
 800c23c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c240:	4620      	mov	r0, r4
 800c242:	f44f 57f0 	mov.w	r7, #7680	; 0x1e00
 800c246:	ed8d ba8f 	vstr	s22, [sp, #572]	; 0x23c
 800c24a:	ed8d ba90 	vstr	s22, [sp, #576]	; 0x240
 800c24e:	ed8d ba91 	vstr	s22, [sp, #580]	; 0x244
 800c252:	ed8d ba92 	vstr	s22, [sp, #584]	; 0x248
 800c256:	f00b f903 	bl	8017460 <memset>
 800c25a:	4621      	mov	r1, r4
 800c25c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c260:	a898      	add	r0, sp, #608	; 0x260
 800c262:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c266:	f8ad 7258 	strh.w	r7, [sp, #600]	; 0x258
 800c26a:	f00b f8eb 	bl	8017444 <memcpy>
 800c26e:	4651      	mov	r1, sl
 800c270:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c274:	4620      	mov	r0, r4
 800c276:	f50d 66a7 	add.w	r6, sp, #1336	; 0x538
 800c27a:	ed8d 8a97 	vstr	s16, [sp, #604]	; 0x25c
 800c27e:	f00b f8ef 	bl	8017460 <memset>
 800c282:	4621      	mov	r1, r4
 800c284:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c288:	a8f4      	add	r0, sp, #976	; 0x3d0
 800c28a:	f8ad 73c8 	strh.w	r7, [sp, #968]	; 0x3c8
 800c28e:	f00b f8d9 	bl	8017444 <memcpy>
 800c292:	4651      	mov	r1, sl
 800c294:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c298:	4620      	mov	r0, r4
 800c29a:	ed8d 8af3 	vstr	s16, [sp, #972]	; 0x3cc
 800c29e:	f00b f8df 	bl	8017460 <memset>
 800c2a2:	4621      	mov	r1, r4
 800c2a4:	8037      	strh	r7, [r6, #0]
 800c2a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c2aa:	f50d 60a8 	add.w	r0, sp, #1344	; 0x540
 800c2ae:	f00b f8c9 	bl	8017444 <memcpy>
 800c2b2:	4651      	mov	r1, sl
 800c2b4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	ed86 8a01 	vstr	s16, [r6, #4]
 800c2be:	f00b f8cf 	bl	8017460 <memset>
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	802f      	strh	r7, [r5, #0]
 800c2c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c2ca:	f50d 60d6 	add.w	r0, sp, #1712	; 0x6b0
 800c2ce:	f00b f8b9 	bl	8017444 <memcpy>
 800c2d2:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 800c2d6:	e9cd 5c01 	strd	r5, ip, [sp, #4]
 800c2da:	2701      	movs	r7, #1
 800c2dc:	9600      	str	r6, [sp, #0]
 800c2de:	9403      	str	r4, [sp, #12]
 800c2e0:	eddf 3a40 	vldr	s7, [pc, #256]	; 800c3e4 <MFX_emptyAttitude+0x3e0>
 800c2e4:	ed9f 4a40 	vldr	s8, [pc, #256]	; 800c3e8 <MFX_emptyAttitude+0x3e4>
 800c2e8:	ed85 8a01 	vstr	s16, [r5, #4]
 800c2ec:	483f      	ldr	r0, [pc, #252]	; (800c3ec <MFX_emptyAttitude+0x3e8>)
 800c2ee:	4d40      	ldr	r5, [pc, #256]	; (800c3f0 <MFX_emptyAttitude+0x3ec>)
 800c2f0:	f8df e120 	ldr.w	lr, [pc, #288]	; 800c414 <MFX_emptyAttitude+0x410>
 800c2f4:	951c      	str	r5, [sp, #112]	; 0x70
 800c2f6:	abf2      	add	r3, sp, #968	; 0x3c8
 800c2f8:	aa96      	add	r2, sp, #600	; 0x258
 800c2fa:	a90d      	add	r1, sp, #52	; 0x34
 800c2fc:	9017      	str	r0, [sp, #92]	; 0x5c
 800c2fe:	4d3d      	ldr	r5, [pc, #244]	; (800c3f4 <MFX_emptyAttitude+0x3f0>)
 800c300:	edcd 3a18 	vstr	s7, [sp, #96]	; 0x60
 800c304:	4638      	mov	r0, r7
 800c306:	ae27      	add	r6, sp, #156	; 0x9c
 800c308:	ed8d 4a19 	vstr	s8, [sp, #100]	; 0x64
 800c30c:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 800c310:	951b      	str	r5, [sp, #108]	; 0x6c
 800c312:	f88d 7058 	strb.w	r7, [sp, #88]	; 0x58
 800c316:	ed8d ba1d 	vstr	s22, [sp, #116]	; 0x74
 800c31a:	ed8d ba1e 	vstr	s22, [sp, #120]	; 0x78
 800c31e:	ed8d ba1f 	vstr	s22, [sp, #124]	; 0x7c
 800c322:	ed8d ba20 	vstr	s22, [sp, #128]	; 0x80
 800c326:	ed8d ba21 	vstr	s22, [sp, #132]	; 0x84
 800c32a:	f7fe fed1 	bl	800b0d0 <DataHist_parameters>
 800c32e:	ce07      	ldmia	r6!, {r0, r1, r2}
 800c330:	4b31      	ldr	r3, [pc, #196]	; (800c3f8 <MFX_emptyAttitude+0x3f4>)
 800c332:	f8c8 0074 	str.w	r0, [r8, #116]	; 0x74
 800c336:	f8c8 1078 	str.w	r1, [r8, #120]	; 0x78
 800c33a:	f8c8 207c 	str.w	r2, [r8, #124]	; 0x7c
 800c33e:	e8b9 0007 	ldmia.w	r9!, {r0, r1, r2}
 800c342:	f8c8 300c 	str.w	r3, [r8, #12]
 800c346:	4b2d      	ldr	r3, [pc, #180]	; (800c3fc <MFX_emptyAttitude+0x3f8>)
 800c348:	f8c8 3014 	str.w	r3, [r8, #20]
 800c34c:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
 800c350:	eddf 2a2b 	vldr	s5, [pc, #172]	; 800c400 <MFX_emptyAttitude+0x3fc>
 800c354:	ed9f 3a2b 	vldr	s6, [pc, #172]	; 800c404 <MFX_emptyAttitude+0x400>
 800c358:	eddf 3a2b 	vldr	s7, [pc, #172]	; 800c408 <MFX_emptyAttitude+0x404>
 800c35c:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800c40c <MFX_emptyAttitude+0x408>
 800c360:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 800c410 <MFX_emptyAttitude+0x40c>
 800c364:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800c368:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 800c418 <MFX_emptyAttitude+0x414>
 800c36c:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 800c41c <MFX_emptyAttitude+0x418>
 800c370:	edc8 2a06 	vstr	s5, [r8, #24]
 800c374:	f04f 0b00 	mov.w	fp, #0
 800c378:	f04f 0c00 	mov.w	ip, #0
 800c37c:	e9c8 bc16 	strd	fp, ip, [r8, #88]	; 0x58
 800c380:	e9c8 bc18 	strd	fp, ip, [r8, #96]	; 0x60
 800c384:	e9c8 bc1a 	strd	fp, ip, [r8, #104]	; 0x68
 800c388:	ad2d      	add	r5, sp, #180	; 0xb4
 800c38a:	469b      	mov	fp, r3
 800c38c:	f8df c090 	ldr.w	ip, [pc, #144]	; 800c420 <MFX_emptyAttitude+0x41c>
 800c390:	ed88 3a07 	vstr	s6, [r8, #28]
 800c394:	f240 1301 	movw	r3, #257	; 0x101
 800c398:	edc8 3a08 	vstr	s7, [r8, #32]
 800c39c:	ed88 4a09 	vstr	s8, [r8, #36]	; 0x24
 800c3a0:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800c3a4:	ed88 2a0b 	vstr	s4, [r8, #44]	; 0x2c
 800c3a8:	f8c8 e030 	str.w	lr, [r8, #48]	; 0x30
 800c3ac:	f8c8 c034 	str.w	ip, [r8, #52]	; 0x34
 800c3b0:	f8a8 6070 	strh.w	r6, [r8, #112]	; 0x70
 800c3b4:	f888 b072 	strb.w	fp, [r8, #114]	; 0x72
 800c3b8:	f8c8 0080 	str.w	r0, [r8, #128]	; 0x80
 800c3bc:	f8c8 1084 	str.w	r1, [r8, #132]	; 0x84
 800c3c0:	f8c8 3000 	str.w	r3, [r8]
 800c3c4:	f8a8 3004 	strh.w	r3, [r8, #4]
 800c3c8:	ed88 8a02 	vstr	s16, [r8, #8]
 800c3cc:	ed88 8a04 	vstr	s16, [r8, #16]
 800c3d0:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
 800c3d4:	e028      	b.n	800c428 <MFX_emptyAttitude+0x424>
 800c3d6:	bf00      	nop
 800c3d8:	0801a37c 	.word	0x0801a37c
 800c3dc:	00000000 	.word	0x00000000
 800c3e0:	447a0000 	.word	0x447a0000
 800c3e4:	3e93ffa3 	.word	0x3e93ffa3
 800c3e8:	3e5cec8f 	.word	0x3e5cec8f
 800c3ec:	3ea25c13 	.word	0x3ea25c13
 800c3f0:	40a00000 	.word	0x40a00000
 800c3f4:	3d57bb3d 	.word	0x3d57bb3d
 800c3f8:	01010100 	.word	0x01010100
 800c3fc:	41200000 	.word	0x41200000
 800c400:	3a9d4952 	.word	0x3a9d4952
 800c404:	3ac49ba6 	.word	0x3ac49ba6
 800c408:	3b03126f 	.word	0x3b03126f
 800c40c:	402ab021 	.word	0x402ab021
 800c410:	3a83126f 	.word	0x3a83126f
 800c414:	3e006d36 	.word	0x3e006d36
 800c418:	3f639581 	.word	0x3f639581
 800c41c:	3f13f7cf 	.word	0x3f13f7cf
 800c420:	3f2ac083 	.word	0x3f2ac083
 800c424:	3f4ccccd 	.word	0x3f4ccccd
 800c428:	cd07      	ldmia	r5!, {r0, r1, r2}
 800c42a:	f10d 0bc0 	add.w	fp, sp, #192	; 0xc0
 800c42e:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 800c432:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 800c436:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 800c43a:	e8bb 0007 	ldmia.w	fp!, {r0, r1, r2}
 800c43e:	ab33      	add	r3, sp, #204	; 0xcc
 800c440:	f8c8 0098 	str.w	r0, [r8, #152]	; 0x98
 800c444:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 800c448:	f8c8 20a0 	str.w	r2, [r8, #160]	; 0xa0
 800c44c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c44e:	ab36      	add	r3, sp, #216	; 0xd8
 800c450:	f8c8 00a4 	str.w	r0, [r8, #164]	; 0xa4
 800c454:	f8c8 10a8 	str.w	r1, [r8, #168]	; 0xa8
 800c458:	f8c8 20ac 	str.w	r2, [r8, #172]	; 0xac
 800c45c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c45e:	ed1f 4a0f 	vldr	s8, [pc, #-60]	; 800c424 <MFX_emptyAttitude+0x420>
 800c462:	4bd6      	ldr	r3, [pc, #856]	; (800c7bc <MFX_emptyAttitude+0x7b8>)
 800c464:	f8c8 00b0 	str.w	r0, [r8, #176]	; 0xb0
 800c468:	f04f 5b7c 	mov.w	fp, #1056964608	; 0x3f000000
 800c46c:	f8c8 10b4 	str.w	r1, [r8, #180]	; 0xb4
 800c470:	f8c8 20b8 	str.w	r2, [r8, #184]	; 0xb8
 800c474:	ed88 4a65 	vstr	s8, [r8, #404]	; 0x194
 800c478:	f8c8 b198 	str.w	fp, [r8, #408]	; 0x198
 800c47c:	f8c8 319c 	str.w	r3, [r8, #412]	; 0x19c
 800c480:	ed88 ba64 	vstr	s22, [r8, #400]	; 0x190
 800c484:	ed88 ba30 	vstr	s22, [r8, #192]	; 0xc0
 800c488:	ed88 ba4a 	vstr	s22, [r8, #296]	; 0x128
 800c48c:	ed88 ba31 	vstr	s22, [r8, #196]	; 0xc4
 800c490:	ed88 ba4b 	vstr	s22, [r8, #300]	; 0x12c
 800c494:	ed88 ba32 	vstr	s22, [r8, #200]	; 0xc8
 800c498:	ed88 ba4c 	vstr	s22, [r8, #304]	; 0x130
 800c49c:	ed88 ba33 	vstr	s22, [r8, #204]	; 0xcc
 800c4a0:	ed88 ba4d 	vstr	s22, [r8, #308]	; 0x134
 800c4a4:	ed88 ba34 	vstr	s22, [r8, #208]	; 0xd0
 800c4a8:	ed88 ba4e 	vstr	s22, [r8, #312]	; 0x138
 800c4ac:	ed88 ba35 	vstr	s22, [r8, #212]	; 0xd4
 800c4b0:	ed88 ba4f 	vstr	s22, [r8, #316]	; 0x13c
 800c4b4:	ed88 ba36 	vstr	s22, [r8, #216]	; 0xd8
 800c4b8:	ed88 ba50 	vstr	s22, [r8, #320]	; 0x140
 800c4bc:	ed88 ba37 	vstr	s22, [r8, #220]	; 0xdc
 800c4c0:	ed88 ba51 	vstr	s22, [r8, #324]	; 0x144
 800c4c4:	ed88 ba38 	vstr	s22, [r8, #224]	; 0xe0
 800c4c8:	ed88 ba52 	vstr	s22, [r8, #328]	; 0x148
 800c4cc:	ed88 ba39 	vstr	s22, [r8, #228]	; 0xe4
 800c4d0:	ed88 ba53 	vstr	s22, [r8, #332]	; 0x14c
 800c4d4:	ed88 ba3a 	vstr	s22, [r8, #232]	; 0xe8
 800c4d8:	ed88 ba54 	vstr	s22, [r8, #336]	; 0x150
 800c4dc:	ed88 ba3b 	vstr	s22, [r8, #236]	; 0xec
 800c4e0:	ed88 ba55 	vstr	s22, [r8, #340]	; 0x154
 800c4e4:	ed88 ba3c 	vstr	s22, [r8, #240]	; 0xf0
 800c4e8:	ed88 ba56 	vstr	s22, [r8, #344]	; 0x158
 800c4ec:	ed88 ba3d 	vstr	s22, [r8, #244]	; 0xf4
 800c4f0:	ed88 ba57 	vstr	s22, [r8, #348]	; 0x15c
 800c4f4:	ed88 ba3e 	vstr	s22, [r8, #248]	; 0xf8
 800c4f8:	ed88 ba58 	vstr	s22, [r8, #352]	; 0x160
 800c4fc:	ed88 ba3f 	vstr	s22, [r8, #252]	; 0xfc
 800c500:	ed88 ba59 	vstr	s22, [r8, #356]	; 0x164
 800c504:	ed88 ba40 	vstr	s22, [r8, #256]	; 0x100
 800c508:	ed88 ba5a 	vstr	s22, [r8, #360]	; 0x168
 800c50c:	ed88 ba41 	vstr	s22, [r8, #260]	; 0x104
 800c510:	ed88 ba5b 	vstr	s22, [r8, #364]	; 0x16c
 800c514:	ed88 ba42 	vstr	s22, [r8, #264]	; 0x108
 800c518:	ed88 ba5c 	vstr	s22, [r8, #368]	; 0x170
 800c51c:	eddd 4a0b 	vldr	s9, [sp, #44]	; 0x2c
 800c520:	ed9d 5a0a 	vldr	s10, [sp, #40]	; 0x28
 800c524:	edc8 4a6c 	vstr	s9, [r8, #432]	; 0x1b0
 800c528:	ed88 5a6d 	vstr	s10, [r8, #436]	; 0x1b4
 800c52c:	ed88 ba43 	vstr	s22, [r8, #268]	; 0x10c
 800c530:	ed88 ba5d 	vstr	s22, [r8, #372]	; 0x174
 800c534:	ed88 ba44 	vstr	s22, [r8, #272]	; 0x110
 800c538:	ed88 ba5e 	vstr	s22, [r8, #376]	; 0x178
 800c53c:	ed88 ba45 	vstr	s22, [r8, #276]	; 0x114
 800c540:	ed88 ba5f 	vstr	s22, [r8, #380]	; 0x17c
 800c544:	ed88 ba46 	vstr	s22, [r8, #280]	; 0x118
 800c548:	ed88 ba60 	vstr	s22, [r8, #384]	; 0x180
 800c54c:	ed88 ba47 	vstr	s22, [r8, #284]	; 0x11c
 800c550:	ed88 ba61 	vstr	s22, [r8, #388]	; 0x184
 800c554:	ed88 ba48 	vstr	s22, [r8, #288]	; 0x120
 800c558:	ed88 ba62 	vstr	s22, [r8, #392]	; 0x188
 800c55c:	ed88 ba49 	vstr	s22, [r8, #292]	; 0x124
 800c560:	ed88 ba63 	vstr	s22, [r8, #396]	; 0x18c
 800c564:	f888 a1a4 	strb.w	sl, [r8, #420]	; 0x1a4
 800c568:	f8c8 a1a6 	str.w	sl, [r8, #422]	; 0x1a6
 800c56c:	edc8 ea75 	vstr	s29, [r8, #468]	; 0x1d4
 800c570:	ed88 ba76 	vstr	s22, [r8, #472]	; 0x1d8
 800c574:	ed88 ba77 	vstr	s22, [r8, #476]	; 0x1dc
 800c578:	ed88 ba78 	vstr	s22, [r8, #480]	; 0x1e0
 800c57c:	ed88 ba79 	vstr	s22, [r8, #484]	; 0x1e4
 800c580:	ed88 ba7a 	vstr	s22, [r8, #488]	; 0x1e8
 800c584:	ed88 ba7b 	vstr	s22, [r8, #492]	; 0x1ec
 800c588:	ed88 ba7c 	vstr	s22, [r8, #496]	; 0x1f0
 800c58c:	ed88 ba7d 	vstr	s22, [r8, #500]	; 0x1f4
 800c590:	ed88 ba7e 	vstr	s22, [r8, #504]	; 0x1f8
 800c594:	edc8 ea7f 	vstr	s29, [r8, #508]	; 0x1fc
 800c598:	ed88 ba80 	vstr	s22, [r8, #512]	; 0x200
 800c59c:	ed88 ba81 	vstr	s22, [r8, #516]	; 0x204
 800c5a0:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 800c5a4:	ed9d 6a08 	vldr	s12, [sp, #32]
 800c5a8:	eddd 6a07 	vldr	s13, [sp, #28]
 800c5ac:	edc8 5a6e 	vstr	s11, [r8, #440]	; 0x1b8
 800c5b0:	f44f 1c48 	mov.w	ip, #3276800	; 0x320000
 800c5b4:	f8c8 c1a0 	str.w	ip, [r8, #416]	; 0x1a0
 800c5b8:	ed88 6a6f 	vstr	s12, [r8, #444]	; 0x1bc
 800c5bc:	edc8 6a70 	vstr	s13, [r8, #448]	; 0x1c0
 800c5c0:	ed88 ba82 	vstr	s22, [r8, #520]	; 0x208
 800c5c4:	ed88 ba83 	vstr	s22, [r8, #524]	; 0x20c
 800c5c8:	ed88 ba84 	vstr	s22, [r8, #528]	; 0x210
 800c5cc:	ed88 ba85 	vstr	s22, [r8, #532]	; 0x214
 800c5d0:	ed88 ba86 	vstr	s22, [r8, #536]	; 0x218
 800c5d4:	ed88 ba87 	vstr	s22, [r8, #540]	; 0x21c
 800c5d8:	ed88 ba88 	vstr	s22, [r8, #544]	; 0x220
 800c5dc:	edc8 ea89 	vstr	s29, [r8, #548]	; 0x224
 800c5e0:	ed88 ba8a 	vstr	s22, [r8, #552]	; 0x228
 800c5e4:	ed88 ba8b 	vstr	s22, [r8, #556]	; 0x22c
 800c5e8:	ed88 ba8c 	vstr	s22, [r8, #560]	; 0x230
 800c5ec:	ed88 ba8d 	vstr	s22, [r8, #564]	; 0x234
 800c5f0:	ed88 ba8e 	vstr	s22, [r8, #568]	; 0x238
 800c5f4:	ed88 ba8f 	vstr	s22, [r8, #572]	; 0x23c
 800c5f8:	ed88 ba90 	vstr	s22, [r8, #576]	; 0x240
 800c5fc:	ed88 ba91 	vstr	s22, [r8, #580]	; 0x244
 800c600:	ed88 ba92 	vstr	s22, [r8, #584]	; 0x248
 800c604:	edc8 ea93 	vstr	s29, [r8, #588]	; 0x24c
 800c608:	ed88 ba94 	vstr	s22, [r8, #592]	; 0x250
 800c60c:	ed88 ba95 	vstr	s22, [r8, #596]	; 0x254
 800c610:	ed88 ba96 	vstr	s22, [r8, #600]	; 0x258
 800c614:	ed88 ba97 	vstr	s22, [r8, #604]	; 0x25c
 800c618:	ed88 ba98 	vstr	s22, [r8, #608]	; 0x260
 800c61c:	ed88 ba99 	vstr	s22, [r8, #612]	; 0x264
 800c620:	ed88 ba9a 	vstr	s22, [r8, #616]	; 0x268
 800c624:	ed88 ba9b 	vstr	s22, [r8, #620]	; 0x26c
 800c628:	ed9d 7a06 	vldr	s14, [sp, #24]
 800c62c:	eddd 7a05 	vldr	s15, [sp, #20]
 800c630:	ed88 7a71 	vstr	s14, [r8, #452]	; 0x1c4
 800c634:	f508 7e46 	add.w	lr, r8, #792	; 0x318
 800c638:	f50d 6649 	add.w	r6, sp, #3216	; 0xc90
 800c63c:	f50d 6532 	add.w	r5, sp, #2848	; 0xb20
 800c640:	edc8 7a72 	vstr	s15, [r8, #456]	; 0x1c8
 800c644:	ed88 ba9c 	vstr	s22, [r8, #624]	; 0x270
 800c648:	edc8 ea9d 	vstr	s29, [r8, #628]	; 0x274
 800c64c:	ed88 ba9e 	vstr	s22, [r8, #632]	; 0x278
 800c650:	ed88 ba9f 	vstr	s22, [r8, #636]	; 0x27c
 800c654:	ed88 baa0 	vstr	s22, [r8, #640]	; 0x280
 800c658:	ed88 baa1 	vstr	s22, [r8, #644]	; 0x284
 800c65c:	ed88 baa2 	vstr	s22, [r8, #648]	; 0x288
 800c660:	ed88 baa3 	vstr	s22, [r8, #652]	; 0x28c
 800c664:	ed88 baa4 	vstr	s22, [r8, #656]	; 0x290
 800c668:	ed88 baa5 	vstr	s22, [r8, #660]	; 0x294
 800c66c:	ed88 baa6 	vstr	s22, [r8, #664]	; 0x298
 800c670:	edc8 eaa7 	vstr	s29, [r8, #668]	; 0x29c
 800c674:	ed88 baa8 	vstr	s22, [r8, #672]	; 0x2a0
 800c678:	ed88 baa9 	vstr	s22, [r8, #676]	; 0x2a4
 800c67c:	ed88 baaa 	vstr	s22, [r8, #680]	; 0x2a8
 800c680:	ed88 baab 	vstr	s22, [r8, #684]	; 0x2ac
 800c684:	ed88 baac 	vstr	s22, [r8, #688]	; 0x2b0
 800c688:	ed88 baad 	vstr	s22, [r8, #692]	; 0x2b4
 800c68c:	ed88 baae 	vstr	s22, [r8, #696]	; 0x2b8
 800c690:	ed88 baaf 	vstr	s22, [r8, #700]	; 0x2bc
 800c694:	ed88 bab0 	vstr	s22, [r8, #704]	; 0x2c0
 800c698:	edc8 eab1 	vstr	s29, [r8, #708]	; 0x2c4
 800c69c:	ed88 bab2 	vstr	s22, [r8, #712]	; 0x2c8
 800c6a0:	ed88 bab3 	vstr	s22, [r8, #716]	; 0x2cc
 800c6a4:	edc8 fa73 	vstr	s31, [r8, #460]	; 0x1cc
 800c6a8:	ed88 bab4 	vstr	s22, [r8, #720]	; 0x2d0
 800c6ac:	ed88 bab5 	vstr	s22, [r8, #724]	; 0x2d4
 800c6b0:	ed88 bab6 	vstr	s22, [r8, #728]	; 0x2d8
 800c6b4:	ed88 bab7 	vstr	s22, [r8, #732]	; 0x2dc
 800c6b8:	7820      	ldrb	r0, [r4, #0]
 800c6ba:	f888 71ac 	strb.w	r7, [r8, #428]	; 0x1ac
 800c6be:	f50d 6460 	add.w	r4, sp, #3584	; 0xe00
 800c6c2:	ed88 bab8 	vstr	s22, [r8, #736]	; 0x2e0
 800c6c6:	ed88 bab9 	vstr	s22, [r8, #740]	; 0x2e4
 800c6ca:	ed88 baba 	vstr	s22, [r8, #744]	; 0x2e8
 800c6ce:	edc8 eabb 	vstr	s29, [r8, #748]	; 0x2ec
 800c6d2:	ed88 babc 	vstr	s22, [r8, #752]	; 0x2f0
 800c6d6:	ed88 fa74 	vstr	s30, [r8, #464]	; 0x1d0
 800c6da:	ed88 babd 	vstr	s22, [r8, #756]	; 0x2f4
 800c6de:	ed88 babe 	vstr	s22, [r8, #760]	; 0x2f8
 800c6e2:	ed88 babf 	vstr	s22, [r8, #764]	; 0x2fc
 800c6e6:	ed88 bac0 	vstr	s22, [r8, #768]	; 0x300
 800c6ea:	ed88 bac1 	vstr	s22, [r8, #772]	; 0x304
 800c6ee:	ed88 bac2 	vstr	s22, [r8, #776]	; 0x308
 800c6f2:	edc8 eac5 	vstr	s29, [r8, #788]	; 0x314
 800c6f6:	ed88 bac3 	vstr	s22, [r8, #780]	; 0x30c
 800c6fa:	ed88 bac4 	vstr	s22, [r8, #784]	; 0x310
 800c6fe:	f50d 631b 	add.w	r3, sp, #2480	; 0x9b0
 800c702:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800c706:	f50d 6204 	add.w	r2, sp, #2112	; 0x840
 800c70a:	f60d 011c 	addw	r1, sp, #2076	; 0x81c
 800c70e:	f8cd e00c 	str.w	lr, [sp, #12]
 800c712:	9500      	str	r5, [sp, #0]
 800c714:	f7fe fcdc 	bl	800b0d0 <DataHist_parameters>
 800c718:	f608 123c 	addw	r2, r8, #2364	; 0x93c
 800c71c:	f608 1334 	addw	r3, r8, #2356	; 0x934
 800c720:	9205      	str	r2, [sp, #20]
 800c722:	f508 6b13 	add.w	fp, r8, #2352	; 0x930
 800c726:	ed8b ba00 	vstr	s22, [fp]
 800c72a:	f608 1154 	addw	r1, r8, #2388	; 0x954
 800c72e:	ed83 ba00 	vstr	s22, [r3]
 800c732:	9b05      	ldr	r3, [sp, #20]
 800c734:	9106      	str	r1, [sp, #24]
 800c736:	f608 1938 	addw	r9, r8, #2360	; 0x938
 800c73a:	ed89 ba00 	vstr	s22, [r9]
 800c73e:	f508 6217 	add.w	r2, r8, #2416	; 0x970
 800c742:	ed83 8a00 	vstr	s16, [r3]
 800c746:	9b06      	ldr	r3, [sp, #24]
 800c748:	9207      	str	r2, [sp, #28]
 800c74a:	f508 6e14 	add.w	lr, r8, #2368	; 0x940
 800c74e:	f608 1c5c 	addw	ip, r8, #2396	; 0x95c
 800c752:	f608 1744 	addw	r7, r8, #2372	; 0x944
 800c756:	f508 6616 	add.w	r6, r8, #2400	; 0x960
 800c75a:	f608 1548 	addw	r5, r8, #2376	; 0x948
 800c75e:	f608 1464 	addw	r4, r8, #2404	; 0x964
 800c762:	ed8e ba00 	vstr	s22, [lr]
 800c766:	ed8c ba00 	vstr	s22, [ip]
 800c76a:	ed87 ba00 	vstr	s22, [r7]
 800c76e:	ed86 ba00 	vstr	s22, [r6]
 800c772:	ed85 ba00 	vstr	s22, [r5]
 800c776:	ed84 ba00 	vstr	s22, [r4]
 800c77a:	f8c8 a94c 	str.w	sl, [r8, #2380]	; 0x94c
 800c77e:	f8a8 a950 	strh.w	sl, [r8, #2384]	; 0x950
 800c782:	ed83 ba00 	vstr	s22, [r3]
 800c786:	9b07      	ldr	r3, [sp, #28]
 800c788:	f608 1058 	addw	r0, r8, #2392	; 0x958
 800c78c:	f608 1168 	addw	r1, r8, #2408	; 0x968
 800c790:	ed80 8a00 	vstr	s16, [r0]
 800c794:	f608 126c 	addw	r2, r8, #2412	; 0x96c
 800c798:	ed81 ba00 	vstr	s22, [r1]
 800c79c:	ed83 ba00 	vstr	s22, [r3]
 800c7a0:	230a      	movs	r3, #10
 800c7a2:	ed82 ba00 	vstr	s22, [r2]
 800c7a6:	f888 a978 	strb.w	sl, [r8, #2424]	; 0x978
 800c7aa:	f8c8 3974 	str.w	r3, [r8, #2420]	; 0x974
 800c7ae:	f60d 6d34 	addw	sp, sp, #3636	; 0xe34
 800c7b2:	ecbd 8b10 	vpop	{d8-d15}
 800c7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ba:	bf00      	nop
 800c7bc:	3f333333 	.word	0x3f333333

0800c7c0 <output_update>:
 800c7c0:	ed90 7a00 	vldr	s14, [r0]
 800c7c4:	edd0 7a01 	vldr	s15, [r0, #4]
 800c7c8:	ed90 5a03 	vldr	s10, [r0, #12]
 800c7cc:	edd0 5a02 	vldr	s11, [r0, #8]
 800c7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c7d8:	ee27 6a07 	vmul.f32	s12, s14, s14
 800c7dc:	ee67 6a05 	vmul.f32	s13, s14, s10
 800c7e0:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c7e4:	ee67 4aa5 	vmul.f32	s9, s15, s11
 800c7e8:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c7ec:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c7f0:	ee36 6a06 	vadd.f32	s12, s12, s12
 800c7f4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c7f8:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800c7fc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800c800:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800c804:	ee35 5ac6 	vsub.f32	s10, s11, s12
 800c808:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c80c:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800c810:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c814:	460f      	mov	r7, r1
 800c816:	4615      	mov	r5, r2
 800c818:	461e      	mov	r6, r3
 800c81a:	f1bc 0f00 	cmp.w	ip, #0
 800c81e:	d146      	bne.n	800c8ae <output_update+0xee>
 800c820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c824:	eef1 6a66 	vneg.f32	s13, s13
 800c828:	edc3 7a01 	vstr	s15, [r3, #4]
 800c82c:	edc3 6a00 	vstr	s13, [r3]
 800c830:	ed83 5a02 	vstr	s10, [r3, #8]
 800c834:	4662      	mov	r2, ip
 800c836:	4629      	mov	r1, r5
 800c838:	4604      	mov	r4, r0
 800c83a:	f7ff f955 	bl	800bae8 <q2hpr>
 800c83e:	edd5 6a01 	vldr	s13, [r5, #4]
 800c842:	ed95 7a00 	vldr	s14, [r5]
 800c846:	edd5 7a02 	vldr	s15, [r5, #8]
 800c84a:	ed9f 6a44 	vldr	s12, [pc, #272]	; 800c95c <output_update+0x19c>
 800c84e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c852:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800c856:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800c85a:	ed85 7a00 	vstr	s14, [r5]
 800c85e:	edc5 6a01 	vstr	s13, [r5, #4]
 800c862:	edc5 7a02 	vstr	s15, [r5, #8]
 800c866:	ed97 7a01 	vldr	s14, [r7, #4]
 800c86a:	edd6 7a00 	vldr	s15, [r6]
 800c86e:	6822      	ldr	r2, [r4, #0]
 800c870:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c874:	edc8 7a00 	vstr	s15, [r8]
 800c878:	ed97 7a00 	vldr	s14, [r7]
 800c87c:	edd6 7a01 	vldr	s15, [r6, #4]
 800c880:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c884:	edc8 7a01 	vstr	s15, [r8, #4]
 800c888:	edd6 7a02 	vldr	s15, [r6, #8]
 800c88c:	ed97 7a02 	vldr	s14, [r7, #8]
 800c890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c894:	edc8 7a02 	vstr	s15, [r8, #8]
 800c898:	edd4 7a02 	vldr	s15, [r4, #8]
 800c89c:	6863      	ldr	r3, [r4, #4]
 800c89e:	6023      	str	r3, [r4, #0]
 800c8a0:	eef1 7a67 	vneg.f32	s15, s15
 800c8a4:	6062      	str	r2, [r4, #4]
 800c8a6:	edc4 7a02 	vstr	s15, [r4, #8]
 800c8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ae:	f1bc 0f01 	cmp.w	ip, #1
 800c8b2:	d015      	beq.n	800c8e0 <output_update+0x120>
 800c8b4:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800c95c <output_update+0x19c>
 800c8b8:	edd2 6a00 	vldr	s13, [r2]
 800c8bc:	ed92 7a01 	vldr	s14, [r2, #4]
 800c8c0:	edd2 7a02 	vldr	s15, [r2, #8]
 800c8c4:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c8c8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c8cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c8d0:	edc2 6a00 	vstr	s13, [r2]
 800c8d4:	ed82 7a01 	vstr	s14, [r2, #4]
 800c8d8:	edc2 7a02 	vstr	s15, [r2, #8]
 800c8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8e4:	ee36 6a65 	vsub.f32	s12, s12, s11
 800c8e8:	eef1 6a66 	vneg.f32	s13, s13
 800c8ec:	edc3 7a00 	vstr	s15, [r3]
 800c8f0:	ed83 6a02 	vstr	s12, [r3, #8]
 800c8f4:	edc3 6a01 	vstr	s13, [r3, #4]
 800c8f8:	4662      	mov	r2, ip
 800c8fa:	4629      	mov	r1, r5
 800c8fc:	f7ff f8f4 	bl	800bae8 <q2hpr>
 800c900:	edd5 6a00 	vldr	s13, [r5]
 800c904:	ed95 7a01 	vldr	s14, [r5, #4]
 800c908:	edd5 7a02 	vldr	s15, [r5, #8]
 800c90c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800c95c <output_update+0x19c>
 800c910:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c914:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c918:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c91c:	ed85 7a01 	vstr	s14, [r5, #4]
 800c920:	edc5 6a00 	vstr	s13, [r5]
 800c924:	edc5 7a02 	vstr	s15, [r5, #8]
 800c928:	ed97 7a00 	vldr	s14, [r7]
 800c92c:	edd6 7a00 	vldr	s15, [r6]
 800c930:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c934:	edc8 7a00 	vstr	s15, [r8]
 800c938:	ed97 7a01 	vldr	s14, [r7, #4]
 800c93c:	edd6 7a01 	vldr	s15, [r6, #4]
 800c940:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c944:	edc8 7a01 	vstr	s15, [r8, #4]
 800c948:	edd6 7a02 	vldr	s15, [r6, #8]
 800c94c:	ed97 7a02 	vldr	s14, [r7, #8]
 800c950:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c954:	edc8 7a02 	vstr	s15, [r8, #8]
 800c958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c95c:	42652ee1 	.word	0x42652ee1

0800c960 <kalman_3gyro.constprop.0>:
 800c960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c964:	ed2d 8b10 	vpush	{d8-d15}
 800c968:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800c96c:	edd2 9a02 	vldr	s19, [r2, #8]
 800c970:	edd2 8a03 	vldr	s17, [r2, #12]
 800c974:	edd2 6a04 	vldr	s13, [r2, #16]
 800c978:	ed92 6a05 	vldr	s12, [r2, #20]
 800c97c:	6854      	ldr	r4, [r2, #4]
 800c97e:	f2ad 7dcc 	subw	sp, sp, #1996	; 0x7cc
 800c982:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800c986:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c98a:	4683      	mov	fp, r0
 800c98c:	edd2 7a00 	vldr	s15, [r2]
 800c990:	48e3      	ldr	r0, [pc, #908]	; (800cd20 <kalman_3gyro.constprop.0+0x3c0>)
 800c992:	9108      	str	r1, [sp, #32]
 800c994:	904a      	str	r0, [sp, #296]	; 0x128
 800c996:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
 800c99a:	460d      	mov	r5, r1
 800c99c:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	9328      	str	r3, [sp, #160]	; 0xa0
 800c9a4:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800c9a8:	edcd 7a29 	vstr	s15, [sp, #164]	; 0xa4
 800c9ac:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 800c9b0:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 800c9b4:	ed8d 7a7a 	vstr	s14, [sp, #488]	; 0x1e8
 800c9b8:	edcd 7a42 	vstr	s15, [sp, #264]	; 0x108
 800c9bc:	edcd 7a43 	vstr	s15, [sp, #268]	; 0x10c
 800c9c0:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800c9c4:	edcd 6a78 	vstr	s13, [sp, #480]	; 0x1e0
 800c9c8:	ed8d 6a79 	vstr	s12, [sp, #484]	; 0x1e4
 800c9cc:	ed8d 0a45 	vstr	s0, [sp, #276]	; 0x114
 800c9d0:	946f      	str	r4, [sp, #444]	; 0x1bc
 800c9d2:	9470      	str	r4, [sp, #448]	; 0x1c0
 800c9d4:	9471      	str	r4, [sp, #452]	; 0x1c4
 800c9d6:	edcd 9a72 	vstr	s19, [sp, #456]	; 0x1c8
 800c9da:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800c9de:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800c9e2:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800c9e6:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800c9ea:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800c9ee:	eeb0 8a60 	vmov.f32	s16, s1
 800c9f2:	ed8d 0a46 	vstr	s0, [sp, #280]	; 0x118
 800c9f6:	ed8d 0a47 	vstr	s0, [sp, #284]	; 0x11c
 800c9fa:	ed8d 1a07 	vstr	s2, [sp, #28]
 800c9fe:	f00a fd2f 	bl	8017460 <memset>
 800ca02:	f50d 61d8 	add.w	r1, sp, #1728	; 0x6c0
 800ca06:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ca0a:	600b      	str	r3, [r1, #0]
 800ca0c:	f20d 61f4 	addw	r1, sp, #1780	; 0x6f4
 800ca10:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800ca14:	600b      	str	r3, [r1, #0]
 800ca16:	f50d 61e5 	add.w	r1, sp, #1832	; 0x728
 800ca1a:	600b      	str	r3, [r1, #0]
 800ca1c:	f20d 715c 	addw	r1, sp, #1884	; 0x75c
 800ca20:	600b      	str	r3, [r1, #0]
 800ca22:	f50d 61f2 	add.w	r1, sp, #1936	; 0x790
 800ca26:	600b      	str	r3, [r1, #0]
 800ca28:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
 800ca2c:	600b      	str	r3, [r1, #0]
 800ca2e:	2a00      	cmp	r2, #0
 800ca30:	f001 82c2 	beq.w	800dfb8 <kalman_3gyro.constprop.0+0x1658>
 800ca34:	ed95 5a02 	vldr	s10, [r5, #8]
 800ca38:	edd5 5a01 	vldr	s11, [r5, #4]
 800ca3c:	ed95 3a00 	vldr	s6, [r5]
 800ca40:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800ca44:	ee65 4aa7 	vmul.f32	s9, s11, s15
 800ca48:	ee35 4a05 	vadd.f32	s8, s10, s10
 800ca4c:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800ca50:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ca54:	ee63 7a27 	vmul.f32	s15, s6, s15
 800ca58:	ee33 3a03 	vadd.f32	s6, s6, s6
 800ca5c:	9b08      	ldr	r3, [sp, #32]
 800ca5e:	f20d 621c 	addw	r2, sp, #1564	; 0x61c
 800ca62:	ed82 4a00 	vstr	s8, [r2]
 800ca66:	f50d 62c4 	add.w	r2, sp, #1568	; 0x620
 800ca6a:	edc2 4a00 	vstr	s9, [r2]
 800ca6e:	ed93 6a05 	vldr	s12, [r3, #20]
 800ca72:	edd3 6a04 	vldr	s13, [r3, #16]
 800ca76:	ed93 7a03 	vldr	s14, [r3, #12]
 800ca7a:	edcd 6a51 	vstr	s13, [sp, #324]	; 0x144
 800ca7e:	f50d 62c9 	add.w	r2, sp, #1608	; 0x648
 800ca82:	ed82 5a00 	vstr	s10, [r2]
 800ca86:	f50d 62ca 	add.w	r2, sp, #1616	; 0x650
 800ca8a:	ed82 3a00 	vstr	s6, [r2]
 800ca8e:	eef1 3a46 	vneg.f32	s7, s12
 800ca92:	f50d 62cf 	add.w	r2, sp, #1656	; 0x678
 800ca96:	edc2 5a00 	vstr	s11, [r2]
 800ca9a:	eeb1 4a66 	vneg.f32	s8, s13
 800ca9e:	ee33 5aa3 	vadd.f32	s10, s7, s7
 800caa2:	f20d 627c 	addw	r2, sp, #1660	; 0x67c
 800caa6:	edc2 7a00 	vstr	s15, [r2]
 800caaa:	ee34 3a04 	vadd.f32	s6, s8, s8
 800caae:	f20d 6254 	addw	r2, sp, #1620	; 0x654
 800cab2:	eef1 4a47 	vneg.f32	s9, s14
 800cab6:	ed82 5a00 	vstr	s10, [r2]
 800caba:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
 800cabe:	ee36 5aa6 	vadd.f32	s10, s13, s13
 800cac2:	ed81 3a00 	vstr	s6, [r1]
 800cac6:	ee74 5aa4 	vadd.f32	s11, s9, s9
 800caca:	f20d 6184 	addw	r1, sp, #1668	; 0x684
 800cace:	ed81 5a00 	vstr	s10, [r1]
 800cad2:	ee77 7a07 	vadd.f32	s15, s14, s14
 800cad6:	f50d 61d1 	add.w	r1, sp, #1672	; 0x688
 800cada:	edc1 5a00 	vstr	s11, [r1]
 800cade:	f20d 615c 	addw	r1, sp, #1628	; 0x65c
 800cae2:	edc1 7a00 	vstr	s15, [r1]
 800cae6:	f50d 61c3 	add.w	r1, sp, #1560	; 0x618
 800caea:	2300      	movs	r3, #0
 800caec:	600b      	str	r3, [r1, #0]
 800caee:	f20d 614c 	addw	r1, sp, #1612	; 0x64c
 800caf2:	ee76 2a06 	vadd.f32	s5, s12, s12
 800caf6:	600b      	str	r3, [r1, #0]
 800caf8:	f50d 61d0 	add.w	r1, sp, #1664	; 0x680
 800cafc:	f50d 62c5 	add.w	r2, sp, #1576	; 0x628
 800cb00:	600b      	str	r3, [r1, #0]
 800cb02:	f20d 6124 	addw	r1, sp, #1572	; 0x624
 800cb06:	edc2 2a00 	vstr	s5, [r2]
 800cb0a:	600b      	str	r3, [r1, #0]
 800cb0c:	f50d 61cb 	add.w	r1, sp, #1624	; 0x658
 800cb10:	f04f 3401 	mov.w	r4, #16843009	; 0x1010101
 800cb14:	600b      	str	r3, [r1, #0]
 800cb16:	f20d 618c 	addw	r1, sp, #1676	; 0x68c
 800cb1a:	a87b      	add	r0, sp, #492	; 0x1ec
 800cb1c:	600b      	str	r3, [r1, #0]
 800cb1e:	2230      	movs	r2, #48	; 0x30
 800cb20:	2100      	movs	r1, #0
 800cb22:	ed8d 7a50 	vstr	s14, [sp, #320]	; 0x140
 800cb26:	934b      	str	r3, [sp, #300]	; 0x12c
 800cb28:	934f      	str	r3, [sp, #316]	; 0x13c
 800cb2a:	9353      	str	r3, [sp, #332]	; 0x14c
 800cb2c:	edcd 3a4e 	vstr	s7, [sp, #312]	; 0x138
 800cb30:	ed8d 6a4c 	vstr	s12, [sp, #304]	; 0x130
 800cb34:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800cb38:	edcd 4a52 	vstr	s9, [sp, #328]	; 0x148
 800cb3c:	e9cd 442a 	strd	r4, r4, [sp, #168]	; 0xa8
 800cb40:	942c      	str	r4, [sp, #176]	; 0xb0
 800cb42:	f00a fc8d 	bl	8017460 <memset>
 800cb46:	eddb 6a06 	vldr	s13, [fp, #24]
 800cb4a:	ed9b 7a07 	vldr	s14, [fp, #28]
 800cb4e:	eddb 7a08 	vldr	s15, [fp, #32]
 800cb52:	f89b 31ac 	ldrb.w	r3, [fp, #428]	; 0x1ac
 800cb56:	ee68 6a26 	vmul.f32	s13, s16, s13
 800cb5a:	ee28 7a07 	vmul.f32	s14, s16, s14
 800cb5e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800cb62:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 800cb66:	ed8d 7a15 	vstr	s14, [sp, #84]	; 0x54
 800cb6a:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f043 84a8 	bne.w	80104c4 <kalman_3gyro.constprop.0+0x3b64>
 800cb74:	f89b 3318 	ldrb.w	r3, [fp, #792]	; 0x318
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f043 81e7 	bne.w	800ff4c <kalman_3gyro.constprop.0+0x35ec>
 800cb7e:	f20b 6324 	addw	r3, fp, #1572	; 0x624
 800cb82:	9304      	str	r3, [sp, #16]
 800cb84:	f20b 7394 	addw	r3, fp, #1940	; 0x794
 800cb88:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800cb8c:	9310      	str	r3, [sp, #64]	; 0x40
 800cb8e:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800cb92:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 800cb96:	f50b 63f3 	add.w	r3, fp, #1944	; 0x798
 800cb9a:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb9c:	f50b 6013 	add.w	r0, fp, #2352	; 0x930
 800cba0:	edd0 7a00 	vldr	s15, [r0]
 800cba4:	f60b 133c 	addw	r3, fp, #2364	; 0x93c
 800cba8:	f60b 1134 	addw	r1, fp, #2356	; 0x934
 800cbac:	f60b 1238 	addw	r2, fp, #2360	; 0x938
 800cbb0:	ed93 6a00 	vldr	s12, [r3]
 800cbb4:	ed91 7a00 	vldr	s14, [r1]
 800cbb8:	edd2 6a00 	vldr	s13, [r2]
 800cbbc:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800cbc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbca:	ed8d 7a37 	vstr	s14, [sp, #220]	; 0xdc
 800cbce:	edcd 6a38 	vstr	s13, [sp, #224]	; 0xe0
 800cbd2:	ed8d 6a39 	vstr	s12, [sp, #228]	; 0xe4
 800cbd6:	933a      	str	r3, [sp, #232]	; 0xe8
 800cbd8:	933b      	str	r3, [sp, #236]	; 0xec
 800cbda:	933c      	str	r3, [sp, #240]	; 0xf0
 800cbdc:	933d      	str	r3, [sp, #244]	; 0xf4
 800cbde:	d14e      	bne.n	800cc7e <kalman_3gyro.constprop.0+0x31e>
 800cbe0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe8:	d149      	bne.n	800cc7e <kalman_3gyro.constprop.0+0x31e>
 800cbea:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf2:	d144      	bne.n	800cc7e <kalman_3gyro.constprop.0+0x31e>
 800cbf4:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbfc:	d13f      	bne.n	800cc7e <kalman_3gyro.constprop.0+0x31e>
 800cbfe:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800cc00:	9336      	str	r3, [sp, #216]	; 0xd8
 800cc02:	7802      	ldrb	r2, [r0, #0]
 800cc04:	9337      	str	r3, [sp, #220]	; 0xdc
 800cc06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cc0a:	9338      	str	r3, [sp, #224]	; 0xe0
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	ed90 7a03 	vldr	s14, [r0, #12]
 800cc12:	edd0 6a01 	vldr	s13, [r0, #4]
 800cc16:	edd0 7a02 	vldr	s15, [r0, #8]
 800cc1a:	9139      	str	r1, [sp, #228]	; 0xe4
 800cc1c:	f88b 31ac 	strb.w	r3, [fp, #428]	; 0x1ac
 800cc20:	2a00      	cmp	r2, #0
 800cc22:	f003 8568 	beq.w	80106f6 <kalman_3gyro.constprop.0+0x3d96>
 800cc26:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cc2a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800cc2e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cc32:	eef1 6ae7 	vsqrt.f32	s13, s15
 800cc36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc3a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cc3e:	f8cb 31cc 	str.w	r3, [fp, #460]	; 0x1cc
 800cc42:	f8cb 31d0 	str.w	r3, [fp, #464]	; 0x1d0
 800cc46:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 800cc50:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 800cc54:	f00a fc04 	bl	8017460 <memset>
 800cc58:	4b32      	ldr	r3, [pc, #200]	; (800cd24 <kalman_3gyro.constprop.0+0x3c4>)
 800cc5a:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 800cc5e:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 800cc62:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 800cc66:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 800cc6a:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 800cc6e:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 800cc72:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 800cc76:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 800cc7a:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 800cc7e:	9b08      	ldr	r3, [sp, #32]
 800cc80:	ed9f 6a29 	vldr	s12, [pc, #164]	; 800cd28 <kalman_3gyro.constprop.0+0x3c8>
 800cc84:	ed93 7a01 	vldr	s14, [r3, #4]
 800cc88:	edd3 5a00 	vldr	s11, [r3]
 800cc8c:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc90:	ee67 6a07 	vmul.f32	s13, s14, s14
 800cc94:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800cc98:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800cc9c:	eef4 6ac6 	vcmpe.f32	s13, s12
 800cca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca4:	f101 8127 	bmi.w	800def6 <kalman_3gyro.constprop.0+0x1596>
 800cca8:	eeb1 9ae6 	vsqrt.f32	s18, s13
 800ccac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccb0:	ee79 6a66 	vsub.f32	s13, s18, s13
 800ccb4:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 800ccb8:	eef0 6ae6 	vabs.f32	s13, s13
 800ccbc:	ee76 aaea 	vsub.f32	s21, s13, s21
 800ccc0:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800ccc4:	ed93 5a04 	vldr	s10, [r3, #16]
 800ccc8:	ed93 3a03 	vldr	s6, [r3, #12]
 800cccc:	edd3 1a05 	vldr	s3, [r3, #20]
 800ccd0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800cd28 <kalman_3gyro.constprop.0+0x3c8>
 800ccd4:	9b04      	ldr	r3, [sp, #16]
 800ccd6:	ed95 ca00 	vldr	s24, [r5]
 800ccda:	ed93 ba00 	vldr	s22, [r3]
 800ccde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cce2:	ee86 2a89 	vdiv.f32	s4, s13, s18
 800cce6:	f20b 43bc 	addw	r3, fp, #1212	; 0x4bc
 800ccea:	461e      	mov	r6, r3
 800ccec:	f20b 652c 	addw	r5, fp, #1580	; 0x62c
 800ccf0:	9502      	str	r5, [sp, #8]
 800ccf2:	f50b 619d 	add.w	r1, fp, #1256	; 0x4e8
 800ccf6:	f20b 4aec 	addw	sl, fp, #1260	; 0x4ec
 800ccfa:	9327      	str	r3, [sp, #156]	; 0x9c
 800ccfc:	f50b 6598 	add.w	r5, fp, #1216	; 0x4c0
 800cd00:	f50b 639c 	add.w	r3, fp, #1248	; 0x4e0
 800cd04:	f20b 44c4 	addw	r4, fp, #1220	; 0x4c4
 800cd08:	f20b 40dc 	addw	r0, fp, #1244	; 0x4dc
 800cd0c:	f50b 6299 	add.w	r2, fp, #1224	; 0x4c8
 800cd10:	9501      	str	r5, [sp, #4]
 800cd12:	ee65 6a05 	vmul.f32	s13, s10, s10
 800cd16:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 800cd1a:	eee3 6a03 	vfma.f32	s13, s6, s6
 800cd1e:	e009      	b.n	800cd34 <kalman_3gyro.constprop.0+0x3d4>
 800cd20:	3a9d4952 	.word	0x3a9d4952
 800cd24:	40a00000 	.word	0x40a00000
 800cd28:	3c23d70a 	.word	0x3c23d70a
 800cd2c:	3dcccccd 	.word	0x3dcccccd
 800cd30:	4b000000 	.word	0x4b000000
 800cd34:	f20b 4ccc 	addw	ip, fp, #1228	; 0x4cc
 800cd38:	f20b 45e4 	addw	r5, fp, #1252	; 0x4e4
 800cd3c:	ee25 8a82 	vmul.f32	s16, s11, s4
 800cd40:	eee1 6aa1 	vfma.f32	s13, s3, s3
 800cd44:	950c      	str	r5, [sp, #48]	; 0x30
 800cd46:	f50b 69c7 	add.w	r9, fp, #1592	; 0x638
 800cd4a:	ee67 fa02 	vmul.f32	s31, s14, s4
 800cd4e:	eef4 6ac6 	vcmpe.f32	s13, s12
 800cd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd56:	bf58      	it	pl
 800cd58:	eeb1 aae6 	vsqrtpl.f32	s20, s13
 800cd5c:	f20b 6e5c 	addw	lr, fp, #1628	; 0x65c
 800cd60:	f20b 6534 	addw	r5, fp, #1588	; 0x634
 800cd64:	bf48      	it	mi
 800cd66:	ed1f aa0f 	vldrmi	s20, [pc, #-60]	; 800cd2c <kalman_3gyro.constprop.0+0x3cc>
 800cd6a:	ed96 6a00 	vldr	s12, [r6]
 800cd6e:	edda 4a00 	vldr	s9, [sl]
 800cd72:	ed93 fa00 	vldr	s30, [r3]
 800cd76:	ed90 ea00 	vldr	s28, [r0]
 800cd7a:	edd4 3a00 	vldr	s7, [r4]
 800cd7e:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800cd82:	eec4 6a0a 	vdiv.f32	s13, s8, s20
 800cd86:	f20b 76a4 	addw	r6, fp, #1956	; 0x7a4
 800cd8a:	9617      	str	r6, [sp, #92]	; 0x5c
 800cd8c:	f20b 76bc 	addw	r6, fp, #1980	; 0x7bc
 800cd90:	961a      	str	r6, [sp, #104]	; 0x68
 800cd92:	f20b 769c 	addw	r6, fp, #1948	; 0x79c
 800cd96:	9611      	str	r6, [sp, #68]	; 0x44
 800cd98:	f50b 66f5 	add.w	r6, fp, #1960	; 0x7a8
 800cd9c:	9618      	str	r6, [sp, #96]	; 0x60
 800cd9e:	9e02      	ldr	r6, [sp, #8]
 800cda0:	f50b 63c6 	add.w	r3, fp, #1584	; 0x630
 800cda4:	9303      	str	r3, [sp, #12]
 800cda6:	f20b 604c 	addw	r0, fp, #1612	; 0x64c
 800cdaa:	ee27 2a82 	vmul.f32	s4, s15, s4
 800cdae:	ee23 3a26 	vmul.f32	s6, s6, s13
 800cdb2:	ee25 5a26 	vmul.f32	s10, s10, s13
 800cdb6:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800cdba:	edd1 6a00 	vldr	s13, [r1]
 800cdbe:	edcd fa2e 	vstr	s31, [sp, #184]	; 0xb8
 800cdc2:	ed8d 3a30 	vstr	s6, [sp, #192]	; 0xc0
 800cdc6:	ed8d 5a31 	vstr	s10, [sp, #196]	; 0xc4
 800cdca:	edcd 6a05 	vstr	s13, [sp, #20]
 800cdce:	ed8d 6a06 	vstr	s12, [sp, #24]
 800cdd2:	edcd 4a09 	vstr	s9, [sp, #36]	; 0x24
 800cdd6:	ed92 6a00 	vldr	s12, [r2]
 800cdda:	ed8d 2a2f 	vstr	s4, [sp, #188]	; 0xbc
 800cdde:	edcd 1a32 	vstr	s3, [sp, #200]	; 0xc8
 800cde2:	edd6 2a00 	vldr	s5, [r6]
 800cde6:	eddc 4a00 	vldr	s9, [ip]
 800cdea:	9e01      	ldr	r6, [sp, #4]
 800cdec:	edd0 ca00 	vldr	s25, [r0]
 800cdf0:	ed96 1a00 	vldr	s2, [r6]
 800cdf4:	9803      	ldr	r0, [sp, #12]
 800cdf6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cdf8:	edcd 4a0a 	vstr	s9, [sp, #40]	; 0x28
 800cdfc:	f50b 6c9e 	add.w	ip, fp, #1264	; 0x4f0
 800ce00:	eddc 0a00 	vldr	s1, [ip]
 800ce04:	ed96 da00 	vldr	s26, [r6]
 800ce08:	edd0 4a00 	vldr	s9, [r0]
 800ce0c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ce0e:	edcd 4a22 	vstr	s9, [sp, #136]	; 0x88
 800ce12:	f50b 6cf8 	add.w	ip, fp, #1984	; 0x7c0
 800ce16:	eec4 da0c 	vdiv.f32	s27, s8, s24
 800ce1a:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 800ce1e:	f20b 7ccc 	addw	ip, fp, #1996	; 0x7cc
 800ce22:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800ce26:	f50b 6cf4 	add.w	ip, fp, #1952	; 0x7a0
 800ce2a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800ce2e:	f20b 7cac 	addw	ip, fp, #1964	; 0x7ac
 800ce32:	f8cd c064 	str.w	ip, [sp, #100]	; 0x64
 800ce36:	f50b 6cf9 	add.w	ip, fp, #1992	; 0x7c8
 800ce3a:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 800ce3e:	f20b 7cc4 	addw	ip, fp, #1988	; 0x7c4
 800ce42:	f20b 6354 	addw	r3, fp, #1620	; 0x654
 800ce46:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
 800ce4a:	f50b 64cb 	add.w	r4, fp, #1624	; 0x658
 800ce4e:	edd6 4a00 	vldr	s9, [r6]
 800ce52:	edd9 6a00 	vldr	s13, [r9]
 800ce56:	edde ba00 	vldr	s23, [lr]
 800ce5a:	ed95 4a00 	vldr	s8, [r5]
 800ce5e:	ed94 0a00 	vldr	s0, [r4]
 800ce62:	edcd 2a14 	vstr	s5, [sp, #80]	; 0x50
 800ce66:	f50b 6cfa 	add.w	ip, fp, #2000	; 0x7d0
 800ce6a:	f20b 613c 	addw	r1, fp, #1596	; 0x63c
 800ce6e:	f50b 62cc 	add.w	r2, fp, #1632	; 0x660
 800ce72:	f50b 69ca 	add.w	r9, fp, #1616	; 0x650
 800ce76:	edd9 ea00 	vldr	s29, [r9]
 800ce7a:	edd1 2a00 	vldr	s5, [r1]
 800ce7e:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
 800ce82:	edcd ca0c 	vstr	s25, [sp, #48]	; 0x30
 800ce86:	ed92 1a00 	vldr	s2, [r2]
 800ce8a:	edd3 ca00 	vldr	s25, [r3]
 800ce8e:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800ce92:	edcd 4a24 	vstr	s9, [sp, #144]	; 0x90
 800ce96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce98:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800ce9a:	edd3 4a00 	vldr	s9, [r3]
 800ce9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cea0:	edcd 4a23 	vstr	s9, [sp, #140]	; 0x8c
 800cea4:	ee25 5a2f 	vmul.f32	s10, s10, s31
 800cea8:	edd3 fa00 	vldr	s31, [r3]
 800ceac:	eef0 4a6f 	vmov.f32	s9, s31
 800ceb0:	edd6 fa00 	vldr	s31, [r6]
 800ceb4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800ceb6:	edcd fa25 	vstr	s31, [sp, #148]	; 0x94
 800ceba:	eea3 5a08 	vfma.f32	s10, s6, s16
 800cebe:	ed96 3a00 	vldr	s6, [r6]
 800cec2:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800cec4:	ed8d 3a26 	vstr	s6, [sp, #152]	; 0x98
 800cec8:	ee25 8aad 	vmul.f32	s16, s11, s27
 800cecc:	eddd 5a06 	vldr	s11, [sp, #24]
 800ced0:	edd6 fa00 	vldr	s31, [r6]
 800ced4:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800ced6:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 800ceda:	ee95 6a83 	vfnms.f32	s12, s11, s6
 800cede:	eddd 5a14 	vldr	s11, [sp, #80]	; 0x50
 800cee2:	eed5 6a83 	vfnms.f32	s13, s11, s6
 800cee6:	eddd 5a26 	vldr	s11, [sp, #152]	; 0x98
 800ceea:	eed5 fa83 	vfnms.f32	s31, s11, s6
 800ceee:	edd8 5a00 	vldr	s11, [r8]
 800cef2:	eed5 3a83 	vfnms.f32	s7, s11, s6
 800cef6:	eef0 5a44 	vmov.f32	s11, s8
 800cefa:	ed97 4a00 	vldr	s8, [r7]
 800cefe:	ee76 6aae 	vadd.f32	s13, s13, s29
 800cf02:	eed4 5a03 	vfnms.f32	s11, s8, s6
 800cf06:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800cf0a:	ed9d 4a24 	vldr	s8, [sp, #144]	; 0x90
 800cf0e:	eede 2a83 	vfnms.f32	s5, s29, s6
 800cf12:	ee94 4a83 	vfnms.f32	s8, s9, s6
 800cf16:	ee73 3a8e 	vadd.f32	s7, s7, s28
 800cf1a:	eddd 4a0a 	vldr	s9, [sp, #40]	; 0x28
 800cf1e:	ed9d ea0b 	vldr	s28, [sp, #44]	; 0x2c
 800cf22:	eede 4a03 	vfnms.f32	s9, s28, s6
 800cf26:	ed9d ea0c 	vldr	s28, [sp, #48]	; 0x30
 800cf2a:	ee72 2aac 	vadd.f32	s5, s5, s25
 800cf2e:	ee75 5a8e 	vadd.f32	s11, s11, s28
 800cf32:	edd6 ca00 	vldr	s25, [r6]
 800cf36:	ed9d ea25 	vldr	s28, [sp, #148]	; 0x94
 800cf3a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cf3c:	ee34 4a0e 	vadd.f32	s8, s8, s28
 800cf40:	ed96 ea00 	vldr	s28, [r6]
 800cf44:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800cf46:	ee74 4a8d 	vadd.f32	s9, s9, s26
 800cf4a:	ed96 da00 	vldr	s26, [r6]
 800cf4e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800cf50:	ee7f faac 	vadd.f32	s31, s31, s25
 800cf54:	edd6 ca00 	vldr	s25, [r6]
 800cf58:	eedd ca03 	vfnms.f32	s25, s26, s6
 800cf5c:	ed9d da09 	vldr	s26, [sp, #36]	; 0x24
 800cf60:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cf62:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800cf66:	eeeb 6a83 	vfma.f32	s13, s23, s6
 800cf6a:	eee0 5a03 	vfma.f32	s11, s0, s6
 800cf6e:	eddd ba05 	vldr	s23, [sp, #20]
 800cf72:	ed96 0a00 	vldr	s0, [r6]
 800cf76:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800cf78:	ee36 6a0f 	vadd.f32	s12, s12, s30
 800cf7c:	eeee fa03 	vfma.f32	s31, s28, s6
 800cf80:	eead 6a03 	vfma.f32	s12, s26, s6
 800cf84:	eeeb 3a83 	vfma.f32	s7, s23, s6
 800cf88:	eea0 4a03 	vfma.f32	s8, s0, s6
 800cf8c:	eddd ba23 	vldr	s23, [sp, #140]	; 0x8c
 800cf90:	ed1f 0a9a 	vldr	s0, [pc, #-616]	; 800cd2c <kalman_3gyro.constprop.0+0x3cc>
 800cf94:	eee1 2a03 	vfma.f32	s5, s2, s6
 800cf98:	ee2c ca00 	vmul.f32	s24, s24, s0
 800cf9c:	ee6b ba80 	vmul.f32	s23, s23, s0
 800cfa0:	ed96 1a00 	vldr	s2, [r6]
 800cfa4:	ee2b 0a00 	vmul.f32	s0, s22, s0
 800cfa8:	eee0 4a83 	vfma.f32	s9, s1, s6
 800cfac:	ee26 6a0c 	vmul.f32	s12, s12, s24
 800cfb0:	ee6f faab 	vmul.f32	s31, s31, s23
 800cfb4:	ee3c 1a81 	vadd.f32	s2, s25, s2
 800cfb8:	ee60 6a26 	vmul.f32	s13, s0, s13
 800cfbc:	eddc 0a00 	vldr	s1, [ip]
 800cfc0:	ee63 3a8c 	vmul.f32	s7, s7, s24
 800cfc4:	ee24 4a2b 	vmul.f32	s8, s8, s23
 800cfc8:	ee60 5a25 	vmul.f32	s11, s0, s11
 800cfcc:	eea0 1a83 	vfma.f32	s2, s1, s6
 800cfd0:	ee26 6a06 	vmul.f32	s12, s12, s12
 800cfd4:	ee6f faaf 	vmul.f32	s31, s31, s31
 800cfd8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800cfdc:	eea3 6aa3 	vfma.f32	s12, s7, s7
 800cfe0:	eee5 6aa5 	vfma.f32	s13, s11, s11
 800cfe4:	eee4 fa04 	vfma.f32	s31, s8, s8
 800cfe8:	ee64 4a8c 	vmul.f32	s9, s9, s24
 800cfec:	ee21 1a2b 	vmul.f32	s2, s2, s23
 800cff0:	ee60 2a22 	vmul.f32	s5, s0, s5
 800cff4:	eea4 6aa4 	vfma.f32	s12, s9, s9
 800cff8:	eee1 fa01 	vfma.f32	s31, s2, s2
 800cffc:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800d000:	eea1 5a82 	vfma.f32	s10, s3, s4
 800d004:	ed5f 5ab6 	vldr	s11, [pc, #-728]	; 800cd30 <kalman_3gyro.constprop.0+0x3d0>
 800d008:	eef0 4ac8 	vabs.f32	s9, s16
 800d00c:	eef4 4ae5 	vcmpe.f32	s9, s11
 800d010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d014:	ee27 ea2d 	vmul.f32	s28, s14, s27
 800d018:	eeb1 dac6 	vsqrt.f32	s26, s12
 800d01c:	eef1 caef 	vsqrt.f32	s25, s31
 800d020:	eef1 bae6 	vsqrt.f32	s23, s13
 800d024:	ee67 daad 	vmul.f32	s27, s15, s27
 800d028:	eeb0 ca45 	vmov.f32	s24, s10
 800d02c:	d517      	bpl.n	800d05e <kalman_3gyro.constprop.0+0x6fe>
 800d02e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d032:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d03a:	f2c1 806f 	blt.w	800e11c <kalman_3gyro.constprop.0+0x17bc>
 800d03e:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d042:	ee17 0a90 	vmov	r0, s15
 800d046:	f7f3 fa7f 	bl	8000548 <__aeabi_f2d>
 800d04a:	ec41 0b10 	vmov	d0, r0, r1
 800d04e:	f008 fb3f 	bl	80156d0 <floor>
 800d052:	ec51 0b10 	vmov	r0, r1, d0
 800d056:	f7f3 fda7 	bl	8000ba8 <__aeabi_d2f>
 800d05a:	ee08 0a10 	vmov	s16, r0
 800d05e:	ed5f 7acc 	vldr	s15, [pc, #-816]	; 800cd30 <kalman_3gyro.constprop.0+0x3d0>
 800d062:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
 800d066:	eef0 6ace 	vabs.f32	s13, s28
 800d06a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d072:	d517      	bpl.n	800d0a4 <kalman_3gyro.constprop.0+0x744>
 800d074:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d078:	eeb4 eae7 	vcmpe.f32	s28, s15
 800d07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d080:	f2c1 8040 	blt.w	800e104 <kalman_3gyro.constprop.0+0x17a4>
 800d084:	ee7e 7a27 	vadd.f32	s15, s28, s15
 800d088:	ee17 0a90 	vmov	r0, s15
 800d08c:	f7f3 fa5c 	bl	8000548 <__aeabi_f2d>
 800d090:	ec41 0b10 	vmov	d0, r0, r1
 800d094:	f008 fb1c 	bl	80156d0 <floor>
 800d098:	ec51 0b10 	vmov	r0, r1, d0
 800d09c:	f7f3 fd84 	bl	8000ba8 <__aeabi_d2f>
 800d0a0:	ee0e 0a10 	vmov	s28, r0
 800d0a4:	ed5f 7ade 	vldr	s15, [pc, #-888]	; 800cd30 <kalman_3gyro.constprop.0+0x3d0>
 800d0a8:	ed8d ea34 	vstr	s28, [sp, #208]	; 0xd0
 800d0ac:	eeb0 7aed 	vabs.f32	s14, s27
 800d0b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b8:	d517      	bpl.n	800d0ea <kalman_3gyro.constprop.0+0x78a>
 800d0ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d0be:	eef4 dae7 	vcmpe.f32	s27, s15
 800d0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c6:	f2c1 8011 	blt.w	800e0ec <kalman_3gyro.constprop.0+0x178c>
 800d0ca:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d0ce:	ee17 0a90 	vmov	r0, s15
 800d0d2:	f7f3 fa39 	bl	8000548 <__aeabi_f2d>
 800d0d6:	ec41 0b10 	vmov	d0, r0, r1
 800d0da:	f008 faf9 	bl	80156d0 <floor>
 800d0de:	ec51 0b10 	vmov	r0, r1, d0
 800d0e2:	f7f3 fd61 	bl	8000ba8 <__aeabi_d2f>
 800d0e6:	ee0d 0a90 	vmov	s27, r0
 800d0ea:	f89b 44b1 	ldrb.w	r4, [fp, #1201]	; 0x4b1
 800d0ee:	edcd da35 	vstr	s27, [sp, #212]	; 0xd4
 800d0f2:	1e61      	subs	r1, r4, #1
 800d0f4:	b249      	sxtb	r1, r1
 800d0f6:	2900      	cmp	r1, #0
 800d0f8:	dd1a      	ble.n	800d130 <kalman_3gyro.constprop.0+0x7d0>
 800d0fa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d0fe:	1ea0      	subs	r0, r4, #2
 800d100:	0089      	lsls	r1, r1, #2
 800d102:	f50b 6294 	add.w	r2, fp, #1184	; 0x4a0
 800d106:	b2c0      	uxtb	r0, r0
 800d108:	f201 43ac 	addw	r3, r1, #1196	; 0x4ac
 800d10c:	440a      	add	r2, r1
 800d10e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800d112:	445b      	add	r3, fp
 800d114:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
 800d118:	6819      	ldr	r1, [r3, #0]
 800d11a:	6858      	ldr	r0, [r3, #4]
 800d11c:	60d9      	str	r1, [r3, #12]
 800d11e:	6899      	ldr	r1, [r3, #8]
 800d120:	6118      	str	r0, [r3, #16]
 800d122:	6159      	str	r1, [r3, #20]
 800d124:	3b0c      	subs	r3, #12
 800d126:	4293      	cmp	r3, r2
 800d128:	d1f6      	bne.n	800d118 <kalman_3gyro.constprop.0+0x7b8>
 800d12a:	9b04      	ldr	r3, [sp, #16]
 800d12c:	ed93 ba00 	vldr	s22, [r3]
 800d130:	ed88 8a00 	vstr	s16, [r8]
 800d134:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d138:	ee87 8a8b 	vdiv.f32	s16, s15, s22
 800d13c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d13e:	ed83 ea00 	vstr	s28, [r3]
 800d142:	9b01      	ldr	r3, [sp, #4]
 800d144:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800d3dc <kalman_3gyro.constprop.0+0xa7c>
 800d148:	edc3 da00 	vstr	s27, [r3]
 800d14c:	f89b 34b0 	ldrb.w	r3, [fp, #1200]	; 0x4b0
 800d150:	3301      	adds	r3, #1
 800d152:	b2db      	uxtb	r3, r3
 800d154:	429c      	cmp	r4, r3
 800d156:	bf28      	it	cs
 800d158:	461c      	movcs	r4, r3
 800d15a:	9b08      	ldr	r3, [sp, #32]
 800d15c:	f88b 44b0 	strb.w	r4, [fp, #1200]	; 0x4b0
 800d160:	edd3 da03 	vldr	s27, [r3, #12]
 800d164:	ed93 ba04 	vldr	s22, [r3, #16]
 800d168:	edd3 6a05 	vldr	s13, [r3, #20]
 800d16c:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d170:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d174:	eeb0 7aed 	vabs.f32	s14, s27
 800d178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d180:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d184:	d517      	bpl.n	800d1b6 <kalman_3gyro.constprop.0+0x856>
 800d186:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d18a:	eef4 dae7 	vcmpe.f32	s27, s15
 800d18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d192:	f2c0 879f 	blt.w	800e0d4 <kalman_3gyro.constprop.0+0x1774>
 800d196:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d19a:	ee17 0a90 	vmov	r0, s15
 800d19e:	f7f3 f9d3 	bl	8000548 <__aeabi_f2d>
 800d1a2:	ec41 0b10 	vmov	d0, r0, r1
 800d1a6:	f008 fa93 	bl	80156d0 <floor>
 800d1aa:	ec51 0b10 	vmov	r0, r1, d0
 800d1ae:	f7f3 fcfb 	bl	8000ba8 <__aeabi_d2f>
 800d1b2:	ee0d 0a90 	vmov	s27, r0
 800d1b6:	eddf 7a89 	vldr	s15, [pc, #548]	; 800d3dc <kalman_3gyro.constprop.0+0xa7c>
 800d1ba:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d1be:	eeb0 7acb 	vabs.f32	s14, s22
 800d1c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ca:	d517      	bpl.n	800d1fc <kalman_3gyro.constprop.0+0x89c>
 800d1cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d1d0:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d8:	f2c0 8770 	blt.w	800e0bc <kalman_3gyro.constprop.0+0x175c>
 800d1dc:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d1e0:	ee17 0a90 	vmov	r0, s15
 800d1e4:	f7f3 f9b0 	bl	8000548 <__aeabi_f2d>
 800d1e8:	ec41 0b10 	vmov	d0, r0, r1
 800d1ec:	f008 fa70 	bl	80156d0 <floor>
 800d1f0:	ec51 0b10 	vmov	r0, r1, d0
 800d1f4:	f7f3 fcd8 	bl	8000ba8 <__aeabi_d2f>
 800d1f8:	ee0b 0a10 	vmov	s22, r0
 800d1fc:	eddf 7a77 	vldr	s15, [pc, #476]	; 800d3dc <kalman_3gyro.constprop.0+0xa7c>
 800d200:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d204:	eeb0 7ac8 	vabs.f32	s14, s16
 800d208:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d20c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d210:	d517      	bpl.n	800d242 <kalman_3gyro.constprop.0+0x8e2>
 800d212:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d216:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d21e:	f2c0 8741 	blt.w	800e0a4 <kalman_3gyro.constprop.0+0x1744>
 800d222:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d226:	ee17 0a90 	vmov	r0, s15
 800d22a:	f7f3 f98d 	bl	8000548 <__aeabi_f2d>
 800d22e:	ec41 0b10 	vmov	d0, r0, r1
 800d232:	f008 fa4d 	bl	80156d0 <floor>
 800d236:	ec51 0b10 	vmov	r0, r1, d0
 800d23a:	f7f3 fcb5 	bl	8000ba8 <__aeabi_d2f>
 800d23e:	ee08 0a10 	vmov	s16, r0
 800d242:	f89b 4621 	ldrb.w	r4, [fp, #1569]	; 0x621
 800d246:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d24a:	1e61      	subs	r1, r4, #1
 800d24c:	b249      	sxtb	r1, r1
 800d24e:	2900      	cmp	r1, #0
 800d250:	dd17      	ble.n	800d282 <kalman_3gyro.constprop.0+0x922>
 800d252:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800d256:	1ea2      	subs	r2, r4, #2
 800d258:	0089      	lsls	r1, r1, #2
 800d25a:	f50b 60c2 	add.w	r0, fp, #1552	; 0x610
 800d25e:	b2d2      	uxtb	r2, r2
 800d260:	f201 631c 	addw	r3, r1, #1564	; 0x61c
 800d264:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d268:	4401      	add	r1, r0
 800d26a:	445b      	add	r3, fp
 800d26c:	eba1 0182 	sub.w	r1, r1, r2, lsl #2
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	6858      	ldr	r0, [r3, #4]
 800d274:	60da      	str	r2, [r3, #12]
 800d276:	689a      	ldr	r2, [r3, #8]
 800d278:	6118      	str	r0, [r3, #16]
 800d27a:	615a      	str	r2, [r3, #20]
 800d27c:	3b0c      	subs	r3, #12
 800d27e:	4299      	cmp	r1, r3
 800d280:	d1f6      	bne.n	800d270 <kalman_3gyro.constprop.0+0x910>
 800d282:	9b02      	ldr	r3, [sp, #8]
 800d284:	edc7 da00 	vstr	s27, [r7]
 800d288:	ed83 ba00 	vstr	s22, [r3]
 800d28c:	9b03      	ldr	r3, [sp, #12]
 800d28e:	eddf 7a53 	vldr	s15, [pc, #332]	; 800d3dc <kalman_3gyro.constprop.0+0xa7c>
 800d292:	ed83 8a00 	vstr	s16, [r3]
 800d296:	f89b 3620 	ldrb.w	r3, [fp, #1568]	; 0x620
 800d29a:	3301      	adds	r3, #1
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	429c      	cmp	r4, r3
 800d2a0:	bf28      	it	cs
 800d2a2:	461c      	movcs	r4, r3
 800d2a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2a6:	f88b 4620 	strb.w	r4, [fp, #1568]	; 0x620
 800d2aa:	ed93 7a00 	vldr	s14, [r3]
 800d2ae:	9b08      	ldr	r3, [sp, #32]
 800d2b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d2b4:	ee86 8a07 	vdiv.f32	s16, s12, s14
 800d2b8:	edd3 da06 	vldr	s27, [r3, #24]
 800d2bc:	ed93 ba07 	vldr	s22, [r3, #28]
 800d2c0:	edd3 6a08 	vldr	s13, [r3, #32]
 800d2c4:	ee68 da2d 	vmul.f32	s27, s16, s27
 800d2c8:	ee28 ba0b 	vmul.f32	s22, s16, s22
 800d2cc:	eeb0 7aed 	vabs.f32	s14, s27
 800d2d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2d8:	ee28 8a26 	vmul.f32	s16, s16, s13
 800d2dc:	d517      	bpl.n	800d30e <kalman_3gyro.constprop.0+0x9ae>
 800d2de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d2e2:	eef4 dae7 	vcmpe.f32	s27, s15
 800d2e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2ea:	f2c0 86cf 	blt.w	800e08c <kalman_3gyro.constprop.0+0x172c>
 800d2ee:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800d2f2:	ee17 0a90 	vmov	r0, s15
 800d2f6:	f7f3 f927 	bl	8000548 <__aeabi_f2d>
 800d2fa:	ec41 0b10 	vmov	d0, r0, r1
 800d2fe:	f008 f9e7 	bl	80156d0 <floor>
 800d302:	ec51 0b10 	vmov	r0, r1, d0
 800d306:	f7f3 fc4f 	bl	8000ba8 <__aeabi_d2f>
 800d30a:	ee0d 0a90 	vmov	s27, r0
 800d30e:	eddf 7a33 	vldr	s15, [pc, #204]	; 800d3dc <kalman_3gyro.constprop.0+0xa7c>
 800d312:	edcd da33 	vstr	s27, [sp, #204]	; 0xcc
 800d316:	eeb0 7acb 	vabs.f32	s14, s22
 800d31a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d322:	d517      	bpl.n	800d354 <kalman_3gyro.constprop.0+0x9f4>
 800d324:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d328:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d32c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d330:	f2c0 86a0 	blt.w	800e074 <kalman_3gyro.constprop.0+0x1714>
 800d334:	ee7b 7a27 	vadd.f32	s15, s22, s15
 800d338:	ee17 0a90 	vmov	r0, s15
 800d33c:	f7f3 f904 	bl	8000548 <__aeabi_f2d>
 800d340:	ec41 0b10 	vmov	d0, r0, r1
 800d344:	f008 f9c4 	bl	80156d0 <floor>
 800d348:	ec51 0b10 	vmov	r0, r1, d0
 800d34c:	f7f3 fc2c 	bl	8000ba8 <__aeabi_d2f>
 800d350:	ee0b 0a10 	vmov	s22, r0
 800d354:	eddf 7a21 	vldr	s15, [pc, #132]	; 800d3dc <kalman_3gyro.constprop.0+0xa7c>
 800d358:	ed8d ba34 	vstr	s22, [sp, #208]	; 0xd0
 800d35c:	eeb0 7ac8 	vabs.f32	s14, s16
 800d360:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d368:	d517      	bpl.n	800d39a <kalman_3gyro.constprop.0+0xa3a>
 800d36a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d36e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d376:	f2c0 8671 	blt.w	800e05c <kalman_3gyro.constprop.0+0x16fc>
 800d37a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800d37e:	ee17 0a90 	vmov	r0, s15
 800d382:	f7f3 f8e1 	bl	8000548 <__aeabi_f2d>
 800d386:	ec41 0b10 	vmov	d0, r0, r1
 800d38a:	f008 f9a1 	bl	80156d0 <floor>
 800d38e:	ec51 0b10 	vmov	r0, r1, d0
 800d392:	f7f3 fc09 	bl	8000ba8 <__aeabi_d2f>
 800d396:	ee08 0a10 	vmov	s16, r0
 800d39a:	f89b 4791 	ldrb.w	r4, [fp, #1937]	; 0x791
 800d39e:	ed8d 8a35 	vstr	s16, [sp, #212]	; 0xd4
 800d3a2:	1e63      	subs	r3, r4, #1
 800d3a4:	b25b      	sxtb	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	dd1c      	ble.n	800d3e4 <kalman_3gyro.constprop.0+0xa84>
 800d3aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d3ae:	1ea2      	subs	r2, r4, #2
 800d3b0:	0099      	lsls	r1, r3, #2
 800d3b2:	f50b 60f0 	add.w	r0, fp, #1920	; 0x780
 800d3b6:	b2d2      	uxtb	r2, r2
 800d3b8:	f201 738c 	addw	r3, r1, #1932	; 0x78c
 800d3bc:	4408      	add	r0, r1
 800d3be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d3c2:	445b      	add	r3, fp
 800d3c4:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	6859      	ldr	r1, [r3, #4]
 800d3cc:	60da      	str	r2, [r3, #12]
 800d3ce:	689a      	ldr	r2, [r3, #8]
 800d3d0:	6119      	str	r1, [r3, #16]
 800d3d2:	615a      	str	r2, [r3, #20]
 800d3d4:	3b0c      	subs	r3, #12
 800d3d6:	4283      	cmp	r3, r0
 800d3d8:	d1f6      	bne.n	800d3c8 <kalman_3gyro.constprop.0+0xa68>
 800d3da:	e003      	b.n	800d3e4 <kalman_3gyro.constprop.0+0xa84>
 800d3dc:	4b000000 	.word	0x4b000000
 800d3e0:	00000000 	.word	0x00000000
 800d3e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3e6:	edc3 da00 	vstr	s27, [r3]
 800d3ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d3ec:	ed83 ba00 	vstr	s22, [r3]
 800d3f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d3f2:	ed83 8a00 	vstr	s16, [r3]
 800d3f6:	f89b 3790 	ldrb.w	r3, [fp, #1936]	; 0x790
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	429c      	cmp	r4, r3
 800d400:	bf28      	it	cs
 800d402:	461c      	movcs	r4, r3
 800d404:	f88b 4790 	strb.w	r4, [fp, #1936]	; 0x790
 800d408:	f50b 7347 	add.w	r3, fp, #796	; 0x31c
 800d40c:	aa54      	add	r2, sp, #336	; 0x150
 800d40e:	a92d      	add	r1, sp, #180	; 0xb4
 800d410:	a830      	add	r0, sp, #192	; 0xc0
 800d412:	461c      	mov	r4, r3
 800d414:	9314      	str	r3, [sp, #80]	; 0x50
 800d416:	f7fe fa27 	bl	800b868 <getRotationMatrix>
 800d41a:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d41e:	f50b 774f 	add.w	r7, fp, #828	; 0x33c
 800d422:	6820      	ldr	r0, [r4, #0]
 800d424:	6861      	ldr	r1, [r4, #4]
 800d426:	68a2      	ldr	r2, [r4, #8]
 800d428:	68e3      	ldr	r3, [r4, #12]
 800d42a:	4635      	mov	r5, r6
 800d42c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d42e:	3410      	adds	r4, #16
 800d430:	42bc      	cmp	r4, r7
 800d432:	462e      	mov	r6, r5
 800d434:	d1f5      	bne.n	800d422 <kalman_3gyro.constprop.0+0xac2>
 800d436:	eddb 7ac7 	vldr	s15, [fp, #796]	; 0x31c
 800d43a:	ed9b 7ac8 	vldr	s14, [fp, #800]	; 0x320
 800d43e:	6820      	ldr	r0, [r4, #0]
 800d440:	6028      	str	r0, [r5, #0]
 800d442:	eef0 7ae7 	vabs.f32	s15, s15
 800d446:	eeb0 7ac7 	vabs.f32	s14, s14
 800d44a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d452:	f140 85a4 	bpl.w	800df9e <kalman_3gyro.constprop.0+0x163e>
 800d456:	2303      	movs	r3, #3
 800d458:	2706      	movs	r7, #6
 800d45a:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800d45e:	2604      	movs	r6, #4
 800d460:	2400      	movs	r4, #0
 800d462:	eef0 7a47 	vmov.f32	s15, s14
 800d466:	4632      	mov	r2, r6
 800d468:	46a2      	mov	sl, r4
 800d46a:	2107      	movs	r1, #7
 800d46c:	f04f 0c01 	mov.w	ip, #1
 800d470:	ed9b 7ac9 	vldr	s14, [fp, #804]	; 0x324
 800d474:	eeb0 7ac7 	vabs.f32	s14, s14
 800d478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d480:	f340 85ae 	ble.w	800dfe0 <kalman_3gyro.constprop.0+0x1680>
 800d484:	2304      	movs	r3, #4
 800d486:	2007      	movs	r0, #7
 800d488:	2108      	movs	r1, #8
 800d48a:	9301      	str	r3, [sp, #4]
 800d48c:	461c      	mov	r4, r3
 800d48e:	9002      	str	r0, [sp, #8]
 800d490:	460a      	mov	r2, r1
 800d492:	2306      	movs	r3, #6
 800d494:	2003      	movs	r0, #3
 800d496:	2605      	movs	r6, #5
 800d498:	f04f 0800 	mov.w	r8, #0
 800d49c:	f04f 0a01 	mov.w	sl, #1
 800d4a0:	f04f 0c02 	mov.w	ip, #2
 800d4a4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d4a6:	442c      	add	r4, r5
 800d4a8:	442a      	add	r2, r5
 800d4aa:	edd4 6a00 	vldr	s13, [r4]
 800d4ae:	ed92 7a00 	vldr	s14, [r2]
 800d4b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4b6:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 800d4ba:	eb02 048a 	add.w	r4, r2, sl, lsl #2
 800d4be:	eb02 0988 	add.w	r9, r2, r8, lsl #2
 800d4c2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d4c6:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d4ca:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800d4ce:	970c      	str	r7, [sp, #48]	; 0x30
 800d4d0:	9f01      	ldr	r7, [sp, #4]
 800d4d2:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800d4d6:	00b6      	lsls	r6, r6, #2
 800d4d8:	960a      	str	r6, [sp, #40]	; 0x28
 800d4da:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d4de:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 800d4e2:	edc4 7a00 	vstr	s15, [r4]
 800d4e6:	edd2 7a00 	vldr	s15, [r2]
 800d4ea:	ed99 7a00 	vldr	s14, [r9]
 800d4ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800d4f2:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800d4f6:	9204      	str	r2, [sp, #16]
 800d4f8:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800d4fc:	9205      	str	r2, [sp, #20]
 800d4fe:	ea4f 028c 	mov.w	r2, ip, lsl #2
 800d502:	9209      	str	r2, [sp, #36]	; 0x24
 800d504:	00ba      	lsls	r2, r7, #2
 800d506:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800d508:	9206      	str	r2, [sp, #24]
 800d50a:	0080      	lsls	r0, r0, #2
 800d50c:	9003      	str	r0, [sp, #12]
 800d50e:	eb06 0081 	add.w	r0, r6, r1, lsl #2
 800d512:	0089      	lsls	r1, r1, #2
 800d514:	910b      	str	r1, [sp, #44]	; 0x2c
 800d516:	edc9 6a00 	vstr	s13, [r9]
 800d51a:	ed94 6a00 	vldr	s12, [r4]
 800d51e:	ed97 7a00 	vldr	s14, [r7]
 800d522:	edd5 7a00 	vldr	s15, [r5]
 800d526:	9902      	ldr	r1, [sp, #8]
 800d528:	9a02      	ldr	r2, [sp, #8]
 800d52a:	eee6 7a47 	vfms.f32	s15, s12, s14
 800d52e:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 800d532:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800d536:	0092      	lsls	r2, r2, #2
 800d538:	edc5 7a00 	vstr	s15, [r5]
 800d53c:	ed97 7a00 	vldr	s14, [r7]
 800d540:	edde 7a00 	vldr	s15, [lr]
 800d544:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	edce 7a00 	vstr	s15, [lr]
 800d54e:	edd0 5a00 	vldr	s11, [r0]
 800d552:	ed91 7a00 	vldr	s14, [r1]
 800d556:	eea6 7a65 	vfms.f32	s14, s12, s11
 800d55a:	eef0 7ae7 	vabs.f32	s15, s15
 800d55e:	ed81 7a00 	vstr	s14, [r1]
 800d562:	ed90 6a00 	vldr	s12, [r0]
 800d566:	ed96 7a00 	vldr	s14, [r6]
 800d56a:	eea6 7ac6 	vfms.f32	s14, s13, s12
 800d56e:	ed86 7a00 	vstr	s14, [r6]
 800d572:	ed95 7a00 	vldr	s14, [r5]
 800d576:	eeb0 7ac7 	vabs.f32	s14, s14
 800d57a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d582:	dd10      	ble.n	800d5a6 <kalman_3gyro.constprop.0+0xc46>
 800d584:	4652      	mov	r2, sl
 800d586:	46c2      	mov	sl, r8
 800d588:	4690      	mov	r8, r2
 800d58a:	461a      	mov	r2, r3
 800d58c:	9b01      	ldr	r3, [sp, #4]
 800d58e:	9902      	ldr	r1, [sp, #8]
 800d590:	9803      	ldr	r0, [sp, #12]
 800d592:	9006      	str	r0, [sp, #24]
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	9303      	str	r3, [sp, #12]
 800d598:	008b      	lsls	r3, r1, #2
 800d59a:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800d59e:	9105      	str	r1, [sp, #20]
 800d5a0:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800d5a4:	9104      	str	r1, [sp, #16]
 800d5a6:	9903      	ldr	r1, [sp, #12]
 800d5a8:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
 800d5ac:	4401      	add	r1, r0
 800d5ae:	460c      	mov	r4, r1
 800d5b0:	9906      	ldr	r1, [sp, #24]
 800d5b2:	ed94 7a00 	vldr	s14, [r4]
 800d5b6:	4401      	add	r1, r0
 800d5b8:	edd1 7a00 	vldr	s15, [r1]
 800d5bc:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800d5c0:	4608      	mov	r0, r1
 800d5c2:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d5c6:	440a      	add	r2, r1
 800d5c8:	440b      	add	r3, r1
 800d5ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d5cc:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 800d5d0:	4429      	add	r1, r5
 800d5d2:	460d      	mov	r5, r1
 800d5d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d5d6:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d5da:	4431      	add	r1, r6
 800d5dc:	468e      	mov	lr, r1
 800d5de:	ed84 3a00 	vstr	s6, [r4]
 800d5e2:	ed92 7a00 	vldr	s14, [r2]
 800d5e6:	edd3 7a00 	vldr	s15, [r3]
 800d5ea:	9904      	ldr	r1, [sp, #16]
 800d5ec:	eee3 7a47 	vfms.f32	s15, s6, s14
 800d5f0:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800d5f4:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d5f8:	440e      	add	r6, r1
 800d5fa:	1879      	adds	r1, r7, r1
 800d5fc:	edc3 7a00 	vstr	s15, [r3]
 800d600:	9101      	str	r1, [sp, #4]
 800d602:	9b05      	ldr	r3, [sp, #20]
 800d604:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d606:	edd2 0a00 	vldr	s1, [r2]
 800d60a:	ed95 1a00 	vldr	s2, [r5]
 800d60e:	ed9e 2a00 	vldr	s4, [lr]
 800d612:	f5a6 66cf 	sub.w	r6, r6, #1656	; 0x678
 800d616:	edd6 6a00 	vldr	s13, [r6]
 800d61a:	f50d 66f9 	add.w	r6, sp, #1992	; 0x7c8
 800d61e:	1874      	adds	r4, r6, r1
 800d620:	18f7      	adds	r7, r6, r3
 800d622:	f20d 46d4 	addw	r6, sp, #1236	; 0x4d4
 800d626:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800d62a:	eb06 0903 	add.w	r9, r6, r3
 800d62e:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d632:	ee82 0aa7 	vdiv.f32	s0, s5, s15
 800d636:	eb03 068c 	add.w	r6, r3, ip, lsl #2
 800d63a:	4633      	mov	r3, r6
 800d63c:	f5a4 64cf 	sub.w	r4, r4, #1656	; 0x678
 800d640:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d644:	f20d 4cd4 	addw	ip, sp, #1236	; 0x4d4
 800d648:	448c      	add	ip, r1
 800d64a:	9901      	ldr	r1, [sp, #4]
 800d64c:	f5a7 67cf 	sub.w	r7, r7, #1656	; 0x678
 800d650:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 800d654:	ed94 7a00 	vldr	s14, [r4]
 800d658:	ed93 6a00 	vldr	s12, [r3]
 800d65c:	edd0 7a00 	vldr	s15, [r0]
 800d660:	ed99 8a00 	vldr	s16, [r9]
 800d664:	ed91 ba00 	vldr	s22, [r1]
 800d668:	ed97 4a00 	vldr	s8, [r7]
 800d66c:	edd6 4a00 	vldr	s9, [r6]
 800d670:	eddc da00 	vldr	s27, [ip]
 800d674:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 800d678:	f50d 64f9 	add.w	r4, sp, #1992	; 0x7c8
 800d67c:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800d680:	eb03 0288 	add.w	r2, r3, r8, lsl #2
 800d684:	46a2      	mov	sl, r4
 800d686:	4613      	mov	r3, r2
 800d688:	eec2 1aa7 	vdiv.f32	s3, s5, s15
 800d68c:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 800d690:	f5aa 6acc 	sub.w	sl, sl, #1632	; 0x660
 800d694:	f2a2 626c 	subw	r2, r2, #1644	; 0x66c
 800d698:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 800d69c:	eeeb 6a47 	vfms.f32	s13, s22, s14
 800d6a0:	eea8 4a47 	vfms.f32	s8, s16, s14
 800d6a4:	ed94 5a00 	vldr	s10, [r4]
 800d6a8:	edda 3a00 	vldr	s7, [sl]
 800d6ac:	edd2 5a00 	vldr	s11, [r2]
 800d6b0:	edd3 7a00 	vldr	s15, [r3]
 800d6b4:	eeab 5a64 	vfms.f32	s10, s22, s9
 800d6b8:	eee8 5a64 	vfms.f32	s11, s16, s9
 800d6bc:	eee6 3a4b 	vfms.f32	s7, s12, s22
 800d6c0:	eee6 7a48 	vfms.f32	s15, s12, s16
 800d6c4:	eea6 4ac3 	vfms.f32	s8, s13, s6
 800d6c8:	ee82 8aad 	vdiv.f32	s16, s5, s27
 800d6cc:	eee3 5a45 	vfms.f32	s11, s6, s10
 800d6d0:	eee3 7a63 	vfms.f32	s15, s6, s7
 800d6d4:	ee20 4a04 	vmul.f32	s8, s0, s8
 800d6d8:	ee60 5a25 	vmul.f32	s11, s0, s11
 800d6dc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d6e0:	eee0 6ac4 	vfms.f32	s13, s1, s8
 800d6e4:	eea0 5ae5 	vfms.f32	s10, s1, s11
 800d6e8:	eee7 3ae0 	vfms.f32	s7, s15, s1
 800d6ec:	eea1 7a44 	vfms.f32	s14, s2, s8
 800d6f0:	ee61 6aa6 	vmul.f32	s13, s3, s13
 800d6f4:	eee1 4a65 	vfms.f32	s9, s2, s11
 800d6f8:	eea7 6ac1 	vfms.f32	s12, s15, s2
 800d6fc:	ee21 5a85 	vmul.f32	s10, s3, s10
 800d700:	eea2 7a66 	vfms.f32	s14, s4, s13
 800d704:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800d708:	eee2 4a45 	vfms.f32	s9, s4, s10
 800d70c:	eea1 6ac2 	vfms.f32	s12, s3, s4
 800d710:	ee28 7a07 	vmul.f32	s14, s16, s14
 800d714:	ee37 3a85 	vadd.f32	s6, s15, s10
 800d718:	ee68 4a24 	vmul.f32	s9, s16, s9
 800d71c:	ee26 8a08 	vmul.f32	s16, s12, s16
 800d720:	ee37 6a43 	vsub.f32	s12, s14, s6
 800d724:	eeff 3a00 	vmov.f32	s7, #240	; 0xbf800000 -1.0
 800d728:	eeb4 6ae3 	vcmpe.f32	s12, s7
 800d72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d730:	ed8d 4a4d 	vstr	s8, [sp, #308]	; 0x134
 800d734:	edcd 6a4c 	vstr	s13, [sp, #304]	; 0x130
 800d738:	edcd 5a50 	vstr	s11, [sp, #320]	; 0x140
 800d73c:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800d740:	bfc8      	it	gt
 800d742:	ee76 2a22 	vaddgt.f32	s5, s12, s5
 800d746:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800d74a:	bfcc      	ite	gt
 800d74c:	eef1 3ae2 	vsqrtgt.f32	s7, s5
 800d750:	ed5f 3add 	vldrle	s7, [pc, #-884]	; 800d3e0 <kalman_3gyro.constprop.0+0xa80>
 800d754:	ed8d 7a4b 	vstr	s14, [sp, #300]	; 0x12c
 800d758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d75c:	edcd 4a4e 	vstr	s9, [sp, #312]	; 0x138
 800d760:	ed8d 5a4f 	vstr	s10, [sp, #316]	; 0x13c
 800d764:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d768:	edcd 1a52 	vstr	s3, [sp, #328]	; 0x148
 800d76c:	edcd 7a53 	vstr	s15, [sp, #332]	; 0x14c
 800d770:	f100 84e4 	bmi.w	800e13c <kalman_3gyro.constprop.0+0x17dc>
 800d774:	bfd8      	it	le
 800d776:	ee63 3aa5 	vmulle.f32	s7, s7, s11
 800d77a:	ee37 6a87 	vadd.f32	s12, s15, s14
 800d77e:	eebf 3a00 	vmov.f32	s6, #240	; 0xbf800000 -1.0
 800d782:	ee35 6a46 	vsub.f32	s12, s10, s12
 800d786:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d78a:	eeb4 6ac3 	vcmpe.f32	s12, s6
 800d78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d792:	ee63 5aa5 	vmul.f32	s11, s7, s11
 800d796:	ee38 4a44 	vsub.f32	s8, s16, s8
 800d79a:	bf84      	itt	hi
 800d79c:	eef7 3a00 	vmovhi.f32	s7, #112	; 0x3f800000  1.0
 800d7a0:	ee36 6a23 	vaddhi.f32	s12, s12, s7
 800d7a4:	eeb5 4ac0 	vcmpe.f32	s8, #0.0
 800d7a8:	bf8c      	ite	hi
 800d7aa:	eef1 3ac6 	vsqrthi.f32	s7, s12
 800d7ae:	eddf 3ae0 	vldrls	s7, [pc, #896]	; 800db30 <kalman_3gyro.constprop.0+0x11d0>
 800d7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b6:	f100 84bd 	bmi.w	800e134 <kalman_3gyro.constprop.0+0x17d4>
 800d7ba:	bfd8      	it	le
 800d7bc:	ee63 3a84 	vmulle.f32	s7, s7, s8
 800d7c0:	ee37 7a05 	vadd.f32	s14, s14, s10
 800d7c4:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800d7c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7cc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800d7d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d8:	bf84      	itt	hi
 800d7da:	eeb7 7a00 	vmovhi.f32	s14, #112	; 0x3f800000  1.0
 800d7de:	ee77 7a87 	vaddhi.f32	s15, s15, s14
 800d7e2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800d7e6:	bf8c      	ite	hi
 800d7e8:	eeb1 7ae7 	vsqrthi.f32	s14, s15
 800d7ec:	ed9f 7ad0 	vldrls	s14, [pc, #832]	; 800db30 <kalman_3gyro.constprop.0+0x11d0>
 800d7f0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800d7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f8:	ee63 3a86 	vmul.f32	s7, s7, s12
 800d7fc:	f102 8399 	bmi.w	800ff32 <kalman_3gyro.constprop.0+0x35d2>
 800d800:	bfd8      	it	le
 800d802:	ee27 7a26 	vmulle.f32	s14, s14, s13
 800d806:	f89b 2341 	ldrb.w	r2, [fp, #833]	; 0x341
 800d80a:	1e53      	subs	r3, r2, #1
 800d80c:	b25b      	sxtb	r3, r3
 800d80e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d812:	2b00      	cmp	r3, #0
 800d814:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d818:	dd1c      	ble.n	800d854 <kalman_3gyro.constprop.0+0xef4>
 800d81a:	3a02      	subs	r2, #2
 800d81c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800d820:	b2d2      	uxtb	r2, r2
 800d822:	f1ab 000c 	sub.w	r0, fp, #12
 800d826:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d82a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d82e:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
 800d832:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
 800d836:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 800d83a:	f8d3 1340 	ldr.w	r1, [r3, #832]	; 0x340
 800d83e:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
 800d842:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 800d846:	f8c3 134c 	str.w	r1, [r3, #844]	; 0x34c
 800d84a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
 800d84e:	3b0c      	subs	r3, #12
 800d850:	4283      	cmp	r3, r0
 800d852:	d1f0      	bne.n	800d836 <kalman_3gyro.constprop.0+0xed6>
 800d854:	eddd 6a07 	vldr	s13, [sp, #28]
 800d858:	4ab6      	ldr	r2, [pc, #728]	; (800db34 <kalman_3gyro.constprop.0+0x11d4>)
 800d85a:	4bb7      	ldr	r3, [pc, #732]	; (800db38 <kalman_3gyro.constprop.0+0x11d8>)
 800d85c:	ed92 8a00 	vldr	s16, [r2]
 800d860:	ed93 ba00 	vldr	s22, [r3]
 800d864:	f8cd b088 	str.w	fp, [sp, #136]	; 0x88
 800d868:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d86c:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800d870:	f20d 214b 	addw	r1, sp, #587	; 0x24b
 800d874:	f1c1 0101 	rsb	r1, r1, #1
 800d878:	910c      	str	r1, [sp, #48]	; 0x30
 800d87a:	a92d      	add	r1, sp, #180	; 0xb4
 800d87c:	e9cd b10a 	strd	fp, r1, [sp, #40]	; 0x28
 800d880:	9123      	str	r1, [sp, #140]	; 0x8c
 800d882:	2100      	movs	r1, #0
 800d884:	9109      	str	r1, [sp, #36]	; 0x24
 800d886:	f50d 7913 	add.w	r9, sp, #588	; 0x24c
 800d88a:	f50d 7a64 	add.w	sl, sp, #912	; 0x390
 800d88e:	ee75 5aa5 	vadd.f32	s11, s11, s11
 800d892:	ee73 7aa3 	vadd.f32	s15, s7, s7
 800d896:	ee37 7a07 	vadd.f32	s14, s14, s14
 800d89a:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800d89e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d8a2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d8a6:	edcb 5ad2 	vstr	s11, [fp, #840]	; 0x348
 800d8aa:	edcb 7ad3 	vstr	s15, [fp, #844]	; 0x34c
 800d8ae:	ed8b 7ad4 	vstr	s14, [fp, #848]	; 0x350
 800d8b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8b6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d8bc:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800d8c0:	f20d 234b 	addw	r3, sp, #587	; 0x24b
 800d8c4:	18e0      	adds	r0, r4, r3
 800d8c6:	f803 0f01 	strb.w	r0, [r3, #1]!
 800d8ca:	f8d2 0348 	ldr.w	r0, [r2, #840]	; 0x348
 800d8ce:	f841 0b04 	str.w	r0, [r1], #4
 800d8d2:	f20d 2069 	addw	r0, sp, #617	; 0x269
 800d8d6:	4298      	cmp	r0, r3
 800d8d8:	f102 020c 	add.w	r2, r2, #12
 800d8dc:	d1f2      	bne.n	800d8c4 <kalman_3gyro.constprop.0+0xf64>
 800d8de:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800d8e2:	ed93 7a00 	vldr	s14, [r3]
 800d8e6:	f50d 639b 	add.w	r3, sp, #1240	; 0x4d8
 800d8ea:	edd3 7a00 	vldr	s15, [r3]
 800d8ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f6:	bf84      	itt	hi
 800d8f8:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800d8fc:	f8a9 3000 	strhhi.w	r3, [r9]
 800d900:	f20d 43dc 	addw	r3, sp, #1244	; 0x4dc
 800d904:	ed93 7a00 	vldr	s14, [r3]
 800d908:	f50d 639c 	add.w	r3, sp, #1248	; 0x4e0
 800d90c:	edd3 7a00 	vldr	s15, [r3]
 800d910:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d918:	bf84      	itt	hi
 800d91a:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800d91e:	f8a9 3002 	strhhi.w	r3, [r9, #2]
 800d922:	f20d 43e4 	addw	r3, sp, #1252	; 0x4e4
 800d926:	ed93 7a00 	vldr	s14, [r3]
 800d92a:	f50d 639d 	add.w	r3, sp, #1256	; 0x4e8
 800d92e:	edd3 7a00 	vldr	s15, [r3]
 800d932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93a:	bf84      	itt	hi
 800d93c:	f240 5306 	movwhi	r3, #1286	; 0x506
 800d940:	f8a9 3004 	strhhi.w	r3, [r9, #4]
 800d944:	f20d 43ec 	addw	r3, sp, #1260	; 0x4ec
 800d948:	ed93 7a00 	vldr	s14, [r3]
 800d94c:	f50d 639e 	add.w	r3, sp, #1264	; 0x4f0
 800d950:	edd3 7a00 	vldr	s15, [r3]
 800d954:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95c:	bf84      	itt	hi
 800d95e:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800d962:	f8a9 3006 	strhhi.w	r3, [r9, #6]
 800d966:	f20d 43f4 	addw	r3, sp, #1268	; 0x4f4
 800d96a:	ed93 7a00 	vldr	s14, [r3]
 800d96e:	f50d 639f 	add.w	r3, sp, #1272	; 0x4f8
 800d972:	edd3 7a00 	vldr	s15, [r3]
 800d976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d97e:	bf84      	itt	hi
 800d980:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800d984:	f8a9 3008 	strhhi.w	r3, [r9, #8]
 800d988:	f20d 43fc 	addw	r3, sp, #1276	; 0x4fc
 800d98c:	ed93 7a00 	vldr	s14, [r3]
 800d990:	f50d 63a0 	add.w	r3, sp, #1280	; 0x500
 800d994:	edd3 7a00 	vldr	s15, [r3]
 800d998:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a0:	bf84      	itt	hi
 800d9a2:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800d9a6:	f8a9 300a 	strhhi.w	r3, [r9, #10]
 800d9aa:	f20d 5304 	addw	r3, sp, #1284	; 0x504
 800d9ae:	ed93 7a00 	vldr	s14, [r3]
 800d9b2:	f50d 63a1 	add.w	r3, sp, #1288	; 0x508
 800d9b6:	edd3 7a00 	vldr	s15, [r3]
 800d9ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c2:	bf84      	itt	hi
 800d9c4:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800d9c8:	f8a9 300c 	strhhi.w	r3, [r9, #12]
 800d9cc:	f20d 530c 	addw	r3, sp, #1292	; 0x50c
 800d9d0:	ed93 7a00 	vldr	s14, [r3]
 800d9d4:	f50d 63a2 	add.w	r3, sp, #1296	; 0x510
 800d9d8:	edd3 7a00 	vldr	s15, [r3]
 800d9dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e4:	bf84      	itt	hi
 800d9e6:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800d9ea:	f8a9 300e 	strhhi.w	r3, [r9, #14]
 800d9ee:	f20d 5314 	addw	r3, sp, #1300	; 0x514
 800d9f2:	ed93 7a00 	vldr	s14, [r3]
 800d9f6:	f50d 63a3 	add.w	r3, sp, #1304	; 0x518
 800d9fa:	edd3 7a00 	vldr	s15, [r3]
 800d9fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da06:	bf84      	itt	hi
 800da08:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800da0c:	f8a9 3010 	strhhi.w	r3, [r9, #16]
 800da10:	f20d 531c 	addw	r3, sp, #1308	; 0x51c
 800da14:	ed93 7a00 	vldr	s14, [r3]
 800da18:	f50d 63a4 	add.w	r3, sp, #1312	; 0x520
 800da1c:	edd3 7a00 	vldr	s15, [r3]
 800da20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da28:	bf84      	itt	hi
 800da2a:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800da2e:	f8a9 3012 	strhhi.w	r3, [r9, #18]
 800da32:	f20d 5324 	addw	r3, sp, #1316	; 0x524
 800da36:	ed93 7a00 	vldr	s14, [r3]
 800da3a:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800da3e:	edd3 7a00 	vldr	s15, [r3]
 800da42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4a:	bf84      	itt	hi
 800da4c:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800da50:	f8a9 3014 	strhhi.w	r3, [r9, #20]
 800da54:	f20d 532c 	addw	r3, sp, #1324	; 0x52c
 800da58:	ed93 7a00 	vldr	s14, [r3]
 800da5c:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 800da60:	edd3 7a00 	vldr	s15, [r3]
 800da64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da6c:	bf84      	itt	hi
 800da6e:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800da72:	f8a9 3016 	strhhi.w	r3, [r9, #22]
 800da76:	f20d 5334 	addw	r3, sp, #1332	; 0x534
 800da7a:	ed93 7a00 	vldr	s14, [r3]
 800da7e:	f50d 63a7 	add.w	r3, sp, #1336	; 0x538
 800da82:	edd3 7a00 	vldr	s15, [r3]
 800da86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da8e:	bf84      	itt	hi
 800da90:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800da94:	f8a9 3018 	strhhi.w	r3, [r9, #24]
 800da98:	f20d 533c 	addw	r3, sp, #1340	; 0x53c
 800da9c:	ed93 7a00 	vldr	s14, [r3]
 800daa0:	f50d 63a8 	add.w	r3, sp, #1344	; 0x540
 800daa4:	edd3 7a00 	vldr	s15, [r3]
 800daa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800daac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab0:	bf84      	itt	hi
 800dab2:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800dab6:	f8a9 301a 	strhhi.w	r3, [r9, #26]
 800daba:	f20d 5344 	addw	r3, sp, #1348	; 0x544
 800dabe:	ed93 7a00 	vldr	s14, [r3]
 800dac2:	f50d 63a9 	add.w	r3, sp, #1352	; 0x548
 800dac6:	edd3 7a00 	vldr	s15, [r3]
 800daca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad2:	bf84      	itt	hi
 800dad4:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800dad8:	f8a9 301c 	strhhi.w	r3, [r9, #28]
 800dadc:	221e      	movs	r2, #30
 800dade:	2101      	movs	r1, #1
 800dae0:	4650      	mov	r0, sl
 800dae2:	f009 fcbd 	bl	8017460 <memset>
 800dae6:	2304      	movs	r3, #4
 800dae8:	9307      	str	r3, [sp, #28]
 800daea:	2302      	movs	r3, #2
 800daec:	9305      	str	r3, [sp, #20]
 800daee:	9b05      	ldr	r3, [sp, #20]
 800daf0:	9306      	str	r3, [sp, #24]
 800daf2:	1c5f      	adds	r7, r3, #1
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	9305      	str	r3, [sp, #20]
 800daf8:	f04f 0b01 	mov.w	fp, #1
 800dafc:	9b05      	ldr	r3, [sp, #20]
 800dafe:	f8cd b004 	str.w	fp, [sp, #4]
 800db02:	445b      	add	r3, fp
 800db04:	2b1f      	cmp	r3, #31
 800db06:	bfa8      	it	ge
 800db08:	231f      	movge	r3, #31
 800db0a:	465a      	mov	r2, fp
 800db0c:	eba3 0802 	sub.w	r8, r3, r2
 800db10:	f1b8 0f00 	cmp.w	r8, #0
 800db14:	469b      	mov	fp, r3
 800db16:	f107 35ff 	add.w	r5, r7, #4294967295
 800db1a:	dd44      	ble.n	800dba6 <kalman_3gyro.constprop.0+0x1246>
 800db1c:	f10b 33ff 	add.w	r3, fp, #4294967295
 800db20:	9302      	str	r3, [sp, #8]
 800db22:	f1ab 0302 	sub.w	r3, fp, #2
 800db26:	e9cd 8303 	strd	r8, r3, [sp, #12]
 800db2a:	4616      	mov	r6, r2
 800db2c:	2400      	movs	r4, #0
 800db2e:	e00f      	b.n	800db50 <kalman_3gyro.constprop.0+0x11f0>
 800db30:	00000000 	.word	0x00000000
 800db34:	200019e4 	.word	0x200019e4
 800db38:	200019f4 	.word	0x200019f4
 800db3c:	3f333333 	.word	0x3f333333
 800db40:	3f4ccccd 	.word	0x3f4ccccd
 800db44:	3f666666 	.word	0x3f666666
 800db48:	3ecccccc 	.word	0x3ecccccc
 800db4c:	3dcccccd 	.word	0x3dcccccd
 800db50:	1e71      	subs	r1, r6, #1
 800db52:	f919 0005 	ldrsb.w	r0, [r9, r5]
 800db56:	f919 2001 	ldrsb.w	r2, [r9, r1]
 800db5a:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 800db5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db62:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 800db66:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800db6a:	ed1e 7a01 	vldr	s14, [lr, #-4]
 800db6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db76:	f105 0c02 	add.w	ip, r5, #2
 800db7a:	f105 0801 	add.w	r8, r5, #1
 800db7e:	f240 81d3 	bls.w	800df28 <kalman_3gyro.constprop.0+0x15c8>
 800db82:	45e3      	cmp	fp, ip
 800db84:	f80a 0004 	strb.w	r0, [sl, r4]
 800db88:	f000 81bf 	beq.w	800df0a <kalman_3gyro.constprop.0+0x15aa>
 800db8c:	4645      	mov	r5, r8
 800db8e:	9b03      	ldr	r3, [sp, #12]
 800db90:	3401      	adds	r4, #1
 800db92:	42a3      	cmp	r3, r4
 800db94:	dcdc      	bgt.n	800db50 <kalman_3gyro.constprop.0+0x11f0>
 800db96:	4698      	mov	r8, r3
 800db98:	9b01      	ldr	r3, [sp, #4]
 800db9a:	1e58      	subs	r0, r3, #1
 800db9c:	4448      	add	r0, r9
 800db9e:	4642      	mov	r2, r8
 800dba0:	4651      	mov	r1, sl
 800dba2:	f009 fc4f 	bl	8017444 <memcpy>
 800dba6:	9b06      	ldr	r3, [sp, #24]
 800dba8:	eb0b 0703 	add.w	r7, fp, r3
 800dbac:	2f1e      	cmp	r7, #30
 800dbae:	dda5      	ble.n	800dafc <kalman_3gyro.constprop.0+0x119c>
 800dbb0:	9b07      	ldr	r3, [sp, #28]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	9307      	str	r3, [sp, #28]
 800dbb6:	d19a      	bne.n	800daee <kalman_3gyro.constprop.0+0x118e>
 800dbb8:	f999 200e 	ldrsb.w	r2, [r9, #14]
 800dbbc:	f999 300f 	ldrsb.w	r3, [r9, #15]
 800dbc0:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800dbc4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dbc8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800dbcc:	ed52 7a01 	vldr	s15, [r2, #-4]
 800dbd0:	ed13 7a01 	vldr	s14, [r3, #-4]
 800dbd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbdc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800dbe0:	460a      	mov	r2, r1
 800dbe2:	bf4c      	ite	mi
 800dbe4:	2201      	movmi	r2, #1
 800dbe6:	2200      	movpl	r2, #0
 800dbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbec:	bf4c      	ite	mi
 800dbee:	2301      	movmi	r3, #1
 800dbf0:	2300      	movpl	r3, #0
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	f000 81b4 	beq.w	800df60 <kalman_3gyro.constprop.0+0x1600>
 800dbf8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbfc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dc00:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc06:	ece3 7a01 	vstmia	r3!, {s15}
 800dc0a:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc0e:	3304      	adds	r3, #4
 800dc10:	930a      	str	r3, [sp, #40]	; 0x28
 800dc12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc14:	2b03      	cmp	r3, #3
 800dc16:	f47f ae4c 	bne.w	800d8b2 <kalman_3gyro.constprop.0+0xf52>
 800dc1a:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800dc1e:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800dc22:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800dc26:	ed5f 4a3b 	vldr	s9, [pc, #-236]	; 800db3c <kalman_3gyro.constprop.0+0x11dc>
 800dc2a:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 800dc2e:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800db40 <kalman_3gyro.constprop.0+0x11e0>
 800dc32:	f89b 3900 	ldrb.w	r3, [fp, #2304]	; 0x900
 800dc36:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dc3a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800dc3e:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800dc42:	ee2c 5aa6 	vmul.f32	s10, s25, s13
 800dc46:	eee6 7a06 	vfma.f32	s15, s12, s12
 800dc4a:	ee6d 5a26 	vmul.f32	s11, s26, s13
 800dc4e:	eeb0 6a67 	vmov.f32	s12, s15
 800dc52:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc56:	ee6b 7aa6 	vmul.f32	s15, s23, s13
 800dc5a:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 800dc5e:	eeb1 4ac6 	vsqrt.f32	s8, s12
 800dc62:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800dc66:	eddd 6a15 	vldr	s13, [sp, #84]	; 0x54
 800dc6a:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800dc6e:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800dc72:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800dc76:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800dc7a:	eec5 5a27 	vdiv.f32	s11, s10, s15
 800dc7e:	ee2c 5aa4 	vmul.f32	s10, s25, s9
 800dc82:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800dc86:	eeab 5aa7 	vfma.f32	s10, s23, s15
 800dc8a:	ee64 7a27 	vmul.f32	s15, s8, s15
 800dc8e:	ee25 7a07 	vmul.f32	s14, s10, s14
 800dc92:	ed8d 5a02 	vstr	s10, [sp, #8]
 800dc96:	edcd 7a41 	vstr	s15, [sp, #260]	; 0x104
 800dc9a:	edcd 5a40 	vstr	s11, [sp, #256]	; 0x100
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	f040 81a4 	bne.w	800dfec <kalman_3gyro.constprop.0+0x168c>
 800dca4:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800dca8:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 800dcac:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800dcb0:	f8c8 202c 	str.w	r2, [r8, #44]	; 0x2c
 800dcb4:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 800dcb8:	f8d8 2020 	ldr.w	r2, [r8, #32]
 800dcbc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800dcc0:	f8c8 2024 	str.w	r2, [r8, #36]	; 0x24
 800dcc4:	f8c8 3020 	str.w	r3, [r8, #32]
 800dcc8:	ed88 7a07 	vstr	s14, [r8, #28]
 800dccc:	f60b 120c 	addw	r2, fp, #2316	; 0x90c
 800dcd0:	f60b 1324 	addw	r3, fp, #2340	; 0x924
 800dcd4:	ed93 7a00 	vldr	s14, [r3]
 800dcd8:	ed92 8a00 	vldr	s16, [r2]
 800dcdc:	eddb ea02 	vldr	s29, [fp, #8]
 800dce0:	f60b 1208 	addw	r2, fp, #2312	; 0x908
 800dce4:	f50b 6312 	add.w	r3, fp, #2336	; 0x920
 800dce8:	ed92 5a00 	vldr	s10, [r2]
 800dcec:	ee28 8a07 	vmul.f32	s16, s16, s14
 800dcf0:	ed93 7a00 	vldr	s14, [r3]
 800dcf4:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dcf8:	f50b 6211 	add.w	r2, fp, #2320	; 0x910
 800dcfc:	f60b 1328 	addw	r3, fp, #2344	; 0x928
 800dd00:	ed92 5a00 	vldr	s10, [r2]
 800dd04:	ed93 7a00 	vldr	s14, [r3]
 800dd08:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dd0c:	f60b 1214 	addw	r2, fp, #2324	; 0x914
 800dd10:	f60b 132c 	addw	r3, fp, #2348	; 0x92c
 800dd14:	ed92 5a00 	vldr	s10, [r2]
 800dd18:	ed93 7a00 	vldr	s14, [r3]
 800dd1c:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dd20:	f60b 121c 	addw	r2, fp, #2332	; 0x91c
 800dd24:	f60b 1304 	addw	r3, fp, #2308	; 0x904
 800dd28:	ed92 5a00 	vldr	s10, [r2]
 800dd2c:	ed93 7a00 	vldr	s14, [r3]
 800dd30:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800dd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd38:	eea5 8a07 	vfma.f32	s16, s10, s14
 800dd3c:	f340 8232 	ble.w	800e1a4 <kalman_3gyro.constprop.0+0x1844>
 800dd40:	ed9b 7a30 	vldr	s14, [fp, #192]	; 0xc0
 800dd44:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dd48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4c:	f100 815e 	bmi.w	800e00c <kalman_3gyro.constprop.0+0x16ac>
 800dd50:	ed9b ba31 	vldr	s22, [fp, #196]	; 0xc4
 800dd54:	ed9b 7a4a 	vldr	s14, [fp, #296]	; 0x128
 800dd58:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800dd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd60:	f142 84bd 	bpl.w	80106de <kalman_3gyro.constprop.0+0x3d7e>
 800dd64:	ed9b 5a62 	vldr	s10, [fp, #392]	; 0x188
 800dd68:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800dd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd70:	f342 850a 	ble.w	8010788 <kalman_3gyro.constprop.0+0x3e28>
 800dd74:	eddb 2a4c 	vldr	s5, [fp, #304]	; 0x130
 800dd78:	eef4 2ac8 	vcmpe.f32	s5, s16
 800dd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd80:	f342 86c5 	ble.w	8010b0e <kalman_3gyro.constprop.0+0x41ae>
 800dd84:	eddb 3a4b 	vldr	s7, [fp, #300]	; 0x12c
 800dd88:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 800dd8c:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 800dd90:	ee38 3a47 	vsub.f32	s6, s16, s14
 800dd94:	ee34 4a63 	vsub.f32	s8, s8, s7
 800dd98:	ee32 7ac7 	vsub.f32	s14, s5, s14
 800dd9c:	ee24 4a03 	vmul.f32	s8, s8, s6
 800dda0:	eef4 4ac8 	vcmpe.f32	s9, s16
 800dda4:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800dda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddac:	ee3e ea23 	vadd.f32	s28, s28, s7
 800ddb0:	f202 86c5 	bhi.w	8010b3e <kalman_3gyro.constprop.0+0x41de>
 800ddb4:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 800ddb8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ddbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddc0:	f342 86c5 	ble.w	8010b4e <kalman_3gyro.constprop.0+0x41ee>
 800ddc4:	eddb 3a4f 	vldr	s7, [fp, #316]	; 0x13c
 800ddc8:	ed9b 4a51 	vldr	s8, [fp, #324]	; 0x144
 800ddcc:	ee38 3a64 	vsub.f32	s6, s16, s9
 800ddd0:	ee34 4a63 	vsub.f32	s8, s8, s7
 800ddd4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ddd8:	ee64 4a03 	vmul.f32	s9, s8, s6
 800dddc:	ee84 ea87 	vdiv.f32	s28, s9, s14
 800dde0:	ee3e ea23 	vadd.f32	s28, s28, s7
 800dde4:	ed9b 7a52 	vldr	s14, [fp, #328]	; 0x148
 800dde8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ddec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf0:	f202 86c5 	bhi.w	8010b7e <kalman_3gyro.constprop.0+0x421e>
 800ddf4:	eddb 4a54 	vldr	s9, [fp, #336]	; 0x150
 800ddf8:	eef4 4ac8 	vcmpe.f32	s9, s16
 800ddfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de00:	f343 8371 	ble.w	80114e6 <kalman_3gyro.constprop.0+0x4b86>
 800de04:	eddb 3a53 	vldr	s7, [fp, #332]	; 0x14c
 800de08:	ed9b 4a55 	vldr	s8, [fp, #340]	; 0x154
 800de0c:	ee38 3a47 	vsub.f32	s6, s16, s14
 800de10:	ee34 4a63 	vsub.f32	s8, s8, s7
 800de14:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800de18:	ee24 4a03 	vmul.f32	s8, s8, s6
 800de1c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800de20:	ee3e ea23 	vadd.f32	s28, s28, s7
 800de24:	ed9b 7a56 	vldr	s14, [fp, #344]	; 0x158
 800de28:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800de2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de30:	f202 86c5 	bhi.w	8010bbe <kalman_3gyro.constprop.0+0x425e>
 800de34:	eddb 4a58 	vldr	s9, [fp, #352]	; 0x160
 800de38:	eef4 4ac8 	vcmpe.f32	s9, s16
 800de3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de40:	f343 8359 	ble.w	80114f6 <kalman_3gyro.constprop.0+0x4b96>
 800de44:	eddb 3a57 	vldr	s7, [fp, #348]	; 0x15c
 800de48:	ed9b 4a59 	vldr	s8, [fp, #356]	; 0x164
 800de4c:	ee38 3a47 	vsub.f32	s6, s16, s14
 800de50:	ee34 4a63 	vsub.f32	s8, s8, s7
 800de54:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800de58:	ee24 4a03 	vmul.f32	s8, s8, s6
 800de5c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800de60:	ee3e ea23 	vadd.f32	s28, s28, s7
 800de64:	ed9b 7a5a 	vldr	s14, [fp, #360]	; 0x168
 800de68:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800de6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de70:	f2c2 86c5 	blt.w	8010bfe <kalman_3gyro.constprop.0+0x429e>
 800de74:	eddb 4a5c 	vldr	s9, [fp, #368]	; 0x170
 800de78:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800de7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de80:	f143 832d 	bpl.w	80114de <kalman_3gyro.constprop.0+0x4b7e>
 800de84:	eddb 3a5b 	vldr	s7, [fp, #364]	; 0x16c
 800de88:	ed9b 4a5d 	vldr	s8, [fp, #372]	; 0x174
 800de8c:	ee38 3a47 	vsub.f32	s6, s16, s14
 800de90:	ee34 4a63 	vsub.f32	s8, s8, s7
 800de94:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800de98:	ee24 4a03 	vmul.f32	s8, s8, s6
 800de9c:	ee84 ea07 	vdiv.f32	s28, s8, s14
 800dea0:	ee3e ea23 	vadd.f32	s28, s28, s7
 800dea4:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 800dea8:	eeb4 8ae4 	vcmpe.f32	s16, s9
 800deac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb0:	f2c2 86c5 	blt.w	8010c3e <kalman_3gyro.constprop.0+0x42de>
 800deb4:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 800deb8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800debc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec0:	f142 86c5 	bpl.w	8010c4e <kalman_3gyro.constprop.0+0x42ee>
 800dec4:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 800dec8:	ed9b 5a61 	vldr	s10, [fp, #388]	; 0x184
 800decc:	ee78 3a64 	vsub.f32	s7, s16, s9
 800ded0:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ded4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ded8:	ee25 5a23 	vmul.f32	s10, s10, s7
 800dedc:	ee85 ea07 	vdiv.f32	s28, s10, s14
 800dee0:	ee3e ea04 	vadd.f32	s28, s28, s8
 800dee4:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800dee8:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800deec:	ee69 9a8e 	vmul.f32	s19, s19, s28
 800def0:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 800def4:	e15a      	b.n	800e1ac <kalman_3gyro.constprop.0+0x184c>
 800def6:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800db44 <kalman_3gyro.constprop.0+0x11e4>
 800defa:	ed5f aaed 	vldr	s21, [pc, #-948]	; 800db48 <kalman_3gyro.constprop.0+0x11e8>
 800defe:	ed1f 9aed 	vldr	s18, [pc, #-948]	; 800db4c <kalman_3gyro.constprop.0+0x11ec>
 800df02:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 800df06:	f7fe bedd 	b.w	800ccc4 <kalman_3gyro.constprop.0+0x364>
 800df0a:	1c60      	adds	r0, r4, #1
 800df0c:	42be      	cmp	r6, r7
 800df0e:	eba7 0206 	sub.w	r2, r7, r6
 800df12:	4449      	add	r1, r9
 800df14:	4450      	add	r0, sl
 800df16:	f6bf ae39 	bge.w	800db8c <kalman_3gyro.constprop.0+0x122c>
 800df1a:	443c      	add	r4, r7
 800df1c:	1ba4      	subs	r4, r4, r6
 800df1e:	f009 fa91 	bl	8017444 <memcpy>
 800df22:	463e      	mov	r6, r7
 800df24:	4645      	mov	r5, r8
 800df26:	e632      	b.n	800db8e <kalman_3gyro.constprop.0+0x122e>
 800df28:	3601      	adds	r6, #1
 800df2a:	42be      	cmp	r6, r7
 800df2c:	f80a 2004 	strb.w	r2, [sl, r4]
 800df30:	f47f ae2d 	bne.w	800db8e <kalman_3gyro.constprop.0+0x122e>
 800df34:	9b02      	ldr	r3, [sp, #8]
 800df36:	f105 0801 	add.w	r8, r5, #1
 800df3a:	1c60      	adds	r0, r4, #1
 800df3c:	45c3      	cmp	fp, r8
 800df3e:	eba3 0205 	sub.w	r2, r3, r5
 800df42:	eb09 0105 	add.w	r1, r9, r5
 800df46:	4450      	add	r0, sl
 800df48:	f77f ae21 	ble.w	800db8e <kalman_3gyro.constprop.0+0x122e>
 800df4c:	f009 fa7a 	bl	8017444 <memcpy>
 800df50:	9b02      	ldr	r3, [sp, #8]
 800df52:	441c      	add	r4, r3
 800df54:	9b04      	ldr	r3, [sp, #16]
 800df56:	1b5a      	subs	r2, r3, r5
 800df58:	1b64      	subs	r4, r4, r5
 800df5a:	eb02 0508 	add.w	r5, r2, r8
 800df5e:	e616      	b.n	800db8e <kalman_3gyro.constprop.0+0x122e>
 800df60:	eef4 7a48 	vcmp.f32	s15, s16
 800df64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df68:	f43f ae46 	beq.w	800dbf8 <kalman_3gyro.constprop.0+0x1298>
 800df6c:	eef4 7a4b 	vcmp.f32	s15, s22
 800df70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df74:	f43f ae40 	beq.w	800dbf8 <kalman_3gyro.constprop.0+0x1298>
 800df78:	eeb4 7a48 	vcmp.f32	s14, s16
 800df7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df80:	f43f ae3a 	beq.w	800dbf8 <kalman_3gyro.constprop.0+0x1298>
 800df84:	eeb4 7a4b 	vcmp.f32	s14, s22
 800df88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df8c:	f43f ae34 	beq.w	800dbf8 <kalman_3gyro.constprop.0+0x1298>
 800df90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df94:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800df98:	eee7 7a26 	vfma.f32	s15, s14, s13
 800df9c:	e632      	b.n	800dc04 <kalman_3gyro.constprop.0+0x12a4>
 800df9e:	2304      	movs	r3, #4
 800dfa0:	9301      	str	r3, [sp, #4]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	461c      	mov	r4, r3
 800dfa6:	2307      	movs	r3, #7
 800dfa8:	4694      	mov	ip, r2
 800dfaa:	2106      	movs	r1, #6
 800dfac:	9302      	str	r3, [sp, #8]
 800dfae:	2603      	movs	r6, #3
 800dfb0:	f04f 0a01 	mov.w	sl, #1
 800dfb4:	f7ff ba5c 	b.w	800d470 <kalman_3gyro.constprop.0+0xb10>
 800dfb8:	9a08      	ldr	r2, [sp, #32]
 800dfba:	eddf 7a62 	vldr	s15, [pc, #392]	; 800e144 <kalman_3gyro.constprop.0+0x17e4>
 800dfbe:	eddf 5a62 	vldr	s11, [pc, #392]	; 800e148 <kalman_3gyro.constprop.0+0x17e8>
 800dfc2:	ed9f 5a62 	vldr	s10, [pc, #392]	; 800e14c <kalman_3gyro.constprop.0+0x17ec>
 800dfc6:	4b62      	ldr	r3, [pc, #392]	; (800e150 <kalman_3gyro.constprop.0+0x17f0>)
 800dfc8:	edc2 7a00 	vstr	s15, [r2]
 800dfcc:	eeb0 4a65 	vmov.f32	s8, s11
 800dfd0:	eeb0 3a67 	vmov.f32	s6, s15
 800dfd4:	eef0 4a45 	vmov.f32	s9, s10
 800dfd8:	6053      	str	r3, [r2, #4]
 800dfda:	6093      	str	r3, [r2, #8]
 800dfdc:	f7fe bd3e 	b.w	800ca5c <kalman_3gyro.constprop.0+0xfc>
 800dfe0:	2308      	movs	r3, #8
 800dfe2:	2005      	movs	r0, #5
 800dfe4:	f04f 0802 	mov.w	r8, #2
 800dfe8:	f7ff ba5c 	b.w	800d4a4 <kalman_3gyro.constprop.0+0xb44>
 800dfec:	f50b 6810 	add.w	r8, fp, #2304	; 0x900
 800dff0:	2300      	movs	r3, #0
 800dff2:	f88b 3900 	strb.w	r3, [fp, #2304]	; 0x900
 800dff6:	ed88 7a07 	vstr	s14, [r8, #28]
 800dffa:	ed88 7a08 	vstr	s14, [r8, #32]
 800dffe:	ed88 7a09 	vstr	s14, [r8, #36]	; 0x24
 800e002:	ed88 7a0a 	vstr	s14, [r8, #40]	; 0x28
 800e006:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
 800e00a:	e65f      	b.n	800dccc <kalman_3gyro.constprop.0+0x136c>
 800e00c:	ed9b 5a48 	vldr	s10, [fp, #288]	; 0x120
 800e010:	eeb4 5ac8 	vcmpe.f32	s10, s16
 800e014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e018:	f342 83b2 	ble.w	8010780 <kalman_3gyro.constprop.0+0x3e20>
 800e01c:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e024:	f2c2 86e9 	blt.w	8010dfa <kalman_3gyro.constprop.0+0x449a>
 800e028:	eddb 4a32 	vldr	s9, [fp, #200]	; 0xc8
 800e02c:	eef4 4ac8 	vcmpe.f32	s9, s16
 800e030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e034:	f342 8712 	ble.w	8010e5c <kalman_3gyro.constprop.0+0x44fc>
 800e038:	eddb 3a31 	vldr	s7, [fp, #196]	; 0xc4
 800e03c:	ed9b 4a33 	vldr	s8, [fp, #204]	; 0xcc
 800e040:	ee38 3a47 	vsub.f32	s6, s16, s14
 800e044:	ee34 4a63 	vsub.f32	s8, s8, s7
 800e048:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800e04c:	ee64 4a03 	vmul.f32	s9, s8, s6
 800e050:	ee84 ba87 	vdiv.f32	s22, s9, s14
 800e054:	ee3b ba23 	vadd.f32	s22, s22, s7
 800e058:	f002 bed8 	b.w	8010e0c <kalman_3gyro.constprop.0+0x44ac>
 800e05c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e060:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e068:	f342 84bd 	ble.w	80109e6 <kalman_3gyro.constprop.0+0x4086>
 800e06c:	ed9f 8a39 	vldr	s16, [pc, #228]	; 800e154 <kalman_3gyro.constprop.0+0x17f4>
 800e070:	f7ff b993 	b.w	800d39a <kalman_3gyro.constprop.0+0xa3a>
 800e074:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e078:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e080:	f342 849f 	ble.w	80109c2 <kalman_3gyro.constprop.0+0x4062>
 800e084:	ed9f ba33 	vldr	s22, [pc, #204]	; 800e154 <kalman_3gyro.constprop.0+0x17f4>
 800e088:	f7ff b964 	b.w	800d354 <kalman_3gyro.constprop.0+0x9f4>
 800e08c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e090:	eef4 dac7 	vcmpe.f32	s27, s14
 800e094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e098:	f342 84b7 	ble.w	8010a0a <kalman_3gyro.constprop.0+0x40aa>
 800e09c:	eddf da2d 	vldr	s27, [pc, #180]	; 800e154 <kalman_3gyro.constprop.0+0x17f4>
 800e0a0:	f7ff b935 	b.w	800d30e <kalman_3gyro.constprop.0+0x9ae>
 800e0a4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e0a8:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e0ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b0:	f342 8475 	ble.w	801099e <kalman_3gyro.constprop.0+0x403e>
 800e0b4:	ed9f 8a27 	vldr	s16, [pc, #156]	; 800e154 <kalman_3gyro.constprop.0+0x17f4>
 800e0b8:	f7ff b8c3 	b.w	800d242 <kalman_3gyro.constprop.0+0x8e2>
 800e0bc:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e0c0:	eeb4 bac7 	vcmpe.f32	s22, s14
 800e0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c8:	f342 83a0 	ble.w	801080c <kalman_3gyro.constprop.0+0x3eac>
 800e0cc:	ed9f ba21 	vldr	s22, [pc, #132]	; 800e154 <kalman_3gyro.constprop.0+0x17f4>
 800e0d0:	f7ff b894 	b.w	800d1fc <kalman_3gyro.constprop.0+0x89c>
 800e0d4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e0d8:	eef4 dac7 	vcmpe.f32	s27, s14
 800e0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e0:	f342 8382 	ble.w	80107e8 <kalman_3gyro.constprop.0+0x3e88>
 800e0e4:	eddf da1b 	vldr	s27, [pc, #108]	; 800e154 <kalman_3gyro.constprop.0+0x17f4>
 800e0e8:	f7ff b865 	b.w	800d1b6 <kalman_3gyro.constprop.0+0x856>
 800e0ec:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e0f0:	eef4 dac7 	vcmpe.f32	s27, s14
 800e0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f8:	f342 8364 	ble.w	80107c4 <kalman_3gyro.constprop.0+0x3e64>
 800e0fc:	eddf da15 	vldr	s27, [pc, #84]	; 800e154 <kalman_3gyro.constprop.0+0x17f4>
 800e100:	f7fe bff3 	b.w	800d0ea <kalman_3gyro.constprop.0+0x78a>
 800e104:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e108:	eeb4 eac7 	vcmpe.f32	s28, s14
 800e10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e110:	f342 8346 	ble.w	80107a0 <kalman_3gyro.constprop.0+0x3e40>
 800e114:	ed9f ea0f 	vldr	s28, [pc, #60]	; 800e154 <kalman_3gyro.constprop.0+0x17f4>
 800e118:	f7fe bfc4 	b.w	800d0a4 <kalman_3gyro.constprop.0+0x744>
 800e11c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e120:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e128:	f342 839e 	ble.w	8010868 <kalman_3gyro.constprop.0+0x3f08>
 800e12c:	ed9f 8a09 	vldr	s16, [pc, #36]	; 800e154 <kalman_3gyro.constprop.0+0x17f4>
 800e130:	f7fe bf95 	b.w	800d05e <kalman_3gyro.constprop.0+0x6fe>
 800e134:	eef1 3a63 	vneg.f32	s7, s7
 800e138:	f7ff bb42 	b.w	800d7c0 <kalman_3gyro.constprop.0+0xe60>
 800e13c:	eef1 3a63 	vneg.f32	s7, s7
 800e140:	f7ff bb1b 	b.w	800d77a <kalman_3gyro.constprop.0+0xe1a>
 800e144:	00000000 	.word	0x00000000
 800e148:	3fb33333 	.word	0x3fb33333
 800e14c:	bfb33333 	.word	0xbfb33333
 800e150:	3f333333 	.word	0x3f333333
 800e154:	80000000 	.word	0x80000000
 800e158:	3fb77778 	.word	0x3fb77778
 800e15c:	3f99999a 	.word	0x3f99999a
 800e160:	3f4ccccd 	.word	0x3f4ccccd
 800e164:	42d40000 	.word	0x42d40000
 800e168:	46979000 	.word	0x46979000
 800e16c:	4415c000 	.word	0x4415c000
 800e170:	3ba3d70a 	.word	0x3ba3d70a
 800e174:	3b449ba6 	.word	0x3b449ba6
 800e178:	3c75c28f 	.word	0x3c75c28f
 800e17c:	3c23d70a 	.word	0x3c23d70a
 800e180:	3d4cccc0 	.word	0x3d4cccc0
 800e184:	43480000 	.word	0x43480000
 800e188:	3d4ccccd 	.word	0x3d4ccccd
 800e18c:	3cf5c28f 	.word	0x3cf5c28f
 800e190:	3eb33334 	.word	0x3eb33334
 800e194:	3f933333 	.word	0x3f933333
 800e198:	4247ffff 	.word	0x4247ffff
 800e19c:	3dcccccd 	.word	0x3dcccccd
 800e1a0:	3e4ccccd 	.word	0x3e4ccccd
 800e1a4:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 800e1a8:	eeb0 ba4e 	vmov.f32	s22, s28
 800e1ac:	eddb da74 	vldr	s27, [fp, #464]	; 0x1d0
 800e1b0:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800e1b4:	ed5f 4a07 	vldr	s9, [pc, #-28]	; 800e19c <kalman_3gyro.constprop.0+0x183c>
 800e1b8:	ee79 da6d 	vsub.f32	s27, s18, s27
 800e1bc:	ee3c 5a47 	vsub.f32	s10, s24, s14
 800e1c0:	eef0 daed 	vabs.f32	s27, s27
 800e1c4:	eeb0 5ac5 	vabs.f32	s10, s10
 800e1c8:	ee35 5a2d 	vadd.f32	s10, s10, s27
 800e1cc:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800e1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d4:	f340 821c 	ble.w	800e610 <kalman_3gyro.constprop.0+0x1cb0>
 800e1d8:	ed1f 4a21 	vldr	s8, [pc, #-132]	; 800e158 <kalman_3gyro.constprop.0+0x17f8>
 800e1dc:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800e1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e4:	f302 828b 	bgt.w	80106fe <kalman_3gyro.constprop.0+0x3d9e>
 800e1e8:	ee35 5a64 	vsub.f32	s10, s10, s9
 800e1ec:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
 800e1f0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800e1f4:	eee5 4a04 	vfma.f32	s9, s10, s8
 800e1f8:	eeb0 5a64 	vmov.f32	s10, s9
 800e1fc:	eeb4 5aea 	vcmpe.f32	s10, s21
 800e200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e204:	f89b 3000 	ldrb.w	r3, [fp]
 800e208:	bfb8      	it	lt
 800e20a:	eeb0 5a6a 	vmovlt.f32	s10, s21
 800e20e:	ed8d 5a01 	vstr	s10, [sp, #4]
 800e212:	2b00      	cmp	r3, #0
 800e214:	f000 81f9 	beq.w	800e60a <kalman_3gyro.constprop.0+0x1caa>
 800e218:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f000 81de 	beq.w	800e5de <kalman_3gyro.constprop.0+0x1c7e>
 800e222:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e226:	2300      	movs	r3, #0
 800e228:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800e22c:	eeb0 6a61 	vmov.f32	s12, s3
 800e230:	eea7 6a47 	vfms.f32	s12, s14, s14
 800e234:	9908      	ldr	r1, [sp, #32]
 800e236:	eddd 3a37 	vldr	s7, [sp, #220]	; 0xdc
 800e23a:	ed9d 5a38 	vldr	s10, [sp, #224]	; 0xe0
 800e23e:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 800e242:	eddd 6a39 	vldr	s13, [sp, #228]	; 0xe4
 800e246:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 800e24a:	eef1 0ac6 	vsqrt.f32	s1, s12
 800e24e:	2200      	movs	r2, #0
 800e250:	f8cb 21b0 	str.w	r2, [fp, #432]	; 0x1b0
 800e254:	f8cb 21b4 	str.w	r2, [fp, #436]	; 0x1b4
 800e258:	f8cb 21b8 	str.w	r2, [fp, #440]	; 0x1b8
 800e25c:	9233      	str	r2, [sp, #204]	; 0xcc
 800e25e:	ee23 6aa3 	vmul.f32	s12, s7, s7
 800e262:	ee23 4a85 	vmul.f32	s8, s7, s10
 800e266:	ee36 2a06 	vadd.f32	s4, s12, s12
 800e26a:	ee25 6a05 	vmul.f32	s12, s10, s10
 800e26e:	ee22 1aa2 	vmul.f32	s2, s5, s5
 800e272:	ee36 6a06 	vadd.f32	s12, s12, s12
 800e276:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e27a:	ee63 4aa6 	vmul.f32	s9, s7, s13
 800e27e:	ee34 4a04 	vadd.f32	s8, s8, s8
 800e282:	eeb0 3a42 	vmov.f32	s6, s4
 800e286:	ee22 0aa6 	vmul.f32	s0, s5, s13
 800e28a:	eea1 3a25 	vfma.f32	s6, s2, s11
 800e28e:	eef0 aa46 	vmov.f32	s21, s12
 800e292:	ee62 3aa3 	vmul.f32	s7, s5, s7
 800e296:	eee1 aa25 	vfma.f32	s21, s2, s11
 800e29a:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800e29e:	ee65 6a26 	vmul.f32	s13, s10, s13
 800e2a2:	ee22 5a85 	vmul.f32	s10, s5, s10
 800e2a6:	eef0 2a44 	vmov.f32	s5, s8
 800e2aa:	eee0 2a25 	vfma.f32	s5, s0, s11
 800e2ae:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e2b2:	eeb0 fa64 	vmov.f32	s30, s9
 800e2b6:	eea0 4a65 	vfms.f32	s8, s0, s11
 800e2ba:	ee71 fac3 	vsub.f32	s31, s3, s6
 800e2be:	ee95 fa25 	vfnms.f32	s30, s10, s11
 800e2c2:	eeb0 1a6a 	vmov.f32	s2, s21
 800e2c6:	eef0 aa66 	vmov.f32	s21, s13
 800e2ca:	eee3 aaa5 	vfma.f32	s21, s7, s11
 800e2ce:	ee31 1ac1 	vsub.f32	s2, s3, s2
 800e2d2:	ee2f 0a87 	vmul.f32	s0, s31, s14
 800e2d6:	ee32 6a06 	vadd.f32	s12, s4, s12
 800e2da:	ee22 2a87 	vmul.f32	s4, s5, s14
 800e2de:	eea0 0a84 	vfma.f32	s0, s1, s8
 800e2e2:	eea0 2a81 	vfma.f32	s4, s1, s2
 800e2e6:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800e2ea:	eed3 6aa5 	vfnms.f32	s13, s7, s11
 800e2ee:	eef0 3a64 	vmov.f32	s7, s9
 800e2f2:	eee5 3a65 	vfms.f32	s7, s10, s11
 800e2f6:	eee5 4a25 	vfma.f32	s9, s10, s11
 800e2fa:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e2fe:	edd1 5a02 	vldr	s11, [r1, #8]
 800e302:	ed91 5a05 	vldr	s10, [r1, #20]
 800e306:	edcd fa53 	vstr	s31, [sp, #332]	; 0x14c
 800e30a:	ee31 6ac6 	vsub.f32	s12, s3, s12
 800e30e:	eea0 7aaa 	vfma.f32	s14, s1, s21
 800e312:	edd1 1a01 	vldr	s3, [r1, #4]
 800e316:	edd1 fa00 	vldr	s31, [r1]
 800e31a:	ed8d 4a52 	vstr	s8, [sp, #328]	; 0x148
 800e31e:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e322:	ee31 2ac2 	vsub.f32	s4, s3, s4
 800e326:	edd1 5a03 	vldr	s11, [r1, #12]
 800e32a:	edd1 1a04 	vldr	s3, [r1, #16]
 800e32e:	ed1f 4a75 	vldr	s8, [pc, #-468]	; 800e15c <kalman_3gyro.constprop.0+0x17fc>
 800e332:	edcd 2a50 	vstr	s5, [sp, #320]	; 0x140
 800e336:	ee33 3a05 	vadd.f32	s6, s6, s10
 800e33a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800e33e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 800e342:	ee3f 7ac7 	vsub.f32	s14, s31, s14
 800e346:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34e:	edcd 0a34 	vstr	s1, [sp, #208]	; 0xd0
 800e352:	ed8d 0a7d 	vstr	s0, [sp, #500]	; 0x1f4
 800e356:	ed8d 1a4f 	vstr	s2, [sp, #316]	; 0x13c
 800e35a:	ed8d 6a4b 	vstr	s12, [sp, #300]	; 0x12c
 800e35e:	ed8d 2a7c 	vstr	s4, [sp, #496]	; 0x1f0
 800e362:	ed8d fa4d 	vstr	s30, [sp, #308]	; 0x134
 800e366:	edcd aa4c 	vstr	s21, [sp, #304]	; 0x130
 800e36a:	edcd 6a4e 	vstr	s13, [sp, #312]	; 0x138
 800e36e:	ed8d 7a7b 	vstr	s14, [sp, #492]	; 0x1ec
 800e372:	edcd 2a2e 	vstr	s5, [sp, #184]	; 0xb8
 800e376:	edcd 2a7f 	vstr	s5, [sp, #508]	; 0x1fc
 800e37a:	edcd 4a51 	vstr	s9, [sp, #324]	; 0x144
 800e37e:	edcd 3a2d 	vstr	s7, [sp, #180]	; 0xb4
 800e382:	edcd 3a7e 	vstr	s7, [sp, #504]	; 0x1f8
 800e386:	ed8d 3a2f 	vstr	s6, [sp, #188]	; 0xbc
 800e38a:	ed8d 3a80 	vstr	s6, [sp, #512]	; 0x200
 800e38e:	ed8d ca84 	vstr	s24, [sp, #528]	; 0x210
 800e392:	ed8d aa85 	vstr	s20, [sp, #532]	; 0x214
 800e396:	ed8d 9a86 	vstr	s18, [sp, #536]	; 0x218
 800e39a:	d506      	bpl.n	800e3aa <kalman_3gyro.constprop.0+0x1a4a>
 800e39c:	ed1f 7a90 	vldr	s14, [pc, #-576]	; 800e160 <kalman_3gyro.constprop.0+0x1800>
 800e3a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3a8:	dc01      	bgt.n	800e3ae <kalman_3gyro.constprop.0+0x1a4e>
 800e3aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e3ae:	ee7a 7a67 	vsub.f32	s15, s20, s15
 800e3b2:	eef0 7ae7 	vabs.f32	s15, s15
 800e3b6:	ee77 7aab 	vadd.f32	s15, s15, s23
 800e3ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3c2:	f340 8141 	ble.w	800e648 <kalman_3gyro.constprop.0+0x1ce8>
 800e3c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e3ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d2:	f142 8198 	bpl.w	8010706 <kalman_3gyro.constprop.0+0x3da6>
 800e3d6:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800e170 <kalman_3gyro.constprop.0+0x1810>
 800e3da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3de:	ed1f 7a99 	vldr	s14, [pc, #-612]	; 800e17c <kalman_3gyro.constprop.0+0x181c>
 800e3e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3ea:	f102 8221 	bmi.w	8010830 <kalman_3gyro.constprop.0+0x3ed0>
 800e3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3f2:	f142 8221 	bpl.w	8010838 <kalman_3gyro.constprop.0+0x3ed8>
 800e3f6:	ed1f 7aa0 	vldr	s14, [pc, #-640]	; 800e178 <kalman_3gyro.constprop.0+0x1818>
 800e3fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e402:	f282 84a4 	bge.w	8010d4e <kalman_3gyro.constprop.0+0x43ee>
 800e406:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e40a:	ed5f 6aa0 	vldr	s13, [pc, #-640]	; 800e18c <kalman_3gyro.constprop.0+0x182c>
 800e40e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e416:	f2c2 84b0 	blt.w	8010d7a <kalman_3gyro.constprop.0+0x441a>
 800e41a:	ed1f 7aa5 	vldr	s14, [pc, #-660]	; 800e188 <kalman_3gyro.constprop.0+0x1828>
 800e41e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e426:	f142 84b0 	bpl.w	8010d8a <kalman_3gyro.constprop.0+0x442a>
 800e42a:	ed5f 6aa8 	vldr	s13, [pc, #-672]	; 800e18c <kalman_3gyro.constprop.0+0x182c>
 800e42e:	ed1f 6aa6 	vldr	s12, [pc, #-664]	; 800e198 <kalman_3gyro.constprop.0+0x1838>
 800e432:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e436:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e43a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e43e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e442:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e446:	ed5f 6aab 	vldr	s13, [pc, #-684]	; 800e19c <kalman_3gyro.constprop.0+0x183c>
 800e44a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e452:	f2c2 84b0 	blt.w	8010db6 <kalman_3gyro.constprop.0+0x4456>
 800e456:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 800e1a0 <kalman_3gyro.constprop.0+0x1840>
 800e45a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	f142 84b0 	bpl.w	8010dc6 <kalman_3gyro.constprop.0+0x4466>
 800e466:	ed5f 6ab3 	vldr	s13, [pc, #-716]	; 800e19c <kalman_3gyro.constprop.0+0x183c>
 800e46a:	ed1f 7ac2 	vldr	s14, [pc, #-776]	; 800e164 <kalman_3gyro.constprop.0+0x1804>
 800e46e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e472:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800e476:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e47a:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800e47e:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e482:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e486:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e48e:	db0d      	blt.n	800e4ac <kalman_3gyro.constprop.0+0x1b4c>
 800e490:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e494:	ed1f 6acc 	vldr	s12, [pc, #-816]	; 800e168 <kalman_3gyro.constprop.0+0x1808>
 800e498:	ed1f 7acc 	vldr	s14, [pc, #-816]	; 800e16c <kalman_3gyro.constprop.0+0x180c>
 800e49c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e4a0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e4a4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e4a8:	eea6 7a86 	vfma.f32	s14, s13, s12
 800e4ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4b0:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e4b4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e4b8:	eec6 4a26 	vdiv.f32	s9, s12, s13
 800e4bc:	ed1f 6ad2 	vldr	s12, [pc, #-840]	; 800e178 <kalman_3gyro.constprop.0+0x1818>
 800e4c0:	ed5f 3ad5 	vldr	s7, [pc, #-852]	; 800e170 <kalman_3gyro.constprop.0+0x1810>
 800e4c4:	ed5f 6ad3 	vldr	s13, [pc, #-844]	; 800e17c <kalman_3gyro.constprop.0+0x181c>
 800e4c8:	ed1f 4ad6 	vldr	s8, [pc, #-856]	; 800e174 <kalman_3gyro.constprop.0+0x1814>
 800e4cc:	eef4 4ac6 	vcmpe.f32	s9, s12
 800e4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d4:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e4d8:	bfb8      	it	lt
 800e4da:	eef0 4a46 	vmovlt.f32	s9, s12
 800e4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e2:	ee24 4a84 	vmul.f32	s8, s9, s8
 800e4e6:	ee24 6aa6 	vmul.f32	s12, s9, s13
 800e4ea:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e4ee:	f142 841f 	bpl.w	8010d30 <kalman_3gyro.constprop.0+0x43d0>
 800e4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4f6:	f2c2 841f 	blt.w	8010d38 <kalman_3gyro.constprop.0+0x43d8>
 800e4fa:	ed5f 6ae1 	vldr	s13, [pc, #-900]	; 800e178 <kalman_3gyro.constprop.0+0x1818>
 800e4fe:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e506:	f142 83ba 	bpl.w	8010c7e <kalman_3gyro.constprop.0+0x431e>
 800e50a:	ed5f 3ae4 	vldr	s7, [pc, #-912]	; 800e17c <kalman_3gyro.constprop.0+0x181c>
 800e50e:	ed5f 2ae4 	vldr	s5, [pc, #-912]	; 800e180 <kalman_3gyro.constprop.0+0x1820>
 800e512:	ed1f 3ae4 	vldr	s6, [pc, #-912]	; 800e184 <kalman_3gyro.constprop.0+0x1824>
 800e516:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e51a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e51e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e522:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e526:	eeb0 ca66 	vmov.f32	s24, s13
 800e52a:	ed5f 6ae8 	vldr	s13, [pc, #-928]	; 800e18c <kalman_3gyro.constprop.0+0x182c>
 800e52e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e536:	f2c2 83ba 	blt.w	8010cae <kalman_3gyro.constprop.0+0x434e>
 800e53a:	ed5f 6aed 	vldr	s13, [pc, #-948]	; 800e188 <kalman_3gyro.constprop.0+0x1828>
 800e53e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e546:	f142 83ba 	bpl.w	8010cbe <kalman_3gyro.constprop.0+0x435e>
 800e54a:	ed5f 3af0 	vldr	s7, [pc, #-960]	; 800e18c <kalman_3gyro.constprop.0+0x182c>
 800e54e:	ed5f 2af0 	vldr	s5, [pc, #-960]	; 800e190 <kalman_3gyro.constprop.0+0x1830>
 800e552:	ed1f 3aef 	vldr	s6, [pc, #-956]	; 800e198 <kalman_3gyro.constprop.0+0x1838>
 800e556:	ed5f 6af1 	vldr	s13, [pc, #-964]	; 800e194 <kalman_3gyro.constprop.0+0x1834>
 800e55a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e55e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e562:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e566:	eeb0 ca66 	vmov.f32	s24, s13
 800e56a:	ed5f 6af4 	vldr	s13, [pc, #-976]	; 800e19c <kalman_3gyro.constprop.0+0x183c>
 800e56e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e576:	f2c2 83ba 	blt.w	8010cee <kalman_3gyro.constprop.0+0x438e>
 800e57a:	ed5f 6af7 	vldr	s13, [pc, #-988]	; 800e1a0 <kalman_3gyro.constprop.0+0x1840>
 800e57e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e586:	f142 83ba 	bpl.w	8010cfe <kalman_3gyro.constprop.0+0x439e>
 800e58a:	eddf 3a23 	vldr	s7, [pc, #140]	; 800e618 <kalman_3gyro.constprop.0+0x1cb8>
 800e58e:	eddf 6a23 	vldr	s13, [pc, #140]	; 800e61c <kalman_3gyro.constprop.0+0x1cbc>
 800e592:	ee77 3ae3 	vsub.f32	s7, s15, s7
 800e596:	eeb2 3a04 	vmov.f32	s6, #36	; 0x41200000  10.0
 800e59a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800e59e:	eef7 6a0c 	vmov.f32	s13, #124	; 0x3fe00000  1.750
 800e5a2:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e5a6:	eeb0 ca66 	vmov.f32	s24, s13
 800e5aa:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e5ae:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e5b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b6:	f2c2 80b0 	blt.w	801071a <kalman_3gyro.constprop.0+0x3dba>
 800e5ba:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e5be:	ee37 3ae3 	vsub.f32	s6, s15, s7
 800e5c2:	eddf 3a17 	vldr	s7, [pc, #92]	; 800e620 <kalman_3gyro.constprop.0+0x1cc0>
 800e5c6:	eddf 6a17 	vldr	s13, [pc, #92]	; 800e624 <kalman_3gyro.constprop.0+0x1cc4>
 800e5ca:	ee63 3a23 	vmul.f32	s7, s6, s7
 800e5ce:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 800e5d2:	eee3 6a83 	vfma.f32	s13, s7, s6
 800e5d6:	eeb0 ca66 	vmov.f32	s24, s13
 800e5da:	f002 b89e 	b.w	801071a <kalman_3gyro.constprop.0+0x3dba>
 800e5de:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e5e2:	ed9b 6a05 	vldr	s12, [fp, #20]
 800e5e6:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800e5ea:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
 800e5ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800e5f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e5f6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e5fa:	ee66 6a26 	vmul.f32	s13, s12, s13
 800e5fe:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e606:	f102 8246 	bmi.w	8010a96 <kalman_3gyro.constprop.0+0x4136>
 800e60a:	eddb 7a73 	vldr	s15, [fp, #460]	; 0x1cc
 800e60e:	e60b      	b.n	800e228 <kalman_3gyro.constprop.0+0x18c8>
 800e610:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800e614:	e5f2      	b.n	800e1fc <kalman_3gyro.constprop.0+0x189c>
 800e616:	bf00      	nop
 800e618:	3dcccccd 	.word	0x3dcccccd
 800e61c:	410c0000 	.word	0x410c0000
 800e620:	42c80000 	.word	0x42c80000
 800e624:	424a0000 	.word	0x424a0000
 800e628:	3c23d70a 	.word	0x3c23d70a
 800e62c:	3b449ba6 	.word	0x3b449ba6
 800e630:	3fb33333 	.word	0x3fb33333
 800e634:	3ecccccd 	.word	0x3ecccccd
 800e638:	3f8f5c29 	.word	0x3f8f5c29
 800e63c:	3f59999a 	.word	0x3f59999a
 800e640:	3e4ccccd 	.word	0x3e4ccccd
 800e644:	3f99999a 	.word	0x3f99999a
 800e648:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 800e64c:	ed1f 6a0a 	vldr	s12, [pc, #-40]	; 800e628 <kalman_3gyro.constprop.0+0x1cc8>
 800e650:	ed1f 4a0a 	vldr	s8, [pc, #-40]	; 800e62c <kalman_3gyro.constprop.0+0x1ccc>
 800e654:	eeb0 7a4c 	vmov.f32	s14, s24
 800e658:	eef0 4a4c 	vmov.f32	s9, s24
 800e65c:	eddd 6a01 	vldr	s13, [sp, #4]
 800e660:	ed9d 3a6f 	vldr	s6, [sp, #444]	; 0x1bc
 800e664:	eddd 2a70 	vldr	s5, [sp, #448]	; 0x1c0
 800e668:	ed9d 2a72 	vldr	s4, [sp, #456]	; 0x1c8
 800e66c:	ed8d 4a48 	vstr	s8, [sp, #288]	; 0x120
 800e670:	ee66 aa8b 	vmul.f32	s21, s13, s22
 800e674:	eddd 6a20 	vldr	s13, [sp, #128]	; 0x80
 800e678:	ed9d ba71 	vldr	s22, [sp, #452]	; 0x1c4
 800e67c:	ed9d 4a0d 	vldr	s8, [sp, #52]	; 0x34
 800e680:	f89b 200c 	ldrb.w	r2, [fp, #12]
 800e684:	edcd 9a73 	vstr	s19, [sp, #460]	; 0x1cc
 800e688:	ee76 3aa6 	vadd.f32	s7, s13, s13
 800e68c:	eddd 6a21 	vldr	s13, [sp, #132]	; 0x84
 800e690:	edcd 9a74 	vstr	s19, [sp, #464]	; 0x1d0
 800e694:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e698:	ee2a 3a83 	vmul.f32	s6, s21, s6
 800e69c:	ee62 2aaa 	vmul.f32	s5, s5, s21
 800e6a0:	ee63 3a87 	vmul.f32	s7, s7, s14
 800e6a4:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e6a8:	ee6b aa2a 	vmul.f32	s21, s22, s21
 800e6ac:	ee2e ea02 	vmul.f32	s28, s28, s4
 800e6b0:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e6b4:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e6b8:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e6bc:	ed8d 4a7a 	vstr	s8, [sp, #488]	; 0x1e8
 800e6c0:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 800e6c4:	edcd 2a70 	vstr	s5, [sp, #448]	; 0x1c0
 800e6c8:	edcd aa71 	vstr	s21, [sp, #452]	; 0x1c4
 800e6cc:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e6d0:	2a00      	cmp	r2, #0
 800e6d2:	f001 8411 	beq.w	800fef8 <kalman_3gyro.constprop.0+0x3598>
 800e6d6:	ee77 2a07 	vadd.f32	s5, s14, s14
 800e6da:	ed9d 4a29 	vldr	s8, [sp, #164]	; 0xa4
 800e6de:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800e6e2:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800e6e6:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800e6ea:	ee24 4a24 	vmul.f32	s8, s8, s9
 800e6ee:	ee27 ea0e 	vmul.f32	s28, s14, s28
 800e6f2:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e6f6:	ee29 7a87 	vmul.f32	s14, s19, s14
 800e6fa:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e6fe:	ed8d ea72 	vstr	s28, [sp, #456]	; 0x1c8
 800e702:	ed8d 4a42 	vstr	s8, [sp, #264]	; 0x108
 800e706:	ed8d 4a43 	vstr	s8, [sp, #268]	; 0x10c
 800e70a:	ed8d 4a44 	vstr	s8, [sp, #272]	; 0x110
 800e70e:	edcd 6a79 	vstr	s13, [sp, #484]	; 0x1e4
 800e712:	ed8d 7a73 	vstr	s14, [sp, #460]	; 0x1cc
 800e716:	ed8d 7a74 	vstr	s14, [sp, #464]	; 0x1d0
 800e71a:	ed8d 6a49 	vstr	s12, [sp, #292]	; 0x124
 800e71e:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800e722:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800e726:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800e72a:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800e72e:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800e732:	b159      	cbz	r1, 800e74c <kalman_3gyro.constprop.0+0x1dec>
 800e734:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e740:	dd04      	ble.n	800e74c <kalman_3gyro.constprop.0+0x1dec>
 800e742:	2000      	movs	r0, #0
 800e744:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
 800e748:	f8ad 00ac 	strh.w	r0, [sp, #172]	; 0xac
 800e74c:	eef5 eac0 	vcmpe.f32	s29, #0.0
 800e750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e754:	dd09      	ble.n	800e76a <kalman_3gyro.constprop.0+0x1e0a>
 800e756:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800e75a:	eef4 7ac8 	vcmpe.f32	s15, s16
 800e75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e762:	db02      	blt.n	800e76a <kalman_3gyro.constprop.0+0x1e0a>
 800e764:	2b00      	cmp	r3, #0
 800e766:	f002 8001 	beq.w	801076c <kalman_3gyro.constprop.0+0x3e0c>
 800e76a:	b132      	cbz	r2, 800e77a <kalman_3gyro.constprop.0+0x1e1a>
 800e76c:	f240 1001 	movw	r0, #257	; 0x101
 800e770:	2301      	movs	r3, #1
 800e772:	f8ad 00a8 	strh.w	r0, [sp, #168]	; 0xa8
 800e776:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e77a:	2301      	movs	r3, #1
 800e77c:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e780:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e784:	ed5f 7a56 	vldr	s15, [pc, #-344]	; 800e630 <kalman_3gyro.constprop.0+0x1cd0>
 800e788:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e78c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e790:	dc09      	bgt.n	800e7a6 <kalman_3gyro.constprop.0+0x1e46>
 800e792:	ed5f 7a58 	vldr	s15, [pc, #-352]	; 800e634 <kalman_3gyro.constprop.0+0x1cd4>
 800e796:	eeb4 9ae7 	vcmpe.f32	s18, s15
 800e79a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e79e:	d402      	bmi.n	800e7a6 <kalman_3gyro.constprop.0+0x1e46>
 800e7a0:	2a00      	cmp	r2, #0
 800e7a2:	f042 80e4 	bne.w	801096e <kalman_3gyro.constprop.0+0x400e>
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e7ac:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e7b0:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e7b4:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 800e7b8:	ed5f 7a61 	vldr	s15, [pc, #-388]	; 800e638 <kalman_3gyro.constprop.0+0x1cd8>
 800e7bc:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c4:	dc09      	bgt.n	800e7da <kalman_3gyro.constprop.0+0x1e7a>
 800e7c6:	ed5f 7a63 	vldr	s15, [pc, #-396]	; 800e63c <kalman_3gyro.constprop.0+0x1cdc>
 800e7ca:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d2:	d402      	bmi.n	800e7da <kalman_3gyro.constprop.0+0x1e7a>
 800e7d4:	2900      	cmp	r1, #0
 800e7d6:	f042 8097 	bne.w	8010908 <kalman_3gyro.constprop.0+0x3fa8>
 800e7da:	2300      	movs	r3, #0
 800e7dc:	f88d 30ab 	strb.w	r3, [sp, #171]	; 0xab
 800e7e0:	f8ad 30ac 	strh.w	r3, [sp, #172]	; 0xac
 800e7e4:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 800e7e8:	f88d 30b2 	strb.w	r3, [sp, #178]	; 0xb2
 800e7ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e7f0:	eef4 dae7 	vcmpe.f32	s27, s15
 800e7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7f8:	f341 836b 	ble.w	800fed2 <kalman_3gyro.constprop.0+0x3572>
 800e7fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e800:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 800e804:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800e808:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e80c:	2300      	movs	r3, #0
 800e80e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800e812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e816:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800e81a:	eef4 dac7 	vcmpe.f32	s27, s14
 800e81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e822:	bfc4      	itt	gt
 800e824:	f88d 30b1 	strbgt.w	r3, [sp, #177]	; 0xb1
 800e828:	f88d 30b3 	strbgt.w	r3, [sp, #179]	; 0xb3
 800e82c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 800e830:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 800e834:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800e838:	edcd 3a78 	vstr	s7, [sp, #480]	; 0x1e0
 800e83c:	2b0e      	cmp	r3, #14
 800e83e:	edcd 7a7a 	vstr	s15, [sp, #488]	; 0x1e8
 800e842:	dc02      	bgt.n	800e84a <kalman_3gyro.constprop.0+0x1eea>
 800e844:	3305      	adds	r3, #5
 800e846:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800e84a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e84e:	eef4 7acd 	vcmpe.f32	s15, s26
 800e852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e856:	f340 82e9 	ble.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800e85a:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800e85e:	eef4 7aeb 	vcmpe.f32	s15, s23
 800e862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e866:	f340 82e1 	ble.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800e86a:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800e86e:	eef4 7aec 	vcmpe.f32	s15, s25
 800e872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e876:	f340 82d9 	ble.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800e87a:	9b08      	ldr	r3, [sp, #32]
 800e87c:	ed5f 7a90 	vldr	s15, [pc, #-576]	; 800e640 <kalman_3gyro.constprop.0+0x1ce0>
 800e880:	ed93 7a06 	vldr	s14, [r3, #24]
 800e884:	eef0 6ac7 	vabs.f32	s13, s14
 800e888:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e890:	f140 82cc 	bpl.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800e894:	edd3 6a07 	vldr	s13, [r3, #28]
 800e898:	eeb0 6ae6 	vabs.f32	s12, s13
 800e89c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800e8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a4:	f140 82c2 	bpl.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800e8a8:	ed93 6a08 	vldr	s12, [r3, #32]
 800e8ac:	eef0 4ac6 	vabs.f32	s9, s12
 800e8b0:	eef4 4ae7 	vcmpe.f32	s9, s15
 800e8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b8:	f140 82b8 	bpl.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800e8bc:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 800e644 <kalman_3gyro.constprop.0+0x1ce4>
 800e8c0:	eef0 5ae5 	vabs.f32	s11, s11
 800e8c4:	eef4 5ae7 	vcmpe.f32	s11, s15
 800e8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8cc:	f140 82ae 	bpl.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800e8d0:	eef0 1ae1 	vabs.f32	s3, s3
 800e8d4:	eef4 1ae7 	vcmpe.f32	s3, s15
 800e8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8dc:	f140 82a6 	bpl.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800e8e0:	eeb0 5ac5 	vabs.f32	s10, s10
 800e8e4:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800e8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ec:	f140 829e 	bpl.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800e8f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e8f2:	f89b 21a0 	ldrb.w	r2, [fp, #416]	; 0x1a0
 800e8f6:	edd3 5a00 	vldr	s11, [r3]
 800e8fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e8fc:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e8fe:	ed93 5a00 	vldr	s10, [r3]
 800e902:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e904:	eef4 5ac5 	vcmpe.f32	s11, s10
 800e908:	2a09      	cmp	r2, #9
 800e90a:	f50b 64f6 	add.w	r4, fp, #1968	; 0x7b0
 800e90e:	ed93 4a00 	vldr	s8, [r3]
 800e912:	edd4 3a00 	vldr	s7, [r4]
 800e916:	bf8c      	ite	hi
 800e918:	230a      	movhi	r3, #10
 800e91a:	2305      	movls	r3, #5
 800e91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e920:	bfb4      	ite	lt
 800e922:	eef0 7a45 	vmovlt.f32	s15, s10
 800e926:	eef0 7a65 	vmovge.f32	s15, s11
 800e92a:	bf8c      	ite	hi
 800e92c:	eef0 4a45 	vmovhi.f32	s9, s10
 800e930:	eef0 4a65 	vmovls.f32	s9, s11
 800e934:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e93c:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e940:	bfb8      	it	lt
 800e942:	eef0 7a63 	vmovlt.f32	s15, s7
 800e946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e94a:	bf88      	it	hi
 800e94c:	eef0 4a63 	vmovhi.f32	s9, s7
 800e950:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e958:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e95c:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e960:	edd1 5a00 	vldr	s11, [r1]
 800e964:	9910      	ldr	r1, [sp, #64]	; 0x40
 800e966:	bfb8      	it	lt
 800e968:	eef0 7a44 	vmovlt.f32	s15, s8
 800e96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e970:	bf88      	it	hi
 800e972:	eef0 4a44 	vmovhi.f32	s9, s8
 800e976:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e97a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e982:	eef4 4ae5 	vcmpe.f32	s9, s11
 800e986:	bfb8      	it	lt
 800e988:	eef0 7a65 	vmovlt.f32	s15, s11
 800e98c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800e990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e994:	bf88      	it	hi
 800e996:	eef0 4a65 	vmovhi.f32	s9, s11
 800e99a:	2b05      	cmp	r3, #5
 800e99c:	ee35 5a25 	vadd.f32	s10, s10, s11
 800e9a0:	edd1 5a00 	vldr	s11, [r1]
 800e9a4:	d065      	beq.n	800ea72 <kalman_3gyro.constprop.0+0x2112>
 800e9a6:	f20b 71d4 	addw	r1, fp, #2004	; 0x7d4
 800e9aa:	edd1 3a00 	vldr	s7, [r1]
 800e9ae:	f50b 61fc 	add.w	r1, fp, #2016	; 0x7e0
 800e9b2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e9b6:	ed91 4a00 	vldr	s8, [r1]
 800e9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9be:	eef4 4ae3 	vcmpe.f32	s9, s7
 800e9c2:	bfb8      	it	lt
 800e9c4:	eef0 7a63 	vmovlt.f32	s15, s7
 800e9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9cc:	bf88      	it	hi
 800e9ce:	eef0 4a63 	vmovhi.f32	s9, s7
 800e9d2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800e9d6:	f20b 71ec 	addw	r1, fp, #2028	; 0x7ec
 800e9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9de:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e9e2:	eef4 4ac4 	vcmpe.f32	s9, s8
 800e9e6:	edd1 3a00 	vldr	s7, [r1]
 800e9ea:	bfb8      	it	lt
 800e9ec:	eef0 7a44 	vmovlt.f32	s15, s8
 800e9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f4:	bf88      	it	hi
 800e9f6:	eef0 4a44 	vmovhi.f32	s9, s8
 800e9fa:	eef4 7ae3 	vcmpe.f32	s15, s7
 800e9fe:	f50b 61ff 	add.w	r1, fp, #2040	; 0x7f8
 800ea02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea06:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ea0a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ea0e:	ed91 4a00 	vldr	s8, [r1]
 800ea12:	bfb8      	it	lt
 800ea14:	eef0 7a63 	vmovlt.f32	s15, s7
 800ea18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1c:	bf88      	it	hi
 800ea1e:	eef0 4a63 	vmovhi.f32	s9, s7
 800ea22:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ea26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea2a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ea2e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ea32:	bfb8      	it	lt
 800ea34:	eef0 7a44 	vmovlt.f32	s15, s8
 800ea38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea3c:	bf88      	it	hi
 800ea3e:	eef0 4a44 	vmovhi.f32	s9, s8
 800ea42:	2b0a      	cmp	r3, #10
 800ea44:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ea48:	d113      	bne.n	800ea72 <kalman_3gyro.constprop.0+0x2112>
 800ea4a:	f60b 0104 	addw	r1, fp, #2052	; 0x804
 800ea4e:	ed91 4a00 	vldr	s8, [r1]
 800ea52:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ea56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea5a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ea5e:	bfb8      	it	lt
 800ea60:	eef0 7a44 	vmovlt.f32	s15, s8
 800ea64:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ea68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea6c:	bf88      	it	hi
 800ea6e:	eef0 4a44 	vmovhi.f32	s9, s8
 800ea72:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ea76:	eddf 4ae7 	vldr	s9, [pc, #924]	; 800ee14 <kalman_3gyro.constprop.0+0x24b4>
 800ea7a:	ed9f 4ae7 	vldr	s8, [pc, #924]	; 800ee18 <kalman_3gyro.constprop.0+0x24b8>
 800ea7e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ea82:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ea86:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ea8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea8e:	f300 81cd 	bgt.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800ea92:	eef0 7ac5 	vabs.f32	s15, s10
 800ea96:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ea9a:	ed9f 5ae0 	vldr	s10, [pc, #896]	; 800ee1c <kalman_3gyro.constprop.0+0x24bc>
 800ea9e:	eef4 7ac5 	vcmpe.f32	s15, s10
 800eaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa6:	f300 81c1 	bgt.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800eaaa:	9911      	ldr	r1, [sp, #68]	; 0x44
 800eaac:	ed91 5a00 	vldr	s10, [r1]
 800eab0:	9918      	ldr	r1, [sp, #96]	; 0x60
 800eab2:	ed91 4a00 	vldr	s8, [r1]
 800eab6:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800eab8:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800eabc:	f20b 70b4 	addw	r0, fp, #1972	; 0x7b4
 800eac0:	ed90 3a00 	vldr	s6, [r0]
 800eac4:	edd1 3a00 	vldr	s7, [r1]
 800eac8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800eaca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eace:	bfb4      	ite	lt
 800ead0:	eef0 7a44 	vmovlt.f32	s15, s8
 800ead4:	eef0 7a45 	vmovge.f32	s15, s10
 800ead8:	bf8c      	ite	hi
 800eada:	eef0 4a44 	vmovhi.f32	s9, s8
 800eade:	eef0 4a45 	vmovls.f32	s9, s10
 800eae2:	eef4 7ac3 	vcmpe.f32	s15, s6
 800eae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaea:	eef4 4ac3 	vcmpe.f32	s9, s6
 800eaee:	bfb8      	it	lt
 800eaf0:	eef0 7a43 	vmovlt.f32	s15, s6
 800eaf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf8:	bf88      	it	hi
 800eafa:	eef0 4a43 	vmovhi.f32	s9, s6
 800eafe:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eb02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb06:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eb0a:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eb0e:	ed91 4a00 	vldr	s8, [r1]
 800eb12:	bfb8      	it	lt
 800eb14:	eef0 7a63 	vmovlt.f32	s15, s7
 800eb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb1c:	bf88      	it	hi
 800eb1e:	eef0 4a63 	vmovhi.f32	s9, s7
 800eb22:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eb26:	ee35 5a03 	vadd.f32	s10, s10, s6
 800eb2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb2e:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eb32:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eb36:	bfb8      	it	lt
 800eb38:	eef0 7a44 	vmovlt.f32	s15, s8
 800eb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb40:	bf88      	it	hi
 800eb42:	eef0 4a44 	vmovhi.f32	s9, s8
 800eb46:	2b05      	cmp	r3, #5
 800eb48:	ee35 5a04 	vadd.f32	s10, s10, s8
 800eb4c:	d065      	beq.n	800ec1a <kalman_3gyro.constprop.0+0x22ba>
 800eb4e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 800eb52:	edd1 3a00 	vldr	s7, [r1]
 800eb56:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 800eb5a:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eb5e:	ed91 4a00 	vldr	s8, [r1]
 800eb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb66:	eef4 4ae3 	vcmpe.f32	s9, s7
 800eb6a:	bfb8      	it	lt
 800eb6c:	eef0 7a63 	vmovlt.f32	s15, s7
 800eb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb74:	bf88      	it	hi
 800eb76:	eef0 4a63 	vmovhi.f32	s9, s7
 800eb7a:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eb7e:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 800eb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb86:	ee35 5a23 	vadd.f32	s10, s10, s7
 800eb8a:	eef4 4ac4 	vcmpe.f32	s9, s8
 800eb8e:	edd1 3a00 	vldr	s7, [r1]
 800eb92:	bfb8      	it	lt
 800eb94:	eef0 7a44 	vmovlt.f32	s15, s8
 800eb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9c:	bf88      	it	hi
 800eb9e:	eef0 4a44 	vmovhi.f32	s9, s8
 800eba2:	eef4 7ae3 	vcmpe.f32	s15, s7
 800eba6:	f20b 71fc 	addw	r1, fp, #2044	; 0x7fc
 800ebaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebae:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ebb2:	eef4 4ae3 	vcmpe.f32	s9, s7
 800ebb6:	ed91 4a00 	vldr	s8, [r1]
 800ebba:	bfb8      	it	lt
 800ebbc:	eef0 7a63 	vmovlt.f32	s15, s7
 800ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc4:	bf88      	it	hi
 800ebc6:	eef0 4a63 	vmovhi.f32	s9, s7
 800ebca:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ebce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebd2:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ebd6:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ebda:	bfb8      	it	lt
 800ebdc:	eef0 7a44 	vmovlt.f32	s15, s8
 800ebe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe4:	bf88      	it	hi
 800ebe6:	eef0 4a44 	vmovhi.f32	s9, s8
 800ebea:	2b0a      	cmp	r3, #10
 800ebec:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ebf0:	d113      	bne.n	800ec1a <kalman_3gyro.constprop.0+0x22ba>
 800ebf2:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 800ebf6:	ed91 4a00 	vldr	s8, [r1]
 800ebfa:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ebfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec02:	eef4 4ac4 	vcmpe.f32	s9, s8
 800ec06:	bfb8      	it	lt
 800ec08:	eef0 7a44 	vmovlt.f32	s15, s8
 800ec0c:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ec10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec14:	bf88      	it	hi
 800ec16:	eef0 4a44 	vmovhi.f32	s9, s8
 800ec1a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800ec1e:	eddf 4a7d 	vldr	s9, [pc, #500]	; 800ee14 <kalman_3gyro.constprop.0+0x24b4>
 800ec22:	ed9f 4a7d 	vldr	s8, [pc, #500]	; 800ee18 <kalman_3gyro.constprop.0+0x24b8>
 800ec26:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ec2a:	ee25 5a04 	vmul.f32	s10, s10, s8
 800ec2e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ec32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec36:	f300 80f9 	bgt.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800ec3a:	eef0 7ac5 	vabs.f32	s15, s10
 800ec3e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ec42:	ed9f 5a76 	vldr	s10, [pc, #472]	; 800ee1c <kalman_3gyro.constprop.0+0x24bc>
 800ec46:	eef4 7ac5 	vcmpe.f32	s15, s10
 800ec4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec4e:	f300 80ed 	bgt.w	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800ec52:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ec54:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 800ec56:	edd1 4a00 	vldr	s9, [r1]
 800ec5a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ec5c:	ed91 3a00 	vldr	s6, [r1]
 800ec60:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ec62:	eef4 4ac3 	vcmpe.f32	s9, s6
 800ec66:	ed91 4a00 	vldr	s8, [r1]
 800ec6a:	f50b 61f7 	add.w	r1, fp, #1976	; 0x7b8
 800ec6e:	edd1 3a00 	vldr	s7, [r1]
 800ec72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec76:	bfb4      	ite	lt
 800ec78:	eef0 7a43 	vmovlt.f32	s15, s6
 800ec7c:	eef0 7a64 	vmovge.f32	s15, s9
 800ec80:	bf8c      	ite	hi
 800ec82:	eeb0 5a43 	vmovhi.f32	s10, s6
 800ec86:	eeb0 5a64 	vmovls.f32	s10, s9
 800ec8a:	eef4 3ae7 	vcmpe.f32	s7, s15
 800ec8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec92:	eef4 3ac5 	vcmpe.f32	s7, s10
 800ec96:	bfa8      	it	ge
 800ec98:	eef0 7a63 	vmovge.f32	s15, s7
 800ec9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca0:	bf98      	it	ls
 800eca2:	eeb0 5a63 	vmovls.f32	s10, s7
 800eca6:	eeb4 4ae7 	vcmpe.f32	s8, s15
 800ecaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecae:	ee34 3a83 	vadd.f32	s6, s9, s6
 800ecb2:	eeb4 4ac5 	vcmpe.f32	s8, s10
 800ecb6:	edd5 4a00 	vldr	s9, [r5]
 800ecba:	bfa8      	it	ge
 800ecbc:	eef0 7a44 	vmovge.f32	s15, s8
 800ecc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecc4:	bf98      	it	ls
 800ecc6:	eeb0 5a44 	vmovls.f32	s10, s8
 800ecca:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ecce:	ee73 3a83 	vadd.f32	s7, s7, s6
 800ecd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd6:	eef4 4ac5 	vcmpe.f32	s9, s10
 800ecda:	bfb8      	it	lt
 800ecdc:	eef0 7a64 	vmovlt.f32	s15, s9
 800ece0:	ee34 4a23 	vadd.f32	s8, s8, s7
 800ece4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece8:	bf98      	it	ls
 800ecea:	eeb0 5a64 	vmovls.f32	s10, s9
 800ecee:	2b05      	cmp	r3, #5
 800ecf0:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ecf4:	d065      	beq.n	800edc2 <kalman_3gyro.constprop.0+0x2462>
 800ecf6:	f20b 75dc 	addw	r5, fp, #2012	; 0x7dc
 800ecfa:	ed95 4a00 	vldr	s8, [r5]
 800ecfe:	f50b 65fd 	add.w	r5, fp, #2024	; 0x7e8
 800ed02:	eef4 7ac4 	vcmpe.f32	s15, s8
 800ed06:	ed95 3a00 	vldr	s6, [r5]
 800ed0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0e:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800ed12:	bfb8      	it	lt
 800ed14:	eef0 7a44 	vmovlt.f32	s15, s8
 800ed18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1c:	bf88      	it	hi
 800ed1e:	eeb0 5a44 	vmovhi.f32	s10, s8
 800ed22:	eef4 7ac3 	vcmpe.f32	s15, s6
 800ed26:	f20b 75f4 	addw	r5, fp, #2036	; 0x7f4
 800ed2a:	edd5 3a00 	vldr	s7, [r5]
 800ed2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed32:	eeb4 5ac3 	vcmpe.f32	s10, s6
 800ed36:	bfb8      	it	lt
 800ed38:	eef0 7a43 	vmovlt.f32	s15, s6
 800ed3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed40:	bf88      	it	hi
 800ed42:	eeb0 5a43 	vmovhi.f32	s10, s6
 800ed46:	eef4 7ae3 	vcmpe.f32	s15, s7
 800ed4a:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 800ed4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed52:	ee34 4a24 	vadd.f32	s8, s8, s9
 800ed56:	eeb4 5ae3 	vcmpe.f32	s10, s7
 800ed5a:	edd5 4a00 	vldr	s9, [r5]
 800ed5e:	bfb8      	it	lt
 800ed60:	eef0 7a63 	vmovlt.f32	s15, s7
 800ed64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed68:	bf88      	it	hi
 800ed6a:	eeb0 5a63 	vmovhi.f32	s10, s7
 800ed6e:	eef4 7ae4 	vcmpe.f32	s15, s9
 800ed72:	ee34 4a03 	vadd.f32	s8, s8, s6
 800ed76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed7a:	eeb4 5ae4 	vcmpe.f32	s10, s9
 800ed7e:	bfb8      	it	lt
 800ed80:	eef0 7a64 	vmovlt.f32	s15, s9
 800ed84:	ee34 4a23 	vadd.f32	s8, s8, s7
 800ed88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed8c:	bf88      	it	hi
 800ed8e:	eeb0 5a64 	vmovhi.f32	s10, s9
 800ed92:	2b0a      	cmp	r3, #10
 800ed94:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ed98:	d113      	bne.n	800edc2 <kalman_3gyro.constprop.0+0x2462>
 800ed9a:	f60b 030c 	addw	r3, fp, #2060	; 0x80c
 800ed9e:	ed93 4a00 	vldr	s8, [r3]
 800eda2:	eef4 7ac4 	vcmpe.f32	s15, s8
 800eda6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edaa:	eeb4 5ac4 	vcmpe.f32	s10, s8
 800edae:	bfb8      	it	lt
 800edb0:	eef0 7a44 	vmovlt.f32	s15, s8
 800edb4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800edb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edbc:	bf88      	it	hi
 800edbe:	eeb0 5a44 	vmovhi.f32	s10, s8
 800edc2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800edc6:	ed9f 4a13 	vldr	s8, [pc, #76]	; 800ee14 <kalman_3gyro.constprop.0+0x24b4>
 800edca:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800ee18 <kalman_3gyro.constprop.0+0x24b8>
 800edce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edd2:	ee64 4a85 	vmul.f32	s9, s9, s10
 800edd6:	eef4 7ac4 	vcmpe.f32	s15, s8
 800edda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edde:	dc25      	bgt.n	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800ede0:	eef0 7ae4 	vabs.f32	s15, s9
 800ede4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800ede8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800ee1c <kalman_3gyro.constprop.0+0x24bc>
 800edec:	eef4 5ae7 	vcmpe.f32	s11, s15
 800edf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edf4:	dc1a      	bgt.n	800ee2c <kalman_3gyro.constprop.0+0x24cc>
 800edf6:	f89b 5005 	ldrb.w	r5, [fp, #5]
 800edfa:	2d00      	cmp	r5, #0
 800edfc:	f000 80e0 	beq.w	800efc0 <kalman_3gyro.constprop.0+0x2660>
 800ee00:	f005 03fd 	and.w	r3, r5, #253	; 0xfd
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	f002 8439 	beq.w	801167c <kalman_3gyro.constprop.0+0x4d1c>
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	462b      	mov	r3, r5
 800ee0e:	9201      	str	r2, [sp, #4]
 800ee10:	e01c      	b.n	800ee4c <kalman_3gyro.constprop.0+0x24ec>
 800ee12:	bf00      	nop
 800ee14:	3be56041 	.word	0x3be56041
 800ee18:	3dcccccd 	.word	0x3dcccccd
 800ee1c:	3e333333 	.word	0x3e333333
 800ee20:	3d088889 	.word	0x3d088889
 800ee24:	42480000 	.word	0x42480000
 800ee28:	00000000 	.word	0x00000000
 800ee2c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 800ee30:	2100      	movs	r1, #0
 800ee32:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800ee36:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	f000 80c1 	beq.w	800efc2 <kalman_3gyro.constprop.0+0x2662>
 800ee40:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800ee44:	2a01      	cmp	r2, #1
 800ee46:	f001 8615 	beq.w	8010a74 <kalman_3gyro.constprop.0+0x4114>
 800ee4a:	9101      	str	r1, [sp, #4]
 800ee4c:	2b02      	cmp	r3, #2
 800ee4e:	f041 87d2 	bne.w	8010df6 <kalman_3gyro.constprop.0+0x4496>
 800ee52:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800ee56:	eecd 6a27 	vdiv.f32	s13, s26, s15
 800ee5a:	f240 1301 	movw	r3, #257	; 0x101
 800ee5e:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
 800ee62:	2301      	movs	r3, #1
 800ee64:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800ee68:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 800ee6c:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 800ee70:	ee8b 6aa7 	vdiv.f32	s12, s23, s15
 800ee74:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 800ee78:	ed8d 6a2e 	vstr	s12, [sp, #184]	; 0xb8
 800ee7c:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
 800ee80:	eddb 7a64 	vldr	s15, [fp, #400]	; 0x190
 800ee84:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 800ee88:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
 800ee8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ee90:	eef4 7ac8 	vcmpe.f32	s15, s16
 800ee94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee98:	f2c2 809a 	blt.w	8010fd0 <kalman_3gyro.constprop.0+0x4670>
 800ee9c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 800eea0:	2a00      	cmp	r2, #0
 800eea2:	f002 83db 	beq.w	801165c <kalman_3gyro.constprop.0+0x4cfc>
 800eea6:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 800eeaa:	3301      	adds	r3, #1
 800eeac:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 800eeb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eeb4:	f8db 31a4 	ldr.w	r3, [fp, #420]	; 0x1a4
 800eeb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eebc:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800eec0:	f002 84da 	beq.w	8011878 <kalman_3gyro.constprop.0+0x4f18>
 800eec4:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800eec8:	f002 80d0 	beq.w	801106c <kalman_3gyro.constprop.0+0x470c>
 800eecc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800eed0:	2a00      	cmp	r2, #0
 800eed2:	f042 80d0 	bne.w	8011076 <kalman_3gyro.constprop.0+0x4716>
 800eed6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eed8:	a830      	add	r0, sp, #192	; 0xc0
 800eeda:	f04f 31ff 	mov.w	r1, #4294967295
 800eede:	4613      	mov	r3, r2
 800eee0:	edd2 7a00 	vldr	s15, [r2]
 800eee4:	3101      	adds	r1, #1
 800eee6:	330c      	adds	r3, #12
 800eee8:	3204      	adds	r2, #4
 800eeea:	461c      	mov	r4, r3
 800eeec:	ed94 7a00 	vldr	s14, [r4]
 800eef0:	330c      	adds	r3, #12
 800eef2:	4598      	cmp	r8, r3
 800eef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eef8:	d1f7      	bne.n	800eeea <kalman_3gyro.constprop.0+0x258a>
 800eefa:	2902      	cmp	r1, #2
 800eefc:	ece0 7a01 	vstmia	r0!, {s15}
 800ef00:	f108 0804 	add.w	r8, r8, #4
 800ef04:	d1eb      	bne.n	800eede <kalman_3gyro.constprop.0+0x257e>
 800ef06:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ee20 <kalman_3gyro.constprop.0+0x24c0>
 800ef0a:	ed9d 4a30 	vldr	s8, [sp, #192]	; 0xc0
 800ef0e:	eddd 4a31 	vldr	s9, [sp, #196]	; 0xc4
 800ef12:	eddd 6a32 	vldr	s13, [sp, #200]	; 0xc8
 800ef16:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 800ef18:	f50b 71ac 	add.w	r1, fp, #344	; 0x158
 800ef1c:	ee24 4a27 	vmul.f32	s8, s8, s15
 800ef20:	ee64 4aa7 	vmul.f32	s9, s9, s15
 800ef24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ef28:	460a      	mov	r2, r1
 800ef2a:	f50b 70b2 	add.w	r0, fp, #356	; 0x164
 800ef2e:	edd2 7a7c 	vldr	s15, [r2, #496]	; 0x1f0
 800ef32:	f5a2 73ae 	sub.w	r3, r2, #348	; 0x15c
 800ef36:	ed93 7ad6 	vldr	s14, [r3, #856]	; 0x358
 800ef3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ef3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef42:	f103 030c 	add.w	r3, r3, #12
 800ef46:	bf88      	it	hi
 800ef48:	eef0 7a47 	vmovhi.f32	s15, s14
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d1f2      	bne.n	800ef36 <kalman_3gyro.constprop.0+0x25d6>
 800ef50:	1d1a      	adds	r2, r3, #4
 800ef52:	4290      	cmp	r0, r2
 800ef54:	ece4 7a01 	vstmia	r4!, {s15}
 800ef58:	d1e9      	bne.n	800ef2e <kalman_3gyro.constprop.0+0x25ce>
 800ef5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef5c:	ed9d 5a2d 	vldr	s10, [sp, #180]	; 0xb4
 800ef60:	edd3 7a00 	vldr	s15, [r3]
 800ef64:	eddd 5a2e 	vldr	s11, [sp, #184]	; 0xb8
 800ef68:	ed9d 6a2f 	vldr	s12, [sp, #188]	; 0xbc
 800ef6c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800ef70:	ee97 5a84 	vfnms.f32	s10, s15, s8
 800ef74:	eed7 5aa4 	vfnms.f32	s11, s15, s9
 800ef78:	ee97 6aa6 	vfnms.f32	s12, s15, s13
 800ef7c:	ed8d 5a30 	vstr	s10, [sp, #192]	; 0xc0
 800ef80:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 800ef84:	ed8d 6a32 	vstr	s12, [sp, #200]	; 0xc8
 800ef88:	b14b      	cbz	r3, 800ef9e <kalman_3gyro.constprop.0+0x263e>
 800ef8a:	ed9d 7a03 	vldr	s14, [sp, #12]
 800ef8e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800ef92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef9a:	f102 8553 	bmi.w	8011a44 <kalman_3gyro.constprop.0+0x50e4>
 800ef9e:	f89b 21a1 	ldrb.w	r2, [fp, #417]	; 0x1a1
 800efa2:	2a1e      	cmp	r2, #30
 800efa4:	f002 84dd 	beq.w	8011962 <kalman_3gyro.constprop.0+0x5002>
 800efa8:	1c53      	adds	r3, r2, #1
 800efaa:	2aff      	cmp	r2, #255	; 0xff
 800efac:	bf14      	ite	ne
 800efae:	b2db      	uxtbne	r3, r3
 800efb0:	23ff      	moveq	r3, #255	; 0xff
 800efb2:	2200      	movs	r2, #0
 800efb4:	f88b 31a1 	strb.w	r3, [fp, #417]	; 0x1a1
 800efb8:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800efbc:	9b01      	ldr	r3, [sp, #4]
 800efbe:	e012      	b.n	800efe6 <kalman_3gyro.constprop.0+0x2686>
 800efc0:	2301      	movs	r3, #1
 800efc2:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 800efc6:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 800efca:	9181      	str	r1, [sp, #516]	; 0x204
 800efcc:	9282      	str	r2, [sp, #520]	; 0x208
 800efce:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 800efd2:	9183      	str	r1, [sp, #524]	; 0x20c
 800efd4:	2200      	movs	r2, #0
 800efd6:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800efda:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800efde:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 800efe2:	f88b 2001 	strb.w	r2, [fp, #1]
 800efe6:	ed5f 7a71 	vldr	s15, [pc, #-452]	; 800ee24 <kalman_3gyro.constprop.0+0x24c4>
 800efea:	eeb4 cae7 	vcmpe.f32	s24, s15
 800efee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff2:	f2c0 875f 	blt.w	800feb4 <kalman_3gyro.constprop.0+0x3554>
 800eff6:	2200      	movs	r2, #0
 800eff8:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 800effc:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 800f000:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800f004:	2b01      	cmp	r3, #1
 800f006:	d125      	bne.n	800f054 <kalman_3gyro.constprop.0+0x26f4>
 800f008:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f00c:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f010:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f014:	eddd 6a42 	vldr	s13, [sp, #264]	; 0x108
 800f018:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f01c:	eddd 7a44 	vldr	s15, [sp, #272]	; 0x110
 800f020:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
 800f024:	ee25 5a24 	vmul.f32	s10, s10, s9
 800f028:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800f02c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f030:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800f034:	ee37 7a07 	vadd.f32	s14, s14, s14
 800f038:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800f03c:	ed8d 5a72 	vstr	s10, [sp, #456]	; 0x1c8
 800f040:	edcd 5a73 	vstr	s11, [sp, #460]	; 0x1cc
 800f044:	ed8d 6a74 	vstr	s12, [sp, #464]	; 0x1d0
 800f048:	edcd 6a42 	vstr	s13, [sp, #264]	; 0x108
 800f04c:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f050:	edcd 7a44 	vstr	s15, [sp, #272]	; 0x110
 800f054:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f058:	eddb 3a7f 	vldr	s7, [fp, #508]	; 0x1fc
 800f05c:	ed9d 8a42 	vldr	s16, [sp, #264]	; 0x108
 800f060:	ed9b 3a75 	vldr	s6, [fp, #468]	; 0x1d4
 800f064:	ed9b 4a89 	vldr	s8, [fp, #548]	; 0x224
 800f068:	eddb 4a93 	vldr	s9, [fp, #588]	; 0x24c
 800f06c:	ed9b 5a9d 	vldr	s10, [fp, #628]	; 0x274
 800f070:	eddb 5aa7 	vldr	s11, [fp, #668]	; 0x29c
 800f074:	ed9b 6ab1 	vldr	s12, [fp, #708]	; 0x2c4
 800f078:	eddb 6abb 	vldr	s13, [fp, #748]	; 0x2ec
 800f07c:	eddd 7a4a 	vldr	s15, [sp, #296]	; 0x128
 800f080:	ed9d 0a44 	vldr	s0, [sp, #272]	; 0x110
 800f084:	eddd 0a45 	vldr	s1, [sp, #276]	; 0x114
 800f088:	ed9d 1a46 	vldr	s2, [sp, #280]	; 0x118
 800f08c:	eddd 1a47 	vldr	s3, [sp, #284]	; 0x11c
 800f090:	ed9d 2a48 	vldr	s4, [sp, #288]	; 0x120
 800f094:	eddd 2a49 	vldr	s5, [sp, #292]	; 0x124
 800f098:	edcd 8a75 	vstr	s17, [sp, #468]	; 0x1d4
 800f09c:	eee7 3a07 	vfma.f32	s7, s14, s14
 800f0a0:	f50b 73ea 	add.w	r3, fp, #468	; 0x1d4
 800f0a4:	9301      	str	r3, [sp, #4]
 800f0a6:	ed9b 7ac5 	vldr	s14, [fp, #788]	; 0x314
 800f0aa:	edcd 8a76 	vstr	s17, [sp, #472]	; 0x1d8
 800f0ae:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f0b2:	f10d 08a8 	add.w	r8, sp, #168	; 0xa8
 800f0b6:	f50d 64c3 	add.w	r4, sp, #1560	; 0x618
 800f0ba:	eea8 3a08 	vfma.f32	s6, s16, s16
 800f0be:	2500      	movs	r5, #0
 800f0c0:	eea0 4a00 	vfma.f32	s8, s0, s0
 800f0c4:	eee0 4aa0 	vfma.f32	s9, s1, s1
 800f0c8:	eea1 5a01 	vfma.f32	s10, s2, s2
 800f0cc:	eee1 5aa1 	vfma.f32	s11, s3, s3
 800f0d0:	eea2 6a02 	vfma.f32	s12, s4, s4
 800f0d4:	eee2 6aa2 	vfma.f32	s13, s5, s5
 800f0d8:	eddd 7a6f 	vldr	s15, [sp, #444]	; 0x1bc
 800f0dc:	edcd 8a77 	vstr	s17, [sp, #476]	; 0x1dc
 800f0e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f0e4:	ed8b 4a89 	vstr	s8, [fp, #548]	; 0x224
 800f0e8:	edcb 4a93 	vstr	s9, [fp, #588]	; 0x24c
 800f0ec:	ed8b 5a9d 	vstr	s10, [fp, #628]	; 0x274
 800f0f0:	edcb 5aa7 	vstr	s11, [fp, #668]	; 0x29c
 800f0f4:	ed8b 6ab1 	vstr	s12, [fp, #708]	; 0x2c4
 800f0f8:	edcb 6abb 	vstr	s13, [fp, #748]	; 0x2ec
 800f0fc:	ed8b 7ac5 	vstr	s14, [fp, #788]	; 0x314
 800f100:	ed8b 3a75 	vstr	s6, [fp, #468]	; 0x1d4
 800f104:	edcb 3a7f 	vstr	s7, [fp, #508]	; 0x1fc
 800f108:	edcd 7a87 	vstr	s15, [sp, #540]	; 0x21c
 800f10c:	ed9d 4a70 	vldr	s8, [sp, #448]	; 0x1c0
 800f110:	eddd 4a71 	vldr	s9, [sp, #452]	; 0x1c4
 800f114:	ed9d 5a72 	vldr	s10, [sp, #456]	; 0x1c8
 800f118:	eddd 5a73 	vldr	s11, [sp, #460]	; 0x1cc
 800f11c:	ed9d 6a74 	vldr	s12, [sp, #464]	; 0x1d0
 800f120:	eddd 6a78 	vldr	s13, [sp, #480]	; 0x1e0
 800f124:	ed9d 7a79 	vldr	s14, [sp, #484]	; 0x1e4
 800f128:	eddd 7a7a 	vldr	s15, [sp, #488]	; 0x1e8
 800f12c:	ed1f 8ac2 	vldr	s16, [pc, #-776]	; 800ee28 <kalman_3gyro.constprop.0+0x24c8>
 800f130:	ee68 8aa8 	vmul.f32	s17, s17, s17
 800f134:	ee24 4a04 	vmul.f32	s8, s8, s8
 800f138:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800f13c:	ee25 5a05 	vmul.f32	s10, s10, s10
 800f140:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800f144:	ee26 6a06 	vmul.f32	s12, s12, s12
 800f148:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f14c:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f150:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f154:	ed8d 4a88 	vstr	s8, [sp, #544]	; 0x220
 800f158:	edcd 8a8d 	vstr	s17, [sp, #564]	; 0x234
 800f15c:	edcd 8a8e 	vstr	s17, [sp, #568]	; 0x238
 800f160:	edcd 8a8f 	vstr	s17, [sp, #572]	; 0x23c
 800f164:	edcd 4a89 	vstr	s9, [sp, #548]	; 0x224
 800f168:	ed8d 5a8a 	vstr	s10, [sp, #552]	; 0x228
 800f16c:	edcd 5a8b 	vstr	s11, [sp, #556]	; 0x22c
 800f170:	ed8d 6a8c 	vstr	s12, [sp, #560]	; 0x230
 800f174:	edcd 6a90 	vstr	s13, [sp, #576]	; 0x240
 800f178:	ed8d 7a91 	vstr	s14, [sp, #580]	; 0x244
 800f17c:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800f180:	e005      	b.n	800f18e <kalman_3gyro.constprop.0+0x282e>
 800f182:	3501      	adds	r5, #1
 800f184:	2d0c      	cmp	r5, #12
 800f186:	f104 0404 	add.w	r4, r4, #4
 800f18a:	f000 84fe 	beq.w	800fb8a <kalman_3gyro.constprop.0+0x322a>
 800f18e:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f192:	2b00      	cmp	r3, #0
 800f194:	d0f5      	beq.n	800f182 <kalman_3gyro.constprop.0+0x2822>
 800f196:	edd4 da00 	vldr	s27, [r4]
 800f19a:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 800f19e:	edd4 ea18 	vldr	s29, [r4, #96]	; 0x60
 800f1a2:	ed94 fa24 	vldr	s30, [r4, #144]	; 0x90
 800f1a6:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
 800f1aa:	edd4 6a3c 	vldr	s13, [r4, #240]	; 0xf0
 800f1ae:	ed94 6a48 	vldr	s12, [r4, #288]	; 0x120
 800f1b2:	edd4 5a54 	vldr	s11, [r4, #336]	; 0x150
 800f1b6:	ed94 5a60 	vldr	s10, [r4, #384]	; 0x180
 800f1ba:	9b01      	ldr	r3, [sp, #4]
 800f1bc:	ed89 8a00 	vstr	s16, [r9]
 800f1c0:	ed89 8a01 	vstr	s16, [r9, #4]
 800f1c4:	ed89 8a02 	vstr	s16, [r9, #8]
 800f1c8:	ed89 8a03 	vstr	s16, [r9, #12]
 800f1cc:	ed89 8a04 	vstr	s16, [r9, #16]
 800f1d0:	ed89 8a05 	vstr	s16, [r9, #20]
 800f1d4:	ed89 8a06 	vstr	s16, [r9, #24]
 800f1d8:	ed89 8a07 	vstr	s16, [r9, #28]
 800f1dc:	ed89 8a08 	vstr	s16, [r9, #32]
 800f1e0:	464e      	mov	r6, r9
 800f1e2:	f50b 71fc 	add.w	r1, fp, #504	; 0x1f8
 800f1e6:	464a      	mov	r2, r9
 800f1e8:	ecb3 7a01 	vldmia	r3!, {s14}
 800f1ec:	ecf2 7a01 	vldmia	r2!, {s15}
 800f1f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f8:	d006      	beq.n	800f208 <kalman_3gyro.constprop.0+0x28a8>
 800f1fa:	eef5 da40 	vcmp.f32	s27, #0.0
 800f1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f202:	bf18      	it	ne
 800f204:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800f208:	ed93 7a08 	vldr	s14, [r3, #32]
 800f20c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f214:	d006      	beq.n	800f224 <kalman_3gyro.constprop.0+0x28c4>
 800f216:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f21e:	bf18      	it	ne
 800f220:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800f224:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800f228:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f22c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f230:	d006      	beq.n	800f240 <kalman_3gyro.constprop.0+0x28e0>
 800f232:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f23a:	bf18      	it	ne
 800f23c:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800f240:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800f244:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f24c:	d006      	beq.n	800f25c <kalman_3gyro.constprop.0+0x28fc>
 800f24e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f256:	bf18      	it	ne
 800f258:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800f25c:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800f260:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f268:	d006      	beq.n	800f278 <kalman_3gyro.constprop.0+0x2918>
 800f26a:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f272:	bf18      	it	ne
 800f274:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800f278:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800f27c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f284:	d006      	beq.n	800f294 <kalman_3gyro.constprop.0+0x2934>
 800f286:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f28e:	bf18      	it	ne
 800f290:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800f294:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800f298:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2a0:	d006      	beq.n	800f2b0 <kalman_3gyro.constprop.0+0x2950>
 800f2a2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2aa:	bf18      	it	ne
 800f2ac:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800f2b0:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800f2b4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2bc:	d006      	beq.n	800f2cc <kalman_3gyro.constprop.0+0x296c>
 800f2be:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c6:	bf18      	it	ne
 800f2c8:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800f2cc:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800f2d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d8:	d006      	beq.n	800f2e8 <kalman_3gyro.constprop.0+0x2988>
 800f2da:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e2:	bf18      	it	ne
 800f2e4:	eee5 7a07 	vfmane.f32	s15, s10, s14
 800f2e8:	428b      	cmp	r3, r1
 800f2ea:	ed42 7a01 	vstr	s15, [r2, #-4]
 800f2ee:	f47f af7b 	bne.w	800f1e8 <kalman_3gyro.constprop.0+0x2888>
 800f2f2:	eef5 da40 	vcmp.f32	s27, #0.0
 800f2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2fa:	edd9 8a00 	vldr	s17, [r9]
 800f2fe:	f040 8543 	bne.w	800fd88 <kalman_3gyro.constprop.0+0x3428>
 800f302:	eef0 7a6d 	vmov.f32	s15, s27
 800f306:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f30e:	ed99 9a01 	vldr	s18, [r9, #4]
 800f312:	d006      	beq.n	800f322 <kalman_3gyro.constprop.0+0x29c2>
 800f314:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31c:	bf18      	it	ne
 800f31e:	eee9 7a0e 	vfmane.f32	s15, s18, s28
 800f322:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f32a:	edd9 aa02 	vldr	s21, [r9, #8]
 800f32e:	d006      	beq.n	800f33e <kalman_3gyro.constprop.0+0x29de>
 800f330:	eef5 aa40 	vcmp.f32	s21, #0.0
 800f334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f338:	bf18      	it	ne
 800f33a:	eeea 7aae 	vfmane.f32	s15, s21, s29
 800f33e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f346:	edd9 ba03 	vldr	s23, [r9, #12]
 800f34a:	d006      	beq.n	800f35a <kalman_3gyro.constprop.0+0x29fa>
 800f34c:	eef5 ba40 	vcmp.f32	s23, #0.0
 800f350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f354:	bf18      	it	ne
 800f356:	eeeb 7a8f 	vfmane.f32	s15, s23, s30
 800f35a:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f362:	edd9 ca04 	vldr	s25, [r9, #16]
 800f366:	d006      	beq.n	800f376 <kalman_3gyro.constprop.0+0x2a16>
 800f368:	eef5 ca40 	vcmp.f32	s25, #0.0
 800f36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f370:	bf18      	it	ne
 800f372:	eeec 7aaf 	vfmane.f32	s15, s25, s31
 800f376:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f37e:	ed99 ca05 	vldr	s24, [r9, #20]
 800f382:	d006      	beq.n	800f392 <kalman_3gyro.constprop.0+0x2a32>
 800f384:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800f388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f38c:	bf18      	it	ne
 800f38e:	eeec 7a26 	vfmane.f32	s15, s24, s13
 800f392:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f39a:	ed99 da06 	vldr	s26, [r9, #24]
 800f39e:	d006      	beq.n	800f3ae <kalman_3gyro.constprop.0+0x2a4e>
 800f3a0:	eeb5 da40 	vcmp.f32	s26, #0.0
 800f3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3a8:	bf18      	it	ne
 800f3aa:	eeed 7a06 	vfmane.f32	s15, s26, s12
 800f3ae:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b6:	ed99 aa07 	vldr	s20, [r9, #28]
 800f3ba:	d006      	beq.n	800f3ca <kalman_3gyro.constprop.0+0x2a6a>
 800f3bc:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800f3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c4:	bf18      	it	ne
 800f3c6:	eeea 7a25 	vfmane.f32	s15, s20, s11
 800f3ca:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f3ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3d2:	ed99 ba08 	vldr	s22, [r9, #32]
 800f3d6:	d006      	beq.n	800f3e6 <kalman_3gyro.constprop.0+0x2a86>
 800f3d8:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800f3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3e0:	bf18      	it	ne
 800f3e2:	eeeb 7a05 	vfmane.f32	s15, s22, s10
 800f3e6:	ab87      	add	r3, sp, #540	; 0x21c
 800f3e8:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 800f3ec:	ed92 7a00 	vldr	s14, [r2]
 800f3f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f3f4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800f3f8:	eec4 7a87 	vdiv.f32	s15, s9, s14
 800f3fc:	2d05      	cmp	r5, #5
 800f3fe:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800f402:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f406:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f40a:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f40e:	ee6b baa7 	vmul.f32	s23, s23, s15
 800f412:	ee6c caa7 	vmul.f32	s25, s25, s15
 800f416:	ee2c ca27 	vmul.f32	s24, s24, s15
 800f41a:	ee2d da27 	vmul.f32	s26, s26, s15
 800f41e:	ee2a aa27 	vmul.f32	s20, s20, s15
 800f422:	ee2b ba27 	vmul.f32	s22, s22, s15
 800f426:	edc9 8a00 	vstr	s17, [r9]
 800f42a:	ed89 9a01 	vstr	s18, [r9, #4]
 800f42e:	edc9 aa02 	vstr	s21, [r9, #8]
 800f432:	edc9 ba03 	vstr	s23, [r9, #12]
 800f436:	edc9 ca04 	vstr	s25, [r9, #16]
 800f43a:	ed89 ca05 	vstr	s24, [r9, #20]
 800f43e:	ed89 da06 	vstr	s26, [r9, #24]
 800f442:	ed89 aa07 	vstr	s20, [r9, #28]
 800f446:	ed89 ba08 	vstr	s22, [r9, #32]
 800f44a:	f340 8497 	ble.w	800fd7c <kalman_3gyro.constprop.0+0x341c>
 800f44e:	eef5 da40 	vcmp.f32	s27, #0.0
 800f452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f456:	f000 8510 	beq.w	800fe7a <kalman_3gyro.constprop.0+0x351a>
 800f45a:	eddb 7a6c 	vldr	s15, [fp, #432]	; 0x1b0
 800f45e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f466:	d001      	beq.n	800f46c <kalman_3gyro.constprop.0+0x2b0c>
 800f468:	ee67 7aad 	vmul.f32	s15, s15, s27
 800f46c:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f474:	d008      	beq.n	800f488 <kalman_3gyro.constprop.0+0x2b28>
 800f476:	ed9b 7a6d 	vldr	s14, [fp, #436]	; 0x1b4
 800f47a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f482:	bf18      	it	ne
 800f484:	eee7 7a0e 	vfmane.f32	s15, s14, s28
 800f488:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f490:	d008      	beq.n	800f4a4 <kalman_3gyro.constprop.0+0x2b44>
 800f492:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800f496:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49e:	bf18      	it	ne
 800f4a0:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800f4a4:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ac:	d008      	beq.n	800f4c0 <kalman_3gyro.constprop.0+0x2b60>
 800f4ae:	ed9b 7a6f 	vldr	s14, [fp, #444]	; 0x1bc
 800f4b2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ba:	bf18      	it	ne
 800f4bc:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800f4c0:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c8:	d008      	beq.n	800f4dc <kalman_3gyro.constprop.0+0x2b7c>
 800f4ca:	ed9b 7a70 	vldr	s14, [fp, #448]	; 0x1c0
 800f4ce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d6:	bf18      	it	ne
 800f4d8:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800f4dc:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e4:	d008      	beq.n	800f4f8 <kalman_3gyro.constprop.0+0x2b98>
 800f4e6:	ed9b 7a71 	vldr	s14, [fp, #452]	; 0x1c4
 800f4ea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f2:	bf18      	it	ne
 800f4f4:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800f4f8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f500:	d008      	beq.n	800f514 <kalman_3gyro.constprop.0+0x2bb4>
 800f502:	ed9b 7a72 	vldr	s14, [fp, #456]	; 0x1c8
 800f506:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f50e:	bf18      	it	ne
 800f510:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800f514:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51c:	d008      	beq.n	800f530 <kalman_3gyro.constprop.0+0x2bd0>
 800f51e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800f522:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52a:	bf18      	it	ne
 800f52c:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800f530:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f538:	d008      	beq.n	800f54c <kalman_3gyro.constprop.0+0x2bec>
 800f53a:	ed9b 7a74 	vldr	s14, [fp, #464]	; 0x1d0
 800f53e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f546:	bf18      	it	ne
 800f548:	eee7 7a05 	vfmane.f32	s15, s14, s10
 800f54c:	aa7b      	add	r2, sp, #492	; 0x1ec
 800f54e:	4413      	add	r3, r2
 800f550:	edd3 9a00 	vldr	s19, [r3]
 800f554:	ee79 9ae7 	vsub.f32	s19, s19, s15
 800f558:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800f55c:	2100      	movs	r1, #0
 800f55e:	4650      	mov	r0, sl
 800f560:	ed8d 5a05 	vstr	s10, [sp, #20]
 800f564:	edcd 5a04 	vstr	s11, [sp, #16]
 800f568:	ed8d 6a03 	vstr	s12, [sp, #12]
 800f56c:	edcd 6a02 	vstr	s13, [sp, #8]
 800f570:	f007 ff76 	bl	8017460 <memset>
 800f574:	ed9d 5a05 	vldr	s10, [sp, #20]
 800f578:	eddd 5a04 	vldr	s11, [sp, #16]
 800f57c:	ed9d 6a03 	vldr	s12, [sp, #12]
 800f580:	eddd 6a02 	vldr	s13, [sp, #8]
 800f584:	4651      	mov	r1, sl
 800f586:	f109 0224 	add.w	r2, r9, #36	; 0x24
 800f58a:	4653      	mov	r3, sl
 800f58c:	ecf6 7a01 	vldmia	r6!, {s15}
 800f590:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f598:	d062      	beq.n	800f660 <kalman_3gyro.constprop.0+0x2d00>
 800f59a:	eef5 da40 	vcmp.f32	s27, #0.0
 800f59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a2:	d005      	beq.n	800f5b0 <kalman_3gyro.constprop.0+0x2c50>
 800f5a4:	ed93 7a00 	vldr	s14, [r3]
 800f5a8:	eead 7aa7 	vfma.f32	s14, s27, s15
 800f5ac:	ed83 7a00 	vstr	s14, [r3]
 800f5b0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800f5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b8:	d005      	beq.n	800f5c6 <kalman_3gyro.constprop.0+0x2c66>
 800f5ba:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f5be:	eeae 7a27 	vfma.f32	s14, s28, s15
 800f5c2:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800f5c6:	eef5 ea40 	vcmp.f32	s29, #0.0
 800f5ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ce:	d005      	beq.n	800f5dc <kalman_3gyro.constprop.0+0x2c7c>
 800f5d0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800f5d4:	eeae 7aa7 	vfma.f32	s14, s29, s15
 800f5d8:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800f5dc:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800f5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5e4:	d005      	beq.n	800f5f2 <kalman_3gyro.constprop.0+0x2c92>
 800f5e6:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800f5ea:	eeaf 7a27 	vfma.f32	s14, s30, s15
 800f5ee:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800f5f2:	eef5 fa40 	vcmp.f32	s31, #0.0
 800f5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fa:	d005      	beq.n	800f608 <kalman_3gyro.constprop.0+0x2ca8>
 800f5fc:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800f600:	eeaf 7aa7 	vfma.f32	s14, s31, s15
 800f604:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800f608:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f610:	d005      	beq.n	800f61e <kalman_3gyro.constprop.0+0x2cbe>
 800f612:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800f616:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f61a:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800f61e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f626:	d005      	beq.n	800f634 <kalman_3gyro.constprop.0+0x2cd4>
 800f628:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800f62c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800f630:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800f634:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63c:	d005      	beq.n	800f64a <kalman_3gyro.constprop.0+0x2cea>
 800f63e:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800f642:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f646:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800f64a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f652:	d005      	beq.n	800f660 <kalman_3gyro.constprop.0+0x2d00>
 800f654:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800f658:	eea5 7a27 	vfma.f32	s14, s10, s15
 800f65c:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800f660:	4296      	cmp	r6, r2
 800f662:	f103 0304 	add.w	r3, r3, #4
 800f666:	d191      	bne.n	800f58c <kalman_3gyro.constprop.0+0x2c2c>
 800f668:	f20d 47d4 	addw	r7, sp, #1236	; 0x4d4
 800f66c:	4656      	mov	r6, sl
 800f66e:	463b      	mov	r3, r7
 800f670:	2208      	movs	r2, #8
 800f672:	2000      	movs	r0, #0
 800f674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f678:	e074      	b.n	800f764 <kalman_3gyro.constprop.0+0x2e04>
 800f67a:	edd6 7a00 	vldr	s15, [r6]
 800f67e:	ed83 8a01 	vstr	s16, [r3, #4]
 800f682:	eef1 7a67 	vneg.f32	s15, s15
 800f686:	2801      	cmp	r0, #1
 800f688:	edc6 7a00 	vstr	s15, [r6]
 800f68c:	f1a2 0c07 	sub.w	ip, r2, #7
 800f690:	f000 831e 	beq.w	800fcd0 <kalman_3gyro.constprop.0+0x3370>
 800f694:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f698:	eddc 7a00 	vldr	s15, [ip]
 800f69c:	ed83 8a02 	vstr	s16, [r3, #8]
 800f6a0:	eef1 7a67 	vneg.f32	s15, s15
 800f6a4:	2802      	cmp	r0, #2
 800f6a6:	edcc 7a00 	vstr	s15, [ip]
 800f6aa:	f1a2 0c06 	sub.w	ip, r2, #6
 800f6ae:	f000 82f8 	beq.w	800fca2 <kalman_3gyro.constprop.0+0x3342>
 800f6b2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f6b6:	eddc 7a00 	vldr	s15, [ip]
 800f6ba:	ed83 8a03 	vstr	s16, [r3, #12]
 800f6be:	eef1 7a67 	vneg.f32	s15, s15
 800f6c2:	2803      	cmp	r0, #3
 800f6c4:	edcc 7a00 	vstr	s15, [ip]
 800f6c8:	f1a2 0c05 	sub.w	ip, r2, #5
 800f6cc:	d170      	bne.n	800f7b0 <kalman_3gyro.constprop.0+0x2e50>
 800f6ce:	edd6 7a03 	vldr	s15, [r6, #12]
 800f6d2:	ed83 8a04 	vstr	s16, [r3, #16]
 800f6d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f6da:	f1a2 0e04 	sub.w	lr, r2, #4
 800f6de:	edc6 7a03 	vstr	s15, [r6, #12]
 800f6e2:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f6e6:	edde 7a00 	vldr	s15, [lr]
 800f6ea:	ed83 8a05 	vstr	s16, [r3, #20]
 800f6ee:	eef1 7a67 	vneg.f32	s15, s15
 800f6f2:	f1a2 0c03 	sub.w	ip, r2, #3
 800f6f6:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f6fa:	edce 7a00 	vstr	s15, [lr]
 800f6fe:	eddc 7a00 	vldr	s15, [ip]
 800f702:	ed83 8a06 	vstr	s16, [r3, #24]
 800f706:	eef1 7a67 	vneg.f32	s15, s15
 800f70a:	edcc 7a00 	vstr	s15, [ip]
 800f70e:	f1a2 0c02 	sub.w	ip, r2, #2
 800f712:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f716:	eddc 7a00 	vldr	s15, [ip]
 800f71a:	ed83 8a07 	vstr	s16, [r3, #28]
 800f71e:	eef1 7a67 	vneg.f32	s15, s15
 800f722:	2807      	cmp	r0, #7
 800f724:	edcc 7a00 	vstr	s15, [ip]
 800f728:	f102 3cff 	add.w	ip, r2, #4294967295
 800f72c:	f040 80a2 	bne.w	800f874 <kalman_3gyro.constprop.0+0x2f14>
 800f730:	edd6 7a07 	vldr	s15, [r6, #28]
 800f734:	ed83 8a08 	vstr	s16, [r3, #32]
 800f738:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f73c:	edc6 7a07 	vstr	s15, [r6, #28]
 800f740:	eb0a 0c82 	add.w	ip, sl, r2, lsl #2
 800f744:	eddc 7a00 	vldr	s15, [ip]
 800f748:	3001      	adds	r0, #1
 800f74a:	eef1 7a67 	vneg.f32	s15, s15
 800f74e:	2809      	cmp	r0, #9
 800f750:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800f754:	f106 0624 	add.w	r6, r6, #36	; 0x24
 800f758:	f102 0209 	add.w	r2, r2, #9
 800f75c:	edcc 7a00 	vstr	s15, [ip]
 800f760:	f000 809f 	beq.w	800f8a2 <kalman_3gyro.constprop.0+0x2f42>
 800f764:	ed83 8a00 	vstr	s16, [r3]
 800f768:	2800      	cmp	r0, #0
 800f76a:	d186      	bne.n	800f67a <kalman_3gyro.constprop.0+0x2d1a>
 800f76c:	edda 7a00 	vldr	s15, [sl]
 800f770:	ed83 8a01 	vstr	s16, [r3, #4]
 800f774:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f778:	f1a2 0e07 	sub.w	lr, r2, #7
 800f77c:	edc6 7a00 	vstr	s15, [r6]
 800f780:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f784:	edde 7a00 	vldr	s15, [lr]
 800f788:	ed83 8a02 	vstr	s16, [r3, #8]
 800f78c:	eef1 7a67 	vneg.f32	s15, s15
 800f790:	f1a2 0c06 	sub.w	ip, r2, #6
 800f794:	edce 7a00 	vstr	s15, [lr]
 800f798:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f79c:	eddc 7a00 	vldr	s15, [ip]
 800f7a0:	ed83 8a03 	vstr	s16, [r3, #12]
 800f7a4:	eef1 7a67 	vneg.f32	s15, s15
 800f7a8:	edcc 7a00 	vstr	s15, [ip]
 800f7ac:	f1a2 0c05 	sub.w	ip, r2, #5
 800f7b0:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f7b4:	eddc 7a00 	vldr	s15, [ip]
 800f7b8:	ed83 8a04 	vstr	s16, [r3, #16]
 800f7bc:	eef1 7a67 	vneg.f32	s15, s15
 800f7c0:	2804      	cmp	r0, #4
 800f7c2:	edcc 7a00 	vstr	s15, [ip]
 800f7c6:	f1a2 0c04 	sub.w	ip, r2, #4
 800f7ca:	d031      	beq.n	800f830 <kalman_3gyro.constprop.0+0x2ed0>
 800f7cc:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f7d0:	eddc 7a00 	vldr	s15, [ip]
 800f7d4:	ed83 8a05 	vstr	s16, [r3, #20]
 800f7d8:	eef1 7a67 	vneg.f32	s15, s15
 800f7dc:	2805      	cmp	r0, #5
 800f7de:	edcc 7a00 	vstr	s15, [ip]
 800f7e2:	f1a2 0c03 	sub.w	ip, r2, #3
 800f7e6:	f000 8245 	beq.w	800fc74 <kalman_3gyro.constprop.0+0x3314>
 800f7ea:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f7ee:	eddc 7a00 	vldr	s15, [ip]
 800f7f2:	ed83 8a06 	vstr	s16, [r3, #24]
 800f7f6:	eef1 7a67 	vneg.f32	s15, s15
 800f7fa:	2806      	cmp	r0, #6
 800f7fc:	edcc 7a00 	vstr	s15, [ip]
 800f800:	f1a2 0c02 	sub.w	ip, r2, #2
 800f804:	d185      	bne.n	800f712 <kalman_3gyro.constprop.0+0x2db2>
 800f806:	edd6 7a06 	vldr	s15, [r6, #24]
 800f80a:	ed83 8a07 	vstr	s16, [r3, #28]
 800f80e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f812:	f102 3cff 	add.w	ip, r2, #4294967295
 800f816:	edc6 7a06 	vstr	s15, [r6, #24]
 800f81a:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f81e:	eddc 7a00 	vldr	s15, [ip]
 800f822:	ed83 8a08 	vstr	s16, [r3, #32]
 800f826:	eef1 7a67 	vneg.f32	s15, s15
 800f82a:	edcc 7a00 	vstr	s15, [ip]
 800f82e:	e787      	b.n	800f740 <kalman_3gyro.constprop.0+0x2de0>
 800f830:	edd6 7a04 	vldr	s15, [r6, #16]
 800f834:	ed83 8a05 	vstr	s16, [r3, #20]
 800f838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f83c:	f1a2 0e03 	sub.w	lr, r2, #3
 800f840:	edc6 7a04 	vstr	s15, [r6, #16]
 800f844:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800f848:	edde 7a00 	vldr	s15, [lr]
 800f84c:	ed83 8a06 	vstr	s16, [r3, #24]
 800f850:	eef1 7a67 	vneg.f32	s15, s15
 800f854:	f1a2 0c02 	sub.w	ip, r2, #2
 800f858:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f85c:	edce 7a00 	vstr	s15, [lr]
 800f860:	eddc 7a00 	vldr	s15, [ip]
 800f864:	ed83 8a07 	vstr	s16, [r3, #28]
 800f868:	eef1 7a67 	vneg.f32	s15, s15
 800f86c:	edcc 7a00 	vstr	s15, [ip]
 800f870:	f102 3cff 	add.w	ip, r2, #4294967295
 800f874:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800f878:	eddc 7a00 	vldr	s15, [ip]
 800f87c:	ed83 8a08 	vstr	s16, [r3, #32]
 800f880:	eef1 7a67 	vneg.f32	s15, s15
 800f884:	2808      	cmp	r0, #8
 800f886:	edcc 7a00 	vstr	s15, [ip]
 800f88a:	f47f af59 	bne.w	800f740 <kalman_3gyro.constprop.0+0x2de0>
 800f88e:	ed96 7a08 	vldr	s14, [r6, #32]
 800f892:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f89a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800f89e:	edc2 7a00 	vstr	s15, [r2]
 800f8a2:	2000      	movs	r0, #0
 800f8a4:	f50b 76a2 	add.w	r6, fp, #324	; 0x144
 800f8a8:	ecb1 3a01 	vldmia	r1!, {s6}
 800f8ac:	edd1 3a08 	vldr	s7, [r1, #32]
 800f8b0:	ed91 4a11 	vldr	s8, [r1, #68]	; 0x44
 800f8b4:	edd1 4a1a 	vldr	s9, [r1, #104]	; 0x68
 800f8b8:	ed91 5a23 	vldr	s10, [r1, #140]	; 0x8c
 800f8bc:	edd1 5a2c 	vldr	s11, [r1, #176]	; 0xb0
 800f8c0:	ed91 6a35 	vldr	s12, [r1, #212]	; 0xd4
 800f8c4:	edd1 6a3e 	vldr	s13, [r1, #248]	; 0xf8
 800f8c8:	ed91 7a47 	vldr	s14, [r1, #284]	; 0x11c
 800f8cc:	465a      	mov	r2, fp
 800f8ce:	463b      	mov	r3, r7
 800f8d0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800f8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8d8:	d00c      	beq.n	800f8f4 <kalman_3gyro.constprop.0+0x2f94>
 800f8da:	edd2 2a75 	vldr	s5, [r2, #468]	; 0x1d4
 800f8de:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e6:	d005      	beq.n	800f8f4 <kalman_3gyro.constprop.0+0x2f94>
 800f8e8:	edd3 7a00 	vldr	s15, [r3]
 800f8ec:	eee3 7a22 	vfma.f32	s15, s6, s5
 800f8f0:	edc3 7a00 	vstr	s15, [r3]
 800f8f4:	eef5 3a40 	vcmp.f32	s7, #0.0
 800f8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fc:	d00c      	beq.n	800f918 <kalman_3gyro.constprop.0+0x2fb8>
 800f8fe:	edd2 2a76 	vldr	s5, [r2, #472]	; 0x1d8
 800f902:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f90a:	d005      	beq.n	800f918 <kalman_3gyro.constprop.0+0x2fb8>
 800f90c:	edd3 7a00 	vldr	s15, [r3]
 800f910:	eee3 7aa2 	vfma.f32	s15, s7, s5
 800f914:	edc3 7a00 	vstr	s15, [r3]
 800f918:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800f91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f920:	d00c      	beq.n	800f93c <kalman_3gyro.constprop.0+0x2fdc>
 800f922:	edd2 2a77 	vldr	s5, [r2, #476]	; 0x1dc
 800f926:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f92e:	d005      	beq.n	800f93c <kalman_3gyro.constprop.0+0x2fdc>
 800f930:	edd3 7a00 	vldr	s15, [r3]
 800f934:	eee4 7a22 	vfma.f32	s15, s8, s5
 800f938:	edc3 7a00 	vstr	s15, [r3]
 800f93c:	eef5 4a40 	vcmp.f32	s9, #0.0
 800f940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f944:	d00c      	beq.n	800f960 <kalman_3gyro.constprop.0+0x3000>
 800f946:	edd2 2a78 	vldr	s5, [r2, #480]	; 0x1e0
 800f94a:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f952:	d005      	beq.n	800f960 <kalman_3gyro.constprop.0+0x3000>
 800f954:	edd3 7a00 	vldr	s15, [r3]
 800f958:	eee4 7aa2 	vfma.f32	s15, s9, s5
 800f95c:	edc3 7a00 	vstr	s15, [r3]
 800f960:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800f964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f968:	d00c      	beq.n	800f984 <kalman_3gyro.constprop.0+0x3024>
 800f96a:	edd2 2a79 	vldr	s5, [r2, #484]	; 0x1e4
 800f96e:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f976:	d005      	beq.n	800f984 <kalman_3gyro.constprop.0+0x3024>
 800f978:	edd3 7a00 	vldr	s15, [r3]
 800f97c:	eee5 7a22 	vfma.f32	s15, s10, s5
 800f980:	edc3 7a00 	vstr	s15, [r3]
 800f984:	eef5 5a40 	vcmp.f32	s11, #0.0
 800f988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f98c:	d00c      	beq.n	800f9a8 <kalman_3gyro.constprop.0+0x3048>
 800f98e:	edd2 2a7a 	vldr	s5, [r2, #488]	; 0x1e8
 800f992:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f99a:	d005      	beq.n	800f9a8 <kalman_3gyro.constprop.0+0x3048>
 800f99c:	edd3 7a00 	vldr	s15, [r3]
 800f9a0:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800f9a4:	edc3 7a00 	vstr	s15, [r3]
 800f9a8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800f9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9b0:	d00c      	beq.n	800f9cc <kalman_3gyro.constprop.0+0x306c>
 800f9b2:	edd2 2a7b 	vldr	s5, [r2, #492]	; 0x1ec
 800f9b6:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9be:	d005      	beq.n	800f9cc <kalman_3gyro.constprop.0+0x306c>
 800f9c0:	edd3 7a00 	vldr	s15, [r3]
 800f9c4:	eee6 7a22 	vfma.f32	s15, s12, s5
 800f9c8:	edc3 7a00 	vstr	s15, [r3]
 800f9cc:	eef5 6a40 	vcmp.f32	s13, #0.0
 800f9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d4:	d00c      	beq.n	800f9f0 <kalman_3gyro.constprop.0+0x3090>
 800f9d6:	edd2 2a7c 	vldr	s5, [r2, #496]	; 0x1f0
 800f9da:	eef5 2a40 	vcmp.f32	s5, #0.0
 800f9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e2:	d005      	beq.n	800f9f0 <kalman_3gyro.constprop.0+0x3090>
 800f9e4:	edd3 7a00 	vldr	s15, [r3]
 800f9e8:	eee6 7aa2 	vfma.f32	s15, s13, s5
 800f9ec:	edc3 7a00 	vstr	s15, [r3]
 800f9f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f8:	d00c      	beq.n	800fa14 <kalman_3gyro.constprop.0+0x30b4>
 800f9fa:	edd2 2a7d 	vldr	s5, [r2, #500]	; 0x1f4
 800f9fe:	eef5 2a40 	vcmp.f32	s5, #0.0
 800fa02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa06:	d005      	beq.n	800fa14 <kalman_3gyro.constprop.0+0x30b4>
 800fa08:	edd3 7a00 	vldr	s15, [r3]
 800fa0c:	eee7 7a22 	vfma.f32	s15, s14, s5
 800fa10:	edc3 7a00 	vstr	s15, [r3]
 800fa14:	3224      	adds	r2, #36	; 0x24
 800fa16:	4296      	cmp	r6, r2
 800fa18:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800fa1c:	f47f af58 	bne.w	800f8d0 <kalman_3gyro.constprop.0+0x2f70>
 800fa20:	3001      	adds	r0, #1
 800fa22:	2809      	cmp	r0, #9
 800fa24:	f107 0704 	add.w	r7, r7, #4
 800fa28:	f47f af3e 	bne.w	800f8a8 <kalman_3gyro.constprop.0+0x2f48>
 800fa2c:	9801      	ldr	r0, [sp, #4]
 800fa2e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800fa32:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 800fa36:	f007 fd05 	bl	8017444 <memcpy>
 800fa3a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fa3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa42:	f000 817c 	beq.w	800fd3e <kalman_3gyro.constprop.0+0x33de>
 800fa46:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fa4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4e:	f000 8176 	beq.w	800fd3e <kalman_3gyro.constprop.0+0x33de>
 800fa52:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fa56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5a:	ee69 8aa8 	vmul.f32	s17, s19, s17
 800fa5e:	f040 8212 	bne.w	800fe86 <kalman_3gyro.constprop.0+0x3526>
 800fa62:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fa66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6a:	f000 8177 	beq.w	800fd5c <kalman_3gyro.constprop.0+0x33fc>
 800fa6e:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fa72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa76:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800fa7a:	f040 81cb 	bne.w	800fe14 <kalman_3gyro.constprop.0+0x34b4>
 800fa7e:	eef0 ba47 	vmov.f32	s23, s14
 800fa82:	eef0 aa49 	vmov.f32	s21, s18
 800fa86:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa8e:	f000 8138 	beq.w	800fd02 <kalman_3gyro.constprop.0+0x33a2>
 800fa92:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fa96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa9a:	f000 824e 	beq.w	800ff3a <kalman_3gyro.constprop.0+0x35da>
 800fa9e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800faa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa6:	ee29 7aac 	vmul.f32	s14, s19, s25
 800faaa:	eef0 7a48 	vmov.f32	s15, s16
 800faae:	f040 81c5 	bne.w	800fe3c <kalman_3gyro.constprop.0+0x34dc>
 800fab2:	eeb0 ca47 	vmov.f32	s24, s14
 800fab6:	eef0 ca67 	vmov.f32	s25, s15
 800faba:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac2:	f000 8179 	beq.w	800fdb8 <kalman_3gyro.constprop.0+0x3458>
 800fac6:	eef5 9a40 	vcmp.f32	s19, #0.0
 800faca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800face:	f000 8125 	beq.w	800fd1c <kalman_3gyro.constprop.0+0x33bc>
 800fad2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fada:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fade:	eef0 7a48 	vmov.f32	s15, s16
 800fae2:	f040 81be 	bne.w	800fe62 <kalman_3gyro.constprop.0+0x3502>
 800fae6:	eeb0 aa47 	vmov.f32	s20, s14
 800faea:	eeb0 da67 	vmov.f32	s26, s15
 800faee:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800faf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf6:	f000 811f 	beq.w	800fd38 <kalman_3gyro.constprop.0+0x33d8>
 800fafa:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb02:	f000 821d 	beq.w	800ff40 <kalman_3gyro.constprop.0+0x35e0>
 800fb06:	eef0 7a48 	vmov.f32	s15, s16
 800fb0a:	ee2b ba29 	vmul.f32	s22, s22, s19
 800fb0e:	eef0 9a67 	vmov.f32	s19, s15
 800fb12:	eddb 3a6c 	vldr	s7, [fp, #432]	; 0x1b0
 800fb16:	ed9b 4a6d 	vldr	s8, [fp, #436]	; 0x1b4
 800fb1a:	eddb 4a6e 	vldr	s9, [fp, #440]	; 0x1b8
 800fb1e:	ed9b 5a6f 	vldr	s10, [fp, #444]	; 0x1bc
 800fb22:	eddb 5a70 	vldr	s11, [fp, #448]	; 0x1c0
 800fb26:	ed9b 6a71 	vldr	s12, [fp, #452]	; 0x1c4
 800fb2a:	eddb 6a72 	vldr	s13, [fp, #456]	; 0x1c8
 800fb2e:	ed9b 7a73 	vldr	s14, [fp, #460]	; 0x1cc
 800fb32:	eddb 7a74 	vldr	s15, [fp, #464]	; 0x1d0
 800fb36:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800fb3a:	ee74 aa2a 	vadd.f32	s21, s8, s21
 800fb3e:	ee74 baab 	vadd.f32	s23, s9, s23
 800fb42:	ee75 ca2c 	vadd.f32	s25, s10, s25
 800fb46:	ee35 ca8c 	vadd.f32	s24, s11, s24
 800fb4a:	ee36 da0d 	vadd.f32	s26, s12, s26
 800fb4e:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800fb52:	ee77 9a29 	vadd.f32	s19, s14, s19
 800fb56:	ee37 ba8b 	vadd.f32	s22, s15, s22
 800fb5a:	3501      	adds	r5, #1
 800fb5c:	2d0c      	cmp	r5, #12
 800fb5e:	edcb 8a6c 	vstr	s17, [fp, #432]	; 0x1b0
 800fb62:	edcb aa6d 	vstr	s21, [fp, #436]	; 0x1b4
 800fb66:	edcb ba6e 	vstr	s23, [fp, #440]	; 0x1b8
 800fb6a:	edcb ca6f 	vstr	s25, [fp, #444]	; 0x1bc
 800fb6e:	ed8b ca70 	vstr	s24, [fp, #448]	; 0x1c0
 800fb72:	ed8b da71 	vstr	s26, [fp, #452]	; 0x1c4
 800fb76:	ed8b aa72 	vstr	s20, [fp, #456]	; 0x1c8
 800fb7a:	edcb 9a73 	vstr	s19, [fp, #460]	; 0x1cc
 800fb7e:	ed8b ba74 	vstr	s22, [fp, #464]	; 0x1d0
 800fb82:	f104 0404 	add.w	r4, r4, #4
 800fb86:	f47f ab02 	bne.w	800f18e <kalman_3gyro.constprop.0+0x282e>
 800fb8a:	eddb 6a6d 	vldr	s13, [fp, #436]	; 0x1b4
 800fb8e:	ed9b 6a6c 	vldr	s12, [fp, #432]	; 0x1b0
 800fb92:	ed9b 7a6e 	vldr	s14, [fp, #440]	; 0x1b8
 800fb96:	ee66 7aa6 	vmul.f32	s15, s13, s13
 800fb9a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800fb9e:	eee6 7a06 	vfma.f32	s15, s12, s12
 800fba2:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fba6:	eef4 7ae5 	vcmpe.f32	s15, s11
 800fbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbae:	f100 81b5 	bmi.w	800ff1c <kalman_3gyro.constprop.0+0x35bc>
 800fbb2:	eef1 4ae7 	vsqrt.f32	s9, s15
 800fbb6:	ed9f 5ae4 	vldr	s10, [pc, #912]	; 800ff48 <kalman_3gyro.constprop.0+0x35e8>
 800fbba:	eec5 7aa4 	vdiv.f32	s15, s11, s9
 800fbbe:	ee67 4a86 	vmul.f32	s9, s15, s12
 800fbc2:	ee67 5aa6 	vmul.f32	s11, s15, s13
 800fbc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbca:	f8dd 3834 	ldr.w	r3, [sp, #2100]	; 0x834
 800fbce:	ed8d 6a3e 	vstr	s12, [sp, #248]	; 0xf8
 800fbd2:	aa36      	add	r2, sp, #216	; 0xd8
 800fbd4:	edc3 4a00 	vstr	s9, [r3]
 800fbd8:	edc3 5a01 	vstr	s11, [r3, #4]
 800fbdc:	edc3 7a02 	vstr	s15, [r3, #8]
 800fbe0:	ed83 5a03 	vstr	s10, [r3, #12]
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	4611      	mov	r1, r2
 800fbe8:	edcd 6a3f 	vstr	s13, [sp, #252]	; 0xfc
 800fbec:	ed8d 7a40 	vstr	s14, [sp, #256]	; 0x100
 800fbf0:	ed8d 5a41 	vstr	s10, [sp, #260]	; 0x104
 800fbf4:	f7fb fdbc 	bl	800b770 <qmult>
 800fbf8:	ed9d 6a37 	vldr	s12, [sp, #220]	; 0xdc
 800fbfc:	eddd 5a36 	vldr	s11, [sp, #216]	; 0xd8
 800fc00:	eddd 6a38 	vldr	s13, [sp, #224]	; 0xe0
 800fc04:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800fc08:	f8dd 3830 	ldr.w	r3, [sp, #2096]	; 0x830
 800fc0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800fc0e:	ee66 7a06 	vmul.f32	s15, s12, s12
 800fc12:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800fc16:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800fc1a:	ae54      	add	r6, sp, #336	; 0x150
 800fc1c:	af5c      	add	r7, sp, #368	; 0x170
 800fc1e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800fc22:	eee7 7a07 	vfma.f32	s15, s14, s14
 800fc26:	eeb1 5ae7 	vsqrt.f32	s10, s15
 800fc2a:	eec4 7a85 	vdiv.f32	s15, s9, s10
 800fc2e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800fc32:	ee26 6a27 	vmul.f32	s12, s12, s15
 800fc36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fc3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fc3e:	edc3 5a00 	vstr	s11, [r3]
 800fc42:	ed83 6a01 	vstr	s12, [r3, #4]
 800fc46:	edc3 6a02 	vstr	s13, [r3, #8]
 800fc4a:	ed83 7a03 	vstr	s14, [r3, #12]
 800fc4e:	4634      	mov	r4, r6
 800fc50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fc52:	42bc      	cmp	r4, r7
 800fc54:	6028      	str	r0, [r5, #0]
 800fc56:	6069      	str	r1, [r5, #4]
 800fc58:	60aa      	str	r2, [r5, #8]
 800fc5a:	60eb      	str	r3, [r5, #12]
 800fc5c:	4626      	mov	r6, r4
 800fc5e:	f105 0510 	add.w	r5, r5, #16
 800fc62:	d1f4      	bne.n	800fc4e <kalman_3gyro.constprop.0+0x32ee>
 800fc64:	6820      	ldr	r0, [r4, #0]
 800fc66:	6028      	str	r0, [r5, #0]
 800fc68:	f20d 7dcc 	addw	sp, sp, #1996	; 0x7cc
 800fc6c:	ecbd 8b10 	vpop	{d8-d15}
 800fc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc74:	edd6 7a05 	vldr	s15, [r6, #20]
 800fc78:	ed83 8a06 	vstr	s16, [r3, #24]
 800fc7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fc80:	f1a2 0e02 	sub.w	lr, r2, #2
 800fc84:	edc6 7a05 	vstr	s15, [r6, #20]
 800fc88:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
 800fc8c:	edde 7a00 	vldr	s15, [lr]
 800fc90:	ed83 8a07 	vstr	s16, [r3, #28]
 800fc94:	eef1 7a67 	vneg.f32	s15, s15
 800fc98:	f102 3cff 	add.w	ip, r2, #4294967295
 800fc9c:	edce 7a00 	vstr	s15, [lr]
 800fca0:	e5bb      	b.n	800f81a <kalman_3gyro.constprop.0+0x2eba>
 800fca2:	edd6 7a02 	vldr	s15, [r6, #8]
 800fca6:	ed83 8a03 	vstr	s16, [r3, #12]
 800fcaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcae:	f1a2 0c05 	sub.w	ip, r2, #5
 800fcb2:	eb0a 0c8c 	add.w	ip, sl, ip, lsl #2
 800fcb6:	edc6 7a02 	vstr	s15, [r6, #8]
 800fcba:	eddc 7a00 	vldr	s15, [ip]
 800fcbe:	ed83 8a04 	vstr	s16, [r3, #16]
 800fcc2:	eef1 7a67 	vneg.f32	s15, s15
 800fcc6:	edcc 7a00 	vstr	s15, [ip]
 800fcca:	f1a2 0c04 	sub.w	ip, r2, #4
 800fcce:	e57d      	b.n	800f7cc <kalman_3gyro.constprop.0+0x2e6c>
 800fcd0:	edd6 7a01 	vldr	s15, [r6, #4]
 800fcd4:	ed83 8a02 	vstr	s16, [r3, #8]
 800fcd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fcdc:	f1a2 0c06 	sub.w	ip, r2, #6
 800fce0:	edc6 7a01 	vstr	s15, [r6, #4]
 800fce4:	e558      	b.n	800f798 <kalman_3gyro.constprop.0+0x2e38>
 800fce6:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcee:	ee69 7aab 	vmul.f32	s15, s19, s23
 800fcf2:	eeb0 7a48 	vmov.f32	s14, s16
 800fcf6:	f040 8097 	bne.w	800fe28 <kalman_3gyro.constprop.0+0x34c8>
 800fcfa:	eef0 ca67 	vmov.f32	s25, s15
 800fcfe:	eef0 ba47 	vmov.f32	s23, s14
 800fd02:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd0a:	f43f aed6 	beq.w	800faba <kalman_3gyro.constprop.0+0x315a>
 800fd0e:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fd12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd16:	d142      	bne.n	800fd9e <kalman_3gyro.constprop.0+0x343e>
 800fd18:	eeb0 ca69 	vmov.f32	s24, s19
 800fd1c:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd24:	f040 80ba 	bne.w	800fe9c <kalman_3gyro.constprop.0+0x353c>
 800fd28:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fd2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd30:	eeb0 da4a 	vmov.f32	s26, s20
 800fd34:	f47f aee1 	bne.w	800fafa <kalman_3gyro.constprop.0+0x319a>
 800fd38:	eef0 9a4b 	vmov.f32	s19, s22
 800fd3c:	e6e9      	b.n	800fb12 <kalman_3gyro.constprop.0+0x31b2>
 800fd3e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800fd42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd46:	d051      	beq.n	800fdec <kalman_3gyro.constprop.0+0x348c>
 800fd48:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd50:	f040 8097 	bne.w	800fe82 <kalman_3gyro.constprop.0+0x3522>
 800fd54:	eef0 aa69 	vmov.f32	s21, s19
 800fd58:	eef0 8a69 	vmov.f32	s17, s19
 800fd5c:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd64:	f43f ae8f 	beq.w	800fa86 <kalman_3gyro.constprop.0+0x3126>
 800fd68:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd70:	d1b9      	bne.n	800fce6 <kalman_3gyro.constprop.0+0x3386>
 800fd72:	eef0 ca69 	vmov.f32	s25, s19
 800fd76:	eef0 ba69 	vmov.f32	s23, s19
 800fd7a:	e7c2      	b.n	800fd02 <kalman_3gyro.constprop.0+0x33a2>
 800fd7c:	aa7b      	add	r2, sp, #492	; 0x1ec
 800fd7e:	4413      	add	r3, r2
 800fd80:	edd3 9a00 	vldr	s19, [r3]
 800fd84:	f7ff bbe8 	b.w	800f558 <kalman_3gyro.constprop.0+0x2bf8>
 800fd88:	eef5 8a40 	vcmp.f32	s17, #0.0
 800fd8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd90:	bf14      	ite	ne
 800fd92:	ee68 7aad 	vmulne.f32	s15, s17, s27
 800fd96:	eef0 7a68 	vmoveq.f32	s15, s17
 800fd9a:	f7ff bab4 	b.w	800f306 <kalman_3gyro.constprop.0+0x29a6>
 800fd9e:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda6:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800fdaa:	eeb0 7a48 	vmov.f32	s14, s16
 800fdae:	d14e      	bne.n	800fe4e <kalman_3gyro.constprop.0+0x34ee>
 800fdb0:	eeb0 da67 	vmov.f32	s26, s15
 800fdb4:	eeb0 ca47 	vmov.f32	s24, s14
 800fdb8:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fdbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc0:	f43f ae95 	beq.w	800faee <kalman_3gyro.constprop.0+0x318e>
 800fdc4:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fdc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdcc:	f000 84bd 	beq.w	801074a <kalman_3gyro.constprop.0+0x3dea>
 800fdd0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fdd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd8:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800fddc:	eeb0 7a48 	vmov.f32	s14, s16
 800fde0:	d148      	bne.n	800fe74 <kalman_3gyro.constprop.0+0x3514>
 800fde2:	eef0 9a67 	vmov.f32	s19, s15
 800fde6:	eeb0 aa47 	vmov.f32	s20, s14
 800fdea:	e692      	b.n	800fb12 <kalman_3gyro.constprop.0+0x31b2>
 800fdec:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf4:	d05b      	beq.n	800feae <kalman_3gyro.constprop.0+0x354e>
 800fdf6:	eef5 9a40 	vcmp.f32	s19, #0.0
 800fdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfe:	d0a9      	beq.n	800fd54 <kalman_3gyro.constprop.0+0x33f4>
 800fe00:	eef5 ba40 	vcmp.f32	s23, #0.0
 800fe04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe08:	ee29 7aaa 	vmul.f32	s14, s19, s21
 800fe0c:	eef0 8a49 	vmov.f32	s17, s18
 800fe10:	f43f ae35 	beq.w	800fa7e <kalman_3gyro.constprop.0+0x311e>
 800fe14:	eef5 ca40 	vcmp.f32	s25, #0.0
 800fe18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe1c:	ee69 7aab 	vmul.f32	s15, s19, s23
 800fe20:	eef0 aa49 	vmov.f32	s21, s18
 800fe24:	f43f af69 	beq.w	800fcfa <kalman_3gyro.constprop.0+0x339a>
 800fe28:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800fe2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe30:	eef0 ba47 	vmov.f32	s23, s14
 800fe34:	ee29 7aac 	vmul.f32	s14, s19, s25
 800fe38:	f43f ae3b 	beq.w	800fab2 <kalman_3gyro.constprop.0+0x3152>
 800fe3c:	eeb5 da40 	vcmp.f32	s26, #0.0
 800fe40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe44:	eef0 ca67 	vmov.f32	s25, s15
 800fe48:	ee69 7a8c 	vmul.f32	s15, s19, s24
 800fe4c:	d0b0      	beq.n	800fdb0 <kalman_3gyro.constprop.0+0x3450>
 800fe4e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800fe52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe56:	eeb0 ca47 	vmov.f32	s24, s14
 800fe5a:	ee29 7a8d 	vmul.f32	s14, s19, s26
 800fe5e:	f43f ae42 	beq.w	800fae6 <kalman_3gyro.constprop.0+0x3186>
 800fe62:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800fe66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6a:	eeb0 da67 	vmov.f32	s26, s15
 800fe6e:	ee69 7a8a 	vmul.f32	s15, s19, s20
 800fe72:	d0b6      	beq.n	800fde2 <kalman_3gyro.constprop.0+0x3482>
 800fe74:	eeb0 aa47 	vmov.f32	s20, s14
 800fe78:	e647      	b.n	800fb0a <kalman_3gyro.constprop.0+0x31aa>
 800fe7a:	eef0 7a6d 	vmov.f32	s15, s27
 800fe7e:	f7ff baf5 	b.w	800f46c <kalman_3gyro.constprop.0+0x2b0c>
 800fe82:	eef0 8a48 	vmov.f32	s17, s16
 800fe86:	eef5 aa40 	vcmp.f32	s21, #0.0
 800fe8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8e:	ee29 9a29 	vmul.f32	s18, s18, s19
 800fe92:	f47f adec 	bne.w	800fa6e <kalman_3gyro.constprop.0+0x310e>
 800fe96:	eef0 aa49 	vmov.f32	s21, s18
 800fe9a:	e75f      	b.n	800fd5c <kalman_3gyro.constprop.0+0x33fc>
 800fe9c:	ed9f ba2a 	vldr	s22, [pc, #168]	; 800ff48 <kalman_3gyro.constprop.0+0x35e8>
 800fea0:	eef0 9a48 	vmov.f32	s19, s16
 800fea4:	eeb0 aa48 	vmov.f32	s20, s16
 800fea8:	eeb0 da48 	vmov.f32	s26, s16
 800feac:	e631      	b.n	800fb12 <kalman_3gyro.constprop.0+0x31b2>
 800feae:	eef0 8a6a 	vmov.f32	s17, s21
 800feb2:	e753      	b.n	800fd5c <kalman_3gyro.constprop.0+0x33fc>
 800feb4:	f89b 21a2 	ldrb.w	r2, [fp, #418]	; 0x1a2
 800feb8:	2a31      	cmp	r2, #49	; 0x31
 800feba:	f63f a8a3 	bhi.w	800f004 <kalman_3gyro.constprop.0+0x26a4>
 800febe:	2100      	movs	r1, #0
 800fec0:	3201      	adds	r2, #1
 800fec2:	f88b 21a2 	strb.w	r2, [fp, #418]	; 0x1a2
 800fec6:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 800feca:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 800fece:	f7ff b899 	b.w	800f004 <kalman_3gyro.constprop.0+0x26a4>
 800fed2:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f340 8423 	ble.w	8010722 <kalman_3gyro.constprop.0+0x3dc2>
 800fedc:	3b01      	subs	r3, #1
 800fede:	2200      	movs	r2, #0
 800fee0:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 800fee4:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
 800fee8:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800feec:	f88d 20b1 	strb.w	r2, [sp, #177]	; 0xb1
 800fef0:	f88d 20b3 	strb.w	r2, [sp, #179]	; 0xb3
 800fef4:	f7fe bca9 	b.w	800e84a <kalman_3gyro.constprop.0+0x1eea>
 800fef8:	f89b 200d 	ldrb.w	r2, [fp, #13]
 800fefc:	f89b 100e 	ldrb.w	r1, [fp, #14]
 800ff00:	f88d 20a8 	strb.w	r2, [sp, #168]	; 0xa8
 800ff04:	f88d 20a9 	strb.w	r2, [sp, #169]	; 0xa9
 800ff08:	f88d 20aa 	strb.w	r2, [sp, #170]	; 0xaa
 800ff0c:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 800ff10:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
 800ff14:	f88d 10ad 	strb.w	r1, [sp, #173]	; 0xad
 800ff18:	f7fe bc18 	b.w	800e74c <kalman_3gyro.constprop.0+0x1dec>
 800ff1c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800ff20:	eef0 4a46 	vmov.f32	s9, s12
 800ff24:	eeb1 5ae5 	vsqrt.f32	s10, s11
 800ff28:	eef0 7a47 	vmov.f32	s15, s14
 800ff2c:	eef0 5a66 	vmov.f32	s11, s13
 800ff30:	e64b      	b.n	800fbca <kalman_3gyro.constprop.0+0x326a>
 800ff32:	eeb1 7a47 	vneg.f32	s14, s14
 800ff36:	f7fd bc66 	b.w	800d806 <kalman_3gyro.constprop.0+0xea6>
 800ff3a:	eef0 ca69 	vmov.f32	s25, s19
 800ff3e:	e6e0      	b.n	800fd02 <kalman_3gyro.constprop.0+0x33a2>
 800ff40:	eeb0 ba69 	vmov.f32	s22, s19
 800ff44:	e5e5      	b.n	800fb12 <kalman_3gyro.constprop.0+0x31b2>
 800ff46:	bf00      	nop
 800ff48:	00000000 	.word	0x00000000
 800ff4c:	f20b 45b4 	addw	r5, fp, #1204	; 0x4b4
 800ff50:	49dc      	ldr	r1, [pc, #880]	; (80102c4 <kalman_3gyro.constprop.0+0x3964>)
 800ff52:	4bdd      	ldr	r3, [pc, #884]	; (80102c8 <kalman_3gyro.constprop.0+0x3968>)
 800ff54:	4add      	ldr	r2, [pc, #884]	; (80102cc <kalman_3gyro.constprop.0+0x396c>)
 800ff56:	2000      	movs	r0, #0
 800ff58:	f88b 0318 	strb.w	r0, [fp, #792]	; 0x318
 800ff5c:	6029      	str	r1, [r5, #0]
 800ff5e:	f20b 6024 	addw	r0, fp, #1572	; 0x624
 800ff62:	f20b 7194 	addw	r1, fp, #1940	; 0x794
 800ff66:	6002      	str	r2, [r0, #0]
 800ff68:	600b      	str	r3, [r1, #0]
 800ff6a:	f89b 34b1 	ldrb.w	r3, [fp, #1201]	; 0x4b1
 800ff6e:	9004      	str	r0, [sp, #16]
 800ff70:	9110      	str	r1, [sp, #64]	; 0x40
 800ff72:	f50b 6897 	add.w	r8, fp, #1208	; 0x4b8
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	f000 80b4 	beq.w	80100e4 <kalman_3gyro.constprop.0+0x3784>
 800ff7c:	240c      	movs	r4, #12
 800ff7e:	eddf bad4 	vldr	s23, [pc, #848]	; 80102d0 <kalman_3gyro.constprop.0+0x3970>
 800ff82:	ed9f bad4 	vldr	s22, [pc, #848]	; 80102d4 <kalman_3gyro.constprop.0+0x3974>
 800ff86:	ed9f 8ad4 	vldr	s16, [pc, #848]	; 80102d8 <kalman_3gyro.constprop.0+0x3978>
 800ff8a:	ed9f aad4 	vldr	s20, [pc, #848]	; 80102dc <kalman_3gyro.constprop.0+0x397c>
 800ff8e:	eddf aad4 	vldr	s21, [pc, #848]	; 80102e0 <kalman_3gyro.constprop.0+0x3980>
 800ff92:	9f08      	ldr	r7, [sp, #32]
 800ff94:	fb14 8403 	smlabb	r4, r4, r3, r8
 800ff98:	4646      	mov	r6, r8
 800ff9a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 800ff9e:	e06b      	b.n	8010078 <kalman_3gyro.constprop.0+0x3718>
 800ffa0:	eeb4 7aca 	vcmpe.f32	s14, s20
 800ffa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffa8:	f300 815a 	bgt.w	8010260 <kalman_3gyro.constprop.0+0x3900>
 800ffac:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800ffb0:	ee17 0a90 	vmov	r0, s15
 800ffb4:	f7f0 fac8 	bl	8000548 <__aeabi_f2d>
 800ffb8:	ec41 0b10 	vmov	d0, r0, r1
 800ffbc:	f005 fb04 	bl	80155c8 <ceil>
 800ffc0:	ec51 0b10 	vmov	r0, r1, d0
 800ffc4:	f7f0 fdf0 	bl	8000ba8 <__aeabi_d2f>
 800ffc8:	ee07 0a90 	vmov	s15, r0
 800ffcc:	edc6 7a00 	vstr	s15, [r6]
 800ffd0:	ed97 7a01 	vldr	s14, [r7, #4]
 800ffd4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 800ffd8:	eef0 6ae7 	vabs.f32	s13, s15
 800ffdc:	eef4 6acb 	vcmpe.f32	s13, s22
 800ffe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe4:	d51b      	bpl.n	801001e <kalman_3gyro.constprop.0+0x36be>
 800ffe6:	eeb4 7ac8 	vcmpe.f32	s14, s16
 800ffea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffee:	f280 8120 	bge.w	8010232 <kalman_3gyro.constprop.0+0x38d2>
 800fff2:	eeb4 7aca 	vcmpe.f32	s14, s20
 800fff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffa:	f300 812e 	bgt.w	801025a <kalman_3gyro.constprop.0+0x38fa>
 800fffe:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010002:	ee17 0a90 	vmov	r0, s15
 8010006:	f7f0 fa9f 	bl	8000548 <__aeabi_f2d>
 801000a:	ec41 0b10 	vmov	d0, r0, r1
 801000e:	f005 fadb 	bl	80155c8 <ceil>
 8010012:	ec51 0b10 	vmov	r0, r1, d0
 8010016:	f7f0 fdc7 	bl	8000ba8 <__aeabi_d2f>
 801001a:	ee07 0a90 	vmov	s15, r0
 801001e:	edc6 7a01 	vstr	s15, [r6, #4]
 8010022:	ed97 7a02 	vldr	s14, [r7, #8]
 8010026:	ee67 7a2b 	vmul.f32	s15, s14, s23
 801002a:	eef0 6ae7 	vabs.f32	s13, s15
 801002e:	eef4 6acb 	vcmpe.f32	s13, s22
 8010032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010036:	d51a      	bpl.n	801006e <kalman_3gyro.constprop.0+0x370e>
 8010038:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801003c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010040:	da3b      	bge.n	80100ba <kalman_3gyro.constprop.0+0x375a>
 8010042:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801004a:	f300 8103 	bgt.w	8010254 <kalman_3gyro.constprop.0+0x38f4>
 801004e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010052:	ee17 0a90 	vmov	r0, s15
 8010056:	f7f0 fa77 	bl	8000548 <__aeabi_f2d>
 801005a:	ec41 0b10 	vmov	d0, r0, r1
 801005e:	f005 fab3 	bl	80155c8 <ceil>
 8010062:	ec51 0b10 	vmov	r0, r1, d0
 8010066:	f7f0 fd9f 	bl	8000ba8 <__aeabi_d2f>
 801006a:	ee07 0a90 	vmov	s15, r0
 801006e:	edc6 7a02 	vstr	s15, [r6, #8]
 8010072:	360c      	adds	r6, #12
 8010074:	42b4      	cmp	r4, r6
 8010076:	d035      	beq.n	80100e4 <kalman_3gyro.constprop.0+0x3784>
 8010078:	ed97 7a00 	vldr	s14, [r7]
 801007c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010080:	eef0 6ae7 	vabs.f32	s13, s15
 8010084:	eef4 6acb 	vcmpe.f32	s13, s22
 8010088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801008c:	d59e      	bpl.n	800ffcc <kalman_3gyro.constprop.0+0x366c>
 801008e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010096:	db83      	blt.n	800ffa0 <kalman_3gyro.constprop.0+0x3640>
 8010098:	ee77 7a89 	vadd.f32	s15, s15, s18
 801009c:	ee17 0a90 	vmov	r0, s15
 80100a0:	f7f0 fa52 	bl	8000548 <__aeabi_f2d>
 80100a4:	ec41 0b10 	vmov	d0, r0, r1
 80100a8:	f005 fb12 	bl	80156d0 <floor>
 80100ac:	ec51 0b10 	vmov	r0, r1, d0
 80100b0:	f7f0 fd7a 	bl	8000ba8 <__aeabi_d2f>
 80100b4:	ee07 0a90 	vmov	s15, r0
 80100b8:	e788      	b.n	800ffcc <kalman_3gyro.constprop.0+0x366c>
 80100ba:	ee77 7a89 	vadd.f32	s15, s15, s18
 80100be:	360c      	adds	r6, #12
 80100c0:	ee17 0a90 	vmov	r0, s15
 80100c4:	f7f0 fa40 	bl	8000548 <__aeabi_f2d>
 80100c8:	ec41 0b10 	vmov	d0, r0, r1
 80100cc:	f005 fb00 	bl	80156d0 <floor>
 80100d0:	ec51 0b10 	vmov	r0, r1, d0
 80100d4:	f7f0 fd68 	bl	8000ba8 <__aeabi_d2f>
 80100d8:	ee07 0a90 	vmov	s15, r0
 80100dc:	ed46 7a01 	vstr	s15, [r6, #-4]
 80100e0:	42b4      	cmp	r4, r6
 80100e2:	d1c9      	bne.n	8010078 <kalman_3gyro.constprop.0+0x3718>
 80100e4:	f89b 3621 	ldrb.w	r3, [fp, #1569]	; 0x621
 80100e8:	f50b 67c5 	add.w	r7, fp, #1576	; 0x628
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	f000 80cf 	beq.w	8010290 <kalman_3gyro.constprop.0+0x3930>
 80100f2:	240c      	movs	r4, #12
 80100f4:	eddf ba7b 	vldr	s23, [pc, #492]	; 80102e4 <kalman_3gyro.constprop.0+0x3984>
 80100f8:	ed9f ba76 	vldr	s22, [pc, #472]	; 80102d4 <kalman_3gyro.constprop.0+0x3974>
 80100fc:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 80102e8 <kalman_3gyro.constprop.0+0x3988>
 8010100:	ed9f aa7a 	vldr	s20, [pc, #488]	; 80102ec <kalman_3gyro.constprop.0+0x398c>
 8010104:	eddf aa76 	vldr	s21, [pc, #472]	; 80102e0 <kalman_3gyro.constprop.0+0x3980>
 8010108:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801010c:	fb14 7403 	smlabb	r4, r4, r3, r7
 8010110:	463e      	mov	r6, r7
 8010112:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8010116:	e06b      	b.n	80101f0 <kalman_3gyro.constprop.0+0x3890>
 8010118:	eeb4 7aca 	vcmpe.f32	s14, s20
 801011c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010120:	f300 81a2 	bgt.w	8010468 <kalman_3gyro.constprop.0+0x3b08>
 8010124:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010128:	ee17 0a90 	vmov	r0, s15
 801012c:	f7f0 fa0c 	bl	8000548 <__aeabi_f2d>
 8010130:	ec41 0b10 	vmov	d0, r0, r1
 8010134:	f005 fa48 	bl	80155c8 <ceil>
 8010138:	ec51 0b10 	vmov	r0, r1, d0
 801013c:	f7f0 fd34 	bl	8000ba8 <__aeabi_d2f>
 8010140:	ee07 0a90 	vmov	s15, r0
 8010144:	edc6 7a00 	vstr	s15, [r6]
 8010148:	ed99 7a04 	vldr	s14, [r9, #16]
 801014c:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010150:	eef0 6ae7 	vabs.f32	s13, s15
 8010154:	eef4 6acb 	vcmpe.f32	s13, s22
 8010158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015c:	d51b      	bpl.n	8010196 <kalman_3gyro.constprop.0+0x3836>
 801015e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010166:	f280 8168 	bge.w	801043a <kalman_3gyro.constprop.0+0x3ada>
 801016a:	eeb4 7aca 	vcmpe.f32	s14, s20
 801016e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010172:	f300 8176 	bgt.w	8010462 <kalman_3gyro.constprop.0+0x3b02>
 8010176:	ee77 7ac9 	vsub.f32	s15, s15, s18
 801017a:	ee17 0a90 	vmov	r0, s15
 801017e:	f7f0 f9e3 	bl	8000548 <__aeabi_f2d>
 8010182:	ec41 0b10 	vmov	d0, r0, r1
 8010186:	f005 fa1f 	bl	80155c8 <ceil>
 801018a:	ec51 0b10 	vmov	r0, r1, d0
 801018e:	f7f0 fd0b 	bl	8000ba8 <__aeabi_d2f>
 8010192:	ee07 0a90 	vmov	s15, r0
 8010196:	edc6 7a01 	vstr	s15, [r6, #4]
 801019a:	ed99 7a05 	vldr	s14, [r9, #20]
 801019e:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80101a2:	eef0 6ae7 	vabs.f32	s13, s15
 80101a6:	eef4 6acb 	vcmpe.f32	s13, s22
 80101aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ae:	d51a      	bpl.n	80101e6 <kalman_3gyro.constprop.0+0x3886>
 80101b0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80101b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b8:	da55      	bge.n	8010266 <kalman_3gyro.constprop.0+0x3906>
 80101ba:	eeb4 7aca 	vcmpe.f32	s14, s20
 80101be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c2:	f300 814b 	bgt.w	801045c <kalman_3gyro.constprop.0+0x3afc>
 80101c6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80101ca:	ee17 0a90 	vmov	r0, s15
 80101ce:	f7f0 f9bb 	bl	8000548 <__aeabi_f2d>
 80101d2:	ec41 0b10 	vmov	d0, r0, r1
 80101d6:	f005 f9f7 	bl	80155c8 <ceil>
 80101da:	ec51 0b10 	vmov	r0, r1, d0
 80101de:	f7f0 fce3 	bl	8000ba8 <__aeabi_d2f>
 80101e2:	ee07 0a90 	vmov	s15, r0
 80101e6:	edc6 7a02 	vstr	s15, [r6, #8]
 80101ea:	360c      	adds	r6, #12
 80101ec:	42b4      	cmp	r4, r6
 80101ee:	d04f      	beq.n	8010290 <kalman_3gyro.constprop.0+0x3930>
 80101f0:	ed99 7a03 	vldr	s14, [r9, #12]
 80101f4:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80101f8:	eef0 6ae7 	vabs.f32	s13, s15
 80101fc:	eef4 6acb 	vcmpe.f32	s13, s22
 8010200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010204:	d59e      	bpl.n	8010144 <kalman_3gyro.constprop.0+0x37e4>
 8010206:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801020a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801020e:	db83      	blt.n	8010118 <kalman_3gyro.constprop.0+0x37b8>
 8010210:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010214:	ee17 0a90 	vmov	r0, s15
 8010218:	f7f0 f996 	bl	8000548 <__aeabi_f2d>
 801021c:	ec41 0b10 	vmov	d0, r0, r1
 8010220:	f005 fa56 	bl	80156d0 <floor>
 8010224:	ec51 0b10 	vmov	r0, r1, d0
 8010228:	f7f0 fcbe 	bl	8000ba8 <__aeabi_d2f>
 801022c:	ee07 0a90 	vmov	s15, r0
 8010230:	e788      	b.n	8010144 <kalman_3gyro.constprop.0+0x37e4>
 8010232:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010236:	ee17 0a90 	vmov	r0, s15
 801023a:	f7f0 f985 	bl	8000548 <__aeabi_f2d>
 801023e:	ec41 0b10 	vmov	d0, r0, r1
 8010242:	f005 fa45 	bl	80156d0 <floor>
 8010246:	ec51 0b10 	vmov	r0, r1, d0
 801024a:	f7f0 fcad 	bl	8000ba8 <__aeabi_d2f>
 801024e:	ee07 0a90 	vmov	s15, r0
 8010252:	e6e4      	b.n	801001e <kalman_3gyro.constprop.0+0x36be>
 8010254:	eef0 7a6a 	vmov.f32	s15, s21
 8010258:	e709      	b.n	801006e <kalman_3gyro.constprop.0+0x370e>
 801025a:	eef0 7a6a 	vmov.f32	s15, s21
 801025e:	e6de      	b.n	801001e <kalman_3gyro.constprop.0+0x36be>
 8010260:	eef0 7a6a 	vmov.f32	s15, s21
 8010264:	e6b2      	b.n	800ffcc <kalman_3gyro.constprop.0+0x366c>
 8010266:	ee77 7a89 	vadd.f32	s15, s15, s18
 801026a:	360c      	adds	r6, #12
 801026c:	ee17 0a90 	vmov	r0, s15
 8010270:	f7f0 f96a 	bl	8000548 <__aeabi_f2d>
 8010274:	ec41 0b10 	vmov	d0, r0, r1
 8010278:	f005 fa2a 	bl	80156d0 <floor>
 801027c:	ec51 0b10 	vmov	r0, r1, d0
 8010280:	f7f0 fc92 	bl	8000ba8 <__aeabi_d2f>
 8010284:	ee07 0a90 	vmov	s15, r0
 8010288:	ed46 7a01 	vstr	s15, [r6, #-4]
 801028c:	42b4      	cmp	r4, r6
 801028e:	d1af      	bne.n	80101f0 <kalman_3gyro.constprop.0+0x3890>
 8010290:	f89b 3791 	ldrb.w	r3, [fp, #1937]	; 0x791
 8010294:	2b00      	cmp	r3, #0
 8010296:	f43c ac7e 	beq.w	800cb96 <kalman_3gyro.constprop.0+0x236>
 801029a:	f50b 66f3 	add.w	r6, fp, #1944	; 0x798
 801029e:	240c      	movs	r4, #12
 80102a0:	eddf ba13 	vldr	s23, [pc, #76]	; 80102f0 <kalman_3gyro.constprop.0+0x3990>
 80102a4:	ed9f ba0b 	vldr	s22, [pc, #44]	; 80102d4 <kalman_3gyro.constprop.0+0x3974>
 80102a8:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80102f4 <kalman_3gyro.constprop.0+0x3994>
 80102ac:	ed9f aa12 	vldr	s20, [pc, #72]	; 80102f8 <kalman_3gyro.constprop.0+0x3998>
 80102b0:	eddf aa0b 	vldr	s21, [pc, #44]	; 80102e0 <kalman_3gyro.constprop.0+0x3980>
 80102b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80102b8:	960f      	str	r6, [sp, #60]	; 0x3c
 80102ba:	fb14 6403 	smlabb	r4, r4, r3, r6
 80102be:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 80102c2:	e099      	b.n	80103f8 <kalman_3gyro.constprop.0+0x3a98>
 80102c4:	3a7001e0 	.word	0x3a7001e0
 80102c8:	3a8c0118 	.word	0x3a8c0118
 80102cc:	3a000100 	.word	0x3a000100
 80102d0:	44888777 	.word	0x44888777
 80102d4:	4b000000 	.word	0x4b000000
 80102d8:	39f001e1 	.word	0x39f001e1
 80102dc:	b9f001e1 	.word	0xb9f001e1
 80102e0:	80000000 	.word	0x80000000
 80102e4:	44fffe00 	.word	0x44fffe00
 80102e8:	39800100 	.word	0x39800100
 80102ec:	b9800100 	.word	0xb9800100
 80102f0:	446a0ccd 	.word	0x446a0ccd
 80102f4:	3a0c0118 	.word	0x3a0c0118
 80102f8:	ba0c0118 	.word	0xba0c0118
 80102fc:	bf666666 	.word	0xbf666666
 8010300:	3d072b02 	.word	0x3d072b02
 8010304:	3cb43958 	.word	0x3cb43958
 8010308:	3cf5c28f 	.word	0x3cf5c28f
 801030c:	3d75c28f 	.word	0x3d75c28f
 8010310:	3d23d70a 	.word	0x3d23d70a
 8010314:	3ca3d70a 	.word	0x3ca3d70a
 8010318:	3d4ccccd 	.word	0x3d4ccccd
 801031c:	3d8f5c29 	.word	0x3d8f5c29
 8010320:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010328:	f300 80c6 	bgt.w	80104b8 <kalman_3gyro.constprop.0+0x3b58>
 801032c:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010330:	ee17 0a90 	vmov	r0, s15
 8010334:	f7f0 f908 	bl	8000548 <__aeabi_f2d>
 8010338:	ec41 0b10 	vmov	d0, r0, r1
 801033c:	f005 f944 	bl	80155c8 <ceil>
 8010340:	ec51 0b10 	vmov	r0, r1, d0
 8010344:	f7f0 fc30 	bl	8000ba8 <__aeabi_d2f>
 8010348:	ee07 0a90 	vmov	s15, r0
 801034c:	edc6 7a00 	vstr	s15, [r6]
 8010350:	ed99 7a07 	vldr	s14, [r9, #28]
 8010354:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010358:	eef0 6ae7 	vabs.f32	s13, s15
 801035c:	eef4 6acb 	vcmpe.f32	s13, s22
 8010360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010364:	d51b      	bpl.n	801039e <kalman_3gyro.constprop.0+0x3a3e>
 8010366:	eeb4 7ac8 	vcmpe.f32	s14, s16
 801036a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036e:	f280 808f 	bge.w	8010490 <kalman_3gyro.constprop.0+0x3b30>
 8010372:	eeb4 7aca 	vcmpe.f32	s14, s20
 8010376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801037a:	f300 809a 	bgt.w	80104b2 <kalman_3gyro.constprop.0+0x3b52>
 801037e:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8010382:	ee17 0a90 	vmov	r0, s15
 8010386:	f7f0 f8df 	bl	8000548 <__aeabi_f2d>
 801038a:	ec41 0b10 	vmov	d0, r0, r1
 801038e:	f005 f91b 	bl	80155c8 <ceil>
 8010392:	ec51 0b10 	vmov	r0, r1, d0
 8010396:	f7f0 fc07 	bl	8000ba8 <__aeabi_d2f>
 801039a:	ee07 0a90 	vmov	s15, r0
 801039e:	edc6 7a01 	vstr	s15, [r6, #4]
 80103a2:	ed99 7a08 	vldr	s14, [r9, #32]
 80103a6:	ee67 7a2b 	vmul.f32	s15, s14, s23
 80103aa:	eef0 6ae7 	vabs.f32	s13, s15
 80103ae:	eef4 6acb 	vcmpe.f32	s13, s22
 80103b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b6:	d519      	bpl.n	80103ec <kalman_3gyro.constprop.0+0x3a8c>
 80103b8:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80103bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c0:	da55      	bge.n	801046e <kalman_3gyro.constprop.0+0x3b0e>
 80103c2:	eeb4 7aca 	vcmpe.f32	s14, s20
 80103c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ca:	dc78      	bgt.n	80104be <kalman_3gyro.constprop.0+0x3b5e>
 80103cc:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80103d0:	ee17 0a90 	vmov	r0, s15
 80103d4:	f7f0 f8b8 	bl	8000548 <__aeabi_f2d>
 80103d8:	ec41 0b10 	vmov	d0, r0, r1
 80103dc:	f005 f8f4 	bl	80155c8 <ceil>
 80103e0:	ec51 0b10 	vmov	r0, r1, d0
 80103e4:	f7f0 fbe0 	bl	8000ba8 <__aeabi_d2f>
 80103e8:	ee07 0a90 	vmov	s15, r0
 80103ec:	edc6 7a02 	vstr	s15, [r6, #8]
 80103f0:	360c      	adds	r6, #12
 80103f2:	42b4      	cmp	r4, r6
 80103f4:	f43c abd2 	beq.w	800cb9c <kalman_3gyro.constprop.0+0x23c>
 80103f8:	ed99 7a06 	vldr	s14, [r9, #24]
 80103fc:	ee67 7a2b 	vmul.f32	s15, s14, s23
 8010400:	eef0 6ae7 	vabs.f32	s13, s15
 8010404:	eef4 6acb 	vcmpe.f32	s13, s22
 8010408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801040c:	d59e      	bpl.n	801034c <kalman_3gyro.constprop.0+0x39ec>
 801040e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010416:	db83      	blt.n	8010320 <kalman_3gyro.constprop.0+0x39c0>
 8010418:	ee77 7a89 	vadd.f32	s15, s15, s18
 801041c:	ee17 0a90 	vmov	r0, s15
 8010420:	f7f0 f892 	bl	8000548 <__aeabi_f2d>
 8010424:	ec41 0b10 	vmov	d0, r0, r1
 8010428:	f005 f952 	bl	80156d0 <floor>
 801042c:	ec51 0b10 	vmov	r0, r1, d0
 8010430:	f7f0 fbba 	bl	8000ba8 <__aeabi_d2f>
 8010434:	ee07 0a90 	vmov	s15, r0
 8010438:	e788      	b.n	801034c <kalman_3gyro.constprop.0+0x39ec>
 801043a:	ee77 7a89 	vadd.f32	s15, s15, s18
 801043e:	ee17 0a90 	vmov	r0, s15
 8010442:	f7f0 f881 	bl	8000548 <__aeabi_f2d>
 8010446:	ec41 0b10 	vmov	d0, r0, r1
 801044a:	f005 f941 	bl	80156d0 <floor>
 801044e:	ec51 0b10 	vmov	r0, r1, d0
 8010452:	f7f0 fba9 	bl	8000ba8 <__aeabi_d2f>
 8010456:	ee07 0a90 	vmov	s15, r0
 801045a:	e69c      	b.n	8010196 <kalman_3gyro.constprop.0+0x3836>
 801045c:	eef0 7a6a 	vmov.f32	s15, s21
 8010460:	e6c1      	b.n	80101e6 <kalman_3gyro.constprop.0+0x3886>
 8010462:	eef0 7a6a 	vmov.f32	s15, s21
 8010466:	e696      	b.n	8010196 <kalman_3gyro.constprop.0+0x3836>
 8010468:	eef0 7a6a 	vmov.f32	s15, s21
 801046c:	e66a      	b.n	8010144 <kalman_3gyro.constprop.0+0x37e4>
 801046e:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010472:	ee17 0a90 	vmov	r0, s15
 8010476:	f7f0 f867 	bl	8000548 <__aeabi_f2d>
 801047a:	ec41 0b10 	vmov	d0, r0, r1
 801047e:	f005 f927 	bl	80156d0 <floor>
 8010482:	ec51 0b10 	vmov	r0, r1, d0
 8010486:	f7f0 fb8f 	bl	8000ba8 <__aeabi_d2f>
 801048a:	ee07 0a90 	vmov	s15, r0
 801048e:	e7ad      	b.n	80103ec <kalman_3gyro.constprop.0+0x3a8c>
 8010490:	ee77 7a89 	vadd.f32	s15, s15, s18
 8010494:	ee17 0a90 	vmov	r0, s15
 8010498:	f7f0 f856 	bl	8000548 <__aeabi_f2d>
 801049c:	ec41 0b10 	vmov	d0, r0, r1
 80104a0:	f005 f916 	bl	80156d0 <floor>
 80104a4:	ec51 0b10 	vmov	r0, r1, d0
 80104a8:	f7f0 fb7e 	bl	8000ba8 <__aeabi_d2f>
 80104ac:	ee07 0a90 	vmov	s15, r0
 80104b0:	e775      	b.n	801039e <kalman_3gyro.constprop.0+0x3a3e>
 80104b2:	eef0 7a6a 	vmov.f32	s15, s21
 80104b6:	e772      	b.n	801039e <kalman_3gyro.constprop.0+0x3a3e>
 80104b8:	eef0 7a6a 	vmov.f32	s15, s21
 80104bc:	e746      	b.n	801034c <kalman_3gyro.constprop.0+0x39ec>
 80104be:	eef0 7a6a 	vmov.f32	s15, s21
 80104c2:	e793      	b.n	80103ec <kalman_3gyro.constprop.0+0x3a8c>
 80104c4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80104c6:	7813      	ldrb	r3, [r2, #0]
 80104c8:	ed92 7a03 	vldr	s14, [r2, #12]
 80104cc:	edd2 6a01 	vldr	s13, [r2, #4]
 80104d0:	edd2 7a02 	vldr	s15, [r2, #8]
 80104d4:	2200      	movs	r2, #0
 80104d6:	f88b 21ac 	strb.w	r2, [fp, #428]	; 0x1ac
 80104da:	2b00      	cmp	r3, #0
 80104dc:	f040 813b 	bne.w	8010756 <kalman_3gyro.constprop.0+0x3df6>
 80104e0:	ed5f 7a7a 	vldr	s15, [pc, #-488]	; 80102fc <kalman_3gyro.constprop.0+0x399c>
 80104e4:	edcb 7a72 	vstr	s15, [fp, #456]	; 0x1c8
 80104e8:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 80104ec:	f8cb 41cc 	str.w	r4, [fp, #460]	; 0x1cc
 80104f0:	f8cb 41d0 	str.w	r4, [fp, #464]	; 0x1d0
 80104f4:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80104f8:	2100      	movs	r1, #0
 80104fa:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 80104fe:	f006 ffaf 	bl	8017460 <memset>
 8010502:	eddb 7a02 	vldr	s15, [fp, #8]
 8010506:	ed5f 5a82 	vldr	s11, [pc, #-520]	; 8010300 <kalman_3gyro.constprop.0+0x39a0>
 801050a:	ed1f 6a82 	vldr	s12, [pc, #-520]	; 8010304 <kalman_3gyro.constprop.0+0x39a4>
 801050e:	ed5f 6a82 	vldr	s13, [pc, #-520]	; 8010308 <kalman_3gyro.constprop.0+0x39a8>
 8010512:	ed5f 4a82 	vldr	s9, [pc, #-520]	; 801030c <kalman_3gyro.constprop.0+0x39ac>
 8010516:	ed5f 3a82 	vldr	s7, [pc, #-520]	; 8010310 <kalman_3gyro.constprop.0+0x39b0>
 801051a:	ed1f 7a82 	vldr	s14, [pc, #-520]	; 8010314 <kalman_3gyro.constprop.0+0x39b4>
 801051e:	ed1f 5a82 	vldr	s10, [pc, #-520]	; 8010318 <kalman_3gyro.constprop.0+0x39b8>
 8010522:	ed1f 4a82 	vldr	s8, [pc, #-520]	; 801031c <kalman_3gyro.constprop.0+0x39bc>
 8010526:	4bd9      	ldr	r3, [pc, #868]	; (801088c <kalman_3gyro.constprop.0+0x3f2c>)
 8010528:	49d9      	ldr	r1, [pc, #868]	; (8010890 <kalman_3gyro.constprop.0+0x3f30>)
 801052a:	4dda      	ldr	r5, [pc, #872]	; (8010894 <kalman_3gyro.constprop.0+0x3f34>)
 801052c:	ed9f 3ada 	vldr	s6, [pc, #872]	; 8010898 <kalman_3gyro.constprop.0+0x3f38>
 8010530:	48da      	ldr	r0, [pc, #872]	; (801089c <kalman_3gyro.constprop.0+0x3f3c>)
 8010532:	f8cb 40c4 	str.w	r4, [fp, #196]	; 0xc4
 8010536:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801053a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801053e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8010542:	edcb 5a34 	vstr	s11, [fp, #208]	; 0xd0
 8010546:	eddf 5ad6 	vldr	s11, [pc, #856]	; 80108a0 <kalman_3gyro.constprop.0+0x3f40>
 801054a:	ed8b 6a4e 	vstr	s12, [fp, #312]	; 0x138
 801054e:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8010552:	ee67 3aa3 	vmul.f32	s7, s15, s7
 8010556:	edcb 6a50 	vstr	s13, [fp, #320]	; 0x140
 801055a:	ed9f 6ad2 	vldr	s12, [pc, #840]	; 80108a4 <kalman_3gyro.constprop.0+0x3f44>
 801055e:	eddf 6ad2 	vldr	s13, [pc, #840]	; 80108a8 <kalman_3gyro.constprop.0+0x3f48>
 8010562:	f8cb 412c 	str.w	r4, [fp, #300]	; 0x12c
 8010566:	ee27 7a87 	vmul.f32	s14, s15, s14
 801056a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 801056e:	ee27 5a85 	vmul.f32	s10, s15, s10
 8010572:	ee27 4a84 	vmul.f32	s8, s15, s8
 8010576:	ee27 6a86 	vmul.f32	s12, s15, s12
 801057a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801057e:	2200      	movs	r2, #0
 8010580:	f8cb 40cc 	str.w	r4, [fp, #204]	; 0xcc
 8010584:	f8cb 4134 	str.w	r4, [fp, #308]	; 0x134
 8010588:	edcb 4a38 	vstr	s9, [fp, #224]	; 0xe0
 801058c:	4cc7      	ldr	r4, [pc, #796]	; (80108ac <kalman_3gyro.constprop.0+0x3f4c>)
 801058e:	edcb 3a52 	vstr	s7, [fp, #328]	; 0x148
 8010592:	f8cb 10d4 	str.w	r1, [fp, #212]	; 0xd4
 8010596:	eddf 3ac6 	vldr	s7, [pc, #792]	; 80108b0 <kalman_3gyro.constprop.0+0x3f50>
 801059a:	49c6      	ldr	r1, [pc, #792]	; (80108b4 <kalman_3gyro.constprop.0+0x3f54>)
 801059c:	f8cb 30dc 	str.w	r3, [fp, #220]	; 0xdc
 80105a0:	f8cb 30e4 	str.w	r3, [fp, #228]	; 0xe4
 80105a4:	eddf 4ac4 	vldr	s9, [pc, #784]	; 80108b8 <kalman_3gyro.constprop.0+0x3f58>
 80105a8:	4bc4      	ldr	r3, [pc, #784]	; (80108bc <kalman_3gyro.constprop.0+0x3f5c>)
 80105aa:	f8cb 20c0 	str.w	r2, [fp, #192]	; 0xc0
 80105ae:	f8cb 2128 	str.w	r2, [fp, #296]	; 0x128
 80105b2:	f8cb 513c 	str.w	r5, [fp, #316]	; 0x13c
 80105b6:	4ac2      	ldr	r2, [pc, #776]	; (80108c0 <kalman_3gyro.constprop.0+0x3f60>)
 80105b8:	f8cb 4144 	str.w	r4, [fp, #324]	; 0x144
 80105bc:	f8cb 014c 	str.w	r0, [fp, #332]	; 0x14c
 80105c0:	f8cb 10ec 	str.w	r1, [fp, #236]	; 0xec
 80105c4:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 80105c8:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 80105cc:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 80105d0:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 80105d4:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 80105d8:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 80105dc:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 80105e0:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 80105e4:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 80105e8:	ed8b 7a32 	vstr	s14, [fp, #200]	; 0xc8
 80105ec:	ed8b 7a4c 	vstr	s14, [fp, #304]	; 0x130
 80105f0:	ed8b 5a36 	vstr	s10, [fp, #216]	; 0xd8
 80105f4:	ed8b 4a3a 	vstr	s8, [fp, #232]	; 0xe8
 80105f8:	ed8b 5a54 	vstr	s10, [fp, #336]	; 0x150
 80105fc:	edcb 5a3c 	vstr	s11, [fp, #240]	; 0xf0
 8010600:	edcb 5a56 	vstr	s11, [fp, #344]	; 0x158
 8010604:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8010608:	ee67 4aa4 	vmul.f32	s9, s15, s9
 801060c:	4cad      	ldr	r4, [pc, #692]	; (80108c4 <kalman_3gyro.constprop.0+0x3f64>)
 801060e:	48ae      	ldr	r0, [pc, #696]	; (80108c8 <kalman_3gyro.constprop.0+0x3f68>)
 8010610:	49ae      	ldr	r1, [pc, #696]	; (80108cc <kalman_3gyro.constprop.0+0x3f6c>)
 8010612:	edcb 7a48 	vstr	s15, [fp, #288]	; 0x120
 8010616:	edcb 7a62 	vstr	s15, [fp, #392]	; 0x188
 801061a:	ed8b 6a3e 	vstr	s12, [fp, #248]	; 0xf8
 801061e:	ed8b 6a58 	vstr	s12, [fp, #352]	; 0x160
 8010622:	edcb 6a40 	vstr	s13, [fp, #256]	; 0x100
 8010626:	ee27 6a83 	vmul.f32	s12, s15, s6
 801062a:	edcb 6a5a 	vstr	s13, [fp, #360]	; 0x168
 801062e:	f8cb 2154 	str.w	r2, [fp, #340]	; 0x154
 8010632:	ee67 6aa5 	vmul.f32	s13, s15, s11
 8010636:	f8cb 210c 	str.w	r2, [fp, #268]	; 0x10c
 801063a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801063e:	4aa4      	ldr	r2, [pc, #656]	; (80108d0 <kalman_3gyro.constprop.0+0x3f70>)
 8010640:	f8cb 40fc 	str.w	r4, [fp, #252]	; 0xfc
 8010644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010648:	f8cb 0164 	str.w	r0, [fp, #356]	; 0x164
 801064c:	f8cb 1174 	str.w	r1, [fp, #372]	; 0x174
 8010650:	f8cb 219c 	str.w	r2, [fp, #412]	; 0x19c
 8010654:	4e9f      	ldr	r6, [pc, #636]	; (80108d4 <kalman_3gyro.constprop.0+0x3f74>)
 8010656:	4da0      	ldr	r5, [pc, #640]	; (80108d8 <kalman_3gyro.constprop.0+0x3f78>)
 8010658:	49a0      	ldr	r1, [pc, #640]	; (80108dc <kalman_3gyro.constprop.0+0x3f7c>)
 801065a:	4aa1      	ldr	r2, [pc, #644]	; (80108e0 <kalman_3gyro.constprop.0+0x3f80>)
 801065c:	f8cb 317c 	str.w	r3, [fp, #380]	; 0x17c
 8010660:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
 8010664:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8010668:	f8cb 311c 	str.w	r3, [fp, #284]	; 0x11c
 801066c:	f8cb 3124 	str.w	r3, [fp, #292]	; 0x124
 8010670:	ed8b 3a3d 	vstr	s6, [fp, #244]	; 0xf4
 8010674:	ed8b 6a42 	vstr	s12, [fp, #264]	; 0x108
 8010678:	ed8b 6a5c 	vstr	s12, [fp, #368]	; 0x170
 801067c:	edcb 5a66 	vstr	s11, [fp, #408]	; 0x198
 8010680:	edcb 6a44 	vstr	s13, [fp, #272]	; 0x110
 8010684:	edcb 6a5e 	vstr	s13, [fp, #376]	; 0x178
 8010688:	edcb 3a65 	vstr	s7, [fp, #404]	; 0x194
 801068c:	edcb 7a46 	vstr	s15, [fp, #280]	; 0x118
 8010690:	edcb 4a60 	vstr	s9, [fp, #384]	; 0x180
 8010694:	f8cb 615c 	str.w	r6, [fp, #348]	; 0x15c
 8010698:	f8cb 516c 	str.w	r5, [fp, #364]	; 0x16c
 801069c:	f8cb 4104 	str.w	r4, [fp, #260]	; 0x104
 80106a0:	f8cb 0114 	str.w	r0, [fp, #276]	; 0x114
 80106a4:	f8cb 1184 	str.w	r1, [fp, #388]	; 0x184
 80106a8:	f8cb 218c 	str.w	r2, [fp, #396]	; 0x18c
 80106ac:	ed8b 7a64 	vstr	s14, [fp, #400]	; 0x190
 80106b0:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80106b4:	b973      	cbnz	r3, 80106d4 <kalman_3gyro.constprop.0+0x3d74>
 80106b6:	f50b 6214 	add.w	r2, fp, #2368	; 0x940
 80106ba:	f60b 1344 	addw	r3, fp, #2372	; 0x944
 80106be:	6811      	ldr	r1, [r2, #0]
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	f8cb 11bc 	str.w	r1, [fp, #444]	; 0x1bc
 80106c6:	f60b 1348 	addw	r3, fp, #2376	; 0x948
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f8cb 31c4 	str.w	r3, [fp, #452]	; 0x1c4
 80106d0:	f8cb 21c0 	str.w	r2, [fp, #448]	; 0x1c0
 80106d4:	2300      	movs	r3, #0
 80106d6:	f88b 3001 	strb.w	r3, [fp, #1]
 80106da:	f7fc ba4b 	b.w	800cb74 <kalman_3gyro.constprop.0+0x214>
 80106de:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 80106e2:	ed9b ea4b 	vldr	s28, [fp, #300]	; 0x12c
 80106e6:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80106ea:	ee69 9a8e 	vmul.f32	s19, s19, s28
 80106ee:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 80106f2:	f7fd bd5b 	b.w	800e1ac <kalman_3gyro.constprop.0+0x184c>
 80106f6:	eddf 7a7b 	vldr	s15, [pc, #492]	; 80108e4 <kalman_3gyro.constprop.0+0x3f84>
 80106fa:	f7fc ba9e 	b.w	800cc3a <kalman_3gyro.constprop.0+0x2da>
 80106fe:	eeb1 5a04 	vmov.f32	s10, #20	; 0x40a00000  5.0
 8010702:	f7fd bd7b 	b.w	800e1fc <kalman_3gyro.constprop.0+0x189c>
 8010706:	ed9f 6a78 	vldr	s12, [pc, #480]	; 80108e8 <kalman_3gyro.constprop.0+0x3f88>
 801070a:	ed9f 4a78 	vldr	s8, [pc, #480]	; 80108ec <kalman_3gyro.constprop.0+0x3f8c>
 801070e:	eddf 4a78 	vldr	s9, [pc, #480]	; 80108f0 <kalman_3gyro.constprop.0+0x3f90>
 8010712:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80108f4 <kalman_3gyro.constprop.0+0x3f94>
 8010716:	ed9f ca78 	vldr	s24, [pc, #480]	; 80108f8 <kalman_3gyro.constprop.0+0x3f98>
 801071a:	ee68 8a8c 	vmul.f32	s17, s17, s24
 801071e:	f7fd bf9d 	b.w	800e65c <kalman_3gyro.constprop.0+0x1cfc>
 8010722:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8010726:	2a00      	cmp	r2, #0
 8010728:	f340 8181 	ble.w	8010a2e <kalman_3gyro.constprop.0+0x40ce>
 801072c:	ed9d 7a02 	vldr	s14, [sp, #8]
 8010730:	eef5 7a08 	vmov.f32	s15, #88	; 0x3ec00000  0.375
 8010734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801073c:	f340 8177 	ble.w	8010a2e <kalman_3gyro.constprop.0+0x40ce>
 8010740:	3a01      	subs	r2, #1
 8010742:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 8010746:	f7fe b880 	b.w	800e84a <kalman_3gyro.constprop.0+0x1eea>
 801074a:	eeb0 aa69 	vmov.f32	s20, s19
 801074e:	eeb0 ba69 	vmov.f32	s22, s19
 8010752:	f7ff b9de 	b.w	800fb12 <kalman_3gyro.constprop.0+0x31b2>
 8010756:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801075a:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801075e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010762:	eef1 6ae7 	vsqrt.f32	s13, s15
 8010766:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801076a:	e6bb      	b.n	80104e4 <kalman_3gyro.constprop.0+0x3b84>
 801076c:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 8010770:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 8010774:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 8010778:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 801077c:	f7fe b802 	b.w	800e784 <kalman_3gyro.constprop.0+0x1e24>
 8010780:	ed9b ba49 	vldr	s22, [fp, #292]	; 0x124
 8010784:	f7fd bae6 	b.w	800dd54 <kalman_3gyro.constprop.0+0x13f4>
 8010788:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 801078c:	ed9b ea63 	vldr	s28, [fp, #396]	; 0x18c
 8010790:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8010794:	ee69 9a8e 	vmul.f32	s19, s19, s28
 8010798:	ed8d 7a0d 	vstr	s14, [sp, #52]	; 0x34
 801079c:	f7fd bd06 	b.w	800e1ac <kalman_3gyro.constprop.0+0x184c>
 80107a0:	ee7e 7a67 	vsub.f32	s15, s28, s15
 80107a4:	ee17 0a90 	vmov	r0, s15
 80107a8:	f7ef fece 	bl	8000548 <__aeabi_f2d>
 80107ac:	ec41 0b10 	vmov	d0, r0, r1
 80107b0:	f004 ff0a 	bl	80155c8 <ceil>
 80107b4:	ec51 0b10 	vmov	r0, r1, d0
 80107b8:	f7f0 f9f6 	bl	8000ba8 <__aeabi_d2f>
 80107bc:	ee0e 0a10 	vmov	s28, r0
 80107c0:	f7fc bc70 	b.w	800d0a4 <kalman_3gyro.constprop.0+0x744>
 80107c4:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80107c8:	ee17 0a90 	vmov	r0, s15
 80107cc:	f7ef febc 	bl	8000548 <__aeabi_f2d>
 80107d0:	ec41 0b10 	vmov	d0, r0, r1
 80107d4:	f004 fef8 	bl	80155c8 <ceil>
 80107d8:	ec51 0b10 	vmov	r0, r1, d0
 80107dc:	f7f0 f9e4 	bl	8000ba8 <__aeabi_d2f>
 80107e0:	ee0d 0a90 	vmov	s27, r0
 80107e4:	f7fc bc81 	b.w	800d0ea <kalman_3gyro.constprop.0+0x78a>
 80107e8:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 80107ec:	ee17 0a90 	vmov	r0, s15
 80107f0:	f7ef feaa 	bl	8000548 <__aeabi_f2d>
 80107f4:	ec41 0b10 	vmov	d0, r0, r1
 80107f8:	f004 fee6 	bl	80155c8 <ceil>
 80107fc:	ec51 0b10 	vmov	r0, r1, d0
 8010800:	f7f0 f9d2 	bl	8000ba8 <__aeabi_d2f>
 8010804:	ee0d 0a90 	vmov	s27, r0
 8010808:	f7fc bcd5 	b.w	800d1b6 <kalman_3gyro.constprop.0+0x856>
 801080c:	ee7b 7a67 	vsub.f32	s15, s22, s15
 8010810:	ee17 0a90 	vmov	r0, s15
 8010814:	f7ef fe98 	bl	8000548 <__aeabi_f2d>
 8010818:	ec41 0b10 	vmov	d0, r0, r1
 801081c:	f004 fed4 	bl	80155c8 <ceil>
 8010820:	ec51 0b10 	vmov	r0, r1, d0
 8010824:	f7f0 f9c0 	bl	8000ba8 <__aeabi_d2f>
 8010828:	ee0b 0a10 	vmov	s22, r0
 801082c:	f7fc bce6 	b.w	800d1fc <kalman_3gyro.constprop.0+0x89c>
 8010830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010834:	f6fd addf 	blt.w	800e3f6 <kalman_3gyro.constprop.0+0x1a96>
 8010838:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80108f0 <kalman_3gyro.constprop.0+0x3f90>
 801083c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010844:	f140 8283 	bpl.w	8010d4e <kalman_3gyro.constprop.0+0x43ee>
 8010848:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80108fc <kalman_3gyro.constprop.0+0x3f9c>
 801084c:	eddf 4a2c 	vldr	s9, [pc, #176]	; 8010900 <kalman_3gyro.constprop.0+0x3fa0>
 8010850:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8010904 <kalman_3gyro.constprop.0+0x3fa4>
 8010854:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010858:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801085c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010860:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010864:	f7fd bdd1 	b.w	800e40a <kalman_3gyro.constprop.0+0x1aaa>
 8010868:	ee78 7a67 	vsub.f32	s15, s16, s15
 801086c:	ee17 0a90 	vmov	r0, s15
 8010870:	f7ef fe6a 	bl	8000548 <__aeabi_f2d>
 8010874:	ec41 0b10 	vmov	d0, r0, r1
 8010878:	f004 fea6 	bl	80155c8 <ceil>
 801087c:	ec51 0b10 	vmov	r0, r1, d0
 8010880:	f7f0 f992 	bl	8000ba8 <__aeabi_d2f>
 8010884:	ee08 0a10 	vmov	s16, r0
 8010888:	f7fc bbe9 	b.w	800d05e <kalman_3gyro.constprop.0+0x6fe>
 801088c:	3eb33333 	.word	0x3eb33333
 8010890:	3ee66666 	.word	0x3ee66666
 8010894:	3f866666 	.word	0x3f866666
 8010898:	3ecccccd 	.word	0x3ecccccd
 801089c:	3f933333 	.word	0x3f933333
 80108a0:	3dcccccd 	.word	0x3dcccccd
 80108a4:	3e4ccccd 	.word	0x3e4ccccd
 80108a8:	3e99999a 	.word	0x3e99999a
 80108ac:	3f8ccccd 	.word	0x3f8ccccd
 80108b0:	3f4ccccd 	.word	0x3f4ccccd
 80108b4:	3ebd70a4 	.word	0x3ebd70a4
 80108b8:	3f666666 	.word	0x3f666666
 80108bc:	40a00000 	.word	0x40a00000
 80108c0:	3f99999a 	.word	0x3f99999a
 80108c4:	3f19999a 	.word	0x3f19999a
 80108c8:	3fb9999a 	.word	0x3fb9999a
 80108cc:	3fe66666 	.word	0x3fe66666
 80108d0:	3f333333 	.word	0x3f333333
 80108d4:	3fa66666 	.word	0x3fa66666
 80108d8:	3fcccccd 	.word	0x3fcccccd
 80108dc:	40200000 	.word	0x40200000
 80108e0:	40400000 	.word	0x40400000
 80108e4:	bf666666 	.word	0xbf666666
 80108e8:	391d4951 	.word	0x391d4951
 80108ec:	383cbe62 	.word	0x383cbe62
 80108f0:	3c75c28f 	.word	0x3c75c28f
 80108f4:	469c3e00 	.word	0x469c3e00
 80108f8:	43168000 	.word	0x43168000
 80108fc:	3c23d70a 	.word	0x3c23d70a
 8010900:	3f19999a 	.word	0x3f19999a
 8010904:	43480000 	.word	0x43480000
 8010908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801090c:	ee3a aa47 	vsub.f32	s20, s20, s14
 8010910:	eef0 7aca 	vabs.f32	s15, s20
 8010914:	ee2a aa0a 	vmul.f32	s20, s20, s20
 8010918:	eef4 7ae6 	vcmpe.f32	s15, s13
 801091c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010920:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010924:	bfb8      	it	lt
 8010926:	eef0 7a66 	vmovlt.f32	s15, s13
 801092a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801092e:	edcd 7a79 	vstr	s15, [sp, #484]	; 0x1e4
 8010932:	f77d af5b 	ble.w	800e7ec <kalman_3gyro.constprop.0+0x1e8c>
 8010936:	eddd 7a72 	vldr	s15, [sp, #456]	; 0x1c8
 801093a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801093e:	eeb4 aac7 	vcmpe.f32	s20, s14
 8010942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010946:	f77d af51 	ble.w	800e7ec <kalman_3gyro.constprop.0+0x1e8c>
 801094a:	eddd 6a73 	vldr	s13, [sp, #460]	; 0x1cc
 801094e:	ed9d 7a74 	vldr	s14, [sp, #464]	; 0x1d0
 8010952:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010956:	ee66 6a8a 	vmul.f32	s13, s13, s20
 801095a:	ee27 aa0a 	vmul.f32	s20, s14, s20
 801095e:	edcd 7a72 	vstr	s15, [sp, #456]	; 0x1c8
 8010962:	edcd 6a73 	vstr	s13, [sp, #460]	; 0x1cc
 8010966:	ed8d aa74 	vstr	s20, [sp, #464]	; 0x1d0
 801096a:	f7fd bf3f 	b.w	800e7ec <kalman_3gyro.constprop.0+0x1e8c>
 801096e:	f89d 20a8 	ldrb.w	r2, [sp, #168]	; 0xa8
 8010972:	2a01      	cmp	r2, #1
 8010974:	d002      	beq.n	801097c <kalman_3gyro.constprop.0+0x401c>
 8010976:	2b01      	cmp	r3, #1
 8010978:	f47d af1e 	bne.w	800e7b8 <kalman_3gyro.constprop.0+0x1e58>
 801097c:	eddd 7a13 	vldr	s15, [sp, #76]	; 0x4c
 8010980:	eef4 7ac3 	vcmpe.f32	s15, s6
 8010984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010988:	bfa8      	it	ge
 801098a:	eeb0 3a67 	vmovge.f32	s6, s15
 801098e:	ed8d 3a6f 	vstr	s6, [sp, #444]	; 0x1bc
 8010992:	ed8d 3a70 	vstr	s6, [sp, #448]	; 0x1c0
 8010996:	ed8d 3a71 	vstr	s6, [sp, #452]	; 0x1c4
 801099a:	f7fd bf0d 	b.w	800e7b8 <kalman_3gyro.constprop.0+0x1e58>
 801099e:	ee78 7a67 	vsub.f32	s15, s16, s15
 80109a2:	ee17 0a90 	vmov	r0, s15
 80109a6:	f7ef fdcf 	bl	8000548 <__aeabi_f2d>
 80109aa:	ec41 0b10 	vmov	d0, r0, r1
 80109ae:	f004 fe0b 	bl	80155c8 <ceil>
 80109b2:	ec51 0b10 	vmov	r0, r1, d0
 80109b6:	f7f0 f8f7 	bl	8000ba8 <__aeabi_d2f>
 80109ba:	ee08 0a10 	vmov	s16, r0
 80109be:	f7fc bc40 	b.w	800d242 <kalman_3gyro.constprop.0+0x8e2>
 80109c2:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80109c6:	ee17 0a90 	vmov	r0, s15
 80109ca:	f7ef fdbd 	bl	8000548 <__aeabi_f2d>
 80109ce:	ec41 0b10 	vmov	d0, r0, r1
 80109d2:	f004 fdf9 	bl	80155c8 <ceil>
 80109d6:	ec51 0b10 	vmov	r0, r1, d0
 80109da:	f7f0 f8e5 	bl	8000ba8 <__aeabi_d2f>
 80109de:	ee0b 0a10 	vmov	s22, r0
 80109e2:	f7fc bcb7 	b.w	800d354 <kalman_3gyro.constprop.0+0x9f4>
 80109e6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80109ea:	ee17 0a90 	vmov	r0, s15
 80109ee:	f7ef fdab 	bl	8000548 <__aeabi_f2d>
 80109f2:	ec41 0b10 	vmov	d0, r0, r1
 80109f6:	f004 fde7 	bl	80155c8 <ceil>
 80109fa:	ec51 0b10 	vmov	r0, r1, d0
 80109fe:	f7f0 f8d3 	bl	8000ba8 <__aeabi_d2f>
 8010a02:	ee08 0a10 	vmov	s16, r0
 8010a06:	f7fc bcc8 	b.w	800d39a <kalman_3gyro.constprop.0+0xa3a>
 8010a0a:	ee7d 7ae7 	vsub.f32	s15, s27, s15
 8010a0e:	ee17 0a90 	vmov	r0, s15
 8010a12:	f7ef fd99 	bl	8000548 <__aeabi_f2d>
 8010a16:	ec41 0b10 	vmov	d0, r0, r1
 8010a1a:	f004 fdd5 	bl	80155c8 <ceil>
 8010a1e:	ec51 0b10 	vmov	r0, r1, d0
 8010a22:	f7f0 f8c1 	bl	8000ba8 <__aeabi_d2f>
 8010a26:	ee0d 0a90 	vmov	s27, r0
 8010a2a:	f7fc bc70 	b.w	800d30e <kalman_3gyro.constprop.0+0x9ae>
 8010a2e:	ed9d 7a15 	vldr	s14, [sp, #84]	; 0x54
 8010a32:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a3a:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8010a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a42:	f77d af02 	ble.w	800e84a <kalman_3gyro.constprop.0+0x1eea>
 8010a46:	ed9d 7a16 	vldr	s14, [sp, #88]	; 0x58
 8010a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a4e:	eef4 7aec 	vcmpe.f32	s15, s25
 8010a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a56:	f77d aef8 	ble.w	800e84a <kalman_3gyro.constprop.0+0x1eea>
 8010a5a:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010a5e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010a62:	eef4 7acd 	vcmpe.f32	s15, s26
 8010a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6a:	f140 8711 	bpl.w	8011890 <kalman_3gyro.constprop.0+0x4f30>
 8010a6e:	3303      	adds	r3, #3
 8010a70:	f7ff ba35 	b.w	800fede <kalman_3gyro.constprop.0+0x357e>
 8010a74:	460b      	mov	r3, r1
 8010a76:	f8db 11bc 	ldr.w	r1, [fp, #444]	; 0x1bc
 8010a7a:	f8db 21c0 	ldr.w	r2, [fp, #448]	; 0x1c0
 8010a7e:	9181      	str	r1, [sp, #516]	; 0x204
 8010a80:	9282      	str	r2, [sp, #520]	; 0x208
 8010a82:	f8db 11c4 	ldr.w	r1, [fp, #452]	; 0x1c4
 8010a86:	9183      	str	r1, [sp, #524]	; 0x20c
 8010a88:	2200      	movs	r2, #0
 8010a8a:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8010a8e:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8010a92:	f7fe baa8 	b.w	800efe6 <kalman_3gyro.constprop.0+0x2686>
 8010a96:	a936      	add	r1, sp, #216	; 0xd8
 8010a98:	a854      	add	r0, sp, #336	; 0x150
 8010a9a:	f7fa ff85 	bl	800b9a8 <b_dcm2q>
 8010a9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	f8cb 21cc 	str.w	r2, [fp, #460]	; 0x1cc
 8010aa8:	ed8b ca72 	vstr	s24, [fp, #456]	; 0x1c8
 8010aac:	f44f 72a2 	mov.w	r2, #324	; 0x144
 8010ab0:	f50b 70ea 	add.w	r0, fp, #468	; 0x1d4
 8010ab4:	f006 fcd4 	bl	8017460 <memset>
 8010ab8:	4bd8      	ldr	r3, [pc, #864]	; (8010e1c <kalman_3gyro.constprop.0+0x44bc>)
 8010aba:	f8cb 31d4 	str.w	r3, [fp, #468]	; 0x1d4
 8010abe:	f8cb 31fc 	str.w	r3, [fp, #508]	; 0x1fc
 8010ac2:	f8cb 3224 	str.w	r3, [fp, #548]	; 0x224
 8010ac6:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8010aca:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8010ace:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 8010ad2:	f8cb 32c4 	str.w	r3, [fp, #708]	; 0x2c4
 8010ad6:	f8cb 32ec 	str.w	r3, [fp, #748]	; 0x2ec
 8010ada:	f8cb 3314 	str.w	r3, [fp, #788]	; 0x314
 8010ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8010ae0:	781a      	ldrb	r2, [r3, #0]
 8010ae2:	ee07 2a90 	vmov	s15, r2
 8010ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010aea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af2:	f040 84dc 	bne.w	80114ae <kalman_3gyro.constprop.0+0x4b4e>
 8010af6:	eeb0 7a4c 	vmov.f32	s14, s24
 8010afa:	2300      	movs	r3, #0
 8010afc:	f88b 3000 	strb.w	r3, [fp]
 8010b00:	eddb ea02 	vldr	s29, [fp, #8]
 8010b04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010b08:	2301      	movs	r3, #1
 8010b0a:	f7fd bb8d 	b.w	800e228 <kalman_3gyro.constprop.0+0x18c8>
 8010b0e:	eddb 4a4e 	vldr	s9, [fp, #312]	; 0x138
 8010b12:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b1a:	f340 85da 	ble.w	80116d2 <kalman_3gyro.constprop.0+0x4d72>
 8010b1e:	ed9b 4a4d 	vldr	s8, [fp, #308]	; 0x134
 8010b22:	ed9b 7a4f 	vldr	s14, [fp, #316]	; 0x13c
 8010b26:	ee78 3a62 	vsub.f32	s7, s16, s5
 8010b2a:	ee37 7a44 	vsub.f32	s14, s14, s8
 8010b2e:	ee74 4ae2 	vsub.f32	s9, s9, s5
 8010b32:	ee27 7a23 	vmul.f32	s14, s14, s7
 8010b36:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010b3a:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010b3e:	ed9b 7a50 	vldr	s14, [fp, #320]	; 0x140
 8010b42:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b4a:	f63d a94b 	bhi.w	800dde4 <kalman_3gyro.constprop.0+0x1484>
 8010b4e:	eddb 4a52 	vldr	s9, [fp, #328]	; 0x148
 8010b52:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5a:	f340 84bc 	ble.w	80114d6 <kalman_3gyro.constprop.0+0x4b76>
 8010b5e:	eddb 3a51 	vldr	s7, [fp, #324]	; 0x144
 8010b62:	ed9b 4a53 	vldr	s8, [fp, #332]	; 0x14c
 8010b66:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010b6a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010b6e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010b72:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010b76:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010b7a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010b7e:	ed9b 7a54 	vldr	s14, [fp, #336]	; 0x150
 8010b82:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b8a:	f63d a94b 	bhi.w	800de24 <kalman_3gyro.constprop.0+0x14c4>
 8010b8e:	eddb 4a56 	vldr	s9, [fp, #344]	; 0x158
 8010b92:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b9a:	f340 84a8 	ble.w	80114ee <kalman_3gyro.constprop.0+0x4b8e>
 8010b9e:	eddb 3a55 	vldr	s7, [fp, #340]	; 0x154
 8010ba2:	ed9b 4a57 	vldr	s8, [fp, #348]	; 0x15c
 8010ba6:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010baa:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010bae:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010bb2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010bb6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010bba:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010bbe:	ed9b 7a58 	vldr	s14, [fp, #352]	; 0x160
 8010bc2:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bca:	f63d a94b 	bhi.w	800de64 <kalman_3gyro.constprop.0+0x1504>
 8010bce:	eddb 4a5a 	vldr	s9, [fp, #360]	; 0x168
 8010bd2:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bda:	f340 8490 	ble.w	80114fe <kalman_3gyro.constprop.0+0x4b9e>
 8010bde:	eddb 3a59 	vldr	s7, [fp, #356]	; 0x164
 8010be2:	ed9b 4a5b 	vldr	s8, [fp, #364]	; 0x16c
 8010be6:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010bea:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010bee:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010bf2:	ee24 4a03 	vmul.f32	s8, s8, s6
 8010bf6:	ee84 ea07 	vdiv.f32	s28, s8, s14
 8010bfa:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010bfe:	ed9b 7a5c 	vldr	s14, [fp, #368]	; 0x170
 8010c02:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0a:	f6fd a94b 	blt.w	800dea4 <kalman_3gyro.constprop.0+0x1544>
 8010c0e:	eddb 4a5e 	vldr	s9, [fp, #376]	; 0x178
 8010c12:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1a:	f57d a94b 	bpl.w	800deb4 <kalman_3gyro.constprop.0+0x1554>
 8010c1e:	eddb 3a5d 	vldr	s7, [fp, #372]	; 0x174
 8010c22:	ed9b 4a5f 	vldr	s8, [fp, #380]	; 0x17c
 8010c26:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010c2a:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010c2e:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010c32:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010c36:	ee87 ea24 	vdiv.f32	s28, s14, s9
 8010c3a:	ee3e ea23 	vadd.f32	s28, s28, s7
 8010c3e:	ed9b 7a60 	vldr	s14, [fp, #384]	; 0x180
 8010c42:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c4a:	f6fd a94b 	blt.w	800dee4 <kalman_3gyro.constprop.0+0x1584>
 8010c4e:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c56:	f57d a945 	bpl.w	800dee4 <kalman_3gyro.constprop.0+0x1584>
 8010c5a:	ed9b 4a61 	vldr	s8, [fp, #388]	; 0x184
 8010c5e:	eddb 4a63 	vldr	s9, [fp, #396]	; 0x18c
 8010c62:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010c66:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010c6a:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010c6e:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010c72:	ee85 ea07 	vdiv.f32	s28, s10, s14
 8010c76:	ee3e ea04 	vadd.f32	s28, s28, s8
 8010c7a:	f7fd b933 	b.w	800dee4 <kalman_3gyro.constprop.0+0x1584>
 8010c7e:	eddf 6a68 	vldr	s13, [pc, #416]	; 8010e20 <kalman_3gyro.constprop.0+0x44c0>
 8010c82:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c8a:	f57d ac56 	bpl.w	800e53a <kalman_3gyro.constprop.0+0x1bda>
 8010c8e:	eddf 3a65 	vldr	s7, [pc, #404]	; 8010e24 <kalman_3gyro.constprop.0+0x44c4>
 8010c92:	eddf 2a65 	vldr	s5, [pc, #404]	; 8010e28 <kalman_3gyro.constprop.0+0x44c8>
 8010c96:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8010e2c <kalman_3gyro.constprop.0+0x44cc>
 8010c9a:	eddf 6a65 	vldr	s13, [pc, #404]	; 8010e30 <kalman_3gyro.constprop.0+0x44d0>
 8010c9e:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010ca2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010ca6:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010caa:	eeb0 ca66 	vmov.f32	s24, s13
 8010cae:	eddf 6a61 	vldr	s13, [pc, #388]	; 8010e34 <kalman_3gyro.constprop.0+0x44d4>
 8010cb2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cba:	f6fd ac56 	blt.w	800e56a <kalman_3gyro.constprop.0+0x1c0a>
 8010cbe:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010e38 <kalman_3gyro.constprop.0+0x44d8>
 8010cc2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cca:	f57d ac56 	bpl.w	800e57a <kalman_3gyro.constprop.0+0x1c1a>
 8010cce:	eddf 3a59 	vldr	s7, [pc, #356]	; 8010e34 <kalman_3gyro.constprop.0+0x44d4>
 8010cd2:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010cd6:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8010cda:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8010cde:	eeb3 3a04 	vmov.f32	s6, #52	; 0x41a00000  20.0
 8010ce2:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8010ce6:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010cea:	eeb0 ca66 	vmov.f32	s24, s13
 8010cee:	eddf 6a53 	vldr	s13, [pc, #332]	; 8010e3c <kalman_3gyro.constprop.0+0x44dc>
 8010cf2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfa:	f6fd ac56 	blt.w	800e5aa <kalman_3gyro.constprop.0+0x1c4a>
 8010cfe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010d02:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0a:	f57d ac56 	bpl.w	800e5ba <kalman_3gyro.constprop.0+0x1c5a>
 8010d0e:	eddf 3a4b 	vldr	s7, [pc, #300]	; 8010e3c <kalman_3gyro.constprop.0+0x44dc>
 8010d12:	eddf 2a4b 	vldr	s5, [pc, #300]	; 8010e40 <kalman_3gyro.constprop.0+0x44e0>
 8010d16:	ed9f 3a4b 	vldr	s6, [pc, #300]	; 8010e44 <kalman_3gyro.constprop.0+0x44e4>
 8010d1a:	ee77 3ae3 	vsub.f32	s7, s15, s7
 8010d1e:	eef2 6a05 	vmov.f32	s13, #37	; 0x41280000  10.5
 8010d22:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8010d26:	eee3 6a83 	vfma.f32	s13, s7, s6
 8010d2a:	eeb0 ca66 	vmov.f32	s24, s13
 8010d2e:	e4f4      	b.n	801071a <kalman_3gyro.constprop.0+0x3dba>
 8010d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d34:	f57d abe1 	bpl.w	800e4fa <kalman_3gyro.constprop.0+0x1b9a>
 8010d38:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8010e24 <kalman_3gyro.constprop.0+0x44c4>
 8010d3c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d44:	da9b      	bge.n	8010c7e <kalman_3gyro.constprop.0+0x431e>
 8010d46:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8010d4a:	f7fd bbee 	b.w	800e52a <kalman_3gyro.constprop.0+0x1bca>
 8010d4e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010e20 <kalman_3gyro.constprop.0+0x44c0>
 8010d52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d5a:	f57d ab5e 	bpl.w	800e41a <kalman_3gyro.constprop.0+0x1aba>
 8010d5e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8010e24 <kalman_3gyro.constprop.0+0x44c4>
 8010d62:	eddf 4a39 	vldr	s9, [pc, #228]	; 8010e48 <kalman_3gyro.constprop.0+0x44e8>
 8010d66:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8010e2c <kalman_3gyro.constprop.0+0x44cc>
 8010d6a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010e4c <kalman_3gyro.constprop.0+0x44ec>
 8010d6e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010d72:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010d76:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010d7a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8010e34 <kalman_3gyro.constprop.0+0x44d4>
 8010d7e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d86:	f6fd ab5e 	blt.w	800e446 <kalman_3gyro.constprop.0+0x1ae6>
 8010d8a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8010e38 <kalman_3gyro.constprop.0+0x44d8>
 8010d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d96:	f57d ab5e 	bpl.w	800e456 <kalman_3gyro.constprop.0+0x1af6>
 8010d9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010e34 <kalman_3gyro.constprop.0+0x44d4>
 8010d9e:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010da2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8010da6:	ee66 6a87 	vmul.f32	s13, s13, s14
 8010daa:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 8010dae:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8010db2:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010db6:	eddf 6a21 	vldr	s13, [pc, #132]	; 8010e3c <kalman_3gyro.constprop.0+0x44dc>
 8010dba:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dc2:	f6fd ab5e 	blt.w	800e482 <kalman_3gyro.constprop.0+0x1b22>
 8010dc6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8010dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd2:	f57d ab5d 	bpl.w	800e490 <kalman_3gyro.constprop.0+0x1b30>
 8010dd6:	eddf 6a19 	vldr	s13, [pc, #100]	; 8010e3c <kalman_3gyro.constprop.0+0x44dc>
 8010dda:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8010e50 <kalman_3gyro.constprop.0+0x44f0>
 8010dde:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8010e44 <kalman_3gyro.constprop.0+0x44e4>
 8010de2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8010e54 <kalman_3gyro.constprop.0+0x44f4>
 8010de6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010dea:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8010dee:	eea6 7a86 	vfma.f32	s14, s13, s12
 8010df2:	f7fd bb5b 	b.w	800e4ac <kalman_3gyro.constprop.0+0x1b4c>
 8010df6:	9b01      	ldr	r3, [sp, #4]
 8010df8:	e63d      	b.n	8010a76 <kalman_3gyro.constprop.0+0x4116>
 8010dfa:	ed9b 7a32 	vldr	s14, [fp, #200]	; 0xc8
 8010dfe:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e06:	da2b      	bge.n	8010e60 <kalman_3gyro.constprop.0+0x4500>
 8010e08:	ed9f ba13 	vldr	s22, [pc, #76]	; 8010e58 <kalman_3gyro.constprop.0+0x44f8>
 8010e0c:	ed9b 7a34 	vldr	s14, [fp, #208]	; 0xd0
 8010e10:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e18:	db3a      	blt.n	8010e90 <kalman_3gyro.constprop.0+0x4530>
 8010e1a:	e386      	b.n	801152a <kalman_3gyro.constprop.0+0x4bca>
 8010e1c:	40a00000 	.word	0x40a00000
 8010e20:	3cf5c28f 	.word	0x3cf5c28f
 8010e24:	3c75c28f 	.word	0x3c75c28f
 8010e28:	3dccccd0 	.word	0x3dccccd0
 8010e2c:	42855556 	.word	0x42855556
 8010e30:	3f866666 	.word	0x3f866666
 8010e34:	3d4ccccd 	.word	0x3d4ccccd
 8010e38:	3dcccccd 	.word	0x3dcccccd
 8010e3c:	3e4ccccd 	.word	0x3e4ccccd
 8010e40:	42200000 	.word	0x42200000
 8010e44:	40555555 	.word	0x40555555
 8010e48:	3ecccccc 	.word	0x3ecccccc
 8010e4c:	3fcccccd 	.word	0x3fcccccd
 8010e50:	43f00000 	.word	0x43f00000
 8010e54:	42ee0000 	.word	0x42ee0000
 8010e58:	00000000 	.word	0x00000000
 8010e5c:	eeb0 7a64 	vmov.f32	s14, s9
 8010e60:	eddb 4a34 	vldr	s9, [fp, #208]	; 0xd0
 8010e64:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e6c:	f140 8359 	bpl.w	8011522 <kalman_3gyro.constprop.0+0x4bc2>
 8010e70:	eddb 3a33 	vldr	s7, [fp, #204]	; 0xcc
 8010e74:	ed9b 4a35 	vldr	s8, [fp, #212]	; 0xd4
 8010e78:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010e7c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010e80:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010e84:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010e88:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010e8c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010e90:	ed9b 7a36 	vldr	s14, [fp, #216]	; 0xd8
 8010e94:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e9c:	f2c0 835d 	blt.w	801155a <kalman_3gyro.constprop.0+0x4bfa>
 8010ea0:	eddb 4a38 	vldr	s9, [fp, #224]	; 0xe0
 8010ea4:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eac:	f140 8402 	bpl.w	80116b4 <kalman_3gyro.constprop.0+0x4d54>
 8010eb0:	eddb 3a37 	vldr	s7, [fp, #220]	; 0xdc
 8010eb4:	ed9b 4a39 	vldr	s8, [fp, #228]	; 0xe4
 8010eb8:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010ebc:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010ec0:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010ec4:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010ec8:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010ecc:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010ed0:	ed9b 7a3a 	vldr	s14, [fp, #232]	; 0xe8
 8010ed4:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010edc:	f200 835d 	bhi.w	801159a <kalman_3gyro.constprop.0+0x4c3a>
 8010ee0:	eddb 4a3c 	vldr	s9, [fp, #240]	; 0xf0
 8010ee4:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eec:	f340 83e8 	ble.w	80116c0 <kalman_3gyro.constprop.0+0x4d60>
 8010ef0:	eddb 3a3b 	vldr	s7, [fp, #236]	; 0xec
 8010ef4:	ed9b 4a3d 	vldr	s8, [fp, #244]	; 0xf4
 8010ef8:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010efc:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f00:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f04:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010f08:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010f0c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010f10:	ed9b 7a3e 	vldr	s14, [fp, #248]	; 0xf8
 8010f14:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8010f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f1c:	f200 835d 	bhi.w	80115da <kalman_3gyro.constprop.0+0x4c7a>
 8010f20:	eddb 4a40 	vldr	s9, [fp, #256]	; 0x100
 8010f24:	eef4 4ac8 	vcmpe.f32	s9, s16
 8010f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f2c:	f340 83b4 	ble.w	8011698 <kalman_3gyro.constprop.0+0x4d38>
 8010f30:	eddb 3a3f 	vldr	s7, [fp, #252]	; 0xfc
 8010f34:	ed9b 4a41 	vldr	s8, [fp, #260]	; 0x104
 8010f38:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f3c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f40:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8010f44:	ee64 4a03 	vmul.f32	s9, s8, s6
 8010f48:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8010f4c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010f50:	ed9b 7a42 	vldr	s14, [fp, #264]	; 0x108
 8010f54:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f5c:	f2c0 835c 	blt.w	8011618 <kalman_3gyro.constprop.0+0x4cb8>
 8010f60:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 8010f64:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8010f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6c:	f140 835c 	bpl.w	8011628 <kalman_3gyro.constprop.0+0x4cc8>
 8010f70:	eddb 3a43 	vldr	s7, [fp, #268]	; 0x10c
 8010f74:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 8010f78:	ee38 3a47 	vsub.f32	s6, s16, s14
 8010f7c:	ee34 4a63 	vsub.f32	s8, s8, s7
 8010f80:	ee74 4ac7 	vsub.f32	s9, s9, s14
 8010f84:	ee24 7a03 	vmul.f32	s14, s8, s6
 8010f88:	ee87 ba24 	vdiv.f32	s22, s14, s9
 8010f8c:	ee3b ba23 	vadd.f32	s22, s22, s7
 8010f90:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 8010f94:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8010f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f9c:	f6fc aeda 	blt.w	800dd54 <kalman_3gyro.constprop.0+0x13f4>
 8010fa0:	eeb4 8ac5 	vcmpe.f32	s16, s10
 8010fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa8:	f57c aed4 	bpl.w	800dd54 <kalman_3gyro.constprop.0+0x13f4>
 8010fac:	ed9b 4a47 	vldr	s8, [fp, #284]	; 0x11c
 8010fb0:	eddb 4a49 	vldr	s9, [fp, #292]	; 0x124
 8010fb4:	ee78 3a47 	vsub.f32	s7, s16, s14
 8010fb8:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8010fbc:	ee35 7a47 	vsub.f32	s14, s10, s14
 8010fc0:	ee24 5aa3 	vmul.f32	s10, s9, s7
 8010fc4:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8010fc8:	ee3b ba04 	vadd.f32	s22, s22, s8
 8010fcc:	f7fc bec2 	b.w	800dd54 <kalman_3gyro.constprop.0+0x13f4>
 8010fd0:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 8010fd4:	eef4 7acd 	vcmpe.f32	s15, s26
 8010fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fdc:	dd2c      	ble.n	8011038 <kalman_3gyro.constprop.0+0x46d8>
 8010fde:	eddd 7a15 	vldr	s15, [sp, #84]	; 0x54
 8010fe2:	eef4 7aeb 	vcmpe.f32	s15, s23
 8010fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fea:	dd25      	ble.n	8011038 <kalman_3gyro.constprop.0+0x46d8>
 8010fec:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8010ff0:	eef4 7aec 	vcmpe.f32	s15, s25
 8010ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ff8:	dd1e      	ble.n	8011038 <kalman_3gyro.constprop.0+0x46d8>
 8010ffa:	eddd 5a03 	vldr	s11, [sp, #12]
 8010ffe:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011002:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100a:	d515      	bpl.n	8011038 <kalman_3gyro.constprop.0+0x46d8>
 801100c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011010:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011014:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011020:	d50a      	bpl.n	8011038 <kalman_3gyro.constprop.0+0x46d8>
 8011022:	2300      	movs	r3, #0
 8011024:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011028:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801102c:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011030:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011034:	f7fd bf4c 	b.w	800eed0 <kalman_3gyro.constprop.0+0x2570>
 8011038:	eddd 7a41 	vldr	s15, [sp, #260]	; 0x104
 801103c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011044:	dd0b      	ble.n	801105e <kalman_3gyro.constprop.0+0x46fe>
 8011046:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 801104a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801104e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011052:	f100 843f 	bmi.w	80118d4 <kalman_3gyro.constprop.0+0x4f74>
 8011056:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 801105a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801105e:	2300      	movs	r3, #0
 8011060:	f89b 21a4 	ldrb.w	r2, [fp, #420]	; 0x1a4
 8011064:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011068:	f7fd bf32 	b.w	800eed0 <kalman_3gyro.constprop.0+0x2570>
 801106c:	2301      	movs	r3, #1
 801106e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011072:	f88b 31a4 	strb.w	r3, [fp, #420]	; 0x1a4
 8011076:	f50b 62c3 	add.w	r2, fp, #1560	; 0x618
 801107a:	f50b 63f1 	add.w	r3, fp, #1928	; 0x788
 801107e:	edd2 5a00 	vldr	s11, [r2]
 8011082:	ed93 7a00 	vldr	s14, [r3]
 8011086:	f20b 6214 	addw	r2, fp, #1556	; 0x614
 801108a:	f20b 7384 	addw	r3, fp, #1924	; 0x784
 801108e:	ed92 5a00 	vldr	s10, [r2]
 8011092:	edd3 6a00 	vldr	s13, [r3]
 8011096:	ee25 4aa5 	vmul.f32	s8, s11, s11
 801109a:	ee67 4a07 	vmul.f32	s9, s14, s14
 801109e:	eea5 4a05 	vfma.f32	s8, s10, s10
 80110a2:	f20b 738c 	addw	r3, fp, #1932	; 0x78c
 80110a6:	f20b 611c 	addw	r1, fp, #1564	; 0x61c
 80110aa:	eee6 4aa6 	vfma.f32	s9, s13, s13
 80110ae:	aa5d      	add	r2, sp, #372	; 0x174
 80110b0:	a833      	add	r0, sp, #204	; 0xcc
 80110b2:	ed91 6a00 	vldr	s12, [r1]
 80110b6:	edd3 7a00 	vldr	s15, [r3]
 80110ba:	eea6 4a06 	vfma.f32	s8, s12, s12
 80110be:	a92d      	add	r1, sp, #180	; 0xb4
 80110c0:	ad5d      	add	r5, sp, #372	; 0x174
 80110c2:	eee7 4aa7 	vfma.f32	s9, s15, s15
 80110c6:	ac66      	add	r4, sp, #408	; 0x198
 80110c8:	eef1 2ac4 	vsqrt.f32	s5, s8
 80110cc:	eeb1 3ae4 	vsqrt.f32	s6, s9
 80110d0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80110d4:	ee83 4aa2 	vdiv.f32	s8, s7, s5
 80110d8:	eec3 4a83 	vdiv.f32	s9, s7, s6
 80110dc:	ee25 5a04 	vmul.f32	s10, s10, s8
 80110e0:	ee27 7a24 	vmul.f32	s14, s14, s9
 80110e4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80110e8:	ee65 5a84 	vmul.f32	s11, s11, s8
 80110ec:	ee26 6a04 	vmul.f32	s12, s12, s8
 80110f0:	ee66 6aa4 	vmul.f32	s13, s13, s9
 80110f4:	ed8d 7a34 	vstr	s14, [sp, #208]	; 0xd0
 80110f8:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 80110fc:	ed8d 5a2d 	vstr	s10, [sp, #180]	; 0xb4
 8011100:	edcd 5a2e 	vstr	s11, [sp, #184]	; 0xb8
 8011104:	ed8d 6a2f 	vstr	s12, [sp, #188]	; 0xbc
 8011108:	edcd 6a33 	vstr	s13, [sp, #204]	; 0xcc
 801110c:	f7fa fbac 	bl	800b868 <getRotationMatrix>
 8011110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011118:	682e      	ldr	r6, [r5, #0]
 801111a:	6026      	str	r6, [r4, #0]
 801111c:	ad66      	add	r5, sp, #408	; 0x198
 801111e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011120:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 8011124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801112a:	eddd 7a66 	vldr	s15, [sp, #408]	; 0x198
 801112e:	ed9d 7a67 	vldr	s14, [sp, #412]	; 0x19c
 8011132:	6026      	str	r6, [r4, #0]
 8011134:	eef0 7ae7 	vabs.f32	s15, s15
 8011138:	eeb0 7ac7 	vabs.f32	s14, s14
 801113c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011144:	f100 81df 	bmi.w	8011506 <kalman_3gyro.constprop.0+0x4ba6>
 8011148:	2307      	movs	r3, #7
 801114a:	f04f 0c04 	mov.w	ip, #4
 801114e:	9305      	str	r3, [sp, #20]
 8011150:	2300      	movs	r3, #0
 8011152:	4662      	mov	r2, ip
 8011154:	2003      	movs	r0, #3
 8011156:	2706      	movs	r7, #6
 8011158:	f04f 0e01 	mov.w	lr, #1
 801115c:	9304      	str	r3, [sp, #16]
 801115e:	ed9d 7a68 	vldr	s14, [sp, #416]	; 0x1a0
 8011162:	eeb0 7ac7 	vabs.f32	s14, s14
 8011166:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801116a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116e:	f340 8296 	ble.w	801169e <kalman_3gyro.constprop.0+0x4d3e>
 8011172:	2306      	movs	r3, #6
 8011174:	930a      	str	r3, [sp, #40]	; 0x28
 8011176:	2307      	movs	r3, #7
 8011178:	9305      	str	r3, [sp, #20]
 801117a:	2300      	movs	r3, #0
 801117c:	2708      	movs	r7, #8
 801117e:	f04f 0c04 	mov.w	ip, #4
 8011182:	9302      	str	r3, [sp, #8]
 8011184:	2302      	movs	r3, #2
 8011186:	9707      	str	r7, [sp, #28]
 8011188:	4662      	mov	r2, ip
 801118a:	2005      	movs	r0, #5
 801118c:	f04f 0e01 	mov.w	lr, #1
 8011190:	9304      	str	r3, [sp, #16]
 8011192:	ab66      	add	r3, sp, #408	; 0x198
 8011194:	441a      	add	r2, r3
 8011196:	9b07      	ldr	r3, [sp, #28]
 8011198:	edd2 6a00 	vldr	s13, [r2]
 801119c:	9a02      	ldr	r2, [sp, #8]
 801119e:	a966      	add	r1, sp, #408	; 0x198
 80111a0:	440b      	add	r3, r1
 80111a2:	ed93 7a00 	vldr	s14, [r3]
 80111a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111aa:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80111ae:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80111b2:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 80111b6:	9a04      	ldr	r2, [sp, #16]
 80111b8:	eb03 038e 	add.w	r3, r3, lr, lsl #2
 80111bc:	f20d 44d4 	addw	r4, sp, #1236	; 0x4d4
 80111c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80111c4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80111c8:	0080      	lsls	r0, r0, #2
 80111ca:	900e      	str	r0, [sp, #56]	; 0x38
 80111cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111ce:	940d      	str	r4, [sp, #52]	; 0x34
 80111d0:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80111d4:	edc3 7a00 	vstr	s15, [r3]
 80111d8:	ed96 7a00 	vldr	s14, [r6]
 80111dc:	edd1 7a00 	vldr	s15, [r1]
 80111e0:	930c      	str	r3, [sp, #48]	; 0x30
 80111e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80111e6:	eb05 0480 	add.w	r4, r5, r0, lsl #2
 80111ea:	0080      	lsls	r0, r0, #2
 80111ec:	9006      	str	r0, [sp, #24]
 80111ee:	eb05 0087 	add.w	r0, r5, r7, lsl #2
 80111f2:	00bf      	lsls	r7, r7, #2
 80111f4:	9711      	str	r7, [sp, #68]	; 0x44
 80111f6:	9f05      	ldr	r7, [sp, #20]
 80111f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111fa:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80111fe:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 8011202:	eb05 0183 	add.w	r1, r5, r3, lsl #2
 8011206:	009b      	lsls	r3, r3, #2
 8011208:	9307      	str	r3, [sp, #28]
 801120a:	9b02      	ldr	r3, [sp, #8]
 801120c:	edc6 6a00 	vstr	s13, [r6]
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	930b      	str	r3, [sp, #44]	; 0x2c
 8011214:	9b04      	ldr	r3, [sp, #16]
 8011216:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8011218:	009b      	lsls	r3, r3, #2
 801121a:	9312      	str	r3, [sp, #72]	; 0x48
 801121c:	9b05      	ldr	r3, [sp, #20]
 801121e:	ed96 7a00 	vldr	s14, [r6]
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	9309      	str	r3, [sp, #36]	; 0x24
 8011226:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 801122a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801122c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8011230:	ed93 6a00 	vldr	s12, [r3]
 8011234:	edd2 7a00 	vldr	s15, [r2]
 8011238:	eee6 7a47 	vfms.f32	s15, s12, s14
 801123c:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8011240:	950a      	str	r5, [sp, #40]	; 0x28
 8011242:	ea4f 058c 	mov.w	r5, ip, lsl #2
 8011246:	edc2 7a00 	vstr	s15, [r2]
 801124a:	ed96 7a00 	vldr	s14, [r6]
 801124e:	edd4 7a00 	vldr	s15, [r4]
 8011252:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8011256:	edc4 7a00 	vstr	s15, [r4]
 801125a:	edd0 5a00 	vldr	s11, [r0]
 801125e:	ed97 7a00 	vldr	s14, [r7]
 8011262:	eea6 7a65 	vfms.f32	s14, s12, s11
 8011266:	eef0 7ae7 	vabs.f32	s15, s15
 801126a:	ed87 7a00 	vstr	s14, [r7]
 801126e:	ed90 6a00 	vldr	s12, [r0]
 8011272:	ed91 7a00 	vldr	s14, [r1]
 8011276:	eea6 7ac6 	vfms.f32	s14, s13, s12
 801127a:	ed81 7a00 	vstr	s14, [r1]
 801127e:	ed92 7a00 	vldr	s14, [r2]
 8011282:	eeb0 7ac7 	vabs.f32	s14, s14
 8011286:	eef4 7ac7 	vcmpe.f32	s15, s14
 801128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801128e:	dd12      	ble.n	80112b6 <kalman_3gyro.constprop.0+0x4956>
 8011290:	9a07      	ldr	r2, [sp, #28]
 8011292:	9f05      	ldr	r7, [sp, #20]
 8011294:	9806      	ldr	r0, [sp, #24]
 8011296:	9209      	str	r2, [sp, #36]	; 0x24
 8011298:	4673      	mov	r3, lr
 801129a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801129e:	9302      	str	r3, [sp, #8]
 80112a0:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	9206      	str	r2, [sp, #24]
 80112a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80112aa:	00ba      	lsls	r2, r7, #2
 80112ac:	ea4f 038e 	mov.w	r3, lr, lsl #2
 80112b0:	4605      	mov	r5, r0
 80112b2:	9207      	str	r2, [sp, #28]
 80112b4:	930a      	str	r3, [sp, #40]	; 0x28
 80112b6:	9b06      	ldr	r3, [sp, #24]
 80112b8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80112ba:	f20d 42d4 	addw	r2, sp, #1236	; 0x4d4
 80112be:	4413      	add	r3, r2
 80112c0:	461c      	mov	r4, r3
 80112c2:	462b      	mov	r3, r5
 80112c4:	4413      	add	r3, r2
 80112c6:	ed94 7a00 	vldr	s14, [r4]
 80112ca:	edd3 7a00 	vldr	s15, [r3]
 80112ce:	ee87 2a27 	vdiv.f32	s4, s14, s15
 80112d2:	4618      	mov	r0, r3
 80112d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112d6:	4413      	add	r3, r2
 80112d8:	461a      	mov	r2, r3
 80112da:	9b07      	ldr	r3, [sp, #28]
 80112dc:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 80112e0:	f20d 45d4 	addw	r5, sp, #1236	; 0x4d4
 80112e4:	440b      	add	r3, r1
 80112e6:	4619      	mov	r1, r3
 80112e8:	442e      	add	r6, r5
 80112ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112ec:	9607      	str	r6, [sp, #28]
 80112ee:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80112f0:	ed84 2a00 	vstr	s4, [r4]
 80112f4:	442b      	add	r3, r5
 80112f6:	f50d 67f9 	add.w	r7, sp, #1992	; 0x7c8
 80112fa:	9306      	str	r3, [sp, #24]
 80112fc:	19bb      	adds	r3, r7, r6
 80112fe:	ed92 7a00 	vldr	s14, [r2]
 8011302:	edd1 7a00 	vldr	s15, [r1]
 8011306:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011308:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801130c:	edd3 3a00 	vldr	s7, [r3]
 8011310:	f50d 63f9 	add.w	r3, sp, #1992	; 0x7c8
 8011314:	eee2 7a47 	vfms.f32	s15, s4, s14
 8011318:	4423      	add	r3, r4
 801131a:	f5a3 63cf 	sub.w	r3, r3, #1656	; 0x678
 801131e:	ed93 5a00 	vldr	s10, [r3]
 8011322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011324:	edc1 7a00 	vstr	s15, [r1]
 8011328:	462f      	mov	r7, r5
 801132a:	f50d 65f9 	add.w	r5, sp, #1992	; 0x7c8
 801132e:	4629      	mov	r1, r5
 8011330:	eb05 0c03 	add.w	ip, r5, r3
 8011334:	9d04      	ldr	r5, [sp, #16]
 8011336:	ed92 1a00 	vldr	s2, [r2]
 801133a:	4437      	add	r7, r6
 801133c:	9705      	str	r7, [sp, #20]
 801133e:	eb01 068e 	add.w	r6, r1, lr, lsl #2
 8011342:	eb01 0785 	add.w	r7, r1, r5, lsl #2
 8011346:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 801134a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801134e:	4419      	add	r1, r3
 8011350:	f20d 43d4 	addw	r3, sp, #1236	; 0x4d4
 8011354:	ee80 4aa7 	vdiv.f32	s8, s1, s15
 8011358:	191c      	adds	r4, r3, r4
 801135a:	9b02      	ldr	r3, [sp, #8]
 801135c:	9104      	str	r1, [sp, #16]
 801135e:	f50d 61f9 	add.w	r1, sp, #1992	; 0x7c8
 8011362:	9409      	str	r4, [sp, #36]	; 0x24
 8011364:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 8011368:	463d      	mov	r5, r7
 801136a:	9904      	ldr	r1, [sp, #16]
 801136c:	46b6      	mov	lr, r6
 801136e:	4623      	mov	r3, r4
 8011370:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 8011374:	f5ac 6ccf 	sub.w	ip, ip, #1656	; 0x678
 8011378:	edd0 7a00 	vldr	s15, [r0]
 801137c:	9805      	ldr	r0, [sp, #20]
 801137e:	ed91 0a00 	vldr	s0, [r1]
 8011382:	ed90 8a00 	vldr	s16, [r0]
 8011386:	eddc 4a00 	vldr	s9, [ip]
 801138a:	f2a6 666c 	subw	r6, r6, #1644	; 0x66c
 801138e:	f5ae 6ecc 	sub.w	lr, lr, #1632	; 0x660
 8011392:	f2a4 646c 	subw	r4, r4, #1644	; 0x66c
 8011396:	f2a7 676c 	subw	r7, r7, #1644	; 0x66c
 801139a:	f5a5 65cc 	sub.w	r5, r5, #1632	; 0x660
 801139e:	eec0 2aa7 	vdiv.f32	s5, s1, s15
 80113a2:	a85d      	add	r0, sp, #372	; 0x174
 80113a4:	a93e      	add	r1, sp, #248	; 0xf8
 80113a6:	edd7 5a00 	vldr	s11, [r7]
 80113aa:	ed96 6a00 	vldr	s12, [r6]
 80113ae:	9a06      	ldr	r2, [sp, #24]
 80113b0:	ed95 7a00 	vldr	s14, [r5]
 80113b4:	edd4 6a00 	vldr	s13, [r4]
 80113b8:	ed93 3a00 	vldr	s6, [r3]
 80113bc:	edde 7a00 	vldr	s15, [lr]
 80113c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80113c2:	edd2 1a00 	vldr	s3, [r2]
 80113c6:	9e07      	ldr	r6, [sp, #28]
 80113c8:	eee8 3a45 	vfms.f32	s7, s16, s10
 80113cc:	eee0 4a45 	vfms.f32	s9, s0, s10
 80113d0:	eea8 6a65 	vfms.f32	s12, s16, s11
 80113d4:	eee7 7a48 	vfms.f32	s15, s14, s16
 80113d8:	eee0 6a65 	vfms.f32	s13, s0, s11
 80113dc:	eea7 3a40 	vfms.f32	s6, s14, s0
 80113e0:	ed94 0a00 	vldr	s0, [r4]
 80113e4:	eea2 3a67 	vfms.f32	s6, s4, s15
 80113e8:	eee3 4ac2 	vfms.f32	s9, s7, s4
 80113ec:	eee2 6a46 	vfms.f32	s13, s4, s12
 80113f0:	ee80 2a80 	vdiv.f32	s4, s1, s0
 80113f4:	ee64 6a26 	vmul.f32	s13, s8, s13
 80113f8:	ee64 4a24 	vmul.f32	s9, s8, s9
 80113fc:	ee24 4a03 	vmul.f32	s8, s8, s6
 8011400:	eea1 6a66 	vfms.f32	s12, s2, s13
 8011404:	eee4 3ac1 	vfms.f32	s7, s9, s2
 8011408:	eee4 7a41 	vfms.f32	s15, s8, s2
 801140c:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8011410:	eea4 5ae1 	vfms.f32	s10, s9, s3
 8011414:	eea4 7a61 	vfms.f32	s14, s8, s3
 8011418:	ed96 3a00 	vldr	s6, [r6]
 801141c:	edcd 6a62 	vstr	s13, [sp, #392]	; 0x188
 8011420:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8011424:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8011428:	ee22 6a86 	vmul.f32	s12, s5, s12
 801142c:	eea7 7ac3 	vfms.f32	s14, s15, s6
 8011430:	eea3 5ac3 	vfms.f32	s10, s7, s6
 8011434:	eee3 5a46 	vfms.f32	s11, s6, s12
 8011438:	ee27 7a02 	vmul.f32	s14, s14, s4
 801143c:	ee22 5a05 	vmul.f32	s10, s4, s10
 8011440:	ee62 5a25 	vmul.f32	s11, s4, s11
 8011444:	ed8d 7a63 	vstr	s14, [sp, #396]	; 0x18c
 8011448:	edcd 7a64 	vstr	s15, [sp, #400]	; 0x190
 801144c:	edcd 4a5f 	vstr	s9, [sp, #380]	; 0x17c
 8011450:	edcd 3a5e 	vstr	s7, [sp, #376]	; 0x178
 8011454:	ed8d 5a5d 	vstr	s10, [sp, #372]	; 0x174
 8011458:	edcd 5a60 	vstr	s11, [sp, #384]	; 0x180
 801145c:	ed8d 6a61 	vstr	s12, [sp, #388]	; 0x184
 8011460:	ed8d 4a65 	vstr	s8, [sp, #404]	; 0x194
 8011464:	f7fa faa0 	bl	800b9a8 <b_dcm2q>
 8011468:	eddd 6a3f 	vldr	s13, [sp, #252]	; 0xfc
 801146c:	ed9d 7a40 	vldr	s14, [sp, #256]	; 0x100
 8011470:	eddd 7a3e 	vldr	s15, [sp, #248]	; 0xf8
 8011474:	f89b 31a4 	ldrb.w	r3, [fp, #420]	; 0x1a4
 8011478:	ee76 6aa6 	vadd.f32	s13, s13, s13
 801147c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011480:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011484:	edcd 6a2e 	vstr	s13, [sp, #184]	; 0xb8
 8011488:	ed8d 7a2f 	vstr	s14, [sp, #188]	; 0xbc
 801148c:	edcd 7a2d 	vstr	s15, [sp, #180]	; 0xb4
 8011490:	2b00      	cmp	r3, #0
 8011492:	f43d ad20 	beq.w	800eed6 <kalman_3gyro.constprop.0+0x2576>
 8011496:	2200      	movs	r2, #0
 8011498:	9b01      	ldr	r3, [sp, #4]
 801149a:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 801149e:	f8ad 20ae 	strh.w	r2, [sp, #174]	; 0xae
 80114a2:	f88d 20b0 	strb.w	r2, [sp, #176]	; 0xb0
 80114a6:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 80114aa:	f7fd bd9c 	b.w	800efe6 <kalman_3gyro.constprop.0+0x2686>
 80114ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80114b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80114b6:	edd3 6a03 	vldr	s13, [r3, #12]
 80114ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80114be:	eee7 7a07 	vfma.f32	s15, s14, s14
 80114c2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80114c6:	eeb1 6ae7 	vsqrt.f32	s12, s15
 80114ca:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80114ce:	ed8b 7a72 	vstr	s14, [fp, #456]	; 0x1c8
 80114d2:	f7ff bb12 	b.w	8010afa <kalman_3gyro.constprop.0+0x419a>
 80114d6:	eeb0 7a64 	vmov.f32	s14, s9
 80114da:	f7fc bc8b 	b.w	800ddf4 <kalman_3gyro.constprop.0+0x1494>
 80114de:	eeb0 7a64 	vmov.f32	s14, s9
 80114e2:	f7ff bb94 	b.w	8010c0e <kalman_3gyro.constprop.0+0x42ae>
 80114e6:	eeb0 7a64 	vmov.f32	s14, s9
 80114ea:	f7ff bb50 	b.w	8010b8e <kalman_3gyro.constprop.0+0x422e>
 80114ee:	eeb0 7a64 	vmov.f32	s14, s9
 80114f2:	f7fc bc9f 	b.w	800de34 <kalman_3gyro.constprop.0+0x14d4>
 80114f6:	eeb0 7a64 	vmov.f32	s14, s9
 80114fa:	f7ff bb68 	b.w	8010bce <kalman_3gyro.constprop.0+0x426e>
 80114fe:	eeb0 7a64 	vmov.f32	s14, s9
 8011502:	f7fc bcb7 	b.w	800de74 <kalman_3gyro.constprop.0+0x1514>
 8011506:	2200      	movs	r2, #0
 8011508:	2004      	movs	r0, #4
 801150a:	2301      	movs	r3, #1
 801150c:	2406      	movs	r4, #6
 801150e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8011512:	9007      	str	r0, [sp, #28]
 8011514:	eef0 7a47 	vmov.f32	s15, s14
 8011518:	4696      	mov	lr, r2
 801151a:	f04f 0c03 	mov.w	ip, #3
 801151e:	2707      	movs	r7, #7
 8011520:	e61d      	b.n	801115e <kalman_3gyro.constprop.0+0x47fe>
 8011522:	ed9f bae2 	vldr	s22, [pc, #904]	; 80118ac <kalman_3gyro.constprop.0+0x4f4c>
 8011526:	eeb0 7a64 	vmov.f32	s14, s9
 801152a:	eddb 4a36 	vldr	s9, [fp, #216]	; 0xd8
 801152e:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011536:	f140 80b9 	bpl.w	80116ac <kalman_3gyro.constprop.0+0x4d4c>
 801153a:	eddb 3a35 	vldr	s7, [fp, #212]	; 0xd4
 801153e:	ed9b 4a37 	vldr	s8, [fp, #220]	; 0xdc
 8011542:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011546:	ee34 4a63 	vsub.f32	s8, s8, s7
 801154a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801154e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011552:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011556:	ee3b ba23 	vadd.f32	s22, s22, s7
 801155a:	ed9b 7a38 	vldr	s14, [fp, #224]	; 0xe0
 801155e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8011562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011566:	f6ff acb3 	blt.w	8010ed0 <kalman_3gyro.constprop.0+0x4570>
 801156a:	eddb 4a3a 	vldr	s9, [fp, #232]	; 0xe8
 801156e:	eeb4 8ae4 	vcmpe.f32	s16, s9
 8011572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011576:	f140 80a0 	bpl.w	80116ba <kalman_3gyro.constprop.0+0x4d5a>
 801157a:	eddb 3a39 	vldr	s7, [fp, #228]	; 0xe4
 801157e:	ed9b 4a3b 	vldr	s8, [fp, #236]	; 0xec
 8011582:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011586:	ee34 4a63 	vsub.f32	s8, s8, s7
 801158a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801158e:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011592:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011596:	ee3b ba23 	vadd.f32	s22, s22, s7
 801159a:	ed9b 7a3c 	vldr	s14, [fp, #240]	; 0xf0
 801159e:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80115a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a6:	f63f acb3 	bhi.w	8010f10 <kalman_3gyro.constprop.0+0x45b0>
 80115aa:	eddb 4a3e 	vldr	s9, [fp, #248]	; 0xf8
 80115ae:	eef4 4ac8 	vcmpe.f32	s9, s16
 80115b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b6:	f340 8086 	ble.w	80116c6 <kalman_3gyro.constprop.0+0x4d66>
 80115ba:	eddb 3a3d 	vldr	s7, [fp, #244]	; 0xf4
 80115be:	ed9b 4a3f 	vldr	s8, [fp, #252]	; 0xfc
 80115c2:	ee38 3a47 	vsub.f32	s6, s16, s14
 80115c6:	ee34 4a63 	vsub.f32	s8, s8, s7
 80115ca:	ee34 7ac7 	vsub.f32	s14, s9, s14
 80115ce:	ee64 4a03 	vmul.f32	s9, s8, s6
 80115d2:	ee84 ba87 	vdiv.f32	s22, s9, s14
 80115d6:	ee3b ba23 	vadd.f32	s22, s22, s7
 80115da:	ed9b 7a40 	vldr	s14, [fp, #256]	; 0x100
 80115de:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80115e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115e6:	f63f acb3 	bhi.w	8010f50 <kalman_3gyro.constprop.0+0x45f0>
 80115ea:	eddb 4a42 	vldr	s9, [fp, #264]	; 0x108
 80115ee:	eef4 4ac8 	vcmpe.f32	s9, s16
 80115f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115f6:	dd69      	ble.n	80116cc <kalman_3gyro.constprop.0+0x4d6c>
 80115f8:	eddb 3a41 	vldr	s7, [fp, #260]	; 0x104
 80115fc:	ed9b 4a43 	vldr	s8, [fp, #268]	; 0x10c
 8011600:	ee38 3a47 	vsub.f32	s6, s16, s14
 8011604:	ee34 4a63 	vsub.f32	s8, s8, s7
 8011608:	ee34 7ac7 	vsub.f32	s14, s9, s14
 801160c:	ee64 4a03 	vmul.f32	s9, s8, s6
 8011610:	ee84 ba87 	vdiv.f32	s22, s9, s14
 8011614:	ee3b ba23 	vadd.f32	s22, s22, s7
 8011618:	eddb 4a44 	vldr	s9, [fp, #272]	; 0x110
 801161c:	eef4 4ac8 	vcmpe.f32	s9, s16
 8011620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011624:	f63f acb4 	bhi.w	8010f90 <kalman_3gyro.constprop.0+0x4630>
 8011628:	ed9b 7a46 	vldr	s14, [fp, #280]	; 0x118
 801162c:	eeb4 7ac8 	vcmpe.f32	s14, s16
 8011630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011634:	f77f acb4 	ble.w	8010fa0 <kalman_3gyro.constprop.0+0x4640>
 8011638:	ed9b 4a45 	vldr	s8, [fp, #276]	; 0x114
 801163c:	ed9b 5a47 	vldr	s10, [fp, #284]	; 0x11c
 8011640:	ee78 3a64 	vsub.f32	s7, s16, s9
 8011644:	ee35 5a44 	vsub.f32	s10, s10, s8
 8011648:	ee37 7a64 	vsub.f32	s14, s14, s9
 801164c:	ee25 5a23 	vmul.f32	s10, s10, s7
 8011650:	ee85 ba07 	vdiv.f32	s22, s10, s14
 8011654:	ee3b ba04 	vadd.f32	s22, s22, s8
 8011658:	f7fc bb7c 	b.w	800dd54 <kalman_3gyro.constprop.0+0x13f4>
 801165c:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011660:	eddf 7a93 	vldr	s15, [pc, #588]	; 80118b0 <kalman_3gyro.constprop.0+0x4f50>
 8011664:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80118b4 <kalman_3gyro.constprop.0+0x4f54>
 8011668:	3301      	adds	r3, #1
 801166a:	b29b      	uxth	r3, r3
 801166c:	2b31      	cmp	r3, #49	; 0x31
 801166e:	f8ab 31a6 	strh.w	r3, [fp, #422]	; 0x1a6
 8011672:	bf98      	it	ls
 8011674:	eef0 7a47 	vmovls.f32	s15, s14
 8011678:	f7fd bc1c 	b.w	800eeb4 <kalman_3gyro.constprop.0+0x2554>
 801167c:	2a0a      	cmp	r2, #10
 801167e:	d02c      	beq.n	80116da <kalman_3gyro.constprop.0+0x4d7a>
 8011680:	2100      	movs	r1, #0
 8011682:	3201      	adds	r2, #1
 8011684:	f88b 21a0 	strb.w	r2, [fp, #416]	; 0x1a0
 8011688:	f8ad 10ae 	strh.w	r1, [sp, #174]	; 0xae
 801168c:	f88d 10b0 	strb.w	r1, [sp, #176]	; 0xb0
 8011690:	f88b 11a3 	strb.w	r1, [fp, #419]	; 0x1a3
 8011694:	f7fd bca7 	b.w	800efe6 <kalman_3gyro.constprop.0+0x2686>
 8011698:	eeb0 7a64 	vmov.f32	s14, s9
 801169c:	e7a5      	b.n	80115ea <kalman_3gyro.constprop.0+0x4c8a>
 801169e:	2305      	movs	r3, #5
 80116a0:	2108      	movs	r1, #8
 80116a2:	e9cd 3109 	strd	r3, r1, [sp, #36]	; 0x24
 80116a6:	2302      	movs	r3, #2
 80116a8:	9302      	str	r3, [sp, #8]
 80116aa:	e572      	b.n	8011192 <kalman_3gyro.constprop.0+0x4832>
 80116ac:	eeb0 7a64 	vmov.f32	s14, s9
 80116b0:	f7ff bbf6 	b.w	8010ea0 <kalman_3gyro.constprop.0+0x4540>
 80116b4:	eeb0 7a64 	vmov.f32	s14, s9
 80116b8:	e757      	b.n	801156a <kalman_3gyro.constprop.0+0x4c0a>
 80116ba:	eeb0 7a64 	vmov.f32	s14, s9
 80116be:	e40f      	b.n	8010ee0 <kalman_3gyro.constprop.0+0x4580>
 80116c0:	eeb0 7a64 	vmov.f32	s14, s9
 80116c4:	e771      	b.n	80115aa <kalman_3gyro.constprop.0+0x4c4a>
 80116c6:	eeb0 7a64 	vmov.f32	s14, s9
 80116ca:	e429      	b.n	8010f20 <kalman_3gyro.constprop.0+0x45c0>
 80116cc:	eeb0 7a64 	vmov.f32	s14, s9
 80116d0:	e446      	b.n	8010f60 <kalman_3gyro.constprop.0+0x4600>
 80116d2:	ed9f ea76 	vldr	s28, [pc, #472]	; 80118ac <kalman_3gyro.constprop.0+0x4f4c>
 80116d6:	f7fc bb6d 	b.w	800ddb4 <kalman_3gyro.constprop.0+0x1454>
 80116da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80116dc:	ed94 3a00 	vldr	s6, [r4]
 80116e0:	edd2 5a00 	vldr	s11, [r2]
 80116e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80116e6:	edd0 3a00 	vldr	s7, [r0]
 80116ea:	ed92 1a00 	vldr	s2, [r2]
 80116ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80116f0:	ed91 4a00 	vldr	s8, [r1]
 80116f4:	edd2 4a00 	vldr	s9, [r2]
 80116f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80116fa:	ed8d 7a81 	vstr	s14, [sp, #516]	; 0x204
 80116fe:	ed92 2a00 	vldr	s4, [r2]
 8011702:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011704:	edcd 6a82 	vstr	s13, [sp, #520]	; 0x208
 8011708:	edd2 7a00 	vldr	s15, [r2]
 801170c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801170e:	edd2 2a00 	vldr	s5, [r2]
 8011712:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8011714:	ee75 5a81 	vadd.f32	s11, s11, s2
 8011718:	edd2 1a00 	vldr	s3, [r2]
 801171c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801171e:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011722:	ee75 5a83 	vadd.f32	s11, s11, s6
 8011726:	ed92 3a00 	vldr	s6, [r2]
 801172a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801172c:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8011730:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8011734:	edd2 3a00 	vldr	s7, [r2]
 8011738:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801173a:	ee77 7a84 	vadd.f32	s15, s15, s8
 801173e:	ed92 4a00 	vldr	s8, [r2]
 8011742:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011744:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011748:	ed92 2a00 	vldr	s4, [r2]
 801174c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801174e:	f50b 61fb 	add.w	r1, fp, #2008	; 0x7d8
 8011752:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8011756:	edd2 2a00 	vldr	s5, [r2]
 801175a:	ed91 3a00 	vldr	s6, [r1]
 801175e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011762:	ee74 4a82 	vadd.f32	s9, s9, s4
 8011766:	f20b 70d4 	addw	r0, fp, #2004	; 0x7d4
 801176a:	ee75 5a84 	vadd.f32	s11, s11, s8
 801176e:	f20b 72dc 	addw	r2, fp, #2012	; 0x7dc
 8011772:	ed90 4a00 	vldr	s8, [r0]
 8011776:	edd2 3a00 	vldr	s7, [r2]
 801177a:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 801177e:	f20b 71e4 	addw	r1, fp, #2020	; 0x7e4
 8011782:	ed91 2a00 	vldr	s4, [r1]
 8011786:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 801178a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 801178e:	ee74 4a83 	vadd.f32	s9, s9, s6
 8011792:	f50b 60fc 	add.w	r0, fp, #2016	; 0x7e0
 8011796:	ee75 5a84 	vadd.f32	s11, s11, s8
 801179a:	f50b 62fd 	add.w	r2, fp, #2024	; 0x7e8
 801179e:	ed90 4a00 	vldr	s8, [r0]
 80117a2:	edd2 2a00 	vldr	s5, [r2]
 80117a6:	f50b 61fe 	add.w	r1, fp, #2032	; 0x7f0
 80117aa:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80117ae:	f20b 70ec 	addw	r0, fp, #2028	; 0x7ec
 80117b2:	edd1 3a00 	vldr	s7, [r1]
 80117b6:	ed90 3a00 	vldr	s6, [r0]
 80117ba:	ee74 4a82 	vadd.f32	s9, s9, s4
 80117be:	ee75 5a84 	vadd.f32	s11, s11, s8
 80117c2:	f20b 72f4 	addw	r2, fp, #2036	; 0x7f4
 80117c6:	f20b 70fc 	addw	r0, fp, #2044	; 0x7fc
 80117ca:	ed92 4a00 	vldr	s8, [r2]
 80117ce:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80117d2:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80117d6:	f50b 64ff 	add.w	r4, fp, #2040	; 0x7f8
 80117da:	edd0 3a00 	vldr	s7, [r0]
 80117de:	edd4 2a00 	vldr	s5, [r4]
 80117e2:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80117e6:	ee75 5a83 	vadd.f32	s11, s11, s6
 80117ea:	f60b 0108 	addw	r1, fp, #2056	; 0x808
 80117ee:	f50b 6200 	add.w	r2, fp, #2048	; 0x800
 80117f2:	ed91 3a00 	vldr	s6, [r1]
 80117f6:	ee77 7a84 	vadd.f32	s15, s15, s8
 80117fa:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80117fe:	ed92 4a00 	vldr	s8, [r2]
 8011802:	f89b 21a3 	ldrb.w	r2, [fp, #419]	; 0x1a3
 8011806:	f60b 0404 	addw	r4, fp, #2052	; 0x804
 801180a:	edd4 3a00 	vldr	s7, [r4]
 801180e:	f60b 010c 	addw	r1, fp, #2060	; 0x80c
 8011812:	ee75 5aa2 	vadd.f32	s11, s11, s5
 8011816:	ee77 7a84 	vadd.f32	s15, s15, s8
 801181a:	ee74 4a83 	vadd.f32	s9, s9, s6
 801181e:	ed91 4a00 	vldr	s8, [r1]
 8011822:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8011826:	ee77 7a84 	vadd.f32	s15, s15, s8
 801182a:	ee64 4a85 	vmul.f32	s9, s9, s10
 801182e:	f50d 619b 	add.w	r1, sp, #1240	; 0x4d8
 8011832:	ee65 5a85 	vmul.f32	s11, s11, s10
 8011836:	edc1 4a00 	vstr	s9, [r1]
 801183a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801183e:	f20d 41d4 	addw	r1, sp, #1236	; 0x4d4
 8011842:	edc1 5a00 	vstr	s11, [r1]
 8011846:	f240 1501 	movw	r5, #257	; 0x101
 801184a:	3201      	adds	r2, #1
 801184c:	f20d 41dc 	addw	r1, sp, #1244	; 0x4dc
 8011850:	f8ad 50ae 	strh.w	r5, [sp, #174]	; 0xae
 8011854:	edc1 7a00 	vstr	s15, [r1]
 8011858:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 801185c:	2800      	cmp	r0, #0
 801185e:	f43d abc2 	beq.w	800efe6 <kalman_3gyro.constprop.0+0x2686>
 8011862:	2200      	movs	r2, #0
 8011864:	ed8b 7a6f 	vstr	s14, [fp, #444]	; 0x1bc
 8011868:	edcb 6a70 	vstr	s13, [fp, #448]	; 0x1c0
 801186c:	ed8b 6a71 	vstr	s12, [fp, #452]	; 0x1c4
 8011870:	f88b 2001 	strb.w	r2, [fp, #1]
 8011874:	f7fd bbb7 	b.w	800efe6 <kalman_3gyro.constprop.0+0x2686>
 8011878:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801187c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011880:	f8cb 324c 	str.w	r3, [fp, #588]	; 0x24c
 8011884:	f8cb 3274 	str.w	r3, [fp, #628]	; 0x274
 8011888:	f8cb 329c 	str.w	r3, [fp, #668]	; 0x29c
 801188c:	f7fd bb20 	b.w	800eed0 <kalman_3gyro.constprop.0+0x2570>
 8011890:	2a00      	cmp	r2, #0
 8011892:	f340 80c1 	ble.w	8011a18 <kalman_3gyro.constprop.0+0x50b8>
 8011896:	2300      	movs	r3, #0
 8011898:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
 801189c:	f88d 30aa 	strb.w	r3, [sp, #170]	; 0xaa
 80118a0:	f88d 30b1 	strb.w	r3, [sp, #177]	; 0xb1
 80118a4:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
 80118a8:	f7fc bfcf 	b.w	800e84a <kalman_3gyro.constprop.0+0x1eea>
 80118ac:	00000000 	.word	0x00000000
 80118b0:	3e4cccce 	.word	0x3e4cccce
 80118b4:	3eaaaaab 	.word	0x3eaaaaab
 80118b8:	3e999998 	.word	0x3e999998
 80118bc:	3f99999a 	.word	0x3f99999a
 80118c0:	3dccccd0 	.word	0x3dccccd0
 80118c4:	3f8ccccd 	.word	0x3f8ccccd
 80118c8:	3e4ccccd 	.word	0x3e4ccccd
 80118cc:	3d088889 	.word	0x3d088889
 80118d0:	3d0d3dcb 	.word	0x3d0d3dcb
 80118d4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80118d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118e0:	d55b      	bpl.n	801199a <kalman_3gyro.constprop.0+0x503a>
 80118e2:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80118c0 <kalman_3gyro.constprop.0+0x4f60>
 80118e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80118ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80118ee:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80118f2:	eef0 5a66 	vmov.f32	s11, s13
 80118f6:	eee7 5a06 	vfma.f32	s11, s14, s12
 80118fa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80118fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011902:	eeb0 7a65 	vmov.f32	s14, s11
 8011906:	db5b      	blt.n	80119c0 <kalman_3gyro.constprop.0+0x5060>
 8011908:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801190c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011914:	d55b      	bpl.n	80119ce <kalman_3gyro.constprop.0+0x506e>
 8011916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801191a:	ee77 6ae6 	vsub.f32	s13, s15, s13
 801191e:	ed1f 6a1a 	vldr	s12, [pc, #-104]	; 80118b8 <kalman_3gyro.constprop.0+0x4f58>
 8011922:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80118bc <kalman_3gyro.constprop.0+0x4f5c>
 8011926:	eea6 7a86 	vfma.f32	s14, s13, s12
 801192a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801192e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011936:	db5b      	blt.n	80119f0 <kalman_3gyro.constprop.0+0x5090>
 8011938:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801193c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011944:	d55b      	bpl.n	80119fe <kalman_3gyro.constprop.0+0x509e>
 8011946:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801194a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801194e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8011952:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011956:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801195a:	ee68 8a87 	vmul.f32	s17, s17, s14
 801195e:	f7ff bb7e 	b.w	801105e <kalman_3gyro.constprop.0+0x46fe>
 8011962:	f8bb 31a6 	ldrh.w	r3, [fp, #422]	; 0x1a6
 8011966:	2b27      	cmp	r3, #39	; 0x27
 8011968:	f200 80c3 	bhi.w	8011af2 <kalman_3gyro.constprop.0+0x5192>
 801196c:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011970:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011974:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011978:	f8bb 31a8 	ldrh.w	r3, [fp, #424]	; 0x1a8
 801197c:	2201      	movs	r2, #1
 801197e:	4413      	add	r3, r2
 8011980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011984:	bf14      	ite	ne
 8011986:	b29b      	uxthne	r3, r3
 8011988:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 801198c:	f8ab 31a8 	strh.w	r3, [fp, #424]	; 0x1a8
 8011990:	f88b 21a3 	strb.w	r2, [fp, #419]	; 0x1a3
 8011994:	9b01      	ldr	r3, [sp, #4]
 8011996:	f7fd bb26 	b.w	800efe6 <kalman_3gyro.constprop.0+0x2686>
 801199a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801199e:	eef4 7ae6 	vcmpe.f32	s15, s13
 80119a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a6:	d5af      	bpl.n	8011908 <kalman_3gyro.constprop.0+0x4fa8>
 80119a8:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80119ac:	ed1f 6a3c 	vldr	s12, [pc, #-240]	; 80118c0 <kalman_3gyro.constprop.0+0x4f60>
 80119b0:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 80118c4 <kalman_3gyro.constprop.0+0x4f64>
 80119b4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80119b8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80119bc:	eea6 7a86 	vfma.f32	s14, s13, s12
 80119c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80119c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80119c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119cc:	dbad      	blt.n	801192a <kalman_3gyro.constprop.0+0x4fca>
 80119ce:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80119d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80119d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119da:	d5ad      	bpl.n	8011938 <kalman_3gyro.constprop.0+0x4fd8>
 80119dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80119e0:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80119e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80119e8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80119ec:	eea6 7a86 	vfma.f32	s14, s13, s12
 80119f0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80119f4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80119f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119fc:	dbad      	blt.n	801195a <kalman_3gyro.constprop.0+0x4ffa>
 80119fe:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8011a02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a06:	ed5f 6a50 	vldr	s13, [pc, #-320]	; 80118c8 <kalman_3gyro.constprop.0+0x4f68>
 8011a0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011a0e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8011a12:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011a16:	e7a0      	b.n	801195a <kalman_3gyro.constprop.0+0x4ffa>
 8011a18:	eddd 6a6f 	vldr	s13, [sp, #444]	; 0x1bc
 8011a1c:	ed9d 7a70 	vldr	s14, [sp, #448]	; 0x1c0
 8011a20:	eddd 7a71 	vldr	s15, [sp, #452]	; 0x1c4
 8011a24:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8011a28:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011a2c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011a30:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011a34:	edcd 6a6f 	vstr	s13, [sp, #444]	; 0x1bc
 8011a38:	ed8d 7a70 	vstr	s14, [sp, #448]	; 0x1c0
 8011a3c:	edcd 7a71 	vstr	s15, [sp, #452]	; 0x1c4
 8011a40:	f7fc bf03 	b.w	800e84a <kalman_3gyro.constprop.0+0x1eea>
 8011a44:	ed1f 4a5f 	vldr	s8, [pc, #-380]	; 80118cc <kalman_3gyro.constprop.0+0x4f6c>
 8011a48:	ed5f 4a5f 	vldr	s9, [pc, #-380]	; 80118d0 <kalman_3gyro.constprop.0+0x4f70>
 8011a4c:	ac33      	add	r4, sp, #204	; 0xcc
 8011a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a52:	edd1 6a7c 	vldr	s13, [r1, #496]	; 0x1f0
 8011a56:	f5a1 73ae 	sub.w	r3, r1, #348	; 0x15c
 8011a5a:	eef0 7a66 	vmov.f32	s15, s13
 8011a5e:	3001      	adds	r0, #1
 8011a60:	461a      	mov	r2, r3
 8011a62:	ed92 7ad6 	vldr	s14, [r2, #856]	; 0x358
 8011a66:	320c      	adds	r2, #12
 8011a68:	428a      	cmp	r2, r1
 8011a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a6e:	d1f8      	bne.n	8011a62 <kalman_3gyro.constprop.0+0x5102>
 8011a70:	ee27 7a84 	vmul.f32	s14, s15, s8
 8011a74:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8011a78:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8011a7c:	edd3 7ad6 	vldr	s15, [r3, #856]	; 0x358
 8011a80:	330c      	adds	r3, #12
 8011a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a86:	428b      	cmp	r3, r1
 8011a88:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8011a8c:	d1f6      	bne.n	8011a7c <kalman_3gyro.constprop.0+0x511c>
 8011a8e:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8011a92:	2802      	cmp	r0, #2
 8011a94:	f103 0104 	add.w	r1, r3, #4
 8011a98:	ece4 6a01 	vstmia	r4!, {s13}
 8011a9c:	d1d9      	bne.n	8011a52 <kalman_3gyro.constprop.0+0x50f2>
 8011a9e:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
 8011aa2:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
 8011aa6:	ed9d 7a35 	vldr	s14, [sp, #212]	; 0xd4
 8011aaa:	eef1 3ae7 	vsqrt.f32	s7, s15
 8011aae:	eeb1 4ae6 	vsqrt.f32	s8, s13
 8011ab2:	eef1 4ac7 	vsqrt.f32	s9, s14
 8011ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011aba:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8011abe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ac2:	edcd 3a33 	vstr	s7, [sp, #204]	; 0xcc
 8011ac6:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ace:	ed8d 4a34 	vstr	s8, [sp, #208]	; 0xd0
 8011ad2:	edcd 4a35 	vstr	s9, [sp, #212]	; 0xd4
 8011ad6:	f57d aa62 	bpl.w	800ef9e <kalman_3gyro.constprop.0+0x263e>
 8011ada:	2200      	movs	r2, #0
 8011adc:	9b01      	ldr	r3, [sp, #4]
 8011ade:	ed8d 5a81 	vstr	s10, [sp, #516]	; 0x204
 8011ae2:	edcd 5a82 	vstr	s11, [sp, #520]	; 0x208
 8011ae6:	ed8d 6a83 	vstr	s12, [sp, #524]	; 0x20c
 8011aea:	f88b 2001 	strb.w	r2, [fp, #1]
 8011aee:	f7fd ba7a 	b.w	800efe6 <kalman_3gyro.constprop.0+0x2686>
 8011af2:	9b08      	ldr	r3, [sp, #32]
 8011af4:	6999      	ldr	r1, [r3, #24]
 8011af6:	69da      	ldr	r2, [r3, #28]
 8011af8:	6a1b      	ldr	r3, [r3, #32]
 8011afa:	9181      	str	r1, [sp, #516]	; 0x204
 8011afc:	9282      	str	r2, [sp, #520]	; 0x208
 8011afe:	9383      	str	r3, [sp, #524]	; 0x20c
 8011b00:	e73a      	b.n	8011978 <kalman_3gyro.constprop.0+0x5018>
 8011b02:	bf00      	nop
 8011b04:	0000      	movs	r0, r0
	...

08011b08 <iNemoEngine_API_Update>:
 8011b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b0c:	ed2d 8b0c 	vpush	{d8-d13}
 8011b10:	4604      	mov	r4, r0
 8011b12:	b0c1      	sub	sp, #260	; 0x104
 8011b14:	460d      	mov	r5, r1
 8011b16:	4617      	mov	r7, r2
 8011b18:	eeb0 8a40 	vmov.f32	s16, s0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	f000 8253 	beq.w	8011fc8 <iNemoEngine_API_Update+0x4c0>
 8011b22:	461e      	mov	r6, r3
 8011b24:	463b      	mov	r3, r7
 8011b26:	f894 c978 	ldrb.w	ip, [r4, #2424]	; 0x978
 8011b2a:	f853 0f0c 	ldr.w	r0, [r3, #12]!
 8011b2e:	6859      	ldr	r1, [r3, #4]
 8011b30:	689a      	ldr	r2, [r3, #8]
 8011b32:	ab33      	add	r3, sp, #204	; 0xcc
 8011b34:	c307      	stmia	r3!, {r0, r1, r2}
 8011b36:	6879      	ldr	r1, [r7, #4]
 8011b38:	68ba      	ldr	r2, [r7, #8]
 8011b3a:	6838      	ldr	r0, [r7, #0]
 8011b3c:	ab30      	add	r3, sp, #192	; 0xc0
 8011b3e:	c307      	stmia	r3!, {r0, r1, r2}
 8011b40:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8011b44:	6879      	ldr	r1, [r7, #4]
 8011b46:	68ba      	ldr	r2, [r7, #8]
 8011b48:	ab36      	add	r3, sp, #216	; 0xd8
 8011b4a:	c307      	stmia	r3!, {r0, r1, r2}
 8011b4c:	f1bc 0f00 	cmp.w	ip, #0
 8011b50:	d005      	beq.n	8011b5e <iNemoEngine_API_Update+0x56>
 8011b52:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011b56:	7923      	ldrb	r3, [r4, #4]
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	f080 829b 	bcs.w	8012094 <iNemoEngine_API_Update+0x58c>
 8011b5e:	f104 093a 	add.w	r9, r4, #58	; 0x3a
 8011b62:	f10d 0a14 	add.w	sl, sp, #20
 8011b66:	2300      	movs	r3, #0
 8011b68:	4649      	mov	r1, r9
 8011b6a:	4650      	mov	r0, sl
 8011b6c:	aa33      	add	r2, sp, #204	; 0xcc
 8011b6e:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 8011b72:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
 8011b76:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
 8011b7a:	f7f9 fb65 	bl	800b248 <rotVect>
 8011b7e:	aa36      	add	r2, sp, #216	; 0xd8
 8011b80:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8011b84:	a808      	add	r0, sp, #32
 8011b86:	f7f9 fb5f 	bl	800b248 <rotVect>
 8011b8a:	aa30      	add	r2, sp, #192	; 0xc0
 8011b8c:	4640      	mov	r0, r8
 8011b8e:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8011b92:	f7f9 fb59 	bl	800b248 <rotVect>
 8011b96:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8011b9a:	b923      	cbnz	r3, 8011ba6 <iNemoEngine_API_Update+0x9e>
 8011b9c:	4b8c      	ldr	r3, [pc, #560]	; (8011dd0 <iNemoEngine_API_Update+0x2c8>)
 8011b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	920b      	str	r2, [sp, #44]	; 0x2c
 8011ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8011ba6:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011baa:	2f09      	cmp	r7, #9
 8011bac:	d851      	bhi.n	8011c52 <iNemoEngine_API_Update+0x14a>
 8011bae:	ed9d ba06 	vldr	s22, [sp, #24]
 8011bb2:	eddd ba05 	vldr	s23, [sp, #20]
 8011bb6:	eddd aa07 	vldr	s21, [sp, #28]
 8011bba:	ee6b 7a0b 	vmul.f32	s15, s22, s22
 8011bbe:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8011bc2:	eeeb 7aab 	vfma.f32	s15, s23, s23
 8011bc6:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011bca:	ee17 0a90 	vmov	r0, s15
 8011bce:	f7ee fcbb 	bl	8000548 <__aeabi_f2d>
 8011bd2:	ec41 0b10 	vmov	d0, r0, r1
 8011bd6:	f003 fecd 	bl	8015974 <sqrt>
 8011bda:	ec51 0b10 	vmov	r0, r1, d0
 8011bde:	f7ee ffe3 	bl	8000ba8 <__aeabi_d2f>
 8011be2:	ee07 0a90 	vmov	s15, r0
 8011be6:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8011bea:	eddd 9a0c 	vldr	s19, [sp, #48]	; 0x30
 8011bee:	ed9d aa0b 	vldr	s20, [sp, #44]	; 0x2c
 8011bf2:	eddd 8a0d 	vldr	s17, [sp, #52]	; 0x34
 8011bf6:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011bfa:	ee6b ba87 	vmul.f32	s23, s23, s14
 8011bfe:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8011c02:	ee2b ba07 	vmul.f32	s22, s22, s14
 8011c06:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011c0a:	ee6a aa87 	vmul.f32	s21, s21, s14
 8011c0e:	ee17 0a90 	vmov	r0, s15
 8011c12:	edcd ba05 	vstr	s23, [sp, #20]
 8011c16:	ed8d ba06 	vstr	s22, [sp, #24]
 8011c1a:	edcd aa07 	vstr	s21, [sp, #28]
 8011c1e:	f7ee fc93 	bl	8000548 <__aeabi_f2d>
 8011c22:	ec41 0b10 	vmov	d0, r0, r1
 8011c26:	f003 fea5 	bl	8015974 <sqrt>
 8011c2a:	ec51 0b10 	vmov	r0, r1, d0
 8011c2e:	f7ee ffbb 	bl	8000ba8 <__aeabi_d2f>
 8011c32:	ee07 0a90 	vmov	s15, r0
 8011c36:	eecc 7a27 	vdiv.f32	s15, s24, s15
 8011c3a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011c3e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8011c42:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011c46:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
 8011c4a:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
 8011c4e:	edcd 8a0d 	vstr	s17, [sp, #52]	; 0x34
 8011c52:	7923      	ldrb	r3, [r4, #4]
 8011c54:	f8b4 2950 	ldrh.w	r2, [r4, #2384]	; 0x950
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	f080 80dd 	bcs.w	8011e18 <iNemoEngine_API_Update+0x310>
 8011c5e:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011c62:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011c66:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011c6a:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011c6e:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011c72:	3701      	adds	r7, #1
 8011c74:	aa33      	add	r2, sp, #204	; 0xcc
 8011c76:	4649      	mov	r1, r9
 8011c78:	4640      	mov	r0, r8
 8011c7a:	f8c4 794c 	str.w	r7, [r4, #2380]	; 0x94c
 8011c7e:	9303      	str	r3, [sp, #12]
 8011c80:	f7f9 fae2 	bl	800b248 <rotVect>
 8011c84:	9b03      	ldr	r3, [sp, #12]
 8011c86:	f8db 1000 	ldr.w	r1, [fp]
 8011c8a:	6818      	ldr	r0, [r3, #0]
 8011c8c:	f8da 2000 	ldr.w	r2, [sl]
 8011c90:	6833      	ldr	r3, [r6, #0]
 8011c92:	61ab      	str	r3, [r5, #24]
 8011c94:	60e8      	str	r0, [r5, #12]
 8011c96:	6129      	str	r1, [r5, #16]
 8011c98:	616a      	str	r2, [r5, #20]
 8011c9a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011c9e:	9301      	str	r3, [sp, #4]
 8011ca0:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8011ca4:	4641      	mov	r1, r8
 8011ca6:	9300      	str	r3, [sp, #0]
 8011ca8:	462a      	mov	r2, r5
 8011caa:	f105 031c 	add.w	r3, r5, #28
 8011cae:	f105 000c 	add.w	r0, r5, #12
 8011cb2:	f7fa fd85 	bl	800c7c0 <output_update>
 8011cb6:	ed95 8a00 	vldr	s16, [r5]
 8011cba:	edd5 9a01 	vldr	s19, [r5, #4]
 8011cbe:	eeb0 0a48 	vmov.f32	s0, s16
 8011cc2:	f003 fdeb 	bl	801589c <sinf>
 8011cc6:	eddf 7a43 	vldr	s15, [pc, #268]	; 8011dd4 <iNemoEngine_API_Update+0x2cc>
 8011cca:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8011dd8 <iNemoEngine_API_Update+0x2d0>
 8011cce:	ee60 8a00 	vmul.f32	s17, s0, s0
 8011cd2:	eef0 6ae9 	vabs.f32	s13, s19
 8011cd6:	eee8 7aa7 	vfma.f32	s15, s17, s15
 8011cda:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce2:	eef0 8a67 	vmov.f32	s17, s15
 8011ce6:	d56e      	bpl.n	8011dc6 <iNemoEngine_API_Update+0x2be>
 8011ce8:	eeb0 0a69 	vmov.f32	s0, s19
 8011cec:	f003 fe18 	bl	8015920 <tanf>
 8011cf0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011cf4:	eea0 9a28 	vfma.f32	s18, s0, s17
 8011cf8:	eef1 7ac9 	vsqrt.f32	s15, s18
 8011cfc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8011ddc <iNemoEngine_API_Update+0x2d4>
 8011d00:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8011df0 <iNemoEngine_API_Update+0x2e8>
 8011d04:	ed95 1a09 	vldr	s2, [r5, #36]	; 0x24
 8011d08:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8011d0c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d14:	bf88      	it	hi
 8011d16:	eef0 7a66 	vmovhi.f32	s15, s13
 8011d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d22:	bfb8      	it	lt
 8011d24:	eef0 7a47 	vmovlt.f32	s15, s14
 8011d28:	edc5 7a0e 	vstr	s15, [r5, #56]	; 0x38
 8011d2c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011d30:	4c2b      	ldr	r4, [pc, #172]	; (8011de0 <iNemoEngine_API_Update+0x2d8>)
 8011d32:	bba3      	cbnz	r3, 8011d9e <iNemoEngine_API_Update+0x296>
 8011d34:	6820      	ldr	r0, [r4, #0]
 8011d36:	edd5 0a08 	vldr	s1, [r5, #32]
 8011d3a:	ed95 0a07 	vldr	s0, [r5, #28]
 8011d3e:	edd5 9a03 	vldr	s19, [r5, #12]
 8011d42:	ed95 aa04 	vldr	s20, [r5, #16]
 8011d46:	ed95 9a05 	vldr	s18, [r5, #20]
 8011d4a:	edd5 8a06 	vldr	s17, [r5, #24]
 8011d4e:	f7f9 fb4b 	bl	800b3e8 <findDirection>
 8011d52:	6020      	str	r0, [r4, #0]
 8011d54:	2805      	cmp	r0, #5
 8011d56:	f200 833d 	bhi.w	80123d4 <iNemoEngine_API_Update+0x8cc>
 8011d5a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8011d5e:	000a      	.short	0x000a
 8011d60:	00060137 	.word	0x00060137
 8011d64:	00060169 	.word	0x00060169
 8011d68:	000a      	.short	0x000a
 8011d6a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011de4 <iNemoEngine_API_Update+0x2dc>
 8011d6e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011d72:	eddf 7a28 	vldr	s15, [pc, #160]	; 8011e14 <iNemoEngine_API_Update+0x30c>
 8011d76:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d7e:	bfa8      	it	ge
 8011d80:	ee38 8a67 	vsubge.f32	s16, s16, s15
 8011d84:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d8c:	f100 8111 	bmi.w	8011fb2 <iNemoEngine_API_Update+0x4aa>
 8011d90:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8011d94:	b041      	add	sp, #260	; 0x104
 8011d96:	ecbd 8b0c 	vpop	{d8-d13}
 8011d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d9e:	ed95 9a05 	vldr	s18, [r5, #20]
 8011da2:	6820      	ldr	r0, [r4, #0]
 8011da4:	edd5 0a07 	vldr	s1, [r5, #28]
 8011da8:	ed95 0a08 	vldr	s0, [r5, #32]
 8011dac:	edd5 9a04 	vldr	s19, [r5, #16]
 8011db0:	ed95 aa03 	vldr	s20, [r5, #12]
 8011db4:	edd5 8a06 	vldr	s17, [r5, #24]
 8011db8:	eeb1 1a41 	vneg.f32	s2, s2
 8011dbc:	eeb1 9a49 	vneg.f32	s18, s18
 8011dc0:	f7f9 fb12 	bl	800b3e8 <findDirection>
 8011dc4:	e7c5      	b.n	8011d52 <iNemoEngine_API_Update+0x24a>
 8011dc6:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011de8 <iNemoEngine_API_Update+0x2e0>
 8011dca:	eea8 9aa7 	vfma.f32	s18, s17, s15
 8011dce:	e793      	b.n	8011cf8 <iNemoEngine_API_Update+0x1f0>
 8011dd0:	3f333333 	.word	0x3f333333
 8011dd4:	00000000 	.word	0x00000000
 8011dd8:	3fbc430e 	.word	0x3fbc430e
 8011ddc:	40490fdb 	.word	0x40490fdb
 8011de0:	200002e0 	.word	0x200002e0
 8011de4:	43340000 	.word	0x43340000
 8011de8:	42c6ab07 	.word	0x42c6ab07
 8011dec:	3c03126f 	.word	0x3c03126f
 8011df0:	3c8efa35 	.word	0x3c8efa35
 8011df4:	3e4ccccd 	.word	0x3e4ccccd
 8011df8:	3fb50481 	.word	0x3fb50481
 8011dfc:	3ed93dd9 	.word	0x3ed93dd9
 8011e00:	3b656042 	.word	0x3b656042
 8011e04:	42c80000 	.word	0x42c80000
 8011e08:	3a83126f 	.word	0x3a83126f
 8011e0c:	3d4ccccd 	.word	0x3d4ccccd
 8011e10:	3f333333 	.word	0x3f333333
 8011e14:	43b40000 	.word	0x43b40000
 8011e18:	ee07 3a90 	vmov	s15, r3
 8011e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e20:	ed5f 5a0e 	vldr	s11, [pc, #-56]	; 8011dec <iNemoEngine_API_Update+0x2e4>
 8011e24:	ed1f 4a0e 	vldr	s8, [pc, #-56]	; 8011df0 <iNemoEngine_API_Update+0x2e8>
 8011e28:	ed1f 3a0b 	vldr	s6, [pc, #-44]	; 8011e00 <iNemoEngine_API_Update+0x2f8>
 8011e2c:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8011dfc <iNemoEngine_API_Update+0x2f4>
 8011e30:	ed1f 6a0f 	vldr	s12, [pc, #-60]	; 8011df8 <iNemoEngine_API_Update+0x2f0>
 8011e34:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 8011df4 <iNemoEngine_API_Update+0x2ec>
 8011e38:	ee27 1a88 	vmul.f32	s2, s15, s16
 8011e3c:	f604 135c 	addw	r3, r4, #2396	; 0x95c
 8011e40:	ee85 5a81 	vdiv.f32	s10, s11, s2
 8011e44:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8011e48:	2700      	movs	r7, #0
 8011e4a:	f8a4 7950 	strh.w	r7, [r4, #2384]	; 0x950
 8011e4e:	f04f 0c00 	mov.w	ip, #0
 8011e52:	f504 6716 	add.w	r7, r4, #2400	; 0x960
 8011e56:	f10d 0e9c 	add.w	lr, sp, #156	; 0x9c
 8011e5a:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 8011e5e:	edd3 5a00 	vldr	s11, [r3]
 8011e62:	f8c3 c000 	str.w	ip, [r3]
 8011e66:	eef1 7ac5 	vsqrt.f32	s15, s10
 8011e6a:	f604 1364 	addw	r3, r4, #2404	; 0x964
 8011e6e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8011e72:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 8011e76:	e888 0007 	stmia.w	r8, {r0, r1, r2}
 8011e7a:	edd7 4a00 	vldr	s9, [r7]
 8011e7e:	f8c7 c000 	str.w	ip, [r7]
 8011e82:	ed93 5a00 	vldr	s10, [r3]
 8011e86:	f8c3 c000 	str.w	ip, [r3]
 8011e8a:	7963      	ldrb	r3, [r4, #5]
 8011e8c:	ee64 4a84 	vmul.f32	s9, s9, s8
 8011e90:	ee25 5a04 	vmul.f32	s10, s10, s8
 8011e94:	ee65 5a84 	vmul.f32	s11, s11, s8
 8011e98:	2b01      	cmp	r3, #1
 8011e9a:	eec3 3a27 	vdiv.f32	s7, s6, s15
 8011e9e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011ea2:	ee27 6a86 	vmul.f32	s12, s15, s12
 8011ea6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011eaa:	edcd 4a2b 	vstr	s9, [sp, #172]	; 0xac
 8011eae:	ed8d 5a2c 	vstr	s10, [sp, #176]	; 0xb0
 8011eb2:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
 8011eb6:	f000 812e 	beq.w	8012116 <iNemoEngine_API_Update+0x60e>
 8011eba:	2b02      	cmp	r3, #2
 8011ebc:	f000 8122 	beq.w	8012104 <iNemoEngine_API_Update+0x5fc>
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	f000 80ef 	beq.w	80120a4 <iNemoEngine_API_Update+0x59c>
 8011ec6:	edd4 0a05 	vldr	s1, [r4, #20]
 8011eca:	ed1f 5a32 	vldr	s10, [pc, #-200]	; 8011e04 <iNemoEngine_API_Update+0x2fc>
 8011ece:	ed1f 0a32 	vldr	s0, [pc, #-200]	; 8011e08 <iNemoEngine_API_Update+0x300>
 8011ed2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8011ed6:	ee60 0a85 	vmul.f32	s1, s1, s10
 8011eda:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011ede:	8863      	ldrh	r3, [r4, #2]
 8011ee0:	1e5a      	subs	r2, r3, #1
 8011ee2:	2a12      	cmp	r2, #18
 8011ee4:	f200 80e7 	bhi.w	80120b6 <iNemoEngine_API_Update+0x5ae>
 8011ee8:	3301      	adds	r3, #1
 8011eea:	b21a      	sxth	r2, r3
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	2b03      	cmp	r3, #3
 8011ef0:	8062      	strh	r2, [r4, #2]
 8011ef2:	f240 8115 	bls.w	8012120 <iNemoEngine_API_Update+0x618>
 8011ef6:	ee05 2a90 	vmov	s11, r2
 8011efa:	ed1f 5a3c 	vldr	s10, [pc, #-240]	; 8011e0c <iNemoEngine_API_Update+0x304>
 8011efe:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8011f02:	ee65 5a85 	vmul.f32	s11, s11, s10
 8011f06:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 8011f0a:	eec3 7aa5 	vdiv.f32	s15, s7, s11
 8011f0e:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
 8011f12:	ed1f 5a41 	vldr	s10, [pc, #-260]	; 8011e10 <iNemoEngine_API_Update+0x308>
 8011f16:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 8011f1a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011f1e:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8011f22:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011f26:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011f2a:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 8011f2e:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 8011f32:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 8011f36:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8011f3a:	aa1a      	add	r2, sp, #104	; 0x68
 8011f3c:	af16      	add	r7, sp, #88	; 0x58
 8011f3e:	e9cd 7200 	strd	r7, r2, [sp]
 8011f42:	ab12      	add	r3, sp, #72	; 0x48
 8011f44:	aa1e      	add	r2, sp, #120	; 0x78
 8011f46:	4641      	mov	r1, r8
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f7fa fd09 	bl	800c960 <kalman_3gyro.constprop.0>
 8011f4e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011f50:	f504 6714 	add.w	r7, r4, #2368	; 0x940
 8011f54:	f8d4 a1bc 	ldr.w	sl, [r4, #444]	; 0x1bc
 8011f58:	f8d4 e1c0 	ldr.w	lr, [r4, #448]	; 0x1c0
 8011f5c:	f8d4 c1c4 	ldr.w	ip, [r4, #452]	; 0x1c4
 8011f60:	f8c7 a000 	str.w	sl, [r7]
 8011f64:	f604 1744 	addw	r7, r4, #2372	; 0x944
 8011f68:	eddd 7a16 	vldr	s15, [sp, #88]	; 0x58
 8011f6c:	f8c7 e000 	str.w	lr, [r7]
 8011f70:	f604 1748 	addw	r7, r4, #2376	; 0x948
 8011f74:	f604 1b34 	addw	fp, r4, #2356	; 0x934
 8011f78:	f8c7 c000 	str.w	ip, [r7]
 8011f7c:	f604 1a38 	addw	sl, r4, #2360	; 0x938
 8011f80:	6030      	str	r0, [r6, #0]
 8011f82:	60f3      	str	r3, [r6, #12]
 8011f84:	6071      	str	r1, [r6, #4]
 8011f86:	60b2      	str	r2, [r6, #8]
 8011f88:	f604 163c 	addw	r6, r4, #2364	; 0x93c
 8011f8c:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 8011f90:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8011f94:	9819      	ldr	r0, [sp, #100]	; 0x64
 8011f96:	ed94 9a75 	vldr	s18, [r4, #468]	; 0x1d4
 8011f9a:	f8d4 794c 	ldr.w	r7, [r4, #2380]	; 0x94c
 8011f9e:	f504 6313 	add.w	r3, r4, #2352	; 0x930
 8011fa2:	edc3 7a00 	vstr	s15, [r3]
 8011fa6:	f8cb e000 	str.w	lr, [fp]
 8011faa:	f8ca c000 	str.w	ip, [sl]
 8011fae:	6030      	str	r0, [r6, #0]
 8011fb0:	e65f      	b.n	8011c72 <iNemoEngine_API_Update+0x16a>
 8011fb2:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8011e14 <iNemoEngine_API_Update+0x30c>
 8011fb6:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011fba:	ed85 8a0d 	vstr	s16, [r5, #52]	; 0x34
 8011fbe:	b041      	add	sp, #260	; 0x104
 8011fc0:	ecbd 8b0c 	vpop	{d8-d13}
 8011fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fc8:	ae0e      	add	r6, sp, #56	; 0x38
 8011fca:	e5ab      	b.n	8011b24 <iNemoEngine_API_Update+0x1c>
 8011fcc:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8011fd0:	ee69 8a28 	vmul.f32	s17, s18, s17
 8011fd4:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011fd8:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8011fdc:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8011fe0:	eee9 7a49 	vfms.f32	s15, s18, s18
 8011fe4:	ee17 0a90 	vmov	r0, s15
 8011fe8:	f7ee faae 	bl	8000548 <__aeabi_f2d>
 8011fec:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8011ff0:	4602      	mov	r2, r0
 8011ff2:	460b      	mov	r3, r1
 8011ff4:	ee17 0a90 	vmov	r0, s15
 8011ff8:	ec43 2b18 	vmov	d8, r2, r3
 8011ffc:	f7ee faa4 	bl	8000548 <__aeabi_f2d>
 8012000:	eeb0 1a48 	vmov.f32	s2, s16
 8012004:	eef0 1a68 	vmov.f32	s3, s17
 8012008:	ec41 0b10 	vmov	d0, r0, r1
 801200c:	f003 fcb0 	bl	8015970 <atan2>
 8012010:	a3f3      	add	r3, pc, #972	; (adr r3, 80123e0 <iNemoEngine_API_Update+0x8d8>)
 8012012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012016:	ec51 0b10 	vmov	r0, r1, d0
 801201a:	f7ee faed 	bl	80005f8 <__aeabi_dmul>
 801201e:	4bf2      	ldr	r3, [pc, #968]	; (80123e8 <iNemoEngine_API_Update+0x8e0>)
 8012020:	2200      	movs	r2, #0
 8012022:	f7ee f931 	bl	8000288 <__aeabi_dsub>
 8012026:	f7ee fdbf 	bl	8000ba8 <__aeabi_d2f>
 801202a:	ee08 0a10 	vmov	s16, r0
 801202e:	e6a0      	b.n	8011d72 <iNemoEngine_API_Update+0x26a>
 8012030:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8012034:	ee69 8a28 	vmul.f32	s17, s18, s17
 8012038:	eee9 7aa9 	vfma.f32	s15, s19, s19
 801203c:	eee9 8a8a 	vfma.f32	s17, s19, s20
 8012040:	eeea 7a4a 	vfms.f32	s15, s20, s20
 8012044:	eee9 7a49 	vfms.f32	s15, s18, s18
 8012048:	ee17 0a90 	vmov	r0, s15
 801204c:	f7ee fa7c 	bl	8000548 <__aeabi_f2d>
 8012050:	ee78 7aa8 	vadd.f32	s15, s17, s17
 8012054:	4602      	mov	r2, r0
 8012056:	460b      	mov	r3, r1
 8012058:	ee17 0a90 	vmov	r0, s15
 801205c:	ec43 2b18 	vmov	d8, r2, r3
 8012060:	f7ee fa72 	bl	8000548 <__aeabi_f2d>
 8012064:	eeb0 1a48 	vmov.f32	s2, s16
 8012068:	eef0 1a68 	vmov.f32	s3, s17
 801206c:	ec41 0b10 	vmov	d0, r0, r1
 8012070:	f003 fc7e 	bl	8015970 <atan2>
 8012074:	a3da      	add	r3, pc, #872	; (adr r3, 80123e0 <iNemoEngine_API_Update+0x8d8>)
 8012076:	e9d3 2300 	ldrd	r2, r3, [r3]
 801207a:	ec51 0b10 	vmov	r0, r1, d0
 801207e:	f7ee fabb 	bl	80005f8 <__aeabi_dmul>
 8012082:	4bd9      	ldr	r3, [pc, #868]	; (80123e8 <iNemoEngine_API_Update+0x8e0>)
 8012084:	2200      	movs	r2, #0
 8012086:	f7ee f901 	bl	800028c <__adddf3>
 801208a:	f7ee fd8d 	bl	8000ba8 <__aeabi_d2f>
 801208e:	ee08 0a10 	vmov	s16, r0
 8012092:	e66e      	b.n	8011d72 <iNemoEngine_API_Update+0x26a>
 8012094:	f9b4 3974 	ldrsh.w	r3, [r4, #2420]	; 0x974
 8012098:	2b00      	cmp	r3, #0
 801209a:	dd44      	ble.n	8012126 <iNemoEngine_API_Update+0x61e>
 801209c:	3b01      	subs	r3, #1
 801209e:	f8a4 3974 	strh.w	r3, [r4, #2420]	; 0x974
 80120a2:	e55c      	b.n	8011b5e <iNemoEngine_API_Update+0x56>
 80120a4:	8863      	ldrh	r3, [r4, #2]
 80120a6:	eddf 0ad1 	vldr	s1, [pc, #836]	; 80123ec <iNemoEngine_API_Update+0x8e4>
 80120aa:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 80123f0 <iNemoEngine_API_Update+0x8e8>
 80120ae:	1e5a      	subs	r2, r3, #1
 80120b0:	2a12      	cmp	r2, #18
 80120b2:	f67f af19 	bls.w	8011ee8 <iNemoEngine_API_Update+0x3e0>
 80120b6:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 80120ba:	eddf 2ace 	vldr	s5, [pc, #824]	; 80123f4 <iNemoEngine_API_Update+0x8ec>
 80120be:	edd4 4a0b 	vldr	s9, [r4, #44]	; 0x2c
 80120c2:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
 80120c6:	ee34 4a22 	vadd.f32	s8, s8, s5
 80120ca:	ee64 7aa6 	vmul.f32	s15, s9, s13
 80120ce:	eec3 4a84 	vdiv.f32	s9, s7, s8
 80120d2:	2300      	movs	r3, #0
 80120d4:	8063      	strh	r3, [r4, #2]
 80120d6:	ed94 5a0a 	vldr	s10, [r4, #40]	; 0x28
 80120da:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
 80120de:	ed9f 3ac6 	vldr	s6, [pc, #792]	; 80123f8 <iNemoEngine_API_Update+0x8f0>
 80120e2:	edcd 7a1f 	vstr	s15, [sp, #124]	; 0x7c
 80120e6:	ee65 6a26 	vmul.f32	s13, s10, s13
 80120ea:	ee25 6a86 	vmul.f32	s12, s11, s12
 80120ee:	ee27 7a03 	vmul.f32	s14, s14, s6
 80120f2:	edcd 4a1e 	vstr	s9, [sp, #120]	; 0x78
 80120f6:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 80120fa:	ed8d 6a22 	vstr	s12, [sp, #136]	; 0x88
 80120fe:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8012102:	e71a      	b.n	8011f3a <iNemoEngine_API_Update+0x432>
 8012104:	eef1 5a04 	vmov.f32	s11, #20	; 0x40a00000  5.0
 8012108:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801210c:	edd4 0a05 	vldr	s1, [r4, #20]
 8012110:	ed9f 0aba 	vldr	s0, [pc, #744]	; 80123fc <iNemoEngine_API_Update+0x8f4>
 8012114:	e6e3      	b.n	8011ede <iNemoEngine_API_Update+0x3d6>
 8012116:	edd4 0a05 	vldr	s1, [r4, #20]
 801211a:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8012400 <iNemoEngine_API_Update+0x8f8>
 801211e:	e6de      	b.n	8011ede <iNemoEngine_API_Update+0x3d6>
 8012120:	eddf 5ab8 	vldr	s11, [pc, #736]	; 8012404 <iNemoEngine_API_Update+0x8fc>
 8012124:	e6ef      	b.n	8011f06 <iNemoEngine_API_Update+0x3fe>
 8012126:	f204 47bc 	addw	r7, r4, #1212	; 0x4bc
 801212a:	f204 42ec 	addw	r2, r4, #1260	; 0x4ec
 801212e:	f204 632c 	addw	r3, r4, #1580	; 0x62c
 8012132:	ed97 5a00 	vldr	s10, [r7]
 8012136:	ed92 da00 	vldr	s26, [r2]
 801213a:	ed93 6a00 	vldr	s12, [r3]
 801213e:	ed9f 0aab 	vldr	s0, [pc, #684]	; 80123ec <iNemoEngine_API_Update+0x8e4>
 8012142:	f504 619c 	add.w	r1, r4, #1248	; 0x4e0
 8012146:	f504 67c7 	add.w	r7, r4, #1592	; 0x638
 801214a:	f504 6297 	add.w	r2, r4, #1208	; 0x4b8
 801214e:	f204 43c4 	addw	r3, r4, #1220	; 0x4c4
 8012152:	ed91 3a00 	vldr	s6, [r1]
 8012156:	ed92 1a00 	vldr	s2, [r2]
 801215a:	ed97 7a00 	vldr	s14, [r7]
 801215e:	edd3 3a00 	vldr	s7, [r3]
 8012162:	f504 6099 	add.w	r0, r4, #1224	; 0x4c8
 8012166:	f204 615c 	addw	r1, r4, #1628	; 0x65c
 801216a:	eeb8 4a00 	vmov.f32	s8, #128	; 0xc0000000 -2.0
 801216e:	ed91 ba00 	vldr	s22, [r1]
 8012172:	edd0 6a00 	vldr	s13, [r0]
 8012176:	f504 619d 	add.w	r1, r4, #1256	; 0x4e8
 801217a:	f204 42b4 	addw	r2, r4, #1204	; 0x4b4
 801217e:	edd1 aa00 	vldr	s21, [r1]
 8012182:	ed92 2a00 	vldr	s4, [r2]
 8012186:	ee96 7a04 	vfnms.f32	s14, s12, s8
 801218a:	f504 60ca 	add.w	r0, r4, #1616	; 0x650
 801218e:	f504 61c5 	add.w	r1, r4, #1576	; 0x628
 8012192:	eed1 3a04 	vfnms.f32	s7, s2, s8
 8012196:	f204 6234 	addw	r2, r4, #1588	; 0x634
 801219a:	f504 6398 	add.w	r3, r4, #1216	; 0x4c0
 801219e:	edd0 7a00 	vldr	s15, [r0]
 80121a2:	edd2 1a00 	vldr	s3, [r2]
 80121a6:	ed93 ca00 	vldr	s24, [r3]
 80121aa:	eed5 6a04 	vfnms.f32	s13, s10, s8
 80121ae:	f204 40dc 	addw	r0, r4, #1244	; 0x4dc
 80121b2:	f204 47e4 	addw	r7, r4, #1252	; 0x4e4
 80121b6:	ed91 5a00 	vldr	s10, [r1]
 80121ba:	edd0 5a00 	vldr	s11, [r0]
 80121be:	edd7 9a00 	vldr	s19, [r7]
 80121c2:	f204 6024 	addw	r0, r4, #1572	; 0x624
 80121c6:	eed5 1a04 	vfnms.f32	s3, s10, s8
 80121ca:	f504 639e 	add.w	r3, r4, #1264	; 0x4f0
 80121ce:	f504 67f3 	add.w	r7, r4, #1944	; 0x798
 80121d2:	edd0 2a00 	vldr	s5, [r0]
 80121d6:	edd3 0a00 	vldr	s1, [r3]
 80121da:	f204 70a4 	addw	r0, r4, #1956	; 0x7a4
 80121de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121e2:	ee73 3aa5 	vadd.f32	s7, s7, s11
 80121e6:	edd7 7a00 	vldr	s15, [r7]
 80121ea:	edd0 5a00 	vldr	s11, [r0]
 80121ee:	f504 63cb 	add.w	r3, r4, #1624	; 0x658
 80121f2:	f504 6ac6 	add.w	sl, r4, #1584	; 0x630
 80121f6:	f204 693c 	addw	r9, r4, #1596	; 0x63c
 80121fa:	ed93 6a00 	vldr	s12, [r3]
 80121fe:	edda ba00 	vldr	s23, [sl]
 8012202:	ed99 5a00 	vldr	s10, [r9]
 8012206:	ee76 6a83 	vadd.f32	s13, s13, s6
 801220a:	f204 4ccc 	addw	ip, r4, #1228	; 0x4cc
 801220e:	f504 63f5 	add.w	r3, r4, #1960	; 0x7a8
 8012212:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
 8012216:	eed7 5a84 	vfnms.f32	s11, s15, s8
 801221a:	f504 68cc 	add.w	r8, r4, #1632	; 0x660
 801221e:	f204 6e54 	addw	lr, r4, #1620	; 0x654
 8012222:	eddc 4a00 	vldr	s9, [ip]
 8012226:	edd3 7a00 	vldr	s15, [r3]
 801222a:	ed98 1a00 	vldr	s2, [r8]
 801222e:	edde 8a00 	vldr	s17, [lr]
 8012232:	f204 7c94 	addw	ip, r4, #1940	; 0x794
 8012236:	f504 61f9 	add.w	r1, r4, #1992	; 0x7c8
 801223a:	f204 72bc 	addw	r2, r4, #1980	; 0x7bc
 801223e:	f204 739c 	addw	r3, r4, #1948	; 0x79c
 8012242:	f204 6b4c 	addw	fp, r4, #1612	; 0x64c
 8012246:	ee9b 5a84 	vfnms.f32	s10, s23, s8
 801224a:	f504 68f8 	add.w	r8, r4, #1984	; 0x7c0
 801224e:	f204 7ecc 	addw	lr, r4, #1996	; 0x7cc
 8012252:	ed9c aa00 	vldr	s20, [ip]
 8012256:	eeed 6a03 	vfma.f32	s13, s26, s6
 801225a:	f504 67f4 	add.w	r7, r4, #1952	; 0x7a0
 801225e:	f204 7cac 	addw	ip, r4, #1964	; 0x7ac
 8012262:	ed92 da00 	vldr	s26, [r2]
 8012266:	eeab 7a03 	vfma.f32	s14, s22, s6
 801226a:	f204 70c4 	addw	r0, r4, #1988	; 0x7c4
 801226e:	ed91 ba00 	vldr	s22, [r1]
 8012272:	eef0 ca61 	vmov.f32	s25, s3
 8012276:	eddb 1a00 	vldr	s3, [fp]
 801227a:	edd3 ba00 	vldr	s23, [r3]
 801227e:	f9b4 2976 	ldrsh.w	r2, [r4, #2422]	; 0x976
 8012282:	eedb 7a84 	vfnms.f32	s15, s23, s8
 8012286:	f504 61fa 	add.w	r1, r4, #2000	; 0x7d0
 801228a:	1c53      	adds	r3, r2, #1
 801228c:	eeea 3a83 	vfma.f32	s7, s21, s6
 8012290:	ee7c 1aa1 	vadd.f32	s3, s25, s3
 8012294:	edd8 aa00 	vldr	s21, [r8]
 8012298:	eee6 1a03 	vfma.f32	s3, s12, s6
 801229c:	ee77 7aaa 	vadd.f32	s15, s15, s21
 80122a0:	ed9e 6a00 	vldr	s12, [lr]
 80122a4:	edd7 aa00 	vldr	s21, [r7]
 80122a8:	eee6 7a03 	vfma.f32	s15, s12, s6
 80122ac:	f604 176c 	addw	r7, r4, #2412	; 0x96c
 80122b0:	ed9c 6a00 	vldr	s12, [ip]
 80122b4:	eedc 4a04 	vfnms.f32	s9, s24, s8
 80122b8:	ee9a 6a84 	vfnms.f32	s12, s21, s8
 80122bc:	ee75 5a8d 	vadd.f32	s11, s11, s26
 80122c0:	ee2a 4a00 	vmul.f32	s8, s20, s0
 80122c4:	ee22 2a00 	vmul.f32	s4, s4, s0
 80122c8:	ee62 2a80 	vmul.f32	s5, s5, s0
 80122cc:	eeeb 5a03 	vfma.f32	s11, s22, s6
 80122d0:	ed90 0a00 	vldr	s0, [r0]
 80122d4:	ee64 7a27 	vmul.f32	s15, s8, s15
 80122d8:	ee36 6a00 	vadd.f32	s12, s12, s0
 80122dc:	ee74 4aa9 	vadd.f32	s9, s9, s19
 80122e0:	ed91 0a00 	vldr	s0, [r1]
 80122e4:	ee35 5a28 	vadd.f32	s10, s10, s17
 80122e8:	ee66 6a82 	vmul.f32	s13, s13, s4
 80122ec:	ee22 7a87 	vmul.f32	s14, s5, s14
 80122f0:	ee64 5a25 	vmul.f32	s11, s8, s11
 80122f4:	eee0 4a83 	vfma.f32	s9, s1, s6
 80122f8:	f604 1068 	addw	r0, r4, #2408	; 0x968
 80122fc:	f504 6117 	add.w	r1, r4, #2416	; 0x970
 8012300:	eea1 5a03 	vfma.f32	s10, s2, s6
 8012304:	eea0 6a03 	vfma.f32	s12, s0, s6
 8012308:	ee66 6aa6 	vmul.f32	s13, s13, s13
 801230c:	ee63 3a82 	vmul.f32	s7, s7, s4
 8012310:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012314:	ee62 1aa1 	vmul.f32	s3, s5, s3
 8012318:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801231c:	eee3 6aa3 	vfma.f32	s13, s7, s7
 8012320:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8012324:	eea1 7aa1 	vfma.f32	s14, s3, s3
 8012328:	ee24 6a06 	vmul.f32	s12, s8, s12
 801232c:	ee62 4a24 	vmul.f32	s9, s4, s9
 8012330:	ee22 5a85 	vmul.f32	s10, s5, s10
 8012334:	eee4 6aa4 	vfma.f32	s13, s9, s9
 8012338:	eea5 7a05 	vfma.f32	s14, s10, s10
 801233c:	eee6 7a06 	vfma.f32	s15, s12, s12
 8012340:	eeb1 6ae6 	vsqrt.f32	s12, s13
 8012344:	eef1 6ac7 	vsqrt.f32	s13, s14
 8012348:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801234c:	ee07 3a90 	vmov	s15, r3
 8012350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012354:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8012358:	ee85 5aa7 	vdiv.f32	s10, s11, s15
 801235c:	b21b      	sxth	r3, r3
 801235e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8012362:	ee07 2a90 	vmov	s15, r2
 8012366:	ed90 4a00 	vldr	s8, [r0]
 801236a:	edd1 4a00 	vldr	s9, [r1]
 801236e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8012372:	edd7 7a00 	vldr	s15, [r7]
 8012376:	eee5 6a84 	vfma.f32	s13, s11, s8
 801237a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 801237e:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8012382:	ee66 7a05 	vmul.f32	s15, s12, s10
 8012386:	ee66 6a85 	vmul.f32	s13, s13, s10
 801238a:	ee27 7a05 	vmul.f32	s14, s14, s10
 801238e:	edc7 7a00 	vstr	s15, [r7]
 8012392:	edc0 6a00 	vstr	s13, [r0]
 8012396:	ed81 7a00 	vstr	s14, [r1]
 801239a:	f8a4 3976 	strh.w	r3, [r4, #2422]	; 0x976
 801239e:	f47f abde 	bne.w	8011b5e <iNemoEngine_API_Update+0x56>
 80123a2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80123a6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80123aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80123ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80123b2:	2300      	movs	r3, #0
 80123b4:	2200      	movs	r2, #0
 80123b6:	edc4 6a07 	vstr	s13, [r4, #28]
 80123ba:	ed84 7a08 	vstr	s14, [r4, #32]
 80123be:	edc4 7a06 	vstr	s15, [r4, #24]
 80123c2:	603b      	str	r3, [r7, #0]
 80123c4:	6003      	str	r3, [r0, #0]
 80123c6:	600b      	str	r3, [r1, #0]
 80123c8:	f8a4 2976 	strh.w	r2, [r4, #2422]	; 0x976
 80123cc:	f884 2978 	strb.w	r2, [r4, #2424]	; 0x978
 80123d0:	f7ff bbc5 	b.w	8011b5e <iNemoEngine_API_Update+0x56>
 80123d4:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8012408 <iNemoEngine_API_Update+0x900>
 80123d8:	e4da      	b.n	8011d90 <iNemoEngine_API_Update+0x288>
 80123da:	bf00      	nop
 80123dc:	f3af 8000 	nop.w
 80123e0:	20000000 	.word	0x20000000
 80123e4:	404ca5dc 	.word	0x404ca5dc
 80123e8:	40568000 	.word	0x40568000
 80123ec:	3dcccccd 	.word	0x3dcccccd
 80123f0:	3a83126f 	.word	0x3a83126f
 80123f4:	358637bd 	.word	0x358637bd
 80123f8:	3f333333 	.word	0x3f333333
 80123fc:	3727c5ac 	.word	0x3727c5ac
 8012400:	3ac49ba6 	.word	0x3ac49ba6
 8012404:	3e4ccccd 	.word	0x3e4ccccd
 8012408:	00000000 	.word	0x00000000

0801240c <MEMS_getSensorData_I16>:
 801240c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012410:	f8b0 e008 	ldrh.w	lr, [r0, #8]
 8012414:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8012418:	68c5      	ldr	r5, [r0, #12]
 801241a:	4596      	cmp	lr, r2
 801241c:	fa1f f882 	uxth.w	r8, r2
 8012420:	d94d      	bls.n	80124be <MEMS_getSensorData_I16+0xb2>
 8012422:	f10e 33ff 	add.w	r3, lr, #4294967295
 8012426:	fb04 5313 	mls	r3, r4, r3, r5
 801242a:	ebae 0c02 	sub.w	ip, lr, r2
 801242e:	f8a1 8004 	strh.w	r8, [r1, #4]
 8012432:	600b      	str	r3, [r1, #0]
 8012434:	fa5f fc8c 	uxtb.w	ip, ip
 8012438:	4647      	mov	r7, r8
 801243a:	f1b8 0f00 	cmp.w	r8, #0
 801243e:	d017      	beq.n	8012470 <MEMS_getSensorData_I16+0x64>
 8012440:	688e      	ldr	r6, [r1, #8]
 8012442:	6905      	ldr	r5, [r0, #16]
 8012444:	2300      	movs	r3, #0
 8012446:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
 801244a:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 801244e:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8012452:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
 8012456:	f8d4 9002 	ldr.w	r9, [r4, #2]
 801245a:	f8c1 9002 	str.w	r9, [r1, #2]
 801245e:	3301      	adds	r3, #1
 8012460:	88e4      	ldrh	r4, [r4, #6]
 8012462:	80cc      	strh	r4, [r1, #6]
 8012464:	b2d9      	uxtb	r1, r3
 8012466:	42b9      	cmp	r1, r7
 8012468:	460b      	mov	r3, r1
 801246a:	d3ec      	bcc.n	8012446 <MEMS_getSensorData_I16+0x3a>
 801246c:	45c6      	cmp	lr, r8
 801246e:	d934      	bls.n	80124da <MEMS_getSensorData_I16+0xce>
 8012470:	ebae 0308 	sub.w	r3, lr, r8
 8012474:	b29b      	uxth	r3, r3
 8012476:	8103      	strh	r3, [r0, #8]
 8012478:	f1bc 0f00 	cmp.w	ip, #0
 801247c:	d01d      	beq.n	80124ba <MEMS_getSensorData_I16+0xae>
 801247e:	6903      	ldr	r3, [r0, #16]
 8012480:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012484:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8012488:	f103 000a 	add.w	r0, r3, #10
 801248c:	fa5f fc8c 	uxtb.w	ip, ip
 8012490:	3202      	adds	r2, #2
 8012492:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8012496:	3302      	adds	r3, #2
 8012498:	2400      	movs	r4, #0
 801249a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801249e:	f803 1c02 	strb.w	r1, [r3, #-2]
 80124a2:	6811      	ldr	r1, [r2, #0]
 80124a4:	6019      	str	r1, [r3, #0]
 80124a6:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 80124aa:	8099      	strh	r1, [r3, #4]
 80124ac:	3308      	adds	r3, #8
 80124ae:	4283      	cmp	r3, r0
 80124b0:	f802 4c02 	strb.w	r4, [r2, #-2]
 80124b4:	f102 0208 	add.w	r2, r2, #8
 80124b8:	d1ef      	bne.n	801249a <MEMS_getSensorData_I16+0x8e>
 80124ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124be:	f10e 33ff 	add.w	r3, lr, #4294967295
 80124c2:	fb04 5313 	mls	r3, r4, r3, r5
 80124c6:	f8a1 e004 	strh.w	lr, [r1, #4]
 80124ca:	600b      	str	r3, [r1, #0]
 80124cc:	f1be 0f00 	cmp.w	lr, #0
 80124d0:	d005      	beq.n	80124de <MEMS_getSensorData_I16+0xd2>
 80124d2:	4677      	mov	r7, lr
 80124d4:	f04f 0c00 	mov.w	ip, #0
 80124d8:	e7b2      	b.n	8012440 <MEMS_getSensorData_I16+0x34>
 80124da:	2300      	movs	r3, #0
 80124dc:	e7cb      	b.n	8012476 <MEMS_getSensorData_I16+0x6a>
 80124de:	f8a0 e008 	strh.w	lr, [r0, #8]
 80124e2:	e7ea      	b.n	80124ba <MEMS_getSensorData_I16+0xae>

080124e4 <MEMS_SolveLinearEq>:
 80124e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124e8:	ed2d 8b0c 	vpush	{d8-d13}
 80124ec:	4617      	mov	r7, r2
 80124ee:	2400      	movs	r4, #0
 80124f0:	b0a9      	sub	sp, #164	; 0xa4
 80124f2:	2200      	movs	r2, #0
 80124f4:	601a      	str	r2, [r3, #0]
 80124f6:	460d      	mov	r5, r1
 80124f8:	2240      	movs	r2, #64	; 0x40
 80124fa:	4621      	mov	r1, r4
 80124fc:	4680      	mov	r8, r0
 80124fe:	603c      	str	r4, [r7, #0]
 8012500:	607c      	str	r4, [r7, #4]
 8012502:	60bc      	str	r4, [r7, #8]
 8012504:	60fc      	str	r4, [r7, #12]
 8012506:	a808      	add	r0, sp, #32
 8012508:	461e      	mov	r6, r3
 801250a:	eeb0 8a40 	vmov.f32	s16, s0
 801250e:	e9cd 4400 	strd	r4, r4, [sp]
 8012512:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8012516:	f004 ffa3 	bl	8017460 <memset>
 801251a:	4621      	mov	r1, r4
 801251c:	a818      	add	r0, sp, #96	; 0x60
 801251e:	2240      	movs	r2, #64	; 0x40
 8012520:	f004 ff9e 	bl	8017460 <memset>
 8012524:	edd5 2a03 	vldr	s5, [r5, #12]
 8012528:	eddf 7ae4 	vldr	s15, [pc, #912]	; 80128bc <MEMS_SolveLinearEq+0x3d8>
 801252c:	eef4 2ae7 	vcmpe.f32	s5, s15
 8012530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012534:	d47e      	bmi.n	8012634 <MEMS_SolveLinearEq+0x150>
 8012536:	f898 1000 	ldrb.w	r1, [r8]
 801253a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801253e:	f998 3002 	ldrsb.w	r3, [r8, #2]
 8012542:	4291      	cmp	r1, r2
 8012544:	d07c      	beq.n	8012640 <MEMS_SolveLinearEq+0x15c>
 8012546:	3301      	adds	r3, #1
 8012548:	1a58      	subs	r0, r3, r1
 801254a:	fb90 f3f2 	sdiv	r3, r0, r2
 801254e:	fb02 0313 	mls	r3, r2, r3, r0
 8012552:	2b00      	cmp	r3, #0
 8012554:	bfb8      	it	lt
 8012556:	189b      	addlt	r3, r3, r2
 8012558:	b21b      	sxth	r3, r3
 801255a:	2900      	cmp	r1, #0
 801255c:	f000 81d6 	beq.w	801290c <MEMS_SolveLinearEq+0x428>
 8012560:	3901      	subs	r1, #1
 8012562:	b2c9      	uxtb	r1, r1
 8012564:	3101      	adds	r1, #1
 8012566:	edd5 3a00 	vldr	s7, [r5]
 801256a:	ed95 4a01 	vldr	s8, [r5, #4]
 801256e:	edd5 4a02 	vldr	s9, [r5, #8]
 8012572:	eddd 5a09 	vldr	s11, [sp, #36]	; 0x24
 8012576:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 80128c0 <MEMS_SolveLinearEq+0x3dc>
 801257a:	4419      	add	r1, r3
 801257c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8012580:	fb93 f4f2 	sdiv	r4, r3, r2
 8012584:	fb02 3414 	mls	r4, r2, r4, r3
 8012588:	b2e4      	uxtb	r4, r4
 801258a:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
 801258e:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
 8012592:	ee07 0a90 	vmov	s15, r0
 8012596:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801259a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801259e:	ee06 0a10 	vmov	s12, r0
 80125a2:	ee67 7a88 	vmul.f32	s15, s15, s16
 80125a6:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
 80125aa:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80125ae:	ee77 6ac4 	vsub.f32	s13, s15, s8
 80125b2:	ee26 6a08 	vmul.f32	s12, s12, s16
 80125b6:	ee07 0a10 	vmov	s14, r0
 80125ba:	ee36 5a63 	vsub.f32	s10, s12, s7
 80125be:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80125c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80125c6:	eee5 6a05 	vfma.f32	s13, s10, s10
 80125ca:	ee27 7a08 	vmul.f32	s14, s14, s16
 80125ce:	ee33 6ac6 	vsub.f32	s12, s7, s12
 80125d2:	ee74 aac7 	vsub.f32	s21, s9, s14
 80125d6:	ee37 7a64 	vsub.f32	s14, s14, s9
 80125da:	ee74 7a67 	vsub.f32	s15, s8, s15
 80125de:	eee7 6a07 	vfma.f32	s13, s14, s14
 80125e2:	eef4 6ac2 	vcmpe.f32	s13, s4
 80125e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ea:	d531      	bpl.n	8012650 <MEMS_SolveLinearEq+0x16c>
 80125ec:	3301      	adds	r3, #1
 80125ee:	4299      	cmp	r1, r3
 80125f0:	d1c6      	bne.n	8012580 <MEMS_SolveLinearEq+0x9c>
 80125f2:	eef0 7a65 	vmov.f32	s15, s11
 80125f6:	2101      	movs	r1, #1
 80125f8:	4608      	mov	r0, r1
 80125fa:	2200      	movs	r2, #0
 80125fc:	e006      	b.n	801260c <MEMS_SolveLinearEq+0x128>
 80125fe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012602:	ac28      	add	r4, sp, #160	; 0xa0
 8012604:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012608:	ed53 7a20 	vldr	s15, [r3, #-128]	; 0xffffff80
 801260c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
 8012610:	3001      	adds	r0, #1
 8012612:	ac28      	add	r4, sp, #160	; 0xa0
 8012614:	b2c0      	uxtb	r0, r0
 8012616:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801261a:	2804      	cmp	r0, #4
 801261c:	ed43 7a20 	vstr	s15, [r3, #-128]	; 0xffffff80
 8012620:	4613      	mov	r3, r2
 8012622:	d1ec      	bne.n	80125fe <MEMS_SolveLinearEq+0x11a>
 8012624:	1c48      	adds	r0, r1, #1
 8012626:	b2c0      	uxtb	r0, r0
 8012628:	2804      	cmp	r0, #4
 801262a:	d076      	beq.n	801271a <MEMS_SolveLinearEq+0x236>
 801262c:	460b      	mov	r3, r1
 801262e:	460a      	mov	r2, r1
 8012630:	4601      	mov	r1, r0
 8012632:	e7e4      	b.n	80125fe <MEMS_SolveLinearEq+0x11a>
 8012634:	2000      	movs	r0, #0
 8012636:	b029      	add	sp, #164	; 0xa4
 8012638:	ecbd 8b0c 	vpop	{d8-d13}
 801263c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012640:	1c5a      	adds	r2, r3, #1
 8012642:	fb92 f3f1 	sdiv	r3, r2, r1
 8012646:	fb01 2313 	mls	r3, r1, r3, r2
 801264a:	b21b      	sxth	r3, r3
 801264c:	460a      	mov	r2, r1
 801264e:	e784      	b.n	801255a <MEMS_SolveLinearEq+0x76>
 8012650:	eef1 cae6 	vsqrt.f32	s25, s13
 8012654:	3301      	adds	r3, #1
 8012656:	428b      	cmp	r3, r1
 8012658:	ed9d ca00 	vldr	s24, [sp]
 801265c:	eddd ba08 	vldr	s23, [sp, #32]
 8012660:	ed9d ba0a 	vldr	s22, [sp, #40]	; 0x28
 8012664:	ed9d aa01 	vldr	s20, [sp, #4]
 8012668:	eddd 9a02 	vldr	s19, [sp, #8]
 801266c:	ed9d 9a0d 	vldr	s18, [sp, #52]	; 0x34
 8012670:	eddd 8a0e 	vldr	s17, [sp, #56]	; 0x38
 8012674:	ed9d 3a12 	vldr	s6, [sp, #72]	; 0x48
 8012678:	ed9d 0a03 	vldr	s0, [sp, #12]
 801267c:	eddd 0a0b 	vldr	s1, [sp, #44]	; 0x2c
 8012680:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 8012684:	ed9d 5a13 	vldr	s10, [sp, #76]	; 0x4c
 8012688:	ed9d da17 	vldr	s26, [sp, #92]	; 0x5c
 801268c:	eec1 6aac 	vdiv.f32	s13, s3, s25
 8012690:	ee3d da21 	vadd.f32	s26, s26, s3
 8012694:	ee26 7a26 	vmul.f32	s14, s12, s13
 8012698:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801269c:	ee6a 6aa6 	vmul.f32	s13, s21, s13
 80126a0:	ee72 aaec 	vsub.f32	s21, s5, s25
 80126a4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80126a8:	eea7 ba26 	vfma.f32	s22, s14, s13
 80126ac:	eee7 8aa6 	vfma.f32	s17, s15, s13
 80126b0:	eeaa ca87 	vfma.f32	s24, s21, s14
 80126b4:	eee7 ba07 	vfma.f32	s23, s14, s14
 80126b8:	eeaa aaa7 	vfma.f32	s20, s21, s15
 80126bc:	eeea 9aa6 	vfma.f32	s19, s21, s13
 80126c0:	eea7 9aa7 	vfma.f32	s18, s15, s15
 80126c4:	eea6 3aa6 	vfma.f32	s6, s13, s13
 80126c8:	ee3c 6ae2 	vsub.f32	s12, s25, s5
 80126cc:	ee30 7ac7 	vsub.f32	s14, s1, s14
 80126d0:	ee30 6a06 	vadd.f32	s12, s0, s12
 80126d4:	ee71 7a67 	vsub.f32	s15, s2, s15
 80126d8:	ee75 6a66 	vsub.f32	s13, s10, s13
 80126dc:	ed8d da17 	vstr	s26, [sp, #92]	; 0x5c
 80126e0:	edcd 5a09 	vstr	s11, [sp, #36]	; 0x24
 80126e4:	ed8d ca00 	vstr	s24, [sp]
 80126e8:	edcd ba08 	vstr	s23, [sp, #32]
 80126ec:	ed8d ba0a 	vstr	s22, [sp, #40]	; 0x28
 80126f0:	ed8d aa01 	vstr	s20, [sp, #4]
 80126f4:	edcd 9a02 	vstr	s19, [sp, #8]
 80126f8:	ed8d 9a0d 	vstr	s18, [sp, #52]	; 0x34
 80126fc:	edcd 8a0e 	vstr	s17, [sp, #56]	; 0x38
 8012700:	ed8d 6a03 	vstr	s12, [sp, #12]
 8012704:	ed8d 7a0b 	vstr	s14, [sp, #44]	; 0x2c
 8012708:	edcd 7a0f 	vstr	s15, [sp, #60]	; 0x3c
 801270c:	ed8d 3a12 	vstr	s6, [sp, #72]	; 0x48
 8012710:	edcd 6a13 	vstr	s13, [sp, #76]	; 0x4c
 8012714:	f47f af34 	bne.w	8012580 <MEMS_SolveLinearEq+0x9c>
 8012718:	e76b      	b.n	80125f2 <MEMS_SolveLinearEq+0x10e>
 801271a:	2240      	movs	r2, #64	; 0x40
 801271c:	2100      	movs	r1, #0
 801271e:	a818      	add	r0, sp, #96	; 0x60
 8012720:	f004 fe9e 	bl	8017460 <memset>
 8012724:	ab08      	add	r3, sp, #32
 8012726:	ed9f 5a67 	vldr	s10, [pc, #412]	; 80128c4 <MEMS_SolveLinearEq+0x3e0>
 801272a:	4618      	mov	r0, r3
 801272c:	aa18      	add	r2, sp, #96	; 0x60
 801272e:	2100      	movs	r1, #0
 8012730:	b24c      	sxtb	r4, r1
 8012732:	2900      	cmp	r1, #0
 8012734:	f000 80b5 	beq.w	80128a2 <MEMS_SolveLinearEq+0x3be>
 8012738:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801273c:	eeb0 7ae7 	vabs.f32	s14, s15
 8012740:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012748:	f53f af74 	bmi.w	8012634 <MEMS_SolveLinearEq+0x150>
 801274c:	ed93 7a00 	vldr	s14, [r3]
 8012750:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8012754:	2c01      	cmp	r4, #1
 8012756:	edc2 6a00 	vstr	s13, [r2]
 801275a:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 801275e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012762:	f000 80b5 	beq.w	80128d0 <MEMS_SolveLinearEq+0x3ec>
 8012766:	ed9d 6a1d 	vldr	s12, [sp, #116]	; 0x74
 801276a:	eeb0 7ac6 	vabs.f32	s14, s12
 801276e:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8012772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012776:	f53f af5d 	bmi.w	8012634 <MEMS_SolveLinearEq+0x150>
 801277a:	ed93 7a01 	vldr	s14, [r3, #4]
 801277e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012782:	2c02      	cmp	r4, #2
 8012784:	eec7 7a06 	vdiv.f32	s15, s14, s12
 8012788:	edc2 7a01 	vstr	s15, [r2, #4]
 801278c:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 8012790:	ed9d 6a20 	vldr	s12, [sp, #128]	; 0x80
 8012794:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012798:	eea6 7a26 	vfma.f32	s14, s12, s13
 801279c:	f000 80a7 	beq.w	80128ee <MEMS_SolveLinearEq+0x40a>
 80127a0:	eddd 4a22 	vldr	s9, [sp, #136]	; 0x88
 80127a4:	eeb0 6ae4 	vabs.f32	s12, s9
 80127a8:	eeb4 6ac5 	vcmpe.f32	s12, s10
 80127ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127b0:	f53f af40 	bmi.w	8012634 <MEMS_SolveLinearEq+0x150>
 80127b4:	edd3 5a02 	vldr	s11, [r3, #8]
 80127b8:	ed90 6a00 	vldr	s12, [r0]
 80127bc:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80127c0:	eec7 5a24 	vdiv.f32	s11, s14, s9
 80127c4:	edc2 5a02 	vstr	s11, [r2, #8]
 80127c8:	ed9d 4a25 	vldr	s8, [sp, #148]	; 0x94
 80127cc:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80127d0:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80127d4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80127d8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80127dc:	eee5 7a87 	vfma.f32	s15, s11, s14
 80127e0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80127e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127e8:	f77f af24 	ble.w	8012634 <MEMS_SolveLinearEq+0x150>
 80127ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80127f0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80127f4:	ed82 7a03 	vstr	s14, [r2, #12]
 80127f8:	3101      	adds	r1, #1
 80127fa:	2904      	cmp	r1, #4
 80127fc:	f103 0310 	add.w	r3, r3, #16
 8012800:	f102 0210 	add.w	r2, r2, #16
 8012804:	f100 0014 	add.w	r0, r0, #20
 8012808:	d192      	bne.n	8012730 <MEMS_SolveLinearEq+0x24c>
 801280a:	466a      	mov	r2, sp
 801280c:	4639      	mov	r1, r7
 801280e:	a818      	add	r0, sp, #96	; 0x60
 8012810:	f7f9 f9f2 	bl	800bbf8 <llEvaluate.constprop.0>
 8012814:	4b2c      	ldr	r3, [pc, #176]	; (80128c8 <MEMS_SolveLinearEq+0x3e4>)
 8012816:	6033      	str	r3, [r6, #0]
 8012818:	f10d 0910 	add.w	r9, sp, #16
 801281c:	46e8      	mov	r8, sp
 801281e:	f10d 0b0c 	add.w	fp, sp, #12
 8012822:	2400      	movs	r4, #0
 8012824:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 8012828:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 801282c:	e9cd 4400 	strd	r4, r4, [sp]
 8012830:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8012834:	466a      	mov	r2, sp
 8012836:	f848 ab04 	str.w	sl, [r8], #4
 801283a:	a904      	add	r1, sp, #16
 801283c:	a818      	add	r0, sp, #96	; 0x60
 801283e:	f7f9 f9db 	bl	800bbf8 <llEvaluate.constprop.0>
 8012842:	ecf9 7a01 	vldmia	r9!, {s15}
 8012846:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801284e:	dd23      	ble.n	8012898 <MEMS_SolveLinearEq+0x3b4>
 8012850:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012854:	edd6 7a00 	vldr	s15, [r6]
 8012858:	eef4 7ac7 	vcmpe.f32	s15, s14
 801285c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012860:	bfb8      	it	lt
 8012862:	eef0 7a47 	vmovlt.f32	s15, s14
 8012866:	45c3      	cmp	fp, r8
 8012868:	edc6 7a00 	vstr	s15, [r6]
 801286c:	d1de      	bne.n	801282c <MEMS_SolveLinearEq+0x348>
 801286e:	edd5 7a03 	vldr	s15, [r5, #12]
 8012872:	ed97 7a03 	vldr	s14, [r7, #12]
 8012876:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 801287a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801287e:	2001      	movs	r0, #1
 8012880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012888:	bf48      	it	mi
 801288a:	edc7 7a03 	vstrmi	s15, [r7, #12]
 801288e:	b029      	add	sp, #164	; 0xa4
 8012890:	ecbd 8b0c 	vpop	{d8-d13}
 8012894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012898:	45c3      	cmp	fp, r8
 801289a:	ed86 0a00 	vstr	s0, [r6]
 801289e:	d1c5      	bne.n	801282c <MEMS_SolveLinearEq+0x348>
 80128a0:	e7e5      	b.n	801286e <MEMS_SolveLinearEq+0x38a>
 80128a2:	edd0 7a00 	vldr	s15, [r0]
 80128a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80128aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128ae:	f77f aec1 	ble.w	8012634 <MEMS_SolveLinearEq+0x150>
 80128b2:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80128b6:	ed82 7a00 	vstr	s14, [r2]
 80128ba:	e79d      	b.n	80127f8 <MEMS_SolveLinearEq+0x314>
 80128bc:	3dcccccd 	.word	0x3dcccccd
 80128c0:	2b8cbccb 	.word	0x2b8cbccb
 80128c4:	358637bd 	.word	0x358637bd
 80128c8:	3dcccccd 	.word	0x3dcccccd
 80128cc:	00000000 	.word	0x00000000
 80128d0:	ed90 7a00 	vldr	s14, [r0]
 80128d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80128d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128dc:	f77f aeaa 	ble.w	8012634 <MEMS_SolveLinearEq+0x150>
 80128e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128e4:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80128e8:	ed82 7a01 	vstr	s14, [r2, #4]
 80128ec:	e784      	b.n	80127f8 <MEMS_SolveLinearEq+0x314>
 80128ee:	edd0 7a00 	vldr	s15, [r0]
 80128f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80128f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128fa:	f77f ae9b 	ble.w	8012634 <MEMS_SolveLinearEq+0x150>
 80128fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012902:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8012906:	ed82 7a02 	vstr	s14, [r2, #8]
 801290a:	e775      	b.n	80127f8 <MEMS_SolveLinearEq+0x314>
 801290c:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 80128cc <MEMS_SolveLinearEq+0x3e8>
 8012910:	e671      	b.n	80125f6 <MEMS_SolveLinearEq+0x112>
 8012912:	bf00      	nop

08012914 <MEMS_EIG3>:
 8012914:	edd0 6a02 	vldr	s13, [r0, #8]
 8012918:	ed90 7a01 	vldr	s14, [r0, #4]
 801291c:	edd0 4a04 	vldr	s9, [r0, #16]
 8012920:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8012a70 <MEMS_EIG3+0x15c>
 8012924:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8012928:	b510      	push	{r4, lr}
 801292a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801292e:	460c      	mov	r4, r1
 8012930:	ed2d 8b04 	vpush	{d8-d9}
 8012934:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8012938:	b08a      	sub	sp, #40	; 0x28
 801293a:	eef4 7ac6 	vcmpe.f32	s15, s12
 801293e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012942:	d509      	bpl.n	8012958 <MEMS_EIG3+0x44>
 8012944:	6803      	ldr	r3, [r0, #0]
 8012946:	600b      	str	r3, [r1, #0]
 8012948:	68c3      	ldr	r3, [r0, #12]
 801294a:	604b      	str	r3, [r1, #4]
 801294c:	6943      	ldr	r3, [r0, #20]
 801294e:	608b      	str	r3, [r1, #8]
 8012950:	b00a      	add	sp, #40	; 0x28
 8012952:	ecbd 8b04 	vpop	{d8-d9}
 8012956:	bd10      	pop	{r4, pc}
 8012958:	ed90 4a00 	vldr	s8, [r0]
 801295c:	edd0 5a03 	vldr	s11, [r0, #12]
 8012960:	edd0 2a05 	vldr	s5, [r0, #20]
 8012964:	eddf 9a43 	vldr	s19, [pc, #268]	; 8012a74 <MEMS_EIG3+0x160>
 8012968:	ed9f 6a43 	vldr	s12, [pc, #268]	; 8012a78 <MEMS_EIG3+0x164>
 801296c:	ee34 8a25 	vadd.f32	s16, s8, s11
 8012970:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
 8012974:	ee38 8a22 	vadd.f32	s16, s16, s5
 8012978:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801297c:	ee28 8a29 	vmul.f32	s16, s16, s19
 8012980:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
 8012984:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8012988:	ee34 4a48 	vsub.f32	s8, s8, s16
 801298c:	ee25 5aa5 	vmul.f32	s10, s11, s11
 8012990:	ee72 2ac8 	vsub.f32	s5, s5, s16
 8012994:	eea4 5a04 	vfma.f32	s10, s8, s8
 8012998:	eea7 5aa3 	vfma.f32	s10, s15, s7
 801299c:	eef0 7a45 	vmov.f32	s15, s10
 80129a0:	eee2 7aa2 	vfma.f32	s15, s5, s5
 80129a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80129a8:	eef1 8ae7 	vsqrt.f32	s17, s15
 80129ac:	ee80 6a28 	vdiv.f32	s12, s0, s17
 80129b0:	ee82 5aa8 	vdiv.f32	s10, s5, s17
 80129b4:	eec4 2a28 	vdiv.f32	s5, s8, s17
 80129b8:	ee66 6a26 	vmul.f32	s13, s12, s13
 80129bc:	ee65 5a86 	vmul.f32	s11, s11, s12
 80129c0:	ee26 7a07 	vmul.f32	s14, s12, s14
 80129c4:	ee66 7ae5 	vnmul.f32	s15, s13, s11
 80129c8:	ee26 6a24 	vmul.f32	s12, s12, s9
 80129cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80129d0:	ee66 4a46 	vnmul.f32	s9, s12, s12
 80129d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80129d8:	eee5 4a85 	vfma.f32	s9, s11, s10
 80129dc:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80129e0:	eee4 7aa2 	vfma.f32	s15, s9, s5
 80129e4:	eea6 5a26 	vfma.f32	s10, s12, s13
 80129e8:	eee5 7a07 	vfma.f32	s15, s10, s14
 80129ec:	eef4 7ac3 	vcmpe.f32	s15, s6
 80129f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129f4:	d909      	bls.n	8012a0a <MEMS_EIG3+0xf6>
 80129f6:	eef4 7ae3 	vcmpe.f32	s15, s7
 80129fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129fe:	db22      	blt.n	8012a46 <MEMS_EIG3+0x132>
 8012a00:	eeb0 9a40 	vmov.f32	s18, s0
 8012a04:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012a7c <MEMS_EIG3+0x168>
 8012a08:	e003      	b.n	8012a12 <MEMS_EIG3+0xfe>
 8012a0a:	ed9f 9a1d 	vldr	s18, [pc, #116]	; 8012a80 <MEMS_EIG3+0x16c>
 8012a0e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8012a12:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8012a16:	eef0 7a48 	vmov.f32	s15, s16
 8012a1a:	eeb0 7a48 	vmov.f32	s14, s16
 8012a1e:	eee8 7a89 	vfma.f32	s15, s17, s18
 8012a22:	eea8 7a80 	vfma.f32	s14, s17, s0
 8012a26:	edc4 7a00 	vstr	s15, [r4]
 8012a2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012a2e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8012a32:	eed8 7a26 	vfnms.f32	s15, s16, s13
 8012a36:	ed84 7a02 	vstr	s14, [r4, #8]
 8012a3a:	edc4 7a01 	vstr	s15, [r4, #4]
 8012a3e:	b00a      	add	sp, #40	; 0x28
 8012a40:	ecbd 8b04 	vpop	{d8-d9}
 8012a44:	bd10      	pop	{r4, pc}
 8012a46:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012a4a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012a4e:	f002 ffc5 	bl	80159dc <acosf>
 8012a52:	ee60 9a29 	vmul.f32	s19, s0, s19
 8012a56:	eeb0 0a69 	vmov.f32	s0, s19
 8012a5a:	f002 feb9 	bl	80157d0 <cosf>
 8012a5e:	eeb0 9a40 	vmov.f32	s18, s0
 8012a62:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8012a84 <MEMS_EIG3+0x170>
 8012a66:	ee39 0a80 	vadd.f32	s0, s19, s0
 8012a6a:	f002 feb1 	bl	80157d0 <cosf>
 8012a6e:	e7d0      	b.n	8012a12 <MEMS_EIG3+0xfe>
 8012a70:	358637bd 	.word	0x358637bd
 8012a74:	3eaaaaab 	.word	0x3eaaaaab
 8012a78:	3e2aaaab 	.word	0x3e2aaaab
 8012a7c:	bf000001 	.word	0xbf000001
 8012a80:	3effffff 	.word	0x3effffff
 8012a84:	40060a92 	.word	0x40060a92

08012a88 <MEMS_runMagCal>:
 8012a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a8c:	ed2d 8b0a 	vpush	{d8-d12}
 8012a90:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 8012a94:	2282      	movs	r2, #130	; 0x82
 8012a96:	ab36      	add	r3, sp, #216	; 0xd8
 8012a98:	460c      	mov	r4, r1
 8012a9a:	9105      	str	r1, [sp, #20]
 8012a9c:	4683      	mov	fp, r0
 8012a9e:	4608      	mov	r0, r1
 8012aa0:	a917      	add	r1, sp, #92	; 0x5c
 8012aa2:	9319      	str	r3, [sp, #100]	; 0x64
 8012aa4:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
 8012aa8:	f7ff fcb0 	bl	801240c <MEMS_getSensorData_I16>
 8012aac:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8012ab0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012ab4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8012ab6:	9209      	str	r2, [sp, #36]	; 0x24
 8012ab8:	f108 31ff 	add.w	r1, r8, #4294967295
 8012abc:	9106      	str	r1, [sp, #24]
 8012abe:	fb01 2103 	mla	r1, r1, r3, r2
 8012ac2:	9108      	str	r1, [sp, #32]
 8012ac4:	f8cb 1038 	str.w	r1, [fp, #56]	; 0x38
 8012ac8:	f1b8 0f00 	cmp.w	r8, #0
 8012acc:	f000 8417 	beq.w	80132fe <MEMS_runMagCal+0x876>
 8012ad0:	f8db 3008 	ldr.w	r3, [fp, #8]
 8012ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012ad8:	f501 31c3 	add.w	r1, r1, #99840	; 0x18600
 8012adc:	fb02 f203 	mul.w	r2, r2, r3
 8012ae0:	31a0      	adds	r1, #160	; 0xa0
 8012ae2:	4291      	cmp	r1, r2
 8012ae4:	f080 8411 	bcs.w	801330a <MEMS_runMagCal+0x882>
 8012ae8:	3b00      	subs	r3, #0
 8012aea:	bf18      	it	ne
 8012aec:	2301      	movne	r3, #1
 8012aee:	e9cb 3301 	strd	r3, r3, [fp, #4]
 8012af2:	2200      	movs	r2, #0
 8012af4:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8012af8:	f8cb 200c 	str.w	r2, [fp, #12]
 8012afc:	2300      	movs	r3, #0
 8012afe:	e9cb 3325 	strd	r3, r3, [fp, #148]	; 0x94
 8012b02:	e9cb 3327 	strd	r3, r3, [fp, #156]	; 0x9c
 8012b06:	e9cb 3329 	strd	r3, r3, [fp, #164]	; 0xa4
 8012b0a:	22ff      	movs	r2, #255	; 0xff
 8012b0c:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8012b10:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012b14:	4cd5      	ldr	r4, [pc, #852]	; (8012e6c <MEMS_runMagCal+0x3e4>)
 8012b16:	eddf 7ad8 	vldr	s15, [pc, #864]	; 8012e78 <MEMS_runMagCal+0x3f0>
 8012b1a:	9b05      	ldr	r3, [sp, #20]
 8012b1c:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8012b20:	edd3 5a01 	vldr	s11, [r3, #4]
 8012b24:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8012b28:	4652      	mov	r2, sl
 8012b2a:	2a03      	cmp	r2, #3
 8012b2c:	f647 75ff 	movw	r5, #32767	; 0x7fff
 8012b30:	bf28      	it	cs
 8012b32:	2203      	movcs	r2, #3
 8012b34:	2100      	movs	r1, #0
 8012b36:	9207      	str	r2, [sp, #28]
 8012b38:	eeb0 0a67 	vmov.f32	s0, s15
 8012b3c:	464b      	mov	r3, r9
 8012b3e:	9402      	str	r4, [sp, #8]
 8012b40:	4627      	mov	r7, r4
 8012b42:	9503      	str	r5, [sp, #12]
 8012b44:	462e      	mov	r6, r5
 8012b46:	460a      	mov	r2, r1
 8012b48:	9404      	str	r4, [sp, #16]
 8012b4a:	7818      	ldrb	r0, [r3, #0]
 8012b4c:	3201      	adds	r2, #1
 8012b4e:	b292      	uxth	r2, r2
 8012b50:	2800      	cmp	r0, #0
 8012b52:	d04b      	beq.n	8012bec <MEMS_runMagCal+0x164>
 8012b54:	f9b3 e004 	ldrsh.w	lr, [r3, #4]
 8012b58:	f9b3 c002 	ldrsh.w	ip, [r3, #2]
 8012b5c:	eddb 3a18 	vldr	s7, [fp, #96]	; 0x60
 8012b60:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 8012b64:	ed9b 4a17 	vldr	s8, [fp, #92]	; 0x5c
 8012b68:	ed9b 5a1a 	vldr	s10, [fp, #104]	; 0x68
 8012b6c:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8012b70:	9c02      	ldr	r4, [sp, #8]
 8012b72:	ed9b 6a19 	vldr	s12, [fp, #100]	; 0x64
 8012b76:	eddb 6a22 	vldr	s13, [fp, #136]	; 0x88
 8012b7a:	ee07 ea90 	vmov	s15, lr
 8012b7e:	ee07 ca10 	vmov	s14, ip
 8012b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b8a:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8012b8e:	ee37 7a44 	vsub.f32	s14, s14, s8
 8012b92:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012b96:	ee27 7a05 	vmul.f32	s14, s14, s10
 8012b9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012b9e:	4574      	cmp	r4, lr
 8012ba0:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012ba4:	bfb8      	it	lt
 8012ba6:	4674      	movlt	r4, lr
 8012ba8:	9402      	str	r4, [sp, #8]
 8012baa:	ee07 0a10 	vmov	s14, r0
 8012bae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012bb2:	9c03      	ldr	r4, [sp, #12]
 8012bb4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012bb8:	ee77 7a46 	vsub.f32	s15, s14, s12
 8012bbc:	4574      	cmp	r4, lr
 8012bbe:	bfa8      	it	ge
 8012bc0:	4674      	movge	r4, lr
 8012bc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012bc6:	4567      	cmp	r7, ip
 8012bc8:	9403      	str	r4, [sp, #12]
 8012bca:	9c04      	ldr	r4, [sp, #16]
 8012bcc:	bfb8      	it	lt
 8012bce:	4667      	movlt	r7, ip
 8012bd0:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8012bd4:	4566      	cmp	r6, ip
 8012bd6:	bfa8      	it	ge
 8012bd8:	4666      	movge	r6, ip
 8012bda:	4284      	cmp	r4, r0
 8012bdc:	bfb8      	it	lt
 8012bde:	4604      	movlt	r4, r0
 8012be0:	3101      	adds	r1, #1
 8012be2:	4285      	cmp	r5, r0
 8012be4:	b249      	sxtb	r1, r1
 8012be6:	9404      	str	r4, [sp, #16]
 8012be8:	bfa8      	it	ge
 8012bea:	4605      	movge	r5, r0
 8012bec:	9807      	ldr	r0, [sp, #28]
 8012bee:	4282      	cmp	r2, r0
 8012bf0:	f103 0308 	add.w	r3, r3, #8
 8012bf4:	d9a9      	bls.n	8012b4a <MEMS_runMagCal+0xc2>
 8012bf6:	4590      	cmp	r8, r2
 8012bf8:	9c04      	ldr	r4, [sp, #16]
 8012bfa:	f240 8767 	bls.w	8013acc <MEMS_runMagCal+0x1044>
 8012bfe:	ebaa 0a02 	sub.w	sl, sl, r2
 8012c02:	fa12 fa8a 	uxtah	sl, r2, sl
 8012c06:	f109 0308 	add.w	r3, r9, #8
 8012c0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012c0e:	9307      	str	r3, [sp, #28]
 8012c10:	2300      	movs	r3, #0
 8012c12:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 8012c16:	9304      	str	r3, [sp, #16]
 8012c18:	7813      	ldrb	r3, [r2, #0]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	f000 8096 	beq.w	8012d4c <MEMS_runMagCal+0x2c4>
 8012c20:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8012c24:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8012c28:	f932 ac16 	ldrsh.w	sl, [r2, #-22]
 8012c2c:	f932 8c1e 	ldrsh.w	r8, [r2, #-30]
 8012c30:	f932 0c06 	ldrsh.w	r0, [r2, #-6]
 8012c34:	eddb 6a18 	vldr	s13, [fp, #96]	; 0x60
 8012c38:	f932 9c1c 	ldrsh.w	r9, [r2, #-28]
 8012c3c:	f932 3c04 	ldrsh.w	r3, [r2, #-4]
 8012c40:	eddb 3a17 	vldr	s7, [fp, #92]	; 0x5c
 8012c44:	ed9b 6a1a 	vldr	s12, [fp, #104]	; 0x68
 8012c48:	ed9b 3a1e 	vldr	s6, [fp, #120]	; 0x78
 8012c4c:	ed9b 4a19 	vldr	s8, [fp, #100]	; 0x64
 8012c50:	eddb 4a22 	vldr	s9, [fp, #136]	; 0x88
 8012c54:	ebae 0808 	sub.w	r8, lr, r8
 8012c58:	eba0 000a 	sub.w	r0, r0, sl
 8012c5c:	ee07 ca10 	vmov	s14, ip
 8012c60:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 8012c64:	ee07 0a90 	vmov	s15, r0
 8012c68:	f932 ac14 	ldrsh.w	sl, [r2, #-20]
 8012c6c:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8012c70:	f932 8c1a 	ldrsh.w	r8, [r2, #-26]
 8012c74:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c78:	eba3 030a 	sub.w	r3, r3, sl
 8012c7c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8012c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012c84:	ee06 ea90 	vmov	s13, lr
 8012c88:	ebac 0909 	sub.w	r9, ip, r9
 8012c8c:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8012c90:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8012c94:	eef0 7ae7 	vabs.f32	s15, s15
 8012c98:	ee06 9a90 	vmov	s13, r9
 8012c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ca0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ca8:	f932 3c02 	ldrsh.w	r3, [r2, #-2]
 8012cac:	f932 9c12 	ldrsh.w	r9, [r2, #-18]
 8012cb0:	eef0 6ae6 	vabs.f32	s13, s13
 8012cb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012cb8:	eba0 0808 	sub.w	r8, r0, r8
 8012cbc:	ee06 0a90 	vmov	s13, r0
 8012cc0:	eba3 0309 	sub.w	r3, r3, r9
 8012cc4:	ee35 5a63 	vsub.f32	s10, s10, s7
 8012cc8:	eb03 0848 	add.w	r8, r3, r8, lsl #1
 8012ccc:	ee25 5a06 	vmul.f32	s10, s10, s12
 8012cd0:	9b02      	ldr	r3, [sp, #8]
 8012cd2:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
 8012cd6:	4577      	cmp	r7, lr
 8012cd8:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012cdc:	ee06 8a90 	vmov	s13, r8
 8012ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ce4:	bfb8      	it	lt
 8012ce6:	4677      	movlt	r7, lr
 8012ce8:	4576      	cmp	r6, lr
 8012cea:	ee27 7a07 	vmul.f32	s14, s14, s14
 8012cee:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012cf2:	bfa8      	it	ge
 8012cf4:	4676      	movge	r6, lr
 8012cf6:	4563      	cmp	r3, ip
 8012cf8:	bfb8      	it	lt
 8012cfa:	4663      	movlt	r3, ip
 8012cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d00:	eea5 7a05 	vfma.f32	s14, s10, s10
 8012d04:	9302      	str	r3, [sp, #8]
 8012d06:	9b03      	ldr	r3, [sp, #12]
 8012d08:	eef0 6ae6 	vabs.f32	s13, s13
 8012d0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d10:	4563      	cmp	r3, ip
 8012d12:	ee36 6a44 	vsub.f32	s12, s12, s8
 8012d16:	bfa8      	it	ge
 8012d18:	4663      	movge	r3, ip
 8012d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012d1e:	4284      	cmp	r4, r0
 8012d20:	ee37 0a00 	vadd.f32	s0, s14, s0
 8012d24:	bfb8      	it	lt
 8012d26:	4604      	movlt	r4, r0
 8012d28:	ee26 7a24 	vmul.f32	s14, s12, s9
 8012d2c:	4285      	cmp	r5, r0
 8012d2e:	bfa8      	it	ge
 8012d30:	4605      	movge	r5, r0
 8012d32:	9303      	str	r3, [sp, #12]
 8012d34:	ee17 0a90 	vmov	r0, s15
 8012d38:	9b04      	ldr	r3, [sp, #16]
 8012d3a:	eea7 0a07 	vfma.f32	s0, s14, s14
 8012d3e:	4283      	cmp	r3, r0
 8012d40:	f101 0101 	add.w	r1, r1, #1
 8012d44:	bf38      	it	cc
 8012d46:	4603      	movcc	r3, r0
 8012d48:	b249      	sxtb	r1, r1
 8012d4a:	9304      	str	r3, [sp, #16]
 8012d4c:	9b07      	ldr	r3, [sp, #28]
 8012d4e:	3208      	adds	r2, #8
 8012d50:	4293      	cmp	r3, r2
 8012d52:	f47f af61 	bne.w	8012c18 <MEMS_runMagCal+0x190>
 8012d56:	2900      	cmp	r1, #0
 8012d58:	f000 86b6 	beq.w	8013ac8 <MEMS_runMagCal+0x1040>
 8012d5c:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
 8012d60:	f280 82df 	bge.w	8013322 <MEMS_runMagCal+0x89a>
 8012d64:	f516 4f80 	cmn.w	r6, #16384	; 0x4000
 8012d68:	f2c0 82db 	blt.w	8013322 <MEMS_runMagCal+0x89a>
 8012d6c:	9b02      	ldr	r3, [sp, #8]
 8012d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012d72:	f280 82d6 	bge.w	8013322 <MEMS_runMagCal+0x89a>
 8012d76:	9a03      	ldr	r2, [sp, #12]
 8012d78:	f512 4f80 	cmn.w	r2, #16384	; 0x4000
 8012d7c:	f2c0 82d1 	blt.w	8013322 <MEMS_runMagCal+0x89a>
 8012d80:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8012d84:	f280 82cd 	bge.w	8013322 <MEMS_runMagCal+0x89a>
 8012d88:	f515 4f80 	cmn.w	r5, #16384	; 0x4000
 8012d8c:	f2c0 82c9 	blt.w	8013322 <MEMS_runMagCal+0x89a>
 8012d90:	ee07 1a90 	vmov	s15, r1
 8012d94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d9c:	eec0 7a26 	vdiv.f32	s15, s0, s13
 8012da0:	1bbe      	subs	r6, r7, r6
 8012da2:	1a9f      	subs	r7, r3, r2
 8012da4:	42be      	cmp	r6, r7
 8012da6:	4633      	mov	r3, r6
 8012da8:	eba4 0405 	sub.w	r4, r4, r5
 8012dac:	bfb8      	it	lt
 8012dae:	463b      	movlt	r3, r7
 8012db0:	42a3      	cmp	r3, r4
 8012db2:	bfb8      	it	lt
 8012db4:	4623      	movlt	r3, r4
 8012db6:	eec7 6a25 	vdiv.f32	s13, s14, s11
 8012dba:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8012dbe:	ee07 3a10 	vmov	s14, r3
 8012dc2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012e70 <MEMS_runMagCal+0x3e8>
 8012dc6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012dce:	ee25 0a80 	vmul.f32	s0, s11, s0
 8012dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dda:	f100 82a2 	bmi.w	8013322 <MEMS_runMagCal+0x89a>
 8012dde:	eddd 7a04 	vldr	s15, [sp, #16]
 8012de2:	ed9f 6a24 	vldr	s12, [pc, #144]	; 8012e74 <MEMS_runMagCal+0x3ec>
 8012de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012dea:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8012dee:	eef4 5ac6 	vcmpe.f32	s11, s12
 8012df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df6:	f300 8294 	bgt.w	8013322 <MEMS_runMagCal+0x89a>
 8012dfa:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8012dfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012e02:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e0a:	f301 81f8 	bgt.w	80141fe <MEMS_runMagCal+0x1776>
 8012e0e:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8012e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e1e:	f340 8552 	ble.w	80138c6 <MEMS_runMagCal+0xe3e>
 8012e22:	ee07 6a90 	vmov	s15, r6
 8012e26:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8012e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e2e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e36:	f340 8546 	ble.w	80138c6 <MEMS_runMagCal+0xe3e>
 8012e3a:	ee07 7a90 	vmov	s15, r7
 8012e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e42:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e4a:	f140 853c 	bpl.w	80138c6 <MEMS_runMagCal+0xe3e>
 8012e4e:	ee07 4a90 	vmov	s15, r4
 8012e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e56:	2300      	movs	r3, #0
 8012e58:	eef4 6ae7 	vcmpe.f32	s13, s15
 8012e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e60:	9303      	str	r3, [sp, #12]
 8012e62:	bf48      	it	mi
 8012e64:	2301      	movmi	r3, #1
 8012e66:	9307      	str	r3, [sp, #28]
 8012e68:	f000 bd30 	b.w	80138cc <MEMS_runMagCal+0xe44>
 8012e6c:	ffff8000 	.word	0xffff8000
 8012e70:	43020000 	.word	0x43020000
 8012e74:	447a0000 	.word	0x447a0000
 8012e78:	00000000 	.word	0x00000000
 8012e7c:	41f00001 	.word	0x41f00001
 8012e80:	400ccccd 	.word	0x400ccccd
 8012e84:	3dcccccd 	.word	0x3dcccccd
 8012e88:	423c0000 	.word	0x423c0000
 8012e8c:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 8012e78 <MEMS_runMagCal+0x3f0>
 8012e90:	ed5f 6a06 	vldr	s13, [pc, #-24]	; 8012e7c <MEMS_runMagCal+0x3f4>
 8012e94:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8012e98:	eef4 6ac7 	vcmpe.f32	s13, s14
 8012e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea0:	dc10      	bgt.n	8012ec4 <MEMS_runMagCal+0x43c>
 8012ea2:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8012e80 <MEMS_runMagCal+0x3f8>
 8012ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eae:	dc09      	bgt.n	8012ec4 <MEMS_runMagCal+0x43c>
 8012eb0:	ed94 9a03 	vldr	s18, [r4, #12]
 8012eb4:	ed5f 7a0d 	vldr	s15, [pc, #-52]	; 8012e84 <MEMS_runMagCal+0x3fc>
 8012eb8:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec0:	f201 8527 	bhi.w	8014912 <MEMS_runMagCal+0x1e8a>
 8012ec4:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 8012e88 <MEMS_runMagCal+0x400>
 8012ec8:	edd4 6a03 	vldr	s13, [r4, #12]
 8012ecc:	ed94 5a00 	vldr	s10, [r4]
 8012ed0:	edd4 5a01 	vldr	s11, [r4, #4]
 8012ed4:	ed94 6a02 	vldr	s12, [r4, #8]
 8012ed8:	edc4 7a06 	vstr	s15, [r4, #24]
 8012edc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012ee0:	ad2e      	add	r5, sp, #184	; 0xb8
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	e9c5 3300 	strd	r3, r3, [r5]
 8012ee8:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8012eec:	60ab      	str	r3, [r5, #8]
 8012eee:	61ab      	str	r3, [r5, #24]
 8012ef0:	4be7      	ldr	r3, [pc, #924]	; (8013290 <MEMS_runMagCal+0x808>)
 8012ef2:	9311      	str	r3, [sp, #68]	; 0x44
 8012ef4:	ee85 0a08 	vdiv.f32	s0, s10, s16
 8012ef8:	eec5 9a88 	vdiv.f32	s19, s11, s16
 8012efc:	ee86 aa08 	vdiv.f32	s20, s12, s16
 8012f00:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 8012f04:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 8012f08:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8012f0c:	eef0 6a67 	vmov.f32	s13, s15
 8012f10:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8012f14:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8012f18:	ee39 9a46 	vsub.f32	s18, s18, s12
 8012f1c:	eddf 6add 	vldr	s13, [pc, #884]	; 8013294 <MEMS_runMagCal+0x80c>
 8012f20:	ed9f 6add 	vldr	s12, [pc, #884]	; 8013298 <MEMS_runMagCal+0x810>
 8012f24:	ee77 6a66 	vsub.f32	s13, s14, s13
 8012f28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012f2c:	eef0 6ae6 	vabs.f32	s13, s13
 8012f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012f34:	eef4 6ac6 	vcmpe.f32	s13, s12
 8012f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f3c:	eef0 7ae7 	vabs.f32	s15, s15
 8012f40:	f101 84dd 	bmi.w	80148fe <MEMS_runMagCal+0x1e76>
 8012f44:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 801329c <MEMS_runMagCal+0x814>
 8012f48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f50:	f281 8438 	bge.w	80147c4 <MEMS_runMagCal+0x1d3c>
 8012f54:	eddf 7ad2 	vldr	s15, [pc, #840]	; 80132a0 <MEMS_runMagCal+0x818>
 8012f58:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8012f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f60:	f101 8430 	bmi.w	80147c4 <MEMS_runMagCal+0x1d3c>
 8012f64:	f002 fc74 	bl	8015850 <roundf>
 8012f68:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012f6c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8012f70:	ee17 3a90 	vmov	r3, s15
 8012f74:	eeb0 0a69 	vmov.f32	s0, s19
 8012f78:	f8a9 3000 	strh.w	r3, [r9]
 8012f7c:	f002 fc68 	bl	8015850 <roundf>
 8012f80:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012f84:	eeb0 0a4a 	vmov.f32	s0, s20
 8012f88:	ee17 3a90 	vmov	r3, s15
 8012f8c:	f8a9 3002 	strh.w	r3, [r9, #2]
 8012f90:	f002 fc5e 	bl	8015850 <roundf>
 8012f94:	eddd 7a08 	vldr	s15, [sp, #32]
 8012f98:	eefd 6ac0 	vcvt.s32.f32	s13, s0
 8012f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012fa0:	ee16 3a90 	vmov	r3, s13
 8012fa4:	eddf 7abf 	vldr	s15, [pc, #764]	; 80132a4 <MEMS_runMagCal+0x81c>
 8012fa8:	f8a9 3004 	strh.w	r3, [r9, #4]
 8012fac:	ee27 0a27 	vmul.f32	s0, s14, s15
 8012fb0:	f002 fc4e 	bl	8015850 <roundf>
 8012fb4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012fb8:	ae0f      	add	r6, sp, #60	; 0x3c
 8012fba:	ed8b 0a01 	vstr	s0, [fp, #4]
 8012fbe:	ab10      	add	r3, sp, #64	; 0x40
 8012fc0:	ee1c 0a10 	vmov	r0, s24
 8012fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8012fc8:	4649      	mov	r1, r9
 8012fca:	9600      	str	r6, [sp, #0]
 8012fcc:	aa2d      	add	r2, sp, #180	; 0xb4
 8012fce:	f7f8 ff33 	bl	800be38 <getMagStats.constprop.0>
 8012fd2:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8012fd6:	eddf 6ab4 	vldr	s13, [pc, #720]	; 80132a8 <MEMS_runMagCal+0x820>
 8012fda:	461f      	mov	r7, r3
 8012fdc:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8012fe0:	005b      	lsls	r3, r3, #1
 8012fe2:	ee07 3a90 	vmov	s15, r3
 8012fe6:	ee07 0a10 	vmov	s14, r0
 8012fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ff2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ffe:	dc0f      	bgt.n	8013020 <MEMS_runMagCal+0x598>
 8013000:	ed96 7a00 	vldr	s14, [r6]
 8013004:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013010:	bfc3      	ittte	gt
 8013012:	f89b 3040 	ldrbgt.w	r3, [fp, #64]	; 0x40
 8013016:	fab3 f383 	clzgt	r3, r3
 801301a:	095b      	lsrgt	r3, r3, #5
 801301c:	2301      	movle	r3, #1
 801301e:	9303      	str	r3, [sp, #12]
 8013020:	ed96 0a00 	vldr	s0, [r6]
 8013024:	f8db 6004 	ldr.w	r6, [fp, #4]
 8013028:	9620      	str	r6, [sp, #128]	; 0x80
 801302a:	ee28 0a80 	vmul.f32	s0, s17, s0
 801302e:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8013032:	f002 fc0d 	bl	8015850 <roundf>
 8013036:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 801303a:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 801303e:	ee17 3a10 	vmov	r3, s14
 8013042:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8013046:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 801304a:	f002 fc01 	bl	8015850 <roundf>
 801304e:	ed9f 6a97 	vldr	s12, [pc, #604]	; 80132ac <MEMS_runMagCal+0x824>
 8013052:	eddd 6a2d 	vldr	s13, [sp, #180]	; 0xb4
 8013056:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801305a:	eddd 7a35 	vldr	s15, [sp, #212]	; 0xd4
 801305e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8013062:	f8d9 0000 	ldr.w	r0, [r9]
 8013066:	f8ad 308a 	strh.w	r3, [sp, #138]	; 0x8a
 801306a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801306e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013072:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013076:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 801307a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 801307e:	ee16 2a90 	vmov	r2, s13
 8013082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013086:	eebc 6ac0 	vcvt.u32.f32	s12, s0
 801308a:	f1b8 0f01 	cmp.w	r8, #1
 801308e:	fa1f fc82 	uxth.w	ip, r2
 8013092:	bf08      	it	eq
 8013094:	23ff      	moveq	r3, #255	; 0xff
 8013096:	ee17 2a10 	vmov	r2, s14
 801309a:	ee17 1a90 	vmov	r1, s15
 801309e:	f8cd 0086 	str.w	r0, [sp, #134]	; 0x86
 80130a2:	ee16 0a10 	vmov	r0, s12
 80130a6:	bf08      	it	eq
 80130a8:	f88d 3084 	strbeq.w	r3, [sp, #132]	; 0x84
 80130ac:	9b03      	ldr	r3, [sp, #12]
 80130ae:	f88d 0085 	strb.w	r0, [sp, #133]	; 0x85
 80130b2:	b292      	uxth	r2, r2
 80130b4:	b289      	uxth	r1, r1
 80130b6:	2000      	movs	r0, #0
 80130b8:	f8ad c08c 	strh.w	ip, [sp, #140]	; 0x8c
 80130bc:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 80130c0:	f8ad 1090 	strh.w	r1, [sp, #144]	; 0x90
 80130c4:	f88b 0000 	strb.w	r0, [fp]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f000 8118 	beq.w	80132fe <MEMS_runMagCal+0x876>
 80130ce:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80130d2:	f88b 0001 	strb.w	r0, [fp, #1]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	f041 80fd 	bne.w	80142d6 <MEMS_runMagCal+0x184e>
 80130dc:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 80130e0:	ad0e      	add	r5, sp, #56	; 0x38
 80130e2:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
 80130e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80130ea:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80130ee:	f8bd e090 	ldrh.w	lr, [sp, #144]	; 0x90
 80130f2:	f8cb 6008 	str.w	r6, [fp, #8]
 80130f6:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 80130fa:	f8bd 608e 	ldrh.w	r6, [sp, #142]	; 0x8e
 80130fe:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80132b0 <MEMS_runMagCal+0x828>
 8013102:	f8cb 1048 	str.w	r1, [fp, #72]	; 0x48
 8013106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801310a:	fb00 f404 	mul.w	r4, r0, r4
 801310e:	ee05 4a90 	vmov	s11, r4
 8013112:	fb00 f406 	mul.w	r4, r0, r6
 8013116:	fb00 f00e 	mul.w	r0, r0, lr
 801311a:	ee06 0a10 	vmov	s12, r0
 801311e:	f9bd 0086 	ldrsh.w	r0, [sp, #134]	; 0x86
 8013122:	f8cb 204c 	str.w	r2, [fp, #76]	; 0x4c
 8013126:	ee03 0a90 	vmov	s7, r0
 801312a:	f9bd 0088 	ldrsh.w	r0, [sp, #136]	; 0x88
 801312e:	f8cb 3050 	str.w	r3, [fp, #80]	; 0x50
 8013132:	ee05 4a10 	vmov	s10, r4
 8013136:	ee04 0a10 	vmov	s8, r0
 801313a:	f9bd 008a 	ldrsh.w	r0, [sp, #138]	; 0x8a
 801313e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013142:	ee04 0a90 	vmov	s9, r0
 8013146:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801314a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801314e:	f8dc 0000 	ldr.w	r0, [ip]
 8013152:	f8cb 0054 	str.w	r0, [fp, #84]	; 0x54
 8013156:	ee65 5aa7 	vmul.f32	s11, s11, s15
 801315a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801315e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013162:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8013166:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801316a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 801316e:	2001      	movs	r0, #1
 8013170:	24ff      	movs	r4, #255	; 0xff
 8013172:	edcb 5a1a 	vstr	s11, [fp, #104]	; 0x68
 8013176:	ed8b 5a1e 	vstr	s10, [fp, #120]	; 0x78
 801317a:	ed8b 6a22 	vstr	s12, [fp, #136]	; 0x88
 801317e:	edcb 3a17 	vstr	s7, [fp, #92]	; 0x5c
 8013182:	ed8b 4a18 	vstr	s8, [fp, #96]	; 0x60
 8013186:	edcb 4a19 	vstr	s9, [fp, #100]	; 0x64
 801318a:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
 801318e:	f88b 0059 	strb.w	r0, [fp, #89]	; 0x59
 8013192:	f88b 4012 	strb.w	r4, [fp, #18]
 8013196:	2f00      	cmp	r7, #0
 8013198:	f001 82c8 	beq.w	801472c <MEMS_runMagCal+0x1ca4>
 801319c:	9b05      	ldr	r3, [sp, #20]
 801319e:	ed9f 3a47 	vldr	s6, [pc, #284]	; 80132bc <MEMS_runMagCal+0x834>
 80131a2:	ed93 0a01 	vldr	s0, [r3, #4]
 80131a6:	f89b 1011 	ldrb.w	r1, [fp, #17]
 80131aa:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 80131ae:	2200      	movs	r2, #0
 80131b0:	ee20 3a03 	vmul.f32	s6, s0, s6
 80131b4:	f04f 34ff 	mov.w	r4, #4294967295
 80131b8:	4616      	mov	r6, r2
 80131ba:	fb96 f3f0 	sdiv	r3, r6, r0
 80131be:	fb00 6313 	mls	r3, r0, r3, r6
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80131c8:	1c66      	adds	r6, r4, #1
 80131ca:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 80131ce:	ee07 4a90 	vmov	s15, r4
 80131d2:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 80131d6:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 80131da:	ee06 4a90 	vmov	s13, r4
 80131de:	fb96 f4f1 	sdiv	r4, r6, r1
 80131e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80131e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80131ea:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80131ee:	ee07 3a10 	vmov	s14, r3
 80131f2:	ee76 6ae3 	vsub.f32	s13, s13, s7
 80131f6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80131fa:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80131fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013202:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013206:	eee6 7aa6 	vfma.f32	s15, s13, s13
 801320a:	fb01 6414 	mls	r4, r1, r4, r6
 801320e:	b264      	sxtb	r4, r4
 8013210:	ee37 7a64 	vsub.f32	s14, s14, s9
 8013214:	3201      	adds	r2, #1
 8013216:	ee27 7a06 	vmul.f32	s14, s14, s12
 801321a:	b212      	sxth	r2, r2
 801321c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8013220:	eb0b 0344 	add.w	r3, fp, r4, lsl #1
 8013224:	42ba      	cmp	r2, r7
 8013226:	4616      	mov	r6, r2
 8013228:	eeb1 7ae7 	vsqrt.f32	s14, s15
 801322c:	ee67 7a03 	vmul.f32	s15, s14, s6
 8013230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013234:	ee17 ca90 	vmov	ip, s15
 8013238:	f8a3 c014 	strh.w	ip, [r3, #20]
 801323c:	dbbd      	blt.n	80131ba <MEMS_runMagCal+0x732>
 801323e:	f88b 4012 	strb.w	r4, [fp, #18]
 8013242:	428f      	cmp	r7, r1
 8013244:	bf28      	it	cs
 8013246:	460f      	movcs	r7, r1
 8013248:	f88b 7010 	strb.w	r7, [fp, #16]
 801324c:	ee1c 0a10 	vmov	r0, s24
 8013250:	9500      	str	r5, [sp, #0]
 8013252:	4642      	mov	r2, r8
 8013254:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8013258:	ab0d      	add	r3, sp, #52	; 0x34
 801325a:	f7f8 fded 	bl	800be38 <getMagStats.constprop.0>
 801325e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80132b4 <MEMS_runMagCal+0x82c>
 8013262:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8013266:	edd5 6a00 	vldr	s13, [r5]
 801326a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801326e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8013272:	eef0 7ae7 	vabs.f32	s15, s15
 8013276:	eef4 7ac7 	vcmpe.f32	s15, s14
 801327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801327e:	d525      	bpl.n	80132cc <MEMS_runMagCal+0x844>
 8013280:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013288:	f101 8257 	bmi.w	801473a <MEMS_runMagCal+0x1cb2>
 801328c:	e01e      	b.n	80132cc <MEMS_runMagCal+0x844>
 801328e:	bf00      	nop
 8013290:	41f00001 	.word	0x41f00001
 8013294:	3f8ccccd 	.word	0x3f8ccccd
 8013298:	3f266666 	.word	0x3f266666
 801329c:	3eb33333 	.word	0x3eb33333
 80132a0:	3f19999a 	.word	0x3f19999a
 80132a4:	3a83126f 	.word	0x3a83126f
 80132a8:	3c23d70a 	.word	0x3c23d70a
 80132ac:	447a0000 	.word	0x447a0000
 80132b0:	358637bd 	.word	0x358637bd
 80132b4:	423c0000 	.word	0x423c0000
 80132b8:	4423d666 	.word	0x4423d666
 80132bc:	42c80000 	.word	0x42c80000
 80132c0:	427c0000 	.word	0x427c0000
 80132c4:	3f666666 	.word	0x3f666666
 80132c8:	3eaaaaab 	.word	0x3eaaaaab
 80132cc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80132d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80132d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d8:	d507      	bpl.n	80132ea <MEMS_runMagCal+0x862>
 80132da:	eef4 6a47 	vcmp.f32	s13, s14
 80132de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e2:	9b03      	ldr	r3, [sp, #12]
 80132e4:	bf48      	it	mi
 80132e6:	2302      	movmi	r3, #2
 80132e8:	9303      	str	r3, [sp, #12]
 80132ea:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80132ee:	9a03      	ldr	r2, [sp, #12]
 80132f0:	f88b 2058 	strb.w	r2, [fp, #88]	; 0x58
 80132f4:	2bc8      	cmp	r3, #200	; 0xc8
 80132f6:	d902      	bls.n	80132fe <MEMS_runMagCal+0x876>
 80132f8:	2302      	movs	r3, #2
 80132fa:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80132fe:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013302:	ecbd 8b0a 	vpop	{d8-d12}
 8013306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801330a:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 801330e:	4291      	cmp	r1, r2
 8013310:	f4ff abea 	bcc.w	8012ae8 <MEMS_runMagCal+0x60>
 8013314:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013318:	2b00      	cmp	r3, #0
 801331a:	f47f abf9 	bne.w	8012b10 <MEMS_runMagCal+0x88>
 801331e:	f7ff bbed 	b.w	8012afc <MEMS_runMagCal+0x74>
 8013322:	2702      	movs	r7, #2
 8013324:	2300      	movs	r3, #0
 8013326:	9307      	str	r3, [sp, #28]
 8013328:	9303      	str	r3, [sp, #12]
 801332a:	ed5f 7a1d 	vldr	s15, [pc, #-116]	; 80132b8 <MEMS_runMagCal+0x830>
 801332e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013336:	f140 8260 	bpl.w	80137fa <MEMS_runMagCal+0xd72>
 801333a:	ed5f 7a20 	vldr	s15, [pc, #-128]	; 80132bc <MEMS_runMagCal+0x834>
 801333e:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013342:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013346:	2b01      	cmp	r3, #1
 8013348:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 801334c:	d911      	bls.n	8013372 <MEMS_runMagCal+0x8ea>
 801334e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013352:	ee17 3a90 	vmov	r3, s15
 8013356:	b29b      	uxth	r3, r3
 8013358:	2bc7      	cmp	r3, #199	; 0xc7
 801335a:	f201 8359 	bhi.w	8014a10 <MEMS_runMagCal+0x1f88>
 801335e:	2300      	movs	r3, #0
 8013360:	22ff      	movs	r2, #255	; 0xff
 8013362:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8013366:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 801336a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
 801336e:	f88b 208e 	strb.w	r2, [fp, #142]	; 0x8e
 8013372:	2f00      	cmp	r7, #0
 8013374:	f040 824d 	bne.w	8013812 <MEMS_runMagCal+0xd8a>
 8013378:	f99b 3012 	ldrsb.w	r3, [fp, #18]
 801337c:	2b00      	cmp	r3, #0
 801337e:	f2c0 839e 	blt.w	8013abe <MEMS_runMagCal+0x1036>
 8013382:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8013386:	1c5a      	adds	r2, r3, #1
 8013388:	fbb2 f3f6 	udiv	r3, r2, r6
 801338c:	fb06 2313 	mls	r3, r6, r3, r2
 8013390:	b25b      	sxtb	r3, r3
 8013392:	461d      	mov	r5, r3
 8013394:	f89b 4010 	ldrb.w	r4, [fp, #16]
 8013398:	f88b 3012 	strb.w	r3, [fp, #18]
 801339c:	3401      	adds	r4, #1
 801339e:	42b4      	cmp	r4, r6
 80133a0:	bfa8      	it	ge
 80133a2:	4634      	movge	r4, r6
 80133a4:	fa5f f884 	uxtb.w	r8, r4
 80133a8:	f88b 8010 	strb.w	r8, [fp, #16]
 80133ac:	f002 fa50 	bl	8015850 <roundf>
 80133b0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80133b4:	eb0b 0345 	add.w	r3, fp, r5, lsl #1
 80133b8:	ee10 2a10 	vmov	r2, s0
 80133bc:	829a      	strh	r2, [r3, #20]
 80133be:	2f00      	cmp	r7, #0
 80133c0:	f040 8227 	bne.w	8013812 <MEMS_runMagCal+0xd8a>
 80133c4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80133c8:	b122      	cbz	r2, 80133d4 <MEMS_runMagCal+0x94c>
 80133ca:	9908      	ldr	r1, [sp, #32]
 80133cc:	f502 6396 	add.w	r3, r2, #1200	; 0x4b0
 80133d0:	4299      	cmp	r1, r3
 80133d2:	d394      	bcc.n	80132fe <MEMS_runMagCal+0x876>
 80133d4:	9b03      	ldr	r3, [sp, #12]
 80133d6:	2b01      	cmp	r3, #1
 80133d8:	d091      	beq.n	80132fe <MEMS_runMagCal+0x876>
 80133da:	f89b 7058 	ldrb.w	r7, [fp, #88]	; 0x58
 80133de:	1ebb      	subs	r3, r7, #2
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	f240 8232 	bls.w	801384a <MEMS_runMagCal+0xdc2>
 80133e6:	9b05      	ldr	r3, [sp, #20]
 80133e8:	ed5f 7a4b 	vldr	s15, [pc, #-300]	; 80132c0 <MEMS_runMagCal+0x838>
 80133ec:	ed93 8a01 	vldr	s16, [r3, #4]
 80133f0:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 80133f4:	9a06      	ldr	r2, [sp, #24]
 80133f6:	f8db 6090 	ldr.w	r6, [fp, #144]	; 0x90
 80133fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013400:	eec7 8a08 	vdiv.f32	s17, s14, s16
 8013404:	fb02 1404 	mla	r4, r2, r4, r1
 8013408:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 801340c:	f10b 028c 	add.w	r2, fp, #140	; 0x8c
 8013410:	3310      	adds	r3, #16
 8013412:	42a3      	cmp	r3, r4
 8013414:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
 8013418:	ee28 9a89 	vmul.f32	s18, s17, s18
 801341c:	ee0c 2a10 	vmov	s24, r2
 8013420:	ee69 7a27 	vmul.f32	s15, s18, s15
 8013424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013428:	ee17 2a90 	vmov	r2, s15
 801342c:	fa1f f982 	uxth.w	r9, r2
 8013430:	f080 81fe 	bcs.w	8013830 <MEMS_runMagCal+0xda8>
 8013434:	f242 3328 	movw	r3, #9000	; 0x2328
 8013438:	429c      	cmp	r4, r3
 801343a:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 801343e:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
 8013442:	f99b 208e 	ldrsb.w	r2, [fp, #142]	; 0x8e
 8013446:	bf1a      	itte	ne
 8013448:	f5a4 540c 	subne.w	r4, r4, #8960	; 0x2300
 801344c:	3c28      	subne	r4, #40	; 0x28
 801344e:	2400      	moveq	r4, #0
 8013450:	42a8      	cmp	r0, r5
 8013452:	f102 0201 	add.w	r2, r2, #1
 8013456:	f000 8727 	beq.w	80142a8 <MEMS_runMagCal+0x1820>
 801345a:	1a12      	subs	r2, r2, r0
 801345c:	fb92 f1f5 	sdiv	r1, r2, r5
 8013460:	fb05 2211 	mls	r2, r5, r1, r2
 8013464:	2a00      	cmp	r2, #0
 8013466:	bfb8      	it	lt
 8013468:	1952      	addlt	r2, r2, r5
 801346a:	b211      	sxth	r1, r2
 801346c:	b358      	cbz	r0, 80134c6 <MEMS_runMagCal+0xa3e>
 801346e:	3801      	subs	r0, #1
 8013470:	b280      	uxth	r0, r0
 8013472:	3001      	adds	r0, #1
 8013474:	1b36      	subs	r6, r6, r4
 8013476:	9f03      	ldr	r7, [sp, #12]
 8013478:	b2b6      	uxth	r6, r6
 801347a:	4408      	add	r0, r1
 801347c:	e002      	b.n	8013484 <MEMS_runMagCal+0x9fc>
 801347e:	3101      	adds	r1, #1
 8013480:	4281      	cmp	r1, r0
 8013482:	d01b      	beq.n	80134bc <MEMS_runMagCal+0xa34>
 8013484:	fb91 f3f5 	sdiv	r3, r1, r5
 8013488:	fb05 1313 	mls	r3, r5, r3, r1
 801348c:	b2db      	uxtb	r3, r3
 801348e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013492:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8013496:	4432      	add	r2, r6
 8013498:	b212      	sxth	r2, r2
 801349a:	2a00      	cmp	r2, #0
 801349c:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80134a0:	daed      	bge.n	801347e <MEMS_runMagCal+0x9f6>
 80134a2:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80134a6:	1e5a      	subs	r2, r3, #1
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	f000 8306 	beq.w	8013aba <MEMS_runMagCal+0x1032>
 80134ae:	3101      	adds	r1, #1
 80134b0:	4281      	cmp	r1, r0
 80134b2:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80134b6:	f04f 0701 	mov.w	r7, #1
 80134ba:	d1e3      	bne.n	8013484 <MEMS_runMagCal+0x9fc>
 80134bc:	2f01      	cmp	r7, #1
 80134be:	f001 80ea 	beq.w	8014696 <MEMS_runMagCal+0x1c0e>
 80134c2:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 80134c6:	f8cb 4090 	str.w	r4, [fp, #144]	; 0x90
 80134ca:	2800      	cmp	r0, #0
 80134cc:	f000 81b6 	beq.w	801383c <MEMS_runMagCal+0xdb4>
 80134d0:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80134d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80134d6:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 80134da:	f9b3 30ac 	ldrsh.w	r3, [r3, #172]	; 0xac
 80134de:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80134e2:	3308      	adds	r3, #8
 80134e4:	441c      	add	r4, r3
 80134e6:	42a2      	cmp	r2, r4
 80134e8:	f200 86e6 	bhi.w	80142b8 <MEMS_runMagCal+0x1830>
 80134ec:	9b07      	ldr	r3, [sp, #28]
 80134ee:	b923      	cbnz	r3, 80134fa <MEMS_runMagCal+0xa72>
 80134f0:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80134f4:	2b0a      	cmp	r3, #10
 80134f6:	f240 81a5 	bls.w	8013844 <MEMS_runMagCal+0xdbc>
 80134fa:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80134fe:	9302      	str	r3, [sp, #8]
 8013500:	2b00      	cmp	r3, #0
 8013502:	f000 819f 	beq.w	8013844 <MEMS_runMagCal+0xdbc>
 8013506:	ee29 aa09 	vmul.f32	s20, s18, s18
 801350a:	ed5f 6a92 	vldr	s13, [pc, #-584]	; 80132c4 <MEMS_runMagCal+0x83c>
 801350e:	ed1f 7a92 	vldr	s14, [pc, #-584]	; 80132c8 <MEMS_runMagCal+0x840>
 8013512:	9b03      	ldr	r3, [sp, #12]
 8013514:	9309      	str	r3, [sp, #36]	; 0x24
 8013516:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
 801351a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801351e:	2100      	movs	r1, #0
 8013520:	ee2a aa26 	vmul.f32	s20, s20, s13
 8013524:	ee28 8a07 	vmul.f32	s16, s16, s14
 8013528:	ee69 9a29 	vmul.f32	s19, s18, s19
 801352c:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013530:	468a      	mov	sl, r1
 8013532:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013534:	f812 303a 	ldrb.w	r3, [r2, sl, lsl #3]
 8013538:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 801353c:	2b00      	cmp	r3, #0
 801353e:	f000 80e2 	beq.w	8013706 <MEMS_runMagCal+0xc7e>
 8013542:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8013546:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 801354a:	ee07 4a90 	vmov	s15, r4
 801354e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013552:	eef0 7ae7 	vabs.f32	s15, s15
 8013556:	eef4 7ae8 	vcmpe.f32	s15, s17
 801355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801355e:	f100 820b 	bmi.w	8013978 <MEMS_runMagCal+0xef0>
 8013562:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013566:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801356a:	2f00      	cmp	r7, #0
 801356c:	f000 8223 	beq.w	80139b6 <MEMS_runMagCal+0xf2e>
 8013570:	f9bb 23a6 	ldrsh.w	r2, [fp, #934]	; 0x3a6
 8013574:	f9bb 03a4 	ldrsh.w	r0, [fp, #932]	; 0x3a4
 8013578:	f9bb 33a8 	ldrsh.w	r3, [fp, #936]	; 0x3a8
 801357c:	1b52      	subs	r2, r2, r5
 801357e:	fb02 f102 	mul.w	r1, r2, r2
 8013582:	1b02      	subs	r2, r0, r4
 8013584:	fb02 1202 	mla	r2, r2, r2, r1
 8013588:	1b9b      	subs	r3, r3, r6
 801358a:	fb03 2303 	mla	r3, r3, r3, r2
 801358e:	ee07 3a90 	vmov	s15, r3
 8013592:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013596:	eeb4 aae7 	vcmpe.f32	s20, s15
 801359a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801359e:	f300 80b2 	bgt.w	8013706 <MEMS_runMagCal+0xc7e>
 80135a2:	fb94 f3f9 	sdiv	r3, r4, r9
 80135a6:	fb09 4313 	mls	r3, r9, r3, r4
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	bfb8      	it	lt
 80135ae:	444b      	addlt	r3, r9
 80135b0:	b21b      	sxth	r3, r3
 80135b2:	ee00 3a10 	vmov	s0, r3
 80135b6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80135ba:	ee20 0a08 	vmul.f32	s0, s0, s16
 80135be:	f002 f947 	bl	8015850 <roundf>
 80135c2:	fb95 f3f9 	sdiv	r3, r5, r9
 80135c6:	fb09 5313 	mls	r3, r9, r3, r5
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	bfb8      	it	lt
 80135ce:	444b      	addlt	r3, r9
 80135d0:	b21b      	sxth	r3, r3
 80135d2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80135d6:	ee00 3a10 	vmov	s0, r3
 80135da:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80135de:	edcd 7a04 	vstr	s15, [sp, #16]
 80135e2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80135e6:	f002 f933 	bl	8015850 <roundf>
 80135ea:	fb96 f3f9 	sdiv	r3, r6, r9
 80135ee:	fb09 6313 	mls	r3, r9, r3, r6
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	bfb8      	it	lt
 80135f6:	444b      	addlt	r3, r9
 80135f8:	b21b      	sxth	r3, r3
 80135fa:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80135fe:	ee00 3a10 	vmov	s0, r3
 8013602:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013606:	f89d 8010 	ldrb.w	r8, [sp, #16]
 801360a:	edcd 7a04 	vstr	s15, [sp, #16]
 801360e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8013612:	9204      	str	r2, [sp, #16]
 8013614:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013618:	f002 f91a 	bl	8015850 <roundf>
 801361c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013620:	f1b8 0f1f 	cmp.w	r8, #31
 8013624:	edcd 7a06 	vstr	s15, [sp, #24]
 8013628:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801362c:	9106      	str	r1, [sp, #24]
 801362e:	e9db 3225 	ldrd	r3, r2, [fp, #148]	; 0x94
 8013632:	f240 823d 	bls.w	8013ab0 <MEMS_runMagCal+0x1028>
 8013636:	f1a8 0220 	sub.w	r2, r8, #32
 801363a:	2101      	movs	r1, #1
 801363c:	fa01 f202 	lsl.w	r2, r1, r2
 8013640:	401a      	ands	r2, r3
 8013642:	9804      	ldr	r0, [sp, #16]
 8013644:	281f      	cmp	r0, #31
 8013646:	e9db 3127 	ldrd	r3, r1, [fp, #156]	; 0x9c
 801364a:	f240 821f 	bls.w	8013a8c <MEMS_runMagCal+0x1004>
 801364e:	f1a0 0120 	sub.w	r1, r0, #32
 8013652:	2001      	movs	r0, #1
 8013654:	fa00 f101 	lsl.w	r1, r0, r1
 8013658:	ea01 0c03 	and.w	ip, r1, r3
 801365c:	9906      	ldr	r1, [sp, #24]
 801365e:	291f      	cmp	r1, #31
 8013660:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013664:	f240 821e 	bls.w	8013aa4 <MEMS_runMagCal+0x101c>
 8013668:	f1a1 0020 	sub.w	r0, r1, #32
 801366c:	2101      	movs	r1, #1
 801366e:	fa01 f000 	lsl.w	r0, r1, r0
 8013672:	4003      	ands	r3, r0
 8013674:	2b00      	cmp	r3, #0
 8013676:	f040 812b 	bne.w	80138d0 <MEMS_runMagCal+0xe48>
 801367a:	ea52 030c 	orrs.w	r3, r2, ip
 801367e:	f040 812c 	bne.w	80138da <MEMS_runMagCal+0xe52>
 8013682:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 8013686:	930a      	str	r3, [sp, #40]	; 0x28
 8013688:	461a      	mov	r2, r3
 801368a:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 801368e:	3301      	adds	r3, #1
 8013690:	4694      	mov	ip, r2
 8013692:	930b      	str	r3, [sp, #44]	; 0x2c
 8013694:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013696:	fb92 f3fc 	sdiv	r3, r2, ip
 801369a:	3701      	adds	r7, #1
 801369c:	4567      	cmp	r7, ip
 801369e:	bfa8      	it	ge
 80136a0:	4667      	movge	r7, ip
 80136a2:	fb0c 2c13 	mls	ip, ip, r3, r2
 80136a6:	b2ff      	uxtb	r7, r7
 80136a8:	fa4f fc8c 	sxtb.w	ip, ip
 80136ac:	9905      	ldr	r1, [sp, #20]
 80136ae:	f88b c08e 	strb.w	ip, [fp, #142]	; 0x8e
 80136b2:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80136b6:	f88b 708c 	strb.w	r7, [fp, #140]	; 0x8c
 80136ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80136bc:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80136c0:	eb0b 0ccc 	add.w	ip, fp, ip, lsl #3
 80136c4:	1a9b      	subs	r3, r3, r2
 80136c6:	fb01 330a 	mla	r3, r1, sl, r3
 80136ca:	f8ac 30ac 	strh.w	r3, [ip, #172]	; 0xac
 80136ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136d0:	f8ac 40ae 	strh.w	r4, [ip, #174]	; 0xae
 80136d4:	429f      	cmp	r7, r3
 80136d6:	f8ac 50b0 	strh.w	r5, [ip, #176]	; 0xb0
 80136da:	f8ac 60b2 	strh.w	r6, [ip, #178]	; 0xb2
 80136de:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80136e2:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80136e6:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 80136ea:	f000 8758 	beq.w	801459e <MEMS_runMagCal+0x1b16>
 80136ee:	9b06      	ldr	r3, [sp, #24]
 80136f0:	9a04      	ldr	r2, [sp, #16]
 80136f2:	ee1c 0a10 	vmov	r0, s24
 80136f6:	4641      	mov	r1, r8
 80136f8:	f7f8 f874 	bl	800b7e4 <MEMS_setMagIndexToOne>
 80136fc:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013700:	9302      	str	r3, [sp, #8]
 8013702:	2301      	movs	r3, #1
 8013704:	9309      	str	r3, [sp, #36]	; 0x24
 8013706:	9b02      	ldr	r3, [sp, #8]
 8013708:	f10a 0a01 	add.w	sl, sl, #1
 801370c:	fa0f fa8a 	sxth.w	sl, sl
 8013710:	459a      	cmp	sl, r3
 8013712:	4651      	mov	r1, sl
 8013714:	f6ff af0d 	blt.w	8013532 <MEMS_runMagCal+0xaaa>
 8013718:	f89b 3000 	ldrb.w	r3, [fp]
 801371c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801371e:	431a      	orrs	r2, r3
 8013720:	b2d3      	uxtb	r3, r2
 8013722:	f88b 3000 	strb.w	r3, [fp]
 8013726:	2b00      	cmp	r3, #0
 8013728:	f43f ade9 	beq.w	80132fe <MEMS_runMagCal+0x876>
 801372c:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013730:	9306      	str	r3, [sp, #24]
 8013732:	2b19      	cmp	r3, #25
 8013734:	f67f ade3 	bls.w	80132fe <MEMS_runMagCal+0x876>
 8013738:	f8db 3008 	ldr.w	r3, [fp, #8]
 801373c:	9309      	str	r3, [sp, #36]	; 0x24
 801373e:	b123      	cbz	r3, 801374a <MEMS_runMagCal+0xcc2>
 8013740:	f8db 3004 	ldr.w	r3, [fp, #4]
 8013744:	2b00      	cmp	r3, #0
 8013746:	f040 8583 	bne.w	8014250 <MEMS_runMagCal+0x17c8>
 801374a:	9b07      	ldr	r3, [sp, #28]
 801374c:	2b00      	cmp	r3, #0
 801374e:	f040 872f 	bne.w	80145b0 <MEMS_runMagCal+0x1b28>
 8013752:	9b05      	ldr	r3, [sp, #20]
 8013754:	9903      	ldr	r1, [sp, #12]
 8013756:	ed93 8a01 	vldr	s16, [r3, #4]
 801375a:	f8db 30a8 	ldr.w	r3, [fp, #168]	; 0xa8
 801375e:	9302      	str	r3, [sp, #8]
 8013760:	2600      	movs	r6, #0
 8013762:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
 8013766:	9304      	str	r3, [sp, #16]
 8013768:	f04f 0a01 	mov.w	sl, #1
 801376c:	e9db 8e25 	ldrd	r8, lr, [fp, #148]	; 0x94
 8013770:	e9cd 6620 	strd	r6, r6, [sp, #128]	; 0x80
 8013774:	e9cd 6622 	strd	r6, r6, [sp, #136]	; 0x88
 8013778:	9624      	str	r6, [sp, #144]	; 0x90
 801377a:	4657      	mov	r7, sl
 801377c:	460b      	mov	r3, r1
 801377e:	460c      	mov	r4, r1
 8013780:	e013      	b.n	80137aa <MEMS_runMagCal+0xd22>
 8013782:	f1b9 0f00 	cmp.w	r9, #0
 8013786:	bf18      	it	ne
 8013788:	3101      	addne	r1, #1
 801378a:	2d00      	cmp	r5, #0
 801378c:	bf18      	it	ne
 801378e:	3401      	addne	r4, #1
 8013790:	2a00      	cmp	r2, #0
 8013792:	bf18      	it	ne
 8013794:	3301      	addne	r3, #1
 8013796:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
 801379a:	b2c9      	uxtb	r1, r1
 801379c:	b2e4      	uxtb	r4, r4
 801379e:	b2db      	uxtb	r3, r3
 80137a0:	f000 81a2 	beq.w	8013ae8 <MEMS_runMagCal+0x1060>
 80137a4:	3601      	adds	r6, #1
 80137a6:	fa5f fa8c 	uxtb.w	sl, ip
 80137aa:	9804      	ldr	r0, [sp, #16]
 80137ac:	f1a6 0220 	sub.w	r2, r6, #32
 80137b0:	fa07 f202 	lsl.w	r2, r7, r2
 80137b4:	ea02 0500 	and.w	r5, r2, r0
 80137b8:	9802      	ldr	r0, [sp, #8]
 80137ba:	2e1f      	cmp	r6, #31
 80137bc:	ea08 0902 	and.w	r9, r8, r2
 80137c0:	f10a 0c01 	add.w	ip, sl, #1
 80137c4:	ea02 0200 	and.w	r2, r2, r0
 80137c8:	fa07 f006 	lsl.w	r0, r7, r6
 80137cc:	d8d9      	bhi.n	8013782 <MEMS_runMagCal+0xcfa>
 80137ce:	e9db 2528 	ldrd	r2, r5, [fp, #160]	; 0xa0
 80137d2:	ea00 0902 	and.w	r9, r0, r2
 80137d6:	4005      	ands	r5, r0
 80137d8:	ea0e 0000 	and.w	r0, lr, r0
 80137dc:	f1b9 0f00 	cmp.w	r9, #0
 80137e0:	bf18      	it	ne
 80137e2:	3401      	addne	r4, #1
 80137e4:	2d00      	cmp	r5, #0
 80137e6:	bf0c      	ite	eq
 80137e8:	461d      	moveq	r5, r3
 80137ea:	1c5d      	addne	r5, r3, #1
 80137ec:	2800      	cmp	r0, #0
 80137ee:	bf18      	it	ne
 80137f0:	3101      	addne	r1, #1
 80137f2:	b2e4      	uxtb	r4, r4
 80137f4:	b2eb      	uxtb	r3, r5
 80137f6:	b2c9      	uxtb	r1, r1
 80137f8:	e7d4      	b.n	80137a4 <MEMS_runMagCal+0xd1c>
 80137fa:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 80137fe:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8013ad4 <MEMS_runMagCal+0x104c>
 8013802:	2b01      	cmp	r3, #1
 8013804:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 8013808:	f63f ada9 	bhi.w	801335e <MEMS_runMagCal+0x8d6>
 801380c:	2f00      	cmp	r7, #0
 801380e:	f43f adb3 	beq.w	8013378 <MEMS_runMagCal+0x8f0>
 8013812:	9908      	ldr	r1, [sp, #32]
 8013814:	f8cb 100c 	str.w	r1, [fp, #12]
 8013818:	2200      	movs	r2, #0
 801381a:	23ff      	movs	r3, #255	; 0xff
 801381c:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 8013820:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 8013824:	f20d 4dec 	addw	sp, sp, #1260	; 0x4ec
 8013828:	ecbd 8b0a 	vpop	{d8-d12}
 801382c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013830:	f89b 008c 	ldrb.w	r0, [fp, #140]	; 0x8c
 8013834:	4634      	mov	r4, r6
 8013836:	2800      	cmp	r0, #0
 8013838:	f47f ae4a 	bne.w	80134d0 <MEMS_runMagCal+0xa48>
 801383c:	9b07      	ldr	r3, [sp, #28]
 801383e:	2b00      	cmp	r3, #0
 8013840:	f47f ae5b 	bne.w	80134fa <MEMS_runMagCal+0xa72>
 8013844:	9b03      	ldr	r3, [sp, #12]
 8013846:	9309      	str	r3, [sp, #36]	; 0x24
 8013848:	e766      	b.n	8013718 <MEMS_runMagCal+0xc90>
 801384a:	45b0      	cmp	r8, r6
 801384c:	f000 86b9 	beq.w	80145c2 <MEMS_runMagCal+0x1b3a>
 8013850:	2f03      	cmp	r7, #3
 8013852:	f47f adc8 	bne.w	80133e6 <MEMS_runMagCal+0x95e>
 8013856:	ee07 2a90 	vmov	s15, r2
 801385a:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8013ad8 <MEMS_runMagCal+0x1050>
 801385e:	ed9b 7a01 	vldr	s14, [fp, #4]
 8013862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013866:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801386a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801386e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013876:	f77f adb6 	ble.w	80133e6 <MEMS_runMagCal+0x95e>
 801387a:	f8db 3008 	ldr.w	r3, [fp, #8]
 801387e:	2b00      	cmp	r3, #0
 8013880:	f43f adb1 	beq.w	80133e6 <MEMS_runMagCal+0x95e>
 8013884:	eddd 7a08 	vldr	s15, [sp, #32]
 8013888:	330a      	adds	r3, #10
 801388a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801388e:	ee07 3a90 	vmov	s15, r3
 8013892:	ee67 6a26 	vmul.f32	s13, s14, s13
 8013896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801389a:	eef4 6ae7 	vcmpe.f32	s13, s15
 801389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a2:	f77f ada0 	ble.w	80133e6 <MEMS_runMagCal+0x95e>
 80138a6:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	f47f ad9b 	bne.w	80133e6 <MEMS_runMagCal+0x95e>
 80138b0:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	f43f ad22 	beq.w	80132fe <MEMS_runMagCal+0x876>
 80138ba:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 80138be:	2bff      	cmp	r3, #255	; 0xff
 80138c0:	f47f ad1d 	bne.w	80132fe <MEMS_runMagCal+0x876>
 80138c4:	e58f      	b.n	80133e6 <MEMS_runMagCal+0x95e>
 80138c6:	2300      	movs	r3, #0
 80138c8:	9307      	str	r3, [sp, #28]
 80138ca:	9303      	str	r3, [sp, #12]
 80138cc:	2700      	movs	r7, #0
 80138ce:	e52c      	b.n	801332a <MEMS_runMagCal+0x8a2>
 80138d0:	b11a      	cbz	r2, 80138da <MEMS_runMagCal+0xe52>
 80138d2:	f1bc 0f00 	cmp.w	ip, #0
 80138d6:	f47f af16 	bne.w	8013706 <MEMS_runMagCal+0xc7e>
 80138da:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
 80138de:	930a      	str	r3, [sp, #40]	; 0x28
 80138e0:	461a      	mov	r2, r3
 80138e2:	4297      	cmp	r7, r2
 80138e4:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 80138e8:	f000 848f 	beq.w	801420a <MEMS_runMagCal+0x1782>
 80138ec:	3301      	adds	r3, #1
 80138ee:	4611      	mov	r1, r2
 80138f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80138f2:	1bdb      	subs	r3, r3, r7
 80138f4:	fb93 f2f2 	sdiv	r2, r3, r2
 80138f8:	fb01 3212 	mls	r2, r1, r2, r3
 80138fc:	2a00      	cmp	r2, #0
 80138fe:	bfbc      	itt	lt
 8013900:	460b      	movlt	r3, r1
 8013902:	18d2      	addlt	r2, r2, r3
 8013904:	468c      	mov	ip, r1
 8013906:	b212      	sxth	r2, r2
 8013908:	f107 3eff 	add.w	lr, r7, #4294967295
 801390c:	fa5f fe8e 	uxtb.w	lr, lr
 8013910:	f10e 0e01 	add.w	lr, lr, #1
 8013914:	4496      	add	lr, r2
 8013916:	e002      	b.n	801391e <MEMS_runMagCal+0xe96>
 8013918:	4572      	cmp	r2, lr
 801391a:	f43f aebb 	beq.w	8013694 <MEMS_runMagCal+0xc0c>
 801391e:	fb92 f3fc 	sdiv	r3, r2, ip
 8013922:	fb0c 2313 	mls	r3, ip, r3, r2
 8013926:	b2db      	uxtb	r3, r3
 8013928:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 801392c:	3201      	adds	r2, #1
 801392e:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013932:	f9b3 10b0 	ldrsh.w	r1, [r3, #176]	; 0xb0
 8013936:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 801393a:	1a20      	subs	r0, r4, r0
 801393c:	1a69      	subs	r1, r5, r1
 801393e:	ee07 0a90 	vmov	s15, r0
 8013942:	ee06 1a90 	vmov	s13, r1
 8013946:	1af3      	subs	r3, r6, r3
 8013948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801394c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013950:	ee07 3a10 	vmov	s14, r3
 8013954:	eef0 7ae7 	vabs.f32	s15, s15
 8013958:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801395c:	eef0 6ae6 	vabs.f32	s13, s13
 8013960:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013964:	eeb0 7ac7 	vabs.f32	s14, s14
 8013968:	ee77 7a87 	vadd.f32	s15, s15, s14
 801396c:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013974:	ddd0      	ble.n	8013918 <MEMS_runMagCal+0xe90>
 8013976:	e6c6      	b.n	8013706 <MEMS_runMagCal+0xc7e>
 8013978:	ee07 5a90 	vmov	s15, r5
 801397c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013980:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8013984:	eef0 7ae7 	vabs.f32	s15, s15
 8013988:	eef4 8ae7 	vcmpe.f32	s17, s15
 801398c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013990:	f77f ade9 	ble.w	8013566 <MEMS_runMagCal+0xade>
 8013994:	ee07 6a90 	vmov	s15, r6
 8013998:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801399c:	eef0 7ae7 	vabs.f32	s15, s15
 80139a0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80139a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a8:	f73f aead 	bgt.w	8013706 <MEMS_runMagCal+0xc7e>
 80139ac:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 80139b0:	2f00      	cmp	r7, #0
 80139b2:	f47f addd 	bne.w	8013570 <MEMS_runMagCal+0xae8>
 80139b6:	fb94 f2f9 	sdiv	r2, r4, r9
 80139ba:	f04f 0301 	mov.w	r3, #1
 80139be:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80139c2:	9b05      	ldr	r3, [sp, #20]
 80139c4:	f88b 708e 	strb.w	r7, [fp, #142]	; 0x8e
 80139c8:	f9b3 0002 	ldrsh.w	r0, [r3, #2]
 80139cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139ce:	f8ab 40ae 	strh.w	r4, [fp, #174]	; 0xae
 80139d2:	fb09 4212 	mls	r2, r9, r2, r4
 80139d6:	2a00      	cmp	r2, #0
 80139d8:	fb01 3300 	mla	r3, r1, r0, r3
 80139dc:	bfb8      	it	lt
 80139de:	444a      	addlt	r2, r9
 80139e0:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
 80139e4:	b213      	sxth	r3, r2
 80139e6:	ee00 3a10 	vmov	s0, r3
 80139ea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80139ee:	f8ab 43a4 	strh.w	r4, [fp, #932]	; 0x3a4
 80139f2:	f8ab 50b0 	strh.w	r5, [fp, #176]	; 0xb0
 80139f6:	f8ab 53a6 	strh.w	r5, [fp, #934]	; 0x3a6
 80139fa:	f8ab 60b2 	strh.w	r6, [fp, #178]	; 0xb2
 80139fe:	f8ab 63a8 	strh.w	r6, [fp, #936]	; 0x3a8
 8013a02:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013a06:	f8ab 70ac 	strh.w	r7, [fp, #172]	; 0xac
 8013a0a:	f001 ff21 	bl	8015850 <roundf>
 8013a0e:	fb95 f3f9 	sdiv	r3, r5, r9
 8013a12:	fb09 5513 	mls	r5, r9, r3, r5
 8013a16:	2d00      	cmp	r5, #0
 8013a18:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013a1c:	bfb8      	it	lt
 8013a1e:	444d      	addlt	r5, r9
 8013a20:	b22d      	sxth	r5, r5
 8013a22:	edcd 7a02 	vstr	s15, [sp, #8]
 8013a26:	ee07 5a90 	vmov	s15, r5
 8013a2a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013a2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8013a32:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013a36:	f001 ff0b 	bl	8015850 <roundf>
 8013a3a:	fb96 f3f9 	sdiv	r3, r6, r9
 8013a3e:	fb09 6613 	mls	r6, r9, r3, r6
 8013a42:	2e00      	cmp	r6, #0
 8013a44:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013a48:	bfb8      	it	lt
 8013a4a:	444e      	addlt	r6, r9
 8013a4c:	b236      	sxth	r6, r6
 8013a4e:	edcd 7a02 	vstr	s15, [sp, #8]
 8013a52:	ee07 6a90 	vmov	s15, r6
 8013a56:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013a5a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013a5e:	9204      	str	r2, [sp, #16]
 8013a60:	2301      	movs	r3, #1
 8013a62:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013a66:	9309      	str	r3, [sp, #36]	; 0x24
 8013a68:	f001 fef2 	bl	8015850 <roundf>
 8013a6c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8013a70:	9a04      	ldr	r2, [sp, #16]
 8013a72:	edcd 7a02 	vstr	s15, [sp, #8]
 8013a76:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013a7a:	ee1c 0a10 	vmov	r0, s24
 8013a7e:	4621      	mov	r1, r4
 8013a80:	f7f7 feb0 	bl	800b7e4 <MEMS_setMagIndexToOne>
 8013a84:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8013a88:	9302      	str	r3, [sp, #8]
 8013a8a:	e63c      	b.n	8013706 <MEMS_runMagCal+0xc7e>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	2001      	movs	r0, #1
 8013a90:	fa00 f303 	lsl.w	r3, r0, r3
 8013a94:	ea01 0c03 	and.w	ip, r1, r3
 8013a98:	9906      	ldr	r1, [sp, #24]
 8013a9a:	291f      	cmp	r1, #31
 8013a9c:	e9db 0329 	ldrd	r0, r3, [fp, #164]	; 0xa4
 8013aa0:	f63f ade2 	bhi.w	8013668 <MEMS_runMagCal+0xbe0>
 8013aa4:	460b      	mov	r3, r1
 8013aa6:	2101      	movs	r1, #1
 8013aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8013aac:	4003      	ands	r3, r0
 8013aae:	e5e1      	b.n	8013674 <MEMS_runMagCal+0xbec>
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	fa03 f308 	lsl.w	r3, r3, r8
 8013ab6:	401a      	ands	r2, r3
 8013ab8:	e5c3      	b.n	8013642 <MEMS_runMagCal+0xbba>
 8013aba:	2701      	movs	r7, #1
 8013abc:	e4df      	b.n	801347e <MEMS_runMagCal+0x9f6>
 8013abe:	2500      	movs	r5, #0
 8013ac0:	f89b 6011 	ldrb.w	r6, [fp, #17]
 8013ac4:	462b      	mov	r3, r5
 8013ac6:	e465      	b.n	8013394 <MEMS_runMagCal+0x90c>
 8013ac8:	460f      	mov	r7, r1
 8013aca:	e42b      	b.n	8013324 <MEMS_runMagCal+0x89c>
 8013acc:	2300      	movs	r3, #0
 8013ace:	9304      	str	r3, [sp, #16]
 8013ad0:	f7ff b941 	b.w	8012d56 <MEMS_runMagCal+0x2ce>
 8013ad4:	477fff00 	.word	0x477fff00
 8013ad8:	3a83126f 	.word	0x3a83126f
 8013adc:	42340000 	.word	0x42340000
 8013ae0:	3faccccd 	.word	0x3faccccd
 8013ae4:	00000000 	.word	0x00000000
 8013ae8:	2905      	cmp	r1, #5
 8013aea:	f240 8383 	bls.w	80141f4 <MEMS_runMagCal+0x176c>
 8013aee:	2c05      	cmp	r4, #5
 8013af0:	f240 8380 	bls.w	80141f4 <MEMS_runMagCal+0x176c>
 8013af4:	2b05      	cmp	r3, #5
 8013af6:	f240 837d 	bls.w	80141f4 <MEMS_runMagCal+0x176c>
 8013afa:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013afe:	f89b a08d 	ldrb.w	sl, [fp, #141]	; 0x8d
 8013b02:	9302      	str	r3, [sp, #8]
 8013b04:	9b06      	ldr	r3, [sp, #24]
 8013b06:	4553      	cmp	r3, sl
 8013b08:	f000 85f1 	beq.w	80146ee <MEMS_runMagCal+0x1c66>
 8013b0c:	461a      	mov	r2, r3
 8013b0e:	9b02      	ldr	r3, [sp, #8]
 8013b10:	3301      	adds	r3, #1
 8013b12:	9304      	str	r3, [sp, #16]
 8013b14:	1a9b      	subs	r3, r3, r2
 8013b16:	fb93 f2fa 	sdiv	r2, r3, sl
 8013b1a:	fb0a 3212 	mls	r2, sl, r2, r3
 8013b1e:	2a00      	cmp	r2, #0
 8013b20:	bfb8      	it	lt
 8013b22:	4452      	addlt	r2, sl
 8013b24:	46d1      	mov	r9, sl
 8013b26:	b212      	sxth	r2, r2
 8013b28:	9906      	ldr	r1, [sp, #24]
 8013b2a:	eb0b 03c2 	add.w	r3, fp, r2, lsl #3
 8013b2e:	f101 38ff 	add.w	r8, r1, #4294967295
 8013b32:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013b36:	f9b3 10ae 	ldrsh.w	r1, [r3, #174]	; 0xae
 8013b3a:	f9b3 70b2 	ldrsh.w	r7, [r3, #178]	; 0xb2
 8013b3e:	fa5f f888 	uxtb.w	r8, r8
 8013b42:	f108 0801 	add.w	r8, r8, #1
 8013b46:	468e      	mov	lr, r1
 8013b48:	463e      	mov	r6, r7
 8013b4a:	46ac      	mov	ip, r5
 8013b4c:	4490      	add	r8, r2
 8013b4e:	fb92 f3f9 	sdiv	r3, r2, r9
 8013b52:	fb09 2313 	mls	r3, r9, r3, r2
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013b5c:	3201      	adds	r2, #1
 8013b5e:	f9b3 40ae 	ldrsh.w	r4, [r3, #174]	; 0xae
 8013b62:	f9b3 00b0 	ldrsh.w	r0, [r3, #176]	; 0xb0
 8013b66:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013b6a:	42a1      	cmp	r1, r4
 8013b6c:	bfb8      	it	lt
 8013b6e:	4621      	movlt	r1, r4
 8013b70:	45a6      	cmp	lr, r4
 8013b72:	bfa8      	it	ge
 8013b74:	46a6      	movge	lr, r4
 8013b76:	4285      	cmp	r5, r0
 8013b78:	bfb8      	it	lt
 8013b7a:	4605      	movlt	r5, r0
 8013b7c:	4584      	cmp	ip, r0
 8013b7e:	bfa8      	it	ge
 8013b80:	4684      	movge	ip, r0
 8013b82:	429f      	cmp	r7, r3
 8013b84:	bfb8      	it	lt
 8013b86:	461f      	movlt	r7, r3
 8013b88:	429e      	cmp	r6, r3
 8013b8a:	bfa8      	it	ge
 8013b8c:	461e      	movge	r6, r3
 8013b8e:	4542      	cmp	r2, r8
 8013b90:	d1dd      	bne.n	8013b4e <MEMS_runMagCal+0x10c6>
 8013b92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b96:	eec7 8a88 	vdiv.f32	s17, s15, s16
 8013b9a:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8013b9e:	eba1 010e 	sub.w	r1, r1, lr
 8013ba2:	eba5 050c 	sub.w	r5, r5, ip
 8013ba6:	1bbe      	subs	r6, r7, r6
 8013ba8:	b209      	sxth	r1, r1
 8013baa:	b22d      	sxth	r5, r5
 8013bac:	b236      	sxth	r6, r6
 8013bae:	ed1f 7a35 	vldr	s14, [pc, #-212]	; 8013adc <MEMS_runMagCal+0x1054>
 8013bb2:	ee28 7a87 	vmul.f32	s14, s17, s14
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	f040 8593 	bne.w	80146e2 <MEMS_runMagCal+0x1c5a>
 8013bbc:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013bc0:	fab3 f883 	clz	r8, r3
 8013bc4:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8013bc8:	ee06 1a90 	vmov	s13, r1
 8013bcc:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013bd4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013bd8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8013bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be0:	f300 8562 	bgt.w	80146a8 <MEMS_runMagCal+0x1c20>
 8013be4:	ee06 5a10 	vmov	s12, r5
 8013be8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8013bec:	eef4 7ac6 	vcmpe.f32	s15, s12
 8013bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bf4:	f100 8558 	bmi.w	80146a8 <MEMS_runMagCal+0x1c20>
 8013bf8:	ee05 6a90 	vmov	s11, r6
 8013bfc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8013c00:	eef4 7ae5 	vcmpe.f32	s15, s11
 8013c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c08:	f100 854e 	bmi.w	80146a8 <MEMS_runMagCal+0x1c20>
 8013c0c:	428d      	cmp	r5, r1
 8013c0e:	462b      	mov	r3, r5
 8013c10:	bfb8      	it	lt
 8013c12:	460b      	movlt	r3, r1
 8013c14:	42b3      	cmp	r3, r6
 8013c16:	461a      	mov	r2, r3
 8013c18:	bfb8      	it	lt
 8013c1a:	4632      	movlt	r2, r6
 8013c1c:	428e      	cmp	r6, r1
 8013c1e:	4633      	mov	r3, r6
 8013c20:	bfa8      	it	ge
 8013c22:	460b      	movge	r3, r1
 8013c24:	42ab      	cmp	r3, r5
 8013c26:	bfa8      	it	ge
 8013c28:	462b      	movge	r3, r5
 8013c2a:	428a      	cmp	r2, r1
 8013c2c:	9202      	str	r2, [sp, #8]
 8013c2e:	f340 8588 	ble.w	8014742 <MEMS_runMagCal+0x1cba>
 8013c32:	4299      	cmp	r1, r3
 8013c34:	bfb8      	it	lt
 8013c36:	4619      	movlt	r1, r3
 8013c38:	42aa      	cmp	r2, r5
 8013c3a:	dd02      	ble.n	8013c42 <MEMS_runMagCal+0x11ba>
 8013c3c:	42ab      	cmp	r3, r5
 8013c3e:	bfb8      	it	lt
 8013c40:	4629      	movlt	r1, r5
 8013c42:	9a02      	ldr	r2, [sp, #8]
 8013c44:	4296      	cmp	r6, r2
 8013c46:	da02      	bge.n	8013c4e <MEMS_runMagCal+0x11c6>
 8013c48:	429e      	cmp	r6, r3
 8013c4a:	bfc8      	it	gt
 8013c4c:	4631      	movgt	r1, r6
 8013c4e:	f1b8 0f00 	cmp.w	r8, #0
 8013c52:	f000 8299 	beq.w	8014188 <MEMS_runMagCal+0x1700>
 8013c56:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c5e:	dc0d      	bgt.n	8013c7c <MEMS_runMagCal+0x11f4>
 8013c60:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8013c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c68:	dc08      	bgt.n	8013c7c <MEMS_runMagCal+0x11f4>
 8013c6a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c72:	bfcc      	ite	gt
 8013c74:	f04f 0801 	movgt.w	r8, #1
 8013c78:	f04f 0800 	movle.w	r8, #0
 8013c7c:	ed5f 7a68 	vldr	s15, [pc, #-416]	; 8013ae0 <MEMS_runMagCal+0x1058>
 8013c80:	ed9d 5a02 	vldr	s10, [sp, #8]
 8013c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c88:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013c8c:	eeb4 5ae7 	vcmpe.f32	s10, s15
 8013c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c94:	f2c0 8558 	blt.w	8014748 <MEMS_runMagCal+0x1cc0>
 8013c98:	ee07 1a90 	vmov	s15, r1
 8013c9c:	eeb7 5a02 	vmov.f32	s10, #114	; 0x3f900000  1.125
 8013ca0:	ee27 5a05 	vmul.f32	s10, s14, s10
 8013ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013ca8:	eef4 7ac5 	vcmpe.f32	s15, s10
 8013cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cb0:	f2c0 854a 	blt.w	8014748 <MEMS_runMagCal+0x1cc0>
 8013cb4:	9a02      	ldr	r2, [sp, #8]
 8013cb6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8013cba:	f280 8545 	bge.w	8014748 <MEMS_runMagCal+0x1cc0>
 8013cbe:	ee07 3a90 	vmov	s15, r3
 8013cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013cc6:	eeb7 5a04 	vmov.f32	s10, #116	; 0x3fa00000  1.250
 8013cca:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cd6:	f140 8537 	bpl.w	8014748 <MEMS_runMagCal+0x1cc0>
 8013cda:	9b06      	ldr	r3, [sp, #24]
 8013cdc:	4553      	cmp	r3, sl
 8013cde:	f000 8569 	beq.w	80147b4 <MEMS_runMagCal+0x1d2c>
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	9b04      	ldr	r3, [sp, #16]
 8013ce6:	1a9b      	subs	r3, r3, r2
 8013ce8:	fb93 f7f9 	sdiv	r7, r3, r9
 8013cec:	fb09 3717 	mls	r7, r9, r7, r3
 8013cf0:	2f00      	cmp	r7, #0
 8013cf2:	bfb8      	it	lt
 8013cf4:	4457      	addlt	r7, sl
 8013cf6:	b23f      	sxth	r7, r7
 8013cf8:	9b03      	ldr	r3, [sp, #12]
 8013cfa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8013cfe:	b27f      	sxtb	r7, r7
 8013d00:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8013d04:	9304      	str	r3, [sp, #16]
 8013d06:	f1c7 0e01 	rsb	lr, r7, #1
 8013d0a:	469c      	mov	ip, r3
 8013d0c:	463b      	mov	r3, r7
 8013d0e:	fb93 f1f9 	sdiv	r1, r3, r9
 8013d12:	fb09 3111 	mls	r1, r9, r1, r3
 8013d16:	b24a      	sxtb	r2, r1
 8013d18:	2a00      	cmp	r2, #0
 8013d1a:	f107 0701 	add.w	r7, r7, #1
 8013d1e:	bfb8      	it	lt
 8013d20:	eb0a 0201 	addlt.w	r2, sl, r1
 8013d24:	fb97 f3f9 	sdiv	r3, r7, r9
 8013d28:	fb09 7313 	mls	r3, r9, r3, r7
 8013d2c:	bfb8      	it	lt
 8013d2e:	b252      	sxtblt	r2, r2
 8013d30:	b25b      	sxtb	r3, r3
 8013d32:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013d36:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8013d3a:	f9b3 00ae 	ldrsh.w	r0, [r3, #174]	; 0xae
 8013d3e:	f9b2 10ae 	ldrsh.w	r1, [r2, #174]	; 0xae
 8013d42:	f9b3 40b0 	ldrsh.w	r4, [r3, #176]	; 0xb0
 8013d46:	1a45      	subs	r5, r0, r1
 8013d48:	bf48      	it	mi
 8013d4a:	1a09      	submi	r1, r1, r0
 8013d4c:	f9b2 00b0 	ldrsh.w	r0, [r2, #176]	; 0xb0
 8013d50:	bf4c      	ite	mi
 8013d52:	b20d      	sxthmi	r5, r1
 8013d54:	b22d      	sxthpl	r5, r5
 8013d56:	1a21      	subs	r1, r4, r0
 8013d58:	bf48      	it	mi
 8013d5a:	1b01      	submi	r1, r0, r4
 8013d5c:	f9b3 40b2 	ldrsh.w	r4, [r3, #178]	; 0xb2
 8013d60:	f9b2 00b2 	ldrsh.w	r0, [r2, #178]	; 0xb2
 8013d64:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8013d68:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 8013d6c:	1a9b      	subs	r3, r3, r2
 8013d6e:	1a26      	subs	r6, r4, r0
 8013d70:	b21b      	sxth	r3, r3
 8013d72:	bf48      	it	mi
 8013d74:	1b06      	submi	r6, r0, r4
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	b209      	sxth	r1, r1
 8013d7a:	b236      	sxth	r6, r6
 8013d7c:	dd20      	ble.n	8013dc0 <MEMS_runMagCal+0x1338>
 8013d7e:	4429      	add	r1, r5
 8013d80:	440e      	add	r6, r1
 8013d82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013d86:	fb02 f606 	mul.w	r6, r2, r6
 8013d8a:	ee07 6a90 	vmov	s15, r6
 8013d8e:	ee07 3a10 	vmov	s14, r3
 8013d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013d96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d9a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013d9e:	f10c 0c01 	add.w	ip, ip, #1
 8013da2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013da6:	fa5f fc8c 	uxtb.w	ip, ip
 8013daa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013dae:	ee17 3a90 	vmov	r3, s15
 8013db2:	b21b      	sxth	r3, r3
 8013db4:	2b96      	cmp	r3, #150	; 0x96
 8013db6:	dd03      	ble.n	8013dc0 <MEMS_runMagCal+0x1338>
 8013db8:	9b04      	ldr	r3, [sp, #16]
 8013dba:	3301      	adds	r3, #1
 8013dbc:	b2db      	uxtb	r3, r3
 8013dbe:	9304      	str	r3, [sp, #16]
 8013dc0:	eb0e 0307 	add.w	r3, lr, r7
 8013dc4:	b2db      	uxtb	r3, r3
 8013dc6:	4598      	cmp	r8, r3
 8013dc8:	d8a0      	bhi.n	8013d0c <MEMS_runMagCal+0x1284>
 8013dca:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8013dce:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8013dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013dd6:	4563      	cmp	r3, ip
 8013dd8:	f340 820c 	ble.w	80141f4 <MEMS_runMagCal+0x176c>
 8013ddc:	9b07      	ldr	r3, [sp, #28]
 8013dde:	b92b      	cbnz	r3, 8013dec <MEMS_runMagCal+0x1364>
 8013de0:	f89b 3058 	ldrb.w	r3, [fp, #88]	; 0x58
 8013de4:	3b02      	subs	r3, #2
 8013de6:	2b01      	cmp	r3, #1
 8013de8:	f240 851e 	bls.w	8014828 <MEMS_runMagCal+0x1da0>
 8013dec:	ac25      	add	r4, sp, #148	; 0x94
 8013dee:	2220      	movs	r2, #32
 8013df0:	4620      	mov	r0, r4
 8013df2:	2100      	movs	r1, #0
 8013df4:	f003 fb34 	bl	8017460 <memset>
 8013df8:	f89b 608c 	ldrb.w	r6, [fp, #140]	; 0x8c
 8013dfc:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
 8013e00:	f99b 308e 	ldrsb.w	r3, [fp, #142]	; 0x8e
 8013e04:	2200      	movs	r2, #0
 8013e06:	4286      	cmp	r6, r0
 8013e08:	e9cd 221d 	strd	r2, r2, [sp, #116]	; 0x74
 8013e0c:	921f      	str	r2, [sp, #124]	; 0x7c
 8013e0e:	f103 0301 	add.w	r3, r3, #1
 8013e12:	f000 8501 	beq.w	8014818 <MEMS_runMagCal+0x1d90>
 8013e16:	1b9b      	subs	r3, r3, r6
 8013e18:	fb93 f2f0 	sdiv	r2, r3, r0
 8013e1c:	fb00 3312 	mls	r3, r0, r2, r3
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	bfb8      	it	lt
 8013e24:	181b      	addlt	r3, r3, r0
 8013e26:	b21a      	sxth	r2, r3
 8013e28:	2e00      	cmp	r6, #0
 8013e2a:	f000 854c 	beq.w	80148c6 <MEMS_runMagCal+0x1e3e>
 8013e2e:	1e77      	subs	r7, r6, #1
 8013e30:	ed5f 5ad4 	vldr	s11, [pc, #-848]	; 8013ae4 <MEMS_runMagCal+0x105c>
 8013e34:	b2fd      	uxtb	r5, r7
 8013e36:	3501      	adds	r5, #1
 8013e38:	eeb0 5a65 	vmov.f32	s10, s11
 8013e3c:	eef0 4a65 	vmov.f32	s9, s11
 8013e40:	4415      	add	r5, r2
 8013e42:	4611      	mov	r1, r2
 8013e44:	fb91 f3f0 	sdiv	r3, r1, r0
 8013e48:	fb00 1313 	mls	r3, r0, r3, r1
 8013e4c:	b2db      	uxtb	r3, r3
 8013e4e:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013e52:	3101      	adds	r1, #1
 8013e54:	f9b3 c0ae 	ldrsh.w	ip, [r3, #174]	; 0xae
 8013e58:	ee06 ca90 	vmov	s13, ip
 8013e5c:	f9b3 c0b0 	ldrsh.w	ip, [r3, #176]	; 0xb0
 8013e60:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013e64:	ee07 ca10 	vmov	s14, ip
 8013e68:	ee07 3a90 	vmov	s15, r3
 8013e6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013e70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e78:	42a9      	cmp	r1, r5
 8013e7a:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8013e7e:	ee35 5a07 	vadd.f32	s10, s10, s14
 8013e82:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8013e86:	d1dd      	bne.n	8013e44 <MEMS_runMagCal+0x13bc>
 8013e88:	ee07 6a90 	vmov	s15, r6
 8013e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013e94:	eec7 9a27 	vdiv.f32	s19, s14, s15
 8013e98:	b2f9      	uxtb	r1, r7
 8013e9a:	3101      	adds	r1, #1
 8013e9c:	4411      	add	r1, r2
 8013e9e:	ed9f 6aeb 	vldr	s12, [pc, #940]	; 801424c <MEMS_runMagCal+0x17c4>
 8013ea2:	edcd 4a1d 	vstr	s9, [sp, #116]	; 0x74
 8013ea6:	ee29 9aa4 	vmul.f32	s18, s19, s9
 8013eaa:	ee29 aa85 	vmul.f32	s20, s19, s10
 8013eae:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8013eb2:	eef0 4a46 	vmov.f32	s9, s12
 8013eb6:	eeb0 4a46 	vmov.f32	s8, s12
 8013eba:	eef0 3a46 	vmov.f32	s7, s12
 8013ebe:	eeb0 3a46 	vmov.f32	s6, s12
 8013ec2:	eef0 2a46 	vmov.f32	s5, s12
 8013ec6:	ed8d 5a1e 	vstr	s10, [sp, #120]	; 0x78
 8013eca:	edcd 5a1f 	vstr	s11, [sp, #124]	; 0x7c
 8013ece:	fb92 f3f0 	sdiv	r3, r2, r0
 8013ed2:	fb00 2313 	mls	r3, r0, r3, r2
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	eb0b 03c3 	add.w	r3, fp, r3, lsl #3
 8013edc:	3201      	adds	r2, #1
 8013ede:	f9b3 50ae 	ldrsh.w	r5, [r3, #174]	; 0xae
 8013ee2:	ee06 5a90 	vmov	s13, r5
 8013ee6:	f9b3 50b0 	ldrsh.w	r5, [r3, #176]	; 0xb0
 8013eea:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 8013eee:	ee07 5a10 	vmov	s14, r5
 8013ef2:	ee07 3a90 	vmov	s15, r3
 8013ef6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013efa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f02:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8013f06:	ee37 7a4a 	vsub.f32	s14, s14, s20
 8013f0a:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8013f0e:	4291      	cmp	r1, r2
 8013f10:	eee6 2aa6 	vfma.f32	s5, s13, s13
 8013f14:	eea6 3a87 	vfma.f32	s6, s13, s14
 8013f18:	eea7 4a07 	vfma.f32	s8, s14, s14
 8013f1c:	eee6 3aa7 	vfma.f32	s7, s13, s15
 8013f20:	eee7 4a27 	vfma.f32	s9, s14, s15
 8013f24:	eea7 6aa7 	vfma.f32	s12, s15, s15
 8013f28:	d1d1      	bne.n	8013ece <MEMS_runMagCal+0x1446>
 8013f2a:	edc4 2a00 	vstr	s5, [r4]
 8013f2e:	ed84 3a01 	vstr	s6, [r4, #4]
 8013f32:	edc4 3a02 	vstr	s7, [r4, #8]
 8013f36:	ed84 4a03 	vstr	s8, [r4, #12]
 8013f3a:	edc4 4a04 	vstr	s9, [r4, #16]
 8013f3e:	ed84 6a05 	vstr	s12, [r4, #20]
 8013f42:	a91a      	add	r1, sp, #104	; 0x68
 8013f44:	4620      	mov	r0, r4
 8013f46:	f7fe fce5 	bl	8012914 <MEMS_EIG3>
 8013f4a:	ed9d 6a1b 	vldr	s12, [sp, #108]	; 0x6c
 8013f4e:	eddd 4a1a 	vldr	s9, [sp, #104]	; 0x68
 8013f52:	ed9d 5a1c 	vldr	s10, [sp, #112]	; 0x70
 8013f56:	eef0 5ae4 	vabs.f32	s11, s9
 8013f5a:	eef0 6ac6 	vabs.f32	s13, s12
 8013f5e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f66:	bf8c      	ite	hi
 8013f68:	eef0 7a65 	vmovhi.f32	s15, s11
 8013f6c:	eef0 7a66 	vmovls.f32	s15, s13
 8013f70:	eeb0 7ac5 	vabs.f32	s14, s10
 8013f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f7c:	eef4 6ae5 	vcmpe.f32	s13, s11
 8013f80:	bf88      	it	hi
 8013f82:	eef0 7a47 	vmovhi.f32	s15, s14
 8013f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f8a:	bfb8      	it	lt
 8013f8c:	eef0 6a65 	vmovlt.f32	s13, s11
 8013f90:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8013f94:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8013f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f9c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8013fa0:	bfb8      	it	lt
 8013fa2:	eeb0 7a66 	vmovlt.f32	s14, s13
 8013fa6:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	f300 8420 	bgt.w	80147f2 <MEMS_runMagCal+0x1d6a>
 8013fb2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8013fb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013fba:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 8013fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc6:	dd02      	ble.n	8013fce <MEMS_runMagCal+0x1546>
 8013fc8:	2b22      	cmp	r3, #34	; 0x22
 8013fca:	f240 8412 	bls.w	80147f2 <MEMS_runMagCal+0x1d6a>
 8013fce:	ee76 7a24 	vadd.f32	s15, s12, s9
 8013fd2:	ee07 3a10 	vmov	s14, r3
 8013fd6:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013fda:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013fde:	eddf 6a90 	vldr	s13, [pc, #576]	; 8014220 <MEMS_runMagCal+0x1798>
 8013fe2:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8013fe6:	eef1 7ac6 	vsqrt.f32	s15, s12
 8013fea:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013fee:	eef4 7ae6 	vcmpe.f32	s15, s13
 8013ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ff6:	f300 83fc 	bgt.w	80147f2 <MEMS_runMagCal+0x1d6a>
 8013ffa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8013ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014006:	f100 83f4 	bmi.w	80147f2 <MEMS_runMagCal+0x1d6a>
 801400a:	eddf 7a86 	vldr	s15, [pc, #536]	; 8014224 <MEMS_runMagCal+0x179c>
 801400e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8014012:	2300      	movs	r3, #0
 8014014:	e9cd 3329 	strd	r3, r3, [sp, #164]	; 0xa4
 8014018:	932c      	str	r3, [sp, #176]	; 0xb0
 801401a:	eddd 7a02 	vldr	s15, [sp, #8]
 801401e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402a:	d408      	bmi.n	801403e <MEMS_runMagCal+0x15b6>
 801402c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014030:	ee17 3a10 	vmov	r3, s14
 8014034:	b21b      	sxth	r3, r3
 8014036:	ee07 3a90 	vmov	s15, r3
 801403a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801403e:	eddf 6a81 	vldr	s13, [pc, #516]	; 8014244 <MEMS_runMagCal+0x17bc>
 8014042:	ee86 7a88 	vdiv.f32	s14, s13, s16
 8014046:	eef4 7ac7 	vcmpe.f32	s15, s14
 801404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801404e:	dc08      	bgt.n	8014062 <MEMS_runMagCal+0x15da>
 8014050:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014054:	ee17 3a10 	vmov	r3, s14
 8014058:	b21b      	sxth	r3, r3
 801405a:	ee07 3a90 	vmov	s15, r3
 801405e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014062:	ee27 7a88 	vmul.f32	s14, s15, s16
 8014066:	eddf 7a70 	vldr	s15, [pc, #448]	; 8014228 <MEMS_runMagCal+0x17a0>
 801406a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801406e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014072:	f340 8424 	ble.w	80148be <MEMS_runMagCal+0x1e36>
 8014076:	eddf 7a6d 	vldr	s15, [pc, #436]	; 801422c <MEMS_runMagCal+0x17a4>
 801407a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801407e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014082:	f140 841c 	bpl.w	80148be <MEMS_runMagCal+0x1e36>
 8014086:	eddf 6a6a 	vldr	s13, [pc, #424]	; 8014230 <MEMS_runMagCal+0x17a8>
 801408a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801408e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014092:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014096:	ee67 7a87 	vmul.f32	s15, s15, s14
 801409a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8014244 <MEMS_runMagCal+0x17bc>
 801409e:	eddf ba6b 	vldr	s23, [pc, #428]	; 801424c <MEMS_runMagCal+0x17c4>
 80140a2:	ed9f ba64 	vldr	s22, [pc, #400]	; 8014234 <MEMS_runMagCal+0x17ac>
 80140a6:	eddf aa64 	vldr	s21, [pc, #400]	; 8014238 <MEMS_runMagCal+0x17b0>
 80140aa:	9d03      	ldr	r5, [sp, #12]
 80140ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80140b0:	ee68 4a09 	vmul.f32	s9, s16, s18
 80140b4:	ee28 aa0a 	vmul.f32	s20, s16, s20
 80140b8:	ee68 9a29 	vmul.f32	s19, s16, s19
 80140bc:	edc4 4a00 	vstr	s9, [r4]
 80140c0:	ed84 aa01 	vstr	s20, [r4, #4]
 80140c4:	edc4 9a02 	vstr	s19, [r4, #8]
 80140c8:	edc4 7a03 	vstr	s15, [r4, #12]
 80140cc:	edc4 7a06 	vstr	s15, [r4, #24]
 80140d0:	ab11      	add	r3, sp, #68	; 0x44
 80140d2:	ee1c 0a10 	vmov	r0, s24
 80140d6:	aa2d      	add	r2, sp, #180	; 0xb4
 80140d8:	eeb0 0a48 	vmov.f32	s0, s16
 80140dc:	4621      	mov	r1, r4
 80140de:	f7fe fa01 	bl	80124e4 <MEMS_SolveLinearEq>
 80140e2:	1c6b      	adds	r3, r5, #1
 80140e4:	2800      	cmp	r0, #0
 80140e6:	f43e aed1 	beq.w	8012e8c <MEMS_runMagCal+0x404>
 80140ea:	ed9d 3a2d 	vldr	s6, [sp, #180]	; 0xb4
 80140ee:	eddd 3a2e 	vldr	s7, [sp, #184]	; 0xb8
 80140f2:	ed9d 4a2f 	vldr	s8, [sp, #188]	; 0xbc
 80140f6:	edd4 4a00 	vldr	s9, [r4]
 80140fa:	ed94 5a01 	vldr	s10, [r4, #4]
 80140fe:	edd4 5a02 	vldr	s11, [r4, #8]
 8014102:	ed9d 7a30 	vldr	s14, [sp, #192]	; 0xc0
 8014106:	ed94 6a03 	vldr	s12, [r4, #12]
 801410a:	eef0 6ae3 	vabs.f32	s13, s7
 801410e:	eef0 7ac3 	vabs.f32	s15, s6
 8014112:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801411a:	bfb8      	it	lt
 801411c:	eef0 7a66 	vmovlt.f32	s15, s13
 8014120:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014128:	bfb8      	it	lt
 801412a:	eef0 7a6b 	vmovlt.f32	s15, s23
 801412e:	eef0 6ac4 	vabs.f32	s13, s8
 8014132:	eef4 6ae7 	vcmpe.f32	s13, s15
 8014136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801413a:	bfb8      	it	lt
 801413c:	eef0 6a67 	vmovlt.f32	s13, s15
 8014140:	ee74 4a83 	vadd.f32	s9, s9, s6
 8014144:	ee35 5a23 	vadd.f32	s10, s10, s7
 8014148:	ee75 5a84 	vadd.f32	s11, s11, s8
 801414c:	ee36 6a07 	vadd.f32	s12, s12, s14
 8014150:	eef4 6acb 	vcmpe.f32	s13, s22
 8014154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014158:	edc4 4a00 	vstr	s9, [r4]
 801415c:	ed84 5a01 	vstr	s10, [r4, #4]
 8014160:	edc4 5a02 	vstr	s11, [r4, #8]
 8014164:	ed84 6a03 	vstr	s12, [r4, #12]
 8014168:	eef0 7ac7 	vabs.f32	s15, s14
 801416c:	d507      	bpl.n	801417e <MEMS_runMagCal+0x16f6>
 801416e:	eef4 7aea 	vcmpe.f32	s15, s21
 8014172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014176:	d502      	bpl.n	801417e <MEMS_runMagCal+0x16f6>
 8014178:	2d01      	cmp	r5, #1
 801417a:	f63e ae8b 	bhi.w	8012e94 <MEMS_runMagCal+0x40c>
 801417e:	b2dd      	uxtb	r5, r3
 8014180:	2d05      	cmp	r5, #5
 8014182:	d1a5      	bne.n	80140d0 <MEMS_runMagCal+0x1648>
 8014184:	f7fe be86 	b.w	8012e94 <MEMS_runMagCal+0x40c>
 8014188:	eddb 4a1e 	vldr	s9, [fp, #120]	; 0x78
 801418c:	eddb 7a1a 	vldr	s15, [fp, #104]	; 0x68
 8014190:	ed9b 5a22 	vldr	s10, [fp, #136]	; 0x88
 8014194:	ed9f 4a29 	vldr	s8, [pc, #164]	; 801423c <MEMS_runMagCal+0x17b4>
 8014198:	ee77 7aa4 	vadd.f32	s15, s15, s9
 801419c:	eef7 4a02 	vmov.f32	s9, #114	; 0x3f900000  1.125
 80141a0:	ee77 7a85 	vadd.f32	s15, s15, s10
 80141a4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80141a8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80141ac:	eef4 7ae4 	vcmpe.f32	s15, s9
 80141b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141b4:	bf88      	it	hi
 80141b6:	eef0 7a64 	vmovhi.f32	s15, s9
 80141ba:	eef4 7ac5 	vcmpe.f32	s15, s10
 80141be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141c2:	bfb8      	it	lt
 80141c4:	eef0 7a45 	vmovlt.f32	s15, s10
 80141c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80141cc:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80141d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141d4:	dc0e      	bgt.n	80141f4 <MEMS_runMagCal+0x176c>
 80141d6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80141da:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80141de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e2:	dc07      	bgt.n	80141f4 <MEMS_runMagCal+0x176c>
 80141e4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80141e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f0:	f77f ad73 	ble.w	8013cda <MEMS_runMagCal+0x1252>
 80141f4:	2300      	movs	r3, #0
 80141f6:	f88b 3000 	strb.w	r3, [fp]
 80141fa:	f7ff b880 	b.w	80132fe <MEMS_runMagCal+0x876>
 80141fe:	2300      	movs	r3, #0
 8014200:	9307      	str	r3, [sp, #28]
 8014202:	2301      	movs	r3, #1
 8014204:	9303      	str	r3, [sp, #12]
 8014206:	f7ff bb61 	b.w	80138cc <MEMS_runMagCal+0xe44>
 801420a:	3301      	adds	r3, #1
 801420c:	fb93 f2f7 	sdiv	r2, r3, r7
 8014210:	fb07 3212 	mls	r2, r7, r2, r3
 8014214:	930b      	str	r3, [sp, #44]	; 0x2c
 8014216:	b212      	sxth	r2, r2
 8014218:	46bc      	mov	ip, r7
 801421a:	f7ff bb75 	b.w	8013908 <MEMS_runMagCal+0xe80>
 801421e:	bf00      	nop
 8014220:	42960000 	.word	0x42960000
 8014224:	430d0000 	.word	0x430d0000
 8014228:	41966667 	.word	0x41966667
 801422c:	433c0000 	.word	0x433c0000
 8014230:	3c2e4c41 	.word	0x3c2e4c41
 8014234:	3e99999a 	.word	0x3e99999a
 8014238:	3f666666 	.word	0x3f666666
 801423c:	3eaaaaab 	.word	0x3eaaaaab
 8014240:	358637bd 	.word	0x358637bd
 8014244:	423c0000 	.word	0x423c0000
 8014248:	3a83126f 	.word	0x3a83126f
 801424c:	00000000 	.word	0x00000000
 8014250:	eddd 7a08 	vldr	s15, [sp, #32]
 8014254:	ed5f 6a04 	vldr	s13, [pc, #-16]	; 8014248 <MEMS_runMagCal+0x17c0>
 8014258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801425c:	ee07 3a10 	vmov	s14, r3
 8014260:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014264:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014268:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 801426c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014270:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014278:	f63f aa67 	bhi.w	801374a <MEMS_runMagCal+0xcc2>
 801427c:	9b07      	ldr	r3, [sp, #28]
 801427e:	2b00      	cmp	r3, #0
 8014280:	f43f a83d 	beq.w	80132fe <MEMS_runMagCal+0x876>
 8014284:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
 8014288:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801428c:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8014290:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014294:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801429c:	bf4c      	ite	mi
 801429e:	2301      	movmi	r3, #1
 80142a0:	2300      	movpl	r3, #0
 80142a2:	9307      	str	r3, [sp, #28]
 80142a4:	f7ff ba55 	b.w	8013752 <MEMS_runMagCal+0xcca>
 80142a8:	fb92 f1f0 	sdiv	r1, r2, r0
 80142ac:	fb00 2211 	mls	r2, r0, r1, r2
 80142b0:	b211      	sxth	r1, r2
 80142b2:	4605      	mov	r5, r0
 80142b4:	f7ff b8da 	b.w	801346c <MEMS_runMagCal+0x9e4>
 80142b8:	2200      	movs	r2, #0
 80142ba:	23ff      	movs	r3, #255	; 0xff
 80142bc:	ee1c 0a10 	vmov	r0, s24
 80142c0:	f88b 208c 	strb.w	r2, [fp, #140]	; 0x8c
 80142c4:	f88b 308e 	strb.w	r3, [fp, #142]	; 0x8e
 80142c8:	eeb0 0a49 	vmov.f32	s0, s18
 80142cc:	4649      	mov	r1, r9
 80142ce:	f7f7 fd11 	bl	800bcf4 <MEMS_updateMagBufferIndex>
 80142d2:	f7ff b90b 	b.w	80134ec <MEMS_runMagCal+0xa64>
 80142d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80142da:	fb03 f60c 	mul.w	r6, r3, ip
 80142de:	fb03 f202 	mul.w	r2, r3, r2
 80142e2:	fb03 f301 	mul.w	r3, r3, r1
 80142e6:	ee06 6a90 	vmov	s13, r6
 80142ea:	ee07 2a10 	vmov	s14, r2
 80142ee:	ee07 3a90 	vmov	s15, r3
 80142f2:	ed1f 6a2d 	vldr	s12, [pc, #-180]	; 8014240 <MEMS_runMagCal+0x17b8>
 80142f6:	9e05      	ldr	r6, [sp, #20]
 80142f8:	9400      	str	r4, [sp, #0]
 80142fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80142fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014306:	ee66 6a86 	vmul.f32	s13, s13, s12
 801430a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801430e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014312:	f10b 0868 	add.w	r8, fp, #104	; 0x68
 8014316:	e9c5 0001 	strd	r0, r0, [r5, #4]
 801431a:	e9c5 0003 	strd	r0, r0, [r5, #12]
 801431e:	e9c5 0005 	strd	r0, r0, [r5, #20]
 8014322:	6028      	str	r0, [r5, #0]
 8014324:	ed96 0a01 	vldr	s0, [r6, #4]
 8014328:	edcd 6a2d 	vstr	s13, [sp, #180]	; 0xb4
 801432c:	4642      	mov	r2, r8
 801432e:	ab0d      	add	r3, sp, #52	; 0x34
 8014330:	f10b 014a 	add.w	r1, fp, #74	; 0x4a
 8014334:	ad0e      	add	r5, sp, #56	; 0x38
 8014336:	ee1c 0a10 	vmov	r0, s24
 801433a:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 801433e:	edcd 7a35 	vstr	s15, [sp, #212]	; 0xd4
 8014342:	f7f7 fd79 	bl	800be38 <getMagStats.constprop.0>
 8014346:	9500      	str	r5, [sp, #0]
 8014348:	ed96 0a01 	vldr	s0, [r6, #4]
 801434c:	ee1c 0a10 	vmov	r0, s24
 8014350:	aa2d      	add	r2, sp, #180	; 0xb4
 8014352:	ab0d      	add	r3, sp, #52	; 0x34
 8014354:	f10d 0186 	add.w	r1, sp, #134	; 0x86
 8014358:	f7f7 fd6e 	bl	800be38 <getMagStats.constprop.0>
 801435c:	ed5f 6a47 	vldr	s13, [pc, #-284]	; 8014244 <MEMS_runMagCal+0x17bc>
 8014360:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8014364:	ed95 7a00 	vldr	s14, [r5]
 8014368:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801436c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8014370:	eef0 7ae7 	vabs.f32	s15, s15
 8014374:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437c:	d505      	bpl.n	801438a <MEMS_runMagCal+0x1902>
 801437e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014386:	f100 81fa 	bmi.w	801477e <MEMS_runMagCal+0x1cf6>
 801438a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 801438e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8014392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014396:	f140 81a8 	bpl.w	80146ea <MEMS_runMagCal+0x1c62>
 801439a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a2:	9b03      	ldr	r3, [sp, #12]
 80143a4:	bfb8      	it	lt
 80143a6:	2302      	movlt	r3, #2
 80143a8:	edd4 6a00 	vldr	s13, [r4]
 80143ac:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80143b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80143b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80143b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143bc:	f57e af9f 	bpl.w	80132fe <MEMS_runMagCal+0x876>
 80143c0:	f89b 2058 	ldrb.w	r2, [fp, #88]	; 0x58
 80143c4:	429a      	cmp	r2, r3
 80143c6:	f63e af9a 	bhi.w	80132fe <MEMS_runMagCal+0x876>
 80143ca:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80143ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80143d2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80143d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143da:	d40e      	bmi.n	80143fa <MEMS_runMagCal+0x1972>
 80143dc:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80143e0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80143e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143e8:	f140 80d4 	bpl.w	8014594 <MEMS_runMagCal+0x1b0c>
 80143ec:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
 80143f0:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80143f4:	429a      	cmp	r2, r3
 80143f6:	f080 80cd 	bcs.w	8014594 <MEMS_runMagCal+0x1b0c>
 80143fa:	9b05      	ldr	r3, [sp, #20]
 80143fc:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8014400:	f9bb 104c 	ldrsh.w	r1, [fp, #76]	; 0x4c
 8014404:	f9bd 7086 	ldrsh.w	r7, [sp, #134]	; 0x86
 8014408:	f9bb 004a 	ldrsh.w	r0, [fp, #74]	; 0x4a
 801440c:	edd3 5a01 	vldr	s11, [r3, #4]
 8014410:	f9bd 408a 	ldrsh.w	r4, [sp, #138]	; 0x8a
 8014414:	f9bb 204e 	ldrsh.w	r2, [fp, #78]	; 0x4e
 8014418:	1b8b      	subs	r3, r1, r6
 801441a:	eba0 0c07 	sub.w	ip, r0, r7
 801441e:	2b00      	cmp	r3, #0
 8014420:	bfb8      	it	lt
 8014422:	425b      	neglt	r3, r3
 8014424:	f1bc 0f00 	cmp.w	ip, #0
 8014428:	bfb8      	it	lt
 801442a:	f1cc 0c00 	rsblt	ip, ip, #0
 801442e:	4563      	cmp	r3, ip
 8014430:	bfb8      	it	lt
 8014432:	4663      	movlt	r3, ip
 8014434:	eba2 0c04 	sub.w	ip, r2, r4
 8014438:	f1bc 0f00 	cmp.w	ip, #0
 801443c:	b21b      	sxth	r3, r3
 801443e:	bfb8      	it	lt
 8014440:	f1cc 0c00 	rsblt	ip, ip, #0
 8014444:	4563      	cmp	r3, ip
 8014446:	bfb8      	it	lt
 8014448:	4663      	movlt	r3, ip
 801444a:	b21b      	sxth	r3, r3
 801444c:	ee07 3a90 	vmov	s15, r3
 8014450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014454:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8014458:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801445c:	eef4 7ac6 	vcmpe.f32	s15, s12
 8014460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014464:	f140 8096 	bpl.w	8014594 <MEMS_runMagCal+0x1b0c>
 8014468:	ee37 7a26 	vadd.f32	s14, s14, s13
 801446c:	f8bb 3050 	ldrh.w	r3, [fp, #80]	; 0x50
 8014470:	ee86 2a87 	vdiv.f32	s4, s13, s14
 8014474:	ee04 3a90 	vmov	s9, r3
 8014478:	f8bb 3052 	ldrh.w	r3, [fp, #82]	; 0x52
 801447c:	ee05 3a10 	vmov	s10, r3
 8014480:	f8bb 3054 	ldrh.w	r3, [fp, #84]	; 0x54
 8014484:	ee07 0a90 	vmov	s15, r0
 8014488:	ee05 3a90 	vmov	s11, r3
 801448c:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
 8014490:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014494:	ee36 4a42 	vsub.f32	s8, s12, s4
 8014498:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801449c:	ee06 3a10 	vmov	s12, r3
 80144a0:	ee03 7a90 	vmov	s7, r7
 80144a4:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80144a8:	ee07 1a90 	vmov	s15, r1
 80144ac:	ee00 3a90 	vmov	s1, r3
 80144b0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80144b4:	eef8 2ae3 	vcvt.f32.s32	s5, s7
 80144b8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 80144bc:	f8bd 308e 	ldrh.w	r3, [sp, #142]	; 0x8e
 80144c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80144c4:	ee64 4a84 	vmul.f32	s9, s9, s8
 80144c8:	ee03 6a90 	vmov	s7, r6
 80144cc:	eee2 6a22 	vfma.f32	s13, s4, s5
 80144d0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80144d4:	ee07 2a90 	vmov	s15, r2
 80144d8:	ee01 3a10 	vmov	s2, r3
 80144dc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80144e0:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 80144e4:	eeb8 3ae3 	vcvt.f32.s32	s6, s7
 80144e8:	eee2 4a20 	vfma.f32	s9, s4, s1
 80144ec:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80144f0:	ee01 3a90 	vmov	s3, r3
 80144f4:	ee25 5a04 	vmul.f32	s10, s10, s8
 80144f8:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 80144fc:	eea2 7a03 	vfma.f32	s14, s4, s6
 8014500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014504:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8014508:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 801450c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8014510:	ee03 4a90 	vmov	s7, r4
 8014514:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8014518:	ee67 7a84 	vmul.f32	s15, s15, s8
 801451c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8014520:	ee26 6a04 	vmul.f32	s12, s12, s8
 8014524:	ee16 2a90 	vmov	r2, s13
 8014528:	ee04 3a10 	vmov	s8, r3
 801452c:	eea2 5a01 	vfma.f32	s10, s4, s2
 8014530:	f8ad 2086 	strh.w	r2, [sp, #134]	; 0x86
 8014534:	eef8 3ae3 	vcvt.f32.s32	s7, s7
 8014538:	eefc 4ae4 	vcvt.u32.f32	s9, s9
 801453c:	eee2 7a23 	vfma.f32	s15, s4, s7
 8014540:	ee14 2a90 	vmov	r2, s9
 8014544:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8014548:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 801454c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8014550:	eee2 5a21 	vfma.f32	s11, s4, s3
 8014554:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8014558:	eea2 6a04 	vfma.f32	s12, s4, s8
 801455c:	ee17 2a10 	vmov	r2, s14
 8014560:	eebc 5ac5 	vcvt.u32.f32	s10, s10
 8014564:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014568:	f8ad 2088 	strh.w	r2, [sp, #136]	; 0x88
 801456c:	ee15 2a10 	vmov	r2, s10
 8014570:	eefc 5ae5 	vcvt.u32.f32	s11, s11
 8014574:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8014578:	f8ad 208e 	strh.w	r2, [sp, #142]	; 0x8e
 801457c:	ee17 2a90 	vmov	r2, s15
 8014580:	ee16 3a10 	vmov	r3, s12
 8014584:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
 8014588:	ee15 2a90 	vmov	r2, s11
 801458c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8014590:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
 8014594:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8014596:	f89b 708c 	ldrb.w	r7, [fp, #140]	; 0x8c
 801459a:	f7fe bda2 	b.w	80130e2 <MEMS_runMagCal+0x65a>
 801459e:	ee1c 0a10 	vmov	r0, s24
 80145a2:	eeb0 0a49 	vmov.f32	s0, s18
 80145a6:	4649      	mov	r1, r9
 80145a8:	f7f7 fba4 	bl	800bcf4 <MEMS_updateMagBufferIndex>
 80145ac:	f7ff b89f 	b.w	80136ee <MEMS_runMagCal+0xc66>
 80145b0:	eddd 7a08 	vldr	s15, [sp, #32]
 80145b4:	ed1f 7adc 	vldr	s14, [pc, #-880]	; 8014248 <MEMS_runMagCal+0x17c0>
 80145b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80145bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80145c0:	e660      	b.n	8014284 <MEMS_runMagCal+0x17fc>
 80145c2:	ed5f 6ade 	vldr	s13, [pc, #-888]	; 801424c <MEMS_runMagCal+0x17c4>
 80145c6:	1c6b      	adds	r3, r5, #1
 80145c8:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80145cc:	ad0e      	add	r5, sp, #56	; 0x38
 80145ce:	fb93 f1f6 	sdiv	r1, r3, r6
 80145d2:	fa1f fc86 	uxth.w	ip, r6
 80145d6:	fb06 3311 	mls	r3, r6, r1, r3
 80145da:	edc5 6a00 	vstr	s13, [r5]
 80145de:	2e00      	cmp	r6, #0
 80145e0:	f000 80e1 	beq.w	80147a6 <MEMS_runMagCal+0x1d1e>
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80145ea:	1c58      	adds	r0, r3, #1
 80145ec:	eeb0 6a66 	vmov.f32	s12, s13
 80145f0:	fa10 fc8c 	uxtah	ip, r0, ip
 80145f4:	f241 2e5c 	movw	lr, #4700	; 0x125c
 80145f8:	4619      	mov	r1, r3
 80145fa:	e000      	b.n	80145fe <MEMS_runMagCal+0x1b76>
 80145fc:	3001      	adds	r0, #1
 80145fe:	fbb1 f3f6 	udiv	r3, r1, r6
 8014602:	fb06 1313 	mls	r3, r6, r3, r1
 8014606:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 801460a:	8a99      	ldrh	r1, [r3, #20]
 801460c:	4571      	cmp	r1, lr
 801460e:	f5a1 5392 	sub.w	r3, r1, #4672	; 0x1240
 8014612:	f1a3 031c 	sub.w	r3, r3, #28
 8014616:	bf98      	it	ls
 8014618:	ebae 0301 	subls.w	r3, lr, r1
 801461c:	b29b      	uxth	r3, r3
 801461e:	fb03 f303 	mul.w	r3, r3, r3
 8014622:	ee07 1a10 	vmov	s14, r1
 8014626:	ee07 3a90 	vmov	s15, r3
 801462a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801462e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014632:	4584      	cmp	ip, r0
 8014634:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8014638:	ee36 6a07 	vadd.f32	s12, s12, s14
 801463c:	4601      	mov	r1, r0
 801463e:	d1dd      	bne.n	80145fc <MEMS_runMagCal+0x1b74>
 8014640:	ee07 4a90 	vmov	s15, r4
 8014644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014648:	eddf 5ae6 	vldr	s11, [pc, #920]	; 80149e4 <MEMS_runMagCal+0x1f5c>
 801464c:	ed9f 5ae6 	vldr	s10, [pc, #920]	; 80149e8 <MEMS_runMagCal+0x1f60>
 8014650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014654:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014658:	eef1 7ac7 	vsqrt.f32	s15, s14
 801465c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8014660:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8014664:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8014668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801466c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014670:	edc5 7a00 	vstr	s15, [r5]
 8014674:	dd47      	ble.n	8014706 <MEMS_runMagCal+0x1c7e>
 8014676:	eddf 7add 	vldr	s15, [pc, #884]	; 80149ec <MEMS_runMagCal+0x1f64>
 801467a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801467e:	2302      	movs	r3, #2
 8014680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014684:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 8014688:	f77e aead 	ble.w	80133e6 <MEMS_runMagCal+0x95e>
 801468c:	2301      	movs	r3, #1
 801468e:	f88b 3001 	strb.w	r3, [fp, #1]
 8014692:	f7fe bea8 	b.w	80133e6 <MEMS_runMagCal+0x95e>
 8014696:	ee1c 0a10 	vmov	r0, s24
 801469a:	eeb0 0a49 	vmov.f32	s0, s18
 801469e:	4649      	mov	r1, r9
 80146a0:	f7f7 fb28 	bl	800bcf4 <MEMS_updateMagBufferIndex>
 80146a4:	f7fe bf0d 	b.w	80134c2 <MEMS_runMagCal+0xa3a>
 80146a8:	9b02      	ldr	r3, [sp, #8]
 80146aa:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
 80146ae:	f8db 100c 	ldr.w	r1, [fp, #12]
 80146b2:	eb0b 0ac3 	add.w	sl, fp, r3, lsl #3
 80146b6:	f9ba 30ac 	ldrsh.w	r3, [sl, #172]	; 0xac
 80146ba:	4413      	add	r3, r2
 80146bc:	4299      	cmp	r1, r3
 80146be:	f4bf ad99 	bcs.w	80141f4 <MEMS_runMagCal+0x176c>
 80146c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80146c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80146c8:	fb03 f301 	mul.w	r3, r3, r1
 80146cc:	3364      	adds	r3, #100	; 0x64
 80146ce:	4293      	cmp	r3, r2
 80146d0:	bf38      	it	cc
 80146d2:	4613      	movcc	r3, r2
 80146d4:	2200      	movs	r2, #0
 80146d6:	f8cb 300c 	str.w	r3, [fp, #12]
 80146da:	f88b 2000 	strb.w	r2, [fp]
 80146de:	f7fe be0e 	b.w	80132fe <MEMS_runMagCal+0x876>
 80146e2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80146e6:	f7ff ba6f 	b.w	8013bc8 <MEMS_runMagCal+0x1140>
 80146ea:	9b03      	ldr	r3, [sp, #12]
 80146ec:	e65c      	b.n	80143a8 <MEMS_runMagCal+0x1920>
 80146ee:	4619      	mov	r1, r3
 80146f0:	9b02      	ldr	r3, [sp, #8]
 80146f2:	3301      	adds	r3, #1
 80146f4:	fb93 f2f1 	sdiv	r2, r3, r1
 80146f8:	fb01 3212 	mls	r2, r1, r2, r3
 80146fc:	9304      	str	r3, [sp, #16]
 80146fe:	b212      	sxth	r2, r2
 8014700:	4689      	mov	r9, r1
 8014702:	f7ff ba11 	b.w	8013b28 <MEMS_runMagCal+0x10a0>
 8014706:	eddf 7aba 	vldr	s15, [pc, #744]	; 80149f0 <MEMS_runMagCal+0x1f68>
 801470a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014712:	eddf 7ab6 	vldr	s15, [pc, #728]	; 80149ec <MEMS_runMagCal+0x1f64>
 8014716:	d434      	bmi.n	8014782 <MEMS_runMagCal+0x1cfa>
 8014718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801471c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014720:	bfc4      	itt	gt
 8014722:	2301      	movgt	r3, #1
 8014724:	f88b 3001 	strbgt.w	r3, [fp, #1]
 8014728:	f7ff b892 	b.w	8013850 <MEMS_runMagCal+0xdc8>
 801472c:	9b05      	ldr	r3, [sp, #20]
 801472e:	f89b 1011 	ldrb.w	r1, [fp, #17]
 8014732:	ed93 0a01 	vldr	s0, [r3, #4]
 8014736:	f7fe bd84 	b.w	8013242 <MEMS_runMagCal+0x7ba>
 801473a:	2303      	movs	r3, #3
 801473c:	9303      	str	r3, [sp, #12]
 801473e:	f7fe bdd4 	b.w	80132ea <MEMS_runMagCal+0x862>
 8014742:	4619      	mov	r1, r3
 8014744:	f7ff ba78 	b.w	8013c38 <MEMS_runMagCal+0x11b0>
 8014748:	eef7 7a02 	vmov.f32	s15, #114	; 0x3f900000  1.125
 801474c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014750:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014758:	f73f ad4c 	bgt.w	80141f4 <MEMS_runMagCal+0x176c>
 801475c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8014760:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8014764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014768:	f73f ad44 	bgt.w	80141f4 <MEMS_runMagCal+0x176c>
 801476c:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8014770:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8014774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014778:	f77f aaaf 	ble.w	8013cda <MEMS_runMagCal+0x1252>
 801477c:	e53a      	b.n	80141f4 <MEMS_runMagCal+0x176c>
 801477e:	2303      	movs	r3, #3
 8014780:	e612      	b.n	80143a8 <MEMS_runMagCal+0x1920>
 8014782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014786:	2300      	movs	r3, #0
 8014788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801478c:	f88b 3001 	strb.w	r3, [fp, #1]
 8014790:	f04f 0103 	mov.w	r1, #3
 8014794:	bfc8      	it	gt
 8014796:	2301      	movgt	r3, #1
 8014798:	f88b 1058 	strb.w	r1, [fp, #88]	; 0x58
 801479c:	bfc8      	it	gt
 801479e:	f88b 3001 	strbgt.w	r3, [fp, #1]
 80147a2:	f7ff b858 	b.w	8013856 <MEMS_runMagCal+0xdce>
 80147a6:	2303      	movs	r3, #3
 80147a8:	f88b c001 	strb.w	ip, [fp, #1]
 80147ac:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80147b0:	f7ff b851 	b.w	8013856 <MEMS_runMagCal+0xdce>
 80147b4:	9b04      	ldr	r3, [sp, #16]
 80147b6:	fb93 f7f9 	sdiv	r7, r3, r9
 80147ba:	fb09 3717 	mls	r7, r9, r7, r3
 80147be:	b23f      	sxth	r7, r7
 80147c0:	f7ff ba9a 	b.w	8013cf8 <MEMS_runMagCal+0x1270>
 80147c4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80149f4 <MEMS_runMagCal+0x1f6c>
 80147c8:	f89b 308c 	ldrb.w	r3, [fp, #140]	; 0x8c
 80147cc:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80147d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80147d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80147d8:	ee87 0a08 	vdiv.f32	s0, s14, s16
 80147dc:	ee17 2a90 	vmov	r2, s15
 80147e0:	b291      	uxth	r1, r2
 80147e2:	b113      	cbz	r3, 80147ea <MEMS_runMagCal+0x1d62>
 80147e4:	3b01      	subs	r3, #1
 80147e6:	f88b 308c 	strb.w	r3, [fp, #140]	; 0x8c
 80147ea:	ee1c 0a10 	vmov	r0, s24
 80147ee:	f7f7 fa81 	bl	800bcf4 <MEMS_updateMagBufferIndex>
 80147f2:	eddd 7a08 	vldr	s15, [sp, #32]
 80147f6:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80147fa:	eddf 7a7f 	vldr	s15, [pc, #508]	; 80149f8 <MEMS_runMagCal+0x1f70>
 80147fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014802:	f001 f825 	bl	8015850 <roundf>
 8014806:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801480a:	2300      	movs	r3, #0
 801480c:	ed8b 0a01 	vstr	s0, [fp, #4]
 8014810:	f88b 3000 	strb.w	r3, [fp]
 8014814:	f7fe bd73 	b.w	80132fe <MEMS_runMagCal+0x876>
 8014818:	fb93 f2f6 	sdiv	r2, r3, r6
 801481c:	fb06 3312 	mls	r3, r6, r2, r3
 8014820:	b21a      	sxth	r2, r3
 8014822:	4630      	mov	r0, r6
 8014824:	f7ff bb00 	b.w	8013e28 <MEMS_runMagCal+0x13a0>
 8014828:	ed9b 0a17 	vldr	s0, [fp, #92]	; 0x5c
 801482c:	f001 f810 	bl	8015850 <roundf>
 8014830:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014834:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 8014838:	ee17 3a90 	vmov	r3, s15
 801483c:	ed9b 0a18 	vldr	s0, [fp, #96]	; 0x60
 8014840:	f8a9 3000 	strh.w	r3, [r9]
 8014844:	f001 f804 	bl	8015850 <roundf>
 8014848:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801484c:	ed9b 0a19 	vldr	s0, [fp, #100]	; 0x64
 8014850:	ee17 3a90 	vmov	r3, s15
 8014854:	f8a9 3002 	strh.w	r3, [r9, #2]
 8014858:	f000 fffa 	bl	8015850 <roundf>
 801485c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014860:	ac0f      	add	r4, sp, #60	; 0x3c
 8014862:	ee17 5a90 	vmov	r5, s15
 8014866:	9400      	str	r4, [sp, #0]
 8014868:	ee1c 0a10 	vmov	r0, s24
 801486c:	4649      	mov	r1, r9
 801486e:	ab10      	add	r3, sp, #64	; 0x40
 8014870:	eeb0 0a48 	vmov.f32	s0, s16
 8014874:	f10b 0268 	add.w	r2, fp, #104	; 0x68
 8014878:	f8a9 5004 	strh.w	r5, [r9, #4]
 801487c:	f7f7 fadc 	bl	800be38 <getMagStats.constprop.0>
 8014880:	ed94 7a00 	vldr	s14, [r4]
 8014884:	eddf 7a5d 	vldr	s15, [pc, #372]	; 80149fc <MEMS_runMagCal+0x1f74>
 8014888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014890:	d50e      	bpl.n	80148b0 <MEMS_runMagCal+0x1e28>
 8014892:	b968      	cbnz	r0, 80148b0 <MEMS_runMagCal+0x1e28>
 8014894:	f89b 3040 	ldrb.w	r3, [fp, #64]	; 0x40
 8014898:	b32b      	cbz	r3, 80148e6 <MEMS_runMagCal+0x1e5e>
 801489a:	f89b 3049 	ldrb.w	r3, [fp, #73]	; 0x49
 801489e:	ee07 3a90 	vmov	s15, r3
 80148a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148a6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80148aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ae:	dc1a      	bgt.n	80148e6 <MEMS_runMagCal+0x1e5e>
 80148b0:	2300      	movs	r3, #0
 80148b2:	f8c9 3000 	str.w	r3, [r9]
 80148b6:	f8a9 3004 	strh.w	r3, [r9, #4]
 80148ba:	f7ff ba97 	b.w	8013dec <MEMS_runMagCal+0x1364>
 80148be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80148c2:	f7ff bbea 	b.w	801409a <MEMS_runMagCal+0x1612>
 80148c6:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8014a00 <MEMS_runMagCal+0x1f78>
 80148ca:	eddd 4a1d 	vldr	s9, [sp, #116]	; 0x74
 80148ce:	ed9d aa1e 	vldr	s20, [sp, #120]	; 0x78
 80148d2:	eddd 7a1f 	vldr	s15, [sp, #124]	; 0x7c
 80148d6:	ee29 9aa4 	vmul.f32	s18, s19, s9
 80148da:	ee29 aa8a 	vmul.f32	s20, s19, s20
 80148de:	ee69 9aa7 	vmul.f32	s19, s19, s15
 80148e2:	f7ff bb2e 	b.w	8013f42 <MEMS_runMagCal+0x14ba>
 80148e6:	eddd 7a08 	vldr	s15, [sp, #32]
 80148ea:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 80148ee:	eddf 7a42 	vldr	s15, [pc, #264]	; 80149f8 <MEMS_runMagCal+0x1f70>
 80148f2:	2303      	movs	r3, #3
 80148f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80148f8:	f88b 3058 	strb.w	r3, [fp, #88]	; 0x58
 80148fc:	e781      	b.n	8014802 <MEMS_runMagCal+0x1d7a>
 80148fe:	eddf 6a41 	vldr	s13, [pc, #260]	; 8014a04 <MEMS_runMagCal+0x1f7c>
 8014902:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801490a:	f77e ab1b 	ble.w	8012f44 <MEMS_runMagCal+0x4bc>
 801490e:	f7fe bb21 	b.w	8012f54 <MEMS_runMagCal+0x4cc>
 8014912:	2224      	movs	r2, #36	; 0x24
 8014914:	2100      	movs	r1, #0
 8014916:	a82d      	add	r0, sp, #180	; 0xb4
 8014918:	f002 fda2 	bl	8017460 <memset>
 801491c:	eddf 7a3a 	vldr	s15, [pc, #232]	; 8014a08 <MEMS_runMagCal+0x1f80>
 8014920:	eec7 9a89 	vdiv.f32	s19, s15, s18
 8014924:	f10d 0954 	add.w	r9, sp, #84	; 0x54
 8014928:	4627      	mov	r7, r4
 801492a:	ae2d      	add	r6, sp, #180	; 0xb4
 801492c:	2500      	movs	r5, #0
 801492e:	3501      	adds	r5, #1
 8014930:	ecb7 0a01 	vldmia	r7!, {s0}
 8014934:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014938:	f000 ff8a 	bl	8015850 <roundf>
 801493c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014940:	4633      	mov	r3, r6
 8014942:	edc3 9a00 	vstr	s19, [r3]
 8014946:	ee10 3a10 	vmov	r3, s0
 801494a:	2d03      	cmp	r5, #3
 801494c:	f829 3b02 	strh.w	r3, [r9], #2
 8014950:	f106 0610 	add.w	r6, r6, #16
 8014954:	d1eb      	bne.n	801492e <MEMS_runMagCal+0x1ea6>
 8014956:	ad12      	add	r5, sp, #72	; 0x48
 8014958:	9500      	str	r5, [sp, #0]
 801495a:	ab2b      	add	r3, sp, #172	; 0xac
 801495c:	eeb0 0a48 	vmov.f32	s0, s16
 8014960:	ee1c 0a10 	vmov	r0, s24
 8014964:	a915      	add	r1, sp, #84	; 0x54
 8014966:	aa2d      	add	r2, sp, #180	; 0xb4
 8014968:	f7f7 fa66 	bl	800be38 <getMagStats.constprop.0>
 801496c:	eddf 3a26 	vldr	s7, [pc, #152]	; 8014a08 <MEMS_runMagCal+0x1f80>
 8014970:	ed94 4a03 	vldr	s8, [r4, #12]
 8014974:	edd5 7a00 	vldr	s15, [r5]
 8014978:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 801497c:	edd4 6a06 	vldr	s13, [r4, #24]
 8014980:	edd4 4a00 	vldr	s9, [r4]
 8014984:	ed94 5a01 	vldr	s10, [r4, #4]
 8014988:	edd4 5a02 	vldr	s11, [r4, #8]
 801498c:	ee83 7a84 	vdiv.f32	s14, s7, s8
 8014990:	ad2e      	add	r5, sp, #184	; 0xb8
 8014992:	2300      	movs	r3, #0
 8014994:	e9c5 3300 	strd	r3, r3, [r5]
 8014998:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801499c:	60ab      	str	r3, [r5, #8]
 801499e:	61ab      	str	r3, [r5, #24]
 80149a0:	ee26 6a27 	vmul.f32	s12, s12, s15
 80149a4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80149a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ac:	ee84 0a88 	vdiv.f32	s0, s9, s16
 80149b0:	eec5 9a08 	vdiv.f32	s19, s10, s16
 80149b4:	ee85 aa88 	vdiv.f32	s20, s11, s16
 80149b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80149bc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80149c0:	ed8d 7a2d 	vstr	s14, [sp, #180]	; 0xb4
 80149c4:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 80149c8:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 80149cc:	d405      	bmi.n	80149da <MEMS_runMagCal+0x1f52>
 80149ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80149d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149d6:	f57e aa9b 	bpl.w	8012f10 <MEMS_runMagCal+0x488>
 80149da:	ed9f 9a0c 	vldr	s18, [pc, #48]	; 8014a0c <MEMS_runMagCal+0x1f84>
 80149de:	f7fe ba9d 	b.w	8012f1c <MEMS_runMagCal+0x494>
 80149e2:	bf00      	nop
 80149e4:	3c23d70a 	.word	0x3c23d70a
 80149e8:	4b095440 	.word	0x4b095440
 80149ec:	481c4000 	.word	0x481c4000
 80149f0:	471c4000 	.word	0x471c4000
 80149f4:	433d0000 	.word	0x433d0000
 80149f8:	3a83126f 	.word	0x3a83126f
 80149fc:	3ff4cccd 	.word	0x3ff4cccd
 8014a00:	7f800000 	.word	0x7f800000
 8014a04:	3ee66666 	.word	0x3ee66666
 8014a08:	423c0000 	.word	0x423c0000
 8014a0c:	00000000 	.word	0x00000000
 8014a10:	f644 42f4 	movw	r2, #19700	; 0x4cf4
 8014a14:	4293      	cmp	r3, r2
 8014a16:	f67e acac 	bls.w	8013372 <MEMS_runMagCal+0x8ea>
 8014a1a:	f7fe bca0 	b.w	801335e <MEMS_runMagCal+0x8d6>
 8014a1e:	bf00      	nop

08014a20 <MotionFX_GetStateSize>:
 8014a20:	f44f 6018 	mov.w	r0, #2432	; 0x980
 8014a24:	4770      	bx	lr
 8014a26:	bf00      	nop

08014a28 <MotionFX_initialize>:
 8014a28:	4a3b      	ldr	r2, [pc, #236]	; (8014b18 <MotionFX_initialize+0xf0>)
 8014a2a:	493c      	ldr	r1, [pc, #240]	; (8014b1c <MotionFX_initialize+0xf4>)
 8014a2c:	6813      	ldr	r3, [r2, #0]
 8014a2e:	f023 0301 	bic.w	r3, r3, #1
 8014a32:	b530      	push	{r4, r5, lr}
 8014a34:	6013      	str	r3, [r2, #0]
 8014a36:	680b      	ldr	r3, [r1, #0]
 8014a38:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8014a3c:	4013      	ands	r3, r2
 8014a3e:	f24c 2540 	movw	r5, #49728	; 0xc240
 8014a42:	42ab      	cmp	r3, r5
 8014a44:	b085      	sub	sp, #20
 8014a46:	4604      	mov	r4, r0
 8014a48:	d013      	beq.n	8014a72 <MotionFX_initialize+0x4a>
 8014a4a:	680b      	ldr	r3, [r1, #0]
 8014a4c:	f24c 2170 	movw	r1, #49776	; 0xc270
 8014a50:	4013      	ands	r3, r2
 8014a52:	428b      	cmp	r3, r1
 8014a54:	d00d      	beq.n	8014a72 <MotionFX_initialize+0x4a>
 8014a56:	4b32      	ldr	r3, [pc, #200]	; (8014b20 <MotionFX_initialize+0xf8>)
 8014a58:	2201      	movs	r2, #1
 8014a5a:	601a      	str	r2, [r3, #0]
 8014a5c:	681a      	ldr	r2, [r3, #0]
 8014a5e:	2a00      	cmp	r2, #0
 8014a60:	d1fc      	bne.n	8014a5c <MotionFX_initialize+0x34>
 8014a62:	4b30      	ldr	r3, [pc, #192]	; (8014b24 <MotionFX_initialize+0xfc>)
 8014a64:	4a30      	ldr	r2, [pc, #192]	; (8014b28 <MotionFX_initialize+0x100>)
 8014a66:	601a      	str	r2, [r3, #0]
 8014a68:	681a      	ldr	r2, [r3, #0]
 8014a6a:	4b30      	ldr	r3, [pc, #192]	; (8014b2c <MotionFX_initialize+0x104>)
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	d01f      	beq.n	8014ab0 <MotionFX_initialize+0x88>
 8014a70:	e7fe      	b.n	8014a70 <MotionFX_initialize+0x48>
 8014a72:	4b2f      	ldr	r3, [pc, #188]	; (8014b30 <MotionFX_initialize+0x108>)
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d1ed      	bne.n	8014a56 <MotionFX_initialize+0x2e>
 8014a7a:	4a2e      	ldr	r2, [pc, #184]	; (8014b34 <MotionFX_initialize+0x10c>)
 8014a7c:	6813      	ldr	r3, [r2, #0]
 8014a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014a82:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8014a86:	d006      	beq.n	8014a96 <MotionFX_initialize+0x6e>
 8014a88:	6813      	ldr	r3, [r2, #0]
 8014a8a:	f240 4283 	movw	r2, #1155	; 0x483
 8014a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014a92:	4293      	cmp	r3, r2
 8014a94:	d1df      	bne.n	8014a56 <MotionFX_initialize+0x2e>
 8014a96:	4b28      	ldr	r3, [pc, #160]	; (8014b38 <MotionFX_initialize+0x110>)
 8014a98:	2201      	movs	r2, #1
 8014a9a:	601a      	str	r2, [r3, #0]
 8014a9c:	681a      	ldr	r2, [r3, #0]
 8014a9e:	2a00      	cmp	r2, #0
 8014aa0:	d1fc      	bne.n	8014a9c <MotionFX_initialize+0x74>
 8014aa2:	4b26      	ldr	r3, [pc, #152]	; (8014b3c <MotionFX_initialize+0x114>)
 8014aa4:	4a20      	ldr	r2, [pc, #128]	; (8014b28 <MotionFX_initialize+0x100>)
 8014aa6:	601a      	str	r2, [r3, #0]
 8014aa8:	681a      	ldr	r2, [r3, #0]
 8014aaa:	4b20      	ldr	r3, [pc, #128]	; (8014b2c <MotionFX_initialize+0x104>)
 8014aac:	429a      	cmp	r2, r3
 8014aae:	d1df      	bne.n	8014a70 <MotionFX_initialize+0x48>
 8014ab0:	4b23      	ldr	r3, [pc, #140]	; (8014b40 <MotionFX_initialize+0x118>)
 8014ab2:	4a24      	ldr	r2, [pc, #144]	; (8014b44 <MotionFX_initialize+0x11c>)
 8014ab4:	9301      	str	r3, [sp, #4]
 8014ab6:	2501      	movs	r5, #1
 8014ab8:	4620      	mov	r0, r4
 8014aba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014abe:	7115      	strb	r5, [r2, #4]
 8014ac0:	f7f7 faa0 	bl	800c004 <MFX_emptyAttitude>
 8014ac4:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8014ac8:	a901      	add	r1, sp, #4
 8014aca:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014ace:	f7f6 fdc3 	bl	800b658 <updateOrientation>
 8014ad2:	a903      	add	r1, sp, #12
 8014ad4:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014ad8:	f7f6 fdbe 	bl	800b658 <updateOrientation>
 8014adc:	a902      	add	r1, sp, #8
 8014ade:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014ae2:	f7f6 fdb9 	bl	800b658 <updateOrientation>
 8014ae6:	4818      	ldr	r0, [pc, #96]	; (8014b48 <MotionFX_initialize+0x120>)
 8014ae8:	4918      	ldr	r1, [pc, #96]	; (8014b4c <MotionFX_initialize+0x124>)
 8014aea:	4a19      	ldr	r2, [pc, #100]	; (8014b50 <MotionFX_initialize+0x128>)
 8014aec:	4b19      	ldr	r3, [pc, #100]	; (8014b54 <MotionFX_initialize+0x12c>)
 8014aee:	7365      	strb	r5, [r4, #13]
 8014af0:	4d19      	ldr	r5, [pc, #100]	; (8014b58 <MotionFX_initialize+0x130>)
 8014af2:	62a0      	str	r0, [r4, #40]	; 0x28
 8014af4:	6361      	str	r1, [r4, #52]	; 0x34
 8014af6:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8014afa:	2100      	movs	r1, #0
 8014afc:	61a2      	str	r2, [r4, #24]
 8014afe:	61e3      	str	r3, [r4, #28]
 8014b00:	f44f 7281 	mov.w	r2, #258	; 0x102
 8014b04:	f240 1301 	movw	r3, #257	; 0x101
 8014b08:	6225      	str	r5, [r4, #32]
 8014b0a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8014b0c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
 8014b10:	80a2      	strh	r2, [r4, #4]
 8014b12:	81e3      	strh	r3, [r4, #14]
 8014b14:	b005      	add	sp, #20
 8014b16:	bd30      	pop	{r4, r5, pc}
 8014b18:	e0002000 	.word	0xe0002000
 8014b1c:	e000ed00 	.word	0xe000ed00
 8014b20:	40023008 	.word	0x40023008
 8014b24:	40023000 	.word	0x40023000
 8014b28:	f407a5c2 	.word	0xf407a5c2
 8014b2c:	b5e8b5cd 	.word	0xb5e8b5cd
 8014b30:	e0042000 	.word	0xe0042000
 8014b34:	5c001000 	.word	0x5c001000
 8014b38:	58024c08 	.word	0x58024c08
 8014b3c:	58024c00 	.word	0x58024c00
 8014b40:	00756e65 	.word	0x00756e65
 8014b44:	200002e0 	.word	0x200002e0
 8014b48:	3f666666 	.word	0x3f666666
 8014b4c:	3f2ac083 	.word	0x3f2ac083
 8014b50:	3a51b717 	.word	0x3a51b717
 8014b54:	3a378034 	.word	0x3a378034
 8014b58:	3b378034 	.word	0x3b378034

08014b5c <MotionFX_setKnobs>:
 8014b5c:	4b23      	ldr	r3, [pc, #140]	; (8014bec <MotionFX_setKnobs+0x90>)
 8014b5e:	791b      	ldrb	r3, [r3, #4]
 8014b60:	b903      	cbnz	r3, 8014b64 <MotionFX_setKnobs+0x8>
 8014b62:	4770      	bx	lr
 8014b64:	2900      	cmp	r1, #0
 8014b66:	d0fc      	beq.n	8014b62 <MotionFX_setKnobs+0x6>
 8014b68:	b570      	push	{r4, r5, r6, lr}
 8014b6a:	4604      	mov	r4, r0
 8014b6c:	684a      	ldr	r2, [r1, #4]
 8014b6e:	6808      	ldr	r0, [r1, #0]
 8014b70:	688b      	ldr	r3, [r1, #8]
 8014b72:	6363      	str	r3, [r4, #52]	; 0x34
 8014b74:	62a0      	str	r0, [r4, #40]	; 0x28
 8014b76:	62e2      	str	r2, [r4, #44]	; 0x2c
 8014b78:	7b0b      	ldrb	r3, [r1, #12]
 8014b7a:	7163      	strb	r3, [r4, #5]
 8014b7c:	6908      	ldr	r0, [r1, #16]
 8014b7e:	694a      	ldr	r2, [r1, #20]
 8014b80:	698b      	ldr	r3, [r1, #24]
 8014b82:	6223      	str	r3, [r4, #32]
 8014b84:	61e2      	str	r2, [r4, #28]
 8014b86:	61a0      	str	r0, [r4, #24]
 8014b88:	7f0b      	ldrb	r3, [r1, #28]
 8014b8a:	7123      	strb	r3, [r4, #4]
 8014b8c:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014b90:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8014b94:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8014b96:	f884 3978 	strb.w	r3, [r4, #2424]	; 0x978
 8014b9a:	460a      	mov	r2, r1
 8014b9c:	460b      	mov	r3, r1
 8014b9e:	f831 6f1d 	ldrh.w	r6, [r1, #29]!
 8014ba2:	f832 5f21 	ldrh.w	r5, [r2, #33]!
 8014ba6:	f833 0f25 	ldrh.w	r0, [r3, #37]!
 8014baa:	7889      	ldrb	r1, [r1, #2]
 8014bac:	7892      	ldrb	r2, [r2, #2]
 8014bae:	789b      	ldrb	r3, [r3, #2]
 8014bb0:	b084      	sub	sp, #16
 8014bb2:	f88d 1006 	strb.w	r1, [sp, #6]
 8014bb6:	f8ad 000c 	strh.w	r0, [sp, #12]
 8014bba:	a901      	add	r1, sp, #4
 8014bbc:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014bc0:	f88d 200a 	strb.w	r2, [sp, #10]
 8014bc4:	f8ad 6004 	strh.w	r6, [sp, #4]
 8014bc8:	f8ad 5008 	strh.w	r5, [sp, #8]
 8014bcc:	f88d 300e 	strb.w	r3, [sp, #14]
 8014bd0:	f7f6 fd42 	bl	800b658 <updateOrientation>
 8014bd4:	a903      	add	r1, sp, #12
 8014bd6:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014bda:	f7f6 fd3d 	bl	800b658 <updateOrientation>
 8014bde:	a902      	add	r1, sp, #8
 8014be0:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014be4:	f7f6 fd38 	bl	800b658 <updateOrientation>
 8014be8:	b004      	add	sp, #16
 8014bea:	bd70      	pop	{r4, r5, r6, pc}
 8014bec:	200002e0 	.word	0x200002e0

08014bf0 <MotionFX_getKnobs>:
 8014bf0:	4b1c      	ldr	r3, [pc, #112]	; (8014c64 <MotionFX_getKnobs+0x74>)
 8014bf2:	791b      	ldrb	r3, [r3, #4]
 8014bf4:	b903      	cbnz	r3, 8014bf8 <MotionFX_getKnobs+0x8>
 8014bf6:	4770      	bx	lr
 8014bf8:	460a      	mov	r2, r1
 8014bfa:	2900      	cmp	r1, #0
 8014bfc:	d0fb      	beq.n	8014bf6 <MotionFX_getKnobs+0x6>
 8014bfe:	b510      	push	{r4, lr}
 8014c00:	4604      	mov	r4, r0
 8014c02:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014c04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014c08:	6093      	str	r3, [r2, #8]
 8014c0a:	6010      	str	r0, [r2, #0]
 8014c0c:	6051      	str	r1, [r2, #4]
 8014c0e:	7963      	ldrb	r3, [r4, #5]
 8014c10:	7313      	strb	r3, [r2, #12]
 8014c12:	69a0      	ldr	r0, [r4, #24]
 8014c14:	69e1      	ldr	r1, [r4, #28]
 8014c16:	6a23      	ldr	r3, [r4, #32]
 8014c18:	6193      	str	r3, [r2, #24]
 8014c1a:	6110      	str	r0, [r2, #16]
 8014c1c:	6151      	str	r1, [r2, #20]
 8014c1e:	7923      	ldrb	r3, [r4, #4]
 8014c20:	7713      	strb	r3, [r2, #28]
 8014c22:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014c26:	f882 3029 	strb.w	r3, [r2, #41]	; 0x29
 8014c2a:	f894 3978 	ldrb.w	r3, [r4, #2424]	; 0x978
 8014c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8014c30:	f102 011d 	add.w	r1, r2, #29
 8014c34:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8014c38:	f7f6 fb68 	bl	800b30c <findAxis>
 8014c3c:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014c40:	f102 0121 	add.w	r1, r2, #33	; 0x21
 8014c44:	f7f6 fb62 	bl	800b30c <findAxis>
 8014c48:	f104 0043 	add.w	r0, r4, #67	; 0x43
 8014c4c:	f102 0125 	add.w	r1, r2, #37	; 0x25
 8014c50:	f7f6 fb5c 	bl	800b30c <findAxis>
 8014c54:	2300      	movs	r3, #0
 8014c56:	f882 3020 	strb.w	r3, [r2, #32]
 8014c5a:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8014c5e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8014c62:	bd10      	pop	{r4, pc}
 8014c64:	200002e0 	.word	0x200002e0

08014c68 <MotionFX_enable_6X>:
 8014c68:	4b0e      	ldr	r3, [pc, #56]	; (8014ca4 <MotionFX_enable_6X+0x3c>)
 8014c6a:	791b      	ldrb	r3, [r3, #4]
 8014c6c:	b903      	cbnz	r3, 8014c70 <MotionFX_enable_6X+0x8>
 8014c6e:	4770      	bx	lr
 8014c70:	2900      	cmp	r1, #0
 8014c72:	d0fc      	beq.n	8014c6e <MotionFX_enable_6X+0x6>
 8014c74:	b530      	push	{r4, r5, lr}
 8014c76:	1d05      	adds	r5, r0, #4
 8014c78:	b099      	sub	sp, #100	; 0x64
 8014c7a:	4604      	mov	r4, r0
 8014c7c:	4629      	mov	r1, r5
 8014c7e:	225c      	movs	r2, #92	; 0x5c
 8014c80:	a801      	add	r0, sp, #4
 8014c82:	f002 fbdf 	bl	8017444 <memcpy>
 8014c86:	4620      	mov	r0, r4
 8014c88:	f7f7 f9bc 	bl	800c004 <MFX_emptyAttitude>
 8014c8c:	a901      	add	r1, sp, #4
 8014c8e:	4628      	mov	r0, r5
 8014c90:	225c      	movs	r2, #92	; 0x5c
 8014c92:	f002 fbd7 	bl	8017444 <memcpy>
 8014c96:	2300      	movs	r3, #0
 8014c98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014c9c:	7363      	strb	r3, [r4, #13]
 8014c9e:	b019      	add	sp, #100	; 0x64
 8014ca0:	bd30      	pop	{r4, r5, pc}
 8014ca2:	bf00      	nop
 8014ca4:	200002e0 	.word	0x200002e0

08014ca8 <MotionFX_enable_9X>:
 8014ca8:	4b0e      	ldr	r3, [pc, #56]	; (8014ce4 <MotionFX_enable_9X+0x3c>)
 8014caa:	791b      	ldrb	r3, [r3, #4]
 8014cac:	b903      	cbnz	r3, 8014cb0 <MotionFX_enable_9X+0x8>
 8014cae:	4770      	bx	lr
 8014cb0:	2900      	cmp	r1, #0
 8014cb2:	d0fc      	beq.n	8014cae <MotionFX_enable_9X+0x6>
 8014cb4:	b530      	push	{r4, r5, lr}
 8014cb6:	1d05      	adds	r5, r0, #4
 8014cb8:	b099      	sub	sp, #100	; 0x64
 8014cba:	4604      	mov	r4, r0
 8014cbc:	4629      	mov	r1, r5
 8014cbe:	225c      	movs	r2, #92	; 0x5c
 8014cc0:	a801      	add	r0, sp, #4
 8014cc2:	f002 fbbf 	bl	8017444 <memcpy>
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	f7f7 f99c 	bl	800c004 <MFX_emptyAttitude>
 8014ccc:	a901      	add	r1, sp, #4
 8014cce:	4628      	mov	r0, r5
 8014cd0:	225c      	movs	r2, #92	; 0x5c
 8014cd2:	f002 fbb7 	bl	8017444 <memcpy>
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8014cdc:	7363      	strb	r3, [r4, #13]
 8014cde:	b019      	add	sp, #100	; 0x64
 8014ce0:	bd30      	pop	{r4, r5, pc}
 8014ce2:	bf00      	nop
 8014ce4:	200002e0 	.word	0x200002e0

08014ce8 <MotionFX_update>:
 8014ce8:	b470      	push	{r4, r5, r6}
 8014cea:	4c06      	ldr	r4, [pc, #24]	; (8014d04 <MotionFX_update+0x1c>)
 8014cec:	9e03      	ldr	r6, [sp, #12]
 8014cee:	7925      	ldrb	r5, [r4, #4]
 8014cf0:	b90d      	cbnz	r5, 8014cf6 <MotionFX_update+0xe>
 8014cf2:	bc70      	pop	{r4, r5, r6}
 8014cf4:	4770      	bx	lr
 8014cf6:	461c      	mov	r4, r3
 8014cf8:	ed94 0a00 	vldr	s0, [r4]
 8014cfc:	4633      	mov	r3, r6
 8014cfe:	bc70      	pop	{r4, r5, r6}
 8014d00:	f7fc bf02 	b.w	8011b08 <iNemoEngine_API_Update>
 8014d04:	200002e0 	.word	0x200002e0

08014d08 <MotionFX_propagate>:
 8014d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d0c:	ed2d 8b06 	vpush	{d8-d10}
 8014d10:	4ca3      	ldr	r4, [pc, #652]	; (8014fa0 <MotionFX_propagate+0x298>)
 8014d12:	7927      	ldrb	r7, [r4, #4]
 8014d14:	b0a0      	sub	sp, #128	; 0x80
 8014d16:	b927      	cbnz	r7, 8014d22 <MotionFX_propagate+0x1a>
 8014d18:	b020      	add	sp, #128	; 0x80
 8014d1a:	ecbd 8b06 	vpop	{d8-d10}
 8014d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d22:	4616      	mov	r6, r2
 8014d24:	4604      	mov	r4, r0
 8014d26:	f852 0f0c 	ldr.w	r0, [r2, #12]!
 8014d2a:	edd3 9a00 	vldr	s19, [r3]
 8014d2e:	460d      	mov	r5, r1
 8014d30:	6851      	ldr	r1, [r2, #4]
 8014d32:	6892      	ldr	r2, [r2, #8]
 8014d34:	ab13      	add	r3, sp, #76	; 0x4c
 8014d36:	c307      	stmia	r3!, {r0, r1, r2}
 8014d38:	6830      	ldr	r0, [r6, #0]
 8014d3a:	6871      	ldr	r1, [r6, #4]
 8014d3c:	68b2      	ldr	r2, [r6, #8]
 8014d3e:	ab10      	add	r3, sp, #64	; 0x40
 8014d40:	c307      	stmia	r3!, {r0, r1, r2}
 8014d42:	4637      	mov	r7, r6
 8014d44:	ab16      	add	r3, sp, #88	; 0x58
 8014d46:	f857 0f18 	ldr.w	r0, [r7, #24]!
 8014d4a:	6879      	ldr	r1, [r7, #4]
 8014d4c:	68ba      	ldr	r2, [r7, #8]
 8014d4e:	f104 0a3a 	add.w	sl, r4, #58	; 0x3a
 8014d52:	c307      	stmia	r3!, {r0, r1, r2}
 8014d54:	aa13      	add	r2, sp, #76	; 0x4c
 8014d56:	4651      	mov	r1, sl
 8014d58:	a803      	add	r0, sp, #12
 8014d5a:	f7f6 fa75 	bl	800b248 <rotVect>
 8014d5e:	aa16      	add	r2, sp, #88	; 0x58
 8014d60:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8014d64:	a806      	add	r0, sp, #24
 8014d66:	f7f6 fa6f 	bl	800b248 <rotVect>
 8014d6a:	f8d4 394c 	ldr.w	r3, [r4, #2380]	; 0x94c
 8014d6e:	2b09      	cmp	r3, #9
 8014d70:	d829      	bhi.n	8014dc6 <MotionFX_propagate+0xbe>
 8014d72:	eddd 8a04 	vldr	s17, [sp, #16]
 8014d76:	ed9d 9a03 	vldr	s18, [sp, #12]
 8014d7a:	ed9d 8a05 	vldr	s16, [sp, #20]
 8014d7e:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8014d82:	eee9 7a09 	vfma.f32	s15, s18, s18
 8014d86:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014d8a:	ee17 0a90 	vmov	r0, s15
 8014d8e:	f7eb fbdb 	bl	8000548 <__aeabi_f2d>
 8014d92:	ec41 0b10 	vmov	d0, r0, r1
 8014d96:	f000 fded 	bl	8015974 <sqrt>
 8014d9a:	ec51 0b10 	vmov	r0, r1, d0
 8014d9e:	f7eb ff03 	bl	8000ba8 <__aeabi_d2f>
 8014da2:	ee07 0a90 	vmov	s15, r0
 8014da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014daa:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8014dae:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014db2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014db6:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014dba:	ed8d 9a03 	vstr	s18, [sp, #12]
 8014dbe:	edcd 8a04 	vstr	s17, [sp, #16]
 8014dc2:	ed8d 8a05 	vstr	s16, [sp, #20]
 8014dc6:	7923      	ldrb	r3, [r4, #4]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	f000 80d3 	beq.w	8014f74 <MotionFX_propagate+0x26c>
 8014dce:	ee07 3a90 	vmov	s15, r3
 8014dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014dda:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014dde:	f604 125c 	addw	r2, r4, #2396	; 0x95c
 8014de2:	f504 6316 	add.w	r3, r4, #2400	; 0x960
 8014de6:	f504 6613 	add.w	r6, r4, #2352	; 0x930
 8014dea:	edd2 7a00 	vldr	s15, [r2]
 8014dee:	eddd 8a06 	vldr	s17, [sp, #24]
 8014df2:	ed9d 6a07 	vldr	s12, [sp, #28]
 8014df6:	ed9d 8a08 	vldr	s16, [sp, #32]
 8014dfa:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8014fa4 <MotionFX_propagate+0x29c>
 8014dfe:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8014fa8 <MotionFX_propagate+0x2a0>
 8014e02:	eee6 7aa8 	vfma.f32	s15, s13, s17
 8014e06:	ee26 9a07 	vmul.f32	s18, s12, s14
 8014e0a:	edc2 7a00 	vstr	s15, [r2]
 8014e0e:	edd3 7a00 	vldr	s15, [r3]
 8014e12:	ed8d 9a07 	vstr	s18, [sp, #28]
 8014e16:	eee6 7a86 	vfma.f32	s15, s13, s12
 8014e1a:	f604 1264 	addw	r2, r4, #2404	; 0x964
 8014e1e:	ee68 8a87 	vmul.f32	s17, s17, s14
 8014e22:	edc3 7a00 	vstr	s15, [r3]
 8014e26:	edd2 7a00 	vldr	s15, [r2]
 8014e2a:	edcd 8a06 	vstr	s17, [sp, #24]
 8014e2e:	eee6 7a88 	vfma.f32	s15, s13, s16
 8014e32:	f604 1344 	addw	r3, r4, #2372	; 0x944
 8014e36:	ee28 8a07 	vmul.f32	s16, s16, s14
 8014e3a:	edc2 7a00 	vstr	s15, [r2]
 8014e3e:	edd3 7a00 	vldr	s15, [r3]
 8014e42:	ed8d 8a08 	vstr	s16, [sp, #32]
 8014e46:	f504 6314 	add.w	r3, r4, #2368	; 0x940
 8014e4a:	ed93 7a00 	vldr	s14, [r3]
 8014e4e:	ee39 9a67 	vsub.f32	s18, s18, s15
 8014e52:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8014e56:	ee69 7a09 	vmul.f32	s15, s18, s18
 8014e5a:	f604 1348 	addw	r3, r4, #2376	; 0x948
 8014e5e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8014e62:	ed93 7a00 	vldr	s14, [r3]
 8014e66:	ee38 8a47 	vsub.f32	s16, s16, s14
 8014e6a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014e6e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8014e72:	ee29 0a80 	vmul.f32	s0, s19, s0
 8014e76:	eef4 7ae5 	vcmpe.f32	s15, s11
 8014e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e7e:	dd7e      	ble.n	8014f7e <MotionFX_propagate+0x276>
 8014e80:	eeb1 aae7 	vsqrt.f32	s20, s15
 8014e84:	ee6a 9a00 	vmul.f32	s19, s20, s0
 8014e88:	eeb0 0a69 	vmov.f32	s0, s19
 8014e8c:	f000 fd06 	bl	801589c <sinf>
 8014e90:	eec0 7a0a 	vdiv.f32	s15, s0, s20
 8014e94:	eeb0 0a69 	vmov.f32	s0, s19
 8014e98:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014e9c:	ee29 9a27 	vmul.f32	s18, s18, s15
 8014ea0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014ea4:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8014ea8:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8014eac:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8014eb0:	f000 fc8e 	bl	80157d0 <cosf>
 8014eb4:	ed8d 0a0c 	vstr	s0, [sp, #48]	; 0x30
 8014eb8:	f604 1838 	addw	r8, r4, #2360	; 0x938
 8014ebc:	a809      	add	r0, sp, #36	; 0x24
 8014ebe:	4632      	mov	r2, r6
 8014ec0:	4631      	mov	r1, r6
 8014ec2:	f7f6 fc55 	bl	800b770 <qmult>
 8014ec6:	edd8 7a00 	vldr	s15, [r8]
 8014eca:	ed96 7a00 	vldr	s14, [r6]
 8014ece:	f8b4 3950 	ldrh.w	r3, [r4, #2384]	; 0x950
 8014ed2:	f604 1934 	addw	r9, r4, #2356	; 0x934
 8014ed6:	edd9 6a00 	vldr	s13, [r9]
 8014eda:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014ede:	f604 173c 	addw	r7, r4, #2364	; 0x93c
 8014ee2:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014ee6:	3301      	adds	r3, #1
 8014ee8:	aa13      	add	r2, sp, #76	; 0x4c
 8014eea:	edd7 6a00 	vldr	s13, [r7]
 8014eee:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8014ef2:	4651      	mov	r1, sl
 8014ef4:	a809      	add	r0, sp, #36	; 0x24
 8014ef6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014efa:	eee7 7a07 	vfma.f32	s15, s14, s14
 8014efe:	eef1 6ae7 	vsqrt.f32	s13, s15
 8014f02:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8014f06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014f0a:	ed86 7a00 	vstr	s14, [r6]
 8014f0e:	ed99 7a00 	vldr	s14, [r9]
 8014f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014f16:	ed89 7a00 	vstr	s14, [r9]
 8014f1a:	ed98 7a00 	vldr	s14, [r8]
 8014f1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014f22:	ed88 7a00 	vstr	s14, [r8]
 8014f26:	ed97 7a00 	vldr	s14, [r7]
 8014f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f2e:	edc7 7a00 	vstr	s15, [r7]
 8014f32:	f8a4 3950 	strh.w	r3, [r4, #2384]	; 0x950
 8014f36:	f7f6 f987 	bl	800b248 <rotVect>
 8014f3a:	f8d9 0000 	ldr.w	r0, [r9]
 8014f3e:	f8d8 1000 	ldr.w	r1, [r8]
 8014f42:	683a      	ldr	r2, [r7, #0]
 8014f44:	6833      	ldr	r3, [r6, #0]
 8014f46:	60eb      	str	r3, [r5, #12]
 8014f48:	6128      	str	r0, [r5, #16]
 8014f4a:	6169      	str	r1, [r5, #20]
 8014f4c:	61aa      	str	r2, [r5, #24]
 8014f4e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014f52:	9301      	str	r3, [sp, #4]
 8014f54:	f105 0328 	add.w	r3, r5, #40	; 0x28
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	a909      	add	r1, sp, #36	; 0x24
 8014f5c:	f105 031c 	add.w	r3, r5, #28
 8014f60:	462a      	mov	r2, r5
 8014f62:	f105 000c 	add.w	r0, r5, #12
 8014f66:	f7f7 fc2b 	bl	800c7c0 <output_update>
 8014f6a:	b020      	add	sp, #128	; 0x80
 8014f6c:	ecbd 8b06 	vpop	{d8-d10}
 8014f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f74:	2301      	movs	r3, #1
 8014f76:	7123      	strb	r3, [r4, #4]
 8014f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014f7c:	e72f      	b.n	8014dde <MotionFX_propagate+0xd6>
 8014f7e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8014f82:	ee29 9a00 	vmul.f32	s18, s18, s0
 8014f86:	ee28 8a00 	vmul.f32	s16, s16, s0
 8014f8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014f8e:	edcd 8a09 	vstr	s17, [sp, #36]	; 0x24
 8014f92:	ed8d 9a0a 	vstr	s18, [sp, #40]	; 0x28
 8014f96:	ed8d 8a0b 	vstr	s16, [sp, #44]	; 0x2c
 8014f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8014f9c:	e78c      	b.n	8014eb8 <MotionFX_propagate+0x1b0>
 8014f9e:	bf00      	nop
 8014fa0:	200002e0 	.word	0x200002e0
 8014fa4:	3c8efa35 	.word	0x3c8efa35
 8014fa8:	38d1b718 	.word	0x38d1b718

08014fac <MotionFX_MagCal_init>:
 8014fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fae:	4c44      	ldr	r4, [pc, #272]	; (80150c0 <MotionFX_MagCal_init+0x114>)
 8014fb0:	7923      	ldrb	r3, [r4, #4]
 8014fb2:	b903      	cbnz	r3, 8014fb6 <MotionFX_MagCal_init+0xa>
 8014fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fb6:	1e43      	subs	r3, r0, #1
 8014fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014fbc:	4605      	mov	r5, r0
 8014fbe:	d2f9      	bcs.n	8014fb4 <MotionFX_MagCal_init+0x8>
 8014fc0:	2900      	cmp	r1, #0
 8014fc2:	d139      	bne.n	8015038 <MotionFX_MagCal_init+0x8c>
 8014fc4:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
 8014fc8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8014fcc:	4a3d      	ldr	r2, [pc, #244]	; (80150c4 <MotionFX_MagCal_init+0x118>)
 8014fce:	1b5b      	subs	r3, r3, r5
 8014fd0:	ee07 3a90 	vmov	s15, r3
 8014fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fd8:	23c8      	movs	r3, #200	; 0xc8
 8014fda:	eef0 7ae7 	vabs.f32	s15, s15
 8014fde:	fb93 f3f5 	sdiv	r3, r3, r5
 8014fe2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014fe6:	b2db      	uxtb	r3, r3
 8014fe8:	2b0f      	cmp	r3, #15
 8014fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014fee:	bf28      	it	cs
 8014ff0:	230f      	movcs	r3, #15
 8014ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ff6:	6015      	str	r5, [r2, #0]
 8014ff8:	f884 33ce 	strb.w	r3, [r4, #974]	; 0x3ce
 8014ffc:	b22d      	sxth	r5, r5
 8014ffe:	dc0e      	bgt.n	801501e <MotionFX_MagCal_init+0x72>
 8015000:	edd4 7a03 	vldr	s15, [r4, #12]
 8015004:	eddf 6a30 	vldr	s13, [pc, #192]	; 80150c8 <MotionFX_MagCal_init+0x11c>
 8015008:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80150cc <MotionFX_MagCal_init+0x120>
 801500c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015010:	eef0 7ae7 	vabs.f32	s15, s15
 8015014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801501c:	dd08      	ble.n	8015030 <MotionFX_MagCal_init+0x84>
 801501e:	2300      	movs	r3, #0
 8015020:	492b      	ldr	r1, [pc, #172]	; (80150d0 <MotionFX_MagCal_init+0x124>)
 8015022:	8165      	strh	r5, [r4, #10]
 8015024:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8015028:	60e1      	str	r1, [r4, #12]
 801502a:	8223      	strh	r3, [r4, #16]
 801502c:	6163      	str	r3, [r4, #20]
 801502e:	8122      	strh	r2, [r4, #8]
 8015030:	2300      	movs	r3, #0
 8015032:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
 8015036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015038:	2600      	movs	r6, #0
 801503a:	4826      	ldr	r0, [pc, #152]	; (80150d4 <MotionFX_MagCal_init+0x128>)
 801503c:	61a0      	str	r0, [r4, #24]
 801503e:	f44f 0202 	mov.w	r2, #8519680	; 0x820000
 8015042:	4631      	mov	r1, r6
 8015044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015048:	6122      	str	r2, [r4, #16]
 801504a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801504e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015052:	6166      	str	r6, [r4, #20]
 8015054:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
 8015058:	6566      	str	r6, [r4, #84]	; 0x54
 801505a:	83a6      	strh	r6, [r4, #28]
 801505c:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 8015060:	f002 f9fe 	bl	8017460 <memset>
 8015064:	23ff      	movs	r3, #255	; 0xff
 8015066:	225f      	movs	r2, #95	; 0x5f
 8015068:	f884 20a9 	strb.w	r2, [r4, #169]	; 0xa9
 801506c:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
 8015070:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8015074:	2200      	movs	r2, #0
 8015076:	2300      	movs	r3, #0
 8015078:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801507c:	f44f 7780 	mov.w	r7, #256	; 0x100
 8015080:	4631      	mov	r1, r6
 8015082:	62a6      	str	r6, [r4, #40]	; 0x28
 8015084:	2230      	movs	r2, #48	; 0x30
 8015086:	f44f 6670 	mov.w	r6, #3840	; 0xf00
 801508a:	f104 0074 	add.w	r0, r4, #116	; 0x74
 801508e:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8015092:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8015094:	f002 f9e4 	bl	8017460 <memset>
 8015098:	f1a5 030a 	sub.w	r3, r5, #10
 801509c:	b29b      	uxth	r3, r3
 801509e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80150a2:	2b32      	cmp	r3, #50	; 0x32
 80150a4:	f8a4 7074 	strh.w	r7, [r4, #116]	; 0x74
 80150a8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 80150ac:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 80150b0:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
 80150b4:	d888      	bhi.n	8014fc8 <MotionFX_MagCal_init+0x1c>
 80150b6:	2301      	movs	r3, #1
 80150b8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80150bc:	e784      	b.n	8014fc8 <MotionFX_MagCal_init+0x1c>
 80150be:	bf00      	nop
 80150c0:	200002e0 	.word	0x200002e0
 80150c4:	20000000 	.word	0x20000000
 80150c8:	3dcccccd 	.word	0x3dcccccd
 80150cc:	3c23d70a 	.word	0x3c23d70a
 80150d0:	3dcccccd 	.word	0x3dcccccd
 80150d4:	200015d4 	.word	0x200015d4

080150d8 <MotionFX_MagCal_run>:
 80150d8:	4a3e      	ldr	r2, [pc, #248]	; (80151d4 <MotionFX_MagCal_run+0xfc>)
 80150da:	7913      	ldrb	r3, [r2, #4]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d077      	beq.n	80151d0 <MotionFX_MagCal_run+0xf8>
 80150e0:	ed90 7a00 	vldr	s14, [r0]
 80150e4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80151d8 <MotionFX_MagCal_run+0x100>
 80150e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80150ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150f0:	bfb4      	ite	lt
 80150f2:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 80150f6:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 80150fa:	eee7 7a26 	vfma.f32	s15, s14, s13
 80150fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015100:	ed90 7a01 	vldr	s14, [r0, #4]
 8015104:	eddf 6a34 	vldr	s13, [pc, #208]	; 80151d8 <MotionFX_MagCal_run+0x100>
 8015108:	f892 3448 	ldrb.w	r3, [r2, #1096]	; 0x448
 801510c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015110:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8015114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015118:	ee17 1a90 	vmov	r1, s15
 801511c:	bfb4      	ite	lt
 801511e:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 8015122:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015126:	eee7 7a26 	vfma.f32	s15, s14, s13
 801512a:	ed90 7a02 	vldr	s14, [r0, #8]
 801512e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80151d8 <MotionFX_MagCal_run+0x100>
 8015132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015136:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801513a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801513e:	ee17 4a90 	vmov	r4, s15
 8015142:	bfac      	ite	ge
 8015144:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 8015148:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 801514c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8015150:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015154:	ee17 7a90 	vmov	r7, s15
 8015158:	b383      	cbz	r3, 80151bc <MotionFX_MagCal_run+0xe4>
 801515a:	4820      	ldr	r0, [pc, #128]	; (80151dc <MotionFX_MagCal_run+0x104>)
 801515c:	6805      	ldr	r5, [r0, #0]
 801515e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 8015162:	fb15 f503 	smulbb	r5, r5, r3
 8015166:	f8a0 53d0 	strh.w	r5, [r0, #976]	; 0x3d0
 801516a:	00dd      	lsls	r5, r3, #3
 801516c:	f647 76fe 	movw	r6, #32766	; 0x7ffe
 8015170:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80151e0 <MotionFX_MagCal_run+0x108>
 8015174:	42b1      	cmp	r1, r6
 8015176:	bfa8      	it	ge
 8015178:	4631      	movge	r1, r6
 801517a:	42b7      	cmp	r7, r6
 801517c:	bfa8      	it	ge
 801517e:	4637      	movge	r7, r6
 8015180:	4561      	cmp	r1, ip
 8015182:	4608      	mov	r0, r1
 8015184:	bfb8      	it	lt
 8015186:	4660      	movlt	r0, ip
 8015188:	4564      	cmp	r4, ip
 801518a:	db1f      	blt.n	80151cc <MotionFX_MagCal_run+0xf4>
 801518c:	42b4      	cmp	r4, r6
 801518e:	bfa8      	it	ge
 8015190:	4634      	movge	r4, r6
 8015192:	b224      	sxth	r4, r4
 8015194:	4e12      	ldr	r6, [pc, #72]	; (80151e0 <MotionFX_MagCal_run+0x108>)
 8015196:	f892 13ce 	ldrb.w	r1, [r2, #974]	; 0x3ce
 801519a:	3301      	adds	r3, #1
 801519c:	4415      	add	r5, r2
 801519e:	b2db      	uxtb	r3, r3
 80151a0:	42b7      	cmp	r7, r6
 80151a2:	bfb8      	it	lt
 80151a4:	4637      	movlt	r7, r6
 80151a6:	428b      	cmp	r3, r1
 80151a8:	f882 3448 	strb.w	r3, [r2, #1096]	; 0x448
 80151ac:	f8a5 03d2 	strh.w	r0, [r5, #978]	; 0x3d2
 80151b0:	f8a5 43d4 	strh.w	r4, [r5, #980]	; 0x3d4
 80151b4:	f8a5 73d6 	strh.w	r7, [r5, #982]	; 0x3d6
 80151b8:	d014      	beq.n	80151e4 <MotionFX_MagCal_run+0x10c>
 80151ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151bc:	68c0      	ldr	r0, [r0, #12]
 80151be:	f8c2 03c8 	str.w	r0, [r2, #968]	; 0x3c8
 80151c2:	2001      	movs	r0, #1
 80151c4:	f882 03cc 	strb.w	r0, [r2, #972]	; 0x3cc
 80151c8:	461d      	mov	r5, r3
 80151ca:	e7cf      	b.n	801516c <MotionFX_MagCal_run+0x94>
 80151cc:	4634      	mov	r4, r6
 80151ce:	e7e1      	b.n	8015194 <MotionFX_MagCal_run+0xbc>
 80151d0:	4770      	bx	lr
 80151d2:	bf00      	nop
 80151d4:	200002e0 	.word	0x200002e0
 80151d8:	43fa0000 	.word	0x43fa0000
 80151dc:	20000000 	.word	0x20000000
 80151e0:	ffff8002 	.word	0xffff8002
 80151e4:	f892 33cc 	ldrb.w	r3, [r2, #972]	; 0x3cc
 80151e8:	f8d2 63c8 	ldr.w	r6, [r2, #968]	; 0x3c8
 80151ec:	2000      	movs	r0, #0
 80151ee:	f882 0448 	strb.w	r0, [r2, #1096]	; 0x448
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	f000 8159 	beq.w	80154aa <MotionFX_MagCal_run+0x3d2>
 80151f8:	e9d2 4005 	ldrd	r4, r0, [r2, #20]
 80151fc:	8a57      	ldrh	r7, [r2, #18]
 80151fe:	8a13      	ldrh	r3, [r2, #16]
 8015200:	2900      	cmp	r1, #0
 8015202:	f000 8150 	beq.w	80154a6 <MotionFX_MagCal_run+0x3ce>
 8015206:	2f00      	cmp	r7, #0
 8015208:	f000 814d 	beq.w	80154a6 <MotionFX_MagCal_run+0x3ce>
 801520c:	42bb      	cmp	r3, r7
 801520e:	bf28      	it	cs
 8015210:	463b      	movcs	r3, r7
 8015212:	3301      	adds	r3, #1
 8015214:	b29b      	uxth	r3, r3
 8015216:	42bb      	cmp	r3, r7
 8015218:	bf28      	it	cs
 801521a:	463b      	movcs	r3, r7
 801521c:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 8015220:	191d      	adds	r5, r3, r4
 8015222:	f04f 0c01 	mov.w	ip, #1
 8015226:	f800 c035 	strb.w	ip, [r0, r5, lsl #3]
 801522a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 801522e:	f8d2 e3d2 	ldr.w	lr, [r2, #978]	; 0x3d2
 8015232:	f8c5 e002 	str.w	lr, [r5, #2]
 8015236:	f8b2 e3d6 	ldrh.w	lr, [r2, #982]	; 0x3d6
 801523a:	f8a5 e006 	strh.w	lr, [r5, #6]
 801523e:	4561      	cmp	r1, ip
 8015240:	f000 812a 	beq.w	8015498 <MotionFX_MagCal_run+0x3c0>
 8015244:	4463      	add	r3, ip
 8015246:	b29b      	uxth	r3, r3
 8015248:	42bb      	cmp	r3, r7
 801524a:	bf28      	it	cs
 801524c:	463b      	movcs	r3, r7
 801524e:	eb03 0e04 	add.w	lr, r3, r4
 8015252:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015256:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 801525a:	f8d2 e3da 	ldr.w	lr, [r2, #986]	; 0x3da
 801525e:	f8c5 e002 	str.w	lr, [r5, #2]
 8015262:	f8b2 e3de 	ldrh.w	lr, [r2, #990]	; 0x3de
 8015266:	f8a5 e006 	strh.w	lr, [r5, #6]
 801526a:	2902      	cmp	r1, #2
 801526c:	f000 8114 	beq.w	8015498 <MotionFX_MagCal_run+0x3c0>
 8015270:	4463      	add	r3, ip
 8015272:	b29b      	uxth	r3, r3
 8015274:	42bb      	cmp	r3, r7
 8015276:	bf28      	it	cs
 8015278:	463b      	movcs	r3, r7
 801527a:	eb03 0e04 	add.w	lr, r3, r4
 801527e:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 8015282:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 8015286:	f8d2 e3e2 	ldr.w	lr, [r2, #994]	; 0x3e2
 801528a:	f8c5 e002 	str.w	lr, [r5, #2]
 801528e:	f8b2 e3e6 	ldrh.w	lr, [r2, #998]	; 0x3e6
 8015292:	f8a5 e006 	strh.w	lr, [r5, #6]
 8015296:	2903      	cmp	r1, #3
 8015298:	f000 80fe 	beq.w	8015498 <MotionFX_MagCal_run+0x3c0>
 801529c:	4463      	add	r3, ip
 801529e:	b29b      	uxth	r3, r3
 80152a0:	42bb      	cmp	r3, r7
 80152a2:	bf28      	it	cs
 80152a4:	463b      	movcs	r3, r7
 80152a6:	eb03 0e04 	add.w	lr, r3, r4
 80152aa:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80152ae:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80152b2:	f8d2 e3ea 	ldr.w	lr, [r2, #1002]	; 0x3ea
 80152b6:	f8c5 e002 	str.w	lr, [r5, #2]
 80152ba:	f8b2 e3ee 	ldrh.w	lr, [r2, #1006]	; 0x3ee
 80152be:	f8a5 e006 	strh.w	lr, [r5, #6]
 80152c2:	2904      	cmp	r1, #4
 80152c4:	f000 80e8 	beq.w	8015498 <MotionFX_MagCal_run+0x3c0>
 80152c8:	4463      	add	r3, ip
 80152ca:	b29b      	uxth	r3, r3
 80152cc:	42bb      	cmp	r3, r7
 80152ce:	bf28      	it	cs
 80152d0:	463b      	movcs	r3, r7
 80152d2:	eb03 0e04 	add.w	lr, r3, r4
 80152d6:	eb00 05ce 	add.w	r5, r0, lr, lsl #3
 80152da:	f800 c03e 	strb.w	ip, [r0, lr, lsl #3]
 80152de:	f8d2 e3f2 	ldr.w	lr, [r2, #1010]	; 0x3f2
 80152e2:	f8c5 e002 	str.w	lr, [r5, #2]
 80152e6:	f8b2 e3f6 	ldrh.w	lr, [r2, #1014]	; 0x3f6
 80152ea:	f8a5 e006 	strh.w	lr, [r5, #6]
 80152ee:	2905      	cmp	r1, #5
 80152f0:	f000 80d2 	beq.w	8015498 <MotionFX_MagCal_run+0x3c0>
 80152f4:	4463      	add	r3, ip
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	42bb      	cmp	r3, r7
 80152fa:	bf28      	it	cs
 80152fc:	463b      	movcs	r3, r7
 80152fe:	441c      	add	r4, r3
 8015300:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
 8015304:	f800 c034 	strb.w	ip, [r0, r4, lsl #3]
 8015308:	f8d2 43fa 	ldr.w	r4, [r2, #1018]	; 0x3fa
 801530c:	f8c5 4002 	str.w	r4, [r5, #2]
 8015310:	f8b2 43fe 	ldrh.w	r4, [r2, #1022]	; 0x3fe
 8015314:	80ec      	strh	r4, [r5, #6]
 8015316:	2906      	cmp	r1, #6
 8015318:	f000 80be 	beq.w	8015498 <MotionFX_MagCal_run+0x3c0>
 801531c:	4463      	add	r3, ip
 801531e:	b29b      	uxth	r3, r3
 8015320:	42bb      	cmp	r3, r7
 8015322:	bf28      	it	cs
 8015324:	463b      	movcs	r3, r7
 8015326:	f06f 4460 	mvn.w	r4, #3758096384	; 0xe0000000
 801532a:	eb03 0c04 	add.w	ip, r3, r4
 801532e:	2501      	movs	r5, #1
 8015330:	f800 503c 	strb.w	r5, [r0, ip, lsl #3]
 8015334:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8015338:	f8d2 e402 	ldr.w	lr, [r2, #1026]	; 0x402
 801533c:	f8cc e002 	str.w	lr, [ip, #2]
 8015340:	f8b2 e406 	ldrh.w	lr, [r2, #1030]	; 0x406
 8015344:	f8ac e006 	strh.w	lr, [ip, #6]
 8015348:	2907      	cmp	r1, #7
 801534a:	f000 80a5 	beq.w	8015498 <MotionFX_MagCal_run+0x3c0>
 801534e:	442b      	add	r3, r5
 8015350:	b29b      	uxth	r3, r3
 8015352:	42bb      	cmp	r3, r7
 8015354:	bf28      	it	cs
 8015356:	463b      	movcs	r3, r7
 8015358:	eb03 0e04 	add.w	lr, r3, r4
 801535c:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015360:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015364:	f8d2 e40a 	ldr.w	lr, [r2, #1034]	; 0x40a
 8015368:	f8cc e002 	str.w	lr, [ip, #2]
 801536c:	f8b2 e40e 	ldrh.w	lr, [r2, #1038]	; 0x40e
 8015370:	f8ac e006 	strh.w	lr, [ip, #6]
 8015374:	2908      	cmp	r1, #8
 8015376:	f000 808f 	beq.w	8015498 <MotionFX_MagCal_run+0x3c0>
 801537a:	442b      	add	r3, r5
 801537c:	b29b      	uxth	r3, r3
 801537e:	42bb      	cmp	r3, r7
 8015380:	bf28      	it	cs
 8015382:	463b      	movcs	r3, r7
 8015384:	eb03 0e04 	add.w	lr, r3, r4
 8015388:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801538c:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015390:	f8d2 e412 	ldr.w	lr, [r2, #1042]	; 0x412
 8015394:	f8cc e002 	str.w	lr, [ip, #2]
 8015398:	f8b2 e416 	ldrh.w	lr, [r2, #1046]	; 0x416
 801539c:	f8ac e006 	strh.w	lr, [ip, #6]
 80153a0:	2909      	cmp	r1, #9
 80153a2:	d079      	beq.n	8015498 <MotionFX_MagCal_run+0x3c0>
 80153a4:	442b      	add	r3, r5
 80153a6:	b29b      	uxth	r3, r3
 80153a8:	42bb      	cmp	r3, r7
 80153aa:	bf28      	it	cs
 80153ac:	463b      	movcs	r3, r7
 80153ae:	eb03 0e04 	add.w	lr, r3, r4
 80153b2:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80153b6:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80153ba:	f8d2 e41a 	ldr.w	lr, [r2, #1050]	; 0x41a
 80153be:	f8cc e002 	str.w	lr, [ip, #2]
 80153c2:	f8b2 e41e 	ldrh.w	lr, [r2, #1054]	; 0x41e
 80153c6:	f8ac e006 	strh.w	lr, [ip, #6]
 80153ca:	290a      	cmp	r1, #10
 80153cc:	d064      	beq.n	8015498 <MotionFX_MagCal_run+0x3c0>
 80153ce:	442b      	add	r3, r5
 80153d0:	b29b      	uxth	r3, r3
 80153d2:	42bb      	cmp	r3, r7
 80153d4:	bf28      	it	cs
 80153d6:	463b      	movcs	r3, r7
 80153d8:	eb03 0e04 	add.w	lr, r3, r4
 80153dc:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 80153e0:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 80153e4:	f8d2 e422 	ldr.w	lr, [r2, #1058]	; 0x422
 80153e8:	f8cc e002 	str.w	lr, [ip, #2]
 80153ec:	f8b2 e426 	ldrh.w	lr, [r2, #1062]	; 0x426
 80153f0:	f8ac e006 	strh.w	lr, [ip, #6]
 80153f4:	290b      	cmp	r1, #11
 80153f6:	d04f      	beq.n	8015498 <MotionFX_MagCal_run+0x3c0>
 80153f8:	442b      	add	r3, r5
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	42bb      	cmp	r3, r7
 80153fe:	bf28      	it	cs
 8015400:	463b      	movcs	r3, r7
 8015402:	eb03 0e04 	add.w	lr, r3, r4
 8015406:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801540a:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 801540e:	f8d2 e42a 	ldr.w	lr, [r2, #1066]	; 0x42a
 8015412:	f8cc e002 	str.w	lr, [ip, #2]
 8015416:	f8b2 e42e 	ldrh.w	lr, [r2, #1070]	; 0x42e
 801541a:	f8ac e006 	strh.w	lr, [ip, #6]
 801541e:	290c      	cmp	r1, #12
 8015420:	d03a      	beq.n	8015498 <MotionFX_MagCal_run+0x3c0>
 8015422:	442b      	add	r3, r5
 8015424:	b29b      	uxth	r3, r3
 8015426:	42bb      	cmp	r3, r7
 8015428:	bf28      	it	cs
 801542a:	463b      	movcs	r3, r7
 801542c:	eb03 0e04 	add.w	lr, r3, r4
 8015430:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8015434:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015438:	f8d2 e432 	ldr.w	lr, [r2, #1074]	; 0x432
 801543c:	f8cc e002 	str.w	lr, [ip, #2]
 8015440:	f8b2 e436 	ldrh.w	lr, [r2, #1078]	; 0x436
 8015444:	f8ac e006 	strh.w	lr, [ip, #6]
 8015448:	290d      	cmp	r1, #13
 801544a:	d025      	beq.n	8015498 <MotionFX_MagCal_run+0x3c0>
 801544c:	442b      	add	r3, r5
 801544e:	b29b      	uxth	r3, r3
 8015450:	42bb      	cmp	r3, r7
 8015452:	bf28      	it	cs
 8015454:	463b      	movcs	r3, r7
 8015456:	eb03 0e04 	add.w	lr, r3, r4
 801545a:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 801545e:	f800 503e 	strb.w	r5, [r0, lr, lsl #3]
 8015462:	f8d2 e43a 	ldr.w	lr, [r2, #1082]	; 0x43a
 8015466:	f8cc e002 	str.w	lr, [ip, #2]
 801546a:	f8b2 e43e 	ldrh.w	lr, [r2, #1086]	; 0x43e
 801546e:	f8ac e006 	strh.w	lr, [ip, #6]
 8015472:	290e      	cmp	r1, #14
 8015474:	d010      	beq.n	8015498 <MotionFX_MagCal_run+0x3c0>
 8015476:	442b      	add	r3, r5
 8015478:	b29b      	uxth	r3, r3
 801547a:	42bb      	cmp	r3, r7
 801547c:	bf28      	it	cs
 801547e:	463b      	movcs	r3, r7
 8015480:	441c      	add	r4, r3
 8015482:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
 8015486:	f800 5034 	strb.w	r5, [r0, r4, lsl #3]
 801548a:	f8d2 0442 	ldr.w	r0, [r2, #1090]	; 0x442
 801548e:	f8c7 0002 	str.w	r0, [r7, #2]
 8015492:	f8b2 0446 	ldrh.w	r0, [r2, #1094]	; 0x446
 8015496:	80f8      	strh	r0, [r7, #6]
 8015498:	3901      	subs	r1, #1
 801549a:	b2c9      	uxtb	r1, r1
 801549c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80154a0:	f8b1 43d0 	ldrh.w	r4, [r1, #976]	; 0x3d0
 80154a4:	4434      	add	r4, r6
 80154a6:	8213      	strh	r3, [r2, #16]
 80154a8:	6154      	str	r4, [r2, #20]
 80154aa:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f43f ae83 	beq.w	80151ba <MotionFX_MagCal_run+0xe2>
 80154b4:	8a11      	ldrh	r1, [r2, #16]
 80154b6:	8a53      	ldrh	r3, [r2, #18]
 80154b8:	428b      	cmp	r3, r1
 80154ba:	d022      	beq.n	8015502 <MotionFX_MagCal_run+0x42a>
 80154bc:	b341      	cbz	r1, 8015510 <MotionFX_MagCal_run+0x438>
 80154be:	6953      	ldr	r3, [r2, #20]
 80154c0:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80154c4:	3301      	adds	r3, #1
 80154c6:	4403      	add	r3, r0
 80154c8:	1c58      	adds	r0, r3, #1
 80154ca:	d021      	beq.n	8015510 <MotionFX_MagCal_run+0x438>
 80154cc:	f503 541c 	add.w	r4, r3, #9984	; 0x2700
 80154d0:	3410      	adds	r4, #16
 80154d2:	6d50      	ldr	r0, [r2, #84]	; 0x54
 80154d4:	42a0      	cmp	r0, r4
 80154d6:	f8b2 4058 	ldrh.w	r4, [r2, #88]	; 0x58
 80154da:	bf84      	itt	hi
 80154dc:	6553      	strhi	r3, [r2, #84]	; 0x54
 80154de:	4618      	movhi	r0, r3
 80154e0:	4420      	add	r0, r4
 80154e2:	4283      	cmp	r3, r0
 80154e4:	f4ff ae69 	bcc.w	80151ba <MotionFX_MagCal_run+0xe2>
 80154e8:	b131      	cbz	r1, 80154f8 <MotionFX_MagCal_run+0x420>
 80154ea:	f9b2 000a 	ldrsh.w	r0, [r2, #10]
 80154ee:	6952      	ldr	r2, [r2, #20]
 80154f0:	3901      	subs	r1, #1
 80154f2:	fb00 2111 	mls	r1, r0, r1, r2
 80154f6:	b289      	uxth	r1, r1
 80154f8:	1a5b      	subs	r3, r3, r1
 80154fa:	b21b      	sxth	r3, r3
 80154fc:	42a3      	cmp	r3, r4
 80154fe:	f6ff ae5c 	blt.w	80151ba <MotionFX_MagCal_run+0xe2>
 8015502:	4905      	ldr	r1, [pc, #20]	; (8015518 <MotionFX_MagCal_run+0x440>)
 8015504:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015508:	f101 0014 	add.w	r0, r1, #20
 801550c:	f7fd babc 	b.w	8012a88 <MEMS_runMagCal>
 8015510:	f242 7410 	movw	r4, #10000	; 0x2710
 8015514:	2300      	movs	r3, #0
 8015516:	e7dc      	b.n	80154d2 <MotionFX_MagCal_run+0x3fa>
 8015518:	200002e8 	.word	0x200002e8

0801551c <MotionFX_MagCal_getParams>:
 801551c:	b4f0      	push	{r4, r5, r6, r7}
 801551e:	4f1b      	ldr	r7, [pc, #108]	; (801558c <MotionFX_MagCal_getParams+0x70>)
 8015520:	793b      	ldrb	r3, [r7, #4]
 8015522:	b08e      	sub	sp, #56	; 0x38
 8015524:	b373      	cbz	r3, 8015584 <MotionFX_MagCal_getParams+0x68>
 8015526:	f107 0574 	add.w	r5, r7, #116	; 0x74
 801552a:	4606      	mov	r6, r0
 801552c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801552e:	ac01      	add	r4, sp, #4
 8015530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015538:	ed9d 7a03 	vldr	s14, [sp, #12]
 801553c:	eddd 6a02 	vldr	s13, [sp, #8]
 8015540:	eddd 7a04 	vldr	s15, [sp, #16]
 8015544:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8015590 <MotionFX_MagCal_getParams+0x74>
 8015548:	682d      	ldr	r5, [r5, #0]
 801554a:	f897 7074 	ldrb.w	r7, [r7, #116]	; 0x74
 801554e:	7337      	strb	r7, [r6, #12]
 8015550:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015554:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801555c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801555e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015562:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801556a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801556e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015572:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015576:	6025      	str	r5, [r4, #0]
 8015578:	edc6 6a00 	vstr	s13, [r6]
 801557c:	ed86 7a01 	vstr	s14, [r6, #4]
 8015580:	edc6 7a02 	vstr	s15, [r6, #8]
 8015584:	b00e      	add	sp, #56	; 0x38
 8015586:	bcf0      	pop	{r4, r5, r6, r7}
 8015588:	4770      	bx	lr
 801558a:	bf00      	nop
 801558c:	200002e0 	.word	0x200002e0
 8015590:	3b03126f 	.word	0x3b03126f

08015594 <_Znwj>:
 8015594:	2801      	cmp	r0, #1
 8015596:	bf38      	it	cc
 8015598:	2001      	movcc	r0, #1
 801559a:	b510      	push	{r4, lr}
 801559c:	4604      	mov	r4, r0
 801559e:	4620      	mov	r0, r4
 80155a0:	f001 ff48 	bl	8017434 <malloc>
 80155a4:	b930      	cbnz	r0, 80155b4 <_Znwj+0x20>
 80155a6:	f000 f807 	bl	80155b8 <_ZSt15get_new_handlerv>
 80155aa:	b908      	cbnz	r0, 80155b0 <_Znwj+0x1c>
 80155ac:	f001 ff10 	bl	80173d0 <abort>
 80155b0:	4780      	blx	r0
 80155b2:	e7f4      	b.n	801559e <_Znwj+0xa>
 80155b4:	bd10      	pop	{r4, pc}
	...

080155b8 <_ZSt15get_new_handlerv>:
 80155b8:	4b02      	ldr	r3, [pc, #8]	; (80155c4 <_ZSt15get_new_handlerv+0xc>)
 80155ba:	6818      	ldr	r0, [r3, #0]
 80155bc:	f3bf 8f5b 	dmb	ish
 80155c0:	4770      	bx	lr
 80155c2:	bf00      	nop
 80155c4:	200011b4 	.word	0x200011b4

080155c8 <ceil>:
 80155c8:	ec51 0b10 	vmov	r0, r1, d0
 80155cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80155d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80155d8:	2e13      	cmp	r6, #19
 80155da:	ee10 5a10 	vmov	r5, s0
 80155de:	ee10 8a10 	vmov	r8, s0
 80155e2:	460c      	mov	r4, r1
 80155e4:	dc30      	bgt.n	8015648 <ceil+0x80>
 80155e6:	2e00      	cmp	r6, #0
 80155e8:	da12      	bge.n	8015610 <ceil+0x48>
 80155ea:	a335      	add	r3, pc, #212	; (adr r3, 80156c0 <ceil+0xf8>)
 80155ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f0:	f7ea fe4c 	bl	800028c <__adddf3>
 80155f4:	2200      	movs	r2, #0
 80155f6:	2300      	movs	r3, #0
 80155f8:	f7eb fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 80155fc:	b128      	cbz	r0, 801560a <ceil+0x42>
 80155fe:	2c00      	cmp	r4, #0
 8015600:	db55      	blt.n	80156ae <ceil+0xe6>
 8015602:	432c      	orrs	r4, r5
 8015604:	d057      	beq.n	80156b6 <ceil+0xee>
 8015606:	4c30      	ldr	r4, [pc, #192]	; (80156c8 <ceil+0x100>)
 8015608:	2500      	movs	r5, #0
 801560a:	4621      	mov	r1, r4
 801560c:	4628      	mov	r0, r5
 801560e:	e025      	b.n	801565c <ceil+0x94>
 8015610:	4f2e      	ldr	r7, [pc, #184]	; (80156cc <ceil+0x104>)
 8015612:	4137      	asrs	r7, r6
 8015614:	ea01 0307 	and.w	r3, r1, r7
 8015618:	4303      	orrs	r3, r0
 801561a:	d01f      	beq.n	801565c <ceil+0x94>
 801561c:	a328      	add	r3, pc, #160	; (adr r3, 80156c0 <ceil+0xf8>)
 801561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015622:	f7ea fe33 	bl	800028c <__adddf3>
 8015626:	2200      	movs	r2, #0
 8015628:	2300      	movs	r3, #0
 801562a:	f7eb fa75 	bl	8000b18 <__aeabi_dcmpgt>
 801562e:	2800      	cmp	r0, #0
 8015630:	d0eb      	beq.n	801560a <ceil+0x42>
 8015632:	2c00      	cmp	r4, #0
 8015634:	bfc2      	ittt	gt
 8015636:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801563a:	fa43 f606 	asrgt.w	r6, r3, r6
 801563e:	19a4      	addgt	r4, r4, r6
 8015640:	ea24 0407 	bic.w	r4, r4, r7
 8015644:	2500      	movs	r5, #0
 8015646:	e7e0      	b.n	801560a <ceil+0x42>
 8015648:	2e33      	cmp	r6, #51	; 0x33
 801564a:	dd0b      	ble.n	8015664 <ceil+0x9c>
 801564c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015650:	d104      	bne.n	801565c <ceil+0x94>
 8015652:	ee10 2a10 	vmov	r2, s0
 8015656:	460b      	mov	r3, r1
 8015658:	f7ea fe18 	bl	800028c <__adddf3>
 801565c:	ec41 0b10 	vmov	d0, r0, r1
 8015660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015664:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015668:	f04f 33ff 	mov.w	r3, #4294967295
 801566c:	fa23 f707 	lsr.w	r7, r3, r7
 8015670:	4207      	tst	r7, r0
 8015672:	d0f3      	beq.n	801565c <ceil+0x94>
 8015674:	a312      	add	r3, pc, #72	; (adr r3, 80156c0 <ceil+0xf8>)
 8015676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801567a:	f7ea fe07 	bl	800028c <__adddf3>
 801567e:	2200      	movs	r2, #0
 8015680:	2300      	movs	r3, #0
 8015682:	f7eb fa49 	bl	8000b18 <__aeabi_dcmpgt>
 8015686:	2800      	cmp	r0, #0
 8015688:	d0bf      	beq.n	801560a <ceil+0x42>
 801568a:	2c00      	cmp	r4, #0
 801568c:	dd02      	ble.n	8015694 <ceil+0xcc>
 801568e:	2e14      	cmp	r6, #20
 8015690:	d103      	bne.n	801569a <ceil+0xd2>
 8015692:	3401      	adds	r4, #1
 8015694:	ea25 0507 	bic.w	r5, r5, r7
 8015698:	e7b7      	b.n	801560a <ceil+0x42>
 801569a:	2301      	movs	r3, #1
 801569c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80156a0:	fa03 f606 	lsl.w	r6, r3, r6
 80156a4:	4435      	add	r5, r6
 80156a6:	4545      	cmp	r5, r8
 80156a8:	bf38      	it	cc
 80156aa:	18e4      	addcc	r4, r4, r3
 80156ac:	e7f2      	b.n	8015694 <ceil+0xcc>
 80156ae:	2500      	movs	r5, #0
 80156b0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80156b4:	e7a9      	b.n	801560a <ceil+0x42>
 80156b6:	4625      	mov	r5, r4
 80156b8:	e7a7      	b.n	801560a <ceil+0x42>
 80156ba:	bf00      	nop
 80156bc:	f3af 8000 	nop.w
 80156c0:	8800759c 	.word	0x8800759c
 80156c4:	7e37e43c 	.word	0x7e37e43c
 80156c8:	3ff00000 	.word	0x3ff00000
 80156cc:	000fffff 	.word	0x000fffff

080156d0 <floor>:
 80156d0:	ec51 0b10 	vmov	r0, r1, d0
 80156d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156d8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80156dc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80156e0:	2e13      	cmp	r6, #19
 80156e2:	ee10 5a10 	vmov	r5, s0
 80156e6:	ee10 8a10 	vmov	r8, s0
 80156ea:	460c      	mov	r4, r1
 80156ec:	dc32      	bgt.n	8015754 <floor+0x84>
 80156ee:	2e00      	cmp	r6, #0
 80156f0:	da14      	bge.n	801571c <floor+0x4c>
 80156f2:	a333      	add	r3, pc, #204	; (adr r3, 80157c0 <floor+0xf0>)
 80156f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f8:	f7ea fdc8 	bl	800028c <__adddf3>
 80156fc:	2200      	movs	r2, #0
 80156fe:	2300      	movs	r3, #0
 8015700:	f7eb fa0a 	bl	8000b18 <__aeabi_dcmpgt>
 8015704:	b138      	cbz	r0, 8015716 <floor+0x46>
 8015706:	2c00      	cmp	r4, #0
 8015708:	da57      	bge.n	80157ba <floor+0xea>
 801570a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801570e:	431d      	orrs	r5, r3
 8015710:	d001      	beq.n	8015716 <floor+0x46>
 8015712:	4c2d      	ldr	r4, [pc, #180]	; (80157c8 <floor+0xf8>)
 8015714:	2500      	movs	r5, #0
 8015716:	4621      	mov	r1, r4
 8015718:	4628      	mov	r0, r5
 801571a:	e025      	b.n	8015768 <floor+0x98>
 801571c:	4f2b      	ldr	r7, [pc, #172]	; (80157cc <floor+0xfc>)
 801571e:	4137      	asrs	r7, r6
 8015720:	ea01 0307 	and.w	r3, r1, r7
 8015724:	4303      	orrs	r3, r0
 8015726:	d01f      	beq.n	8015768 <floor+0x98>
 8015728:	a325      	add	r3, pc, #148	; (adr r3, 80157c0 <floor+0xf0>)
 801572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801572e:	f7ea fdad 	bl	800028c <__adddf3>
 8015732:	2200      	movs	r2, #0
 8015734:	2300      	movs	r3, #0
 8015736:	f7eb f9ef 	bl	8000b18 <__aeabi_dcmpgt>
 801573a:	2800      	cmp	r0, #0
 801573c:	d0eb      	beq.n	8015716 <floor+0x46>
 801573e:	2c00      	cmp	r4, #0
 8015740:	bfbe      	ittt	lt
 8015742:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015746:	fa43 f606 	asrlt.w	r6, r3, r6
 801574a:	19a4      	addlt	r4, r4, r6
 801574c:	ea24 0407 	bic.w	r4, r4, r7
 8015750:	2500      	movs	r5, #0
 8015752:	e7e0      	b.n	8015716 <floor+0x46>
 8015754:	2e33      	cmp	r6, #51	; 0x33
 8015756:	dd0b      	ble.n	8015770 <floor+0xa0>
 8015758:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801575c:	d104      	bne.n	8015768 <floor+0x98>
 801575e:	ee10 2a10 	vmov	r2, s0
 8015762:	460b      	mov	r3, r1
 8015764:	f7ea fd92 	bl	800028c <__adddf3>
 8015768:	ec41 0b10 	vmov	d0, r0, r1
 801576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015770:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015774:	f04f 33ff 	mov.w	r3, #4294967295
 8015778:	fa23 f707 	lsr.w	r7, r3, r7
 801577c:	4207      	tst	r7, r0
 801577e:	d0f3      	beq.n	8015768 <floor+0x98>
 8015780:	a30f      	add	r3, pc, #60	; (adr r3, 80157c0 <floor+0xf0>)
 8015782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015786:	f7ea fd81 	bl	800028c <__adddf3>
 801578a:	2200      	movs	r2, #0
 801578c:	2300      	movs	r3, #0
 801578e:	f7eb f9c3 	bl	8000b18 <__aeabi_dcmpgt>
 8015792:	2800      	cmp	r0, #0
 8015794:	d0bf      	beq.n	8015716 <floor+0x46>
 8015796:	2c00      	cmp	r4, #0
 8015798:	da02      	bge.n	80157a0 <floor+0xd0>
 801579a:	2e14      	cmp	r6, #20
 801579c:	d103      	bne.n	80157a6 <floor+0xd6>
 801579e:	3401      	adds	r4, #1
 80157a0:	ea25 0507 	bic.w	r5, r5, r7
 80157a4:	e7b7      	b.n	8015716 <floor+0x46>
 80157a6:	2301      	movs	r3, #1
 80157a8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80157ac:	fa03 f606 	lsl.w	r6, r3, r6
 80157b0:	4435      	add	r5, r6
 80157b2:	4545      	cmp	r5, r8
 80157b4:	bf38      	it	cc
 80157b6:	18e4      	addcc	r4, r4, r3
 80157b8:	e7f2      	b.n	80157a0 <floor+0xd0>
 80157ba:	2500      	movs	r5, #0
 80157bc:	462c      	mov	r4, r5
 80157be:	e7aa      	b.n	8015716 <floor+0x46>
 80157c0:	8800759c 	.word	0x8800759c
 80157c4:	7e37e43c 	.word	0x7e37e43c
 80157c8:	bff00000 	.word	0xbff00000
 80157cc:	000fffff 	.word	0x000fffff

080157d0 <cosf>:
 80157d0:	ee10 3a10 	vmov	r3, s0
 80157d4:	b507      	push	{r0, r1, r2, lr}
 80157d6:	4a1c      	ldr	r2, [pc, #112]	; (8015848 <cosf+0x78>)
 80157d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80157dc:	4293      	cmp	r3, r2
 80157de:	dc04      	bgt.n	80157ea <cosf+0x1a>
 80157e0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801584c <cosf+0x7c>
 80157e4:	f000 fe9e 	bl	8016524 <__kernel_cosf>
 80157e8:	e004      	b.n	80157f4 <cosf+0x24>
 80157ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80157ee:	db04      	blt.n	80157fa <cosf+0x2a>
 80157f0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80157f4:	b003      	add	sp, #12
 80157f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80157fa:	4668      	mov	r0, sp
 80157fc:	f000 fd52 	bl	80162a4 <__ieee754_rem_pio2f>
 8015800:	f000 0003 	and.w	r0, r0, #3
 8015804:	2801      	cmp	r0, #1
 8015806:	d007      	beq.n	8015818 <cosf+0x48>
 8015808:	2802      	cmp	r0, #2
 801580a:	d00e      	beq.n	801582a <cosf+0x5a>
 801580c:	b9a0      	cbnz	r0, 8015838 <cosf+0x68>
 801580e:	eddd 0a01 	vldr	s1, [sp, #4]
 8015812:	ed9d 0a00 	vldr	s0, [sp]
 8015816:	e7e5      	b.n	80157e4 <cosf+0x14>
 8015818:	eddd 0a01 	vldr	s1, [sp, #4]
 801581c:	ed9d 0a00 	vldr	s0, [sp]
 8015820:	f001 f96a 	bl	8016af8 <__kernel_sinf>
 8015824:	eeb1 0a40 	vneg.f32	s0, s0
 8015828:	e7e4      	b.n	80157f4 <cosf+0x24>
 801582a:	eddd 0a01 	vldr	s1, [sp, #4]
 801582e:	ed9d 0a00 	vldr	s0, [sp]
 8015832:	f000 fe77 	bl	8016524 <__kernel_cosf>
 8015836:	e7f5      	b.n	8015824 <cosf+0x54>
 8015838:	eddd 0a01 	vldr	s1, [sp, #4]
 801583c:	ed9d 0a00 	vldr	s0, [sp]
 8015840:	2001      	movs	r0, #1
 8015842:	f001 f959 	bl	8016af8 <__kernel_sinf>
 8015846:	e7d5      	b.n	80157f4 <cosf+0x24>
 8015848:	3f490fd8 	.word	0x3f490fd8
 801584c:	00000000 	.word	0x00000000

08015850 <roundf>:
 8015850:	ee10 0a10 	vmov	r0, s0
 8015854:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8015858:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801585c:	2a16      	cmp	r2, #22
 801585e:	dc15      	bgt.n	801588c <roundf+0x3c>
 8015860:	2a00      	cmp	r2, #0
 8015862:	da08      	bge.n	8015876 <roundf+0x26>
 8015864:	3201      	adds	r2, #1
 8015866:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801586a:	d101      	bne.n	8015870 <roundf+0x20>
 801586c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8015870:	ee00 3a10 	vmov	s0, r3
 8015874:	4770      	bx	lr
 8015876:	4908      	ldr	r1, [pc, #32]	; (8015898 <roundf+0x48>)
 8015878:	4111      	asrs	r1, r2
 801587a:	4208      	tst	r0, r1
 801587c:	d0fa      	beq.n	8015874 <roundf+0x24>
 801587e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015882:	4113      	asrs	r3, r2
 8015884:	4403      	add	r3, r0
 8015886:	ea23 0301 	bic.w	r3, r3, r1
 801588a:	e7f1      	b.n	8015870 <roundf+0x20>
 801588c:	2a80      	cmp	r2, #128	; 0x80
 801588e:	d1f1      	bne.n	8015874 <roundf+0x24>
 8015890:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015894:	4770      	bx	lr
 8015896:	bf00      	nop
 8015898:	007fffff 	.word	0x007fffff

0801589c <sinf>:
 801589c:	ee10 3a10 	vmov	r3, s0
 80158a0:	b507      	push	{r0, r1, r2, lr}
 80158a2:	4a1d      	ldr	r2, [pc, #116]	; (8015918 <sinf+0x7c>)
 80158a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158a8:	4293      	cmp	r3, r2
 80158aa:	dc05      	bgt.n	80158b8 <sinf+0x1c>
 80158ac:	eddf 0a1b 	vldr	s1, [pc, #108]	; 801591c <sinf+0x80>
 80158b0:	2000      	movs	r0, #0
 80158b2:	f001 f921 	bl	8016af8 <__kernel_sinf>
 80158b6:	e004      	b.n	80158c2 <sinf+0x26>
 80158b8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80158bc:	db04      	blt.n	80158c8 <sinf+0x2c>
 80158be:	ee30 0a40 	vsub.f32	s0, s0, s0
 80158c2:	b003      	add	sp, #12
 80158c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80158c8:	4668      	mov	r0, sp
 80158ca:	f000 fceb 	bl	80162a4 <__ieee754_rem_pio2f>
 80158ce:	f000 0003 	and.w	r0, r0, #3
 80158d2:	2801      	cmp	r0, #1
 80158d4:	d008      	beq.n	80158e8 <sinf+0x4c>
 80158d6:	2802      	cmp	r0, #2
 80158d8:	d00d      	beq.n	80158f6 <sinf+0x5a>
 80158da:	b9b0      	cbnz	r0, 801590a <sinf+0x6e>
 80158dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80158e0:	ed9d 0a00 	vldr	s0, [sp]
 80158e4:	2001      	movs	r0, #1
 80158e6:	e7e4      	b.n	80158b2 <sinf+0x16>
 80158e8:	eddd 0a01 	vldr	s1, [sp, #4]
 80158ec:	ed9d 0a00 	vldr	s0, [sp]
 80158f0:	f000 fe18 	bl	8016524 <__kernel_cosf>
 80158f4:	e7e5      	b.n	80158c2 <sinf+0x26>
 80158f6:	eddd 0a01 	vldr	s1, [sp, #4]
 80158fa:	ed9d 0a00 	vldr	s0, [sp]
 80158fe:	2001      	movs	r0, #1
 8015900:	f001 f8fa 	bl	8016af8 <__kernel_sinf>
 8015904:	eeb1 0a40 	vneg.f32	s0, s0
 8015908:	e7db      	b.n	80158c2 <sinf+0x26>
 801590a:	eddd 0a01 	vldr	s1, [sp, #4]
 801590e:	ed9d 0a00 	vldr	s0, [sp]
 8015912:	f000 fe07 	bl	8016524 <__kernel_cosf>
 8015916:	e7f5      	b.n	8015904 <sinf+0x68>
 8015918:	3f490fd8 	.word	0x3f490fd8
 801591c:	00000000 	.word	0x00000000

08015920 <tanf>:
 8015920:	ee10 3a10 	vmov	r3, s0
 8015924:	b507      	push	{r0, r1, r2, lr}
 8015926:	4a10      	ldr	r2, [pc, #64]	; (8015968 <tanf+0x48>)
 8015928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801592c:	4293      	cmp	r3, r2
 801592e:	dc05      	bgt.n	801593c <tanf+0x1c>
 8015930:	eddf 0a0e 	vldr	s1, [pc, #56]	; 801596c <tanf+0x4c>
 8015934:	2001      	movs	r0, #1
 8015936:	f001 f927 	bl	8016b88 <__kernel_tanf>
 801593a:	e004      	b.n	8015946 <tanf+0x26>
 801593c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8015940:	db04      	blt.n	801594c <tanf+0x2c>
 8015942:	ee30 0a40 	vsub.f32	s0, s0, s0
 8015946:	b003      	add	sp, #12
 8015948:	f85d fb04 	ldr.w	pc, [sp], #4
 801594c:	4668      	mov	r0, sp
 801594e:	f000 fca9 	bl	80162a4 <__ieee754_rem_pio2f>
 8015952:	0040      	lsls	r0, r0, #1
 8015954:	f000 0002 	and.w	r0, r0, #2
 8015958:	eddd 0a01 	vldr	s1, [sp, #4]
 801595c:	ed9d 0a00 	vldr	s0, [sp]
 8015960:	f1c0 0001 	rsb	r0, r0, #1
 8015964:	e7e7      	b.n	8015936 <tanf+0x16>
 8015966:	bf00      	nop
 8015968:	3f490fda 	.word	0x3f490fda
 801596c:	00000000 	.word	0x00000000

08015970 <atan2>:
 8015970:	f000 b89a 	b.w	8015aa8 <__ieee754_atan2>

08015974 <sqrt>:
 8015974:	b538      	push	{r3, r4, r5, lr}
 8015976:	ed2d 8b02 	vpush	{d8}
 801597a:	ec55 4b10 	vmov	r4, r5, d0
 801597e:	f000 f95d 	bl	8015c3c <__ieee754_sqrt>
 8015982:	4b15      	ldr	r3, [pc, #84]	; (80159d8 <sqrt+0x64>)
 8015984:	eeb0 8a40 	vmov.f32	s16, s0
 8015988:	eef0 8a60 	vmov.f32	s17, s1
 801598c:	f993 3000 	ldrsb.w	r3, [r3]
 8015990:	3301      	adds	r3, #1
 8015992:	d019      	beq.n	80159c8 <sqrt+0x54>
 8015994:	4622      	mov	r2, r4
 8015996:	462b      	mov	r3, r5
 8015998:	4620      	mov	r0, r4
 801599a:	4629      	mov	r1, r5
 801599c:	f7eb f8c6 	bl	8000b2c <__aeabi_dcmpun>
 80159a0:	b990      	cbnz	r0, 80159c8 <sqrt+0x54>
 80159a2:	2200      	movs	r2, #0
 80159a4:	2300      	movs	r3, #0
 80159a6:	4620      	mov	r0, r4
 80159a8:	4629      	mov	r1, r5
 80159aa:	f7eb f897 	bl	8000adc <__aeabi_dcmplt>
 80159ae:	b158      	cbz	r0, 80159c8 <sqrt+0x54>
 80159b0:	f001 fd16 	bl	80173e0 <__errno>
 80159b4:	2321      	movs	r3, #33	; 0x21
 80159b6:	6003      	str	r3, [r0, #0]
 80159b8:	2200      	movs	r2, #0
 80159ba:	2300      	movs	r3, #0
 80159bc:	4610      	mov	r0, r2
 80159be:	4619      	mov	r1, r3
 80159c0:	f7ea ff44 	bl	800084c <__aeabi_ddiv>
 80159c4:	ec41 0b18 	vmov	d8, r0, r1
 80159c8:	eeb0 0a48 	vmov.f32	s0, s16
 80159cc:	eef0 0a68 	vmov.f32	s1, s17
 80159d0:	ecbd 8b02 	vpop	{d8}
 80159d4:	bd38      	pop	{r3, r4, r5, pc}
 80159d6:	bf00      	nop
 80159d8:	200000ed 	.word	0x200000ed

080159dc <acosf>:
 80159dc:	b508      	push	{r3, lr}
 80159de:	ed2d 8b02 	vpush	{d8}
 80159e2:	eeb0 8a40 	vmov.f32	s16, s0
 80159e6:	f000 f9dd 	bl	8015da4 <__ieee754_acosf>
 80159ea:	4b13      	ldr	r3, [pc, #76]	; (8015a38 <acosf+0x5c>)
 80159ec:	f993 3000 	ldrsb.w	r3, [r3]
 80159f0:	3301      	adds	r3, #1
 80159f2:	eef0 8a40 	vmov.f32	s17, s0
 80159f6:	d01a      	beq.n	8015a2e <acosf+0x52>
 80159f8:	eeb4 8a48 	vcmp.f32	s16, s16
 80159fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a00:	d615      	bvs.n	8015a2e <acosf+0x52>
 8015a02:	eeb0 0a48 	vmov.f32	s0, s16
 8015a06:	f001 fc21 	bl	801724c <fabsf>
 8015a0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015a0e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a16:	dd0a      	ble.n	8015a2e <acosf+0x52>
 8015a18:	f001 fce2 	bl	80173e0 <__errno>
 8015a1c:	ecbd 8b02 	vpop	{d8}
 8015a20:	2321      	movs	r3, #33	; 0x21
 8015a22:	6003      	str	r3, [r0, #0]
 8015a24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015a28:	4804      	ldr	r0, [pc, #16]	; (8015a3c <acosf+0x60>)
 8015a2a:	f001 bc59 	b.w	80172e0 <nanf>
 8015a2e:	eeb0 0a68 	vmov.f32	s0, s17
 8015a32:	ecbd 8b02 	vpop	{d8}
 8015a36:	bd08      	pop	{r3, pc}
 8015a38:	200000ed 	.word	0x200000ed
 8015a3c:	0801ab60 	.word	0x0801ab60

08015a40 <asinf>:
 8015a40:	b508      	push	{r3, lr}
 8015a42:	ed2d 8b02 	vpush	{d8}
 8015a46:	eeb0 8a40 	vmov.f32	s16, s0
 8015a4a:	f000 faa5 	bl	8015f98 <__ieee754_asinf>
 8015a4e:	4b13      	ldr	r3, [pc, #76]	; (8015a9c <asinf+0x5c>)
 8015a50:	f993 3000 	ldrsb.w	r3, [r3]
 8015a54:	3301      	adds	r3, #1
 8015a56:	eef0 8a40 	vmov.f32	s17, s0
 8015a5a:	d01a      	beq.n	8015a92 <asinf+0x52>
 8015a5c:	eeb4 8a48 	vcmp.f32	s16, s16
 8015a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a64:	d615      	bvs.n	8015a92 <asinf+0x52>
 8015a66:	eeb0 0a48 	vmov.f32	s0, s16
 8015a6a:	f001 fbef 	bl	801724c <fabsf>
 8015a6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015a72:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a7a:	dd0a      	ble.n	8015a92 <asinf+0x52>
 8015a7c:	f001 fcb0 	bl	80173e0 <__errno>
 8015a80:	ecbd 8b02 	vpop	{d8}
 8015a84:	2321      	movs	r3, #33	; 0x21
 8015a86:	6003      	str	r3, [r0, #0]
 8015a88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8015a8c:	4804      	ldr	r0, [pc, #16]	; (8015aa0 <asinf+0x60>)
 8015a8e:	f001 bc27 	b.w	80172e0 <nanf>
 8015a92:	eeb0 0a68 	vmov.f32	s0, s17
 8015a96:	ecbd 8b02 	vpop	{d8}
 8015a9a:	bd08      	pop	{r3, pc}
 8015a9c:	200000ed 	.word	0x200000ed
 8015aa0:	0801ab60 	.word	0x0801ab60

08015aa4 <atan2f>:
 8015aa4:	f000 bb5e 	b.w	8016164 <__ieee754_atan2f>

08015aa8 <__ieee754_atan2>:
 8015aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015aac:	ec57 6b11 	vmov	r6, r7, d1
 8015ab0:	4273      	negs	r3, r6
 8015ab2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8015c38 <__ieee754_atan2+0x190>
 8015ab6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8015aba:	4333      	orrs	r3, r6
 8015abc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015ac0:	4573      	cmp	r3, lr
 8015ac2:	ec51 0b10 	vmov	r0, r1, d0
 8015ac6:	ee11 8a10 	vmov	r8, s2
 8015aca:	d80a      	bhi.n	8015ae2 <__ieee754_atan2+0x3a>
 8015acc:	4244      	negs	r4, r0
 8015ace:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015ad2:	4304      	orrs	r4, r0
 8015ad4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8015ad8:	4574      	cmp	r4, lr
 8015ada:	ee10 9a10 	vmov	r9, s0
 8015ade:	468c      	mov	ip, r1
 8015ae0:	d907      	bls.n	8015af2 <__ieee754_atan2+0x4a>
 8015ae2:	4632      	mov	r2, r6
 8015ae4:	463b      	mov	r3, r7
 8015ae6:	f7ea fbd1 	bl	800028c <__adddf3>
 8015aea:	ec41 0b10 	vmov	d0, r0, r1
 8015aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015af2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8015af6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015afa:	4334      	orrs	r4, r6
 8015afc:	d103      	bne.n	8015b06 <__ieee754_atan2+0x5e>
 8015afe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b02:	f001 b925 	b.w	8016d50 <atan>
 8015b06:	17bc      	asrs	r4, r7, #30
 8015b08:	f004 0402 	and.w	r4, r4, #2
 8015b0c:	ea53 0909 	orrs.w	r9, r3, r9
 8015b10:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8015b14:	d107      	bne.n	8015b26 <__ieee754_atan2+0x7e>
 8015b16:	2c02      	cmp	r4, #2
 8015b18:	d060      	beq.n	8015bdc <__ieee754_atan2+0x134>
 8015b1a:	2c03      	cmp	r4, #3
 8015b1c:	d1e5      	bne.n	8015aea <__ieee754_atan2+0x42>
 8015b1e:	a142      	add	r1, pc, #264	; (adr r1, 8015c28 <__ieee754_atan2+0x180>)
 8015b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b24:	e7e1      	b.n	8015aea <__ieee754_atan2+0x42>
 8015b26:	ea52 0808 	orrs.w	r8, r2, r8
 8015b2a:	d106      	bne.n	8015b3a <__ieee754_atan2+0x92>
 8015b2c:	f1bc 0f00 	cmp.w	ip, #0
 8015b30:	da5f      	bge.n	8015bf2 <__ieee754_atan2+0x14a>
 8015b32:	a13f      	add	r1, pc, #252	; (adr r1, 8015c30 <__ieee754_atan2+0x188>)
 8015b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b38:	e7d7      	b.n	8015aea <__ieee754_atan2+0x42>
 8015b3a:	4572      	cmp	r2, lr
 8015b3c:	d10f      	bne.n	8015b5e <__ieee754_atan2+0xb6>
 8015b3e:	4293      	cmp	r3, r2
 8015b40:	f104 34ff 	add.w	r4, r4, #4294967295
 8015b44:	d107      	bne.n	8015b56 <__ieee754_atan2+0xae>
 8015b46:	2c02      	cmp	r4, #2
 8015b48:	d84c      	bhi.n	8015be4 <__ieee754_atan2+0x13c>
 8015b4a:	4b35      	ldr	r3, [pc, #212]	; (8015c20 <__ieee754_atan2+0x178>)
 8015b4c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015b50:	e9d4 0100 	ldrd	r0, r1, [r4]
 8015b54:	e7c9      	b.n	8015aea <__ieee754_atan2+0x42>
 8015b56:	2c02      	cmp	r4, #2
 8015b58:	d848      	bhi.n	8015bec <__ieee754_atan2+0x144>
 8015b5a:	4b32      	ldr	r3, [pc, #200]	; (8015c24 <__ieee754_atan2+0x17c>)
 8015b5c:	e7f6      	b.n	8015b4c <__ieee754_atan2+0xa4>
 8015b5e:	4573      	cmp	r3, lr
 8015b60:	d0e4      	beq.n	8015b2c <__ieee754_atan2+0x84>
 8015b62:	1a9b      	subs	r3, r3, r2
 8015b64:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015b68:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015b6c:	da1e      	bge.n	8015bac <__ieee754_atan2+0x104>
 8015b6e:	2f00      	cmp	r7, #0
 8015b70:	da01      	bge.n	8015b76 <__ieee754_atan2+0xce>
 8015b72:	323c      	adds	r2, #60	; 0x3c
 8015b74:	db1e      	blt.n	8015bb4 <__ieee754_atan2+0x10c>
 8015b76:	4632      	mov	r2, r6
 8015b78:	463b      	mov	r3, r7
 8015b7a:	f7ea fe67 	bl	800084c <__aeabi_ddiv>
 8015b7e:	ec41 0b10 	vmov	d0, r0, r1
 8015b82:	f001 fa85 	bl	8017090 <fabs>
 8015b86:	f001 f8e3 	bl	8016d50 <atan>
 8015b8a:	ec51 0b10 	vmov	r0, r1, d0
 8015b8e:	2c01      	cmp	r4, #1
 8015b90:	d013      	beq.n	8015bba <__ieee754_atan2+0x112>
 8015b92:	2c02      	cmp	r4, #2
 8015b94:	d015      	beq.n	8015bc2 <__ieee754_atan2+0x11a>
 8015b96:	2c00      	cmp	r4, #0
 8015b98:	d0a7      	beq.n	8015aea <__ieee754_atan2+0x42>
 8015b9a:	a319      	add	r3, pc, #100	; (adr r3, 8015c00 <__ieee754_atan2+0x158>)
 8015b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba0:	f7ea fb72 	bl	8000288 <__aeabi_dsub>
 8015ba4:	a318      	add	r3, pc, #96	; (adr r3, 8015c08 <__ieee754_atan2+0x160>)
 8015ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015baa:	e014      	b.n	8015bd6 <__ieee754_atan2+0x12e>
 8015bac:	a118      	add	r1, pc, #96	; (adr r1, 8015c10 <__ieee754_atan2+0x168>)
 8015bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bb2:	e7ec      	b.n	8015b8e <__ieee754_atan2+0xe6>
 8015bb4:	2000      	movs	r0, #0
 8015bb6:	2100      	movs	r1, #0
 8015bb8:	e7e9      	b.n	8015b8e <__ieee754_atan2+0xe6>
 8015bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015bbe:	4619      	mov	r1, r3
 8015bc0:	e793      	b.n	8015aea <__ieee754_atan2+0x42>
 8015bc2:	a30f      	add	r3, pc, #60	; (adr r3, 8015c00 <__ieee754_atan2+0x158>)
 8015bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bc8:	f7ea fb5e 	bl	8000288 <__aeabi_dsub>
 8015bcc:	4602      	mov	r2, r0
 8015bce:	460b      	mov	r3, r1
 8015bd0:	a10d      	add	r1, pc, #52	; (adr r1, 8015c08 <__ieee754_atan2+0x160>)
 8015bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bd6:	f7ea fb57 	bl	8000288 <__aeabi_dsub>
 8015bda:	e786      	b.n	8015aea <__ieee754_atan2+0x42>
 8015bdc:	a10a      	add	r1, pc, #40	; (adr r1, 8015c08 <__ieee754_atan2+0x160>)
 8015bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015be2:	e782      	b.n	8015aea <__ieee754_atan2+0x42>
 8015be4:	a10c      	add	r1, pc, #48	; (adr r1, 8015c18 <__ieee754_atan2+0x170>)
 8015be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bea:	e77e      	b.n	8015aea <__ieee754_atan2+0x42>
 8015bec:	2000      	movs	r0, #0
 8015bee:	2100      	movs	r1, #0
 8015bf0:	e77b      	b.n	8015aea <__ieee754_atan2+0x42>
 8015bf2:	a107      	add	r1, pc, #28	; (adr r1, 8015c10 <__ieee754_atan2+0x168>)
 8015bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015bf8:	e777      	b.n	8015aea <__ieee754_atan2+0x42>
 8015bfa:	bf00      	nop
 8015bfc:	f3af 8000 	nop.w
 8015c00:	33145c07 	.word	0x33145c07
 8015c04:	3ca1a626 	.word	0x3ca1a626
 8015c08:	54442d18 	.word	0x54442d18
 8015c0c:	400921fb 	.word	0x400921fb
 8015c10:	54442d18 	.word	0x54442d18
 8015c14:	3ff921fb 	.word	0x3ff921fb
 8015c18:	54442d18 	.word	0x54442d18
 8015c1c:	3fe921fb 	.word	0x3fe921fb
 8015c20:	0801a410 	.word	0x0801a410
 8015c24:	0801a428 	.word	0x0801a428
 8015c28:	54442d18 	.word	0x54442d18
 8015c2c:	c00921fb 	.word	0xc00921fb
 8015c30:	54442d18 	.word	0x54442d18
 8015c34:	bff921fb 	.word	0xbff921fb
 8015c38:	7ff00000 	.word	0x7ff00000

08015c3c <__ieee754_sqrt>:
 8015c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c40:	ec55 4b10 	vmov	r4, r5, d0
 8015c44:	4e56      	ldr	r6, [pc, #344]	; (8015da0 <__ieee754_sqrt+0x164>)
 8015c46:	43ae      	bics	r6, r5
 8015c48:	ee10 0a10 	vmov	r0, s0
 8015c4c:	ee10 3a10 	vmov	r3, s0
 8015c50:	4629      	mov	r1, r5
 8015c52:	462a      	mov	r2, r5
 8015c54:	d110      	bne.n	8015c78 <__ieee754_sqrt+0x3c>
 8015c56:	ee10 2a10 	vmov	r2, s0
 8015c5a:	462b      	mov	r3, r5
 8015c5c:	f7ea fccc 	bl	80005f8 <__aeabi_dmul>
 8015c60:	4602      	mov	r2, r0
 8015c62:	460b      	mov	r3, r1
 8015c64:	4620      	mov	r0, r4
 8015c66:	4629      	mov	r1, r5
 8015c68:	f7ea fb10 	bl	800028c <__adddf3>
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	460d      	mov	r5, r1
 8015c70:	ec45 4b10 	vmov	d0, r4, r5
 8015c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c78:	2d00      	cmp	r5, #0
 8015c7a:	dc10      	bgt.n	8015c9e <__ieee754_sqrt+0x62>
 8015c7c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015c80:	4330      	orrs	r0, r6
 8015c82:	d0f5      	beq.n	8015c70 <__ieee754_sqrt+0x34>
 8015c84:	b15d      	cbz	r5, 8015c9e <__ieee754_sqrt+0x62>
 8015c86:	ee10 2a10 	vmov	r2, s0
 8015c8a:	462b      	mov	r3, r5
 8015c8c:	ee10 0a10 	vmov	r0, s0
 8015c90:	f7ea fafa 	bl	8000288 <__aeabi_dsub>
 8015c94:	4602      	mov	r2, r0
 8015c96:	460b      	mov	r3, r1
 8015c98:	f7ea fdd8 	bl	800084c <__aeabi_ddiv>
 8015c9c:	e7e6      	b.n	8015c6c <__ieee754_sqrt+0x30>
 8015c9e:	1509      	asrs	r1, r1, #20
 8015ca0:	d076      	beq.n	8015d90 <__ieee754_sqrt+0x154>
 8015ca2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015ca6:	07ce      	lsls	r6, r1, #31
 8015ca8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015cac:	bf5e      	ittt	pl
 8015cae:	0fda      	lsrpl	r2, r3, #31
 8015cb0:	005b      	lslpl	r3, r3, #1
 8015cb2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8015cb6:	0fda      	lsrs	r2, r3, #31
 8015cb8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015cbc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	106d      	asrs	r5, r5, #1
 8015cc4:	005b      	lsls	r3, r3, #1
 8015cc6:	f04f 0e16 	mov.w	lr, #22
 8015cca:	4684      	mov	ip, r0
 8015ccc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015cd0:	eb0c 0401 	add.w	r4, ip, r1
 8015cd4:	4294      	cmp	r4, r2
 8015cd6:	bfde      	ittt	le
 8015cd8:	1b12      	suble	r2, r2, r4
 8015cda:	eb04 0c01 	addle.w	ip, r4, r1
 8015cde:	1840      	addle	r0, r0, r1
 8015ce0:	0052      	lsls	r2, r2, #1
 8015ce2:	f1be 0e01 	subs.w	lr, lr, #1
 8015ce6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015cea:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015cee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015cf2:	d1ed      	bne.n	8015cd0 <__ieee754_sqrt+0x94>
 8015cf4:	4671      	mov	r1, lr
 8015cf6:	2720      	movs	r7, #32
 8015cf8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015cfc:	4562      	cmp	r2, ip
 8015cfe:	eb04 060e 	add.w	r6, r4, lr
 8015d02:	dc02      	bgt.n	8015d0a <__ieee754_sqrt+0xce>
 8015d04:	d113      	bne.n	8015d2e <__ieee754_sqrt+0xf2>
 8015d06:	429e      	cmp	r6, r3
 8015d08:	d811      	bhi.n	8015d2e <__ieee754_sqrt+0xf2>
 8015d0a:	2e00      	cmp	r6, #0
 8015d0c:	eb06 0e04 	add.w	lr, r6, r4
 8015d10:	da43      	bge.n	8015d9a <__ieee754_sqrt+0x15e>
 8015d12:	f1be 0f00 	cmp.w	lr, #0
 8015d16:	db40      	blt.n	8015d9a <__ieee754_sqrt+0x15e>
 8015d18:	f10c 0801 	add.w	r8, ip, #1
 8015d1c:	eba2 020c 	sub.w	r2, r2, ip
 8015d20:	429e      	cmp	r6, r3
 8015d22:	bf88      	it	hi
 8015d24:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015d28:	1b9b      	subs	r3, r3, r6
 8015d2a:	4421      	add	r1, r4
 8015d2c:	46c4      	mov	ip, r8
 8015d2e:	0052      	lsls	r2, r2, #1
 8015d30:	3f01      	subs	r7, #1
 8015d32:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015d36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015d3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8015d3e:	d1dd      	bne.n	8015cfc <__ieee754_sqrt+0xc0>
 8015d40:	4313      	orrs	r3, r2
 8015d42:	d006      	beq.n	8015d52 <__ieee754_sqrt+0x116>
 8015d44:	1c4c      	adds	r4, r1, #1
 8015d46:	bf13      	iteet	ne
 8015d48:	3101      	addne	r1, #1
 8015d4a:	3001      	addeq	r0, #1
 8015d4c:	4639      	moveq	r1, r7
 8015d4e:	f021 0101 	bicne.w	r1, r1, #1
 8015d52:	1043      	asrs	r3, r0, #1
 8015d54:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015d58:	0849      	lsrs	r1, r1, #1
 8015d5a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8015d5e:	07c2      	lsls	r2, r0, #31
 8015d60:	bf48      	it	mi
 8015d62:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015d66:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8015d6a:	460c      	mov	r4, r1
 8015d6c:	463d      	mov	r5, r7
 8015d6e:	e77f      	b.n	8015c70 <__ieee754_sqrt+0x34>
 8015d70:	0ada      	lsrs	r2, r3, #11
 8015d72:	3815      	subs	r0, #21
 8015d74:	055b      	lsls	r3, r3, #21
 8015d76:	2a00      	cmp	r2, #0
 8015d78:	d0fa      	beq.n	8015d70 <__ieee754_sqrt+0x134>
 8015d7a:	02d7      	lsls	r7, r2, #11
 8015d7c:	d50a      	bpl.n	8015d94 <__ieee754_sqrt+0x158>
 8015d7e:	f1c1 0420 	rsb	r4, r1, #32
 8015d82:	fa23 f404 	lsr.w	r4, r3, r4
 8015d86:	1e4d      	subs	r5, r1, #1
 8015d88:	408b      	lsls	r3, r1
 8015d8a:	4322      	orrs	r2, r4
 8015d8c:	1b41      	subs	r1, r0, r5
 8015d8e:	e788      	b.n	8015ca2 <__ieee754_sqrt+0x66>
 8015d90:	4608      	mov	r0, r1
 8015d92:	e7f0      	b.n	8015d76 <__ieee754_sqrt+0x13a>
 8015d94:	0052      	lsls	r2, r2, #1
 8015d96:	3101      	adds	r1, #1
 8015d98:	e7ef      	b.n	8015d7a <__ieee754_sqrt+0x13e>
 8015d9a:	46e0      	mov	r8, ip
 8015d9c:	e7be      	b.n	8015d1c <__ieee754_sqrt+0xe0>
 8015d9e:	bf00      	nop
 8015da0:	7ff00000 	.word	0x7ff00000

08015da4 <__ieee754_acosf>:
 8015da4:	b508      	push	{r3, lr}
 8015da6:	ee10 3a10 	vmov	r3, s0
 8015daa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015dae:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8015db2:	ed2d 8b0c 	vpush	{d8-d13}
 8015db6:	d10a      	bne.n	8015dce <__ieee754_acosf+0x2a>
 8015db8:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8015f54 <__ieee754_acosf+0x1b0>
 8015dbc:	ed9f 8a66 	vldr	s16, [pc, #408]	; 8015f58 <__ieee754_acosf+0x1b4>
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	bfd8      	it	le
 8015dc4:	eeb0 0a48 	vmovle.f32	s0, s16
 8015dc8:	ecbd 8b0c 	vpop	{d8-d13}
 8015dcc:	bd08      	pop	{r3, pc}
 8015dce:	dd04      	ble.n	8015dda <__ieee754_acosf+0x36>
 8015dd0:	ee30 8a40 	vsub.f32	s16, s0, s0
 8015dd4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015dd8:	e7f6      	b.n	8015dc8 <__ieee754_acosf+0x24>
 8015dda:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8015dde:	da3e      	bge.n	8015e5e <__ieee754_acosf+0xba>
 8015de0:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8015de4:	f340 80b3 	ble.w	8015f4e <__ieee754_acosf+0x1aa>
 8015de8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8015dec:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8015f5c <__ieee754_acosf+0x1b8>
 8015df0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8015f60 <__ieee754_acosf+0x1bc>
 8015df4:	ed9f 6a5b 	vldr	s12, [pc, #364]	; 8015f64 <__ieee754_acosf+0x1c0>
 8015df8:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 8015f68 <__ieee754_acosf+0x1c4>
 8015dfc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8015e00:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8015f6c <__ieee754_acosf+0x1c8>
 8015e04:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015e08:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8015f70 <__ieee754_acosf+0x1cc>
 8015e0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015e10:	eddf 6a58 	vldr	s13, [pc, #352]	; 8015f74 <__ieee754_acosf+0x1d0>
 8015e14:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015e18:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8015f78 <__ieee754_acosf+0x1d4>
 8015e1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015e20:	eddf 6a56 	vldr	s13, [pc, #344]	; 8015f7c <__ieee754_acosf+0x1d8>
 8015e24:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8015e28:	eddf 6a55 	vldr	s13, [pc, #340]	; 8015f80 <__ieee754_acosf+0x1dc>
 8015e2c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015e30:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8015f84 <__ieee754_acosf+0x1e0>
 8015e34:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015e3c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015e40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015e44:	eef0 7a66 	vmov.f32	s15, s13
 8015e48:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015e4c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8015f88 <__ieee754_acosf+0x1e4>
 8015e50:	eea0 8a66 	vfms.f32	s16, s0, s13
 8015e54:	ee30 0a48 	vsub.f32	s0, s0, s16
 8015e58:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015e5c:	e7b4      	b.n	8015dc8 <__ieee754_acosf+0x24>
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	eddf da3e 	vldr	s27, [pc, #248]	; 8015f5c <__ieee754_acosf+0x1b8>
 8015e64:	eddf ca3e 	vldr	s25, [pc, #248]	; 8015f60 <__ieee754_acosf+0x1bc>
 8015e68:	ed9f ca40 	vldr	s24, [pc, #256]	; 8015f6c <__ieee754_acosf+0x1c8>
 8015e6c:	eddf ba40 	vldr	s23, [pc, #256]	; 8015f70 <__ieee754_acosf+0x1cc>
 8015e70:	ed9f ba40 	vldr	s22, [pc, #256]	; 8015f74 <__ieee754_acosf+0x1d0>
 8015e74:	eddf 8a40 	vldr	s17, [pc, #256]	; 8015f78 <__ieee754_acosf+0x1d4>
 8015e78:	ed9f da40 	vldr	s26, [pc, #256]	; 8015f7c <__ieee754_acosf+0x1d8>
 8015e7c:	eddf aa39 	vldr	s21, [pc, #228]	; 8015f64 <__ieee754_acosf+0x1c0>
 8015e80:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8015f80 <__ieee754_acosf+0x1dc>
 8015e84:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8015f84 <__ieee754_acosf+0x1e0>
 8015e88:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015e8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015e90:	da28      	bge.n	8015ee4 <__ieee754_acosf+0x140>
 8015e92:	ee30 0a09 	vadd.f32	s0, s0, s18
 8015e96:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015e9a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8015e9e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8015ea2:	eeac ca80 	vfma.f32	s24, s25, s0
 8015ea6:	eeaa aa80 	vfma.f32	s20, s21, s0
 8015eaa:	eeec ba00 	vfma.f32	s23, s24, s0
 8015eae:	eeea 9a00 	vfma.f32	s19, s20, s0
 8015eb2:	eeab ba80 	vfma.f32	s22, s23, s0
 8015eb6:	eea9 9a80 	vfma.f32	s18, s19, s0
 8015eba:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8015ebe:	ee68 8a80 	vmul.f32	s17, s17, s0
 8015ec2:	f000 fb2b 	bl	801651c <__ieee754_sqrtf>
 8015ec6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8015eca:	eddf 7a30 	vldr	s15, [pc, #192]	; 8015f8c <__ieee754_acosf+0x1e8>
 8015ece:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015ed2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015ed6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8015eda:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8015f90 <__ieee754_acosf+0x1ec>
 8015ede:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8015ee2:	e771      	b.n	8015dc8 <__ieee754_acosf+0x24>
 8015ee4:	ee39 8a40 	vsub.f32	s16, s18, s0
 8015ee8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015eec:	eeb0 0a48 	vmov.f32	s0, s16
 8015ef0:	f000 fb14 	bl	801651c <__ieee754_sqrtf>
 8015ef4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8015ef8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8015efc:	eeac ca88 	vfma.f32	s24, s25, s16
 8015f00:	eeaa aa88 	vfma.f32	s20, s21, s16
 8015f04:	eeec ba08 	vfma.f32	s23, s24, s16
 8015f08:	ee10 3a10 	vmov	r3, s0
 8015f0c:	eeab ba88 	vfma.f32	s22, s23, s16
 8015f10:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015f14:	f023 030f 	bic.w	r3, r3, #15
 8015f18:	eeea 9a08 	vfma.f32	s19, s20, s16
 8015f1c:	ee07 3a90 	vmov	s15, r3
 8015f20:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8015f24:	eeb0 6a48 	vmov.f32	s12, s16
 8015f28:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8015f2c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8015f30:	ee70 6a27 	vadd.f32	s13, s0, s15
 8015f34:	ee68 8a88 	vmul.f32	s17, s17, s16
 8015f38:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015f3c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8015f40:	eea0 7a26 	vfma.f32	s14, s0, s13
 8015f44:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015f48:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015f4c:	e73c      	b.n	8015dc8 <__ieee754_acosf+0x24>
 8015f4e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8015f94 <__ieee754_acosf+0x1f0>
 8015f52:	e739      	b.n	8015dc8 <__ieee754_acosf+0x24>
 8015f54:	00000000 	.word	0x00000000
 8015f58:	40490fdb 	.word	0x40490fdb
 8015f5c:	3811ef08 	.word	0x3811ef08
 8015f60:	3a4f7f04 	.word	0x3a4f7f04
 8015f64:	bf303361 	.word	0xbf303361
 8015f68:	33a22168 	.word	0x33a22168
 8015f6c:	bd241146 	.word	0xbd241146
 8015f70:	3e4e0aa8 	.word	0x3e4e0aa8
 8015f74:	bea6b090 	.word	0xbea6b090
 8015f78:	3e2aaaab 	.word	0x3e2aaaab
 8015f7c:	3d9dc62e 	.word	0x3d9dc62e
 8015f80:	4001572d 	.word	0x4001572d
 8015f84:	c019d139 	.word	0xc019d139
 8015f88:	3fc90fda 	.word	0x3fc90fda
 8015f8c:	b3a22168 	.word	0xb3a22168
 8015f90:	40490fda 	.word	0x40490fda
 8015f94:	3fc90fdb 	.word	0x3fc90fdb

08015f98 <__ieee754_asinf>:
 8015f98:	b538      	push	{r3, r4, r5, lr}
 8015f9a:	ee10 5a10 	vmov	r5, s0
 8015f9e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8015fa2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015fa6:	ed2d 8b04 	vpush	{d8-d9}
 8015faa:	d10c      	bne.n	8015fc6 <__ieee754_asinf+0x2e>
 8015fac:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8016124 <__ieee754_asinf+0x18c>
 8015fb0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8016128 <__ieee754_asinf+0x190>
 8015fb4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015fb8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8015fc0:	ecbd 8b04 	vpop	{d8-d9}
 8015fc4:	bd38      	pop	{r3, r4, r5, pc}
 8015fc6:	dd04      	ble.n	8015fd2 <__ieee754_asinf+0x3a>
 8015fc8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015fcc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015fd0:	e7f6      	b.n	8015fc0 <__ieee754_asinf+0x28>
 8015fd2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8015fd6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015fda:	da0b      	bge.n	8015ff4 <__ieee754_asinf+0x5c>
 8015fdc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 8015fe0:	da52      	bge.n	8016088 <__ieee754_asinf+0xf0>
 8015fe2:	eddf 7a52 	vldr	s15, [pc, #328]	; 801612c <__ieee754_asinf+0x194>
 8015fe6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8015fea:	eef4 7ae8 	vcmpe.f32	s15, s17
 8015fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ff2:	dce5      	bgt.n	8015fc0 <__ieee754_asinf+0x28>
 8015ff4:	f001 f92a 	bl	801724c <fabsf>
 8015ff8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8015ffc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8016000:	ee20 8a08 	vmul.f32	s16, s0, s16
 8016004:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8016130 <__ieee754_asinf+0x198>
 8016008:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8016134 <__ieee754_asinf+0x19c>
 801600c:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8016138 <__ieee754_asinf+0x1a0>
 8016010:	eea8 7a27 	vfma.f32	s14, s16, s15
 8016014:	eddf 7a49 	vldr	s15, [pc, #292]	; 801613c <__ieee754_asinf+0x1a4>
 8016018:	eee7 7a08 	vfma.f32	s15, s14, s16
 801601c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8016140 <__ieee754_asinf+0x1a8>
 8016020:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016024:	eddf 7a47 	vldr	s15, [pc, #284]	; 8016144 <__ieee754_asinf+0x1ac>
 8016028:	eee7 7a08 	vfma.f32	s15, s14, s16
 801602c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8016148 <__ieee754_asinf+0x1b0>
 8016030:	eea7 9a88 	vfma.f32	s18, s15, s16
 8016034:	eddf 7a45 	vldr	s15, [pc, #276]	; 801614c <__ieee754_asinf+0x1b4>
 8016038:	eee8 7a07 	vfma.f32	s15, s16, s14
 801603c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8016150 <__ieee754_asinf+0x1b8>
 8016040:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016044:	eddf 7a43 	vldr	s15, [pc, #268]	; 8016154 <__ieee754_asinf+0x1bc>
 8016048:	eee7 7a08 	vfma.f32	s15, s14, s16
 801604c:	eeb0 0a48 	vmov.f32	s0, s16
 8016050:	eee7 8a88 	vfma.f32	s17, s15, s16
 8016054:	f000 fa62 	bl	801651c <__ieee754_sqrtf>
 8016058:	4b3f      	ldr	r3, [pc, #252]	; (8016158 <__ieee754_asinf+0x1c0>)
 801605a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801605e:	429c      	cmp	r4, r3
 8016060:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8016064:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016068:	dd3d      	ble.n	80160e6 <__ieee754_asinf+0x14e>
 801606a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801606e:	eddf 7a3b 	vldr	s15, [pc, #236]	; 801615c <__ieee754_asinf+0x1c4>
 8016072:	eee0 7a26 	vfma.f32	s15, s0, s13
 8016076:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016128 <__ieee754_asinf+0x190>
 801607a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801607e:	2d00      	cmp	r5, #0
 8016080:	bfd8      	it	le
 8016082:	eeb1 0a40 	vnegle.f32	s0, s0
 8016086:	e79b      	b.n	8015fc0 <__ieee754_asinf+0x28>
 8016088:	ee60 7a00 	vmul.f32	s15, s0, s0
 801608c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8016130 <__ieee754_asinf+0x198>
 8016090:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8016134 <__ieee754_asinf+0x19c>
 8016094:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8016148 <__ieee754_asinf+0x1b0>
 8016098:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801609c:	eddf 6a27 	vldr	s13, [pc, #156]	; 801613c <__ieee754_asinf+0x1a4>
 80160a0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80160a4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8016140 <__ieee754_asinf+0x1a8>
 80160a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80160ac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8016144 <__ieee754_asinf+0x1ac>
 80160b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80160b4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8016138 <__ieee754_asinf+0x1a0>
 80160b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80160bc:	eddf 6a23 	vldr	s13, [pc, #140]	; 801614c <__ieee754_asinf+0x1b4>
 80160c0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80160c4:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8016150 <__ieee754_asinf+0x1b8>
 80160c8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80160cc:	eddf 6a21 	vldr	s13, [pc, #132]	; 8016154 <__ieee754_asinf+0x1bc>
 80160d0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80160d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80160d8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80160dc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80160e0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80160e4:	e76c      	b.n	8015fc0 <__ieee754_asinf+0x28>
 80160e6:	ee10 3a10 	vmov	r3, s0
 80160ea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80160ee:	f023 030f 	bic.w	r3, r3, #15
 80160f2:	ee07 3a10 	vmov	s14, r3
 80160f6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80160fa:	ee70 7a07 	vadd.f32	s15, s0, s14
 80160fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016102:	eec8 5a27 	vdiv.f32	s11, s16, s15
 8016106:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016124 <__ieee754_asinf+0x18c>
 801610a:	eee5 7ae6 	vfms.f32	s15, s11, s13
 801610e:	eed0 7a06 	vfnms.f32	s15, s0, s12
 8016112:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8016160 <__ieee754_asinf+0x1c8>
 8016116:	eeb0 6a40 	vmov.f32	s12, s0
 801611a:	eea7 6a66 	vfms.f32	s12, s14, s13
 801611e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016122:	e7aa      	b.n	801607a <__ieee754_asinf+0xe2>
 8016124:	b33bbd2e 	.word	0xb33bbd2e
 8016128:	3fc90fdb 	.word	0x3fc90fdb
 801612c:	7149f2ca 	.word	0x7149f2ca
 8016130:	3811ef08 	.word	0x3811ef08
 8016134:	3a4f7f04 	.word	0x3a4f7f04
 8016138:	3e2aaaab 	.word	0x3e2aaaab
 801613c:	bd241146 	.word	0xbd241146
 8016140:	3e4e0aa8 	.word	0x3e4e0aa8
 8016144:	bea6b090 	.word	0xbea6b090
 8016148:	3d9dc62e 	.word	0x3d9dc62e
 801614c:	bf303361 	.word	0xbf303361
 8016150:	4001572d 	.word	0x4001572d
 8016154:	c019d139 	.word	0xc019d139
 8016158:	3f799999 	.word	0x3f799999
 801615c:	333bbd2e 	.word	0x333bbd2e
 8016160:	3f490fdb 	.word	0x3f490fdb

08016164 <__ieee754_atan2f>:
 8016164:	ee10 2a90 	vmov	r2, s1
 8016168:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801616c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8016170:	b510      	push	{r4, lr}
 8016172:	eef0 7a40 	vmov.f32	s15, s0
 8016176:	dc06      	bgt.n	8016186 <__ieee754_atan2f+0x22>
 8016178:	ee10 0a10 	vmov	r0, s0
 801617c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8016180:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016184:	dd04      	ble.n	8016190 <__ieee754_atan2f+0x2c>
 8016186:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801618a:	eeb0 0a67 	vmov.f32	s0, s15
 801618e:	bd10      	pop	{r4, pc}
 8016190:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016194:	d103      	bne.n	801619e <__ieee754_atan2f+0x3a>
 8016196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801619a:	f000 bf83 	b.w	80170a4 <atanf>
 801619e:	1794      	asrs	r4, r2, #30
 80161a0:	f004 0402 	and.w	r4, r4, #2
 80161a4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80161a8:	b943      	cbnz	r3, 80161bc <__ieee754_atan2f+0x58>
 80161aa:	2c02      	cmp	r4, #2
 80161ac:	d05e      	beq.n	801626c <__ieee754_atan2f+0x108>
 80161ae:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8016280 <__ieee754_atan2f+0x11c>
 80161b2:	2c03      	cmp	r4, #3
 80161b4:	bf08      	it	eq
 80161b6:	eef0 7a47 	vmoveq.f32	s15, s14
 80161ba:	e7e6      	b.n	801618a <__ieee754_atan2f+0x26>
 80161bc:	b941      	cbnz	r1, 80161d0 <__ieee754_atan2f+0x6c>
 80161be:	eddf 7a31 	vldr	s15, [pc, #196]	; 8016284 <__ieee754_atan2f+0x120>
 80161c2:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8016288 <__ieee754_atan2f+0x124>
 80161c6:	2800      	cmp	r0, #0
 80161c8:	bfb8      	it	lt
 80161ca:	eef0 7a40 	vmovlt.f32	s15, s0
 80161ce:	e7dc      	b.n	801618a <__ieee754_atan2f+0x26>
 80161d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80161d4:	d110      	bne.n	80161f8 <__ieee754_atan2f+0x94>
 80161d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80161da:	f104 34ff 	add.w	r4, r4, #4294967295
 80161de:	d107      	bne.n	80161f0 <__ieee754_atan2f+0x8c>
 80161e0:	2c02      	cmp	r4, #2
 80161e2:	d846      	bhi.n	8016272 <__ieee754_atan2f+0x10e>
 80161e4:	4b29      	ldr	r3, [pc, #164]	; (801628c <__ieee754_atan2f+0x128>)
 80161e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80161ea:	edd4 7a00 	vldr	s15, [r4]
 80161ee:	e7cc      	b.n	801618a <__ieee754_atan2f+0x26>
 80161f0:	2c02      	cmp	r4, #2
 80161f2:	d841      	bhi.n	8016278 <__ieee754_atan2f+0x114>
 80161f4:	4b26      	ldr	r3, [pc, #152]	; (8016290 <__ieee754_atan2f+0x12c>)
 80161f6:	e7f6      	b.n	80161e6 <__ieee754_atan2f+0x82>
 80161f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80161fc:	d0df      	beq.n	80161be <__ieee754_atan2f+0x5a>
 80161fe:	1a5b      	subs	r3, r3, r1
 8016200:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8016204:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8016208:	da1a      	bge.n	8016240 <__ieee754_atan2f+0xdc>
 801620a:	2a00      	cmp	r2, #0
 801620c:	da01      	bge.n	8016212 <__ieee754_atan2f+0xae>
 801620e:	313c      	adds	r1, #60	; 0x3c
 8016210:	db19      	blt.n	8016246 <__ieee754_atan2f+0xe2>
 8016212:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8016216:	f001 f819 	bl	801724c <fabsf>
 801621a:	f000 ff43 	bl	80170a4 <atanf>
 801621e:	eef0 7a40 	vmov.f32	s15, s0
 8016222:	2c01      	cmp	r4, #1
 8016224:	d012      	beq.n	801624c <__ieee754_atan2f+0xe8>
 8016226:	2c02      	cmp	r4, #2
 8016228:	d017      	beq.n	801625a <__ieee754_atan2f+0xf6>
 801622a:	2c00      	cmp	r4, #0
 801622c:	d0ad      	beq.n	801618a <__ieee754_atan2f+0x26>
 801622e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8016294 <__ieee754_atan2f+0x130>
 8016232:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016236:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8016298 <__ieee754_atan2f+0x134>
 801623a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801623e:	e7a4      	b.n	801618a <__ieee754_atan2f+0x26>
 8016240:	eddf 7a10 	vldr	s15, [pc, #64]	; 8016284 <__ieee754_atan2f+0x120>
 8016244:	e7ed      	b.n	8016222 <__ieee754_atan2f+0xbe>
 8016246:	eddf 7a15 	vldr	s15, [pc, #84]	; 801629c <__ieee754_atan2f+0x138>
 801624a:	e7ea      	b.n	8016222 <__ieee754_atan2f+0xbe>
 801624c:	ee17 3a90 	vmov	r3, s15
 8016250:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016254:	ee07 3a90 	vmov	s15, r3
 8016258:	e797      	b.n	801618a <__ieee754_atan2f+0x26>
 801625a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8016294 <__ieee754_atan2f+0x130>
 801625e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016262:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8016298 <__ieee754_atan2f+0x134>
 8016266:	ee70 7a67 	vsub.f32	s15, s0, s15
 801626a:	e78e      	b.n	801618a <__ieee754_atan2f+0x26>
 801626c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8016298 <__ieee754_atan2f+0x134>
 8016270:	e78b      	b.n	801618a <__ieee754_atan2f+0x26>
 8016272:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80162a0 <__ieee754_atan2f+0x13c>
 8016276:	e788      	b.n	801618a <__ieee754_atan2f+0x26>
 8016278:	eddf 7a08 	vldr	s15, [pc, #32]	; 801629c <__ieee754_atan2f+0x138>
 801627c:	e785      	b.n	801618a <__ieee754_atan2f+0x26>
 801627e:	bf00      	nop
 8016280:	c0490fdb 	.word	0xc0490fdb
 8016284:	3fc90fdb 	.word	0x3fc90fdb
 8016288:	bfc90fdb 	.word	0xbfc90fdb
 801628c:	0801a440 	.word	0x0801a440
 8016290:	0801a44c 	.word	0x0801a44c
 8016294:	33bbbd2e 	.word	0x33bbbd2e
 8016298:	40490fdb 	.word	0x40490fdb
 801629c:	00000000 	.word	0x00000000
 80162a0:	3f490fdb 	.word	0x3f490fdb

080162a4 <__ieee754_rem_pio2f>:
 80162a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162a6:	ee10 6a10 	vmov	r6, s0
 80162aa:	4b8e      	ldr	r3, [pc, #568]	; (80164e4 <__ieee754_rem_pio2f+0x240>)
 80162ac:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80162b0:	429d      	cmp	r5, r3
 80162b2:	b087      	sub	sp, #28
 80162b4:	eef0 7a40 	vmov.f32	s15, s0
 80162b8:	4604      	mov	r4, r0
 80162ba:	dc05      	bgt.n	80162c8 <__ieee754_rem_pio2f+0x24>
 80162bc:	2300      	movs	r3, #0
 80162be:	ed80 0a00 	vstr	s0, [r0]
 80162c2:	6043      	str	r3, [r0, #4]
 80162c4:	2000      	movs	r0, #0
 80162c6:	e01a      	b.n	80162fe <__ieee754_rem_pio2f+0x5a>
 80162c8:	4b87      	ldr	r3, [pc, #540]	; (80164e8 <__ieee754_rem_pio2f+0x244>)
 80162ca:	429d      	cmp	r5, r3
 80162cc:	dc46      	bgt.n	801635c <__ieee754_rem_pio2f+0xb8>
 80162ce:	2e00      	cmp	r6, #0
 80162d0:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80164ec <__ieee754_rem_pio2f+0x248>
 80162d4:	4b86      	ldr	r3, [pc, #536]	; (80164f0 <__ieee754_rem_pio2f+0x24c>)
 80162d6:	f025 050f 	bic.w	r5, r5, #15
 80162da:	dd1f      	ble.n	801631c <__ieee754_rem_pio2f+0x78>
 80162dc:	429d      	cmp	r5, r3
 80162de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80162e2:	d00e      	beq.n	8016302 <__ieee754_rem_pio2f+0x5e>
 80162e4:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80164f4 <__ieee754_rem_pio2f+0x250>
 80162e8:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80162ec:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80162f0:	ed80 0a00 	vstr	s0, [r0]
 80162f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80162f8:	2001      	movs	r0, #1
 80162fa:	edc4 7a01 	vstr	s15, [r4, #4]
 80162fe:	b007      	add	sp, #28
 8016300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016302:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80164f8 <__ieee754_rem_pio2f+0x254>
 8016306:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80164fc <__ieee754_rem_pio2f+0x258>
 801630a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801630e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8016312:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016316:	edc0 6a00 	vstr	s13, [r0]
 801631a:	e7eb      	b.n	80162f4 <__ieee754_rem_pio2f+0x50>
 801631c:	429d      	cmp	r5, r3
 801631e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016322:	d00e      	beq.n	8016342 <__ieee754_rem_pio2f+0x9e>
 8016324:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80164f4 <__ieee754_rem_pio2f+0x250>
 8016328:	ee37 0a87 	vadd.f32	s0, s15, s14
 801632c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016330:	ed80 0a00 	vstr	s0, [r0]
 8016334:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016338:	f04f 30ff 	mov.w	r0, #4294967295
 801633c:	edc4 7a01 	vstr	s15, [r4, #4]
 8016340:	e7dd      	b.n	80162fe <__ieee754_rem_pio2f+0x5a>
 8016342:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80164f8 <__ieee754_rem_pio2f+0x254>
 8016346:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80164fc <__ieee754_rem_pio2f+0x258>
 801634a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801634e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8016352:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016356:	edc0 6a00 	vstr	s13, [r0]
 801635a:	e7eb      	b.n	8016334 <__ieee754_rem_pio2f+0x90>
 801635c:	4b68      	ldr	r3, [pc, #416]	; (8016500 <__ieee754_rem_pio2f+0x25c>)
 801635e:	429d      	cmp	r5, r3
 8016360:	dc72      	bgt.n	8016448 <__ieee754_rem_pio2f+0x1a4>
 8016362:	f000 ff73 	bl	801724c <fabsf>
 8016366:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8016504 <__ieee754_rem_pio2f+0x260>
 801636a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801636e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801637a:	ee17 0a90 	vmov	r0, s15
 801637e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80164ec <__ieee754_rem_pio2f+0x248>
 8016382:	eea7 0a67 	vfms.f32	s0, s14, s15
 8016386:	281f      	cmp	r0, #31
 8016388:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80164f4 <__ieee754_rem_pio2f+0x250>
 801638c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016390:	eeb1 6a47 	vneg.f32	s12, s14
 8016394:	ee70 6a67 	vsub.f32	s13, s0, s15
 8016398:	ee16 2a90 	vmov	r2, s13
 801639c:	dc1c      	bgt.n	80163d8 <__ieee754_rem_pio2f+0x134>
 801639e:	495a      	ldr	r1, [pc, #360]	; (8016508 <__ieee754_rem_pio2f+0x264>)
 80163a0:	1e47      	subs	r7, r0, #1
 80163a2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80163a6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80163aa:	428b      	cmp	r3, r1
 80163ac:	d014      	beq.n	80163d8 <__ieee754_rem_pio2f+0x134>
 80163ae:	6022      	str	r2, [r4, #0]
 80163b0:	ed94 7a00 	vldr	s14, [r4]
 80163b4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80163b8:	2e00      	cmp	r6, #0
 80163ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80163be:	ed84 0a01 	vstr	s0, [r4, #4]
 80163c2:	da9c      	bge.n	80162fe <__ieee754_rem_pio2f+0x5a>
 80163c4:	eeb1 7a47 	vneg.f32	s14, s14
 80163c8:	eeb1 0a40 	vneg.f32	s0, s0
 80163cc:	ed84 7a00 	vstr	s14, [r4]
 80163d0:	ed84 0a01 	vstr	s0, [r4, #4]
 80163d4:	4240      	negs	r0, r0
 80163d6:	e792      	b.n	80162fe <__ieee754_rem_pio2f+0x5a>
 80163d8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80163dc:	15eb      	asrs	r3, r5, #23
 80163de:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80163e2:	2d08      	cmp	r5, #8
 80163e4:	dde3      	ble.n	80163ae <__ieee754_rem_pio2f+0x10a>
 80163e6:	eddf 7a44 	vldr	s15, [pc, #272]	; 80164f8 <__ieee754_rem_pio2f+0x254>
 80163ea:	eef0 6a40 	vmov.f32	s13, s0
 80163ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80163f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80163f6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80163fa:	eddf 7a40 	vldr	s15, [pc, #256]	; 80164fc <__ieee754_rem_pio2f+0x258>
 80163fe:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8016402:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8016406:	eef0 7a40 	vmov.f32	s15, s0
 801640a:	ee15 2a90 	vmov	r2, s11
 801640e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8016412:	1a5b      	subs	r3, r3, r1
 8016414:	2b19      	cmp	r3, #25
 8016416:	dc04      	bgt.n	8016422 <__ieee754_rem_pio2f+0x17e>
 8016418:	edc4 5a00 	vstr	s11, [r4]
 801641c:	eeb0 0a66 	vmov.f32	s0, s13
 8016420:	e7c6      	b.n	80163b0 <__ieee754_rem_pio2f+0x10c>
 8016422:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801650c <__ieee754_rem_pio2f+0x268>
 8016426:	eeb0 0a66 	vmov.f32	s0, s13
 801642a:	eea6 0a25 	vfma.f32	s0, s12, s11
 801642e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8016432:	eddf 6a37 	vldr	s13, [pc, #220]	; 8016510 <__ieee754_rem_pio2f+0x26c>
 8016436:	eee6 7a25 	vfma.f32	s15, s12, s11
 801643a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801643e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8016442:	ed84 7a00 	vstr	s14, [r4]
 8016446:	e7b3      	b.n	80163b0 <__ieee754_rem_pio2f+0x10c>
 8016448:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801644c:	db06      	blt.n	801645c <__ieee754_rem_pio2f+0x1b8>
 801644e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016452:	edc0 7a01 	vstr	s15, [r0, #4]
 8016456:	edc0 7a00 	vstr	s15, [r0]
 801645a:	e733      	b.n	80162c4 <__ieee754_rem_pio2f+0x20>
 801645c:	15ea      	asrs	r2, r5, #23
 801645e:	3a86      	subs	r2, #134	; 0x86
 8016460:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8016464:	ee07 3a90 	vmov	s15, r3
 8016468:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801646c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8016514 <__ieee754_rem_pio2f+0x270>
 8016470:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016474:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016478:	ed8d 7a03 	vstr	s14, [sp, #12]
 801647c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016480:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8016484:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016488:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801648c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8016490:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016494:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801649c:	edcd 7a05 	vstr	s15, [sp, #20]
 80164a0:	d11e      	bne.n	80164e0 <__ieee754_rem_pio2f+0x23c>
 80164a2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80164a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164aa:	bf14      	ite	ne
 80164ac:	2302      	movne	r3, #2
 80164ae:	2301      	moveq	r3, #1
 80164b0:	4919      	ldr	r1, [pc, #100]	; (8016518 <__ieee754_rem_pio2f+0x274>)
 80164b2:	9101      	str	r1, [sp, #4]
 80164b4:	2102      	movs	r1, #2
 80164b6:	9100      	str	r1, [sp, #0]
 80164b8:	a803      	add	r0, sp, #12
 80164ba:	4621      	mov	r1, r4
 80164bc:	f000 f892 	bl	80165e4 <__kernel_rem_pio2f>
 80164c0:	2e00      	cmp	r6, #0
 80164c2:	f6bf af1c 	bge.w	80162fe <__ieee754_rem_pio2f+0x5a>
 80164c6:	edd4 7a00 	vldr	s15, [r4]
 80164ca:	eef1 7a67 	vneg.f32	s15, s15
 80164ce:	edc4 7a00 	vstr	s15, [r4]
 80164d2:	edd4 7a01 	vldr	s15, [r4, #4]
 80164d6:	eef1 7a67 	vneg.f32	s15, s15
 80164da:	edc4 7a01 	vstr	s15, [r4, #4]
 80164de:	e779      	b.n	80163d4 <__ieee754_rem_pio2f+0x130>
 80164e0:	2303      	movs	r3, #3
 80164e2:	e7e5      	b.n	80164b0 <__ieee754_rem_pio2f+0x20c>
 80164e4:	3f490fd8 	.word	0x3f490fd8
 80164e8:	4016cbe3 	.word	0x4016cbe3
 80164ec:	3fc90f80 	.word	0x3fc90f80
 80164f0:	3fc90fd0 	.word	0x3fc90fd0
 80164f4:	37354443 	.word	0x37354443
 80164f8:	37354400 	.word	0x37354400
 80164fc:	2e85a308 	.word	0x2e85a308
 8016500:	43490f80 	.word	0x43490f80
 8016504:	3f22f984 	.word	0x3f22f984
 8016508:	0801a458 	.word	0x0801a458
 801650c:	2e85a300 	.word	0x2e85a300
 8016510:	248d3132 	.word	0x248d3132
 8016514:	43800000 	.word	0x43800000
 8016518:	0801a4d8 	.word	0x0801a4d8

0801651c <__ieee754_sqrtf>:
 801651c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016520:	4770      	bx	lr
	...

08016524 <__kernel_cosf>:
 8016524:	ee10 3a10 	vmov	r3, s0
 8016528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801652c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016530:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8016534:	da05      	bge.n	8016542 <__kernel_cosf+0x1e>
 8016536:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801653a:	ee17 2a90 	vmov	r2, s15
 801653e:	2a00      	cmp	r2, #0
 8016540:	d03d      	beq.n	80165be <__kernel_cosf+0x9a>
 8016542:	ee60 5a00 	vmul.f32	s11, s0, s0
 8016546:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80165c4 <__kernel_cosf+0xa0>
 801654a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80165c8 <__kernel_cosf+0xa4>
 801654e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80165cc <__kernel_cosf+0xa8>
 8016552:	4a1f      	ldr	r2, [pc, #124]	; (80165d0 <__kernel_cosf+0xac>)
 8016554:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016558:	4293      	cmp	r3, r2
 801655a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80165d4 <__kernel_cosf+0xb0>
 801655e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016562:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80165d8 <__kernel_cosf+0xb4>
 8016566:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801656a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80165dc <__kernel_cosf+0xb8>
 801656e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8016572:	eeb0 7a66 	vmov.f32	s14, s13
 8016576:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801657a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801657e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8016582:	ee67 6a25 	vmul.f32	s13, s14, s11
 8016586:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801658a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801658e:	dc04      	bgt.n	801659a <__kernel_cosf+0x76>
 8016590:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8016594:	ee36 0a47 	vsub.f32	s0, s12, s14
 8016598:	4770      	bx	lr
 801659a:	4a11      	ldr	r2, [pc, #68]	; (80165e0 <__kernel_cosf+0xbc>)
 801659c:	4293      	cmp	r3, r2
 801659e:	bfda      	itte	le
 80165a0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80165a4:	ee06 3a90 	vmovle	s13, r3
 80165a8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80165ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80165b0:	ee36 0a66 	vsub.f32	s0, s12, s13
 80165b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80165b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80165bc:	4770      	bx	lr
 80165be:	eeb0 0a46 	vmov.f32	s0, s12
 80165c2:	4770      	bx	lr
 80165c4:	ad47d74e 	.word	0xad47d74e
 80165c8:	310f74f6 	.word	0x310f74f6
 80165cc:	3d2aaaab 	.word	0x3d2aaaab
 80165d0:	3e999999 	.word	0x3e999999
 80165d4:	b493f27c 	.word	0xb493f27c
 80165d8:	37d00d01 	.word	0x37d00d01
 80165dc:	bab60b61 	.word	0xbab60b61
 80165e0:	3f480000 	.word	0x3f480000

080165e4 <__kernel_rem_pio2f>:
 80165e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165e8:	ed2d 8b04 	vpush	{d8-d9}
 80165ec:	b0d7      	sub	sp, #348	; 0x15c
 80165ee:	4616      	mov	r6, r2
 80165f0:	4698      	mov	r8, r3
 80165f2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80165f4:	4bbb      	ldr	r3, [pc, #748]	; (80168e4 <__kernel_rem_pio2f+0x300>)
 80165f6:	9001      	str	r0, [sp, #4]
 80165f8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 80165fc:	1d33      	adds	r3, r6, #4
 80165fe:	460d      	mov	r5, r1
 8016600:	f108 39ff 	add.w	r9, r8, #4294967295
 8016604:	db29      	blt.n	801665a <__kernel_rem_pio2f+0x76>
 8016606:	1ef1      	subs	r1, r6, #3
 8016608:	bf48      	it	mi
 801660a:	1d31      	addmi	r1, r6, #4
 801660c:	10c9      	asrs	r1, r1, #3
 801660e:	1c4c      	adds	r4, r1, #1
 8016610:	00e3      	lsls	r3, r4, #3
 8016612:	9302      	str	r3, [sp, #8]
 8016614:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8016616:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 80168f4 <__kernel_rem_pio2f+0x310>
 801661a:	eba1 0009 	sub.w	r0, r1, r9
 801661e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8016622:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8016626:	eb07 0c09 	add.w	ip, r7, r9
 801662a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801662e:	2300      	movs	r3, #0
 8016630:	4563      	cmp	r3, ip
 8016632:	dd14      	ble.n	801665e <__kernel_rem_pio2f+0x7a>
 8016634:	ab1a      	add	r3, sp, #104	; 0x68
 8016636:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801663a:	46cc      	mov	ip, r9
 801663c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8016640:	f1c8 0b01 	rsb	fp, r8, #1
 8016644:	eb0b 020c 	add.w	r2, fp, ip
 8016648:	4297      	cmp	r7, r2
 801664a:	db27      	blt.n	801669c <__kernel_rem_pio2f+0xb8>
 801664c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8016650:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80168f4 <__kernel_rem_pio2f+0x310>
 8016654:	4618      	mov	r0, r3
 8016656:	2200      	movs	r2, #0
 8016658:	e016      	b.n	8016688 <__kernel_rem_pio2f+0xa4>
 801665a:	2100      	movs	r1, #0
 801665c:	e7d7      	b.n	801660e <__kernel_rem_pio2f+0x2a>
 801665e:	42d8      	cmn	r0, r3
 8016660:	bf5d      	ittte	pl
 8016662:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8016666:	ee07 2a90 	vmovpl	s15, r2
 801666a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801666e:	eef0 7a47 	vmovmi.f32	s15, s14
 8016672:	ecea 7a01 	vstmia	sl!, {s15}
 8016676:	3301      	adds	r3, #1
 8016678:	e7da      	b.n	8016630 <__kernel_rem_pio2f+0x4c>
 801667a:	ecfe 6a01 	vldmia	lr!, {s13}
 801667e:	ed90 7a00 	vldr	s14, [r0]
 8016682:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016686:	3201      	adds	r2, #1
 8016688:	454a      	cmp	r2, r9
 801668a:	f1a0 0004 	sub.w	r0, r0, #4
 801668e:	ddf4      	ble.n	801667a <__kernel_rem_pio2f+0x96>
 8016690:	ecea 7a01 	vstmia	sl!, {s15}
 8016694:	3304      	adds	r3, #4
 8016696:	f10c 0c01 	add.w	ip, ip, #1
 801669a:	e7d3      	b.n	8016644 <__kernel_rem_pio2f+0x60>
 801669c:	ab06      	add	r3, sp, #24
 801669e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80166a2:	9304      	str	r3, [sp, #16]
 80166a4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80166a6:	eddf 8a92 	vldr	s17, [pc, #584]	; 80168f0 <__kernel_rem_pio2f+0x30c>
 80166aa:	ed9f 9a90 	vldr	s18, [pc, #576]	; 80168ec <__kernel_rem_pio2f+0x308>
 80166ae:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80166b2:	9303      	str	r3, [sp, #12]
 80166b4:	46ba      	mov	sl, r7
 80166b6:	ab56      	add	r3, sp, #344	; 0x158
 80166b8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80166bc:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80166c0:	ab06      	add	r3, sp, #24
 80166c2:	4618      	mov	r0, r3
 80166c4:	4652      	mov	r2, sl
 80166c6:	2a00      	cmp	r2, #0
 80166c8:	dc51      	bgt.n	801676e <__kernel_rem_pio2f+0x18a>
 80166ca:	4620      	mov	r0, r4
 80166cc:	9305      	str	r3, [sp, #20]
 80166ce:	f000 fe0d 	bl	80172ec <scalbnf>
 80166d2:	eeb0 8a40 	vmov.f32	s16, s0
 80166d6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80166da:	ee28 0a00 	vmul.f32	s0, s16, s0
 80166de:	f000 fdbd 	bl	801725c <floorf>
 80166e2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80166e6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80166ea:	2c00      	cmp	r4, #0
 80166ec:	9b05      	ldr	r3, [sp, #20]
 80166ee:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80166f2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80166f6:	edcd 7a00 	vstr	s15, [sp]
 80166fa:	ee38 8a40 	vsub.f32	s16, s16, s0
 80166fe:	dd4b      	ble.n	8016798 <__kernel_rem_pio2f+0x1b4>
 8016700:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016704:	aa06      	add	r2, sp, #24
 8016706:	f1c4 0e08 	rsb	lr, r4, #8
 801670a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801670e:	ee17 1a90 	vmov	r1, s15
 8016712:	fa42 f00e 	asr.w	r0, r2, lr
 8016716:	4401      	add	r1, r0
 8016718:	9100      	str	r1, [sp, #0]
 801671a:	fa00 f00e 	lsl.w	r0, r0, lr
 801671e:	a906      	add	r1, sp, #24
 8016720:	1a12      	subs	r2, r2, r0
 8016722:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8016726:	f1c4 0007 	rsb	r0, r4, #7
 801672a:	fa42 fb00 	asr.w	fp, r2, r0
 801672e:	f1bb 0f00 	cmp.w	fp, #0
 8016732:	dd43      	ble.n	80167bc <__kernel_rem_pio2f+0x1d8>
 8016734:	9a00      	ldr	r2, [sp, #0]
 8016736:	f04f 0e00 	mov.w	lr, #0
 801673a:	3201      	adds	r2, #1
 801673c:	9200      	str	r2, [sp, #0]
 801673e:	4670      	mov	r0, lr
 8016740:	45f2      	cmp	sl, lr
 8016742:	dc6c      	bgt.n	801681e <__kernel_rem_pio2f+0x23a>
 8016744:	2c00      	cmp	r4, #0
 8016746:	dd04      	ble.n	8016752 <__kernel_rem_pio2f+0x16e>
 8016748:	2c01      	cmp	r4, #1
 801674a:	d079      	beq.n	8016840 <__kernel_rem_pio2f+0x25c>
 801674c:	2c02      	cmp	r4, #2
 801674e:	f000 8082 	beq.w	8016856 <__kernel_rem_pio2f+0x272>
 8016752:	f1bb 0f02 	cmp.w	fp, #2
 8016756:	d131      	bne.n	80167bc <__kernel_rem_pio2f+0x1d8>
 8016758:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801675c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8016760:	b360      	cbz	r0, 80167bc <__kernel_rem_pio2f+0x1d8>
 8016762:	4620      	mov	r0, r4
 8016764:	f000 fdc2 	bl	80172ec <scalbnf>
 8016768:	ee38 8a40 	vsub.f32	s16, s16, s0
 801676c:	e026      	b.n	80167bc <__kernel_rem_pio2f+0x1d8>
 801676e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8016772:	3a01      	subs	r2, #1
 8016774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016778:	a942      	add	r1, sp, #264	; 0x108
 801677a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801677e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8016782:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8016786:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801678a:	eca0 0a01 	vstmia	r0!, {s0}
 801678e:	ed9c 0a00 	vldr	s0, [ip]
 8016792:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016796:	e796      	b.n	80166c6 <__kernel_rem_pio2f+0xe2>
 8016798:	d107      	bne.n	80167aa <__kernel_rem_pio2f+0x1c6>
 801679a:	f10a 32ff 	add.w	r2, sl, #4294967295
 801679e:	a906      	add	r1, sp, #24
 80167a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80167a4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80167a8:	e7c1      	b.n	801672e <__kernel_rem_pio2f+0x14a>
 80167aa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80167ae:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80167b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b6:	da2f      	bge.n	8016818 <__kernel_rem_pio2f+0x234>
 80167b8:	f04f 0b00 	mov.w	fp, #0
 80167bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80167c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c4:	f040 8098 	bne.w	80168f8 <__kernel_rem_pio2f+0x314>
 80167c8:	f10a 33ff 	add.w	r3, sl, #4294967295
 80167cc:	469c      	mov	ip, r3
 80167ce:	2200      	movs	r2, #0
 80167d0:	45bc      	cmp	ip, r7
 80167d2:	da48      	bge.n	8016866 <__kernel_rem_pio2f+0x282>
 80167d4:	2a00      	cmp	r2, #0
 80167d6:	d05f      	beq.n	8016898 <__kernel_rem_pio2f+0x2b4>
 80167d8:	aa06      	add	r2, sp, #24
 80167da:	3c08      	subs	r4, #8
 80167dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80167e0:	2900      	cmp	r1, #0
 80167e2:	d07d      	beq.n	80168e0 <__kernel_rem_pio2f+0x2fc>
 80167e4:	4620      	mov	r0, r4
 80167e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80167ea:	9301      	str	r3, [sp, #4]
 80167ec:	f000 fd7e 	bl	80172ec <scalbnf>
 80167f0:	9b01      	ldr	r3, [sp, #4]
 80167f2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80168f0 <__kernel_rem_pio2f+0x30c>
 80167f6:	4619      	mov	r1, r3
 80167f8:	2900      	cmp	r1, #0
 80167fa:	f280 80af 	bge.w	801695c <__kernel_rem_pio2f+0x378>
 80167fe:	4618      	mov	r0, r3
 8016800:	2400      	movs	r4, #0
 8016802:	2800      	cmp	r0, #0
 8016804:	f2c0 80d0 	blt.w	80169a8 <__kernel_rem_pio2f+0x3c4>
 8016808:	a942      	add	r1, sp, #264	; 0x108
 801680a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801680e:	4a36      	ldr	r2, [pc, #216]	; (80168e8 <__kernel_rem_pio2f+0x304>)
 8016810:	eddf 7a38 	vldr	s15, [pc, #224]	; 80168f4 <__kernel_rem_pio2f+0x310>
 8016814:	2100      	movs	r1, #0
 8016816:	e0bb      	b.n	8016990 <__kernel_rem_pio2f+0x3ac>
 8016818:	f04f 0b02 	mov.w	fp, #2
 801681c:	e78a      	b.n	8016734 <__kernel_rem_pio2f+0x150>
 801681e:	681a      	ldr	r2, [r3, #0]
 8016820:	b948      	cbnz	r0, 8016836 <__kernel_rem_pio2f+0x252>
 8016822:	b11a      	cbz	r2, 801682c <__kernel_rem_pio2f+0x248>
 8016824:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8016828:	601a      	str	r2, [r3, #0]
 801682a:	2201      	movs	r2, #1
 801682c:	f10e 0e01 	add.w	lr, lr, #1
 8016830:	3304      	adds	r3, #4
 8016832:	4610      	mov	r0, r2
 8016834:	e784      	b.n	8016740 <__kernel_rem_pio2f+0x15c>
 8016836:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801683a:	601a      	str	r2, [r3, #0]
 801683c:	4602      	mov	r2, r0
 801683e:	e7f5      	b.n	801682c <__kernel_rem_pio2f+0x248>
 8016840:	f10a 3cff 	add.w	ip, sl, #4294967295
 8016844:	ab06      	add	r3, sp, #24
 8016846:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801684a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801684e:	aa06      	add	r2, sp, #24
 8016850:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8016854:	e77d      	b.n	8016752 <__kernel_rem_pio2f+0x16e>
 8016856:	f10a 3cff 	add.w	ip, sl, #4294967295
 801685a:	ab06      	add	r3, sp, #24
 801685c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8016860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016864:	e7f3      	b.n	801684e <__kernel_rem_pio2f+0x26a>
 8016866:	a906      	add	r1, sp, #24
 8016868:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801686c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016870:	4302      	orrs	r2, r0
 8016872:	e7ad      	b.n	80167d0 <__kernel_rem_pio2f+0x1ec>
 8016874:	3001      	adds	r0, #1
 8016876:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801687a:	2a00      	cmp	r2, #0
 801687c:	d0fa      	beq.n	8016874 <__kernel_rem_pio2f+0x290>
 801687e:	a91a      	add	r1, sp, #104	; 0x68
 8016880:	eb0a 0208 	add.w	r2, sl, r8
 8016884:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8016888:	f10a 0301 	add.w	r3, sl, #1
 801688c:	eb0a 0100 	add.w	r1, sl, r0
 8016890:	4299      	cmp	r1, r3
 8016892:	da04      	bge.n	801689e <__kernel_rem_pio2f+0x2ba>
 8016894:	468a      	mov	sl, r1
 8016896:	e70e      	b.n	80166b6 <__kernel_rem_pio2f+0xd2>
 8016898:	9b04      	ldr	r3, [sp, #16]
 801689a:	2001      	movs	r0, #1
 801689c:	e7eb      	b.n	8016876 <__kernel_rem_pio2f+0x292>
 801689e:	9803      	ldr	r0, [sp, #12]
 80168a0:	f8dd c004 	ldr.w	ip, [sp, #4]
 80168a4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80168a8:	9000      	str	r0, [sp, #0]
 80168aa:	ee07 0a90 	vmov	s15, r0
 80168ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80168b2:	2000      	movs	r0, #0
 80168b4:	ece2 7a01 	vstmia	r2!, {s15}
 80168b8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80168f4 <__kernel_rem_pio2f+0x310>
 80168bc:	4696      	mov	lr, r2
 80168be:	4548      	cmp	r0, r9
 80168c0:	dd06      	ble.n	80168d0 <__kernel_rem_pio2f+0x2ec>
 80168c2:	a842      	add	r0, sp, #264	; 0x108
 80168c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80168c8:	edc0 7a00 	vstr	s15, [r0]
 80168cc:	3301      	adds	r3, #1
 80168ce:	e7df      	b.n	8016890 <__kernel_rem_pio2f+0x2ac>
 80168d0:	ecfc 6a01 	vldmia	ip!, {s13}
 80168d4:	ed3e 7a01 	vldmdb	lr!, {s14}
 80168d8:	3001      	adds	r0, #1
 80168da:	eee6 7a87 	vfma.f32	s15, s13, s14
 80168de:	e7ee      	b.n	80168be <__kernel_rem_pio2f+0x2da>
 80168e0:	3b01      	subs	r3, #1
 80168e2:	e779      	b.n	80167d8 <__kernel_rem_pio2f+0x1f4>
 80168e4:	0801a81c 	.word	0x0801a81c
 80168e8:	0801a7f0 	.word	0x0801a7f0
 80168ec:	43800000 	.word	0x43800000
 80168f0:	3b800000 	.word	0x3b800000
 80168f4:	00000000 	.word	0x00000000
 80168f8:	9b02      	ldr	r3, [sp, #8]
 80168fa:	eeb0 0a48 	vmov.f32	s0, s16
 80168fe:	1b98      	subs	r0, r3, r6
 8016900:	f000 fcf4 	bl	80172ec <scalbnf>
 8016904:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80168ec <__kernel_rem_pio2f+0x308>
 8016908:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016910:	db1b      	blt.n	801694a <__kernel_rem_pio2f+0x366>
 8016912:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80168f0 <__kernel_rem_pio2f+0x30c>
 8016916:	ee60 7a27 	vmul.f32	s15, s0, s15
 801691a:	aa06      	add	r2, sp, #24
 801691c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016920:	a906      	add	r1, sp, #24
 8016922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016926:	3408      	adds	r4, #8
 8016928:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801692c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016930:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8016934:	ee10 3a10 	vmov	r3, s0
 8016938:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801693c:	ee17 2a90 	vmov	r2, s15
 8016940:	f10a 0301 	add.w	r3, sl, #1
 8016944:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016948:	e74c      	b.n	80167e4 <__kernel_rem_pio2f+0x200>
 801694a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801694e:	aa06      	add	r2, sp, #24
 8016950:	ee10 3a10 	vmov	r3, s0
 8016954:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8016958:	4653      	mov	r3, sl
 801695a:	e743      	b.n	80167e4 <__kernel_rem_pio2f+0x200>
 801695c:	aa42      	add	r2, sp, #264	; 0x108
 801695e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016962:	aa06      	add	r2, sp, #24
 8016964:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8016968:	9201      	str	r2, [sp, #4]
 801696a:	ee07 2a90 	vmov	s15, r2
 801696e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016972:	3901      	subs	r1, #1
 8016974:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016978:	ee20 0a07 	vmul.f32	s0, s0, s14
 801697c:	edc0 7a00 	vstr	s15, [r0]
 8016980:	e73a      	b.n	80167f8 <__kernel_rem_pio2f+0x214>
 8016982:	ecf2 6a01 	vldmia	r2!, {s13}
 8016986:	ecb6 7a01 	vldmia	r6!, {s14}
 801698a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801698e:	3101      	adds	r1, #1
 8016990:	42b9      	cmp	r1, r7
 8016992:	dc01      	bgt.n	8016998 <__kernel_rem_pio2f+0x3b4>
 8016994:	428c      	cmp	r4, r1
 8016996:	daf4      	bge.n	8016982 <__kernel_rem_pio2f+0x39e>
 8016998:	aa56      	add	r2, sp, #344	; 0x158
 801699a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801699e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80169a2:	3801      	subs	r0, #1
 80169a4:	3401      	adds	r4, #1
 80169a6:	e72c      	b.n	8016802 <__kernel_rem_pio2f+0x21e>
 80169a8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80169aa:	2a02      	cmp	r2, #2
 80169ac:	dc0a      	bgt.n	80169c4 <__kernel_rem_pio2f+0x3e0>
 80169ae:	2a00      	cmp	r2, #0
 80169b0:	dc61      	bgt.n	8016a76 <__kernel_rem_pio2f+0x492>
 80169b2:	d03c      	beq.n	8016a2e <__kernel_rem_pio2f+0x44a>
 80169b4:	9b00      	ldr	r3, [sp, #0]
 80169b6:	f003 0007 	and.w	r0, r3, #7
 80169ba:	b057      	add	sp, #348	; 0x15c
 80169bc:	ecbd 8b04 	vpop	{d8-d9}
 80169c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80169c6:	2a03      	cmp	r2, #3
 80169c8:	d1f4      	bne.n	80169b4 <__kernel_rem_pio2f+0x3d0>
 80169ca:	aa2e      	add	r2, sp, #184	; 0xb8
 80169cc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80169d0:	4608      	mov	r0, r1
 80169d2:	461c      	mov	r4, r3
 80169d4:	2c00      	cmp	r4, #0
 80169d6:	f1a0 0004 	sub.w	r0, r0, #4
 80169da:	dc59      	bgt.n	8016a90 <__kernel_rem_pio2f+0x4ac>
 80169dc:	4618      	mov	r0, r3
 80169de:	2801      	cmp	r0, #1
 80169e0:	f1a1 0104 	sub.w	r1, r1, #4
 80169e4:	dc64      	bgt.n	8016ab0 <__kernel_rem_pio2f+0x4cc>
 80169e6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 80168f4 <__kernel_rem_pio2f+0x310>
 80169ea:	2b01      	cmp	r3, #1
 80169ec:	dc70      	bgt.n	8016ad0 <__kernel_rem_pio2f+0x4ec>
 80169ee:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80169f2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 80169f6:	f1bb 0f00 	cmp.w	fp, #0
 80169fa:	d172      	bne.n	8016ae2 <__kernel_rem_pio2f+0x4fe>
 80169fc:	edc5 6a00 	vstr	s13, [r5]
 8016a00:	ed85 7a01 	vstr	s14, [r5, #4]
 8016a04:	edc5 7a02 	vstr	s15, [r5, #8]
 8016a08:	e7d4      	b.n	80169b4 <__kernel_rem_pio2f+0x3d0>
 8016a0a:	aa2e      	add	r2, sp, #184	; 0xb8
 8016a0c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016a10:	ed91 7a00 	vldr	s14, [r1]
 8016a14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a18:	3b01      	subs	r3, #1
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	daf5      	bge.n	8016a0a <__kernel_rem_pio2f+0x426>
 8016a1e:	f1bb 0f00 	cmp.w	fp, #0
 8016a22:	d001      	beq.n	8016a28 <__kernel_rem_pio2f+0x444>
 8016a24:	eef1 7a67 	vneg.f32	s15, s15
 8016a28:	edc5 7a00 	vstr	s15, [r5]
 8016a2c:	e7c2      	b.n	80169b4 <__kernel_rem_pio2f+0x3d0>
 8016a2e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80168f4 <__kernel_rem_pio2f+0x310>
 8016a32:	e7f2      	b.n	8016a1a <__kernel_rem_pio2f+0x436>
 8016a34:	aa2e      	add	r2, sp, #184	; 0xb8
 8016a36:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8016a3a:	edd0 7a00 	vldr	s15, [r0]
 8016a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016a42:	3901      	subs	r1, #1
 8016a44:	2900      	cmp	r1, #0
 8016a46:	daf5      	bge.n	8016a34 <__kernel_rem_pio2f+0x450>
 8016a48:	f1bb 0f00 	cmp.w	fp, #0
 8016a4c:	d017      	beq.n	8016a7e <__kernel_rem_pio2f+0x49a>
 8016a4e:	eef1 7a47 	vneg.f32	s15, s14
 8016a52:	edc5 7a00 	vstr	s15, [r5]
 8016a56:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8016a5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016a5e:	a82f      	add	r0, sp, #188	; 0xbc
 8016a60:	2101      	movs	r1, #1
 8016a62:	428b      	cmp	r3, r1
 8016a64:	da0e      	bge.n	8016a84 <__kernel_rem_pio2f+0x4a0>
 8016a66:	f1bb 0f00 	cmp.w	fp, #0
 8016a6a:	d001      	beq.n	8016a70 <__kernel_rem_pio2f+0x48c>
 8016a6c:	eef1 7a67 	vneg.f32	s15, s15
 8016a70:	edc5 7a01 	vstr	s15, [r5, #4]
 8016a74:	e79e      	b.n	80169b4 <__kernel_rem_pio2f+0x3d0>
 8016a76:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 80168f4 <__kernel_rem_pio2f+0x310>
 8016a7a:	4619      	mov	r1, r3
 8016a7c:	e7e2      	b.n	8016a44 <__kernel_rem_pio2f+0x460>
 8016a7e:	eef0 7a47 	vmov.f32	s15, s14
 8016a82:	e7e6      	b.n	8016a52 <__kernel_rem_pio2f+0x46e>
 8016a84:	ecb0 7a01 	vldmia	r0!, {s14}
 8016a88:	3101      	adds	r1, #1
 8016a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016a8e:	e7e8      	b.n	8016a62 <__kernel_rem_pio2f+0x47e>
 8016a90:	edd0 7a00 	vldr	s15, [r0]
 8016a94:	edd0 6a01 	vldr	s13, [r0, #4]
 8016a98:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016a9c:	3c01      	subs	r4, #1
 8016a9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016aa2:	ed80 7a00 	vstr	s14, [r0]
 8016aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016aaa:	edc0 7a01 	vstr	s15, [r0, #4]
 8016aae:	e791      	b.n	80169d4 <__kernel_rem_pio2f+0x3f0>
 8016ab0:	edd1 7a00 	vldr	s15, [r1]
 8016ab4:	edd1 6a01 	vldr	s13, [r1, #4]
 8016ab8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8016abc:	3801      	subs	r0, #1
 8016abe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ac2:	ed81 7a00 	vstr	s14, [r1]
 8016ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016aca:	edc1 7a01 	vstr	s15, [r1, #4]
 8016ace:	e786      	b.n	80169de <__kernel_rem_pio2f+0x3fa>
 8016ad0:	aa2e      	add	r2, sp, #184	; 0xb8
 8016ad2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8016ad6:	ed91 7a00 	vldr	s14, [r1]
 8016ada:	3b01      	subs	r3, #1
 8016adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016ae0:	e783      	b.n	80169ea <__kernel_rem_pio2f+0x406>
 8016ae2:	eef1 6a66 	vneg.f32	s13, s13
 8016ae6:	eeb1 7a47 	vneg.f32	s14, s14
 8016aea:	edc5 6a00 	vstr	s13, [r5]
 8016aee:	ed85 7a01 	vstr	s14, [r5, #4]
 8016af2:	eef1 7a67 	vneg.f32	s15, s15
 8016af6:	e785      	b.n	8016a04 <__kernel_rem_pio2f+0x420>

08016af8 <__kernel_sinf>:
 8016af8:	ee10 3a10 	vmov	r3, s0
 8016afc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016b00:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8016b04:	da04      	bge.n	8016b10 <__kernel_sinf+0x18>
 8016b06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8016b0a:	ee17 3a90 	vmov	r3, s15
 8016b0e:	b35b      	cbz	r3, 8016b68 <__kernel_sinf+0x70>
 8016b10:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016b14:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016b6c <__kernel_sinf+0x74>
 8016b18:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8016b70 <__kernel_sinf+0x78>
 8016b1c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016b20:	eddf 7a14 	vldr	s15, [pc, #80]	; 8016b74 <__kernel_sinf+0x7c>
 8016b24:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016b28:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8016b78 <__kernel_sinf+0x80>
 8016b2c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016b30:	eddf 7a12 	vldr	s15, [pc, #72]	; 8016b7c <__kernel_sinf+0x84>
 8016b34:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016b38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016b3c:	b930      	cbnz	r0, 8016b4c <__kernel_sinf+0x54>
 8016b3e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8016b80 <__kernel_sinf+0x88>
 8016b42:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016b46:	eea6 0a26 	vfma.f32	s0, s12, s13
 8016b4a:	4770      	bx	lr
 8016b4c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8016b50:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8016b54:	eee0 7a86 	vfma.f32	s15, s1, s12
 8016b58:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8016b5c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8016b84 <__kernel_sinf+0x8c>
 8016b60:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8016b64:	ee30 0a60 	vsub.f32	s0, s0, s1
 8016b68:	4770      	bx	lr
 8016b6a:	bf00      	nop
 8016b6c:	2f2ec9d3 	.word	0x2f2ec9d3
 8016b70:	b2d72f34 	.word	0xb2d72f34
 8016b74:	3638ef1b 	.word	0x3638ef1b
 8016b78:	b9500d01 	.word	0xb9500d01
 8016b7c:	3c088889 	.word	0x3c088889
 8016b80:	be2aaaab 	.word	0xbe2aaaab
 8016b84:	3e2aaaab 	.word	0x3e2aaaab

08016b88 <__kernel_tanf>:
 8016b88:	b508      	push	{r3, lr}
 8016b8a:	ee10 3a10 	vmov	r3, s0
 8016b8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016b92:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8016b96:	eef0 7a40 	vmov.f32	s15, s0
 8016b9a:	da17      	bge.n	8016bcc <__kernel_tanf+0x44>
 8016b9c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016ba0:	ee17 1a10 	vmov	r1, s14
 8016ba4:	bb41      	cbnz	r1, 8016bf8 <__kernel_tanf+0x70>
 8016ba6:	1c43      	adds	r3, r0, #1
 8016ba8:	4313      	orrs	r3, r2
 8016baa:	d108      	bne.n	8016bbe <__kernel_tanf+0x36>
 8016bac:	f000 fb4e 	bl	801724c <fabsf>
 8016bb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016bb4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8016bbc:	bd08      	pop	{r3, pc}
 8016bbe:	2801      	cmp	r0, #1
 8016bc0:	d0fa      	beq.n	8016bb8 <__kernel_tanf+0x30>
 8016bc2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8016bc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016bca:	e7f5      	b.n	8016bb8 <__kernel_tanf+0x30>
 8016bcc:	494d      	ldr	r1, [pc, #308]	; (8016d04 <__kernel_tanf+0x17c>)
 8016bce:	428a      	cmp	r2, r1
 8016bd0:	db12      	blt.n	8016bf8 <__kernel_tanf+0x70>
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	bfb8      	it	lt
 8016bd6:	eef1 7a40 	vneglt.f32	s15, s0
 8016bda:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8016d08 <__kernel_tanf+0x180>
 8016bde:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016be2:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016d0c <__kernel_tanf+0x184>
 8016be6:	bfb8      	it	lt
 8016be8:	eef1 0a60 	vneglt.f32	s1, s1
 8016bec:	ee70 0a60 	vsub.f32	s1, s0, s1
 8016bf0:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8016bf4:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016d10 <__kernel_tanf+0x188>
 8016bf8:	eddf 5a46 	vldr	s11, [pc, #280]	; 8016d14 <__kernel_tanf+0x18c>
 8016bfc:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8016d18 <__kernel_tanf+0x190>
 8016c00:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8016d1c <__kernel_tanf+0x194>
 8016c04:	493f      	ldr	r1, [pc, #252]	; (8016d04 <__kernel_tanf+0x17c>)
 8016c06:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8016c0a:	428a      	cmp	r2, r1
 8016c0c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8016c10:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016c14:	eddf 5a42 	vldr	s11, [pc, #264]	; 8016d20 <__kernel_tanf+0x198>
 8016c18:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016c1c:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8016d24 <__kernel_tanf+0x19c>
 8016c20:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016c24:	eddf 5a40 	vldr	s11, [pc, #256]	; 8016d28 <__kernel_tanf+0x1a0>
 8016c28:	eee6 5a07 	vfma.f32	s11, s12, s14
 8016c2c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8016d2c <__kernel_tanf+0x1a4>
 8016c30:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016c34:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8016d30 <__kernel_tanf+0x1a8>
 8016c38:	eee7 5a05 	vfma.f32	s11, s14, s10
 8016c3c:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8016d34 <__kernel_tanf+0x1ac>
 8016c40:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016c44:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8016d38 <__kernel_tanf+0x1b0>
 8016c48:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016c4c:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8016d3c <__kernel_tanf+0x1b4>
 8016c50:	eea5 5a87 	vfma.f32	s10, s11, s14
 8016c54:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8016d40 <__kernel_tanf+0x1b8>
 8016c58:	eee5 5a07 	vfma.f32	s11, s10, s14
 8016c5c:	eeb0 7a65 	vmov.f32	s14, s11
 8016c60:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016c64:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8016c68:	eeb0 7a46 	vmov.f32	s14, s12
 8016c6c:	eeb0 6a60 	vmov.f32	s12, s1
 8016c70:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016c74:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8016d44 <__kernel_tanf+0x1bc>
 8016c78:	eee6 0a26 	vfma.f32	s1, s12, s13
 8016c7c:	eee5 0a87 	vfma.f32	s1, s11, s14
 8016c80:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8016c84:	db1d      	blt.n	8016cc2 <__kernel_tanf+0x13a>
 8016c86:	ee06 0a90 	vmov	s13, r0
 8016c8a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8016c8e:	ee27 6a07 	vmul.f32	s12, s14, s14
 8016c92:	ee37 7a00 	vadd.f32	s14, s14, s0
 8016c96:	179b      	asrs	r3, r3, #30
 8016c98:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8016c9c:	f003 0302 	and.w	r3, r3, #2
 8016ca0:	f1c3 0301 	rsb	r3, r3, #1
 8016ca4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016ca8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8016cac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016cb0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016cb4:	ee07 3a90 	vmov	s15, r3
 8016cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016cbc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016cc0:	e77a      	b.n	8016bb8 <__kernel_tanf+0x30>
 8016cc2:	2801      	cmp	r0, #1
 8016cc4:	d01b      	beq.n	8016cfe <__kernel_tanf+0x176>
 8016cc6:	4b20      	ldr	r3, [pc, #128]	; (8016d48 <__kernel_tanf+0x1c0>)
 8016cc8:	ee17 2a10 	vmov	r2, s14
 8016ccc:	401a      	ands	r2, r3
 8016cce:	ee06 2a10 	vmov	s12, r2
 8016cd2:	ee76 7a67 	vsub.f32	s15, s12, s15
 8016cd6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016cda:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016cde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8016ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016ce6:	ee16 2a90 	vmov	r2, s13
 8016cea:	4013      	ands	r3, r2
 8016cec:	ee07 3a90 	vmov	s15, r3
 8016cf0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8016cf4:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016cf8:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016cfc:	e75c      	b.n	8016bb8 <__kernel_tanf+0x30>
 8016cfe:	eef0 7a47 	vmov.f32	s15, s14
 8016d02:	e759      	b.n	8016bb8 <__kernel_tanf+0x30>
 8016d04:	3f2ca140 	.word	0x3f2ca140
 8016d08:	3f490fda 	.word	0x3f490fda
 8016d0c:	33222168 	.word	0x33222168
 8016d10:	00000000 	.word	0x00000000
 8016d14:	b79bae5f 	.word	0xb79bae5f
 8016d18:	38a3f445 	.word	0x38a3f445
 8016d1c:	37d95384 	.word	0x37d95384
 8016d20:	3a1a26c8 	.word	0x3a1a26c8
 8016d24:	3b6b6916 	.word	0x3b6b6916
 8016d28:	3cb327a4 	.word	0x3cb327a4
 8016d2c:	3e088889 	.word	0x3e088889
 8016d30:	3895c07a 	.word	0x3895c07a
 8016d34:	398137b9 	.word	0x398137b9
 8016d38:	3abede48 	.word	0x3abede48
 8016d3c:	3c11371f 	.word	0x3c11371f
 8016d40:	3d5d0dd1 	.word	0x3d5d0dd1
 8016d44:	3eaaaaab 	.word	0x3eaaaaab
 8016d48:	fffff000 	.word	0xfffff000
 8016d4c:	00000000 	.word	0x00000000

08016d50 <atan>:
 8016d50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d54:	ec55 4b10 	vmov	r4, r5, d0
 8016d58:	4bc3      	ldr	r3, [pc, #780]	; (8017068 <atan+0x318>)
 8016d5a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016d5e:	429e      	cmp	r6, r3
 8016d60:	46ab      	mov	fp, r5
 8016d62:	dd18      	ble.n	8016d96 <atan+0x46>
 8016d64:	4bc1      	ldr	r3, [pc, #772]	; (801706c <atan+0x31c>)
 8016d66:	429e      	cmp	r6, r3
 8016d68:	dc01      	bgt.n	8016d6e <atan+0x1e>
 8016d6a:	d109      	bne.n	8016d80 <atan+0x30>
 8016d6c:	b144      	cbz	r4, 8016d80 <atan+0x30>
 8016d6e:	4622      	mov	r2, r4
 8016d70:	462b      	mov	r3, r5
 8016d72:	4620      	mov	r0, r4
 8016d74:	4629      	mov	r1, r5
 8016d76:	f7e9 fa89 	bl	800028c <__adddf3>
 8016d7a:	4604      	mov	r4, r0
 8016d7c:	460d      	mov	r5, r1
 8016d7e:	e006      	b.n	8016d8e <atan+0x3e>
 8016d80:	f1bb 0f00 	cmp.w	fp, #0
 8016d84:	f300 8131 	bgt.w	8016fea <atan+0x29a>
 8016d88:	a59b      	add	r5, pc, #620	; (adr r5, 8016ff8 <atan+0x2a8>)
 8016d8a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016d8e:	ec45 4b10 	vmov	d0, r4, r5
 8016d92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d96:	4bb6      	ldr	r3, [pc, #728]	; (8017070 <atan+0x320>)
 8016d98:	429e      	cmp	r6, r3
 8016d9a:	dc14      	bgt.n	8016dc6 <atan+0x76>
 8016d9c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016da0:	429e      	cmp	r6, r3
 8016da2:	dc0d      	bgt.n	8016dc0 <atan+0x70>
 8016da4:	a396      	add	r3, pc, #600	; (adr r3, 8017000 <atan+0x2b0>)
 8016da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016daa:	ee10 0a10 	vmov	r0, s0
 8016dae:	4629      	mov	r1, r5
 8016db0:	f7e9 fa6c 	bl	800028c <__adddf3>
 8016db4:	4baf      	ldr	r3, [pc, #700]	; (8017074 <atan+0x324>)
 8016db6:	2200      	movs	r2, #0
 8016db8:	f7e9 feae 	bl	8000b18 <__aeabi_dcmpgt>
 8016dbc:	2800      	cmp	r0, #0
 8016dbe:	d1e6      	bne.n	8016d8e <atan+0x3e>
 8016dc0:	f04f 3aff 	mov.w	sl, #4294967295
 8016dc4:	e02b      	b.n	8016e1e <atan+0xce>
 8016dc6:	f000 f963 	bl	8017090 <fabs>
 8016dca:	4bab      	ldr	r3, [pc, #684]	; (8017078 <atan+0x328>)
 8016dcc:	429e      	cmp	r6, r3
 8016dce:	ec55 4b10 	vmov	r4, r5, d0
 8016dd2:	f300 80bf 	bgt.w	8016f54 <atan+0x204>
 8016dd6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016dda:	429e      	cmp	r6, r3
 8016ddc:	f300 80a0 	bgt.w	8016f20 <atan+0x1d0>
 8016de0:	ee10 2a10 	vmov	r2, s0
 8016de4:	ee10 0a10 	vmov	r0, s0
 8016de8:	462b      	mov	r3, r5
 8016dea:	4629      	mov	r1, r5
 8016dec:	f7e9 fa4e 	bl	800028c <__adddf3>
 8016df0:	4ba0      	ldr	r3, [pc, #640]	; (8017074 <atan+0x324>)
 8016df2:	2200      	movs	r2, #0
 8016df4:	f7e9 fa48 	bl	8000288 <__aeabi_dsub>
 8016df8:	2200      	movs	r2, #0
 8016dfa:	4606      	mov	r6, r0
 8016dfc:	460f      	mov	r7, r1
 8016dfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016e02:	4620      	mov	r0, r4
 8016e04:	4629      	mov	r1, r5
 8016e06:	f7e9 fa41 	bl	800028c <__adddf3>
 8016e0a:	4602      	mov	r2, r0
 8016e0c:	460b      	mov	r3, r1
 8016e0e:	4630      	mov	r0, r6
 8016e10:	4639      	mov	r1, r7
 8016e12:	f7e9 fd1b 	bl	800084c <__aeabi_ddiv>
 8016e16:	f04f 0a00 	mov.w	sl, #0
 8016e1a:	4604      	mov	r4, r0
 8016e1c:	460d      	mov	r5, r1
 8016e1e:	4622      	mov	r2, r4
 8016e20:	462b      	mov	r3, r5
 8016e22:	4620      	mov	r0, r4
 8016e24:	4629      	mov	r1, r5
 8016e26:	f7e9 fbe7 	bl	80005f8 <__aeabi_dmul>
 8016e2a:	4602      	mov	r2, r0
 8016e2c:	460b      	mov	r3, r1
 8016e2e:	4680      	mov	r8, r0
 8016e30:	4689      	mov	r9, r1
 8016e32:	f7e9 fbe1 	bl	80005f8 <__aeabi_dmul>
 8016e36:	a374      	add	r3, pc, #464	; (adr r3, 8017008 <atan+0x2b8>)
 8016e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e3c:	4606      	mov	r6, r0
 8016e3e:	460f      	mov	r7, r1
 8016e40:	f7e9 fbda 	bl	80005f8 <__aeabi_dmul>
 8016e44:	a372      	add	r3, pc, #456	; (adr r3, 8017010 <atan+0x2c0>)
 8016e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e4a:	f7e9 fa1f 	bl	800028c <__adddf3>
 8016e4e:	4632      	mov	r2, r6
 8016e50:	463b      	mov	r3, r7
 8016e52:	f7e9 fbd1 	bl	80005f8 <__aeabi_dmul>
 8016e56:	a370      	add	r3, pc, #448	; (adr r3, 8017018 <atan+0x2c8>)
 8016e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e5c:	f7e9 fa16 	bl	800028c <__adddf3>
 8016e60:	4632      	mov	r2, r6
 8016e62:	463b      	mov	r3, r7
 8016e64:	f7e9 fbc8 	bl	80005f8 <__aeabi_dmul>
 8016e68:	a36d      	add	r3, pc, #436	; (adr r3, 8017020 <atan+0x2d0>)
 8016e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6e:	f7e9 fa0d 	bl	800028c <__adddf3>
 8016e72:	4632      	mov	r2, r6
 8016e74:	463b      	mov	r3, r7
 8016e76:	f7e9 fbbf 	bl	80005f8 <__aeabi_dmul>
 8016e7a:	a36b      	add	r3, pc, #428	; (adr r3, 8017028 <atan+0x2d8>)
 8016e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e80:	f7e9 fa04 	bl	800028c <__adddf3>
 8016e84:	4632      	mov	r2, r6
 8016e86:	463b      	mov	r3, r7
 8016e88:	f7e9 fbb6 	bl	80005f8 <__aeabi_dmul>
 8016e8c:	a368      	add	r3, pc, #416	; (adr r3, 8017030 <atan+0x2e0>)
 8016e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e92:	f7e9 f9fb 	bl	800028c <__adddf3>
 8016e96:	4642      	mov	r2, r8
 8016e98:	464b      	mov	r3, r9
 8016e9a:	f7e9 fbad 	bl	80005f8 <__aeabi_dmul>
 8016e9e:	a366      	add	r3, pc, #408	; (adr r3, 8017038 <atan+0x2e8>)
 8016ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ea4:	4680      	mov	r8, r0
 8016ea6:	4689      	mov	r9, r1
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	4639      	mov	r1, r7
 8016eac:	f7e9 fba4 	bl	80005f8 <__aeabi_dmul>
 8016eb0:	a363      	add	r3, pc, #396	; (adr r3, 8017040 <atan+0x2f0>)
 8016eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb6:	f7e9 f9e7 	bl	8000288 <__aeabi_dsub>
 8016eba:	4632      	mov	r2, r6
 8016ebc:	463b      	mov	r3, r7
 8016ebe:	f7e9 fb9b 	bl	80005f8 <__aeabi_dmul>
 8016ec2:	a361      	add	r3, pc, #388	; (adr r3, 8017048 <atan+0x2f8>)
 8016ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ec8:	f7e9 f9de 	bl	8000288 <__aeabi_dsub>
 8016ecc:	4632      	mov	r2, r6
 8016ece:	463b      	mov	r3, r7
 8016ed0:	f7e9 fb92 	bl	80005f8 <__aeabi_dmul>
 8016ed4:	a35e      	add	r3, pc, #376	; (adr r3, 8017050 <atan+0x300>)
 8016ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eda:	f7e9 f9d5 	bl	8000288 <__aeabi_dsub>
 8016ede:	4632      	mov	r2, r6
 8016ee0:	463b      	mov	r3, r7
 8016ee2:	f7e9 fb89 	bl	80005f8 <__aeabi_dmul>
 8016ee6:	a35c      	add	r3, pc, #368	; (adr r3, 8017058 <atan+0x308>)
 8016ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eec:	f7e9 f9cc 	bl	8000288 <__aeabi_dsub>
 8016ef0:	4632      	mov	r2, r6
 8016ef2:	463b      	mov	r3, r7
 8016ef4:	f7e9 fb80 	bl	80005f8 <__aeabi_dmul>
 8016ef8:	4602      	mov	r2, r0
 8016efa:	460b      	mov	r3, r1
 8016efc:	4640      	mov	r0, r8
 8016efe:	4649      	mov	r1, r9
 8016f00:	f7e9 f9c4 	bl	800028c <__adddf3>
 8016f04:	4622      	mov	r2, r4
 8016f06:	462b      	mov	r3, r5
 8016f08:	f7e9 fb76 	bl	80005f8 <__aeabi_dmul>
 8016f0c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016f10:	4602      	mov	r2, r0
 8016f12:	460b      	mov	r3, r1
 8016f14:	d14b      	bne.n	8016fae <atan+0x25e>
 8016f16:	4620      	mov	r0, r4
 8016f18:	4629      	mov	r1, r5
 8016f1a:	f7e9 f9b5 	bl	8000288 <__aeabi_dsub>
 8016f1e:	e72c      	b.n	8016d7a <atan+0x2a>
 8016f20:	ee10 0a10 	vmov	r0, s0
 8016f24:	4b53      	ldr	r3, [pc, #332]	; (8017074 <atan+0x324>)
 8016f26:	2200      	movs	r2, #0
 8016f28:	4629      	mov	r1, r5
 8016f2a:	f7e9 f9ad 	bl	8000288 <__aeabi_dsub>
 8016f2e:	4b51      	ldr	r3, [pc, #324]	; (8017074 <atan+0x324>)
 8016f30:	4606      	mov	r6, r0
 8016f32:	460f      	mov	r7, r1
 8016f34:	2200      	movs	r2, #0
 8016f36:	4620      	mov	r0, r4
 8016f38:	4629      	mov	r1, r5
 8016f3a:	f7e9 f9a7 	bl	800028c <__adddf3>
 8016f3e:	4602      	mov	r2, r0
 8016f40:	460b      	mov	r3, r1
 8016f42:	4630      	mov	r0, r6
 8016f44:	4639      	mov	r1, r7
 8016f46:	f7e9 fc81 	bl	800084c <__aeabi_ddiv>
 8016f4a:	f04f 0a01 	mov.w	sl, #1
 8016f4e:	4604      	mov	r4, r0
 8016f50:	460d      	mov	r5, r1
 8016f52:	e764      	b.n	8016e1e <atan+0xce>
 8016f54:	4b49      	ldr	r3, [pc, #292]	; (801707c <atan+0x32c>)
 8016f56:	429e      	cmp	r6, r3
 8016f58:	da1d      	bge.n	8016f96 <atan+0x246>
 8016f5a:	ee10 0a10 	vmov	r0, s0
 8016f5e:	4b48      	ldr	r3, [pc, #288]	; (8017080 <atan+0x330>)
 8016f60:	2200      	movs	r2, #0
 8016f62:	4629      	mov	r1, r5
 8016f64:	f7e9 f990 	bl	8000288 <__aeabi_dsub>
 8016f68:	4b45      	ldr	r3, [pc, #276]	; (8017080 <atan+0x330>)
 8016f6a:	4606      	mov	r6, r0
 8016f6c:	460f      	mov	r7, r1
 8016f6e:	2200      	movs	r2, #0
 8016f70:	4620      	mov	r0, r4
 8016f72:	4629      	mov	r1, r5
 8016f74:	f7e9 fb40 	bl	80005f8 <__aeabi_dmul>
 8016f78:	4b3e      	ldr	r3, [pc, #248]	; (8017074 <atan+0x324>)
 8016f7a:	2200      	movs	r2, #0
 8016f7c:	f7e9 f986 	bl	800028c <__adddf3>
 8016f80:	4602      	mov	r2, r0
 8016f82:	460b      	mov	r3, r1
 8016f84:	4630      	mov	r0, r6
 8016f86:	4639      	mov	r1, r7
 8016f88:	f7e9 fc60 	bl	800084c <__aeabi_ddiv>
 8016f8c:	f04f 0a02 	mov.w	sl, #2
 8016f90:	4604      	mov	r4, r0
 8016f92:	460d      	mov	r5, r1
 8016f94:	e743      	b.n	8016e1e <atan+0xce>
 8016f96:	462b      	mov	r3, r5
 8016f98:	ee10 2a10 	vmov	r2, s0
 8016f9c:	4939      	ldr	r1, [pc, #228]	; (8017084 <atan+0x334>)
 8016f9e:	2000      	movs	r0, #0
 8016fa0:	f7e9 fc54 	bl	800084c <__aeabi_ddiv>
 8016fa4:	f04f 0a03 	mov.w	sl, #3
 8016fa8:	4604      	mov	r4, r0
 8016faa:	460d      	mov	r5, r1
 8016fac:	e737      	b.n	8016e1e <atan+0xce>
 8016fae:	4b36      	ldr	r3, [pc, #216]	; (8017088 <atan+0x338>)
 8016fb0:	4e36      	ldr	r6, [pc, #216]	; (801708c <atan+0x33c>)
 8016fb2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8016fb6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8016fba:	e9da 2300 	ldrd	r2, r3, [sl]
 8016fbe:	f7e9 f963 	bl	8000288 <__aeabi_dsub>
 8016fc2:	4622      	mov	r2, r4
 8016fc4:	462b      	mov	r3, r5
 8016fc6:	f7e9 f95f 	bl	8000288 <__aeabi_dsub>
 8016fca:	4602      	mov	r2, r0
 8016fcc:	460b      	mov	r3, r1
 8016fce:	e9d6 0100 	ldrd	r0, r1, [r6]
 8016fd2:	f7e9 f959 	bl	8000288 <__aeabi_dsub>
 8016fd6:	f1bb 0f00 	cmp.w	fp, #0
 8016fda:	4604      	mov	r4, r0
 8016fdc:	460d      	mov	r5, r1
 8016fde:	f6bf aed6 	bge.w	8016d8e <atan+0x3e>
 8016fe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016fe6:	461d      	mov	r5, r3
 8016fe8:	e6d1      	b.n	8016d8e <atan+0x3e>
 8016fea:	a51d      	add	r5, pc, #116	; (adr r5, 8017060 <atan+0x310>)
 8016fec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016ff0:	e6cd      	b.n	8016d8e <atan+0x3e>
 8016ff2:	bf00      	nop
 8016ff4:	f3af 8000 	nop.w
 8016ff8:	54442d18 	.word	0x54442d18
 8016ffc:	bff921fb 	.word	0xbff921fb
 8017000:	8800759c 	.word	0x8800759c
 8017004:	7e37e43c 	.word	0x7e37e43c
 8017008:	e322da11 	.word	0xe322da11
 801700c:	3f90ad3a 	.word	0x3f90ad3a
 8017010:	24760deb 	.word	0x24760deb
 8017014:	3fa97b4b 	.word	0x3fa97b4b
 8017018:	a0d03d51 	.word	0xa0d03d51
 801701c:	3fb10d66 	.word	0x3fb10d66
 8017020:	c54c206e 	.word	0xc54c206e
 8017024:	3fb745cd 	.word	0x3fb745cd
 8017028:	920083ff 	.word	0x920083ff
 801702c:	3fc24924 	.word	0x3fc24924
 8017030:	5555550d 	.word	0x5555550d
 8017034:	3fd55555 	.word	0x3fd55555
 8017038:	2c6a6c2f 	.word	0x2c6a6c2f
 801703c:	bfa2b444 	.word	0xbfa2b444
 8017040:	52defd9a 	.word	0x52defd9a
 8017044:	3fadde2d 	.word	0x3fadde2d
 8017048:	af749a6d 	.word	0xaf749a6d
 801704c:	3fb3b0f2 	.word	0x3fb3b0f2
 8017050:	fe231671 	.word	0xfe231671
 8017054:	3fbc71c6 	.word	0x3fbc71c6
 8017058:	9998ebc4 	.word	0x9998ebc4
 801705c:	3fc99999 	.word	0x3fc99999
 8017060:	54442d18 	.word	0x54442d18
 8017064:	3ff921fb 	.word	0x3ff921fb
 8017068:	440fffff 	.word	0x440fffff
 801706c:	7ff00000 	.word	0x7ff00000
 8017070:	3fdbffff 	.word	0x3fdbffff
 8017074:	3ff00000 	.word	0x3ff00000
 8017078:	3ff2ffff 	.word	0x3ff2ffff
 801707c:	40038000 	.word	0x40038000
 8017080:	3ff80000 	.word	0x3ff80000
 8017084:	bff00000 	.word	0xbff00000
 8017088:	0801a848 	.word	0x0801a848
 801708c:	0801a828 	.word	0x0801a828

08017090 <fabs>:
 8017090:	ec51 0b10 	vmov	r0, r1, d0
 8017094:	ee10 2a10 	vmov	r2, s0
 8017098:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801709c:	ec43 2b10 	vmov	d0, r2, r3
 80170a0:	4770      	bx	lr
	...

080170a4 <atanf>:
 80170a4:	b538      	push	{r3, r4, r5, lr}
 80170a6:	ee10 5a10 	vmov	r5, s0
 80170aa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80170ae:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80170b2:	eef0 7a40 	vmov.f32	s15, s0
 80170b6:	db10      	blt.n	80170da <atanf+0x36>
 80170b8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80170bc:	dd04      	ble.n	80170c8 <atanf+0x24>
 80170be:	ee70 7a00 	vadd.f32	s15, s0, s0
 80170c2:	eeb0 0a67 	vmov.f32	s0, s15
 80170c6:	bd38      	pop	{r3, r4, r5, pc}
 80170c8:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8017200 <atanf+0x15c>
 80170cc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8017204 <atanf+0x160>
 80170d0:	2d00      	cmp	r5, #0
 80170d2:	bfd8      	it	le
 80170d4:	eef0 7a40 	vmovle.f32	s15, s0
 80170d8:	e7f3      	b.n	80170c2 <atanf+0x1e>
 80170da:	4b4b      	ldr	r3, [pc, #300]	; (8017208 <atanf+0x164>)
 80170dc:	429c      	cmp	r4, r3
 80170de:	dc10      	bgt.n	8017102 <atanf+0x5e>
 80170e0:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80170e4:	da0a      	bge.n	80170fc <atanf+0x58>
 80170e6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801720c <atanf+0x168>
 80170ea:	ee30 7a07 	vadd.f32	s14, s0, s14
 80170ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80170f2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80170f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170fa:	dce2      	bgt.n	80170c2 <atanf+0x1e>
 80170fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017100:	e013      	b.n	801712a <atanf+0x86>
 8017102:	f000 f8a3 	bl	801724c <fabsf>
 8017106:	4b42      	ldr	r3, [pc, #264]	; (8017210 <atanf+0x16c>)
 8017108:	429c      	cmp	r4, r3
 801710a:	dc4f      	bgt.n	80171ac <atanf+0x108>
 801710c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8017110:	429c      	cmp	r4, r3
 8017112:	dc41      	bgt.n	8017198 <atanf+0xf4>
 8017114:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017118:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801711c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017120:	2300      	movs	r3, #0
 8017122:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017126:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801712a:	1c5a      	adds	r2, r3, #1
 801712c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017130:	eddf 5a38 	vldr	s11, [pc, #224]	; 8017214 <atanf+0x170>
 8017134:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8017218 <atanf+0x174>
 8017138:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801721c <atanf+0x178>
 801713c:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8017220 <atanf+0x17c>
 8017140:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017144:	eea7 6a25 	vfma.f32	s12, s14, s11
 8017148:	eddf 5a36 	vldr	s11, [pc, #216]	; 8017224 <atanf+0x180>
 801714c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017150:	ed9f 6a35 	vldr	s12, [pc, #212]	; 8017228 <atanf+0x184>
 8017154:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017158:	eddf 5a34 	vldr	s11, [pc, #208]	; 801722c <atanf+0x188>
 801715c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017160:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8017230 <atanf+0x18c>
 8017164:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017168:	eddf 5a32 	vldr	s11, [pc, #200]	; 8017234 <atanf+0x190>
 801716c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8017170:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8017238 <atanf+0x194>
 8017174:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017178:	eddf 5a30 	vldr	s11, [pc, #192]	; 801723c <atanf+0x198>
 801717c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8017180:	eea5 0a87 	vfma.f32	s0, s11, s14
 8017184:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017188:	eea6 0a26 	vfma.f32	s0, s12, s13
 801718c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017190:	d121      	bne.n	80171d6 <atanf+0x132>
 8017192:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017196:	e794      	b.n	80170c2 <atanf+0x1e>
 8017198:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801719c:	ee30 7a67 	vsub.f32	s14, s0, s15
 80171a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80171a4:	2301      	movs	r3, #1
 80171a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80171aa:	e7be      	b.n	801712a <atanf+0x86>
 80171ac:	4b24      	ldr	r3, [pc, #144]	; (8017240 <atanf+0x19c>)
 80171ae:	429c      	cmp	r4, r3
 80171b0:	dc0b      	bgt.n	80171ca <atanf+0x126>
 80171b2:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80171b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80171ba:	eea0 7a27 	vfma.f32	s14, s0, s15
 80171be:	2302      	movs	r3, #2
 80171c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80171c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80171c8:	e7af      	b.n	801712a <atanf+0x86>
 80171ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80171ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80171d2:	2303      	movs	r3, #3
 80171d4:	e7a9      	b.n	801712a <atanf+0x86>
 80171d6:	4a1b      	ldr	r2, [pc, #108]	; (8017244 <atanf+0x1a0>)
 80171d8:	491b      	ldr	r1, [pc, #108]	; (8017248 <atanf+0x1a4>)
 80171da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80171de:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80171e2:	ed93 7a00 	vldr	s14, [r3]
 80171e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80171ea:	2d00      	cmp	r5, #0
 80171ec:	ee70 7a67 	vsub.f32	s15, s0, s15
 80171f0:	ed92 0a00 	vldr	s0, [r2]
 80171f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80171f8:	bfb8      	it	lt
 80171fa:	eef1 7a67 	vneglt.f32	s15, s15
 80171fe:	e760      	b.n	80170c2 <atanf+0x1e>
 8017200:	3fc90fdb 	.word	0x3fc90fdb
 8017204:	bfc90fdb 	.word	0xbfc90fdb
 8017208:	3edfffff 	.word	0x3edfffff
 801720c:	7149f2ca 	.word	0x7149f2ca
 8017210:	3f97ffff 	.word	0x3f97ffff
 8017214:	3c8569d7 	.word	0x3c8569d7
 8017218:	3d4bda59 	.word	0x3d4bda59
 801721c:	bd15a221 	.word	0xbd15a221
 8017220:	be4ccccd 	.word	0xbe4ccccd
 8017224:	3d886b35 	.word	0x3d886b35
 8017228:	3dba2e6e 	.word	0x3dba2e6e
 801722c:	3e124925 	.word	0x3e124925
 8017230:	3eaaaaab 	.word	0x3eaaaaab
 8017234:	bd6ef16b 	.word	0xbd6ef16b
 8017238:	bd9d8795 	.word	0xbd9d8795
 801723c:	bde38e38 	.word	0xbde38e38
 8017240:	401bffff 	.word	0x401bffff
 8017244:	0801a868 	.word	0x0801a868
 8017248:	0801a878 	.word	0x0801a878

0801724c <fabsf>:
 801724c:	ee10 3a10 	vmov	r3, s0
 8017250:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017254:	ee00 3a10 	vmov	s0, r3
 8017258:	4770      	bx	lr
	...

0801725c <floorf>:
 801725c:	ee10 3a10 	vmov	r3, s0
 8017260:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017264:	3a7f      	subs	r2, #127	; 0x7f
 8017266:	2a16      	cmp	r2, #22
 8017268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801726c:	dc2a      	bgt.n	80172c4 <floorf+0x68>
 801726e:	2a00      	cmp	r2, #0
 8017270:	da11      	bge.n	8017296 <floorf+0x3a>
 8017272:	eddf 7a18 	vldr	s15, [pc, #96]	; 80172d4 <floorf+0x78>
 8017276:	ee30 0a27 	vadd.f32	s0, s0, s15
 801727a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801727e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017282:	dd05      	ble.n	8017290 <floorf+0x34>
 8017284:	2b00      	cmp	r3, #0
 8017286:	da23      	bge.n	80172d0 <floorf+0x74>
 8017288:	4a13      	ldr	r2, [pc, #76]	; (80172d8 <floorf+0x7c>)
 801728a:	2900      	cmp	r1, #0
 801728c:	bf18      	it	ne
 801728e:	4613      	movne	r3, r2
 8017290:	ee00 3a10 	vmov	s0, r3
 8017294:	4770      	bx	lr
 8017296:	4911      	ldr	r1, [pc, #68]	; (80172dc <floorf+0x80>)
 8017298:	4111      	asrs	r1, r2
 801729a:	420b      	tst	r3, r1
 801729c:	d0fa      	beq.n	8017294 <floorf+0x38>
 801729e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80172d4 <floorf+0x78>
 80172a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80172a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80172aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ae:	ddef      	ble.n	8017290 <floorf+0x34>
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	bfbe      	ittt	lt
 80172b4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80172b8:	fa40 f202 	asrlt.w	r2, r0, r2
 80172bc:	189b      	addlt	r3, r3, r2
 80172be:	ea23 0301 	bic.w	r3, r3, r1
 80172c2:	e7e5      	b.n	8017290 <floorf+0x34>
 80172c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80172c8:	d3e4      	bcc.n	8017294 <floorf+0x38>
 80172ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80172ce:	4770      	bx	lr
 80172d0:	2300      	movs	r3, #0
 80172d2:	e7dd      	b.n	8017290 <floorf+0x34>
 80172d4:	7149f2ca 	.word	0x7149f2ca
 80172d8:	bf800000 	.word	0xbf800000
 80172dc:	007fffff 	.word	0x007fffff

080172e0 <nanf>:
 80172e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80172e8 <nanf+0x8>
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	7fc00000 	.word	0x7fc00000

080172ec <scalbnf>:
 80172ec:	ee10 3a10 	vmov	r3, s0
 80172f0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80172f4:	d025      	beq.n	8017342 <scalbnf+0x56>
 80172f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80172fa:	d302      	bcc.n	8017302 <scalbnf+0x16>
 80172fc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017300:	4770      	bx	lr
 8017302:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8017306:	d122      	bne.n	801734e <scalbnf+0x62>
 8017308:	4b2a      	ldr	r3, [pc, #168]	; (80173b4 <scalbnf+0xc8>)
 801730a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80173b8 <scalbnf+0xcc>
 801730e:	4298      	cmp	r0, r3
 8017310:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017314:	db16      	blt.n	8017344 <scalbnf+0x58>
 8017316:	ee10 3a10 	vmov	r3, s0
 801731a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801731e:	3a19      	subs	r2, #25
 8017320:	4402      	add	r2, r0
 8017322:	2afe      	cmp	r2, #254	; 0xfe
 8017324:	dd15      	ble.n	8017352 <scalbnf+0x66>
 8017326:	ee10 3a10 	vmov	r3, s0
 801732a:	eddf 7a24 	vldr	s15, [pc, #144]	; 80173bc <scalbnf+0xd0>
 801732e:	eddf 6a24 	vldr	s13, [pc, #144]	; 80173c0 <scalbnf+0xd4>
 8017332:	2b00      	cmp	r3, #0
 8017334:	eeb0 7a67 	vmov.f32	s14, s15
 8017338:	bfb8      	it	lt
 801733a:	eef0 7a66 	vmovlt.f32	s15, s13
 801733e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8017342:	4770      	bx	lr
 8017344:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80173c4 <scalbnf+0xd8>
 8017348:	ee20 0a27 	vmul.f32	s0, s0, s15
 801734c:	4770      	bx	lr
 801734e:	0dd2      	lsrs	r2, r2, #23
 8017350:	e7e6      	b.n	8017320 <scalbnf+0x34>
 8017352:	2a00      	cmp	r2, #0
 8017354:	dd06      	ble.n	8017364 <scalbnf+0x78>
 8017356:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801735a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801735e:	ee00 3a10 	vmov	s0, r3
 8017362:	4770      	bx	lr
 8017364:	f112 0f16 	cmn.w	r2, #22
 8017368:	da1a      	bge.n	80173a0 <scalbnf+0xb4>
 801736a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801736e:	4298      	cmp	r0, r3
 8017370:	ee10 3a10 	vmov	r3, s0
 8017374:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017378:	dd0a      	ble.n	8017390 <scalbnf+0xa4>
 801737a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80173bc <scalbnf+0xd0>
 801737e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80173c0 <scalbnf+0xd4>
 8017382:	eef0 7a40 	vmov.f32	s15, s0
 8017386:	2b00      	cmp	r3, #0
 8017388:	bf18      	it	ne
 801738a:	eeb0 0a47 	vmovne.f32	s0, s14
 801738e:	e7db      	b.n	8017348 <scalbnf+0x5c>
 8017390:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80173c4 <scalbnf+0xd8>
 8017394:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80173c8 <scalbnf+0xdc>
 8017398:	eef0 7a40 	vmov.f32	s15, s0
 801739c:	2b00      	cmp	r3, #0
 801739e:	e7f3      	b.n	8017388 <scalbnf+0x9c>
 80173a0:	3219      	adds	r2, #25
 80173a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80173a6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80173aa:	eddf 7a08 	vldr	s15, [pc, #32]	; 80173cc <scalbnf+0xe0>
 80173ae:	ee07 3a10 	vmov	s14, r3
 80173b2:	e7c4      	b.n	801733e <scalbnf+0x52>
 80173b4:	ffff3cb0 	.word	0xffff3cb0
 80173b8:	4c000000 	.word	0x4c000000
 80173bc:	7149f2ca 	.word	0x7149f2ca
 80173c0:	f149f2ca 	.word	0xf149f2ca
 80173c4:	0da24260 	.word	0x0da24260
 80173c8:	8da24260 	.word	0x8da24260
 80173cc:	33000000 	.word	0x33000000

080173d0 <abort>:
 80173d0:	b508      	push	{r3, lr}
 80173d2:	2006      	movs	r0, #6
 80173d4:	f000 fdb0 	bl	8017f38 <raise>
 80173d8:	2001      	movs	r0, #1
 80173da:	f7eb f913 	bl	8002604 <_exit>
	...

080173e0 <__errno>:
 80173e0:	4b01      	ldr	r3, [pc, #4]	; (80173e8 <__errno+0x8>)
 80173e2:	6818      	ldr	r0, [r3, #0]
 80173e4:	4770      	bx	lr
 80173e6:	bf00      	nop
 80173e8:	200000f0 	.word	0x200000f0

080173ec <__libc_init_array>:
 80173ec:	b570      	push	{r4, r5, r6, lr}
 80173ee:	4d0d      	ldr	r5, [pc, #52]	; (8017424 <__libc_init_array+0x38>)
 80173f0:	4c0d      	ldr	r4, [pc, #52]	; (8017428 <__libc_init_array+0x3c>)
 80173f2:	1b64      	subs	r4, r4, r5
 80173f4:	10a4      	asrs	r4, r4, #2
 80173f6:	2600      	movs	r6, #0
 80173f8:	42a6      	cmp	r6, r4
 80173fa:	d109      	bne.n	8017410 <__libc_init_array+0x24>
 80173fc:	4d0b      	ldr	r5, [pc, #44]	; (801742c <__libc_init_array+0x40>)
 80173fe:	4c0c      	ldr	r4, [pc, #48]	; (8017430 <__libc_init_array+0x44>)
 8017400:	f002 fed8 	bl	801a1b4 <_init>
 8017404:	1b64      	subs	r4, r4, r5
 8017406:	10a4      	asrs	r4, r4, #2
 8017408:	2600      	movs	r6, #0
 801740a:	42a6      	cmp	r6, r4
 801740c:	d105      	bne.n	801741a <__libc_init_array+0x2e>
 801740e:	bd70      	pop	{r4, r5, r6, pc}
 8017410:	f855 3b04 	ldr.w	r3, [r5], #4
 8017414:	4798      	blx	r3
 8017416:	3601      	adds	r6, #1
 8017418:	e7ee      	b.n	80173f8 <__libc_init_array+0xc>
 801741a:	f855 3b04 	ldr.w	r3, [r5], #4
 801741e:	4798      	blx	r3
 8017420:	3601      	adds	r6, #1
 8017422:	e7f2      	b.n	801740a <__libc_init_array+0x1e>
 8017424:	0801ac74 	.word	0x0801ac74
 8017428:	0801ac74 	.word	0x0801ac74
 801742c:	0801ac74 	.word	0x0801ac74
 8017430:	0801ac78 	.word	0x0801ac78

08017434 <malloc>:
 8017434:	4b02      	ldr	r3, [pc, #8]	; (8017440 <malloc+0xc>)
 8017436:	4601      	mov	r1, r0
 8017438:	6818      	ldr	r0, [r3, #0]
 801743a:	f000 b869 	b.w	8017510 <_malloc_r>
 801743e:	bf00      	nop
 8017440:	200000f0 	.word	0x200000f0

08017444 <memcpy>:
 8017444:	440a      	add	r2, r1
 8017446:	4291      	cmp	r1, r2
 8017448:	f100 33ff 	add.w	r3, r0, #4294967295
 801744c:	d100      	bne.n	8017450 <memcpy+0xc>
 801744e:	4770      	bx	lr
 8017450:	b510      	push	{r4, lr}
 8017452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017456:	f803 4f01 	strb.w	r4, [r3, #1]!
 801745a:	4291      	cmp	r1, r2
 801745c:	d1f9      	bne.n	8017452 <memcpy+0xe>
 801745e:	bd10      	pop	{r4, pc}

08017460 <memset>:
 8017460:	4402      	add	r2, r0
 8017462:	4603      	mov	r3, r0
 8017464:	4293      	cmp	r3, r2
 8017466:	d100      	bne.n	801746a <memset+0xa>
 8017468:	4770      	bx	lr
 801746a:	f803 1b01 	strb.w	r1, [r3], #1
 801746e:	e7f9      	b.n	8017464 <memset+0x4>

08017470 <_free_r>:
 8017470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017472:	2900      	cmp	r1, #0
 8017474:	d048      	beq.n	8017508 <_free_r+0x98>
 8017476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801747a:	9001      	str	r0, [sp, #4]
 801747c:	2b00      	cmp	r3, #0
 801747e:	f1a1 0404 	sub.w	r4, r1, #4
 8017482:	bfb8      	it	lt
 8017484:	18e4      	addlt	r4, r4, r3
 8017486:	f001 fd1d 	bl	8018ec4 <__malloc_lock>
 801748a:	4a20      	ldr	r2, [pc, #128]	; (801750c <_free_r+0x9c>)
 801748c:	9801      	ldr	r0, [sp, #4]
 801748e:	6813      	ldr	r3, [r2, #0]
 8017490:	4615      	mov	r5, r2
 8017492:	b933      	cbnz	r3, 80174a2 <_free_r+0x32>
 8017494:	6063      	str	r3, [r4, #4]
 8017496:	6014      	str	r4, [r2, #0]
 8017498:	b003      	add	sp, #12
 801749a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801749e:	f001 bd17 	b.w	8018ed0 <__malloc_unlock>
 80174a2:	42a3      	cmp	r3, r4
 80174a4:	d90b      	bls.n	80174be <_free_r+0x4e>
 80174a6:	6821      	ldr	r1, [r4, #0]
 80174a8:	1862      	adds	r2, r4, r1
 80174aa:	4293      	cmp	r3, r2
 80174ac:	bf04      	itt	eq
 80174ae:	681a      	ldreq	r2, [r3, #0]
 80174b0:	685b      	ldreq	r3, [r3, #4]
 80174b2:	6063      	str	r3, [r4, #4]
 80174b4:	bf04      	itt	eq
 80174b6:	1852      	addeq	r2, r2, r1
 80174b8:	6022      	streq	r2, [r4, #0]
 80174ba:	602c      	str	r4, [r5, #0]
 80174bc:	e7ec      	b.n	8017498 <_free_r+0x28>
 80174be:	461a      	mov	r2, r3
 80174c0:	685b      	ldr	r3, [r3, #4]
 80174c2:	b10b      	cbz	r3, 80174c8 <_free_r+0x58>
 80174c4:	42a3      	cmp	r3, r4
 80174c6:	d9fa      	bls.n	80174be <_free_r+0x4e>
 80174c8:	6811      	ldr	r1, [r2, #0]
 80174ca:	1855      	adds	r5, r2, r1
 80174cc:	42a5      	cmp	r5, r4
 80174ce:	d10b      	bne.n	80174e8 <_free_r+0x78>
 80174d0:	6824      	ldr	r4, [r4, #0]
 80174d2:	4421      	add	r1, r4
 80174d4:	1854      	adds	r4, r2, r1
 80174d6:	42a3      	cmp	r3, r4
 80174d8:	6011      	str	r1, [r2, #0]
 80174da:	d1dd      	bne.n	8017498 <_free_r+0x28>
 80174dc:	681c      	ldr	r4, [r3, #0]
 80174de:	685b      	ldr	r3, [r3, #4]
 80174e0:	6053      	str	r3, [r2, #4]
 80174e2:	4421      	add	r1, r4
 80174e4:	6011      	str	r1, [r2, #0]
 80174e6:	e7d7      	b.n	8017498 <_free_r+0x28>
 80174e8:	d902      	bls.n	80174f0 <_free_r+0x80>
 80174ea:	230c      	movs	r3, #12
 80174ec:	6003      	str	r3, [r0, #0]
 80174ee:	e7d3      	b.n	8017498 <_free_r+0x28>
 80174f0:	6825      	ldr	r5, [r4, #0]
 80174f2:	1961      	adds	r1, r4, r5
 80174f4:	428b      	cmp	r3, r1
 80174f6:	bf04      	itt	eq
 80174f8:	6819      	ldreq	r1, [r3, #0]
 80174fa:	685b      	ldreq	r3, [r3, #4]
 80174fc:	6063      	str	r3, [r4, #4]
 80174fe:	bf04      	itt	eq
 8017500:	1949      	addeq	r1, r1, r5
 8017502:	6021      	streq	r1, [r4, #0]
 8017504:	6054      	str	r4, [r2, #4]
 8017506:	e7c7      	b.n	8017498 <_free_r+0x28>
 8017508:	b003      	add	sp, #12
 801750a:	bd30      	pop	{r4, r5, pc}
 801750c:	200011b8 	.word	0x200011b8

08017510 <_malloc_r>:
 8017510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017512:	1ccd      	adds	r5, r1, #3
 8017514:	f025 0503 	bic.w	r5, r5, #3
 8017518:	3508      	adds	r5, #8
 801751a:	2d0c      	cmp	r5, #12
 801751c:	bf38      	it	cc
 801751e:	250c      	movcc	r5, #12
 8017520:	2d00      	cmp	r5, #0
 8017522:	4606      	mov	r6, r0
 8017524:	db01      	blt.n	801752a <_malloc_r+0x1a>
 8017526:	42a9      	cmp	r1, r5
 8017528:	d903      	bls.n	8017532 <_malloc_r+0x22>
 801752a:	230c      	movs	r3, #12
 801752c:	6033      	str	r3, [r6, #0]
 801752e:	2000      	movs	r0, #0
 8017530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017532:	f001 fcc7 	bl	8018ec4 <__malloc_lock>
 8017536:	4921      	ldr	r1, [pc, #132]	; (80175bc <_malloc_r+0xac>)
 8017538:	680a      	ldr	r2, [r1, #0]
 801753a:	4614      	mov	r4, r2
 801753c:	b99c      	cbnz	r4, 8017566 <_malloc_r+0x56>
 801753e:	4f20      	ldr	r7, [pc, #128]	; (80175c0 <_malloc_r+0xb0>)
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	b923      	cbnz	r3, 801754e <_malloc_r+0x3e>
 8017544:	4621      	mov	r1, r4
 8017546:	4630      	mov	r0, r6
 8017548:	f000 fcbe 	bl	8017ec8 <_sbrk_r>
 801754c:	6038      	str	r0, [r7, #0]
 801754e:	4629      	mov	r1, r5
 8017550:	4630      	mov	r0, r6
 8017552:	f000 fcb9 	bl	8017ec8 <_sbrk_r>
 8017556:	1c43      	adds	r3, r0, #1
 8017558:	d123      	bne.n	80175a2 <_malloc_r+0x92>
 801755a:	230c      	movs	r3, #12
 801755c:	6033      	str	r3, [r6, #0]
 801755e:	4630      	mov	r0, r6
 8017560:	f001 fcb6 	bl	8018ed0 <__malloc_unlock>
 8017564:	e7e3      	b.n	801752e <_malloc_r+0x1e>
 8017566:	6823      	ldr	r3, [r4, #0]
 8017568:	1b5b      	subs	r3, r3, r5
 801756a:	d417      	bmi.n	801759c <_malloc_r+0x8c>
 801756c:	2b0b      	cmp	r3, #11
 801756e:	d903      	bls.n	8017578 <_malloc_r+0x68>
 8017570:	6023      	str	r3, [r4, #0]
 8017572:	441c      	add	r4, r3
 8017574:	6025      	str	r5, [r4, #0]
 8017576:	e004      	b.n	8017582 <_malloc_r+0x72>
 8017578:	6863      	ldr	r3, [r4, #4]
 801757a:	42a2      	cmp	r2, r4
 801757c:	bf0c      	ite	eq
 801757e:	600b      	streq	r3, [r1, #0]
 8017580:	6053      	strne	r3, [r2, #4]
 8017582:	4630      	mov	r0, r6
 8017584:	f001 fca4 	bl	8018ed0 <__malloc_unlock>
 8017588:	f104 000b 	add.w	r0, r4, #11
 801758c:	1d23      	adds	r3, r4, #4
 801758e:	f020 0007 	bic.w	r0, r0, #7
 8017592:	1ac2      	subs	r2, r0, r3
 8017594:	d0cc      	beq.n	8017530 <_malloc_r+0x20>
 8017596:	1a1b      	subs	r3, r3, r0
 8017598:	50a3      	str	r3, [r4, r2]
 801759a:	e7c9      	b.n	8017530 <_malloc_r+0x20>
 801759c:	4622      	mov	r2, r4
 801759e:	6864      	ldr	r4, [r4, #4]
 80175a0:	e7cc      	b.n	801753c <_malloc_r+0x2c>
 80175a2:	1cc4      	adds	r4, r0, #3
 80175a4:	f024 0403 	bic.w	r4, r4, #3
 80175a8:	42a0      	cmp	r0, r4
 80175aa:	d0e3      	beq.n	8017574 <_malloc_r+0x64>
 80175ac:	1a21      	subs	r1, r4, r0
 80175ae:	4630      	mov	r0, r6
 80175b0:	f000 fc8a 	bl	8017ec8 <_sbrk_r>
 80175b4:	3001      	adds	r0, #1
 80175b6:	d1dd      	bne.n	8017574 <_malloc_r+0x64>
 80175b8:	e7cf      	b.n	801755a <_malloc_r+0x4a>
 80175ba:	bf00      	nop
 80175bc:	200011b8 	.word	0x200011b8
 80175c0:	200011bc 	.word	0x200011bc

080175c4 <__cvt>:
 80175c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80175c8:	ec55 4b10 	vmov	r4, r5, d0
 80175cc:	2d00      	cmp	r5, #0
 80175ce:	460e      	mov	r6, r1
 80175d0:	4619      	mov	r1, r3
 80175d2:	462b      	mov	r3, r5
 80175d4:	bfbb      	ittet	lt
 80175d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80175da:	461d      	movlt	r5, r3
 80175dc:	2300      	movge	r3, #0
 80175de:	232d      	movlt	r3, #45	; 0x2d
 80175e0:	700b      	strb	r3, [r1, #0]
 80175e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80175e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80175e8:	4691      	mov	r9, r2
 80175ea:	f023 0820 	bic.w	r8, r3, #32
 80175ee:	bfbc      	itt	lt
 80175f0:	4622      	movlt	r2, r4
 80175f2:	4614      	movlt	r4, r2
 80175f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80175f8:	d005      	beq.n	8017606 <__cvt+0x42>
 80175fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80175fe:	d100      	bne.n	8017602 <__cvt+0x3e>
 8017600:	3601      	adds	r6, #1
 8017602:	2102      	movs	r1, #2
 8017604:	e000      	b.n	8017608 <__cvt+0x44>
 8017606:	2103      	movs	r1, #3
 8017608:	ab03      	add	r3, sp, #12
 801760a:	9301      	str	r3, [sp, #4]
 801760c:	ab02      	add	r3, sp, #8
 801760e:	9300      	str	r3, [sp, #0]
 8017610:	ec45 4b10 	vmov	d0, r4, r5
 8017614:	4653      	mov	r3, sl
 8017616:	4632      	mov	r2, r6
 8017618:	f000 fd6a 	bl	80180f0 <_dtoa_r>
 801761c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017620:	4607      	mov	r7, r0
 8017622:	d102      	bne.n	801762a <__cvt+0x66>
 8017624:	f019 0f01 	tst.w	r9, #1
 8017628:	d022      	beq.n	8017670 <__cvt+0xac>
 801762a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801762e:	eb07 0906 	add.w	r9, r7, r6
 8017632:	d110      	bne.n	8017656 <__cvt+0x92>
 8017634:	783b      	ldrb	r3, [r7, #0]
 8017636:	2b30      	cmp	r3, #48	; 0x30
 8017638:	d10a      	bne.n	8017650 <__cvt+0x8c>
 801763a:	2200      	movs	r2, #0
 801763c:	2300      	movs	r3, #0
 801763e:	4620      	mov	r0, r4
 8017640:	4629      	mov	r1, r5
 8017642:	f7e9 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8017646:	b918      	cbnz	r0, 8017650 <__cvt+0x8c>
 8017648:	f1c6 0601 	rsb	r6, r6, #1
 801764c:	f8ca 6000 	str.w	r6, [sl]
 8017650:	f8da 3000 	ldr.w	r3, [sl]
 8017654:	4499      	add	r9, r3
 8017656:	2200      	movs	r2, #0
 8017658:	2300      	movs	r3, #0
 801765a:	4620      	mov	r0, r4
 801765c:	4629      	mov	r1, r5
 801765e:	f7e9 fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 8017662:	b108      	cbz	r0, 8017668 <__cvt+0xa4>
 8017664:	f8cd 900c 	str.w	r9, [sp, #12]
 8017668:	2230      	movs	r2, #48	; 0x30
 801766a:	9b03      	ldr	r3, [sp, #12]
 801766c:	454b      	cmp	r3, r9
 801766e:	d307      	bcc.n	8017680 <__cvt+0xbc>
 8017670:	9b03      	ldr	r3, [sp, #12]
 8017672:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017674:	1bdb      	subs	r3, r3, r7
 8017676:	4638      	mov	r0, r7
 8017678:	6013      	str	r3, [r2, #0]
 801767a:	b004      	add	sp, #16
 801767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017680:	1c59      	adds	r1, r3, #1
 8017682:	9103      	str	r1, [sp, #12]
 8017684:	701a      	strb	r2, [r3, #0]
 8017686:	e7f0      	b.n	801766a <__cvt+0xa6>

08017688 <__exponent>:
 8017688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801768a:	4603      	mov	r3, r0
 801768c:	2900      	cmp	r1, #0
 801768e:	bfb8      	it	lt
 8017690:	4249      	neglt	r1, r1
 8017692:	f803 2b02 	strb.w	r2, [r3], #2
 8017696:	bfb4      	ite	lt
 8017698:	222d      	movlt	r2, #45	; 0x2d
 801769a:	222b      	movge	r2, #43	; 0x2b
 801769c:	2909      	cmp	r1, #9
 801769e:	7042      	strb	r2, [r0, #1]
 80176a0:	dd2a      	ble.n	80176f8 <__exponent+0x70>
 80176a2:	f10d 0407 	add.w	r4, sp, #7
 80176a6:	46a4      	mov	ip, r4
 80176a8:	270a      	movs	r7, #10
 80176aa:	46a6      	mov	lr, r4
 80176ac:	460a      	mov	r2, r1
 80176ae:	fb91 f6f7 	sdiv	r6, r1, r7
 80176b2:	fb07 1516 	mls	r5, r7, r6, r1
 80176b6:	3530      	adds	r5, #48	; 0x30
 80176b8:	2a63      	cmp	r2, #99	; 0x63
 80176ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80176be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80176c2:	4631      	mov	r1, r6
 80176c4:	dcf1      	bgt.n	80176aa <__exponent+0x22>
 80176c6:	3130      	adds	r1, #48	; 0x30
 80176c8:	f1ae 0502 	sub.w	r5, lr, #2
 80176cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80176d0:	1c44      	adds	r4, r0, #1
 80176d2:	4629      	mov	r1, r5
 80176d4:	4561      	cmp	r1, ip
 80176d6:	d30a      	bcc.n	80176ee <__exponent+0x66>
 80176d8:	f10d 0209 	add.w	r2, sp, #9
 80176dc:	eba2 020e 	sub.w	r2, r2, lr
 80176e0:	4565      	cmp	r5, ip
 80176e2:	bf88      	it	hi
 80176e4:	2200      	movhi	r2, #0
 80176e6:	4413      	add	r3, r2
 80176e8:	1a18      	subs	r0, r3, r0
 80176ea:	b003      	add	sp, #12
 80176ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80176f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80176f6:	e7ed      	b.n	80176d4 <__exponent+0x4c>
 80176f8:	2330      	movs	r3, #48	; 0x30
 80176fa:	3130      	adds	r1, #48	; 0x30
 80176fc:	7083      	strb	r3, [r0, #2]
 80176fe:	70c1      	strb	r1, [r0, #3]
 8017700:	1d03      	adds	r3, r0, #4
 8017702:	e7f1      	b.n	80176e8 <__exponent+0x60>

08017704 <_printf_float>:
 8017704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017708:	ed2d 8b02 	vpush	{d8}
 801770c:	b08d      	sub	sp, #52	; 0x34
 801770e:	460c      	mov	r4, r1
 8017710:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017714:	4616      	mov	r6, r2
 8017716:	461f      	mov	r7, r3
 8017718:	4605      	mov	r5, r0
 801771a:	f001 fbcb 	bl	8018eb4 <_localeconv_r>
 801771e:	f8d0 a000 	ldr.w	sl, [r0]
 8017722:	4650      	mov	r0, sl
 8017724:	f7e8 fd54 	bl	80001d0 <strlen>
 8017728:	2300      	movs	r3, #0
 801772a:	930a      	str	r3, [sp, #40]	; 0x28
 801772c:	6823      	ldr	r3, [r4, #0]
 801772e:	9305      	str	r3, [sp, #20]
 8017730:	f8d8 3000 	ldr.w	r3, [r8]
 8017734:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017738:	3307      	adds	r3, #7
 801773a:	f023 0307 	bic.w	r3, r3, #7
 801773e:	f103 0208 	add.w	r2, r3, #8
 8017742:	f8c8 2000 	str.w	r2, [r8]
 8017746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801774a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801774e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017752:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017756:	9307      	str	r3, [sp, #28]
 8017758:	f8cd 8018 	str.w	r8, [sp, #24]
 801775c:	ee08 0a10 	vmov	s16, r0
 8017760:	4b9f      	ldr	r3, [pc, #636]	; (80179e0 <_printf_float+0x2dc>)
 8017762:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017766:	f04f 32ff 	mov.w	r2, #4294967295
 801776a:	f7e9 f9df 	bl	8000b2c <__aeabi_dcmpun>
 801776e:	bb88      	cbnz	r0, 80177d4 <_printf_float+0xd0>
 8017770:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017774:	4b9a      	ldr	r3, [pc, #616]	; (80179e0 <_printf_float+0x2dc>)
 8017776:	f04f 32ff 	mov.w	r2, #4294967295
 801777a:	f7e9 f9b9 	bl	8000af0 <__aeabi_dcmple>
 801777e:	bb48      	cbnz	r0, 80177d4 <_printf_float+0xd0>
 8017780:	2200      	movs	r2, #0
 8017782:	2300      	movs	r3, #0
 8017784:	4640      	mov	r0, r8
 8017786:	4649      	mov	r1, r9
 8017788:	f7e9 f9a8 	bl	8000adc <__aeabi_dcmplt>
 801778c:	b110      	cbz	r0, 8017794 <_printf_float+0x90>
 801778e:	232d      	movs	r3, #45	; 0x2d
 8017790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017794:	4b93      	ldr	r3, [pc, #588]	; (80179e4 <_printf_float+0x2e0>)
 8017796:	4894      	ldr	r0, [pc, #592]	; (80179e8 <_printf_float+0x2e4>)
 8017798:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801779c:	bf94      	ite	ls
 801779e:	4698      	movls	r8, r3
 80177a0:	4680      	movhi	r8, r0
 80177a2:	2303      	movs	r3, #3
 80177a4:	6123      	str	r3, [r4, #16]
 80177a6:	9b05      	ldr	r3, [sp, #20]
 80177a8:	f023 0204 	bic.w	r2, r3, #4
 80177ac:	6022      	str	r2, [r4, #0]
 80177ae:	f04f 0900 	mov.w	r9, #0
 80177b2:	9700      	str	r7, [sp, #0]
 80177b4:	4633      	mov	r3, r6
 80177b6:	aa0b      	add	r2, sp, #44	; 0x2c
 80177b8:	4621      	mov	r1, r4
 80177ba:	4628      	mov	r0, r5
 80177bc:	f000 f9d8 	bl	8017b70 <_printf_common>
 80177c0:	3001      	adds	r0, #1
 80177c2:	f040 8090 	bne.w	80178e6 <_printf_float+0x1e2>
 80177c6:	f04f 30ff 	mov.w	r0, #4294967295
 80177ca:	b00d      	add	sp, #52	; 0x34
 80177cc:	ecbd 8b02 	vpop	{d8}
 80177d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177d4:	4642      	mov	r2, r8
 80177d6:	464b      	mov	r3, r9
 80177d8:	4640      	mov	r0, r8
 80177da:	4649      	mov	r1, r9
 80177dc:	f7e9 f9a6 	bl	8000b2c <__aeabi_dcmpun>
 80177e0:	b140      	cbz	r0, 80177f4 <_printf_float+0xf0>
 80177e2:	464b      	mov	r3, r9
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	bfbc      	itt	lt
 80177e8:	232d      	movlt	r3, #45	; 0x2d
 80177ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80177ee:	487f      	ldr	r0, [pc, #508]	; (80179ec <_printf_float+0x2e8>)
 80177f0:	4b7f      	ldr	r3, [pc, #508]	; (80179f0 <_printf_float+0x2ec>)
 80177f2:	e7d1      	b.n	8017798 <_printf_float+0x94>
 80177f4:	6863      	ldr	r3, [r4, #4]
 80177f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80177fa:	9206      	str	r2, [sp, #24]
 80177fc:	1c5a      	adds	r2, r3, #1
 80177fe:	d13f      	bne.n	8017880 <_printf_float+0x17c>
 8017800:	2306      	movs	r3, #6
 8017802:	6063      	str	r3, [r4, #4]
 8017804:	9b05      	ldr	r3, [sp, #20]
 8017806:	6861      	ldr	r1, [r4, #4]
 8017808:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801780c:	2300      	movs	r3, #0
 801780e:	9303      	str	r3, [sp, #12]
 8017810:	ab0a      	add	r3, sp, #40	; 0x28
 8017812:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017816:	ab09      	add	r3, sp, #36	; 0x24
 8017818:	ec49 8b10 	vmov	d0, r8, r9
 801781c:	9300      	str	r3, [sp, #0]
 801781e:	6022      	str	r2, [r4, #0]
 8017820:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017824:	4628      	mov	r0, r5
 8017826:	f7ff fecd 	bl	80175c4 <__cvt>
 801782a:	9b06      	ldr	r3, [sp, #24]
 801782c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801782e:	2b47      	cmp	r3, #71	; 0x47
 8017830:	4680      	mov	r8, r0
 8017832:	d108      	bne.n	8017846 <_printf_float+0x142>
 8017834:	1cc8      	adds	r0, r1, #3
 8017836:	db02      	blt.n	801783e <_printf_float+0x13a>
 8017838:	6863      	ldr	r3, [r4, #4]
 801783a:	4299      	cmp	r1, r3
 801783c:	dd41      	ble.n	80178c2 <_printf_float+0x1be>
 801783e:	f1ab 0b02 	sub.w	fp, fp, #2
 8017842:	fa5f fb8b 	uxtb.w	fp, fp
 8017846:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801784a:	d820      	bhi.n	801788e <_printf_float+0x18a>
 801784c:	3901      	subs	r1, #1
 801784e:	465a      	mov	r2, fp
 8017850:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017854:	9109      	str	r1, [sp, #36]	; 0x24
 8017856:	f7ff ff17 	bl	8017688 <__exponent>
 801785a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801785c:	1813      	adds	r3, r2, r0
 801785e:	2a01      	cmp	r2, #1
 8017860:	4681      	mov	r9, r0
 8017862:	6123      	str	r3, [r4, #16]
 8017864:	dc02      	bgt.n	801786c <_printf_float+0x168>
 8017866:	6822      	ldr	r2, [r4, #0]
 8017868:	07d2      	lsls	r2, r2, #31
 801786a:	d501      	bpl.n	8017870 <_printf_float+0x16c>
 801786c:	3301      	adds	r3, #1
 801786e:	6123      	str	r3, [r4, #16]
 8017870:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017874:	2b00      	cmp	r3, #0
 8017876:	d09c      	beq.n	80177b2 <_printf_float+0xae>
 8017878:	232d      	movs	r3, #45	; 0x2d
 801787a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801787e:	e798      	b.n	80177b2 <_printf_float+0xae>
 8017880:	9a06      	ldr	r2, [sp, #24]
 8017882:	2a47      	cmp	r2, #71	; 0x47
 8017884:	d1be      	bne.n	8017804 <_printf_float+0x100>
 8017886:	2b00      	cmp	r3, #0
 8017888:	d1bc      	bne.n	8017804 <_printf_float+0x100>
 801788a:	2301      	movs	r3, #1
 801788c:	e7b9      	b.n	8017802 <_printf_float+0xfe>
 801788e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017892:	d118      	bne.n	80178c6 <_printf_float+0x1c2>
 8017894:	2900      	cmp	r1, #0
 8017896:	6863      	ldr	r3, [r4, #4]
 8017898:	dd0b      	ble.n	80178b2 <_printf_float+0x1ae>
 801789a:	6121      	str	r1, [r4, #16]
 801789c:	b913      	cbnz	r3, 80178a4 <_printf_float+0x1a0>
 801789e:	6822      	ldr	r2, [r4, #0]
 80178a0:	07d0      	lsls	r0, r2, #31
 80178a2:	d502      	bpl.n	80178aa <_printf_float+0x1a6>
 80178a4:	3301      	adds	r3, #1
 80178a6:	440b      	add	r3, r1
 80178a8:	6123      	str	r3, [r4, #16]
 80178aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80178ac:	f04f 0900 	mov.w	r9, #0
 80178b0:	e7de      	b.n	8017870 <_printf_float+0x16c>
 80178b2:	b913      	cbnz	r3, 80178ba <_printf_float+0x1b6>
 80178b4:	6822      	ldr	r2, [r4, #0]
 80178b6:	07d2      	lsls	r2, r2, #31
 80178b8:	d501      	bpl.n	80178be <_printf_float+0x1ba>
 80178ba:	3302      	adds	r3, #2
 80178bc:	e7f4      	b.n	80178a8 <_printf_float+0x1a4>
 80178be:	2301      	movs	r3, #1
 80178c0:	e7f2      	b.n	80178a8 <_printf_float+0x1a4>
 80178c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80178c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178c8:	4299      	cmp	r1, r3
 80178ca:	db05      	blt.n	80178d8 <_printf_float+0x1d4>
 80178cc:	6823      	ldr	r3, [r4, #0]
 80178ce:	6121      	str	r1, [r4, #16]
 80178d0:	07d8      	lsls	r0, r3, #31
 80178d2:	d5ea      	bpl.n	80178aa <_printf_float+0x1a6>
 80178d4:	1c4b      	adds	r3, r1, #1
 80178d6:	e7e7      	b.n	80178a8 <_printf_float+0x1a4>
 80178d8:	2900      	cmp	r1, #0
 80178da:	bfd4      	ite	le
 80178dc:	f1c1 0202 	rsble	r2, r1, #2
 80178e0:	2201      	movgt	r2, #1
 80178e2:	4413      	add	r3, r2
 80178e4:	e7e0      	b.n	80178a8 <_printf_float+0x1a4>
 80178e6:	6823      	ldr	r3, [r4, #0]
 80178e8:	055a      	lsls	r2, r3, #21
 80178ea:	d407      	bmi.n	80178fc <_printf_float+0x1f8>
 80178ec:	6923      	ldr	r3, [r4, #16]
 80178ee:	4642      	mov	r2, r8
 80178f0:	4631      	mov	r1, r6
 80178f2:	4628      	mov	r0, r5
 80178f4:	47b8      	blx	r7
 80178f6:	3001      	adds	r0, #1
 80178f8:	d12c      	bne.n	8017954 <_printf_float+0x250>
 80178fa:	e764      	b.n	80177c6 <_printf_float+0xc2>
 80178fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017900:	f240 80e0 	bls.w	8017ac4 <_printf_float+0x3c0>
 8017904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017908:	2200      	movs	r2, #0
 801790a:	2300      	movs	r3, #0
 801790c:	f7e9 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8017910:	2800      	cmp	r0, #0
 8017912:	d034      	beq.n	801797e <_printf_float+0x27a>
 8017914:	4a37      	ldr	r2, [pc, #220]	; (80179f4 <_printf_float+0x2f0>)
 8017916:	2301      	movs	r3, #1
 8017918:	4631      	mov	r1, r6
 801791a:	4628      	mov	r0, r5
 801791c:	47b8      	blx	r7
 801791e:	3001      	adds	r0, #1
 8017920:	f43f af51 	beq.w	80177c6 <_printf_float+0xc2>
 8017924:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017928:	429a      	cmp	r2, r3
 801792a:	db02      	blt.n	8017932 <_printf_float+0x22e>
 801792c:	6823      	ldr	r3, [r4, #0]
 801792e:	07d8      	lsls	r0, r3, #31
 8017930:	d510      	bpl.n	8017954 <_printf_float+0x250>
 8017932:	ee18 3a10 	vmov	r3, s16
 8017936:	4652      	mov	r2, sl
 8017938:	4631      	mov	r1, r6
 801793a:	4628      	mov	r0, r5
 801793c:	47b8      	blx	r7
 801793e:	3001      	adds	r0, #1
 8017940:	f43f af41 	beq.w	80177c6 <_printf_float+0xc2>
 8017944:	f04f 0800 	mov.w	r8, #0
 8017948:	f104 091a 	add.w	r9, r4, #26
 801794c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801794e:	3b01      	subs	r3, #1
 8017950:	4543      	cmp	r3, r8
 8017952:	dc09      	bgt.n	8017968 <_printf_float+0x264>
 8017954:	6823      	ldr	r3, [r4, #0]
 8017956:	079b      	lsls	r3, r3, #30
 8017958:	f100 8105 	bmi.w	8017b66 <_printf_float+0x462>
 801795c:	68e0      	ldr	r0, [r4, #12]
 801795e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017960:	4298      	cmp	r0, r3
 8017962:	bfb8      	it	lt
 8017964:	4618      	movlt	r0, r3
 8017966:	e730      	b.n	80177ca <_printf_float+0xc6>
 8017968:	2301      	movs	r3, #1
 801796a:	464a      	mov	r2, r9
 801796c:	4631      	mov	r1, r6
 801796e:	4628      	mov	r0, r5
 8017970:	47b8      	blx	r7
 8017972:	3001      	adds	r0, #1
 8017974:	f43f af27 	beq.w	80177c6 <_printf_float+0xc2>
 8017978:	f108 0801 	add.w	r8, r8, #1
 801797c:	e7e6      	b.n	801794c <_printf_float+0x248>
 801797e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017980:	2b00      	cmp	r3, #0
 8017982:	dc39      	bgt.n	80179f8 <_printf_float+0x2f4>
 8017984:	4a1b      	ldr	r2, [pc, #108]	; (80179f4 <_printf_float+0x2f0>)
 8017986:	2301      	movs	r3, #1
 8017988:	4631      	mov	r1, r6
 801798a:	4628      	mov	r0, r5
 801798c:	47b8      	blx	r7
 801798e:	3001      	adds	r0, #1
 8017990:	f43f af19 	beq.w	80177c6 <_printf_float+0xc2>
 8017994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017998:	4313      	orrs	r3, r2
 801799a:	d102      	bne.n	80179a2 <_printf_float+0x29e>
 801799c:	6823      	ldr	r3, [r4, #0]
 801799e:	07d9      	lsls	r1, r3, #31
 80179a0:	d5d8      	bpl.n	8017954 <_printf_float+0x250>
 80179a2:	ee18 3a10 	vmov	r3, s16
 80179a6:	4652      	mov	r2, sl
 80179a8:	4631      	mov	r1, r6
 80179aa:	4628      	mov	r0, r5
 80179ac:	47b8      	blx	r7
 80179ae:	3001      	adds	r0, #1
 80179b0:	f43f af09 	beq.w	80177c6 <_printf_float+0xc2>
 80179b4:	f04f 0900 	mov.w	r9, #0
 80179b8:	f104 0a1a 	add.w	sl, r4, #26
 80179bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179be:	425b      	negs	r3, r3
 80179c0:	454b      	cmp	r3, r9
 80179c2:	dc01      	bgt.n	80179c8 <_printf_float+0x2c4>
 80179c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80179c6:	e792      	b.n	80178ee <_printf_float+0x1ea>
 80179c8:	2301      	movs	r3, #1
 80179ca:	4652      	mov	r2, sl
 80179cc:	4631      	mov	r1, r6
 80179ce:	4628      	mov	r0, r5
 80179d0:	47b8      	blx	r7
 80179d2:	3001      	adds	r0, #1
 80179d4:	f43f aef7 	beq.w	80177c6 <_printf_float+0xc2>
 80179d8:	f109 0901 	add.w	r9, r9, #1
 80179dc:	e7ee      	b.n	80179bc <_printf_float+0x2b8>
 80179de:	bf00      	nop
 80179e0:	7fefffff 	.word	0x7fefffff
 80179e4:	0801a88c 	.word	0x0801a88c
 80179e8:	0801a890 	.word	0x0801a890
 80179ec:	0801a898 	.word	0x0801a898
 80179f0:	0801a894 	.word	0x0801a894
 80179f4:	0801a89c 	.word	0x0801a89c
 80179f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80179fc:	429a      	cmp	r2, r3
 80179fe:	bfa8      	it	ge
 8017a00:	461a      	movge	r2, r3
 8017a02:	2a00      	cmp	r2, #0
 8017a04:	4691      	mov	r9, r2
 8017a06:	dc37      	bgt.n	8017a78 <_printf_float+0x374>
 8017a08:	f04f 0b00 	mov.w	fp, #0
 8017a0c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a10:	f104 021a 	add.w	r2, r4, #26
 8017a14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017a16:	9305      	str	r3, [sp, #20]
 8017a18:	eba3 0309 	sub.w	r3, r3, r9
 8017a1c:	455b      	cmp	r3, fp
 8017a1e:	dc33      	bgt.n	8017a88 <_printf_float+0x384>
 8017a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017a24:	429a      	cmp	r2, r3
 8017a26:	db3b      	blt.n	8017aa0 <_printf_float+0x39c>
 8017a28:	6823      	ldr	r3, [r4, #0]
 8017a2a:	07da      	lsls	r2, r3, #31
 8017a2c:	d438      	bmi.n	8017aa0 <_printf_float+0x39c>
 8017a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a30:	9b05      	ldr	r3, [sp, #20]
 8017a32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017a34:	1ad3      	subs	r3, r2, r3
 8017a36:	eba2 0901 	sub.w	r9, r2, r1
 8017a3a:	4599      	cmp	r9, r3
 8017a3c:	bfa8      	it	ge
 8017a3e:	4699      	movge	r9, r3
 8017a40:	f1b9 0f00 	cmp.w	r9, #0
 8017a44:	dc35      	bgt.n	8017ab2 <_printf_float+0x3ae>
 8017a46:	f04f 0800 	mov.w	r8, #0
 8017a4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017a4e:	f104 0a1a 	add.w	sl, r4, #26
 8017a52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017a56:	1a9b      	subs	r3, r3, r2
 8017a58:	eba3 0309 	sub.w	r3, r3, r9
 8017a5c:	4543      	cmp	r3, r8
 8017a5e:	f77f af79 	ble.w	8017954 <_printf_float+0x250>
 8017a62:	2301      	movs	r3, #1
 8017a64:	4652      	mov	r2, sl
 8017a66:	4631      	mov	r1, r6
 8017a68:	4628      	mov	r0, r5
 8017a6a:	47b8      	blx	r7
 8017a6c:	3001      	adds	r0, #1
 8017a6e:	f43f aeaa 	beq.w	80177c6 <_printf_float+0xc2>
 8017a72:	f108 0801 	add.w	r8, r8, #1
 8017a76:	e7ec      	b.n	8017a52 <_printf_float+0x34e>
 8017a78:	4613      	mov	r3, r2
 8017a7a:	4631      	mov	r1, r6
 8017a7c:	4642      	mov	r2, r8
 8017a7e:	4628      	mov	r0, r5
 8017a80:	47b8      	blx	r7
 8017a82:	3001      	adds	r0, #1
 8017a84:	d1c0      	bne.n	8017a08 <_printf_float+0x304>
 8017a86:	e69e      	b.n	80177c6 <_printf_float+0xc2>
 8017a88:	2301      	movs	r3, #1
 8017a8a:	4631      	mov	r1, r6
 8017a8c:	4628      	mov	r0, r5
 8017a8e:	9205      	str	r2, [sp, #20]
 8017a90:	47b8      	blx	r7
 8017a92:	3001      	adds	r0, #1
 8017a94:	f43f ae97 	beq.w	80177c6 <_printf_float+0xc2>
 8017a98:	9a05      	ldr	r2, [sp, #20]
 8017a9a:	f10b 0b01 	add.w	fp, fp, #1
 8017a9e:	e7b9      	b.n	8017a14 <_printf_float+0x310>
 8017aa0:	ee18 3a10 	vmov	r3, s16
 8017aa4:	4652      	mov	r2, sl
 8017aa6:	4631      	mov	r1, r6
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	47b8      	blx	r7
 8017aac:	3001      	adds	r0, #1
 8017aae:	d1be      	bne.n	8017a2e <_printf_float+0x32a>
 8017ab0:	e689      	b.n	80177c6 <_printf_float+0xc2>
 8017ab2:	9a05      	ldr	r2, [sp, #20]
 8017ab4:	464b      	mov	r3, r9
 8017ab6:	4442      	add	r2, r8
 8017ab8:	4631      	mov	r1, r6
 8017aba:	4628      	mov	r0, r5
 8017abc:	47b8      	blx	r7
 8017abe:	3001      	adds	r0, #1
 8017ac0:	d1c1      	bne.n	8017a46 <_printf_float+0x342>
 8017ac2:	e680      	b.n	80177c6 <_printf_float+0xc2>
 8017ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017ac6:	2a01      	cmp	r2, #1
 8017ac8:	dc01      	bgt.n	8017ace <_printf_float+0x3ca>
 8017aca:	07db      	lsls	r3, r3, #31
 8017acc:	d538      	bpl.n	8017b40 <_printf_float+0x43c>
 8017ace:	2301      	movs	r3, #1
 8017ad0:	4642      	mov	r2, r8
 8017ad2:	4631      	mov	r1, r6
 8017ad4:	4628      	mov	r0, r5
 8017ad6:	47b8      	blx	r7
 8017ad8:	3001      	adds	r0, #1
 8017ada:	f43f ae74 	beq.w	80177c6 <_printf_float+0xc2>
 8017ade:	ee18 3a10 	vmov	r3, s16
 8017ae2:	4652      	mov	r2, sl
 8017ae4:	4631      	mov	r1, r6
 8017ae6:	4628      	mov	r0, r5
 8017ae8:	47b8      	blx	r7
 8017aea:	3001      	adds	r0, #1
 8017aec:	f43f ae6b 	beq.w	80177c6 <_printf_float+0xc2>
 8017af0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017af4:	2200      	movs	r2, #0
 8017af6:	2300      	movs	r3, #0
 8017af8:	f7e8 ffe6 	bl	8000ac8 <__aeabi_dcmpeq>
 8017afc:	b9d8      	cbnz	r0, 8017b36 <_printf_float+0x432>
 8017afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b00:	f108 0201 	add.w	r2, r8, #1
 8017b04:	3b01      	subs	r3, #1
 8017b06:	4631      	mov	r1, r6
 8017b08:	4628      	mov	r0, r5
 8017b0a:	47b8      	blx	r7
 8017b0c:	3001      	adds	r0, #1
 8017b0e:	d10e      	bne.n	8017b2e <_printf_float+0x42a>
 8017b10:	e659      	b.n	80177c6 <_printf_float+0xc2>
 8017b12:	2301      	movs	r3, #1
 8017b14:	4652      	mov	r2, sl
 8017b16:	4631      	mov	r1, r6
 8017b18:	4628      	mov	r0, r5
 8017b1a:	47b8      	blx	r7
 8017b1c:	3001      	adds	r0, #1
 8017b1e:	f43f ae52 	beq.w	80177c6 <_printf_float+0xc2>
 8017b22:	f108 0801 	add.w	r8, r8, #1
 8017b26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b28:	3b01      	subs	r3, #1
 8017b2a:	4543      	cmp	r3, r8
 8017b2c:	dcf1      	bgt.n	8017b12 <_printf_float+0x40e>
 8017b2e:	464b      	mov	r3, r9
 8017b30:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017b34:	e6dc      	b.n	80178f0 <_printf_float+0x1ec>
 8017b36:	f04f 0800 	mov.w	r8, #0
 8017b3a:	f104 0a1a 	add.w	sl, r4, #26
 8017b3e:	e7f2      	b.n	8017b26 <_printf_float+0x422>
 8017b40:	2301      	movs	r3, #1
 8017b42:	4642      	mov	r2, r8
 8017b44:	e7df      	b.n	8017b06 <_printf_float+0x402>
 8017b46:	2301      	movs	r3, #1
 8017b48:	464a      	mov	r2, r9
 8017b4a:	4631      	mov	r1, r6
 8017b4c:	4628      	mov	r0, r5
 8017b4e:	47b8      	blx	r7
 8017b50:	3001      	adds	r0, #1
 8017b52:	f43f ae38 	beq.w	80177c6 <_printf_float+0xc2>
 8017b56:	f108 0801 	add.w	r8, r8, #1
 8017b5a:	68e3      	ldr	r3, [r4, #12]
 8017b5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017b5e:	1a5b      	subs	r3, r3, r1
 8017b60:	4543      	cmp	r3, r8
 8017b62:	dcf0      	bgt.n	8017b46 <_printf_float+0x442>
 8017b64:	e6fa      	b.n	801795c <_printf_float+0x258>
 8017b66:	f04f 0800 	mov.w	r8, #0
 8017b6a:	f104 0919 	add.w	r9, r4, #25
 8017b6e:	e7f4      	b.n	8017b5a <_printf_float+0x456>

08017b70 <_printf_common>:
 8017b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b74:	4616      	mov	r6, r2
 8017b76:	4699      	mov	r9, r3
 8017b78:	688a      	ldr	r2, [r1, #8]
 8017b7a:	690b      	ldr	r3, [r1, #16]
 8017b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017b80:	4293      	cmp	r3, r2
 8017b82:	bfb8      	it	lt
 8017b84:	4613      	movlt	r3, r2
 8017b86:	6033      	str	r3, [r6, #0]
 8017b88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017b8c:	4607      	mov	r7, r0
 8017b8e:	460c      	mov	r4, r1
 8017b90:	b10a      	cbz	r2, 8017b96 <_printf_common+0x26>
 8017b92:	3301      	adds	r3, #1
 8017b94:	6033      	str	r3, [r6, #0]
 8017b96:	6823      	ldr	r3, [r4, #0]
 8017b98:	0699      	lsls	r1, r3, #26
 8017b9a:	bf42      	ittt	mi
 8017b9c:	6833      	ldrmi	r3, [r6, #0]
 8017b9e:	3302      	addmi	r3, #2
 8017ba0:	6033      	strmi	r3, [r6, #0]
 8017ba2:	6825      	ldr	r5, [r4, #0]
 8017ba4:	f015 0506 	ands.w	r5, r5, #6
 8017ba8:	d106      	bne.n	8017bb8 <_printf_common+0x48>
 8017baa:	f104 0a19 	add.w	sl, r4, #25
 8017bae:	68e3      	ldr	r3, [r4, #12]
 8017bb0:	6832      	ldr	r2, [r6, #0]
 8017bb2:	1a9b      	subs	r3, r3, r2
 8017bb4:	42ab      	cmp	r3, r5
 8017bb6:	dc26      	bgt.n	8017c06 <_printf_common+0x96>
 8017bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017bbc:	1e13      	subs	r3, r2, #0
 8017bbe:	6822      	ldr	r2, [r4, #0]
 8017bc0:	bf18      	it	ne
 8017bc2:	2301      	movne	r3, #1
 8017bc4:	0692      	lsls	r2, r2, #26
 8017bc6:	d42b      	bmi.n	8017c20 <_printf_common+0xb0>
 8017bc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017bcc:	4649      	mov	r1, r9
 8017bce:	4638      	mov	r0, r7
 8017bd0:	47c0      	blx	r8
 8017bd2:	3001      	adds	r0, #1
 8017bd4:	d01e      	beq.n	8017c14 <_printf_common+0xa4>
 8017bd6:	6823      	ldr	r3, [r4, #0]
 8017bd8:	68e5      	ldr	r5, [r4, #12]
 8017bda:	6832      	ldr	r2, [r6, #0]
 8017bdc:	f003 0306 	and.w	r3, r3, #6
 8017be0:	2b04      	cmp	r3, #4
 8017be2:	bf08      	it	eq
 8017be4:	1aad      	subeq	r5, r5, r2
 8017be6:	68a3      	ldr	r3, [r4, #8]
 8017be8:	6922      	ldr	r2, [r4, #16]
 8017bea:	bf0c      	ite	eq
 8017bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017bf0:	2500      	movne	r5, #0
 8017bf2:	4293      	cmp	r3, r2
 8017bf4:	bfc4      	itt	gt
 8017bf6:	1a9b      	subgt	r3, r3, r2
 8017bf8:	18ed      	addgt	r5, r5, r3
 8017bfa:	2600      	movs	r6, #0
 8017bfc:	341a      	adds	r4, #26
 8017bfe:	42b5      	cmp	r5, r6
 8017c00:	d11a      	bne.n	8017c38 <_printf_common+0xc8>
 8017c02:	2000      	movs	r0, #0
 8017c04:	e008      	b.n	8017c18 <_printf_common+0xa8>
 8017c06:	2301      	movs	r3, #1
 8017c08:	4652      	mov	r2, sl
 8017c0a:	4649      	mov	r1, r9
 8017c0c:	4638      	mov	r0, r7
 8017c0e:	47c0      	blx	r8
 8017c10:	3001      	adds	r0, #1
 8017c12:	d103      	bne.n	8017c1c <_printf_common+0xac>
 8017c14:	f04f 30ff 	mov.w	r0, #4294967295
 8017c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c1c:	3501      	adds	r5, #1
 8017c1e:	e7c6      	b.n	8017bae <_printf_common+0x3e>
 8017c20:	18e1      	adds	r1, r4, r3
 8017c22:	1c5a      	adds	r2, r3, #1
 8017c24:	2030      	movs	r0, #48	; 0x30
 8017c26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017c2a:	4422      	add	r2, r4
 8017c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017c30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017c34:	3302      	adds	r3, #2
 8017c36:	e7c7      	b.n	8017bc8 <_printf_common+0x58>
 8017c38:	2301      	movs	r3, #1
 8017c3a:	4622      	mov	r2, r4
 8017c3c:	4649      	mov	r1, r9
 8017c3e:	4638      	mov	r0, r7
 8017c40:	47c0      	blx	r8
 8017c42:	3001      	adds	r0, #1
 8017c44:	d0e6      	beq.n	8017c14 <_printf_common+0xa4>
 8017c46:	3601      	adds	r6, #1
 8017c48:	e7d9      	b.n	8017bfe <_printf_common+0x8e>
	...

08017c4c <_printf_i>:
 8017c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017c50:	460c      	mov	r4, r1
 8017c52:	4691      	mov	r9, r2
 8017c54:	7e27      	ldrb	r7, [r4, #24]
 8017c56:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017c58:	2f78      	cmp	r7, #120	; 0x78
 8017c5a:	4680      	mov	r8, r0
 8017c5c:	469a      	mov	sl, r3
 8017c5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017c62:	d807      	bhi.n	8017c74 <_printf_i+0x28>
 8017c64:	2f62      	cmp	r7, #98	; 0x62
 8017c66:	d80a      	bhi.n	8017c7e <_printf_i+0x32>
 8017c68:	2f00      	cmp	r7, #0
 8017c6a:	f000 80d8 	beq.w	8017e1e <_printf_i+0x1d2>
 8017c6e:	2f58      	cmp	r7, #88	; 0x58
 8017c70:	f000 80a3 	beq.w	8017dba <_printf_i+0x16e>
 8017c74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017c78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017c7c:	e03a      	b.n	8017cf4 <_printf_i+0xa8>
 8017c7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017c82:	2b15      	cmp	r3, #21
 8017c84:	d8f6      	bhi.n	8017c74 <_printf_i+0x28>
 8017c86:	a001      	add	r0, pc, #4	; (adr r0, 8017c8c <_printf_i+0x40>)
 8017c88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017c8c:	08017ce5 	.word	0x08017ce5
 8017c90:	08017cf9 	.word	0x08017cf9
 8017c94:	08017c75 	.word	0x08017c75
 8017c98:	08017c75 	.word	0x08017c75
 8017c9c:	08017c75 	.word	0x08017c75
 8017ca0:	08017c75 	.word	0x08017c75
 8017ca4:	08017cf9 	.word	0x08017cf9
 8017ca8:	08017c75 	.word	0x08017c75
 8017cac:	08017c75 	.word	0x08017c75
 8017cb0:	08017c75 	.word	0x08017c75
 8017cb4:	08017c75 	.word	0x08017c75
 8017cb8:	08017e05 	.word	0x08017e05
 8017cbc:	08017d29 	.word	0x08017d29
 8017cc0:	08017de7 	.word	0x08017de7
 8017cc4:	08017c75 	.word	0x08017c75
 8017cc8:	08017c75 	.word	0x08017c75
 8017ccc:	08017e27 	.word	0x08017e27
 8017cd0:	08017c75 	.word	0x08017c75
 8017cd4:	08017d29 	.word	0x08017d29
 8017cd8:	08017c75 	.word	0x08017c75
 8017cdc:	08017c75 	.word	0x08017c75
 8017ce0:	08017def 	.word	0x08017def
 8017ce4:	680b      	ldr	r3, [r1, #0]
 8017ce6:	1d1a      	adds	r2, r3, #4
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	600a      	str	r2, [r1, #0]
 8017cec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017cf4:	2301      	movs	r3, #1
 8017cf6:	e0a3      	b.n	8017e40 <_printf_i+0x1f4>
 8017cf8:	6825      	ldr	r5, [r4, #0]
 8017cfa:	6808      	ldr	r0, [r1, #0]
 8017cfc:	062e      	lsls	r6, r5, #24
 8017cfe:	f100 0304 	add.w	r3, r0, #4
 8017d02:	d50a      	bpl.n	8017d1a <_printf_i+0xce>
 8017d04:	6805      	ldr	r5, [r0, #0]
 8017d06:	600b      	str	r3, [r1, #0]
 8017d08:	2d00      	cmp	r5, #0
 8017d0a:	da03      	bge.n	8017d14 <_printf_i+0xc8>
 8017d0c:	232d      	movs	r3, #45	; 0x2d
 8017d0e:	426d      	negs	r5, r5
 8017d10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d14:	485e      	ldr	r0, [pc, #376]	; (8017e90 <_printf_i+0x244>)
 8017d16:	230a      	movs	r3, #10
 8017d18:	e019      	b.n	8017d4e <_printf_i+0x102>
 8017d1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017d1e:	6805      	ldr	r5, [r0, #0]
 8017d20:	600b      	str	r3, [r1, #0]
 8017d22:	bf18      	it	ne
 8017d24:	b22d      	sxthne	r5, r5
 8017d26:	e7ef      	b.n	8017d08 <_printf_i+0xbc>
 8017d28:	680b      	ldr	r3, [r1, #0]
 8017d2a:	6825      	ldr	r5, [r4, #0]
 8017d2c:	1d18      	adds	r0, r3, #4
 8017d2e:	6008      	str	r0, [r1, #0]
 8017d30:	0628      	lsls	r0, r5, #24
 8017d32:	d501      	bpl.n	8017d38 <_printf_i+0xec>
 8017d34:	681d      	ldr	r5, [r3, #0]
 8017d36:	e002      	b.n	8017d3e <_printf_i+0xf2>
 8017d38:	0669      	lsls	r1, r5, #25
 8017d3a:	d5fb      	bpl.n	8017d34 <_printf_i+0xe8>
 8017d3c:	881d      	ldrh	r5, [r3, #0]
 8017d3e:	4854      	ldr	r0, [pc, #336]	; (8017e90 <_printf_i+0x244>)
 8017d40:	2f6f      	cmp	r7, #111	; 0x6f
 8017d42:	bf0c      	ite	eq
 8017d44:	2308      	moveq	r3, #8
 8017d46:	230a      	movne	r3, #10
 8017d48:	2100      	movs	r1, #0
 8017d4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017d4e:	6866      	ldr	r6, [r4, #4]
 8017d50:	60a6      	str	r6, [r4, #8]
 8017d52:	2e00      	cmp	r6, #0
 8017d54:	bfa2      	ittt	ge
 8017d56:	6821      	ldrge	r1, [r4, #0]
 8017d58:	f021 0104 	bicge.w	r1, r1, #4
 8017d5c:	6021      	strge	r1, [r4, #0]
 8017d5e:	b90d      	cbnz	r5, 8017d64 <_printf_i+0x118>
 8017d60:	2e00      	cmp	r6, #0
 8017d62:	d04d      	beq.n	8017e00 <_printf_i+0x1b4>
 8017d64:	4616      	mov	r6, r2
 8017d66:	fbb5 f1f3 	udiv	r1, r5, r3
 8017d6a:	fb03 5711 	mls	r7, r3, r1, r5
 8017d6e:	5dc7      	ldrb	r7, [r0, r7]
 8017d70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017d74:	462f      	mov	r7, r5
 8017d76:	42bb      	cmp	r3, r7
 8017d78:	460d      	mov	r5, r1
 8017d7a:	d9f4      	bls.n	8017d66 <_printf_i+0x11a>
 8017d7c:	2b08      	cmp	r3, #8
 8017d7e:	d10b      	bne.n	8017d98 <_printf_i+0x14c>
 8017d80:	6823      	ldr	r3, [r4, #0]
 8017d82:	07df      	lsls	r7, r3, #31
 8017d84:	d508      	bpl.n	8017d98 <_printf_i+0x14c>
 8017d86:	6923      	ldr	r3, [r4, #16]
 8017d88:	6861      	ldr	r1, [r4, #4]
 8017d8a:	4299      	cmp	r1, r3
 8017d8c:	bfde      	ittt	le
 8017d8e:	2330      	movle	r3, #48	; 0x30
 8017d90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017d94:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017d98:	1b92      	subs	r2, r2, r6
 8017d9a:	6122      	str	r2, [r4, #16]
 8017d9c:	f8cd a000 	str.w	sl, [sp]
 8017da0:	464b      	mov	r3, r9
 8017da2:	aa03      	add	r2, sp, #12
 8017da4:	4621      	mov	r1, r4
 8017da6:	4640      	mov	r0, r8
 8017da8:	f7ff fee2 	bl	8017b70 <_printf_common>
 8017dac:	3001      	adds	r0, #1
 8017dae:	d14c      	bne.n	8017e4a <_printf_i+0x1fe>
 8017db0:	f04f 30ff 	mov.w	r0, #4294967295
 8017db4:	b004      	add	sp, #16
 8017db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dba:	4835      	ldr	r0, [pc, #212]	; (8017e90 <_printf_i+0x244>)
 8017dbc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017dc0:	6823      	ldr	r3, [r4, #0]
 8017dc2:	680e      	ldr	r6, [r1, #0]
 8017dc4:	061f      	lsls	r7, r3, #24
 8017dc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8017dca:	600e      	str	r6, [r1, #0]
 8017dcc:	d514      	bpl.n	8017df8 <_printf_i+0x1ac>
 8017dce:	07d9      	lsls	r1, r3, #31
 8017dd0:	bf44      	itt	mi
 8017dd2:	f043 0320 	orrmi.w	r3, r3, #32
 8017dd6:	6023      	strmi	r3, [r4, #0]
 8017dd8:	b91d      	cbnz	r5, 8017de2 <_printf_i+0x196>
 8017dda:	6823      	ldr	r3, [r4, #0]
 8017ddc:	f023 0320 	bic.w	r3, r3, #32
 8017de0:	6023      	str	r3, [r4, #0]
 8017de2:	2310      	movs	r3, #16
 8017de4:	e7b0      	b.n	8017d48 <_printf_i+0xfc>
 8017de6:	6823      	ldr	r3, [r4, #0]
 8017de8:	f043 0320 	orr.w	r3, r3, #32
 8017dec:	6023      	str	r3, [r4, #0]
 8017dee:	2378      	movs	r3, #120	; 0x78
 8017df0:	4828      	ldr	r0, [pc, #160]	; (8017e94 <_printf_i+0x248>)
 8017df2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017df6:	e7e3      	b.n	8017dc0 <_printf_i+0x174>
 8017df8:	065e      	lsls	r6, r3, #25
 8017dfa:	bf48      	it	mi
 8017dfc:	b2ad      	uxthmi	r5, r5
 8017dfe:	e7e6      	b.n	8017dce <_printf_i+0x182>
 8017e00:	4616      	mov	r6, r2
 8017e02:	e7bb      	b.n	8017d7c <_printf_i+0x130>
 8017e04:	680b      	ldr	r3, [r1, #0]
 8017e06:	6826      	ldr	r6, [r4, #0]
 8017e08:	6960      	ldr	r0, [r4, #20]
 8017e0a:	1d1d      	adds	r5, r3, #4
 8017e0c:	600d      	str	r5, [r1, #0]
 8017e0e:	0635      	lsls	r5, r6, #24
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	d501      	bpl.n	8017e18 <_printf_i+0x1cc>
 8017e14:	6018      	str	r0, [r3, #0]
 8017e16:	e002      	b.n	8017e1e <_printf_i+0x1d2>
 8017e18:	0671      	lsls	r1, r6, #25
 8017e1a:	d5fb      	bpl.n	8017e14 <_printf_i+0x1c8>
 8017e1c:	8018      	strh	r0, [r3, #0]
 8017e1e:	2300      	movs	r3, #0
 8017e20:	6123      	str	r3, [r4, #16]
 8017e22:	4616      	mov	r6, r2
 8017e24:	e7ba      	b.n	8017d9c <_printf_i+0x150>
 8017e26:	680b      	ldr	r3, [r1, #0]
 8017e28:	1d1a      	adds	r2, r3, #4
 8017e2a:	600a      	str	r2, [r1, #0]
 8017e2c:	681e      	ldr	r6, [r3, #0]
 8017e2e:	6862      	ldr	r2, [r4, #4]
 8017e30:	2100      	movs	r1, #0
 8017e32:	4630      	mov	r0, r6
 8017e34:	f7e8 f9d4 	bl	80001e0 <memchr>
 8017e38:	b108      	cbz	r0, 8017e3e <_printf_i+0x1f2>
 8017e3a:	1b80      	subs	r0, r0, r6
 8017e3c:	6060      	str	r0, [r4, #4]
 8017e3e:	6863      	ldr	r3, [r4, #4]
 8017e40:	6123      	str	r3, [r4, #16]
 8017e42:	2300      	movs	r3, #0
 8017e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017e48:	e7a8      	b.n	8017d9c <_printf_i+0x150>
 8017e4a:	6923      	ldr	r3, [r4, #16]
 8017e4c:	4632      	mov	r2, r6
 8017e4e:	4649      	mov	r1, r9
 8017e50:	4640      	mov	r0, r8
 8017e52:	47d0      	blx	sl
 8017e54:	3001      	adds	r0, #1
 8017e56:	d0ab      	beq.n	8017db0 <_printf_i+0x164>
 8017e58:	6823      	ldr	r3, [r4, #0]
 8017e5a:	079b      	lsls	r3, r3, #30
 8017e5c:	d413      	bmi.n	8017e86 <_printf_i+0x23a>
 8017e5e:	68e0      	ldr	r0, [r4, #12]
 8017e60:	9b03      	ldr	r3, [sp, #12]
 8017e62:	4298      	cmp	r0, r3
 8017e64:	bfb8      	it	lt
 8017e66:	4618      	movlt	r0, r3
 8017e68:	e7a4      	b.n	8017db4 <_printf_i+0x168>
 8017e6a:	2301      	movs	r3, #1
 8017e6c:	4632      	mov	r2, r6
 8017e6e:	4649      	mov	r1, r9
 8017e70:	4640      	mov	r0, r8
 8017e72:	47d0      	blx	sl
 8017e74:	3001      	adds	r0, #1
 8017e76:	d09b      	beq.n	8017db0 <_printf_i+0x164>
 8017e78:	3501      	adds	r5, #1
 8017e7a:	68e3      	ldr	r3, [r4, #12]
 8017e7c:	9903      	ldr	r1, [sp, #12]
 8017e7e:	1a5b      	subs	r3, r3, r1
 8017e80:	42ab      	cmp	r3, r5
 8017e82:	dcf2      	bgt.n	8017e6a <_printf_i+0x21e>
 8017e84:	e7eb      	b.n	8017e5e <_printf_i+0x212>
 8017e86:	2500      	movs	r5, #0
 8017e88:	f104 0619 	add.w	r6, r4, #25
 8017e8c:	e7f5      	b.n	8017e7a <_printf_i+0x22e>
 8017e8e:	bf00      	nop
 8017e90:	0801a89e 	.word	0x0801a89e
 8017e94:	0801a8af 	.word	0x0801a8af

08017e98 <iprintf>:
 8017e98:	b40f      	push	{r0, r1, r2, r3}
 8017e9a:	4b0a      	ldr	r3, [pc, #40]	; (8017ec4 <iprintf+0x2c>)
 8017e9c:	b513      	push	{r0, r1, r4, lr}
 8017e9e:	681c      	ldr	r4, [r3, #0]
 8017ea0:	b124      	cbz	r4, 8017eac <iprintf+0x14>
 8017ea2:	69a3      	ldr	r3, [r4, #24]
 8017ea4:	b913      	cbnz	r3, 8017eac <iprintf+0x14>
 8017ea6:	4620      	mov	r0, r4
 8017ea8:	f000 ff66 	bl	8018d78 <__sinit>
 8017eac:	ab05      	add	r3, sp, #20
 8017eae:	9a04      	ldr	r2, [sp, #16]
 8017eb0:	68a1      	ldr	r1, [r4, #8]
 8017eb2:	9301      	str	r3, [sp, #4]
 8017eb4:	4620      	mov	r0, r4
 8017eb6:	f001 fd23 	bl	8019900 <_vfiprintf_r>
 8017eba:	b002      	add	sp, #8
 8017ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ec0:	b004      	add	sp, #16
 8017ec2:	4770      	bx	lr
 8017ec4:	200000f0 	.word	0x200000f0

08017ec8 <_sbrk_r>:
 8017ec8:	b538      	push	{r3, r4, r5, lr}
 8017eca:	4d06      	ldr	r5, [pc, #24]	; (8017ee4 <_sbrk_r+0x1c>)
 8017ecc:	2300      	movs	r3, #0
 8017ece:	4604      	mov	r4, r0
 8017ed0:	4608      	mov	r0, r1
 8017ed2:	602b      	str	r3, [r5, #0]
 8017ed4:	f7ea fc0e 	bl	80026f4 <_sbrk>
 8017ed8:	1c43      	adds	r3, r0, #1
 8017eda:	d102      	bne.n	8017ee2 <_sbrk_r+0x1a>
 8017edc:	682b      	ldr	r3, [r5, #0]
 8017ede:	b103      	cbz	r3, 8017ee2 <_sbrk_r+0x1a>
 8017ee0:	6023      	str	r3, [r4, #0]
 8017ee2:	bd38      	pop	{r3, r4, r5, pc}
 8017ee4:	20001a04 	.word	0x20001a04

08017ee8 <_raise_r>:
 8017ee8:	291f      	cmp	r1, #31
 8017eea:	b538      	push	{r3, r4, r5, lr}
 8017eec:	4604      	mov	r4, r0
 8017eee:	460d      	mov	r5, r1
 8017ef0:	d904      	bls.n	8017efc <_raise_r+0x14>
 8017ef2:	2316      	movs	r3, #22
 8017ef4:	6003      	str	r3, [r0, #0]
 8017ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8017efa:	bd38      	pop	{r3, r4, r5, pc}
 8017efc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017efe:	b112      	cbz	r2, 8017f06 <_raise_r+0x1e>
 8017f00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017f04:	b94b      	cbnz	r3, 8017f1a <_raise_r+0x32>
 8017f06:	4620      	mov	r0, r4
 8017f08:	f000 f830 	bl	8017f6c <_getpid_r>
 8017f0c:	462a      	mov	r2, r5
 8017f0e:	4601      	mov	r1, r0
 8017f10:	4620      	mov	r0, r4
 8017f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f16:	f000 b817 	b.w	8017f48 <_kill_r>
 8017f1a:	2b01      	cmp	r3, #1
 8017f1c:	d00a      	beq.n	8017f34 <_raise_r+0x4c>
 8017f1e:	1c59      	adds	r1, r3, #1
 8017f20:	d103      	bne.n	8017f2a <_raise_r+0x42>
 8017f22:	2316      	movs	r3, #22
 8017f24:	6003      	str	r3, [r0, #0]
 8017f26:	2001      	movs	r0, #1
 8017f28:	e7e7      	b.n	8017efa <_raise_r+0x12>
 8017f2a:	2400      	movs	r4, #0
 8017f2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017f30:	4628      	mov	r0, r5
 8017f32:	4798      	blx	r3
 8017f34:	2000      	movs	r0, #0
 8017f36:	e7e0      	b.n	8017efa <_raise_r+0x12>

08017f38 <raise>:
 8017f38:	4b02      	ldr	r3, [pc, #8]	; (8017f44 <raise+0xc>)
 8017f3a:	4601      	mov	r1, r0
 8017f3c:	6818      	ldr	r0, [r3, #0]
 8017f3e:	f7ff bfd3 	b.w	8017ee8 <_raise_r>
 8017f42:	bf00      	nop
 8017f44:	200000f0 	.word	0x200000f0

08017f48 <_kill_r>:
 8017f48:	b538      	push	{r3, r4, r5, lr}
 8017f4a:	4d07      	ldr	r5, [pc, #28]	; (8017f68 <_kill_r+0x20>)
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	4604      	mov	r4, r0
 8017f50:	4608      	mov	r0, r1
 8017f52:	4611      	mov	r1, r2
 8017f54:	602b      	str	r3, [r5, #0]
 8017f56:	f7ea fb45 	bl	80025e4 <_kill>
 8017f5a:	1c43      	adds	r3, r0, #1
 8017f5c:	d102      	bne.n	8017f64 <_kill_r+0x1c>
 8017f5e:	682b      	ldr	r3, [r5, #0]
 8017f60:	b103      	cbz	r3, 8017f64 <_kill_r+0x1c>
 8017f62:	6023      	str	r3, [r4, #0]
 8017f64:	bd38      	pop	{r3, r4, r5, pc}
 8017f66:	bf00      	nop
 8017f68:	20001a04 	.word	0x20001a04

08017f6c <_getpid_r>:
 8017f6c:	f7ea bb32 	b.w	80025d4 <_getpid>

08017f70 <sniprintf>:
 8017f70:	b40c      	push	{r2, r3}
 8017f72:	b530      	push	{r4, r5, lr}
 8017f74:	4b17      	ldr	r3, [pc, #92]	; (8017fd4 <sniprintf+0x64>)
 8017f76:	1e0c      	subs	r4, r1, #0
 8017f78:	681d      	ldr	r5, [r3, #0]
 8017f7a:	b09d      	sub	sp, #116	; 0x74
 8017f7c:	da08      	bge.n	8017f90 <sniprintf+0x20>
 8017f7e:	238b      	movs	r3, #139	; 0x8b
 8017f80:	602b      	str	r3, [r5, #0]
 8017f82:	f04f 30ff 	mov.w	r0, #4294967295
 8017f86:	b01d      	add	sp, #116	; 0x74
 8017f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017f8c:	b002      	add	sp, #8
 8017f8e:	4770      	bx	lr
 8017f90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8017f94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017f98:	bf14      	ite	ne
 8017f9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017f9e:	4623      	moveq	r3, r4
 8017fa0:	9304      	str	r3, [sp, #16]
 8017fa2:	9307      	str	r3, [sp, #28]
 8017fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017fa8:	9002      	str	r0, [sp, #8]
 8017faa:	9006      	str	r0, [sp, #24]
 8017fac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017fb0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017fb2:	ab21      	add	r3, sp, #132	; 0x84
 8017fb4:	a902      	add	r1, sp, #8
 8017fb6:	4628      	mov	r0, r5
 8017fb8:	9301      	str	r3, [sp, #4]
 8017fba:	f001 fb77 	bl	80196ac <_svfiprintf_r>
 8017fbe:	1c43      	adds	r3, r0, #1
 8017fc0:	bfbc      	itt	lt
 8017fc2:	238b      	movlt	r3, #139	; 0x8b
 8017fc4:	602b      	strlt	r3, [r5, #0]
 8017fc6:	2c00      	cmp	r4, #0
 8017fc8:	d0dd      	beq.n	8017f86 <sniprintf+0x16>
 8017fca:	9b02      	ldr	r3, [sp, #8]
 8017fcc:	2200      	movs	r2, #0
 8017fce:	701a      	strb	r2, [r3, #0]
 8017fd0:	e7d9      	b.n	8017f86 <sniprintf+0x16>
 8017fd2:	bf00      	nop
 8017fd4:	200000f0 	.word	0x200000f0

08017fd8 <quorem>:
 8017fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fdc:	6903      	ldr	r3, [r0, #16]
 8017fde:	690c      	ldr	r4, [r1, #16]
 8017fe0:	42a3      	cmp	r3, r4
 8017fe2:	4607      	mov	r7, r0
 8017fe4:	f2c0 8081 	blt.w	80180ea <quorem+0x112>
 8017fe8:	3c01      	subs	r4, #1
 8017fea:	f101 0814 	add.w	r8, r1, #20
 8017fee:	f100 0514 	add.w	r5, r0, #20
 8017ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ff6:	9301      	str	r3, [sp, #4]
 8017ff8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018000:	3301      	adds	r3, #1
 8018002:	429a      	cmp	r2, r3
 8018004:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018008:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801800c:	fbb2 f6f3 	udiv	r6, r2, r3
 8018010:	d331      	bcc.n	8018076 <quorem+0x9e>
 8018012:	f04f 0e00 	mov.w	lr, #0
 8018016:	4640      	mov	r0, r8
 8018018:	46ac      	mov	ip, r5
 801801a:	46f2      	mov	sl, lr
 801801c:	f850 2b04 	ldr.w	r2, [r0], #4
 8018020:	b293      	uxth	r3, r2
 8018022:	fb06 e303 	mla	r3, r6, r3, lr
 8018026:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801802a:	b29b      	uxth	r3, r3
 801802c:	ebaa 0303 	sub.w	r3, sl, r3
 8018030:	0c12      	lsrs	r2, r2, #16
 8018032:	f8dc a000 	ldr.w	sl, [ip]
 8018036:	fb06 e202 	mla	r2, r6, r2, lr
 801803a:	fa13 f38a 	uxtah	r3, r3, sl
 801803e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018042:	fa1f fa82 	uxth.w	sl, r2
 8018046:	f8dc 2000 	ldr.w	r2, [ip]
 801804a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801804e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018052:	b29b      	uxth	r3, r3
 8018054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018058:	4581      	cmp	r9, r0
 801805a:	f84c 3b04 	str.w	r3, [ip], #4
 801805e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018062:	d2db      	bcs.n	801801c <quorem+0x44>
 8018064:	f855 300b 	ldr.w	r3, [r5, fp]
 8018068:	b92b      	cbnz	r3, 8018076 <quorem+0x9e>
 801806a:	9b01      	ldr	r3, [sp, #4]
 801806c:	3b04      	subs	r3, #4
 801806e:	429d      	cmp	r5, r3
 8018070:	461a      	mov	r2, r3
 8018072:	d32e      	bcc.n	80180d2 <quorem+0xfa>
 8018074:	613c      	str	r4, [r7, #16]
 8018076:	4638      	mov	r0, r7
 8018078:	f001 f9ae 	bl	80193d8 <__mcmp>
 801807c:	2800      	cmp	r0, #0
 801807e:	db24      	blt.n	80180ca <quorem+0xf2>
 8018080:	3601      	adds	r6, #1
 8018082:	4628      	mov	r0, r5
 8018084:	f04f 0c00 	mov.w	ip, #0
 8018088:	f858 2b04 	ldr.w	r2, [r8], #4
 801808c:	f8d0 e000 	ldr.w	lr, [r0]
 8018090:	b293      	uxth	r3, r2
 8018092:	ebac 0303 	sub.w	r3, ip, r3
 8018096:	0c12      	lsrs	r2, r2, #16
 8018098:	fa13 f38e 	uxtah	r3, r3, lr
 801809c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80180a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80180a4:	b29b      	uxth	r3, r3
 80180a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80180aa:	45c1      	cmp	r9, r8
 80180ac:	f840 3b04 	str.w	r3, [r0], #4
 80180b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80180b4:	d2e8      	bcs.n	8018088 <quorem+0xb0>
 80180b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80180ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80180be:	b922      	cbnz	r2, 80180ca <quorem+0xf2>
 80180c0:	3b04      	subs	r3, #4
 80180c2:	429d      	cmp	r5, r3
 80180c4:	461a      	mov	r2, r3
 80180c6:	d30a      	bcc.n	80180de <quorem+0x106>
 80180c8:	613c      	str	r4, [r7, #16]
 80180ca:	4630      	mov	r0, r6
 80180cc:	b003      	add	sp, #12
 80180ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180d2:	6812      	ldr	r2, [r2, #0]
 80180d4:	3b04      	subs	r3, #4
 80180d6:	2a00      	cmp	r2, #0
 80180d8:	d1cc      	bne.n	8018074 <quorem+0x9c>
 80180da:	3c01      	subs	r4, #1
 80180dc:	e7c7      	b.n	801806e <quorem+0x96>
 80180de:	6812      	ldr	r2, [r2, #0]
 80180e0:	3b04      	subs	r3, #4
 80180e2:	2a00      	cmp	r2, #0
 80180e4:	d1f0      	bne.n	80180c8 <quorem+0xf0>
 80180e6:	3c01      	subs	r4, #1
 80180e8:	e7eb      	b.n	80180c2 <quorem+0xea>
 80180ea:	2000      	movs	r0, #0
 80180ec:	e7ee      	b.n	80180cc <quorem+0xf4>
	...

080180f0 <_dtoa_r>:
 80180f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180f4:	ed2d 8b02 	vpush	{d8}
 80180f8:	ec57 6b10 	vmov	r6, r7, d0
 80180fc:	b095      	sub	sp, #84	; 0x54
 80180fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018100:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018104:	9105      	str	r1, [sp, #20]
 8018106:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801810a:	4604      	mov	r4, r0
 801810c:	9209      	str	r2, [sp, #36]	; 0x24
 801810e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018110:	b975      	cbnz	r5, 8018130 <_dtoa_r+0x40>
 8018112:	2010      	movs	r0, #16
 8018114:	f7ff f98e 	bl	8017434 <malloc>
 8018118:	4602      	mov	r2, r0
 801811a:	6260      	str	r0, [r4, #36]	; 0x24
 801811c:	b920      	cbnz	r0, 8018128 <_dtoa_r+0x38>
 801811e:	4bb2      	ldr	r3, [pc, #712]	; (80183e8 <_dtoa_r+0x2f8>)
 8018120:	21ea      	movs	r1, #234	; 0xea
 8018122:	48b2      	ldr	r0, [pc, #712]	; (80183ec <_dtoa_r+0x2fc>)
 8018124:	f001 fe32 	bl	8019d8c <__assert_func>
 8018128:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801812c:	6005      	str	r5, [r0, #0]
 801812e:	60c5      	str	r5, [r0, #12]
 8018130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018132:	6819      	ldr	r1, [r3, #0]
 8018134:	b151      	cbz	r1, 801814c <_dtoa_r+0x5c>
 8018136:	685a      	ldr	r2, [r3, #4]
 8018138:	604a      	str	r2, [r1, #4]
 801813a:	2301      	movs	r3, #1
 801813c:	4093      	lsls	r3, r2
 801813e:	608b      	str	r3, [r1, #8]
 8018140:	4620      	mov	r0, r4
 8018142:	f000 ff0b 	bl	8018f5c <_Bfree>
 8018146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018148:	2200      	movs	r2, #0
 801814a:	601a      	str	r2, [r3, #0]
 801814c:	1e3b      	subs	r3, r7, #0
 801814e:	bfb9      	ittee	lt
 8018150:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018154:	9303      	strlt	r3, [sp, #12]
 8018156:	2300      	movge	r3, #0
 8018158:	f8c8 3000 	strge.w	r3, [r8]
 801815c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018160:	4ba3      	ldr	r3, [pc, #652]	; (80183f0 <_dtoa_r+0x300>)
 8018162:	bfbc      	itt	lt
 8018164:	2201      	movlt	r2, #1
 8018166:	f8c8 2000 	strlt.w	r2, [r8]
 801816a:	ea33 0309 	bics.w	r3, r3, r9
 801816e:	d11b      	bne.n	80181a8 <_dtoa_r+0xb8>
 8018170:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018172:	f242 730f 	movw	r3, #9999	; 0x270f
 8018176:	6013      	str	r3, [r2, #0]
 8018178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801817c:	4333      	orrs	r3, r6
 801817e:	f000 857a 	beq.w	8018c76 <_dtoa_r+0xb86>
 8018182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018184:	b963      	cbnz	r3, 80181a0 <_dtoa_r+0xb0>
 8018186:	4b9b      	ldr	r3, [pc, #620]	; (80183f4 <_dtoa_r+0x304>)
 8018188:	e024      	b.n	80181d4 <_dtoa_r+0xe4>
 801818a:	4b9b      	ldr	r3, [pc, #620]	; (80183f8 <_dtoa_r+0x308>)
 801818c:	9300      	str	r3, [sp, #0]
 801818e:	3308      	adds	r3, #8
 8018190:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018192:	6013      	str	r3, [r2, #0]
 8018194:	9800      	ldr	r0, [sp, #0]
 8018196:	b015      	add	sp, #84	; 0x54
 8018198:	ecbd 8b02 	vpop	{d8}
 801819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a0:	4b94      	ldr	r3, [pc, #592]	; (80183f4 <_dtoa_r+0x304>)
 80181a2:	9300      	str	r3, [sp, #0]
 80181a4:	3303      	adds	r3, #3
 80181a6:	e7f3      	b.n	8018190 <_dtoa_r+0xa0>
 80181a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80181ac:	2200      	movs	r2, #0
 80181ae:	ec51 0b17 	vmov	r0, r1, d7
 80181b2:	2300      	movs	r3, #0
 80181b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80181b8:	f7e8 fc86 	bl	8000ac8 <__aeabi_dcmpeq>
 80181bc:	4680      	mov	r8, r0
 80181be:	b158      	cbz	r0, 80181d8 <_dtoa_r+0xe8>
 80181c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80181c2:	2301      	movs	r3, #1
 80181c4:	6013      	str	r3, [r2, #0]
 80181c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	f000 8551 	beq.w	8018c70 <_dtoa_r+0xb80>
 80181ce:	488b      	ldr	r0, [pc, #556]	; (80183fc <_dtoa_r+0x30c>)
 80181d0:	6018      	str	r0, [r3, #0]
 80181d2:	1e43      	subs	r3, r0, #1
 80181d4:	9300      	str	r3, [sp, #0]
 80181d6:	e7dd      	b.n	8018194 <_dtoa_r+0xa4>
 80181d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80181dc:	aa12      	add	r2, sp, #72	; 0x48
 80181de:	a913      	add	r1, sp, #76	; 0x4c
 80181e0:	4620      	mov	r0, r4
 80181e2:	f001 f99d 	bl	8019520 <__d2b>
 80181e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80181ea:	4683      	mov	fp, r0
 80181ec:	2d00      	cmp	r5, #0
 80181ee:	d07c      	beq.n	80182ea <_dtoa_r+0x1fa>
 80181f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80181f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80181fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80181fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018202:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801820a:	4b7d      	ldr	r3, [pc, #500]	; (8018400 <_dtoa_r+0x310>)
 801820c:	2200      	movs	r2, #0
 801820e:	4630      	mov	r0, r6
 8018210:	4639      	mov	r1, r7
 8018212:	f7e8 f839 	bl	8000288 <__aeabi_dsub>
 8018216:	a36e      	add	r3, pc, #440	; (adr r3, 80183d0 <_dtoa_r+0x2e0>)
 8018218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801821c:	f7e8 f9ec 	bl	80005f8 <__aeabi_dmul>
 8018220:	a36d      	add	r3, pc, #436	; (adr r3, 80183d8 <_dtoa_r+0x2e8>)
 8018222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018226:	f7e8 f831 	bl	800028c <__adddf3>
 801822a:	4606      	mov	r6, r0
 801822c:	4628      	mov	r0, r5
 801822e:	460f      	mov	r7, r1
 8018230:	f7e8 f978 	bl	8000524 <__aeabi_i2d>
 8018234:	a36a      	add	r3, pc, #424	; (adr r3, 80183e0 <_dtoa_r+0x2f0>)
 8018236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801823a:	f7e8 f9dd 	bl	80005f8 <__aeabi_dmul>
 801823e:	4602      	mov	r2, r0
 8018240:	460b      	mov	r3, r1
 8018242:	4630      	mov	r0, r6
 8018244:	4639      	mov	r1, r7
 8018246:	f7e8 f821 	bl	800028c <__adddf3>
 801824a:	4606      	mov	r6, r0
 801824c:	460f      	mov	r7, r1
 801824e:	f7e8 fc83 	bl	8000b58 <__aeabi_d2iz>
 8018252:	2200      	movs	r2, #0
 8018254:	4682      	mov	sl, r0
 8018256:	2300      	movs	r3, #0
 8018258:	4630      	mov	r0, r6
 801825a:	4639      	mov	r1, r7
 801825c:	f7e8 fc3e 	bl	8000adc <__aeabi_dcmplt>
 8018260:	b148      	cbz	r0, 8018276 <_dtoa_r+0x186>
 8018262:	4650      	mov	r0, sl
 8018264:	f7e8 f95e 	bl	8000524 <__aeabi_i2d>
 8018268:	4632      	mov	r2, r6
 801826a:	463b      	mov	r3, r7
 801826c:	f7e8 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8018270:	b908      	cbnz	r0, 8018276 <_dtoa_r+0x186>
 8018272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018276:	f1ba 0f16 	cmp.w	sl, #22
 801827a:	d854      	bhi.n	8018326 <_dtoa_r+0x236>
 801827c:	4b61      	ldr	r3, [pc, #388]	; (8018404 <_dtoa_r+0x314>)
 801827e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018286:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801828a:	f7e8 fc27 	bl	8000adc <__aeabi_dcmplt>
 801828e:	2800      	cmp	r0, #0
 8018290:	d04b      	beq.n	801832a <_dtoa_r+0x23a>
 8018292:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018296:	2300      	movs	r3, #0
 8018298:	930e      	str	r3, [sp, #56]	; 0x38
 801829a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801829c:	1b5d      	subs	r5, r3, r5
 801829e:	1e6b      	subs	r3, r5, #1
 80182a0:	9304      	str	r3, [sp, #16]
 80182a2:	bf43      	ittte	mi
 80182a4:	2300      	movmi	r3, #0
 80182a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80182aa:	9304      	strmi	r3, [sp, #16]
 80182ac:	f04f 0800 	movpl.w	r8, #0
 80182b0:	f1ba 0f00 	cmp.w	sl, #0
 80182b4:	db3b      	blt.n	801832e <_dtoa_r+0x23e>
 80182b6:	9b04      	ldr	r3, [sp, #16]
 80182b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80182bc:	4453      	add	r3, sl
 80182be:	9304      	str	r3, [sp, #16]
 80182c0:	2300      	movs	r3, #0
 80182c2:	9306      	str	r3, [sp, #24]
 80182c4:	9b05      	ldr	r3, [sp, #20]
 80182c6:	2b09      	cmp	r3, #9
 80182c8:	d869      	bhi.n	801839e <_dtoa_r+0x2ae>
 80182ca:	2b05      	cmp	r3, #5
 80182cc:	bfc4      	itt	gt
 80182ce:	3b04      	subgt	r3, #4
 80182d0:	9305      	strgt	r3, [sp, #20]
 80182d2:	9b05      	ldr	r3, [sp, #20]
 80182d4:	f1a3 0302 	sub.w	r3, r3, #2
 80182d8:	bfcc      	ite	gt
 80182da:	2500      	movgt	r5, #0
 80182dc:	2501      	movle	r5, #1
 80182de:	2b03      	cmp	r3, #3
 80182e0:	d869      	bhi.n	80183b6 <_dtoa_r+0x2c6>
 80182e2:	e8df f003 	tbb	[pc, r3]
 80182e6:	4e2c      	.short	0x4e2c
 80182e8:	5a4c      	.short	0x5a4c
 80182ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80182ee:	441d      	add	r5, r3
 80182f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80182f4:	2b20      	cmp	r3, #32
 80182f6:	bfc1      	itttt	gt
 80182f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80182fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018300:	fa09 f303 	lslgt.w	r3, r9, r3
 8018304:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018308:	bfda      	itte	le
 801830a:	f1c3 0320 	rsble	r3, r3, #32
 801830e:	fa06 f003 	lslle.w	r0, r6, r3
 8018312:	4318      	orrgt	r0, r3
 8018314:	f7e8 f8f6 	bl	8000504 <__aeabi_ui2d>
 8018318:	2301      	movs	r3, #1
 801831a:	4606      	mov	r6, r0
 801831c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018320:	3d01      	subs	r5, #1
 8018322:	9310      	str	r3, [sp, #64]	; 0x40
 8018324:	e771      	b.n	801820a <_dtoa_r+0x11a>
 8018326:	2301      	movs	r3, #1
 8018328:	e7b6      	b.n	8018298 <_dtoa_r+0x1a8>
 801832a:	900e      	str	r0, [sp, #56]	; 0x38
 801832c:	e7b5      	b.n	801829a <_dtoa_r+0x1aa>
 801832e:	f1ca 0300 	rsb	r3, sl, #0
 8018332:	9306      	str	r3, [sp, #24]
 8018334:	2300      	movs	r3, #0
 8018336:	eba8 080a 	sub.w	r8, r8, sl
 801833a:	930d      	str	r3, [sp, #52]	; 0x34
 801833c:	e7c2      	b.n	80182c4 <_dtoa_r+0x1d4>
 801833e:	2300      	movs	r3, #0
 8018340:	9308      	str	r3, [sp, #32]
 8018342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018344:	2b00      	cmp	r3, #0
 8018346:	dc39      	bgt.n	80183bc <_dtoa_r+0x2cc>
 8018348:	f04f 0901 	mov.w	r9, #1
 801834c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018350:	464b      	mov	r3, r9
 8018352:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018356:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018358:	2200      	movs	r2, #0
 801835a:	6042      	str	r2, [r0, #4]
 801835c:	2204      	movs	r2, #4
 801835e:	f102 0614 	add.w	r6, r2, #20
 8018362:	429e      	cmp	r6, r3
 8018364:	6841      	ldr	r1, [r0, #4]
 8018366:	d92f      	bls.n	80183c8 <_dtoa_r+0x2d8>
 8018368:	4620      	mov	r0, r4
 801836a:	f000 fdb7 	bl	8018edc <_Balloc>
 801836e:	9000      	str	r0, [sp, #0]
 8018370:	2800      	cmp	r0, #0
 8018372:	d14b      	bne.n	801840c <_dtoa_r+0x31c>
 8018374:	4b24      	ldr	r3, [pc, #144]	; (8018408 <_dtoa_r+0x318>)
 8018376:	4602      	mov	r2, r0
 8018378:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801837c:	e6d1      	b.n	8018122 <_dtoa_r+0x32>
 801837e:	2301      	movs	r3, #1
 8018380:	e7de      	b.n	8018340 <_dtoa_r+0x250>
 8018382:	2300      	movs	r3, #0
 8018384:	9308      	str	r3, [sp, #32]
 8018386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018388:	eb0a 0903 	add.w	r9, sl, r3
 801838c:	f109 0301 	add.w	r3, r9, #1
 8018390:	2b01      	cmp	r3, #1
 8018392:	9301      	str	r3, [sp, #4]
 8018394:	bfb8      	it	lt
 8018396:	2301      	movlt	r3, #1
 8018398:	e7dd      	b.n	8018356 <_dtoa_r+0x266>
 801839a:	2301      	movs	r3, #1
 801839c:	e7f2      	b.n	8018384 <_dtoa_r+0x294>
 801839e:	2501      	movs	r5, #1
 80183a0:	2300      	movs	r3, #0
 80183a2:	9305      	str	r3, [sp, #20]
 80183a4:	9508      	str	r5, [sp, #32]
 80183a6:	f04f 39ff 	mov.w	r9, #4294967295
 80183aa:	2200      	movs	r2, #0
 80183ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80183b0:	2312      	movs	r3, #18
 80183b2:	9209      	str	r2, [sp, #36]	; 0x24
 80183b4:	e7cf      	b.n	8018356 <_dtoa_r+0x266>
 80183b6:	2301      	movs	r3, #1
 80183b8:	9308      	str	r3, [sp, #32]
 80183ba:	e7f4      	b.n	80183a6 <_dtoa_r+0x2b6>
 80183bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80183c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80183c4:	464b      	mov	r3, r9
 80183c6:	e7c6      	b.n	8018356 <_dtoa_r+0x266>
 80183c8:	3101      	adds	r1, #1
 80183ca:	6041      	str	r1, [r0, #4]
 80183cc:	0052      	lsls	r2, r2, #1
 80183ce:	e7c6      	b.n	801835e <_dtoa_r+0x26e>
 80183d0:	636f4361 	.word	0x636f4361
 80183d4:	3fd287a7 	.word	0x3fd287a7
 80183d8:	8b60c8b3 	.word	0x8b60c8b3
 80183dc:	3fc68a28 	.word	0x3fc68a28
 80183e0:	509f79fb 	.word	0x509f79fb
 80183e4:	3fd34413 	.word	0x3fd34413
 80183e8:	0801a8cd 	.word	0x0801a8cd
 80183ec:	0801a8e4 	.word	0x0801a8e4
 80183f0:	7ff00000 	.word	0x7ff00000
 80183f4:	0801a8c9 	.word	0x0801a8c9
 80183f8:	0801a8c0 	.word	0x0801a8c0
 80183fc:	0801a89d 	.word	0x0801a89d
 8018400:	3ff80000 	.word	0x3ff80000
 8018404:	0801aa40 	.word	0x0801aa40
 8018408:	0801a943 	.word	0x0801a943
 801840c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801840e:	9a00      	ldr	r2, [sp, #0]
 8018410:	601a      	str	r2, [r3, #0]
 8018412:	9b01      	ldr	r3, [sp, #4]
 8018414:	2b0e      	cmp	r3, #14
 8018416:	f200 80ad 	bhi.w	8018574 <_dtoa_r+0x484>
 801841a:	2d00      	cmp	r5, #0
 801841c:	f000 80aa 	beq.w	8018574 <_dtoa_r+0x484>
 8018420:	f1ba 0f00 	cmp.w	sl, #0
 8018424:	dd36      	ble.n	8018494 <_dtoa_r+0x3a4>
 8018426:	4ac3      	ldr	r2, [pc, #780]	; (8018734 <_dtoa_r+0x644>)
 8018428:	f00a 030f 	and.w	r3, sl, #15
 801842c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018430:	ed93 7b00 	vldr	d7, [r3]
 8018434:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018438:	ea4f 172a 	mov.w	r7, sl, asr #4
 801843c:	eeb0 8a47 	vmov.f32	s16, s14
 8018440:	eef0 8a67 	vmov.f32	s17, s15
 8018444:	d016      	beq.n	8018474 <_dtoa_r+0x384>
 8018446:	4bbc      	ldr	r3, [pc, #752]	; (8018738 <_dtoa_r+0x648>)
 8018448:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801844c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018450:	f7e8 f9fc 	bl	800084c <__aeabi_ddiv>
 8018454:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018458:	f007 070f 	and.w	r7, r7, #15
 801845c:	2503      	movs	r5, #3
 801845e:	4eb6      	ldr	r6, [pc, #728]	; (8018738 <_dtoa_r+0x648>)
 8018460:	b957      	cbnz	r7, 8018478 <_dtoa_r+0x388>
 8018462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018466:	ec53 2b18 	vmov	r2, r3, d8
 801846a:	f7e8 f9ef 	bl	800084c <__aeabi_ddiv>
 801846e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018472:	e029      	b.n	80184c8 <_dtoa_r+0x3d8>
 8018474:	2502      	movs	r5, #2
 8018476:	e7f2      	b.n	801845e <_dtoa_r+0x36e>
 8018478:	07f9      	lsls	r1, r7, #31
 801847a:	d508      	bpl.n	801848e <_dtoa_r+0x39e>
 801847c:	ec51 0b18 	vmov	r0, r1, d8
 8018480:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018484:	f7e8 f8b8 	bl	80005f8 <__aeabi_dmul>
 8018488:	ec41 0b18 	vmov	d8, r0, r1
 801848c:	3501      	adds	r5, #1
 801848e:	107f      	asrs	r7, r7, #1
 8018490:	3608      	adds	r6, #8
 8018492:	e7e5      	b.n	8018460 <_dtoa_r+0x370>
 8018494:	f000 80a6 	beq.w	80185e4 <_dtoa_r+0x4f4>
 8018498:	f1ca 0600 	rsb	r6, sl, #0
 801849c:	4ba5      	ldr	r3, [pc, #660]	; (8018734 <_dtoa_r+0x644>)
 801849e:	4fa6      	ldr	r7, [pc, #664]	; (8018738 <_dtoa_r+0x648>)
 80184a0:	f006 020f 	and.w	r2, r6, #15
 80184a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80184a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80184ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80184b0:	f7e8 f8a2 	bl	80005f8 <__aeabi_dmul>
 80184b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80184b8:	1136      	asrs	r6, r6, #4
 80184ba:	2300      	movs	r3, #0
 80184bc:	2502      	movs	r5, #2
 80184be:	2e00      	cmp	r6, #0
 80184c0:	f040 8085 	bne.w	80185ce <_dtoa_r+0x4de>
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d1d2      	bne.n	801846e <_dtoa_r+0x37e>
 80184c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	f000 808c 	beq.w	80185e8 <_dtoa_r+0x4f8>
 80184d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80184d4:	4b99      	ldr	r3, [pc, #612]	; (801873c <_dtoa_r+0x64c>)
 80184d6:	2200      	movs	r2, #0
 80184d8:	4630      	mov	r0, r6
 80184da:	4639      	mov	r1, r7
 80184dc:	f7e8 fafe 	bl	8000adc <__aeabi_dcmplt>
 80184e0:	2800      	cmp	r0, #0
 80184e2:	f000 8081 	beq.w	80185e8 <_dtoa_r+0x4f8>
 80184e6:	9b01      	ldr	r3, [sp, #4]
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d07d      	beq.n	80185e8 <_dtoa_r+0x4f8>
 80184ec:	f1b9 0f00 	cmp.w	r9, #0
 80184f0:	dd3c      	ble.n	801856c <_dtoa_r+0x47c>
 80184f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80184f6:	9307      	str	r3, [sp, #28]
 80184f8:	2200      	movs	r2, #0
 80184fa:	4b91      	ldr	r3, [pc, #580]	; (8018740 <_dtoa_r+0x650>)
 80184fc:	4630      	mov	r0, r6
 80184fe:	4639      	mov	r1, r7
 8018500:	f7e8 f87a 	bl	80005f8 <__aeabi_dmul>
 8018504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018508:	3501      	adds	r5, #1
 801850a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801850e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018512:	4628      	mov	r0, r5
 8018514:	f7e8 f806 	bl	8000524 <__aeabi_i2d>
 8018518:	4632      	mov	r2, r6
 801851a:	463b      	mov	r3, r7
 801851c:	f7e8 f86c 	bl	80005f8 <__aeabi_dmul>
 8018520:	4b88      	ldr	r3, [pc, #544]	; (8018744 <_dtoa_r+0x654>)
 8018522:	2200      	movs	r2, #0
 8018524:	f7e7 feb2 	bl	800028c <__adddf3>
 8018528:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801852c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018530:	9303      	str	r3, [sp, #12]
 8018532:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018534:	2b00      	cmp	r3, #0
 8018536:	d15c      	bne.n	80185f2 <_dtoa_r+0x502>
 8018538:	4b83      	ldr	r3, [pc, #524]	; (8018748 <_dtoa_r+0x658>)
 801853a:	2200      	movs	r2, #0
 801853c:	4630      	mov	r0, r6
 801853e:	4639      	mov	r1, r7
 8018540:	f7e7 fea2 	bl	8000288 <__aeabi_dsub>
 8018544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018548:	4606      	mov	r6, r0
 801854a:	460f      	mov	r7, r1
 801854c:	f7e8 fae4 	bl	8000b18 <__aeabi_dcmpgt>
 8018550:	2800      	cmp	r0, #0
 8018552:	f040 8296 	bne.w	8018a82 <_dtoa_r+0x992>
 8018556:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801855a:	4630      	mov	r0, r6
 801855c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018560:	4639      	mov	r1, r7
 8018562:	f7e8 fabb 	bl	8000adc <__aeabi_dcmplt>
 8018566:	2800      	cmp	r0, #0
 8018568:	f040 8288 	bne.w	8018a7c <_dtoa_r+0x98c>
 801856c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018570:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018574:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018576:	2b00      	cmp	r3, #0
 8018578:	f2c0 8158 	blt.w	801882c <_dtoa_r+0x73c>
 801857c:	f1ba 0f0e 	cmp.w	sl, #14
 8018580:	f300 8154 	bgt.w	801882c <_dtoa_r+0x73c>
 8018584:	4b6b      	ldr	r3, [pc, #428]	; (8018734 <_dtoa_r+0x644>)
 8018586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801858a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801858e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018590:	2b00      	cmp	r3, #0
 8018592:	f280 80e3 	bge.w	801875c <_dtoa_r+0x66c>
 8018596:	9b01      	ldr	r3, [sp, #4]
 8018598:	2b00      	cmp	r3, #0
 801859a:	f300 80df 	bgt.w	801875c <_dtoa_r+0x66c>
 801859e:	f040 826d 	bne.w	8018a7c <_dtoa_r+0x98c>
 80185a2:	4b69      	ldr	r3, [pc, #420]	; (8018748 <_dtoa_r+0x658>)
 80185a4:	2200      	movs	r2, #0
 80185a6:	4640      	mov	r0, r8
 80185a8:	4649      	mov	r1, r9
 80185aa:	f7e8 f825 	bl	80005f8 <__aeabi_dmul>
 80185ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80185b2:	f7e8 faa7 	bl	8000b04 <__aeabi_dcmpge>
 80185b6:	9e01      	ldr	r6, [sp, #4]
 80185b8:	4637      	mov	r7, r6
 80185ba:	2800      	cmp	r0, #0
 80185bc:	f040 8243 	bne.w	8018a46 <_dtoa_r+0x956>
 80185c0:	9d00      	ldr	r5, [sp, #0]
 80185c2:	2331      	movs	r3, #49	; 0x31
 80185c4:	f805 3b01 	strb.w	r3, [r5], #1
 80185c8:	f10a 0a01 	add.w	sl, sl, #1
 80185cc:	e23f      	b.n	8018a4e <_dtoa_r+0x95e>
 80185ce:	07f2      	lsls	r2, r6, #31
 80185d0:	d505      	bpl.n	80185de <_dtoa_r+0x4ee>
 80185d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80185d6:	f7e8 f80f 	bl	80005f8 <__aeabi_dmul>
 80185da:	3501      	adds	r5, #1
 80185dc:	2301      	movs	r3, #1
 80185de:	1076      	asrs	r6, r6, #1
 80185e0:	3708      	adds	r7, #8
 80185e2:	e76c      	b.n	80184be <_dtoa_r+0x3ce>
 80185e4:	2502      	movs	r5, #2
 80185e6:	e76f      	b.n	80184c8 <_dtoa_r+0x3d8>
 80185e8:	9b01      	ldr	r3, [sp, #4]
 80185ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80185ee:	930c      	str	r3, [sp, #48]	; 0x30
 80185f0:	e78d      	b.n	801850e <_dtoa_r+0x41e>
 80185f2:	9900      	ldr	r1, [sp, #0]
 80185f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80185f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80185f8:	4b4e      	ldr	r3, [pc, #312]	; (8018734 <_dtoa_r+0x644>)
 80185fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80185fe:	4401      	add	r1, r0
 8018600:	9102      	str	r1, [sp, #8]
 8018602:	9908      	ldr	r1, [sp, #32]
 8018604:	eeb0 8a47 	vmov.f32	s16, s14
 8018608:	eef0 8a67 	vmov.f32	s17, s15
 801860c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018610:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018614:	2900      	cmp	r1, #0
 8018616:	d045      	beq.n	80186a4 <_dtoa_r+0x5b4>
 8018618:	494c      	ldr	r1, [pc, #304]	; (801874c <_dtoa_r+0x65c>)
 801861a:	2000      	movs	r0, #0
 801861c:	f7e8 f916 	bl	800084c <__aeabi_ddiv>
 8018620:	ec53 2b18 	vmov	r2, r3, d8
 8018624:	f7e7 fe30 	bl	8000288 <__aeabi_dsub>
 8018628:	9d00      	ldr	r5, [sp, #0]
 801862a:	ec41 0b18 	vmov	d8, r0, r1
 801862e:	4639      	mov	r1, r7
 8018630:	4630      	mov	r0, r6
 8018632:	f7e8 fa91 	bl	8000b58 <__aeabi_d2iz>
 8018636:	900c      	str	r0, [sp, #48]	; 0x30
 8018638:	f7e7 ff74 	bl	8000524 <__aeabi_i2d>
 801863c:	4602      	mov	r2, r0
 801863e:	460b      	mov	r3, r1
 8018640:	4630      	mov	r0, r6
 8018642:	4639      	mov	r1, r7
 8018644:	f7e7 fe20 	bl	8000288 <__aeabi_dsub>
 8018648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801864a:	3330      	adds	r3, #48	; 0x30
 801864c:	f805 3b01 	strb.w	r3, [r5], #1
 8018650:	ec53 2b18 	vmov	r2, r3, d8
 8018654:	4606      	mov	r6, r0
 8018656:	460f      	mov	r7, r1
 8018658:	f7e8 fa40 	bl	8000adc <__aeabi_dcmplt>
 801865c:	2800      	cmp	r0, #0
 801865e:	d165      	bne.n	801872c <_dtoa_r+0x63c>
 8018660:	4632      	mov	r2, r6
 8018662:	463b      	mov	r3, r7
 8018664:	4935      	ldr	r1, [pc, #212]	; (801873c <_dtoa_r+0x64c>)
 8018666:	2000      	movs	r0, #0
 8018668:	f7e7 fe0e 	bl	8000288 <__aeabi_dsub>
 801866c:	ec53 2b18 	vmov	r2, r3, d8
 8018670:	f7e8 fa34 	bl	8000adc <__aeabi_dcmplt>
 8018674:	2800      	cmp	r0, #0
 8018676:	f040 80b9 	bne.w	80187ec <_dtoa_r+0x6fc>
 801867a:	9b02      	ldr	r3, [sp, #8]
 801867c:	429d      	cmp	r5, r3
 801867e:	f43f af75 	beq.w	801856c <_dtoa_r+0x47c>
 8018682:	4b2f      	ldr	r3, [pc, #188]	; (8018740 <_dtoa_r+0x650>)
 8018684:	ec51 0b18 	vmov	r0, r1, d8
 8018688:	2200      	movs	r2, #0
 801868a:	f7e7 ffb5 	bl	80005f8 <__aeabi_dmul>
 801868e:	4b2c      	ldr	r3, [pc, #176]	; (8018740 <_dtoa_r+0x650>)
 8018690:	ec41 0b18 	vmov	d8, r0, r1
 8018694:	2200      	movs	r2, #0
 8018696:	4630      	mov	r0, r6
 8018698:	4639      	mov	r1, r7
 801869a:	f7e7 ffad 	bl	80005f8 <__aeabi_dmul>
 801869e:	4606      	mov	r6, r0
 80186a0:	460f      	mov	r7, r1
 80186a2:	e7c4      	b.n	801862e <_dtoa_r+0x53e>
 80186a4:	ec51 0b17 	vmov	r0, r1, d7
 80186a8:	f7e7 ffa6 	bl	80005f8 <__aeabi_dmul>
 80186ac:	9b02      	ldr	r3, [sp, #8]
 80186ae:	9d00      	ldr	r5, [sp, #0]
 80186b0:	930c      	str	r3, [sp, #48]	; 0x30
 80186b2:	ec41 0b18 	vmov	d8, r0, r1
 80186b6:	4639      	mov	r1, r7
 80186b8:	4630      	mov	r0, r6
 80186ba:	f7e8 fa4d 	bl	8000b58 <__aeabi_d2iz>
 80186be:	9011      	str	r0, [sp, #68]	; 0x44
 80186c0:	f7e7 ff30 	bl	8000524 <__aeabi_i2d>
 80186c4:	4602      	mov	r2, r0
 80186c6:	460b      	mov	r3, r1
 80186c8:	4630      	mov	r0, r6
 80186ca:	4639      	mov	r1, r7
 80186cc:	f7e7 fddc 	bl	8000288 <__aeabi_dsub>
 80186d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80186d2:	3330      	adds	r3, #48	; 0x30
 80186d4:	f805 3b01 	strb.w	r3, [r5], #1
 80186d8:	9b02      	ldr	r3, [sp, #8]
 80186da:	429d      	cmp	r5, r3
 80186dc:	4606      	mov	r6, r0
 80186de:	460f      	mov	r7, r1
 80186e0:	f04f 0200 	mov.w	r2, #0
 80186e4:	d134      	bne.n	8018750 <_dtoa_r+0x660>
 80186e6:	4b19      	ldr	r3, [pc, #100]	; (801874c <_dtoa_r+0x65c>)
 80186e8:	ec51 0b18 	vmov	r0, r1, d8
 80186ec:	f7e7 fdce 	bl	800028c <__adddf3>
 80186f0:	4602      	mov	r2, r0
 80186f2:	460b      	mov	r3, r1
 80186f4:	4630      	mov	r0, r6
 80186f6:	4639      	mov	r1, r7
 80186f8:	f7e8 fa0e 	bl	8000b18 <__aeabi_dcmpgt>
 80186fc:	2800      	cmp	r0, #0
 80186fe:	d175      	bne.n	80187ec <_dtoa_r+0x6fc>
 8018700:	ec53 2b18 	vmov	r2, r3, d8
 8018704:	4911      	ldr	r1, [pc, #68]	; (801874c <_dtoa_r+0x65c>)
 8018706:	2000      	movs	r0, #0
 8018708:	f7e7 fdbe 	bl	8000288 <__aeabi_dsub>
 801870c:	4602      	mov	r2, r0
 801870e:	460b      	mov	r3, r1
 8018710:	4630      	mov	r0, r6
 8018712:	4639      	mov	r1, r7
 8018714:	f7e8 f9e2 	bl	8000adc <__aeabi_dcmplt>
 8018718:	2800      	cmp	r0, #0
 801871a:	f43f af27 	beq.w	801856c <_dtoa_r+0x47c>
 801871e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018720:	1e6b      	subs	r3, r5, #1
 8018722:	930c      	str	r3, [sp, #48]	; 0x30
 8018724:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018728:	2b30      	cmp	r3, #48	; 0x30
 801872a:	d0f8      	beq.n	801871e <_dtoa_r+0x62e>
 801872c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018730:	e04a      	b.n	80187c8 <_dtoa_r+0x6d8>
 8018732:	bf00      	nop
 8018734:	0801aa40 	.word	0x0801aa40
 8018738:	0801aa18 	.word	0x0801aa18
 801873c:	3ff00000 	.word	0x3ff00000
 8018740:	40240000 	.word	0x40240000
 8018744:	401c0000 	.word	0x401c0000
 8018748:	40140000 	.word	0x40140000
 801874c:	3fe00000 	.word	0x3fe00000
 8018750:	4baf      	ldr	r3, [pc, #700]	; (8018a10 <_dtoa_r+0x920>)
 8018752:	f7e7 ff51 	bl	80005f8 <__aeabi_dmul>
 8018756:	4606      	mov	r6, r0
 8018758:	460f      	mov	r7, r1
 801875a:	e7ac      	b.n	80186b6 <_dtoa_r+0x5c6>
 801875c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018760:	9d00      	ldr	r5, [sp, #0]
 8018762:	4642      	mov	r2, r8
 8018764:	464b      	mov	r3, r9
 8018766:	4630      	mov	r0, r6
 8018768:	4639      	mov	r1, r7
 801876a:	f7e8 f86f 	bl	800084c <__aeabi_ddiv>
 801876e:	f7e8 f9f3 	bl	8000b58 <__aeabi_d2iz>
 8018772:	9002      	str	r0, [sp, #8]
 8018774:	f7e7 fed6 	bl	8000524 <__aeabi_i2d>
 8018778:	4642      	mov	r2, r8
 801877a:	464b      	mov	r3, r9
 801877c:	f7e7 ff3c 	bl	80005f8 <__aeabi_dmul>
 8018780:	4602      	mov	r2, r0
 8018782:	460b      	mov	r3, r1
 8018784:	4630      	mov	r0, r6
 8018786:	4639      	mov	r1, r7
 8018788:	f7e7 fd7e 	bl	8000288 <__aeabi_dsub>
 801878c:	9e02      	ldr	r6, [sp, #8]
 801878e:	9f01      	ldr	r7, [sp, #4]
 8018790:	3630      	adds	r6, #48	; 0x30
 8018792:	f805 6b01 	strb.w	r6, [r5], #1
 8018796:	9e00      	ldr	r6, [sp, #0]
 8018798:	1bae      	subs	r6, r5, r6
 801879a:	42b7      	cmp	r7, r6
 801879c:	4602      	mov	r2, r0
 801879e:	460b      	mov	r3, r1
 80187a0:	d137      	bne.n	8018812 <_dtoa_r+0x722>
 80187a2:	f7e7 fd73 	bl	800028c <__adddf3>
 80187a6:	4642      	mov	r2, r8
 80187a8:	464b      	mov	r3, r9
 80187aa:	4606      	mov	r6, r0
 80187ac:	460f      	mov	r7, r1
 80187ae:	f7e8 f9b3 	bl	8000b18 <__aeabi_dcmpgt>
 80187b2:	b9c8      	cbnz	r0, 80187e8 <_dtoa_r+0x6f8>
 80187b4:	4642      	mov	r2, r8
 80187b6:	464b      	mov	r3, r9
 80187b8:	4630      	mov	r0, r6
 80187ba:	4639      	mov	r1, r7
 80187bc:	f7e8 f984 	bl	8000ac8 <__aeabi_dcmpeq>
 80187c0:	b110      	cbz	r0, 80187c8 <_dtoa_r+0x6d8>
 80187c2:	9b02      	ldr	r3, [sp, #8]
 80187c4:	07d9      	lsls	r1, r3, #31
 80187c6:	d40f      	bmi.n	80187e8 <_dtoa_r+0x6f8>
 80187c8:	4620      	mov	r0, r4
 80187ca:	4659      	mov	r1, fp
 80187cc:	f000 fbc6 	bl	8018f5c <_Bfree>
 80187d0:	2300      	movs	r3, #0
 80187d2:	702b      	strb	r3, [r5, #0]
 80187d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80187d6:	f10a 0001 	add.w	r0, sl, #1
 80187da:	6018      	str	r0, [r3, #0]
 80187dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80187de:	2b00      	cmp	r3, #0
 80187e0:	f43f acd8 	beq.w	8018194 <_dtoa_r+0xa4>
 80187e4:	601d      	str	r5, [r3, #0]
 80187e6:	e4d5      	b.n	8018194 <_dtoa_r+0xa4>
 80187e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80187ec:	462b      	mov	r3, r5
 80187ee:	461d      	mov	r5, r3
 80187f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80187f4:	2a39      	cmp	r2, #57	; 0x39
 80187f6:	d108      	bne.n	801880a <_dtoa_r+0x71a>
 80187f8:	9a00      	ldr	r2, [sp, #0]
 80187fa:	429a      	cmp	r2, r3
 80187fc:	d1f7      	bne.n	80187ee <_dtoa_r+0x6fe>
 80187fe:	9a07      	ldr	r2, [sp, #28]
 8018800:	9900      	ldr	r1, [sp, #0]
 8018802:	3201      	adds	r2, #1
 8018804:	9207      	str	r2, [sp, #28]
 8018806:	2230      	movs	r2, #48	; 0x30
 8018808:	700a      	strb	r2, [r1, #0]
 801880a:	781a      	ldrb	r2, [r3, #0]
 801880c:	3201      	adds	r2, #1
 801880e:	701a      	strb	r2, [r3, #0]
 8018810:	e78c      	b.n	801872c <_dtoa_r+0x63c>
 8018812:	4b7f      	ldr	r3, [pc, #508]	; (8018a10 <_dtoa_r+0x920>)
 8018814:	2200      	movs	r2, #0
 8018816:	f7e7 feef 	bl	80005f8 <__aeabi_dmul>
 801881a:	2200      	movs	r2, #0
 801881c:	2300      	movs	r3, #0
 801881e:	4606      	mov	r6, r0
 8018820:	460f      	mov	r7, r1
 8018822:	f7e8 f951 	bl	8000ac8 <__aeabi_dcmpeq>
 8018826:	2800      	cmp	r0, #0
 8018828:	d09b      	beq.n	8018762 <_dtoa_r+0x672>
 801882a:	e7cd      	b.n	80187c8 <_dtoa_r+0x6d8>
 801882c:	9a08      	ldr	r2, [sp, #32]
 801882e:	2a00      	cmp	r2, #0
 8018830:	f000 80c4 	beq.w	80189bc <_dtoa_r+0x8cc>
 8018834:	9a05      	ldr	r2, [sp, #20]
 8018836:	2a01      	cmp	r2, #1
 8018838:	f300 80a8 	bgt.w	801898c <_dtoa_r+0x89c>
 801883c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801883e:	2a00      	cmp	r2, #0
 8018840:	f000 80a0 	beq.w	8018984 <_dtoa_r+0x894>
 8018844:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018848:	9e06      	ldr	r6, [sp, #24]
 801884a:	4645      	mov	r5, r8
 801884c:	9a04      	ldr	r2, [sp, #16]
 801884e:	2101      	movs	r1, #1
 8018850:	441a      	add	r2, r3
 8018852:	4620      	mov	r0, r4
 8018854:	4498      	add	r8, r3
 8018856:	9204      	str	r2, [sp, #16]
 8018858:	f000 fc3c 	bl	80190d4 <__i2b>
 801885c:	4607      	mov	r7, r0
 801885e:	2d00      	cmp	r5, #0
 8018860:	dd0b      	ble.n	801887a <_dtoa_r+0x78a>
 8018862:	9b04      	ldr	r3, [sp, #16]
 8018864:	2b00      	cmp	r3, #0
 8018866:	dd08      	ble.n	801887a <_dtoa_r+0x78a>
 8018868:	42ab      	cmp	r3, r5
 801886a:	9a04      	ldr	r2, [sp, #16]
 801886c:	bfa8      	it	ge
 801886e:	462b      	movge	r3, r5
 8018870:	eba8 0803 	sub.w	r8, r8, r3
 8018874:	1aed      	subs	r5, r5, r3
 8018876:	1ad3      	subs	r3, r2, r3
 8018878:	9304      	str	r3, [sp, #16]
 801887a:	9b06      	ldr	r3, [sp, #24]
 801887c:	b1fb      	cbz	r3, 80188be <_dtoa_r+0x7ce>
 801887e:	9b08      	ldr	r3, [sp, #32]
 8018880:	2b00      	cmp	r3, #0
 8018882:	f000 809f 	beq.w	80189c4 <_dtoa_r+0x8d4>
 8018886:	2e00      	cmp	r6, #0
 8018888:	dd11      	ble.n	80188ae <_dtoa_r+0x7be>
 801888a:	4639      	mov	r1, r7
 801888c:	4632      	mov	r2, r6
 801888e:	4620      	mov	r0, r4
 8018890:	f000 fcdc 	bl	801924c <__pow5mult>
 8018894:	465a      	mov	r2, fp
 8018896:	4601      	mov	r1, r0
 8018898:	4607      	mov	r7, r0
 801889a:	4620      	mov	r0, r4
 801889c:	f000 fc30 	bl	8019100 <__multiply>
 80188a0:	4659      	mov	r1, fp
 80188a2:	9007      	str	r0, [sp, #28]
 80188a4:	4620      	mov	r0, r4
 80188a6:	f000 fb59 	bl	8018f5c <_Bfree>
 80188aa:	9b07      	ldr	r3, [sp, #28]
 80188ac:	469b      	mov	fp, r3
 80188ae:	9b06      	ldr	r3, [sp, #24]
 80188b0:	1b9a      	subs	r2, r3, r6
 80188b2:	d004      	beq.n	80188be <_dtoa_r+0x7ce>
 80188b4:	4659      	mov	r1, fp
 80188b6:	4620      	mov	r0, r4
 80188b8:	f000 fcc8 	bl	801924c <__pow5mult>
 80188bc:	4683      	mov	fp, r0
 80188be:	2101      	movs	r1, #1
 80188c0:	4620      	mov	r0, r4
 80188c2:	f000 fc07 	bl	80190d4 <__i2b>
 80188c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	4606      	mov	r6, r0
 80188cc:	dd7c      	ble.n	80189c8 <_dtoa_r+0x8d8>
 80188ce:	461a      	mov	r2, r3
 80188d0:	4601      	mov	r1, r0
 80188d2:	4620      	mov	r0, r4
 80188d4:	f000 fcba 	bl	801924c <__pow5mult>
 80188d8:	9b05      	ldr	r3, [sp, #20]
 80188da:	2b01      	cmp	r3, #1
 80188dc:	4606      	mov	r6, r0
 80188de:	dd76      	ble.n	80189ce <_dtoa_r+0x8de>
 80188e0:	2300      	movs	r3, #0
 80188e2:	9306      	str	r3, [sp, #24]
 80188e4:	6933      	ldr	r3, [r6, #16]
 80188e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80188ea:	6918      	ldr	r0, [r3, #16]
 80188ec:	f000 fba2 	bl	8019034 <__hi0bits>
 80188f0:	f1c0 0020 	rsb	r0, r0, #32
 80188f4:	9b04      	ldr	r3, [sp, #16]
 80188f6:	4418      	add	r0, r3
 80188f8:	f010 001f 	ands.w	r0, r0, #31
 80188fc:	f000 8086 	beq.w	8018a0c <_dtoa_r+0x91c>
 8018900:	f1c0 0320 	rsb	r3, r0, #32
 8018904:	2b04      	cmp	r3, #4
 8018906:	dd7f      	ble.n	8018a08 <_dtoa_r+0x918>
 8018908:	f1c0 001c 	rsb	r0, r0, #28
 801890c:	9b04      	ldr	r3, [sp, #16]
 801890e:	4403      	add	r3, r0
 8018910:	4480      	add	r8, r0
 8018912:	4405      	add	r5, r0
 8018914:	9304      	str	r3, [sp, #16]
 8018916:	f1b8 0f00 	cmp.w	r8, #0
 801891a:	dd05      	ble.n	8018928 <_dtoa_r+0x838>
 801891c:	4659      	mov	r1, fp
 801891e:	4642      	mov	r2, r8
 8018920:	4620      	mov	r0, r4
 8018922:	f000 fced 	bl	8019300 <__lshift>
 8018926:	4683      	mov	fp, r0
 8018928:	9b04      	ldr	r3, [sp, #16]
 801892a:	2b00      	cmp	r3, #0
 801892c:	dd05      	ble.n	801893a <_dtoa_r+0x84a>
 801892e:	4631      	mov	r1, r6
 8018930:	461a      	mov	r2, r3
 8018932:	4620      	mov	r0, r4
 8018934:	f000 fce4 	bl	8019300 <__lshift>
 8018938:	4606      	mov	r6, r0
 801893a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801893c:	2b00      	cmp	r3, #0
 801893e:	d069      	beq.n	8018a14 <_dtoa_r+0x924>
 8018940:	4631      	mov	r1, r6
 8018942:	4658      	mov	r0, fp
 8018944:	f000 fd48 	bl	80193d8 <__mcmp>
 8018948:	2800      	cmp	r0, #0
 801894a:	da63      	bge.n	8018a14 <_dtoa_r+0x924>
 801894c:	2300      	movs	r3, #0
 801894e:	4659      	mov	r1, fp
 8018950:	220a      	movs	r2, #10
 8018952:	4620      	mov	r0, r4
 8018954:	f000 fb24 	bl	8018fa0 <__multadd>
 8018958:	9b08      	ldr	r3, [sp, #32]
 801895a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801895e:	4683      	mov	fp, r0
 8018960:	2b00      	cmp	r3, #0
 8018962:	f000 818f 	beq.w	8018c84 <_dtoa_r+0xb94>
 8018966:	4639      	mov	r1, r7
 8018968:	2300      	movs	r3, #0
 801896a:	220a      	movs	r2, #10
 801896c:	4620      	mov	r0, r4
 801896e:	f000 fb17 	bl	8018fa0 <__multadd>
 8018972:	f1b9 0f00 	cmp.w	r9, #0
 8018976:	4607      	mov	r7, r0
 8018978:	f300 808e 	bgt.w	8018a98 <_dtoa_r+0x9a8>
 801897c:	9b05      	ldr	r3, [sp, #20]
 801897e:	2b02      	cmp	r3, #2
 8018980:	dc50      	bgt.n	8018a24 <_dtoa_r+0x934>
 8018982:	e089      	b.n	8018a98 <_dtoa_r+0x9a8>
 8018984:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018986:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801898a:	e75d      	b.n	8018848 <_dtoa_r+0x758>
 801898c:	9b01      	ldr	r3, [sp, #4]
 801898e:	1e5e      	subs	r6, r3, #1
 8018990:	9b06      	ldr	r3, [sp, #24]
 8018992:	42b3      	cmp	r3, r6
 8018994:	bfbf      	itttt	lt
 8018996:	9b06      	ldrlt	r3, [sp, #24]
 8018998:	9606      	strlt	r6, [sp, #24]
 801899a:	1af2      	sublt	r2, r6, r3
 801899c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801899e:	bfb6      	itet	lt
 80189a0:	189b      	addlt	r3, r3, r2
 80189a2:	1b9e      	subge	r6, r3, r6
 80189a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80189a6:	9b01      	ldr	r3, [sp, #4]
 80189a8:	bfb8      	it	lt
 80189aa:	2600      	movlt	r6, #0
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	bfb5      	itete	lt
 80189b0:	eba8 0503 	sublt.w	r5, r8, r3
 80189b4:	9b01      	ldrge	r3, [sp, #4]
 80189b6:	2300      	movlt	r3, #0
 80189b8:	4645      	movge	r5, r8
 80189ba:	e747      	b.n	801884c <_dtoa_r+0x75c>
 80189bc:	9e06      	ldr	r6, [sp, #24]
 80189be:	9f08      	ldr	r7, [sp, #32]
 80189c0:	4645      	mov	r5, r8
 80189c2:	e74c      	b.n	801885e <_dtoa_r+0x76e>
 80189c4:	9a06      	ldr	r2, [sp, #24]
 80189c6:	e775      	b.n	80188b4 <_dtoa_r+0x7c4>
 80189c8:	9b05      	ldr	r3, [sp, #20]
 80189ca:	2b01      	cmp	r3, #1
 80189cc:	dc18      	bgt.n	8018a00 <_dtoa_r+0x910>
 80189ce:	9b02      	ldr	r3, [sp, #8]
 80189d0:	b9b3      	cbnz	r3, 8018a00 <_dtoa_r+0x910>
 80189d2:	9b03      	ldr	r3, [sp, #12]
 80189d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80189d8:	b9a3      	cbnz	r3, 8018a04 <_dtoa_r+0x914>
 80189da:	9b03      	ldr	r3, [sp, #12]
 80189dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80189e0:	0d1b      	lsrs	r3, r3, #20
 80189e2:	051b      	lsls	r3, r3, #20
 80189e4:	b12b      	cbz	r3, 80189f2 <_dtoa_r+0x902>
 80189e6:	9b04      	ldr	r3, [sp, #16]
 80189e8:	3301      	adds	r3, #1
 80189ea:	9304      	str	r3, [sp, #16]
 80189ec:	f108 0801 	add.w	r8, r8, #1
 80189f0:	2301      	movs	r3, #1
 80189f2:	9306      	str	r3, [sp, #24]
 80189f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	f47f af74 	bne.w	80188e4 <_dtoa_r+0x7f4>
 80189fc:	2001      	movs	r0, #1
 80189fe:	e779      	b.n	80188f4 <_dtoa_r+0x804>
 8018a00:	2300      	movs	r3, #0
 8018a02:	e7f6      	b.n	80189f2 <_dtoa_r+0x902>
 8018a04:	9b02      	ldr	r3, [sp, #8]
 8018a06:	e7f4      	b.n	80189f2 <_dtoa_r+0x902>
 8018a08:	d085      	beq.n	8018916 <_dtoa_r+0x826>
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	301c      	adds	r0, #28
 8018a0e:	e77d      	b.n	801890c <_dtoa_r+0x81c>
 8018a10:	40240000 	.word	0x40240000
 8018a14:	9b01      	ldr	r3, [sp, #4]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	dc38      	bgt.n	8018a8c <_dtoa_r+0x99c>
 8018a1a:	9b05      	ldr	r3, [sp, #20]
 8018a1c:	2b02      	cmp	r3, #2
 8018a1e:	dd35      	ble.n	8018a8c <_dtoa_r+0x99c>
 8018a20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018a24:	f1b9 0f00 	cmp.w	r9, #0
 8018a28:	d10d      	bne.n	8018a46 <_dtoa_r+0x956>
 8018a2a:	4631      	mov	r1, r6
 8018a2c:	464b      	mov	r3, r9
 8018a2e:	2205      	movs	r2, #5
 8018a30:	4620      	mov	r0, r4
 8018a32:	f000 fab5 	bl	8018fa0 <__multadd>
 8018a36:	4601      	mov	r1, r0
 8018a38:	4606      	mov	r6, r0
 8018a3a:	4658      	mov	r0, fp
 8018a3c:	f000 fccc 	bl	80193d8 <__mcmp>
 8018a40:	2800      	cmp	r0, #0
 8018a42:	f73f adbd 	bgt.w	80185c0 <_dtoa_r+0x4d0>
 8018a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a48:	9d00      	ldr	r5, [sp, #0]
 8018a4a:	ea6f 0a03 	mvn.w	sl, r3
 8018a4e:	f04f 0800 	mov.w	r8, #0
 8018a52:	4631      	mov	r1, r6
 8018a54:	4620      	mov	r0, r4
 8018a56:	f000 fa81 	bl	8018f5c <_Bfree>
 8018a5a:	2f00      	cmp	r7, #0
 8018a5c:	f43f aeb4 	beq.w	80187c8 <_dtoa_r+0x6d8>
 8018a60:	f1b8 0f00 	cmp.w	r8, #0
 8018a64:	d005      	beq.n	8018a72 <_dtoa_r+0x982>
 8018a66:	45b8      	cmp	r8, r7
 8018a68:	d003      	beq.n	8018a72 <_dtoa_r+0x982>
 8018a6a:	4641      	mov	r1, r8
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	f000 fa75 	bl	8018f5c <_Bfree>
 8018a72:	4639      	mov	r1, r7
 8018a74:	4620      	mov	r0, r4
 8018a76:	f000 fa71 	bl	8018f5c <_Bfree>
 8018a7a:	e6a5      	b.n	80187c8 <_dtoa_r+0x6d8>
 8018a7c:	2600      	movs	r6, #0
 8018a7e:	4637      	mov	r7, r6
 8018a80:	e7e1      	b.n	8018a46 <_dtoa_r+0x956>
 8018a82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018a84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018a88:	4637      	mov	r7, r6
 8018a8a:	e599      	b.n	80185c0 <_dtoa_r+0x4d0>
 8018a8c:	9b08      	ldr	r3, [sp, #32]
 8018a8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	f000 80fd 	beq.w	8018c92 <_dtoa_r+0xba2>
 8018a98:	2d00      	cmp	r5, #0
 8018a9a:	dd05      	ble.n	8018aa8 <_dtoa_r+0x9b8>
 8018a9c:	4639      	mov	r1, r7
 8018a9e:	462a      	mov	r2, r5
 8018aa0:	4620      	mov	r0, r4
 8018aa2:	f000 fc2d 	bl	8019300 <__lshift>
 8018aa6:	4607      	mov	r7, r0
 8018aa8:	9b06      	ldr	r3, [sp, #24]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d05c      	beq.n	8018b68 <_dtoa_r+0xa78>
 8018aae:	6879      	ldr	r1, [r7, #4]
 8018ab0:	4620      	mov	r0, r4
 8018ab2:	f000 fa13 	bl	8018edc <_Balloc>
 8018ab6:	4605      	mov	r5, r0
 8018ab8:	b928      	cbnz	r0, 8018ac6 <_dtoa_r+0x9d6>
 8018aba:	4b80      	ldr	r3, [pc, #512]	; (8018cbc <_dtoa_r+0xbcc>)
 8018abc:	4602      	mov	r2, r0
 8018abe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018ac2:	f7ff bb2e 	b.w	8018122 <_dtoa_r+0x32>
 8018ac6:	693a      	ldr	r2, [r7, #16]
 8018ac8:	3202      	adds	r2, #2
 8018aca:	0092      	lsls	r2, r2, #2
 8018acc:	f107 010c 	add.w	r1, r7, #12
 8018ad0:	300c      	adds	r0, #12
 8018ad2:	f7fe fcb7 	bl	8017444 <memcpy>
 8018ad6:	2201      	movs	r2, #1
 8018ad8:	4629      	mov	r1, r5
 8018ada:	4620      	mov	r0, r4
 8018adc:	f000 fc10 	bl	8019300 <__lshift>
 8018ae0:	9b00      	ldr	r3, [sp, #0]
 8018ae2:	3301      	adds	r3, #1
 8018ae4:	9301      	str	r3, [sp, #4]
 8018ae6:	9b00      	ldr	r3, [sp, #0]
 8018ae8:	444b      	add	r3, r9
 8018aea:	9307      	str	r3, [sp, #28]
 8018aec:	9b02      	ldr	r3, [sp, #8]
 8018aee:	f003 0301 	and.w	r3, r3, #1
 8018af2:	46b8      	mov	r8, r7
 8018af4:	9306      	str	r3, [sp, #24]
 8018af6:	4607      	mov	r7, r0
 8018af8:	9b01      	ldr	r3, [sp, #4]
 8018afa:	4631      	mov	r1, r6
 8018afc:	3b01      	subs	r3, #1
 8018afe:	4658      	mov	r0, fp
 8018b00:	9302      	str	r3, [sp, #8]
 8018b02:	f7ff fa69 	bl	8017fd8 <quorem>
 8018b06:	4603      	mov	r3, r0
 8018b08:	3330      	adds	r3, #48	; 0x30
 8018b0a:	9004      	str	r0, [sp, #16]
 8018b0c:	4641      	mov	r1, r8
 8018b0e:	4658      	mov	r0, fp
 8018b10:	9308      	str	r3, [sp, #32]
 8018b12:	f000 fc61 	bl	80193d8 <__mcmp>
 8018b16:	463a      	mov	r2, r7
 8018b18:	4681      	mov	r9, r0
 8018b1a:	4631      	mov	r1, r6
 8018b1c:	4620      	mov	r0, r4
 8018b1e:	f000 fc77 	bl	8019410 <__mdiff>
 8018b22:	68c2      	ldr	r2, [r0, #12]
 8018b24:	9b08      	ldr	r3, [sp, #32]
 8018b26:	4605      	mov	r5, r0
 8018b28:	bb02      	cbnz	r2, 8018b6c <_dtoa_r+0xa7c>
 8018b2a:	4601      	mov	r1, r0
 8018b2c:	4658      	mov	r0, fp
 8018b2e:	f000 fc53 	bl	80193d8 <__mcmp>
 8018b32:	9b08      	ldr	r3, [sp, #32]
 8018b34:	4602      	mov	r2, r0
 8018b36:	4629      	mov	r1, r5
 8018b38:	4620      	mov	r0, r4
 8018b3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8018b3e:	f000 fa0d 	bl	8018f5c <_Bfree>
 8018b42:	9b05      	ldr	r3, [sp, #20]
 8018b44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018b46:	9d01      	ldr	r5, [sp, #4]
 8018b48:	ea43 0102 	orr.w	r1, r3, r2
 8018b4c:	9b06      	ldr	r3, [sp, #24]
 8018b4e:	430b      	orrs	r3, r1
 8018b50:	9b08      	ldr	r3, [sp, #32]
 8018b52:	d10d      	bne.n	8018b70 <_dtoa_r+0xa80>
 8018b54:	2b39      	cmp	r3, #57	; 0x39
 8018b56:	d029      	beq.n	8018bac <_dtoa_r+0xabc>
 8018b58:	f1b9 0f00 	cmp.w	r9, #0
 8018b5c:	dd01      	ble.n	8018b62 <_dtoa_r+0xa72>
 8018b5e:	9b04      	ldr	r3, [sp, #16]
 8018b60:	3331      	adds	r3, #49	; 0x31
 8018b62:	9a02      	ldr	r2, [sp, #8]
 8018b64:	7013      	strb	r3, [r2, #0]
 8018b66:	e774      	b.n	8018a52 <_dtoa_r+0x962>
 8018b68:	4638      	mov	r0, r7
 8018b6a:	e7b9      	b.n	8018ae0 <_dtoa_r+0x9f0>
 8018b6c:	2201      	movs	r2, #1
 8018b6e:	e7e2      	b.n	8018b36 <_dtoa_r+0xa46>
 8018b70:	f1b9 0f00 	cmp.w	r9, #0
 8018b74:	db06      	blt.n	8018b84 <_dtoa_r+0xa94>
 8018b76:	9905      	ldr	r1, [sp, #20]
 8018b78:	ea41 0909 	orr.w	r9, r1, r9
 8018b7c:	9906      	ldr	r1, [sp, #24]
 8018b7e:	ea59 0101 	orrs.w	r1, r9, r1
 8018b82:	d120      	bne.n	8018bc6 <_dtoa_r+0xad6>
 8018b84:	2a00      	cmp	r2, #0
 8018b86:	ddec      	ble.n	8018b62 <_dtoa_r+0xa72>
 8018b88:	4659      	mov	r1, fp
 8018b8a:	2201      	movs	r2, #1
 8018b8c:	4620      	mov	r0, r4
 8018b8e:	9301      	str	r3, [sp, #4]
 8018b90:	f000 fbb6 	bl	8019300 <__lshift>
 8018b94:	4631      	mov	r1, r6
 8018b96:	4683      	mov	fp, r0
 8018b98:	f000 fc1e 	bl	80193d8 <__mcmp>
 8018b9c:	2800      	cmp	r0, #0
 8018b9e:	9b01      	ldr	r3, [sp, #4]
 8018ba0:	dc02      	bgt.n	8018ba8 <_dtoa_r+0xab8>
 8018ba2:	d1de      	bne.n	8018b62 <_dtoa_r+0xa72>
 8018ba4:	07da      	lsls	r2, r3, #31
 8018ba6:	d5dc      	bpl.n	8018b62 <_dtoa_r+0xa72>
 8018ba8:	2b39      	cmp	r3, #57	; 0x39
 8018baa:	d1d8      	bne.n	8018b5e <_dtoa_r+0xa6e>
 8018bac:	9a02      	ldr	r2, [sp, #8]
 8018bae:	2339      	movs	r3, #57	; 0x39
 8018bb0:	7013      	strb	r3, [r2, #0]
 8018bb2:	462b      	mov	r3, r5
 8018bb4:	461d      	mov	r5, r3
 8018bb6:	3b01      	subs	r3, #1
 8018bb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018bbc:	2a39      	cmp	r2, #57	; 0x39
 8018bbe:	d050      	beq.n	8018c62 <_dtoa_r+0xb72>
 8018bc0:	3201      	adds	r2, #1
 8018bc2:	701a      	strb	r2, [r3, #0]
 8018bc4:	e745      	b.n	8018a52 <_dtoa_r+0x962>
 8018bc6:	2a00      	cmp	r2, #0
 8018bc8:	dd03      	ble.n	8018bd2 <_dtoa_r+0xae2>
 8018bca:	2b39      	cmp	r3, #57	; 0x39
 8018bcc:	d0ee      	beq.n	8018bac <_dtoa_r+0xabc>
 8018bce:	3301      	adds	r3, #1
 8018bd0:	e7c7      	b.n	8018b62 <_dtoa_r+0xa72>
 8018bd2:	9a01      	ldr	r2, [sp, #4]
 8018bd4:	9907      	ldr	r1, [sp, #28]
 8018bd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8018bda:	428a      	cmp	r2, r1
 8018bdc:	d02a      	beq.n	8018c34 <_dtoa_r+0xb44>
 8018bde:	4659      	mov	r1, fp
 8018be0:	2300      	movs	r3, #0
 8018be2:	220a      	movs	r2, #10
 8018be4:	4620      	mov	r0, r4
 8018be6:	f000 f9db 	bl	8018fa0 <__multadd>
 8018bea:	45b8      	cmp	r8, r7
 8018bec:	4683      	mov	fp, r0
 8018bee:	f04f 0300 	mov.w	r3, #0
 8018bf2:	f04f 020a 	mov.w	r2, #10
 8018bf6:	4641      	mov	r1, r8
 8018bf8:	4620      	mov	r0, r4
 8018bfa:	d107      	bne.n	8018c0c <_dtoa_r+0xb1c>
 8018bfc:	f000 f9d0 	bl	8018fa0 <__multadd>
 8018c00:	4680      	mov	r8, r0
 8018c02:	4607      	mov	r7, r0
 8018c04:	9b01      	ldr	r3, [sp, #4]
 8018c06:	3301      	adds	r3, #1
 8018c08:	9301      	str	r3, [sp, #4]
 8018c0a:	e775      	b.n	8018af8 <_dtoa_r+0xa08>
 8018c0c:	f000 f9c8 	bl	8018fa0 <__multadd>
 8018c10:	4639      	mov	r1, r7
 8018c12:	4680      	mov	r8, r0
 8018c14:	2300      	movs	r3, #0
 8018c16:	220a      	movs	r2, #10
 8018c18:	4620      	mov	r0, r4
 8018c1a:	f000 f9c1 	bl	8018fa0 <__multadd>
 8018c1e:	4607      	mov	r7, r0
 8018c20:	e7f0      	b.n	8018c04 <_dtoa_r+0xb14>
 8018c22:	f1b9 0f00 	cmp.w	r9, #0
 8018c26:	9a00      	ldr	r2, [sp, #0]
 8018c28:	bfcc      	ite	gt
 8018c2a:	464d      	movgt	r5, r9
 8018c2c:	2501      	movle	r5, #1
 8018c2e:	4415      	add	r5, r2
 8018c30:	f04f 0800 	mov.w	r8, #0
 8018c34:	4659      	mov	r1, fp
 8018c36:	2201      	movs	r2, #1
 8018c38:	4620      	mov	r0, r4
 8018c3a:	9301      	str	r3, [sp, #4]
 8018c3c:	f000 fb60 	bl	8019300 <__lshift>
 8018c40:	4631      	mov	r1, r6
 8018c42:	4683      	mov	fp, r0
 8018c44:	f000 fbc8 	bl	80193d8 <__mcmp>
 8018c48:	2800      	cmp	r0, #0
 8018c4a:	dcb2      	bgt.n	8018bb2 <_dtoa_r+0xac2>
 8018c4c:	d102      	bne.n	8018c54 <_dtoa_r+0xb64>
 8018c4e:	9b01      	ldr	r3, [sp, #4]
 8018c50:	07db      	lsls	r3, r3, #31
 8018c52:	d4ae      	bmi.n	8018bb2 <_dtoa_r+0xac2>
 8018c54:	462b      	mov	r3, r5
 8018c56:	461d      	mov	r5, r3
 8018c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018c5c:	2a30      	cmp	r2, #48	; 0x30
 8018c5e:	d0fa      	beq.n	8018c56 <_dtoa_r+0xb66>
 8018c60:	e6f7      	b.n	8018a52 <_dtoa_r+0x962>
 8018c62:	9a00      	ldr	r2, [sp, #0]
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d1a5      	bne.n	8018bb4 <_dtoa_r+0xac4>
 8018c68:	f10a 0a01 	add.w	sl, sl, #1
 8018c6c:	2331      	movs	r3, #49	; 0x31
 8018c6e:	e779      	b.n	8018b64 <_dtoa_r+0xa74>
 8018c70:	4b13      	ldr	r3, [pc, #76]	; (8018cc0 <_dtoa_r+0xbd0>)
 8018c72:	f7ff baaf 	b.w	80181d4 <_dtoa_r+0xe4>
 8018c76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	f47f aa86 	bne.w	801818a <_dtoa_r+0x9a>
 8018c7e:	4b11      	ldr	r3, [pc, #68]	; (8018cc4 <_dtoa_r+0xbd4>)
 8018c80:	f7ff baa8 	b.w	80181d4 <_dtoa_r+0xe4>
 8018c84:	f1b9 0f00 	cmp.w	r9, #0
 8018c88:	dc03      	bgt.n	8018c92 <_dtoa_r+0xba2>
 8018c8a:	9b05      	ldr	r3, [sp, #20]
 8018c8c:	2b02      	cmp	r3, #2
 8018c8e:	f73f aec9 	bgt.w	8018a24 <_dtoa_r+0x934>
 8018c92:	9d00      	ldr	r5, [sp, #0]
 8018c94:	4631      	mov	r1, r6
 8018c96:	4658      	mov	r0, fp
 8018c98:	f7ff f99e 	bl	8017fd8 <quorem>
 8018c9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018ca0:	f805 3b01 	strb.w	r3, [r5], #1
 8018ca4:	9a00      	ldr	r2, [sp, #0]
 8018ca6:	1aaa      	subs	r2, r5, r2
 8018ca8:	4591      	cmp	r9, r2
 8018caa:	ddba      	ble.n	8018c22 <_dtoa_r+0xb32>
 8018cac:	4659      	mov	r1, fp
 8018cae:	2300      	movs	r3, #0
 8018cb0:	220a      	movs	r2, #10
 8018cb2:	4620      	mov	r0, r4
 8018cb4:	f000 f974 	bl	8018fa0 <__multadd>
 8018cb8:	4683      	mov	fp, r0
 8018cba:	e7eb      	b.n	8018c94 <_dtoa_r+0xba4>
 8018cbc:	0801a943 	.word	0x0801a943
 8018cc0:	0801a89c 	.word	0x0801a89c
 8018cc4:	0801a8c0 	.word	0x0801a8c0

08018cc8 <std>:
 8018cc8:	2300      	movs	r3, #0
 8018cca:	b510      	push	{r4, lr}
 8018ccc:	4604      	mov	r4, r0
 8018cce:	e9c0 3300 	strd	r3, r3, [r0]
 8018cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018cd6:	6083      	str	r3, [r0, #8]
 8018cd8:	8181      	strh	r1, [r0, #12]
 8018cda:	6643      	str	r3, [r0, #100]	; 0x64
 8018cdc:	81c2      	strh	r2, [r0, #14]
 8018cde:	6183      	str	r3, [r0, #24]
 8018ce0:	4619      	mov	r1, r3
 8018ce2:	2208      	movs	r2, #8
 8018ce4:	305c      	adds	r0, #92	; 0x5c
 8018ce6:	f7fe fbbb 	bl	8017460 <memset>
 8018cea:	4b05      	ldr	r3, [pc, #20]	; (8018d00 <std+0x38>)
 8018cec:	6263      	str	r3, [r4, #36]	; 0x24
 8018cee:	4b05      	ldr	r3, [pc, #20]	; (8018d04 <std+0x3c>)
 8018cf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8018cf2:	4b05      	ldr	r3, [pc, #20]	; (8018d08 <std+0x40>)
 8018cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018cf6:	4b05      	ldr	r3, [pc, #20]	; (8018d0c <std+0x44>)
 8018cf8:	6224      	str	r4, [r4, #32]
 8018cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8018cfc:	bd10      	pop	{r4, pc}
 8018cfe:	bf00      	nop
 8018d00:	08019b61 	.word	0x08019b61
 8018d04:	08019b83 	.word	0x08019b83
 8018d08:	08019bbb 	.word	0x08019bbb
 8018d0c:	08019bdf 	.word	0x08019bdf

08018d10 <_cleanup_r>:
 8018d10:	4901      	ldr	r1, [pc, #4]	; (8018d18 <_cleanup_r+0x8>)
 8018d12:	f000 b8af 	b.w	8018e74 <_fwalk_reent>
 8018d16:	bf00      	nop
 8018d18:	08019ef5 	.word	0x08019ef5

08018d1c <__sfmoreglue>:
 8018d1c:	b570      	push	{r4, r5, r6, lr}
 8018d1e:	1e4a      	subs	r2, r1, #1
 8018d20:	2568      	movs	r5, #104	; 0x68
 8018d22:	4355      	muls	r5, r2
 8018d24:	460e      	mov	r6, r1
 8018d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018d2a:	f7fe fbf1 	bl	8017510 <_malloc_r>
 8018d2e:	4604      	mov	r4, r0
 8018d30:	b140      	cbz	r0, 8018d44 <__sfmoreglue+0x28>
 8018d32:	2100      	movs	r1, #0
 8018d34:	e9c0 1600 	strd	r1, r6, [r0]
 8018d38:	300c      	adds	r0, #12
 8018d3a:	60a0      	str	r0, [r4, #8]
 8018d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018d40:	f7fe fb8e 	bl	8017460 <memset>
 8018d44:	4620      	mov	r0, r4
 8018d46:	bd70      	pop	{r4, r5, r6, pc}

08018d48 <__sfp_lock_acquire>:
 8018d48:	4801      	ldr	r0, [pc, #4]	; (8018d50 <__sfp_lock_acquire+0x8>)
 8018d4a:	f000 b8b8 	b.w	8018ebe <__retarget_lock_acquire_recursive>
 8018d4e:	bf00      	nop
 8018d50:	20001a00 	.word	0x20001a00

08018d54 <__sfp_lock_release>:
 8018d54:	4801      	ldr	r0, [pc, #4]	; (8018d5c <__sfp_lock_release+0x8>)
 8018d56:	f000 b8b3 	b.w	8018ec0 <__retarget_lock_release_recursive>
 8018d5a:	bf00      	nop
 8018d5c:	20001a00 	.word	0x20001a00

08018d60 <__sinit_lock_acquire>:
 8018d60:	4801      	ldr	r0, [pc, #4]	; (8018d68 <__sinit_lock_acquire+0x8>)
 8018d62:	f000 b8ac 	b.w	8018ebe <__retarget_lock_acquire_recursive>
 8018d66:	bf00      	nop
 8018d68:	200019fb 	.word	0x200019fb

08018d6c <__sinit_lock_release>:
 8018d6c:	4801      	ldr	r0, [pc, #4]	; (8018d74 <__sinit_lock_release+0x8>)
 8018d6e:	f000 b8a7 	b.w	8018ec0 <__retarget_lock_release_recursive>
 8018d72:	bf00      	nop
 8018d74:	200019fb 	.word	0x200019fb

08018d78 <__sinit>:
 8018d78:	b510      	push	{r4, lr}
 8018d7a:	4604      	mov	r4, r0
 8018d7c:	f7ff fff0 	bl	8018d60 <__sinit_lock_acquire>
 8018d80:	69a3      	ldr	r3, [r4, #24]
 8018d82:	b11b      	cbz	r3, 8018d8c <__sinit+0x14>
 8018d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d88:	f7ff bff0 	b.w	8018d6c <__sinit_lock_release>
 8018d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018d90:	6523      	str	r3, [r4, #80]	; 0x50
 8018d92:	4b13      	ldr	r3, [pc, #76]	; (8018de0 <__sinit+0x68>)
 8018d94:	4a13      	ldr	r2, [pc, #76]	; (8018de4 <__sinit+0x6c>)
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8018d9a:	42a3      	cmp	r3, r4
 8018d9c:	bf04      	itt	eq
 8018d9e:	2301      	moveq	r3, #1
 8018da0:	61a3      	streq	r3, [r4, #24]
 8018da2:	4620      	mov	r0, r4
 8018da4:	f000 f820 	bl	8018de8 <__sfp>
 8018da8:	6060      	str	r0, [r4, #4]
 8018daa:	4620      	mov	r0, r4
 8018dac:	f000 f81c 	bl	8018de8 <__sfp>
 8018db0:	60a0      	str	r0, [r4, #8]
 8018db2:	4620      	mov	r0, r4
 8018db4:	f000 f818 	bl	8018de8 <__sfp>
 8018db8:	2200      	movs	r2, #0
 8018dba:	60e0      	str	r0, [r4, #12]
 8018dbc:	2104      	movs	r1, #4
 8018dbe:	6860      	ldr	r0, [r4, #4]
 8018dc0:	f7ff ff82 	bl	8018cc8 <std>
 8018dc4:	68a0      	ldr	r0, [r4, #8]
 8018dc6:	2201      	movs	r2, #1
 8018dc8:	2109      	movs	r1, #9
 8018dca:	f7ff ff7d 	bl	8018cc8 <std>
 8018dce:	68e0      	ldr	r0, [r4, #12]
 8018dd0:	2202      	movs	r2, #2
 8018dd2:	2112      	movs	r1, #18
 8018dd4:	f7ff ff78 	bl	8018cc8 <std>
 8018dd8:	2301      	movs	r3, #1
 8018dda:	61a3      	str	r3, [r4, #24]
 8018ddc:	e7d2      	b.n	8018d84 <__sinit+0xc>
 8018dde:	bf00      	nop
 8018de0:	0801a888 	.word	0x0801a888
 8018de4:	08018d11 	.word	0x08018d11

08018de8 <__sfp>:
 8018de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dea:	4607      	mov	r7, r0
 8018dec:	f7ff ffac 	bl	8018d48 <__sfp_lock_acquire>
 8018df0:	4b1e      	ldr	r3, [pc, #120]	; (8018e6c <__sfp+0x84>)
 8018df2:	681e      	ldr	r6, [r3, #0]
 8018df4:	69b3      	ldr	r3, [r6, #24]
 8018df6:	b913      	cbnz	r3, 8018dfe <__sfp+0x16>
 8018df8:	4630      	mov	r0, r6
 8018dfa:	f7ff ffbd 	bl	8018d78 <__sinit>
 8018dfe:	3648      	adds	r6, #72	; 0x48
 8018e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018e04:	3b01      	subs	r3, #1
 8018e06:	d503      	bpl.n	8018e10 <__sfp+0x28>
 8018e08:	6833      	ldr	r3, [r6, #0]
 8018e0a:	b30b      	cbz	r3, 8018e50 <__sfp+0x68>
 8018e0c:	6836      	ldr	r6, [r6, #0]
 8018e0e:	e7f7      	b.n	8018e00 <__sfp+0x18>
 8018e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018e14:	b9d5      	cbnz	r5, 8018e4c <__sfp+0x64>
 8018e16:	4b16      	ldr	r3, [pc, #88]	; (8018e70 <__sfp+0x88>)
 8018e18:	60e3      	str	r3, [r4, #12]
 8018e1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8018e20:	f000 f84c 	bl	8018ebc <__retarget_lock_init_recursive>
 8018e24:	f7ff ff96 	bl	8018d54 <__sfp_lock_release>
 8018e28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018e2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018e30:	6025      	str	r5, [r4, #0]
 8018e32:	61a5      	str	r5, [r4, #24]
 8018e34:	2208      	movs	r2, #8
 8018e36:	4629      	mov	r1, r5
 8018e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018e3c:	f7fe fb10 	bl	8017460 <memset>
 8018e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018e48:	4620      	mov	r0, r4
 8018e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e4c:	3468      	adds	r4, #104	; 0x68
 8018e4e:	e7d9      	b.n	8018e04 <__sfp+0x1c>
 8018e50:	2104      	movs	r1, #4
 8018e52:	4638      	mov	r0, r7
 8018e54:	f7ff ff62 	bl	8018d1c <__sfmoreglue>
 8018e58:	4604      	mov	r4, r0
 8018e5a:	6030      	str	r0, [r6, #0]
 8018e5c:	2800      	cmp	r0, #0
 8018e5e:	d1d5      	bne.n	8018e0c <__sfp+0x24>
 8018e60:	f7ff ff78 	bl	8018d54 <__sfp_lock_release>
 8018e64:	230c      	movs	r3, #12
 8018e66:	603b      	str	r3, [r7, #0]
 8018e68:	e7ee      	b.n	8018e48 <__sfp+0x60>
 8018e6a:	bf00      	nop
 8018e6c:	0801a888 	.word	0x0801a888
 8018e70:	ffff0001 	.word	0xffff0001

08018e74 <_fwalk_reent>:
 8018e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018e78:	4606      	mov	r6, r0
 8018e7a:	4688      	mov	r8, r1
 8018e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018e80:	2700      	movs	r7, #0
 8018e82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018e86:	f1b9 0901 	subs.w	r9, r9, #1
 8018e8a:	d505      	bpl.n	8018e98 <_fwalk_reent+0x24>
 8018e8c:	6824      	ldr	r4, [r4, #0]
 8018e8e:	2c00      	cmp	r4, #0
 8018e90:	d1f7      	bne.n	8018e82 <_fwalk_reent+0xe>
 8018e92:	4638      	mov	r0, r7
 8018e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018e98:	89ab      	ldrh	r3, [r5, #12]
 8018e9a:	2b01      	cmp	r3, #1
 8018e9c:	d907      	bls.n	8018eae <_fwalk_reent+0x3a>
 8018e9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018ea2:	3301      	adds	r3, #1
 8018ea4:	d003      	beq.n	8018eae <_fwalk_reent+0x3a>
 8018ea6:	4629      	mov	r1, r5
 8018ea8:	4630      	mov	r0, r6
 8018eaa:	47c0      	blx	r8
 8018eac:	4307      	orrs	r7, r0
 8018eae:	3568      	adds	r5, #104	; 0x68
 8018eb0:	e7e9      	b.n	8018e86 <_fwalk_reent+0x12>
	...

08018eb4 <_localeconv_r>:
 8018eb4:	4800      	ldr	r0, [pc, #0]	; (8018eb8 <_localeconv_r+0x4>)
 8018eb6:	4770      	bx	lr
 8018eb8:	20000244 	.word	0x20000244

08018ebc <__retarget_lock_init_recursive>:
 8018ebc:	4770      	bx	lr

08018ebe <__retarget_lock_acquire_recursive>:
 8018ebe:	4770      	bx	lr

08018ec0 <__retarget_lock_release_recursive>:
 8018ec0:	4770      	bx	lr
	...

08018ec4 <__malloc_lock>:
 8018ec4:	4801      	ldr	r0, [pc, #4]	; (8018ecc <__malloc_lock+0x8>)
 8018ec6:	f7ff bffa 	b.w	8018ebe <__retarget_lock_acquire_recursive>
 8018eca:	bf00      	nop
 8018ecc:	200019fc 	.word	0x200019fc

08018ed0 <__malloc_unlock>:
 8018ed0:	4801      	ldr	r0, [pc, #4]	; (8018ed8 <__malloc_unlock+0x8>)
 8018ed2:	f7ff bff5 	b.w	8018ec0 <__retarget_lock_release_recursive>
 8018ed6:	bf00      	nop
 8018ed8:	200019fc 	.word	0x200019fc

08018edc <_Balloc>:
 8018edc:	b570      	push	{r4, r5, r6, lr}
 8018ede:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018ee0:	4604      	mov	r4, r0
 8018ee2:	460d      	mov	r5, r1
 8018ee4:	b976      	cbnz	r6, 8018f04 <_Balloc+0x28>
 8018ee6:	2010      	movs	r0, #16
 8018ee8:	f7fe faa4 	bl	8017434 <malloc>
 8018eec:	4602      	mov	r2, r0
 8018eee:	6260      	str	r0, [r4, #36]	; 0x24
 8018ef0:	b920      	cbnz	r0, 8018efc <_Balloc+0x20>
 8018ef2:	4b18      	ldr	r3, [pc, #96]	; (8018f54 <_Balloc+0x78>)
 8018ef4:	4818      	ldr	r0, [pc, #96]	; (8018f58 <_Balloc+0x7c>)
 8018ef6:	2166      	movs	r1, #102	; 0x66
 8018ef8:	f000 ff48 	bl	8019d8c <__assert_func>
 8018efc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018f00:	6006      	str	r6, [r0, #0]
 8018f02:	60c6      	str	r6, [r0, #12]
 8018f04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018f06:	68f3      	ldr	r3, [r6, #12]
 8018f08:	b183      	cbz	r3, 8018f2c <_Balloc+0x50>
 8018f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f0c:	68db      	ldr	r3, [r3, #12]
 8018f0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018f12:	b9b8      	cbnz	r0, 8018f44 <_Balloc+0x68>
 8018f14:	2101      	movs	r1, #1
 8018f16:	fa01 f605 	lsl.w	r6, r1, r5
 8018f1a:	1d72      	adds	r2, r6, #5
 8018f1c:	0092      	lsls	r2, r2, #2
 8018f1e:	4620      	mov	r0, r4
 8018f20:	f000 fb5a 	bl	80195d8 <_calloc_r>
 8018f24:	b160      	cbz	r0, 8018f40 <_Balloc+0x64>
 8018f26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018f2a:	e00e      	b.n	8018f4a <_Balloc+0x6e>
 8018f2c:	2221      	movs	r2, #33	; 0x21
 8018f2e:	2104      	movs	r1, #4
 8018f30:	4620      	mov	r0, r4
 8018f32:	f000 fb51 	bl	80195d8 <_calloc_r>
 8018f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f38:	60f0      	str	r0, [r6, #12]
 8018f3a:	68db      	ldr	r3, [r3, #12]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d1e4      	bne.n	8018f0a <_Balloc+0x2e>
 8018f40:	2000      	movs	r0, #0
 8018f42:	bd70      	pop	{r4, r5, r6, pc}
 8018f44:	6802      	ldr	r2, [r0, #0]
 8018f46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018f50:	e7f7      	b.n	8018f42 <_Balloc+0x66>
 8018f52:	bf00      	nop
 8018f54:	0801a8cd 	.word	0x0801a8cd
 8018f58:	0801a9b4 	.word	0x0801a9b4

08018f5c <_Bfree>:
 8018f5c:	b570      	push	{r4, r5, r6, lr}
 8018f5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018f60:	4605      	mov	r5, r0
 8018f62:	460c      	mov	r4, r1
 8018f64:	b976      	cbnz	r6, 8018f84 <_Bfree+0x28>
 8018f66:	2010      	movs	r0, #16
 8018f68:	f7fe fa64 	bl	8017434 <malloc>
 8018f6c:	4602      	mov	r2, r0
 8018f6e:	6268      	str	r0, [r5, #36]	; 0x24
 8018f70:	b920      	cbnz	r0, 8018f7c <_Bfree+0x20>
 8018f72:	4b09      	ldr	r3, [pc, #36]	; (8018f98 <_Bfree+0x3c>)
 8018f74:	4809      	ldr	r0, [pc, #36]	; (8018f9c <_Bfree+0x40>)
 8018f76:	218a      	movs	r1, #138	; 0x8a
 8018f78:	f000 ff08 	bl	8019d8c <__assert_func>
 8018f7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018f80:	6006      	str	r6, [r0, #0]
 8018f82:	60c6      	str	r6, [r0, #12]
 8018f84:	b13c      	cbz	r4, 8018f96 <_Bfree+0x3a>
 8018f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018f88:	6862      	ldr	r2, [r4, #4]
 8018f8a:	68db      	ldr	r3, [r3, #12]
 8018f8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f90:	6021      	str	r1, [r4, #0]
 8018f92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018f96:	bd70      	pop	{r4, r5, r6, pc}
 8018f98:	0801a8cd 	.word	0x0801a8cd
 8018f9c:	0801a9b4 	.word	0x0801a9b4

08018fa0 <__multadd>:
 8018fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fa4:	690e      	ldr	r6, [r1, #16]
 8018fa6:	4607      	mov	r7, r0
 8018fa8:	4698      	mov	r8, r3
 8018faa:	460c      	mov	r4, r1
 8018fac:	f101 0014 	add.w	r0, r1, #20
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	6805      	ldr	r5, [r0, #0]
 8018fb4:	b2a9      	uxth	r1, r5
 8018fb6:	fb02 8101 	mla	r1, r2, r1, r8
 8018fba:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018fbe:	0c2d      	lsrs	r5, r5, #16
 8018fc0:	fb02 c505 	mla	r5, r2, r5, ip
 8018fc4:	b289      	uxth	r1, r1
 8018fc6:	3301      	adds	r3, #1
 8018fc8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018fcc:	429e      	cmp	r6, r3
 8018fce:	f840 1b04 	str.w	r1, [r0], #4
 8018fd2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018fd6:	dcec      	bgt.n	8018fb2 <__multadd+0x12>
 8018fd8:	f1b8 0f00 	cmp.w	r8, #0
 8018fdc:	d022      	beq.n	8019024 <__multadd+0x84>
 8018fde:	68a3      	ldr	r3, [r4, #8]
 8018fe0:	42b3      	cmp	r3, r6
 8018fe2:	dc19      	bgt.n	8019018 <__multadd+0x78>
 8018fe4:	6861      	ldr	r1, [r4, #4]
 8018fe6:	4638      	mov	r0, r7
 8018fe8:	3101      	adds	r1, #1
 8018fea:	f7ff ff77 	bl	8018edc <_Balloc>
 8018fee:	4605      	mov	r5, r0
 8018ff0:	b928      	cbnz	r0, 8018ffe <__multadd+0x5e>
 8018ff2:	4602      	mov	r2, r0
 8018ff4:	4b0d      	ldr	r3, [pc, #52]	; (801902c <__multadd+0x8c>)
 8018ff6:	480e      	ldr	r0, [pc, #56]	; (8019030 <__multadd+0x90>)
 8018ff8:	21b5      	movs	r1, #181	; 0xb5
 8018ffa:	f000 fec7 	bl	8019d8c <__assert_func>
 8018ffe:	6922      	ldr	r2, [r4, #16]
 8019000:	3202      	adds	r2, #2
 8019002:	f104 010c 	add.w	r1, r4, #12
 8019006:	0092      	lsls	r2, r2, #2
 8019008:	300c      	adds	r0, #12
 801900a:	f7fe fa1b 	bl	8017444 <memcpy>
 801900e:	4621      	mov	r1, r4
 8019010:	4638      	mov	r0, r7
 8019012:	f7ff ffa3 	bl	8018f5c <_Bfree>
 8019016:	462c      	mov	r4, r5
 8019018:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801901c:	3601      	adds	r6, #1
 801901e:	f8c3 8014 	str.w	r8, [r3, #20]
 8019022:	6126      	str	r6, [r4, #16]
 8019024:	4620      	mov	r0, r4
 8019026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801902a:	bf00      	nop
 801902c:	0801a943 	.word	0x0801a943
 8019030:	0801a9b4 	.word	0x0801a9b4

08019034 <__hi0bits>:
 8019034:	0c03      	lsrs	r3, r0, #16
 8019036:	041b      	lsls	r3, r3, #16
 8019038:	b9d3      	cbnz	r3, 8019070 <__hi0bits+0x3c>
 801903a:	0400      	lsls	r0, r0, #16
 801903c:	2310      	movs	r3, #16
 801903e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019042:	bf04      	itt	eq
 8019044:	0200      	lsleq	r0, r0, #8
 8019046:	3308      	addeq	r3, #8
 8019048:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801904c:	bf04      	itt	eq
 801904e:	0100      	lsleq	r0, r0, #4
 8019050:	3304      	addeq	r3, #4
 8019052:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019056:	bf04      	itt	eq
 8019058:	0080      	lsleq	r0, r0, #2
 801905a:	3302      	addeq	r3, #2
 801905c:	2800      	cmp	r0, #0
 801905e:	db05      	blt.n	801906c <__hi0bits+0x38>
 8019060:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019064:	f103 0301 	add.w	r3, r3, #1
 8019068:	bf08      	it	eq
 801906a:	2320      	moveq	r3, #32
 801906c:	4618      	mov	r0, r3
 801906e:	4770      	bx	lr
 8019070:	2300      	movs	r3, #0
 8019072:	e7e4      	b.n	801903e <__hi0bits+0xa>

08019074 <__lo0bits>:
 8019074:	6803      	ldr	r3, [r0, #0]
 8019076:	f013 0207 	ands.w	r2, r3, #7
 801907a:	4601      	mov	r1, r0
 801907c:	d00b      	beq.n	8019096 <__lo0bits+0x22>
 801907e:	07da      	lsls	r2, r3, #31
 8019080:	d424      	bmi.n	80190cc <__lo0bits+0x58>
 8019082:	0798      	lsls	r0, r3, #30
 8019084:	bf49      	itett	mi
 8019086:	085b      	lsrmi	r3, r3, #1
 8019088:	089b      	lsrpl	r3, r3, #2
 801908a:	2001      	movmi	r0, #1
 801908c:	600b      	strmi	r3, [r1, #0]
 801908e:	bf5c      	itt	pl
 8019090:	600b      	strpl	r3, [r1, #0]
 8019092:	2002      	movpl	r0, #2
 8019094:	4770      	bx	lr
 8019096:	b298      	uxth	r0, r3
 8019098:	b9b0      	cbnz	r0, 80190c8 <__lo0bits+0x54>
 801909a:	0c1b      	lsrs	r3, r3, #16
 801909c:	2010      	movs	r0, #16
 801909e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80190a2:	bf04      	itt	eq
 80190a4:	0a1b      	lsreq	r3, r3, #8
 80190a6:	3008      	addeq	r0, #8
 80190a8:	071a      	lsls	r2, r3, #28
 80190aa:	bf04      	itt	eq
 80190ac:	091b      	lsreq	r3, r3, #4
 80190ae:	3004      	addeq	r0, #4
 80190b0:	079a      	lsls	r2, r3, #30
 80190b2:	bf04      	itt	eq
 80190b4:	089b      	lsreq	r3, r3, #2
 80190b6:	3002      	addeq	r0, #2
 80190b8:	07da      	lsls	r2, r3, #31
 80190ba:	d403      	bmi.n	80190c4 <__lo0bits+0x50>
 80190bc:	085b      	lsrs	r3, r3, #1
 80190be:	f100 0001 	add.w	r0, r0, #1
 80190c2:	d005      	beq.n	80190d0 <__lo0bits+0x5c>
 80190c4:	600b      	str	r3, [r1, #0]
 80190c6:	4770      	bx	lr
 80190c8:	4610      	mov	r0, r2
 80190ca:	e7e8      	b.n	801909e <__lo0bits+0x2a>
 80190cc:	2000      	movs	r0, #0
 80190ce:	4770      	bx	lr
 80190d0:	2020      	movs	r0, #32
 80190d2:	4770      	bx	lr

080190d4 <__i2b>:
 80190d4:	b510      	push	{r4, lr}
 80190d6:	460c      	mov	r4, r1
 80190d8:	2101      	movs	r1, #1
 80190da:	f7ff feff 	bl	8018edc <_Balloc>
 80190de:	4602      	mov	r2, r0
 80190e0:	b928      	cbnz	r0, 80190ee <__i2b+0x1a>
 80190e2:	4b05      	ldr	r3, [pc, #20]	; (80190f8 <__i2b+0x24>)
 80190e4:	4805      	ldr	r0, [pc, #20]	; (80190fc <__i2b+0x28>)
 80190e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80190ea:	f000 fe4f 	bl	8019d8c <__assert_func>
 80190ee:	2301      	movs	r3, #1
 80190f0:	6144      	str	r4, [r0, #20]
 80190f2:	6103      	str	r3, [r0, #16]
 80190f4:	bd10      	pop	{r4, pc}
 80190f6:	bf00      	nop
 80190f8:	0801a943 	.word	0x0801a943
 80190fc:	0801a9b4 	.word	0x0801a9b4

08019100 <__multiply>:
 8019100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019104:	4614      	mov	r4, r2
 8019106:	690a      	ldr	r2, [r1, #16]
 8019108:	6923      	ldr	r3, [r4, #16]
 801910a:	429a      	cmp	r2, r3
 801910c:	bfb8      	it	lt
 801910e:	460b      	movlt	r3, r1
 8019110:	460d      	mov	r5, r1
 8019112:	bfbc      	itt	lt
 8019114:	4625      	movlt	r5, r4
 8019116:	461c      	movlt	r4, r3
 8019118:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801911c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019120:	68ab      	ldr	r3, [r5, #8]
 8019122:	6869      	ldr	r1, [r5, #4]
 8019124:	eb0a 0709 	add.w	r7, sl, r9
 8019128:	42bb      	cmp	r3, r7
 801912a:	b085      	sub	sp, #20
 801912c:	bfb8      	it	lt
 801912e:	3101      	addlt	r1, #1
 8019130:	f7ff fed4 	bl	8018edc <_Balloc>
 8019134:	b930      	cbnz	r0, 8019144 <__multiply+0x44>
 8019136:	4602      	mov	r2, r0
 8019138:	4b42      	ldr	r3, [pc, #264]	; (8019244 <__multiply+0x144>)
 801913a:	4843      	ldr	r0, [pc, #268]	; (8019248 <__multiply+0x148>)
 801913c:	f240 115d 	movw	r1, #349	; 0x15d
 8019140:	f000 fe24 	bl	8019d8c <__assert_func>
 8019144:	f100 0614 	add.w	r6, r0, #20
 8019148:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801914c:	4633      	mov	r3, r6
 801914e:	2200      	movs	r2, #0
 8019150:	4543      	cmp	r3, r8
 8019152:	d31e      	bcc.n	8019192 <__multiply+0x92>
 8019154:	f105 0c14 	add.w	ip, r5, #20
 8019158:	f104 0314 	add.w	r3, r4, #20
 801915c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019160:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019164:	9202      	str	r2, [sp, #8]
 8019166:	ebac 0205 	sub.w	r2, ip, r5
 801916a:	3a15      	subs	r2, #21
 801916c:	f022 0203 	bic.w	r2, r2, #3
 8019170:	3204      	adds	r2, #4
 8019172:	f105 0115 	add.w	r1, r5, #21
 8019176:	458c      	cmp	ip, r1
 8019178:	bf38      	it	cc
 801917a:	2204      	movcc	r2, #4
 801917c:	9201      	str	r2, [sp, #4]
 801917e:	9a02      	ldr	r2, [sp, #8]
 8019180:	9303      	str	r3, [sp, #12]
 8019182:	429a      	cmp	r2, r3
 8019184:	d808      	bhi.n	8019198 <__multiply+0x98>
 8019186:	2f00      	cmp	r7, #0
 8019188:	dc55      	bgt.n	8019236 <__multiply+0x136>
 801918a:	6107      	str	r7, [r0, #16]
 801918c:	b005      	add	sp, #20
 801918e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019192:	f843 2b04 	str.w	r2, [r3], #4
 8019196:	e7db      	b.n	8019150 <__multiply+0x50>
 8019198:	f8b3 a000 	ldrh.w	sl, [r3]
 801919c:	f1ba 0f00 	cmp.w	sl, #0
 80191a0:	d020      	beq.n	80191e4 <__multiply+0xe4>
 80191a2:	f105 0e14 	add.w	lr, r5, #20
 80191a6:	46b1      	mov	r9, r6
 80191a8:	2200      	movs	r2, #0
 80191aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80191ae:	f8d9 b000 	ldr.w	fp, [r9]
 80191b2:	b2a1      	uxth	r1, r4
 80191b4:	fa1f fb8b 	uxth.w	fp, fp
 80191b8:	fb0a b101 	mla	r1, sl, r1, fp
 80191bc:	4411      	add	r1, r2
 80191be:	f8d9 2000 	ldr.w	r2, [r9]
 80191c2:	0c24      	lsrs	r4, r4, #16
 80191c4:	0c12      	lsrs	r2, r2, #16
 80191c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80191ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80191ce:	b289      	uxth	r1, r1
 80191d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80191d4:	45f4      	cmp	ip, lr
 80191d6:	f849 1b04 	str.w	r1, [r9], #4
 80191da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80191de:	d8e4      	bhi.n	80191aa <__multiply+0xaa>
 80191e0:	9901      	ldr	r1, [sp, #4]
 80191e2:	5072      	str	r2, [r6, r1]
 80191e4:	9a03      	ldr	r2, [sp, #12]
 80191e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80191ea:	3304      	adds	r3, #4
 80191ec:	f1b9 0f00 	cmp.w	r9, #0
 80191f0:	d01f      	beq.n	8019232 <__multiply+0x132>
 80191f2:	6834      	ldr	r4, [r6, #0]
 80191f4:	f105 0114 	add.w	r1, r5, #20
 80191f8:	46b6      	mov	lr, r6
 80191fa:	f04f 0a00 	mov.w	sl, #0
 80191fe:	880a      	ldrh	r2, [r1, #0]
 8019200:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019204:	fb09 b202 	mla	r2, r9, r2, fp
 8019208:	4492      	add	sl, r2
 801920a:	b2a4      	uxth	r4, r4
 801920c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019210:	f84e 4b04 	str.w	r4, [lr], #4
 8019214:	f851 4b04 	ldr.w	r4, [r1], #4
 8019218:	f8be 2000 	ldrh.w	r2, [lr]
 801921c:	0c24      	lsrs	r4, r4, #16
 801921e:	fb09 2404 	mla	r4, r9, r4, r2
 8019222:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019226:	458c      	cmp	ip, r1
 8019228:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801922c:	d8e7      	bhi.n	80191fe <__multiply+0xfe>
 801922e:	9a01      	ldr	r2, [sp, #4]
 8019230:	50b4      	str	r4, [r6, r2]
 8019232:	3604      	adds	r6, #4
 8019234:	e7a3      	b.n	801917e <__multiply+0x7e>
 8019236:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801923a:	2b00      	cmp	r3, #0
 801923c:	d1a5      	bne.n	801918a <__multiply+0x8a>
 801923e:	3f01      	subs	r7, #1
 8019240:	e7a1      	b.n	8019186 <__multiply+0x86>
 8019242:	bf00      	nop
 8019244:	0801a943 	.word	0x0801a943
 8019248:	0801a9b4 	.word	0x0801a9b4

0801924c <__pow5mult>:
 801924c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019250:	4615      	mov	r5, r2
 8019252:	f012 0203 	ands.w	r2, r2, #3
 8019256:	4606      	mov	r6, r0
 8019258:	460f      	mov	r7, r1
 801925a:	d007      	beq.n	801926c <__pow5mult+0x20>
 801925c:	4c25      	ldr	r4, [pc, #148]	; (80192f4 <__pow5mult+0xa8>)
 801925e:	3a01      	subs	r2, #1
 8019260:	2300      	movs	r3, #0
 8019262:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019266:	f7ff fe9b 	bl	8018fa0 <__multadd>
 801926a:	4607      	mov	r7, r0
 801926c:	10ad      	asrs	r5, r5, #2
 801926e:	d03d      	beq.n	80192ec <__pow5mult+0xa0>
 8019270:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019272:	b97c      	cbnz	r4, 8019294 <__pow5mult+0x48>
 8019274:	2010      	movs	r0, #16
 8019276:	f7fe f8dd 	bl	8017434 <malloc>
 801927a:	4602      	mov	r2, r0
 801927c:	6270      	str	r0, [r6, #36]	; 0x24
 801927e:	b928      	cbnz	r0, 801928c <__pow5mult+0x40>
 8019280:	4b1d      	ldr	r3, [pc, #116]	; (80192f8 <__pow5mult+0xac>)
 8019282:	481e      	ldr	r0, [pc, #120]	; (80192fc <__pow5mult+0xb0>)
 8019284:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019288:	f000 fd80 	bl	8019d8c <__assert_func>
 801928c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019290:	6004      	str	r4, [r0, #0]
 8019292:	60c4      	str	r4, [r0, #12]
 8019294:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019298:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801929c:	b94c      	cbnz	r4, 80192b2 <__pow5mult+0x66>
 801929e:	f240 2171 	movw	r1, #625	; 0x271
 80192a2:	4630      	mov	r0, r6
 80192a4:	f7ff ff16 	bl	80190d4 <__i2b>
 80192a8:	2300      	movs	r3, #0
 80192aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80192ae:	4604      	mov	r4, r0
 80192b0:	6003      	str	r3, [r0, #0]
 80192b2:	f04f 0900 	mov.w	r9, #0
 80192b6:	07eb      	lsls	r3, r5, #31
 80192b8:	d50a      	bpl.n	80192d0 <__pow5mult+0x84>
 80192ba:	4639      	mov	r1, r7
 80192bc:	4622      	mov	r2, r4
 80192be:	4630      	mov	r0, r6
 80192c0:	f7ff ff1e 	bl	8019100 <__multiply>
 80192c4:	4639      	mov	r1, r7
 80192c6:	4680      	mov	r8, r0
 80192c8:	4630      	mov	r0, r6
 80192ca:	f7ff fe47 	bl	8018f5c <_Bfree>
 80192ce:	4647      	mov	r7, r8
 80192d0:	106d      	asrs	r5, r5, #1
 80192d2:	d00b      	beq.n	80192ec <__pow5mult+0xa0>
 80192d4:	6820      	ldr	r0, [r4, #0]
 80192d6:	b938      	cbnz	r0, 80192e8 <__pow5mult+0x9c>
 80192d8:	4622      	mov	r2, r4
 80192da:	4621      	mov	r1, r4
 80192dc:	4630      	mov	r0, r6
 80192de:	f7ff ff0f 	bl	8019100 <__multiply>
 80192e2:	6020      	str	r0, [r4, #0]
 80192e4:	f8c0 9000 	str.w	r9, [r0]
 80192e8:	4604      	mov	r4, r0
 80192ea:	e7e4      	b.n	80192b6 <__pow5mult+0x6a>
 80192ec:	4638      	mov	r0, r7
 80192ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192f2:	bf00      	nop
 80192f4:	0801ab08 	.word	0x0801ab08
 80192f8:	0801a8cd 	.word	0x0801a8cd
 80192fc:	0801a9b4 	.word	0x0801a9b4

08019300 <__lshift>:
 8019300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019304:	460c      	mov	r4, r1
 8019306:	6849      	ldr	r1, [r1, #4]
 8019308:	6923      	ldr	r3, [r4, #16]
 801930a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801930e:	68a3      	ldr	r3, [r4, #8]
 8019310:	4607      	mov	r7, r0
 8019312:	4691      	mov	r9, r2
 8019314:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019318:	f108 0601 	add.w	r6, r8, #1
 801931c:	42b3      	cmp	r3, r6
 801931e:	db0b      	blt.n	8019338 <__lshift+0x38>
 8019320:	4638      	mov	r0, r7
 8019322:	f7ff fddb 	bl	8018edc <_Balloc>
 8019326:	4605      	mov	r5, r0
 8019328:	b948      	cbnz	r0, 801933e <__lshift+0x3e>
 801932a:	4602      	mov	r2, r0
 801932c:	4b28      	ldr	r3, [pc, #160]	; (80193d0 <__lshift+0xd0>)
 801932e:	4829      	ldr	r0, [pc, #164]	; (80193d4 <__lshift+0xd4>)
 8019330:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019334:	f000 fd2a 	bl	8019d8c <__assert_func>
 8019338:	3101      	adds	r1, #1
 801933a:	005b      	lsls	r3, r3, #1
 801933c:	e7ee      	b.n	801931c <__lshift+0x1c>
 801933e:	2300      	movs	r3, #0
 8019340:	f100 0114 	add.w	r1, r0, #20
 8019344:	f100 0210 	add.w	r2, r0, #16
 8019348:	4618      	mov	r0, r3
 801934a:	4553      	cmp	r3, sl
 801934c:	db33      	blt.n	80193b6 <__lshift+0xb6>
 801934e:	6920      	ldr	r0, [r4, #16]
 8019350:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019354:	f104 0314 	add.w	r3, r4, #20
 8019358:	f019 091f 	ands.w	r9, r9, #31
 801935c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019360:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019364:	d02b      	beq.n	80193be <__lshift+0xbe>
 8019366:	f1c9 0e20 	rsb	lr, r9, #32
 801936a:	468a      	mov	sl, r1
 801936c:	2200      	movs	r2, #0
 801936e:	6818      	ldr	r0, [r3, #0]
 8019370:	fa00 f009 	lsl.w	r0, r0, r9
 8019374:	4302      	orrs	r2, r0
 8019376:	f84a 2b04 	str.w	r2, [sl], #4
 801937a:	f853 2b04 	ldr.w	r2, [r3], #4
 801937e:	459c      	cmp	ip, r3
 8019380:	fa22 f20e 	lsr.w	r2, r2, lr
 8019384:	d8f3      	bhi.n	801936e <__lshift+0x6e>
 8019386:	ebac 0304 	sub.w	r3, ip, r4
 801938a:	3b15      	subs	r3, #21
 801938c:	f023 0303 	bic.w	r3, r3, #3
 8019390:	3304      	adds	r3, #4
 8019392:	f104 0015 	add.w	r0, r4, #21
 8019396:	4584      	cmp	ip, r0
 8019398:	bf38      	it	cc
 801939a:	2304      	movcc	r3, #4
 801939c:	50ca      	str	r2, [r1, r3]
 801939e:	b10a      	cbz	r2, 80193a4 <__lshift+0xa4>
 80193a0:	f108 0602 	add.w	r6, r8, #2
 80193a4:	3e01      	subs	r6, #1
 80193a6:	4638      	mov	r0, r7
 80193a8:	612e      	str	r6, [r5, #16]
 80193aa:	4621      	mov	r1, r4
 80193ac:	f7ff fdd6 	bl	8018f5c <_Bfree>
 80193b0:	4628      	mov	r0, r5
 80193b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80193ba:	3301      	adds	r3, #1
 80193bc:	e7c5      	b.n	801934a <__lshift+0x4a>
 80193be:	3904      	subs	r1, #4
 80193c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80193c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80193c8:	459c      	cmp	ip, r3
 80193ca:	d8f9      	bhi.n	80193c0 <__lshift+0xc0>
 80193cc:	e7ea      	b.n	80193a4 <__lshift+0xa4>
 80193ce:	bf00      	nop
 80193d0:	0801a943 	.word	0x0801a943
 80193d4:	0801a9b4 	.word	0x0801a9b4

080193d8 <__mcmp>:
 80193d8:	b530      	push	{r4, r5, lr}
 80193da:	6902      	ldr	r2, [r0, #16]
 80193dc:	690c      	ldr	r4, [r1, #16]
 80193de:	1b12      	subs	r2, r2, r4
 80193e0:	d10e      	bne.n	8019400 <__mcmp+0x28>
 80193e2:	f100 0314 	add.w	r3, r0, #20
 80193e6:	3114      	adds	r1, #20
 80193e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80193ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80193f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80193f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80193f8:	42a5      	cmp	r5, r4
 80193fa:	d003      	beq.n	8019404 <__mcmp+0x2c>
 80193fc:	d305      	bcc.n	801940a <__mcmp+0x32>
 80193fe:	2201      	movs	r2, #1
 8019400:	4610      	mov	r0, r2
 8019402:	bd30      	pop	{r4, r5, pc}
 8019404:	4283      	cmp	r3, r0
 8019406:	d3f3      	bcc.n	80193f0 <__mcmp+0x18>
 8019408:	e7fa      	b.n	8019400 <__mcmp+0x28>
 801940a:	f04f 32ff 	mov.w	r2, #4294967295
 801940e:	e7f7      	b.n	8019400 <__mcmp+0x28>

08019410 <__mdiff>:
 8019410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019414:	460c      	mov	r4, r1
 8019416:	4606      	mov	r6, r0
 8019418:	4611      	mov	r1, r2
 801941a:	4620      	mov	r0, r4
 801941c:	4617      	mov	r7, r2
 801941e:	f7ff ffdb 	bl	80193d8 <__mcmp>
 8019422:	1e05      	subs	r5, r0, #0
 8019424:	d110      	bne.n	8019448 <__mdiff+0x38>
 8019426:	4629      	mov	r1, r5
 8019428:	4630      	mov	r0, r6
 801942a:	f7ff fd57 	bl	8018edc <_Balloc>
 801942e:	b930      	cbnz	r0, 801943e <__mdiff+0x2e>
 8019430:	4b39      	ldr	r3, [pc, #228]	; (8019518 <__mdiff+0x108>)
 8019432:	4602      	mov	r2, r0
 8019434:	f240 2132 	movw	r1, #562	; 0x232
 8019438:	4838      	ldr	r0, [pc, #224]	; (801951c <__mdiff+0x10c>)
 801943a:	f000 fca7 	bl	8019d8c <__assert_func>
 801943e:	2301      	movs	r3, #1
 8019440:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019444:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019448:	bfa4      	itt	ge
 801944a:	463b      	movge	r3, r7
 801944c:	4627      	movge	r7, r4
 801944e:	4630      	mov	r0, r6
 8019450:	6879      	ldr	r1, [r7, #4]
 8019452:	bfa6      	itte	ge
 8019454:	461c      	movge	r4, r3
 8019456:	2500      	movge	r5, #0
 8019458:	2501      	movlt	r5, #1
 801945a:	f7ff fd3f 	bl	8018edc <_Balloc>
 801945e:	b920      	cbnz	r0, 801946a <__mdiff+0x5a>
 8019460:	4b2d      	ldr	r3, [pc, #180]	; (8019518 <__mdiff+0x108>)
 8019462:	4602      	mov	r2, r0
 8019464:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019468:	e7e6      	b.n	8019438 <__mdiff+0x28>
 801946a:	693e      	ldr	r6, [r7, #16]
 801946c:	60c5      	str	r5, [r0, #12]
 801946e:	6925      	ldr	r5, [r4, #16]
 8019470:	f107 0114 	add.w	r1, r7, #20
 8019474:	f104 0914 	add.w	r9, r4, #20
 8019478:	f100 0e14 	add.w	lr, r0, #20
 801947c:	f107 0210 	add.w	r2, r7, #16
 8019480:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019484:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019488:	46f2      	mov	sl, lr
 801948a:	2700      	movs	r7, #0
 801948c:	f859 3b04 	ldr.w	r3, [r9], #4
 8019490:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019494:	fa1f f883 	uxth.w	r8, r3
 8019498:	fa17 f78b 	uxtah	r7, r7, fp
 801949c:	0c1b      	lsrs	r3, r3, #16
 801949e:	eba7 0808 	sub.w	r8, r7, r8
 80194a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80194a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80194aa:	fa1f f888 	uxth.w	r8, r8
 80194ae:	141f      	asrs	r7, r3, #16
 80194b0:	454d      	cmp	r5, r9
 80194b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80194b6:	f84a 3b04 	str.w	r3, [sl], #4
 80194ba:	d8e7      	bhi.n	801948c <__mdiff+0x7c>
 80194bc:	1b2b      	subs	r3, r5, r4
 80194be:	3b15      	subs	r3, #21
 80194c0:	f023 0303 	bic.w	r3, r3, #3
 80194c4:	3304      	adds	r3, #4
 80194c6:	3415      	adds	r4, #21
 80194c8:	42a5      	cmp	r5, r4
 80194ca:	bf38      	it	cc
 80194cc:	2304      	movcc	r3, #4
 80194ce:	4419      	add	r1, r3
 80194d0:	4473      	add	r3, lr
 80194d2:	469e      	mov	lr, r3
 80194d4:	460d      	mov	r5, r1
 80194d6:	4565      	cmp	r5, ip
 80194d8:	d30e      	bcc.n	80194f8 <__mdiff+0xe8>
 80194da:	f10c 0203 	add.w	r2, ip, #3
 80194de:	1a52      	subs	r2, r2, r1
 80194e0:	f022 0203 	bic.w	r2, r2, #3
 80194e4:	3903      	subs	r1, #3
 80194e6:	458c      	cmp	ip, r1
 80194e8:	bf38      	it	cc
 80194ea:	2200      	movcc	r2, #0
 80194ec:	441a      	add	r2, r3
 80194ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80194f2:	b17b      	cbz	r3, 8019514 <__mdiff+0x104>
 80194f4:	6106      	str	r6, [r0, #16]
 80194f6:	e7a5      	b.n	8019444 <__mdiff+0x34>
 80194f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80194fc:	fa17 f488 	uxtah	r4, r7, r8
 8019500:	1422      	asrs	r2, r4, #16
 8019502:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019506:	b2a4      	uxth	r4, r4
 8019508:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801950c:	f84e 4b04 	str.w	r4, [lr], #4
 8019510:	1417      	asrs	r7, r2, #16
 8019512:	e7e0      	b.n	80194d6 <__mdiff+0xc6>
 8019514:	3e01      	subs	r6, #1
 8019516:	e7ea      	b.n	80194ee <__mdiff+0xde>
 8019518:	0801a943 	.word	0x0801a943
 801951c:	0801a9b4 	.word	0x0801a9b4

08019520 <__d2b>:
 8019520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019524:	4689      	mov	r9, r1
 8019526:	2101      	movs	r1, #1
 8019528:	ec57 6b10 	vmov	r6, r7, d0
 801952c:	4690      	mov	r8, r2
 801952e:	f7ff fcd5 	bl	8018edc <_Balloc>
 8019532:	4604      	mov	r4, r0
 8019534:	b930      	cbnz	r0, 8019544 <__d2b+0x24>
 8019536:	4602      	mov	r2, r0
 8019538:	4b25      	ldr	r3, [pc, #148]	; (80195d0 <__d2b+0xb0>)
 801953a:	4826      	ldr	r0, [pc, #152]	; (80195d4 <__d2b+0xb4>)
 801953c:	f240 310a 	movw	r1, #778	; 0x30a
 8019540:	f000 fc24 	bl	8019d8c <__assert_func>
 8019544:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801954c:	bb35      	cbnz	r5, 801959c <__d2b+0x7c>
 801954e:	2e00      	cmp	r6, #0
 8019550:	9301      	str	r3, [sp, #4]
 8019552:	d028      	beq.n	80195a6 <__d2b+0x86>
 8019554:	4668      	mov	r0, sp
 8019556:	9600      	str	r6, [sp, #0]
 8019558:	f7ff fd8c 	bl	8019074 <__lo0bits>
 801955c:	9900      	ldr	r1, [sp, #0]
 801955e:	b300      	cbz	r0, 80195a2 <__d2b+0x82>
 8019560:	9a01      	ldr	r2, [sp, #4]
 8019562:	f1c0 0320 	rsb	r3, r0, #32
 8019566:	fa02 f303 	lsl.w	r3, r2, r3
 801956a:	430b      	orrs	r3, r1
 801956c:	40c2      	lsrs	r2, r0
 801956e:	6163      	str	r3, [r4, #20]
 8019570:	9201      	str	r2, [sp, #4]
 8019572:	9b01      	ldr	r3, [sp, #4]
 8019574:	61a3      	str	r3, [r4, #24]
 8019576:	2b00      	cmp	r3, #0
 8019578:	bf14      	ite	ne
 801957a:	2202      	movne	r2, #2
 801957c:	2201      	moveq	r2, #1
 801957e:	6122      	str	r2, [r4, #16]
 8019580:	b1d5      	cbz	r5, 80195b8 <__d2b+0x98>
 8019582:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019586:	4405      	add	r5, r0
 8019588:	f8c9 5000 	str.w	r5, [r9]
 801958c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019590:	f8c8 0000 	str.w	r0, [r8]
 8019594:	4620      	mov	r0, r4
 8019596:	b003      	add	sp, #12
 8019598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801959c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80195a0:	e7d5      	b.n	801954e <__d2b+0x2e>
 80195a2:	6161      	str	r1, [r4, #20]
 80195a4:	e7e5      	b.n	8019572 <__d2b+0x52>
 80195a6:	a801      	add	r0, sp, #4
 80195a8:	f7ff fd64 	bl	8019074 <__lo0bits>
 80195ac:	9b01      	ldr	r3, [sp, #4]
 80195ae:	6163      	str	r3, [r4, #20]
 80195b0:	2201      	movs	r2, #1
 80195b2:	6122      	str	r2, [r4, #16]
 80195b4:	3020      	adds	r0, #32
 80195b6:	e7e3      	b.n	8019580 <__d2b+0x60>
 80195b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80195bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80195c0:	f8c9 0000 	str.w	r0, [r9]
 80195c4:	6918      	ldr	r0, [r3, #16]
 80195c6:	f7ff fd35 	bl	8019034 <__hi0bits>
 80195ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80195ce:	e7df      	b.n	8019590 <__d2b+0x70>
 80195d0:	0801a943 	.word	0x0801a943
 80195d4:	0801a9b4 	.word	0x0801a9b4

080195d8 <_calloc_r>:
 80195d8:	b513      	push	{r0, r1, r4, lr}
 80195da:	434a      	muls	r2, r1
 80195dc:	4611      	mov	r1, r2
 80195de:	9201      	str	r2, [sp, #4]
 80195e0:	f7fd ff96 	bl	8017510 <_malloc_r>
 80195e4:	4604      	mov	r4, r0
 80195e6:	b118      	cbz	r0, 80195f0 <_calloc_r+0x18>
 80195e8:	9a01      	ldr	r2, [sp, #4]
 80195ea:	2100      	movs	r1, #0
 80195ec:	f7fd ff38 	bl	8017460 <memset>
 80195f0:	4620      	mov	r0, r4
 80195f2:	b002      	add	sp, #8
 80195f4:	bd10      	pop	{r4, pc}

080195f6 <__ssputs_r>:
 80195f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195fa:	688e      	ldr	r6, [r1, #8]
 80195fc:	429e      	cmp	r6, r3
 80195fe:	4682      	mov	sl, r0
 8019600:	460c      	mov	r4, r1
 8019602:	4690      	mov	r8, r2
 8019604:	461f      	mov	r7, r3
 8019606:	d838      	bhi.n	801967a <__ssputs_r+0x84>
 8019608:	898a      	ldrh	r2, [r1, #12]
 801960a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801960e:	d032      	beq.n	8019676 <__ssputs_r+0x80>
 8019610:	6825      	ldr	r5, [r4, #0]
 8019612:	6909      	ldr	r1, [r1, #16]
 8019614:	eba5 0901 	sub.w	r9, r5, r1
 8019618:	6965      	ldr	r5, [r4, #20]
 801961a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801961e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019622:	3301      	adds	r3, #1
 8019624:	444b      	add	r3, r9
 8019626:	106d      	asrs	r5, r5, #1
 8019628:	429d      	cmp	r5, r3
 801962a:	bf38      	it	cc
 801962c:	461d      	movcc	r5, r3
 801962e:	0553      	lsls	r3, r2, #21
 8019630:	d531      	bpl.n	8019696 <__ssputs_r+0xa0>
 8019632:	4629      	mov	r1, r5
 8019634:	f7fd ff6c 	bl	8017510 <_malloc_r>
 8019638:	4606      	mov	r6, r0
 801963a:	b950      	cbnz	r0, 8019652 <__ssputs_r+0x5c>
 801963c:	230c      	movs	r3, #12
 801963e:	f8ca 3000 	str.w	r3, [sl]
 8019642:	89a3      	ldrh	r3, [r4, #12]
 8019644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019648:	81a3      	strh	r3, [r4, #12]
 801964a:	f04f 30ff 	mov.w	r0, #4294967295
 801964e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019652:	6921      	ldr	r1, [r4, #16]
 8019654:	464a      	mov	r2, r9
 8019656:	f7fd fef5 	bl	8017444 <memcpy>
 801965a:	89a3      	ldrh	r3, [r4, #12]
 801965c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019664:	81a3      	strh	r3, [r4, #12]
 8019666:	6126      	str	r6, [r4, #16]
 8019668:	6165      	str	r5, [r4, #20]
 801966a:	444e      	add	r6, r9
 801966c:	eba5 0509 	sub.w	r5, r5, r9
 8019670:	6026      	str	r6, [r4, #0]
 8019672:	60a5      	str	r5, [r4, #8]
 8019674:	463e      	mov	r6, r7
 8019676:	42be      	cmp	r6, r7
 8019678:	d900      	bls.n	801967c <__ssputs_r+0x86>
 801967a:	463e      	mov	r6, r7
 801967c:	4632      	mov	r2, r6
 801967e:	6820      	ldr	r0, [r4, #0]
 8019680:	4641      	mov	r1, r8
 8019682:	f000 fd0d 	bl	801a0a0 <memmove>
 8019686:	68a3      	ldr	r3, [r4, #8]
 8019688:	6822      	ldr	r2, [r4, #0]
 801968a:	1b9b      	subs	r3, r3, r6
 801968c:	4432      	add	r2, r6
 801968e:	60a3      	str	r3, [r4, #8]
 8019690:	6022      	str	r2, [r4, #0]
 8019692:	2000      	movs	r0, #0
 8019694:	e7db      	b.n	801964e <__ssputs_r+0x58>
 8019696:	462a      	mov	r2, r5
 8019698:	f000 fd1c 	bl	801a0d4 <_realloc_r>
 801969c:	4606      	mov	r6, r0
 801969e:	2800      	cmp	r0, #0
 80196a0:	d1e1      	bne.n	8019666 <__ssputs_r+0x70>
 80196a2:	6921      	ldr	r1, [r4, #16]
 80196a4:	4650      	mov	r0, sl
 80196a6:	f7fd fee3 	bl	8017470 <_free_r>
 80196aa:	e7c7      	b.n	801963c <__ssputs_r+0x46>

080196ac <_svfiprintf_r>:
 80196ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196b0:	4698      	mov	r8, r3
 80196b2:	898b      	ldrh	r3, [r1, #12]
 80196b4:	061b      	lsls	r3, r3, #24
 80196b6:	b09d      	sub	sp, #116	; 0x74
 80196b8:	4607      	mov	r7, r0
 80196ba:	460d      	mov	r5, r1
 80196bc:	4614      	mov	r4, r2
 80196be:	d50e      	bpl.n	80196de <_svfiprintf_r+0x32>
 80196c0:	690b      	ldr	r3, [r1, #16]
 80196c2:	b963      	cbnz	r3, 80196de <_svfiprintf_r+0x32>
 80196c4:	2140      	movs	r1, #64	; 0x40
 80196c6:	f7fd ff23 	bl	8017510 <_malloc_r>
 80196ca:	6028      	str	r0, [r5, #0]
 80196cc:	6128      	str	r0, [r5, #16]
 80196ce:	b920      	cbnz	r0, 80196da <_svfiprintf_r+0x2e>
 80196d0:	230c      	movs	r3, #12
 80196d2:	603b      	str	r3, [r7, #0]
 80196d4:	f04f 30ff 	mov.w	r0, #4294967295
 80196d8:	e0d1      	b.n	801987e <_svfiprintf_r+0x1d2>
 80196da:	2340      	movs	r3, #64	; 0x40
 80196dc:	616b      	str	r3, [r5, #20]
 80196de:	2300      	movs	r3, #0
 80196e0:	9309      	str	r3, [sp, #36]	; 0x24
 80196e2:	2320      	movs	r3, #32
 80196e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80196e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80196ec:	2330      	movs	r3, #48	; 0x30
 80196ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019898 <_svfiprintf_r+0x1ec>
 80196f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80196f6:	f04f 0901 	mov.w	r9, #1
 80196fa:	4623      	mov	r3, r4
 80196fc:	469a      	mov	sl, r3
 80196fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019702:	b10a      	cbz	r2, 8019708 <_svfiprintf_r+0x5c>
 8019704:	2a25      	cmp	r2, #37	; 0x25
 8019706:	d1f9      	bne.n	80196fc <_svfiprintf_r+0x50>
 8019708:	ebba 0b04 	subs.w	fp, sl, r4
 801970c:	d00b      	beq.n	8019726 <_svfiprintf_r+0x7a>
 801970e:	465b      	mov	r3, fp
 8019710:	4622      	mov	r2, r4
 8019712:	4629      	mov	r1, r5
 8019714:	4638      	mov	r0, r7
 8019716:	f7ff ff6e 	bl	80195f6 <__ssputs_r>
 801971a:	3001      	adds	r0, #1
 801971c:	f000 80aa 	beq.w	8019874 <_svfiprintf_r+0x1c8>
 8019720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019722:	445a      	add	r2, fp
 8019724:	9209      	str	r2, [sp, #36]	; 0x24
 8019726:	f89a 3000 	ldrb.w	r3, [sl]
 801972a:	2b00      	cmp	r3, #0
 801972c:	f000 80a2 	beq.w	8019874 <_svfiprintf_r+0x1c8>
 8019730:	2300      	movs	r3, #0
 8019732:	f04f 32ff 	mov.w	r2, #4294967295
 8019736:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801973a:	f10a 0a01 	add.w	sl, sl, #1
 801973e:	9304      	str	r3, [sp, #16]
 8019740:	9307      	str	r3, [sp, #28]
 8019742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019746:	931a      	str	r3, [sp, #104]	; 0x68
 8019748:	4654      	mov	r4, sl
 801974a:	2205      	movs	r2, #5
 801974c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019750:	4851      	ldr	r0, [pc, #324]	; (8019898 <_svfiprintf_r+0x1ec>)
 8019752:	f7e6 fd45 	bl	80001e0 <memchr>
 8019756:	9a04      	ldr	r2, [sp, #16]
 8019758:	b9d8      	cbnz	r0, 8019792 <_svfiprintf_r+0xe6>
 801975a:	06d0      	lsls	r0, r2, #27
 801975c:	bf44      	itt	mi
 801975e:	2320      	movmi	r3, #32
 8019760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019764:	0711      	lsls	r1, r2, #28
 8019766:	bf44      	itt	mi
 8019768:	232b      	movmi	r3, #43	; 0x2b
 801976a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801976e:	f89a 3000 	ldrb.w	r3, [sl]
 8019772:	2b2a      	cmp	r3, #42	; 0x2a
 8019774:	d015      	beq.n	80197a2 <_svfiprintf_r+0xf6>
 8019776:	9a07      	ldr	r2, [sp, #28]
 8019778:	4654      	mov	r4, sl
 801977a:	2000      	movs	r0, #0
 801977c:	f04f 0c0a 	mov.w	ip, #10
 8019780:	4621      	mov	r1, r4
 8019782:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019786:	3b30      	subs	r3, #48	; 0x30
 8019788:	2b09      	cmp	r3, #9
 801978a:	d94e      	bls.n	801982a <_svfiprintf_r+0x17e>
 801978c:	b1b0      	cbz	r0, 80197bc <_svfiprintf_r+0x110>
 801978e:	9207      	str	r2, [sp, #28]
 8019790:	e014      	b.n	80197bc <_svfiprintf_r+0x110>
 8019792:	eba0 0308 	sub.w	r3, r0, r8
 8019796:	fa09 f303 	lsl.w	r3, r9, r3
 801979a:	4313      	orrs	r3, r2
 801979c:	9304      	str	r3, [sp, #16]
 801979e:	46a2      	mov	sl, r4
 80197a0:	e7d2      	b.n	8019748 <_svfiprintf_r+0x9c>
 80197a2:	9b03      	ldr	r3, [sp, #12]
 80197a4:	1d19      	adds	r1, r3, #4
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	9103      	str	r1, [sp, #12]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	bfbb      	ittet	lt
 80197ae:	425b      	neglt	r3, r3
 80197b0:	f042 0202 	orrlt.w	r2, r2, #2
 80197b4:	9307      	strge	r3, [sp, #28]
 80197b6:	9307      	strlt	r3, [sp, #28]
 80197b8:	bfb8      	it	lt
 80197ba:	9204      	strlt	r2, [sp, #16]
 80197bc:	7823      	ldrb	r3, [r4, #0]
 80197be:	2b2e      	cmp	r3, #46	; 0x2e
 80197c0:	d10c      	bne.n	80197dc <_svfiprintf_r+0x130>
 80197c2:	7863      	ldrb	r3, [r4, #1]
 80197c4:	2b2a      	cmp	r3, #42	; 0x2a
 80197c6:	d135      	bne.n	8019834 <_svfiprintf_r+0x188>
 80197c8:	9b03      	ldr	r3, [sp, #12]
 80197ca:	1d1a      	adds	r2, r3, #4
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	9203      	str	r2, [sp, #12]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	bfb8      	it	lt
 80197d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80197d8:	3402      	adds	r4, #2
 80197da:	9305      	str	r3, [sp, #20]
 80197dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80198a8 <_svfiprintf_r+0x1fc>
 80197e0:	7821      	ldrb	r1, [r4, #0]
 80197e2:	2203      	movs	r2, #3
 80197e4:	4650      	mov	r0, sl
 80197e6:	f7e6 fcfb 	bl	80001e0 <memchr>
 80197ea:	b140      	cbz	r0, 80197fe <_svfiprintf_r+0x152>
 80197ec:	2340      	movs	r3, #64	; 0x40
 80197ee:	eba0 000a 	sub.w	r0, r0, sl
 80197f2:	fa03 f000 	lsl.w	r0, r3, r0
 80197f6:	9b04      	ldr	r3, [sp, #16]
 80197f8:	4303      	orrs	r3, r0
 80197fa:	3401      	adds	r4, #1
 80197fc:	9304      	str	r3, [sp, #16]
 80197fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019802:	4826      	ldr	r0, [pc, #152]	; (801989c <_svfiprintf_r+0x1f0>)
 8019804:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019808:	2206      	movs	r2, #6
 801980a:	f7e6 fce9 	bl	80001e0 <memchr>
 801980e:	2800      	cmp	r0, #0
 8019810:	d038      	beq.n	8019884 <_svfiprintf_r+0x1d8>
 8019812:	4b23      	ldr	r3, [pc, #140]	; (80198a0 <_svfiprintf_r+0x1f4>)
 8019814:	bb1b      	cbnz	r3, 801985e <_svfiprintf_r+0x1b2>
 8019816:	9b03      	ldr	r3, [sp, #12]
 8019818:	3307      	adds	r3, #7
 801981a:	f023 0307 	bic.w	r3, r3, #7
 801981e:	3308      	adds	r3, #8
 8019820:	9303      	str	r3, [sp, #12]
 8019822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019824:	4433      	add	r3, r6
 8019826:	9309      	str	r3, [sp, #36]	; 0x24
 8019828:	e767      	b.n	80196fa <_svfiprintf_r+0x4e>
 801982a:	fb0c 3202 	mla	r2, ip, r2, r3
 801982e:	460c      	mov	r4, r1
 8019830:	2001      	movs	r0, #1
 8019832:	e7a5      	b.n	8019780 <_svfiprintf_r+0xd4>
 8019834:	2300      	movs	r3, #0
 8019836:	3401      	adds	r4, #1
 8019838:	9305      	str	r3, [sp, #20]
 801983a:	4619      	mov	r1, r3
 801983c:	f04f 0c0a 	mov.w	ip, #10
 8019840:	4620      	mov	r0, r4
 8019842:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019846:	3a30      	subs	r2, #48	; 0x30
 8019848:	2a09      	cmp	r2, #9
 801984a:	d903      	bls.n	8019854 <_svfiprintf_r+0x1a8>
 801984c:	2b00      	cmp	r3, #0
 801984e:	d0c5      	beq.n	80197dc <_svfiprintf_r+0x130>
 8019850:	9105      	str	r1, [sp, #20]
 8019852:	e7c3      	b.n	80197dc <_svfiprintf_r+0x130>
 8019854:	fb0c 2101 	mla	r1, ip, r1, r2
 8019858:	4604      	mov	r4, r0
 801985a:	2301      	movs	r3, #1
 801985c:	e7f0      	b.n	8019840 <_svfiprintf_r+0x194>
 801985e:	ab03      	add	r3, sp, #12
 8019860:	9300      	str	r3, [sp, #0]
 8019862:	462a      	mov	r2, r5
 8019864:	4b0f      	ldr	r3, [pc, #60]	; (80198a4 <_svfiprintf_r+0x1f8>)
 8019866:	a904      	add	r1, sp, #16
 8019868:	4638      	mov	r0, r7
 801986a:	f7fd ff4b 	bl	8017704 <_printf_float>
 801986e:	1c42      	adds	r2, r0, #1
 8019870:	4606      	mov	r6, r0
 8019872:	d1d6      	bne.n	8019822 <_svfiprintf_r+0x176>
 8019874:	89ab      	ldrh	r3, [r5, #12]
 8019876:	065b      	lsls	r3, r3, #25
 8019878:	f53f af2c 	bmi.w	80196d4 <_svfiprintf_r+0x28>
 801987c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801987e:	b01d      	add	sp, #116	; 0x74
 8019880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019884:	ab03      	add	r3, sp, #12
 8019886:	9300      	str	r3, [sp, #0]
 8019888:	462a      	mov	r2, r5
 801988a:	4b06      	ldr	r3, [pc, #24]	; (80198a4 <_svfiprintf_r+0x1f8>)
 801988c:	a904      	add	r1, sp, #16
 801988e:	4638      	mov	r0, r7
 8019890:	f7fe f9dc 	bl	8017c4c <_printf_i>
 8019894:	e7eb      	b.n	801986e <_svfiprintf_r+0x1c2>
 8019896:	bf00      	nop
 8019898:	0801ab14 	.word	0x0801ab14
 801989c:	0801ab1e 	.word	0x0801ab1e
 80198a0:	08017705 	.word	0x08017705
 80198a4:	080195f7 	.word	0x080195f7
 80198a8:	0801ab1a 	.word	0x0801ab1a

080198ac <__sfputc_r>:
 80198ac:	6893      	ldr	r3, [r2, #8]
 80198ae:	3b01      	subs	r3, #1
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	b410      	push	{r4}
 80198b4:	6093      	str	r3, [r2, #8]
 80198b6:	da08      	bge.n	80198ca <__sfputc_r+0x1e>
 80198b8:	6994      	ldr	r4, [r2, #24]
 80198ba:	42a3      	cmp	r3, r4
 80198bc:	db01      	blt.n	80198c2 <__sfputc_r+0x16>
 80198be:	290a      	cmp	r1, #10
 80198c0:	d103      	bne.n	80198ca <__sfputc_r+0x1e>
 80198c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198c6:	f000 b98f 	b.w	8019be8 <__swbuf_r>
 80198ca:	6813      	ldr	r3, [r2, #0]
 80198cc:	1c58      	adds	r0, r3, #1
 80198ce:	6010      	str	r0, [r2, #0]
 80198d0:	7019      	strb	r1, [r3, #0]
 80198d2:	4608      	mov	r0, r1
 80198d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198d8:	4770      	bx	lr

080198da <__sfputs_r>:
 80198da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198dc:	4606      	mov	r6, r0
 80198de:	460f      	mov	r7, r1
 80198e0:	4614      	mov	r4, r2
 80198e2:	18d5      	adds	r5, r2, r3
 80198e4:	42ac      	cmp	r4, r5
 80198e6:	d101      	bne.n	80198ec <__sfputs_r+0x12>
 80198e8:	2000      	movs	r0, #0
 80198ea:	e007      	b.n	80198fc <__sfputs_r+0x22>
 80198ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198f0:	463a      	mov	r2, r7
 80198f2:	4630      	mov	r0, r6
 80198f4:	f7ff ffda 	bl	80198ac <__sfputc_r>
 80198f8:	1c43      	adds	r3, r0, #1
 80198fa:	d1f3      	bne.n	80198e4 <__sfputs_r+0xa>
 80198fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019900 <_vfiprintf_r>:
 8019900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019904:	460d      	mov	r5, r1
 8019906:	b09d      	sub	sp, #116	; 0x74
 8019908:	4614      	mov	r4, r2
 801990a:	4698      	mov	r8, r3
 801990c:	4606      	mov	r6, r0
 801990e:	b118      	cbz	r0, 8019918 <_vfiprintf_r+0x18>
 8019910:	6983      	ldr	r3, [r0, #24]
 8019912:	b90b      	cbnz	r3, 8019918 <_vfiprintf_r+0x18>
 8019914:	f7ff fa30 	bl	8018d78 <__sinit>
 8019918:	4b89      	ldr	r3, [pc, #548]	; (8019b40 <_vfiprintf_r+0x240>)
 801991a:	429d      	cmp	r5, r3
 801991c:	d11b      	bne.n	8019956 <_vfiprintf_r+0x56>
 801991e:	6875      	ldr	r5, [r6, #4]
 8019920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019922:	07d9      	lsls	r1, r3, #31
 8019924:	d405      	bmi.n	8019932 <_vfiprintf_r+0x32>
 8019926:	89ab      	ldrh	r3, [r5, #12]
 8019928:	059a      	lsls	r2, r3, #22
 801992a:	d402      	bmi.n	8019932 <_vfiprintf_r+0x32>
 801992c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801992e:	f7ff fac6 	bl	8018ebe <__retarget_lock_acquire_recursive>
 8019932:	89ab      	ldrh	r3, [r5, #12]
 8019934:	071b      	lsls	r3, r3, #28
 8019936:	d501      	bpl.n	801993c <_vfiprintf_r+0x3c>
 8019938:	692b      	ldr	r3, [r5, #16]
 801993a:	b9eb      	cbnz	r3, 8019978 <_vfiprintf_r+0x78>
 801993c:	4629      	mov	r1, r5
 801993e:	4630      	mov	r0, r6
 8019940:	f000 f9b6 	bl	8019cb0 <__swsetup_r>
 8019944:	b1c0      	cbz	r0, 8019978 <_vfiprintf_r+0x78>
 8019946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019948:	07dc      	lsls	r4, r3, #31
 801994a:	d50e      	bpl.n	801996a <_vfiprintf_r+0x6a>
 801994c:	f04f 30ff 	mov.w	r0, #4294967295
 8019950:	b01d      	add	sp, #116	; 0x74
 8019952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019956:	4b7b      	ldr	r3, [pc, #492]	; (8019b44 <_vfiprintf_r+0x244>)
 8019958:	429d      	cmp	r5, r3
 801995a:	d101      	bne.n	8019960 <_vfiprintf_r+0x60>
 801995c:	68b5      	ldr	r5, [r6, #8]
 801995e:	e7df      	b.n	8019920 <_vfiprintf_r+0x20>
 8019960:	4b79      	ldr	r3, [pc, #484]	; (8019b48 <_vfiprintf_r+0x248>)
 8019962:	429d      	cmp	r5, r3
 8019964:	bf08      	it	eq
 8019966:	68f5      	ldreq	r5, [r6, #12]
 8019968:	e7da      	b.n	8019920 <_vfiprintf_r+0x20>
 801996a:	89ab      	ldrh	r3, [r5, #12]
 801996c:	0598      	lsls	r0, r3, #22
 801996e:	d4ed      	bmi.n	801994c <_vfiprintf_r+0x4c>
 8019970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019972:	f7ff faa5 	bl	8018ec0 <__retarget_lock_release_recursive>
 8019976:	e7e9      	b.n	801994c <_vfiprintf_r+0x4c>
 8019978:	2300      	movs	r3, #0
 801997a:	9309      	str	r3, [sp, #36]	; 0x24
 801997c:	2320      	movs	r3, #32
 801997e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019982:	f8cd 800c 	str.w	r8, [sp, #12]
 8019986:	2330      	movs	r3, #48	; 0x30
 8019988:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019b4c <_vfiprintf_r+0x24c>
 801998c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019990:	f04f 0901 	mov.w	r9, #1
 8019994:	4623      	mov	r3, r4
 8019996:	469a      	mov	sl, r3
 8019998:	f813 2b01 	ldrb.w	r2, [r3], #1
 801999c:	b10a      	cbz	r2, 80199a2 <_vfiprintf_r+0xa2>
 801999e:	2a25      	cmp	r2, #37	; 0x25
 80199a0:	d1f9      	bne.n	8019996 <_vfiprintf_r+0x96>
 80199a2:	ebba 0b04 	subs.w	fp, sl, r4
 80199a6:	d00b      	beq.n	80199c0 <_vfiprintf_r+0xc0>
 80199a8:	465b      	mov	r3, fp
 80199aa:	4622      	mov	r2, r4
 80199ac:	4629      	mov	r1, r5
 80199ae:	4630      	mov	r0, r6
 80199b0:	f7ff ff93 	bl	80198da <__sfputs_r>
 80199b4:	3001      	adds	r0, #1
 80199b6:	f000 80aa 	beq.w	8019b0e <_vfiprintf_r+0x20e>
 80199ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80199bc:	445a      	add	r2, fp
 80199be:	9209      	str	r2, [sp, #36]	; 0x24
 80199c0:	f89a 3000 	ldrb.w	r3, [sl]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	f000 80a2 	beq.w	8019b0e <_vfiprintf_r+0x20e>
 80199ca:	2300      	movs	r3, #0
 80199cc:	f04f 32ff 	mov.w	r2, #4294967295
 80199d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80199d4:	f10a 0a01 	add.w	sl, sl, #1
 80199d8:	9304      	str	r3, [sp, #16]
 80199da:	9307      	str	r3, [sp, #28]
 80199dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80199e0:	931a      	str	r3, [sp, #104]	; 0x68
 80199e2:	4654      	mov	r4, sl
 80199e4:	2205      	movs	r2, #5
 80199e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199ea:	4858      	ldr	r0, [pc, #352]	; (8019b4c <_vfiprintf_r+0x24c>)
 80199ec:	f7e6 fbf8 	bl	80001e0 <memchr>
 80199f0:	9a04      	ldr	r2, [sp, #16]
 80199f2:	b9d8      	cbnz	r0, 8019a2c <_vfiprintf_r+0x12c>
 80199f4:	06d1      	lsls	r1, r2, #27
 80199f6:	bf44      	itt	mi
 80199f8:	2320      	movmi	r3, #32
 80199fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80199fe:	0713      	lsls	r3, r2, #28
 8019a00:	bf44      	itt	mi
 8019a02:	232b      	movmi	r3, #43	; 0x2b
 8019a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019a08:	f89a 3000 	ldrb.w	r3, [sl]
 8019a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8019a0e:	d015      	beq.n	8019a3c <_vfiprintf_r+0x13c>
 8019a10:	9a07      	ldr	r2, [sp, #28]
 8019a12:	4654      	mov	r4, sl
 8019a14:	2000      	movs	r0, #0
 8019a16:	f04f 0c0a 	mov.w	ip, #10
 8019a1a:	4621      	mov	r1, r4
 8019a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019a20:	3b30      	subs	r3, #48	; 0x30
 8019a22:	2b09      	cmp	r3, #9
 8019a24:	d94e      	bls.n	8019ac4 <_vfiprintf_r+0x1c4>
 8019a26:	b1b0      	cbz	r0, 8019a56 <_vfiprintf_r+0x156>
 8019a28:	9207      	str	r2, [sp, #28]
 8019a2a:	e014      	b.n	8019a56 <_vfiprintf_r+0x156>
 8019a2c:	eba0 0308 	sub.w	r3, r0, r8
 8019a30:	fa09 f303 	lsl.w	r3, r9, r3
 8019a34:	4313      	orrs	r3, r2
 8019a36:	9304      	str	r3, [sp, #16]
 8019a38:	46a2      	mov	sl, r4
 8019a3a:	e7d2      	b.n	80199e2 <_vfiprintf_r+0xe2>
 8019a3c:	9b03      	ldr	r3, [sp, #12]
 8019a3e:	1d19      	adds	r1, r3, #4
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	9103      	str	r1, [sp, #12]
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	bfbb      	ittet	lt
 8019a48:	425b      	neglt	r3, r3
 8019a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8019a4e:	9307      	strge	r3, [sp, #28]
 8019a50:	9307      	strlt	r3, [sp, #28]
 8019a52:	bfb8      	it	lt
 8019a54:	9204      	strlt	r2, [sp, #16]
 8019a56:	7823      	ldrb	r3, [r4, #0]
 8019a58:	2b2e      	cmp	r3, #46	; 0x2e
 8019a5a:	d10c      	bne.n	8019a76 <_vfiprintf_r+0x176>
 8019a5c:	7863      	ldrb	r3, [r4, #1]
 8019a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8019a60:	d135      	bne.n	8019ace <_vfiprintf_r+0x1ce>
 8019a62:	9b03      	ldr	r3, [sp, #12]
 8019a64:	1d1a      	adds	r2, r3, #4
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	9203      	str	r2, [sp, #12]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	bfb8      	it	lt
 8019a6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019a72:	3402      	adds	r4, #2
 8019a74:	9305      	str	r3, [sp, #20]
 8019a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019b5c <_vfiprintf_r+0x25c>
 8019a7a:	7821      	ldrb	r1, [r4, #0]
 8019a7c:	2203      	movs	r2, #3
 8019a7e:	4650      	mov	r0, sl
 8019a80:	f7e6 fbae 	bl	80001e0 <memchr>
 8019a84:	b140      	cbz	r0, 8019a98 <_vfiprintf_r+0x198>
 8019a86:	2340      	movs	r3, #64	; 0x40
 8019a88:	eba0 000a 	sub.w	r0, r0, sl
 8019a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8019a90:	9b04      	ldr	r3, [sp, #16]
 8019a92:	4303      	orrs	r3, r0
 8019a94:	3401      	adds	r4, #1
 8019a96:	9304      	str	r3, [sp, #16]
 8019a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a9c:	482c      	ldr	r0, [pc, #176]	; (8019b50 <_vfiprintf_r+0x250>)
 8019a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019aa2:	2206      	movs	r2, #6
 8019aa4:	f7e6 fb9c 	bl	80001e0 <memchr>
 8019aa8:	2800      	cmp	r0, #0
 8019aaa:	d03f      	beq.n	8019b2c <_vfiprintf_r+0x22c>
 8019aac:	4b29      	ldr	r3, [pc, #164]	; (8019b54 <_vfiprintf_r+0x254>)
 8019aae:	bb1b      	cbnz	r3, 8019af8 <_vfiprintf_r+0x1f8>
 8019ab0:	9b03      	ldr	r3, [sp, #12]
 8019ab2:	3307      	adds	r3, #7
 8019ab4:	f023 0307 	bic.w	r3, r3, #7
 8019ab8:	3308      	adds	r3, #8
 8019aba:	9303      	str	r3, [sp, #12]
 8019abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019abe:	443b      	add	r3, r7
 8019ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8019ac2:	e767      	b.n	8019994 <_vfiprintf_r+0x94>
 8019ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8019ac8:	460c      	mov	r4, r1
 8019aca:	2001      	movs	r0, #1
 8019acc:	e7a5      	b.n	8019a1a <_vfiprintf_r+0x11a>
 8019ace:	2300      	movs	r3, #0
 8019ad0:	3401      	adds	r4, #1
 8019ad2:	9305      	str	r3, [sp, #20]
 8019ad4:	4619      	mov	r1, r3
 8019ad6:	f04f 0c0a 	mov.w	ip, #10
 8019ada:	4620      	mov	r0, r4
 8019adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ae0:	3a30      	subs	r2, #48	; 0x30
 8019ae2:	2a09      	cmp	r2, #9
 8019ae4:	d903      	bls.n	8019aee <_vfiprintf_r+0x1ee>
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d0c5      	beq.n	8019a76 <_vfiprintf_r+0x176>
 8019aea:	9105      	str	r1, [sp, #20]
 8019aec:	e7c3      	b.n	8019a76 <_vfiprintf_r+0x176>
 8019aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8019af2:	4604      	mov	r4, r0
 8019af4:	2301      	movs	r3, #1
 8019af6:	e7f0      	b.n	8019ada <_vfiprintf_r+0x1da>
 8019af8:	ab03      	add	r3, sp, #12
 8019afa:	9300      	str	r3, [sp, #0]
 8019afc:	462a      	mov	r2, r5
 8019afe:	4b16      	ldr	r3, [pc, #88]	; (8019b58 <_vfiprintf_r+0x258>)
 8019b00:	a904      	add	r1, sp, #16
 8019b02:	4630      	mov	r0, r6
 8019b04:	f7fd fdfe 	bl	8017704 <_printf_float>
 8019b08:	4607      	mov	r7, r0
 8019b0a:	1c78      	adds	r0, r7, #1
 8019b0c:	d1d6      	bne.n	8019abc <_vfiprintf_r+0x1bc>
 8019b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019b10:	07d9      	lsls	r1, r3, #31
 8019b12:	d405      	bmi.n	8019b20 <_vfiprintf_r+0x220>
 8019b14:	89ab      	ldrh	r3, [r5, #12]
 8019b16:	059a      	lsls	r2, r3, #22
 8019b18:	d402      	bmi.n	8019b20 <_vfiprintf_r+0x220>
 8019b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019b1c:	f7ff f9d0 	bl	8018ec0 <__retarget_lock_release_recursive>
 8019b20:	89ab      	ldrh	r3, [r5, #12]
 8019b22:	065b      	lsls	r3, r3, #25
 8019b24:	f53f af12 	bmi.w	801994c <_vfiprintf_r+0x4c>
 8019b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019b2a:	e711      	b.n	8019950 <_vfiprintf_r+0x50>
 8019b2c:	ab03      	add	r3, sp, #12
 8019b2e:	9300      	str	r3, [sp, #0]
 8019b30:	462a      	mov	r2, r5
 8019b32:	4b09      	ldr	r3, [pc, #36]	; (8019b58 <_vfiprintf_r+0x258>)
 8019b34:	a904      	add	r1, sp, #16
 8019b36:	4630      	mov	r0, r6
 8019b38:	f7fe f888 	bl	8017c4c <_printf_i>
 8019b3c:	e7e4      	b.n	8019b08 <_vfiprintf_r+0x208>
 8019b3e:	bf00      	nop
 8019b40:	0801a974 	.word	0x0801a974
 8019b44:	0801a994 	.word	0x0801a994
 8019b48:	0801a954 	.word	0x0801a954
 8019b4c:	0801ab14 	.word	0x0801ab14
 8019b50:	0801ab1e 	.word	0x0801ab1e
 8019b54:	08017705 	.word	0x08017705
 8019b58:	080198db 	.word	0x080198db
 8019b5c:	0801ab1a 	.word	0x0801ab1a

08019b60 <__sread>:
 8019b60:	b510      	push	{r4, lr}
 8019b62:	460c      	mov	r4, r1
 8019b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b68:	f000 fada 	bl	801a120 <_read_r>
 8019b6c:	2800      	cmp	r0, #0
 8019b6e:	bfab      	itete	ge
 8019b70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019b72:	89a3      	ldrhlt	r3, [r4, #12]
 8019b74:	181b      	addge	r3, r3, r0
 8019b76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019b7a:	bfac      	ite	ge
 8019b7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8019b7e:	81a3      	strhlt	r3, [r4, #12]
 8019b80:	bd10      	pop	{r4, pc}

08019b82 <__swrite>:
 8019b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b86:	461f      	mov	r7, r3
 8019b88:	898b      	ldrh	r3, [r1, #12]
 8019b8a:	05db      	lsls	r3, r3, #23
 8019b8c:	4605      	mov	r5, r0
 8019b8e:	460c      	mov	r4, r1
 8019b90:	4616      	mov	r6, r2
 8019b92:	d505      	bpl.n	8019ba0 <__swrite+0x1e>
 8019b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b98:	2302      	movs	r3, #2
 8019b9a:	2200      	movs	r2, #0
 8019b9c:	f000 f9f8 	bl	8019f90 <_lseek_r>
 8019ba0:	89a3      	ldrh	r3, [r4, #12]
 8019ba2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019baa:	81a3      	strh	r3, [r4, #12]
 8019bac:	4632      	mov	r2, r6
 8019bae:	463b      	mov	r3, r7
 8019bb0:	4628      	mov	r0, r5
 8019bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019bb6:	f000 b869 	b.w	8019c8c <_write_r>

08019bba <__sseek>:
 8019bba:	b510      	push	{r4, lr}
 8019bbc:	460c      	mov	r4, r1
 8019bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bc2:	f000 f9e5 	bl	8019f90 <_lseek_r>
 8019bc6:	1c43      	adds	r3, r0, #1
 8019bc8:	89a3      	ldrh	r3, [r4, #12]
 8019bca:	bf15      	itete	ne
 8019bcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8019bce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019bd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019bd6:	81a3      	strheq	r3, [r4, #12]
 8019bd8:	bf18      	it	ne
 8019bda:	81a3      	strhne	r3, [r4, #12]
 8019bdc:	bd10      	pop	{r4, pc}

08019bde <__sclose>:
 8019bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019be2:	f000 b8f1 	b.w	8019dc8 <_close_r>
	...

08019be8 <__swbuf_r>:
 8019be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bea:	460e      	mov	r6, r1
 8019bec:	4614      	mov	r4, r2
 8019bee:	4605      	mov	r5, r0
 8019bf0:	b118      	cbz	r0, 8019bfa <__swbuf_r+0x12>
 8019bf2:	6983      	ldr	r3, [r0, #24]
 8019bf4:	b90b      	cbnz	r3, 8019bfa <__swbuf_r+0x12>
 8019bf6:	f7ff f8bf 	bl	8018d78 <__sinit>
 8019bfa:	4b21      	ldr	r3, [pc, #132]	; (8019c80 <__swbuf_r+0x98>)
 8019bfc:	429c      	cmp	r4, r3
 8019bfe:	d12b      	bne.n	8019c58 <__swbuf_r+0x70>
 8019c00:	686c      	ldr	r4, [r5, #4]
 8019c02:	69a3      	ldr	r3, [r4, #24]
 8019c04:	60a3      	str	r3, [r4, #8]
 8019c06:	89a3      	ldrh	r3, [r4, #12]
 8019c08:	071a      	lsls	r2, r3, #28
 8019c0a:	d52f      	bpl.n	8019c6c <__swbuf_r+0x84>
 8019c0c:	6923      	ldr	r3, [r4, #16]
 8019c0e:	b36b      	cbz	r3, 8019c6c <__swbuf_r+0x84>
 8019c10:	6923      	ldr	r3, [r4, #16]
 8019c12:	6820      	ldr	r0, [r4, #0]
 8019c14:	1ac0      	subs	r0, r0, r3
 8019c16:	6963      	ldr	r3, [r4, #20]
 8019c18:	b2f6      	uxtb	r6, r6
 8019c1a:	4283      	cmp	r3, r0
 8019c1c:	4637      	mov	r7, r6
 8019c1e:	dc04      	bgt.n	8019c2a <__swbuf_r+0x42>
 8019c20:	4621      	mov	r1, r4
 8019c22:	4628      	mov	r0, r5
 8019c24:	f000 f966 	bl	8019ef4 <_fflush_r>
 8019c28:	bb30      	cbnz	r0, 8019c78 <__swbuf_r+0x90>
 8019c2a:	68a3      	ldr	r3, [r4, #8]
 8019c2c:	3b01      	subs	r3, #1
 8019c2e:	60a3      	str	r3, [r4, #8]
 8019c30:	6823      	ldr	r3, [r4, #0]
 8019c32:	1c5a      	adds	r2, r3, #1
 8019c34:	6022      	str	r2, [r4, #0]
 8019c36:	701e      	strb	r6, [r3, #0]
 8019c38:	6963      	ldr	r3, [r4, #20]
 8019c3a:	3001      	adds	r0, #1
 8019c3c:	4283      	cmp	r3, r0
 8019c3e:	d004      	beq.n	8019c4a <__swbuf_r+0x62>
 8019c40:	89a3      	ldrh	r3, [r4, #12]
 8019c42:	07db      	lsls	r3, r3, #31
 8019c44:	d506      	bpl.n	8019c54 <__swbuf_r+0x6c>
 8019c46:	2e0a      	cmp	r6, #10
 8019c48:	d104      	bne.n	8019c54 <__swbuf_r+0x6c>
 8019c4a:	4621      	mov	r1, r4
 8019c4c:	4628      	mov	r0, r5
 8019c4e:	f000 f951 	bl	8019ef4 <_fflush_r>
 8019c52:	b988      	cbnz	r0, 8019c78 <__swbuf_r+0x90>
 8019c54:	4638      	mov	r0, r7
 8019c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c58:	4b0a      	ldr	r3, [pc, #40]	; (8019c84 <__swbuf_r+0x9c>)
 8019c5a:	429c      	cmp	r4, r3
 8019c5c:	d101      	bne.n	8019c62 <__swbuf_r+0x7a>
 8019c5e:	68ac      	ldr	r4, [r5, #8]
 8019c60:	e7cf      	b.n	8019c02 <__swbuf_r+0x1a>
 8019c62:	4b09      	ldr	r3, [pc, #36]	; (8019c88 <__swbuf_r+0xa0>)
 8019c64:	429c      	cmp	r4, r3
 8019c66:	bf08      	it	eq
 8019c68:	68ec      	ldreq	r4, [r5, #12]
 8019c6a:	e7ca      	b.n	8019c02 <__swbuf_r+0x1a>
 8019c6c:	4621      	mov	r1, r4
 8019c6e:	4628      	mov	r0, r5
 8019c70:	f000 f81e 	bl	8019cb0 <__swsetup_r>
 8019c74:	2800      	cmp	r0, #0
 8019c76:	d0cb      	beq.n	8019c10 <__swbuf_r+0x28>
 8019c78:	f04f 37ff 	mov.w	r7, #4294967295
 8019c7c:	e7ea      	b.n	8019c54 <__swbuf_r+0x6c>
 8019c7e:	bf00      	nop
 8019c80:	0801a974 	.word	0x0801a974
 8019c84:	0801a994 	.word	0x0801a994
 8019c88:	0801a954 	.word	0x0801a954

08019c8c <_write_r>:
 8019c8c:	b538      	push	{r3, r4, r5, lr}
 8019c8e:	4d07      	ldr	r5, [pc, #28]	; (8019cac <_write_r+0x20>)
 8019c90:	4604      	mov	r4, r0
 8019c92:	4608      	mov	r0, r1
 8019c94:	4611      	mov	r1, r2
 8019c96:	2200      	movs	r2, #0
 8019c98:	602a      	str	r2, [r5, #0]
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	f7e8 fcd9 	bl	8002652 <_write>
 8019ca0:	1c43      	adds	r3, r0, #1
 8019ca2:	d102      	bne.n	8019caa <_write_r+0x1e>
 8019ca4:	682b      	ldr	r3, [r5, #0]
 8019ca6:	b103      	cbz	r3, 8019caa <_write_r+0x1e>
 8019ca8:	6023      	str	r3, [r4, #0]
 8019caa:	bd38      	pop	{r3, r4, r5, pc}
 8019cac:	20001a04 	.word	0x20001a04

08019cb0 <__swsetup_r>:
 8019cb0:	4b32      	ldr	r3, [pc, #200]	; (8019d7c <__swsetup_r+0xcc>)
 8019cb2:	b570      	push	{r4, r5, r6, lr}
 8019cb4:	681d      	ldr	r5, [r3, #0]
 8019cb6:	4606      	mov	r6, r0
 8019cb8:	460c      	mov	r4, r1
 8019cba:	b125      	cbz	r5, 8019cc6 <__swsetup_r+0x16>
 8019cbc:	69ab      	ldr	r3, [r5, #24]
 8019cbe:	b913      	cbnz	r3, 8019cc6 <__swsetup_r+0x16>
 8019cc0:	4628      	mov	r0, r5
 8019cc2:	f7ff f859 	bl	8018d78 <__sinit>
 8019cc6:	4b2e      	ldr	r3, [pc, #184]	; (8019d80 <__swsetup_r+0xd0>)
 8019cc8:	429c      	cmp	r4, r3
 8019cca:	d10f      	bne.n	8019cec <__swsetup_r+0x3c>
 8019ccc:	686c      	ldr	r4, [r5, #4]
 8019cce:	89a3      	ldrh	r3, [r4, #12]
 8019cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019cd4:	0719      	lsls	r1, r3, #28
 8019cd6:	d42c      	bmi.n	8019d32 <__swsetup_r+0x82>
 8019cd8:	06dd      	lsls	r5, r3, #27
 8019cda:	d411      	bmi.n	8019d00 <__swsetup_r+0x50>
 8019cdc:	2309      	movs	r3, #9
 8019cde:	6033      	str	r3, [r6, #0]
 8019ce0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ce4:	81a3      	strh	r3, [r4, #12]
 8019ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8019cea:	e03e      	b.n	8019d6a <__swsetup_r+0xba>
 8019cec:	4b25      	ldr	r3, [pc, #148]	; (8019d84 <__swsetup_r+0xd4>)
 8019cee:	429c      	cmp	r4, r3
 8019cf0:	d101      	bne.n	8019cf6 <__swsetup_r+0x46>
 8019cf2:	68ac      	ldr	r4, [r5, #8]
 8019cf4:	e7eb      	b.n	8019cce <__swsetup_r+0x1e>
 8019cf6:	4b24      	ldr	r3, [pc, #144]	; (8019d88 <__swsetup_r+0xd8>)
 8019cf8:	429c      	cmp	r4, r3
 8019cfa:	bf08      	it	eq
 8019cfc:	68ec      	ldreq	r4, [r5, #12]
 8019cfe:	e7e6      	b.n	8019cce <__swsetup_r+0x1e>
 8019d00:	0758      	lsls	r0, r3, #29
 8019d02:	d512      	bpl.n	8019d2a <__swsetup_r+0x7a>
 8019d04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019d06:	b141      	cbz	r1, 8019d1a <__swsetup_r+0x6a>
 8019d08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d0c:	4299      	cmp	r1, r3
 8019d0e:	d002      	beq.n	8019d16 <__swsetup_r+0x66>
 8019d10:	4630      	mov	r0, r6
 8019d12:	f7fd fbad 	bl	8017470 <_free_r>
 8019d16:	2300      	movs	r3, #0
 8019d18:	6363      	str	r3, [r4, #52]	; 0x34
 8019d1a:	89a3      	ldrh	r3, [r4, #12]
 8019d1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019d20:	81a3      	strh	r3, [r4, #12]
 8019d22:	2300      	movs	r3, #0
 8019d24:	6063      	str	r3, [r4, #4]
 8019d26:	6923      	ldr	r3, [r4, #16]
 8019d28:	6023      	str	r3, [r4, #0]
 8019d2a:	89a3      	ldrh	r3, [r4, #12]
 8019d2c:	f043 0308 	orr.w	r3, r3, #8
 8019d30:	81a3      	strh	r3, [r4, #12]
 8019d32:	6923      	ldr	r3, [r4, #16]
 8019d34:	b94b      	cbnz	r3, 8019d4a <__swsetup_r+0x9a>
 8019d36:	89a3      	ldrh	r3, [r4, #12]
 8019d38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019d40:	d003      	beq.n	8019d4a <__swsetup_r+0x9a>
 8019d42:	4621      	mov	r1, r4
 8019d44:	4630      	mov	r0, r6
 8019d46:	f000 f959 	bl	8019ffc <__smakebuf_r>
 8019d4a:	89a0      	ldrh	r0, [r4, #12]
 8019d4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019d50:	f010 0301 	ands.w	r3, r0, #1
 8019d54:	d00a      	beq.n	8019d6c <__swsetup_r+0xbc>
 8019d56:	2300      	movs	r3, #0
 8019d58:	60a3      	str	r3, [r4, #8]
 8019d5a:	6963      	ldr	r3, [r4, #20]
 8019d5c:	425b      	negs	r3, r3
 8019d5e:	61a3      	str	r3, [r4, #24]
 8019d60:	6923      	ldr	r3, [r4, #16]
 8019d62:	b943      	cbnz	r3, 8019d76 <__swsetup_r+0xc6>
 8019d64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019d68:	d1ba      	bne.n	8019ce0 <__swsetup_r+0x30>
 8019d6a:	bd70      	pop	{r4, r5, r6, pc}
 8019d6c:	0781      	lsls	r1, r0, #30
 8019d6e:	bf58      	it	pl
 8019d70:	6963      	ldrpl	r3, [r4, #20]
 8019d72:	60a3      	str	r3, [r4, #8]
 8019d74:	e7f4      	b.n	8019d60 <__swsetup_r+0xb0>
 8019d76:	2000      	movs	r0, #0
 8019d78:	e7f7      	b.n	8019d6a <__swsetup_r+0xba>
 8019d7a:	bf00      	nop
 8019d7c:	200000f0 	.word	0x200000f0
 8019d80:	0801a974 	.word	0x0801a974
 8019d84:	0801a994 	.word	0x0801a994
 8019d88:	0801a954 	.word	0x0801a954

08019d8c <__assert_func>:
 8019d8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d8e:	4614      	mov	r4, r2
 8019d90:	461a      	mov	r2, r3
 8019d92:	4b09      	ldr	r3, [pc, #36]	; (8019db8 <__assert_func+0x2c>)
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	4605      	mov	r5, r0
 8019d98:	68d8      	ldr	r0, [r3, #12]
 8019d9a:	b14c      	cbz	r4, 8019db0 <__assert_func+0x24>
 8019d9c:	4b07      	ldr	r3, [pc, #28]	; (8019dbc <__assert_func+0x30>)
 8019d9e:	9100      	str	r1, [sp, #0]
 8019da0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019da4:	4906      	ldr	r1, [pc, #24]	; (8019dc0 <__assert_func+0x34>)
 8019da6:	462b      	mov	r3, r5
 8019da8:	f000 f8e0 	bl	8019f6c <fiprintf>
 8019dac:	f7fd fb10 	bl	80173d0 <abort>
 8019db0:	4b04      	ldr	r3, [pc, #16]	; (8019dc4 <__assert_func+0x38>)
 8019db2:	461c      	mov	r4, r3
 8019db4:	e7f3      	b.n	8019d9e <__assert_func+0x12>
 8019db6:	bf00      	nop
 8019db8:	200000f0 	.word	0x200000f0
 8019dbc:	0801ab25 	.word	0x0801ab25
 8019dc0:	0801ab32 	.word	0x0801ab32
 8019dc4:	0801ab60 	.word	0x0801ab60

08019dc8 <_close_r>:
 8019dc8:	b538      	push	{r3, r4, r5, lr}
 8019dca:	4d06      	ldr	r5, [pc, #24]	; (8019de4 <_close_r+0x1c>)
 8019dcc:	2300      	movs	r3, #0
 8019dce:	4604      	mov	r4, r0
 8019dd0:	4608      	mov	r0, r1
 8019dd2:	602b      	str	r3, [r5, #0]
 8019dd4:	f7e8 fc59 	bl	800268a <_close>
 8019dd8:	1c43      	adds	r3, r0, #1
 8019dda:	d102      	bne.n	8019de2 <_close_r+0x1a>
 8019ddc:	682b      	ldr	r3, [r5, #0]
 8019dde:	b103      	cbz	r3, 8019de2 <_close_r+0x1a>
 8019de0:	6023      	str	r3, [r4, #0]
 8019de2:	bd38      	pop	{r3, r4, r5, pc}
 8019de4:	20001a04 	.word	0x20001a04

08019de8 <__sflush_r>:
 8019de8:	898a      	ldrh	r2, [r1, #12]
 8019dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019dee:	4605      	mov	r5, r0
 8019df0:	0710      	lsls	r0, r2, #28
 8019df2:	460c      	mov	r4, r1
 8019df4:	d458      	bmi.n	8019ea8 <__sflush_r+0xc0>
 8019df6:	684b      	ldr	r3, [r1, #4]
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	dc05      	bgt.n	8019e08 <__sflush_r+0x20>
 8019dfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	dc02      	bgt.n	8019e08 <__sflush_r+0x20>
 8019e02:	2000      	movs	r0, #0
 8019e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019e0a:	2e00      	cmp	r6, #0
 8019e0c:	d0f9      	beq.n	8019e02 <__sflush_r+0x1a>
 8019e0e:	2300      	movs	r3, #0
 8019e10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019e14:	682f      	ldr	r7, [r5, #0]
 8019e16:	602b      	str	r3, [r5, #0]
 8019e18:	d032      	beq.n	8019e80 <__sflush_r+0x98>
 8019e1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019e1c:	89a3      	ldrh	r3, [r4, #12]
 8019e1e:	075a      	lsls	r2, r3, #29
 8019e20:	d505      	bpl.n	8019e2e <__sflush_r+0x46>
 8019e22:	6863      	ldr	r3, [r4, #4]
 8019e24:	1ac0      	subs	r0, r0, r3
 8019e26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019e28:	b10b      	cbz	r3, 8019e2e <__sflush_r+0x46>
 8019e2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019e2c:	1ac0      	subs	r0, r0, r3
 8019e2e:	2300      	movs	r3, #0
 8019e30:	4602      	mov	r2, r0
 8019e32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019e34:	6a21      	ldr	r1, [r4, #32]
 8019e36:	4628      	mov	r0, r5
 8019e38:	47b0      	blx	r6
 8019e3a:	1c43      	adds	r3, r0, #1
 8019e3c:	89a3      	ldrh	r3, [r4, #12]
 8019e3e:	d106      	bne.n	8019e4e <__sflush_r+0x66>
 8019e40:	6829      	ldr	r1, [r5, #0]
 8019e42:	291d      	cmp	r1, #29
 8019e44:	d82c      	bhi.n	8019ea0 <__sflush_r+0xb8>
 8019e46:	4a2a      	ldr	r2, [pc, #168]	; (8019ef0 <__sflush_r+0x108>)
 8019e48:	40ca      	lsrs	r2, r1
 8019e4a:	07d6      	lsls	r6, r2, #31
 8019e4c:	d528      	bpl.n	8019ea0 <__sflush_r+0xb8>
 8019e4e:	2200      	movs	r2, #0
 8019e50:	6062      	str	r2, [r4, #4]
 8019e52:	04d9      	lsls	r1, r3, #19
 8019e54:	6922      	ldr	r2, [r4, #16]
 8019e56:	6022      	str	r2, [r4, #0]
 8019e58:	d504      	bpl.n	8019e64 <__sflush_r+0x7c>
 8019e5a:	1c42      	adds	r2, r0, #1
 8019e5c:	d101      	bne.n	8019e62 <__sflush_r+0x7a>
 8019e5e:	682b      	ldr	r3, [r5, #0]
 8019e60:	b903      	cbnz	r3, 8019e64 <__sflush_r+0x7c>
 8019e62:	6560      	str	r0, [r4, #84]	; 0x54
 8019e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e66:	602f      	str	r7, [r5, #0]
 8019e68:	2900      	cmp	r1, #0
 8019e6a:	d0ca      	beq.n	8019e02 <__sflush_r+0x1a>
 8019e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019e70:	4299      	cmp	r1, r3
 8019e72:	d002      	beq.n	8019e7a <__sflush_r+0x92>
 8019e74:	4628      	mov	r0, r5
 8019e76:	f7fd fafb 	bl	8017470 <_free_r>
 8019e7a:	2000      	movs	r0, #0
 8019e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8019e7e:	e7c1      	b.n	8019e04 <__sflush_r+0x1c>
 8019e80:	6a21      	ldr	r1, [r4, #32]
 8019e82:	2301      	movs	r3, #1
 8019e84:	4628      	mov	r0, r5
 8019e86:	47b0      	blx	r6
 8019e88:	1c41      	adds	r1, r0, #1
 8019e8a:	d1c7      	bne.n	8019e1c <__sflush_r+0x34>
 8019e8c:	682b      	ldr	r3, [r5, #0]
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d0c4      	beq.n	8019e1c <__sflush_r+0x34>
 8019e92:	2b1d      	cmp	r3, #29
 8019e94:	d001      	beq.n	8019e9a <__sflush_r+0xb2>
 8019e96:	2b16      	cmp	r3, #22
 8019e98:	d101      	bne.n	8019e9e <__sflush_r+0xb6>
 8019e9a:	602f      	str	r7, [r5, #0]
 8019e9c:	e7b1      	b.n	8019e02 <__sflush_r+0x1a>
 8019e9e:	89a3      	ldrh	r3, [r4, #12]
 8019ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ea4:	81a3      	strh	r3, [r4, #12]
 8019ea6:	e7ad      	b.n	8019e04 <__sflush_r+0x1c>
 8019ea8:	690f      	ldr	r7, [r1, #16]
 8019eaa:	2f00      	cmp	r7, #0
 8019eac:	d0a9      	beq.n	8019e02 <__sflush_r+0x1a>
 8019eae:	0793      	lsls	r3, r2, #30
 8019eb0:	680e      	ldr	r6, [r1, #0]
 8019eb2:	bf08      	it	eq
 8019eb4:	694b      	ldreq	r3, [r1, #20]
 8019eb6:	600f      	str	r7, [r1, #0]
 8019eb8:	bf18      	it	ne
 8019eba:	2300      	movne	r3, #0
 8019ebc:	eba6 0807 	sub.w	r8, r6, r7
 8019ec0:	608b      	str	r3, [r1, #8]
 8019ec2:	f1b8 0f00 	cmp.w	r8, #0
 8019ec6:	dd9c      	ble.n	8019e02 <__sflush_r+0x1a>
 8019ec8:	6a21      	ldr	r1, [r4, #32]
 8019eca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019ecc:	4643      	mov	r3, r8
 8019ece:	463a      	mov	r2, r7
 8019ed0:	4628      	mov	r0, r5
 8019ed2:	47b0      	blx	r6
 8019ed4:	2800      	cmp	r0, #0
 8019ed6:	dc06      	bgt.n	8019ee6 <__sflush_r+0xfe>
 8019ed8:	89a3      	ldrh	r3, [r4, #12]
 8019eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ede:	81a3      	strh	r3, [r4, #12]
 8019ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ee4:	e78e      	b.n	8019e04 <__sflush_r+0x1c>
 8019ee6:	4407      	add	r7, r0
 8019ee8:	eba8 0800 	sub.w	r8, r8, r0
 8019eec:	e7e9      	b.n	8019ec2 <__sflush_r+0xda>
 8019eee:	bf00      	nop
 8019ef0:	20400001 	.word	0x20400001

08019ef4 <_fflush_r>:
 8019ef4:	b538      	push	{r3, r4, r5, lr}
 8019ef6:	690b      	ldr	r3, [r1, #16]
 8019ef8:	4605      	mov	r5, r0
 8019efa:	460c      	mov	r4, r1
 8019efc:	b913      	cbnz	r3, 8019f04 <_fflush_r+0x10>
 8019efe:	2500      	movs	r5, #0
 8019f00:	4628      	mov	r0, r5
 8019f02:	bd38      	pop	{r3, r4, r5, pc}
 8019f04:	b118      	cbz	r0, 8019f0e <_fflush_r+0x1a>
 8019f06:	6983      	ldr	r3, [r0, #24]
 8019f08:	b90b      	cbnz	r3, 8019f0e <_fflush_r+0x1a>
 8019f0a:	f7fe ff35 	bl	8018d78 <__sinit>
 8019f0e:	4b14      	ldr	r3, [pc, #80]	; (8019f60 <_fflush_r+0x6c>)
 8019f10:	429c      	cmp	r4, r3
 8019f12:	d11b      	bne.n	8019f4c <_fflush_r+0x58>
 8019f14:	686c      	ldr	r4, [r5, #4]
 8019f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d0ef      	beq.n	8019efe <_fflush_r+0xa>
 8019f1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019f20:	07d0      	lsls	r0, r2, #31
 8019f22:	d404      	bmi.n	8019f2e <_fflush_r+0x3a>
 8019f24:	0599      	lsls	r1, r3, #22
 8019f26:	d402      	bmi.n	8019f2e <_fflush_r+0x3a>
 8019f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f2a:	f7fe ffc8 	bl	8018ebe <__retarget_lock_acquire_recursive>
 8019f2e:	4628      	mov	r0, r5
 8019f30:	4621      	mov	r1, r4
 8019f32:	f7ff ff59 	bl	8019de8 <__sflush_r>
 8019f36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019f38:	07da      	lsls	r2, r3, #31
 8019f3a:	4605      	mov	r5, r0
 8019f3c:	d4e0      	bmi.n	8019f00 <_fflush_r+0xc>
 8019f3e:	89a3      	ldrh	r3, [r4, #12]
 8019f40:	059b      	lsls	r3, r3, #22
 8019f42:	d4dd      	bmi.n	8019f00 <_fflush_r+0xc>
 8019f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f46:	f7fe ffbb 	bl	8018ec0 <__retarget_lock_release_recursive>
 8019f4a:	e7d9      	b.n	8019f00 <_fflush_r+0xc>
 8019f4c:	4b05      	ldr	r3, [pc, #20]	; (8019f64 <_fflush_r+0x70>)
 8019f4e:	429c      	cmp	r4, r3
 8019f50:	d101      	bne.n	8019f56 <_fflush_r+0x62>
 8019f52:	68ac      	ldr	r4, [r5, #8]
 8019f54:	e7df      	b.n	8019f16 <_fflush_r+0x22>
 8019f56:	4b04      	ldr	r3, [pc, #16]	; (8019f68 <_fflush_r+0x74>)
 8019f58:	429c      	cmp	r4, r3
 8019f5a:	bf08      	it	eq
 8019f5c:	68ec      	ldreq	r4, [r5, #12]
 8019f5e:	e7da      	b.n	8019f16 <_fflush_r+0x22>
 8019f60:	0801a974 	.word	0x0801a974
 8019f64:	0801a994 	.word	0x0801a994
 8019f68:	0801a954 	.word	0x0801a954

08019f6c <fiprintf>:
 8019f6c:	b40e      	push	{r1, r2, r3}
 8019f6e:	b503      	push	{r0, r1, lr}
 8019f70:	4601      	mov	r1, r0
 8019f72:	ab03      	add	r3, sp, #12
 8019f74:	4805      	ldr	r0, [pc, #20]	; (8019f8c <fiprintf+0x20>)
 8019f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f7a:	6800      	ldr	r0, [r0, #0]
 8019f7c:	9301      	str	r3, [sp, #4]
 8019f7e:	f7ff fcbf 	bl	8019900 <_vfiprintf_r>
 8019f82:	b002      	add	sp, #8
 8019f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f88:	b003      	add	sp, #12
 8019f8a:	4770      	bx	lr
 8019f8c:	200000f0 	.word	0x200000f0

08019f90 <_lseek_r>:
 8019f90:	b538      	push	{r3, r4, r5, lr}
 8019f92:	4d07      	ldr	r5, [pc, #28]	; (8019fb0 <_lseek_r+0x20>)
 8019f94:	4604      	mov	r4, r0
 8019f96:	4608      	mov	r0, r1
 8019f98:	4611      	mov	r1, r2
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	602a      	str	r2, [r5, #0]
 8019f9e:	461a      	mov	r2, r3
 8019fa0:	f7e8 fb9a 	bl	80026d8 <_lseek>
 8019fa4:	1c43      	adds	r3, r0, #1
 8019fa6:	d102      	bne.n	8019fae <_lseek_r+0x1e>
 8019fa8:	682b      	ldr	r3, [r5, #0]
 8019faa:	b103      	cbz	r3, 8019fae <_lseek_r+0x1e>
 8019fac:	6023      	str	r3, [r4, #0]
 8019fae:	bd38      	pop	{r3, r4, r5, pc}
 8019fb0:	20001a04 	.word	0x20001a04

08019fb4 <__swhatbuf_r>:
 8019fb4:	b570      	push	{r4, r5, r6, lr}
 8019fb6:	460e      	mov	r6, r1
 8019fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fbc:	2900      	cmp	r1, #0
 8019fbe:	b096      	sub	sp, #88	; 0x58
 8019fc0:	4614      	mov	r4, r2
 8019fc2:	461d      	mov	r5, r3
 8019fc4:	da07      	bge.n	8019fd6 <__swhatbuf_r+0x22>
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	602b      	str	r3, [r5, #0]
 8019fca:	89b3      	ldrh	r3, [r6, #12]
 8019fcc:	061a      	lsls	r2, r3, #24
 8019fce:	d410      	bmi.n	8019ff2 <__swhatbuf_r+0x3e>
 8019fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019fd4:	e00e      	b.n	8019ff4 <__swhatbuf_r+0x40>
 8019fd6:	466a      	mov	r2, sp
 8019fd8:	f000 f8c2 	bl	801a160 <_fstat_r>
 8019fdc:	2800      	cmp	r0, #0
 8019fde:	dbf2      	blt.n	8019fc6 <__swhatbuf_r+0x12>
 8019fe0:	9a01      	ldr	r2, [sp, #4]
 8019fe2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019fe6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019fea:	425a      	negs	r2, r3
 8019fec:	415a      	adcs	r2, r3
 8019fee:	602a      	str	r2, [r5, #0]
 8019ff0:	e7ee      	b.n	8019fd0 <__swhatbuf_r+0x1c>
 8019ff2:	2340      	movs	r3, #64	; 0x40
 8019ff4:	2000      	movs	r0, #0
 8019ff6:	6023      	str	r3, [r4, #0]
 8019ff8:	b016      	add	sp, #88	; 0x58
 8019ffa:	bd70      	pop	{r4, r5, r6, pc}

08019ffc <__smakebuf_r>:
 8019ffc:	898b      	ldrh	r3, [r1, #12]
 8019ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a000:	079d      	lsls	r5, r3, #30
 801a002:	4606      	mov	r6, r0
 801a004:	460c      	mov	r4, r1
 801a006:	d507      	bpl.n	801a018 <__smakebuf_r+0x1c>
 801a008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a00c:	6023      	str	r3, [r4, #0]
 801a00e:	6123      	str	r3, [r4, #16]
 801a010:	2301      	movs	r3, #1
 801a012:	6163      	str	r3, [r4, #20]
 801a014:	b002      	add	sp, #8
 801a016:	bd70      	pop	{r4, r5, r6, pc}
 801a018:	ab01      	add	r3, sp, #4
 801a01a:	466a      	mov	r2, sp
 801a01c:	f7ff ffca 	bl	8019fb4 <__swhatbuf_r>
 801a020:	9900      	ldr	r1, [sp, #0]
 801a022:	4605      	mov	r5, r0
 801a024:	4630      	mov	r0, r6
 801a026:	f7fd fa73 	bl	8017510 <_malloc_r>
 801a02a:	b948      	cbnz	r0, 801a040 <__smakebuf_r+0x44>
 801a02c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a030:	059a      	lsls	r2, r3, #22
 801a032:	d4ef      	bmi.n	801a014 <__smakebuf_r+0x18>
 801a034:	f023 0303 	bic.w	r3, r3, #3
 801a038:	f043 0302 	orr.w	r3, r3, #2
 801a03c:	81a3      	strh	r3, [r4, #12]
 801a03e:	e7e3      	b.n	801a008 <__smakebuf_r+0xc>
 801a040:	4b0d      	ldr	r3, [pc, #52]	; (801a078 <__smakebuf_r+0x7c>)
 801a042:	62b3      	str	r3, [r6, #40]	; 0x28
 801a044:	89a3      	ldrh	r3, [r4, #12]
 801a046:	6020      	str	r0, [r4, #0]
 801a048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a04c:	81a3      	strh	r3, [r4, #12]
 801a04e:	9b00      	ldr	r3, [sp, #0]
 801a050:	6163      	str	r3, [r4, #20]
 801a052:	9b01      	ldr	r3, [sp, #4]
 801a054:	6120      	str	r0, [r4, #16]
 801a056:	b15b      	cbz	r3, 801a070 <__smakebuf_r+0x74>
 801a058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a05c:	4630      	mov	r0, r6
 801a05e:	f000 f891 	bl	801a184 <_isatty_r>
 801a062:	b128      	cbz	r0, 801a070 <__smakebuf_r+0x74>
 801a064:	89a3      	ldrh	r3, [r4, #12]
 801a066:	f023 0303 	bic.w	r3, r3, #3
 801a06a:	f043 0301 	orr.w	r3, r3, #1
 801a06e:	81a3      	strh	r3, [r4, #12]
 801a070:	89a0      	ldrh	r0, [r4, #12]
 801a072:	4305      	orrs	r5, r0
 801a074:	81a5      	strh	r5, [r4, #12]
 801a076:	e7cd      	b.n	801a014 <__smakebuf_r+0x18>
 801a078:	08018d11 	.word	0x08018d11

0801a07c <__ascii_mbtowc>:
 801a07c:	b082      	sub	sp, #8
 801a07e:	b901      	cbnz	r1, 801a082 <__ascii_mbtowc+0x6>
 801a080:	a901      	add	r1, sp, #4
 801a082:	b142      	cbz	r2, 801a096 <__ascii_mbtowc+0x1a>
 801a084:	b14b      	cbz	r3, 801a09a <__ascii_mbtowc+0x1e>
 801a086:	7813      	ldrb	r3, [r2, #0]
 801a088:	600b      	str	r3, [r1, #0]
 801a08a:	7812      	ldrb	r2, [r2, #0]
 801a08c:	1e10      	subs	r0, r2, #0
 801a08e:	bf18      	it	ne
 801a090:	2001      	movne	r0, #1
 801a092:	b002      	add	sp, #8
 801a094:	4770      	bx	lr
 801a096:	4610      	mov	r0, r2
 801a098:	e7fb      	b.n	801a092 <__ascii_mbtowc+0x16>
 801a09a:	f06f 0001 	mvn.w	r0, #1
 801a09e:	e7f8      	b.n	801a092 <__ascii_mbtowc+0x16>

0801a0a0 <memmove>:
 801a0a0:	4288      	cmp	r0, r1
 801a0a2:	b510      	push	{r4, lr}
 801a0a4:	eb01 0402 	add.w	r4, r1, r2
 801a0a8:	d902      	bls.n	801a0b0 <memmove+0x10>
 801a0aa:	4284      	cmp	r4, r0
 801a0ac:	4623      	mov	r3, r4
 801a0ae:	d807      	bhi.n	801a0c0 <memmove+0x20>
 801a0b0:	1e43      	subs	r3, r0, #1
 801a0b2:	42a1      	cmp	r1, r4
 801a0b4:	d008      	beq.n	801a0c8 <memmove+0x28>
 801a0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a0be:	e7f8      	b.n	801a0b2 <memmove+0x12>
 801a0c0:	4402      	add	r2, r0
 801a0c2:	4601      	mov	r1, r0
 801a0c4:	428a      	cmp	r2, r1
 801a0c6:	d100      	bne.n	801a0ca <memmove+0x2a>
 801a0c8:	bd10      	pop	{r4, pc}
 801a0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a0d2:	e7f7      	b.n	801a0c4 <memmove+0x24>

0801a0d4 <_realloc_r>:
 801a0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0d6:	4607      	mov	r7, r0
 801a0d8:	4614      	mov	r4, r2
 801a0da:	460e      	mov	r6, r1
 801a0dc:	b921      	cbnz	r1, 801a0e8 <_realloc_r+0x14>
 801a0de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a0e2:	4611      	mov	r1, r2
 801a0e4:	f7fd ba14 	b.w	8017510 <_malloc_r>
 801a0e8:	b922      	cbnz	r2, 801a0f4 <_realloc_r+0x20>
 801a0ea:	f7fd f9c1 	bl	8017470 <_free_r>
 801a0ee:	4625      	mov	r5, r4
 801a0f0:	4628      	mov	r0, r5
 801a0f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0f4:	f000 f856 	bl	801a1a4 <_malloc_usable_size_r>
 801a0f8:	42a0      	cmp	r0, r4
 801a0fa:	d20f      	bcs.n	801a11c <_realloc_r+0x48>
 801a0fc:	4621      	mov	r1, r4
 801a0fe:	4638      	mov	r0, r7
 801a100:	f7fd fa06 	bl	8017510 <_malloc_r>
 801a104:	4605      	mov	r5, r0
 801a106:	2800      	cmp	r0, #0
 801a108:	d0f2      	beq.n	801a0f0 <_realloc_r+0x1c>
 801a10a:	4631      	mov	r1, r6
 801a10c:	4622      	mov	r2, r4
 801a10e:	f7fd f999 	bl	8017444 <memcpy>
 801a112:	4631      	mov	r1, r6
 801a114:	4638      	mov	r0, r7
 801a116:	f7fd f9ab 	bl	8017470 <_free_r>
 801a11a:	e7e9      	b.n	801a0f0 <_realloc_r+0x1c>
 801a11c:	4635      	mov	r5, r6
 801a11e:	e7e7      	b.n	801a0f0 <_realloc_r+0x1c>

0801a120 <_read_r>:
 801a120:	b538      	push	{r3, r4, r5, lr}
 801a122:	4d07      	ldr	r5, [pc, #28]	; (801a140 <_read_r+0x20>)
 801a124:	4604      	mov	r4, r0
 801a126:	4608      	mov	r0, r1
 801a128:	4611      	mov	r1, r2
 801a12a:	2200      	movs	r2, #0
 801a12c:	602a      	str	r2, [r5, #0]
 801a12e:	461a      	mov	r2, r3
 801a130:	f7e8 fa72 	bl	8002618 <_read>
 801a134:	1c43      	adds	r3, r0, #1
 801a136:	d102      	bne.n	801a13e <_read_r+0x1e>
 801a138:	682b      	ldr	r3, [r5, #0]
 801a13a:	b103      	cbz	r3, 801a13e <_read_r+0x1e>
 801a13c:	6023      	str	r3, [r4, #0]
 801a13e:	bd38      	pop	{r3, r4, r5, pc}
 801a140:	20001a04 	.word	0x20001a04

0801a144 <__ascii_wctomb>:
 801a144:	b149      	cbz	r1, 801a15a <__ascii_wctomb+0x16>
 801a146:	2aff      	cmp	r2, #255	; 0xff
 801a148:	bf85      	ittet	hi
 801a14a:	238a      	movhi	r3, #138	; 0x8a
 801a14c:	6003      	strhi	r3, [r0, #0]
 801a14e:	700a      	strbls	r2, [r1, #0]
 801a150:	f04f 30ff 	movhi.w	r0, #4294967295
 801a154:	bf98      	it	ls
 801a156:	2001      	movls	r0, #1
 801a158:	4770      	bx	lr
 801a15a:	4608      	mov	r0, r1
 801a15c:	4770      	bx	lr
	...

0801a160 <_fstat_r>:
 801a160:	b538      	push	{r3, r4, r5, lr}
 801a162:	4d07      	ldr	r5, [pc, #28]	; (801a180 <_fstat_r+0x20>)
 801a164:	2300      	movs	r3, #0
 801a166:	4604      	mov	r4, r0
 801a168:	4608      	mov	r0, r1
 801a16a:	4611      	mov	r1, r2
 801a16c:	602b      	str	r3, [r5, #0]
 801a16e:	f7e8 fa98 	bl	80026a2 <_fstat>
 801a172:	1c43      	adds	r3, r0, #1
 801a174:	d102      	bne.n	801a17c <_fstat_r+0x1c>
 801a176:	682b      	ldr	r3, [r5, #0]
 801a178:	b103      	cbz	r3, 801a17c <_fstat_r+0x1c>
 801a17a:	6023      	str	r3, [r4, #0]
 801a17c:	bd38      	pop	{r3, r4, r5, pc}
 801a17e:	bf00      	nop
 801a180:	20001a04 	.word	0x20001a04

0801a184 <_isatty_r>:
 801a184:	b538      	push	{r3, r4, r5, lr}
 801a186:	4d06      	ldr	r5, [pc, #24]	; (801a1a0 <_isatty_r+0x1c>)
 801a188:	2300      	movs	r3, #0
 801a18a:	4604      	mov	r4, r0
 801a18c:	4608      	mov	r0, r1
 801a18e:	602b      	str	r3, [r5, #0]
 801a190:	f7e8 fa97 	bl	80026c2 <_isatty>
 801a194:	1c43      	adds	r3, r0, #1
 801a196:	d102      	bne.n	801a19e <_isatty_r+0x1a>
 801a198:	682b      	ldr	r3, [r5, #0]
 801a19a:	b103      	cbz	r3, 801a19e <_isatty_r+0x1a>
 801a19c:	6023      	str	r3, [r4, #0]
 801a19e:	bd38      	pop	{r3, r4, r5, pc}
 801a1a0:	20001a04 	.word	0x20001a04

0801a1a4 <_malloc_usable_size_r>:
 801a1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a1a8:	1f18      	subs	r0, r3, #4
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	bfbc      	itt	lt
 801a1ae:	580b      	ldrlt	r3, [r1, r0]
 801a1b0:	18c0      	addlt	r0, r0, r3
 801a1b2:	4770      	bx	lr

0801a1b4 <_init>:
 801a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1b6:	bf00      	nop
 801a1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1ba:	bc08      	pop	{r3}
 801a1bc:	469e      	mov	lr, r3
 801a1be:	4770      	bx	lr

0801a1c0 <_fini>:
 801a1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1c2:	bf00      	nop
 801a1c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a1c6:	bc08      	pop	{r3}
 801a1c8:	469e      	mov	lr, r3
 801a1ca:	4770      	bx	lr
