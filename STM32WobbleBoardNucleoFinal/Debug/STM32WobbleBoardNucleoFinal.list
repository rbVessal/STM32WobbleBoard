
STM32WobbleBoardNucleoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004808  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004990  08004990  00014990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a20  08004a20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a28  08004a28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000000c  08004a3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004a3c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acf8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003271  00000000  00000000  0003ad34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289ba  00000000  00000000  00040620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a7a7  00000000  00000000  00068fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8659  00000000  00000000  00083781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017bdda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  0017be30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004978 	.word	0x08004978

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004978 	.word	0x08004978

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <MX_CRC_Init+0x3c>)
 80004d6:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <MX_CRC_Init+0x40>)
 80004d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_CRC_Init+0x3c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <MX_CRC_Init+0x3c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_CRC_Init+0x3c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <MX_CRC_Init+0x3c>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_CRC_Init+0x3c>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <MX_CRC_Init+0x3c>)
 80004fa:	f000 fdf5 	bl	80010e8 <HAL_CRC_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000504:	f000 f9fa 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000002c 	.word	0x2000002c
 8000510:	40023000 	.word	0x40023000

08000514 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0a      	ldr	r2, [pc, #40]	; (800054c <HAL_CRC_MspInit+0x38>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d10b      	bne.n	800053e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_CRC_MspInit+0x3c>)
 8000528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800052a:	4a09      	ldr	r2, [pc, #36]	; (8000550 <HAL_CRC_MspInit+0x3c>)
 800052c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000530:	6493      	str	r3, [r2, #72]	; 0x48
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <HAL_CRC_MspInit+0x3c>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023000 	.word	0x40023000
 8000550:	40021000 	.word	0x40021000

08000554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800055a:	4b0c      	ldr	r3, [pc, #48]	; (800058c <MX_DMA_Init+0x38>)
 800055c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800055e:	4a0b      	ldr	r2, [pc, #44]	; (800058c <MX_DMA_Init+0x38>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6493      	str	r3, [r2, #72]	; 0x48
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <MX_DMA_Init+0x38>)
 8000568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	2010      	movs	r0, #16
 8000578:	f000 fd7f 	bl	800107a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800057c:	2010      	movs	r0, #16
 800057e:	f000 fd98 	bl	80010b2 <HAL_NVIC_EnableIRQ>

}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000

08000590 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	4a2e      	ldr	r2, [pc, #184]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005ac:	f043 0304 	orr.w	r3, r3, #4
 80005b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b2:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f003 0304 	and.w	r3, r3, #4
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	4a28      	ldr	r2, [pc, #160]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ca:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b23      	ldr	r3, [pc, #140]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a22      	ldr	r2, [pc, #136]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b20      	ldr	r3, [pc, #128]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_GPIO_Init+0xd4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800060e:	f001 f967 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationButton_Pin;
 8000612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000618:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UserCalibrationButton_GPIO_Port, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	480f      	ldr	r0, [pc, #60]	; (8000668 <MX_GPIO_Init+0xd8>)
 800062a:	f000 ffaf 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UserCalibrationLED_Pin;
 800062e:	2320      	movs	r3, #32
 8000630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	2300      	movs	r3, #0
 800063c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(UserCalibrationLED_GPIO_Port, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000648:	f000 ffa0 	bl	800158c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2028      	movs	r0, #40	; 0x28
 8000652:	f000 fd12 	bl	800107a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000656:	2028      	movs	r0, #40	; 0x28
 8000658:	f000 fd2b 	bl	80010b2 <HAL_NVIC_EnableIRQ>

}
 800065c:	bf00      	nop
 800065e:	3728      	adds	r7, #40	; 0x28
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	48000800 	.word	0x48000800

0800066c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	; (80006e4 <MX_I2C1_Init+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <MX_I2C1_Init+0x7c>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a6:	480e      	ldr	r0, [pc, #56]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006a8:	f001 f94a 	bl	8001940 <HAL_I2C_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006b2:	f000 f923 	bl	80008fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006ba:	f001 f9d0 	bl	8001a5e <HAL_I2CEx_ConfigAnalogFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c4:	f000 f91a 	bl	80008fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_I2C1_Init+0x74>)
 80006cc:	f001 fa12 	bl	8001af4 <HAL_I2CEx_ConfigDigitalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006d6:	f000 f911 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000050 	.word	0x20000050
 80006e4:	40005400 	.word	0x40005400
 80006e8:	00702991 	.word	0x00702991

080006ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b0ac      	sub	sp, #176	; 0xb0
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	2288      	movs	r2, #136	; 0x88
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f004 f92b 	bl	8004968 <memset>
  if(i2cHandle->Instance==I2C1)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <HAL_I2C_MspInit+0xb0>)
 8000718:	4293      	cmp	r3, r2
 800071a:	d13b      	bne.n	8000794 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000720:	2300      	movs	r3, #0
 8000722:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4618      	mov	r0, r3
 800072a:	f002 f87f 	bl	800282c <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000734:	f000 f8e2 	bl	80008fc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_I2C_MspInit+0xb4>)
 800073a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073c:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <HAL_I2C_MspInit+0xb4>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_I2C_MspInit+0xb4>)
 8000746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000748:	f003 0302 	and.w	r3, r3, #2
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000750:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000758:	2312      	movs	r3, #18
 800075a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800076a:	2304      	movs	r3, #4
 800076c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000774:	4619      	mov	r1, r3
 8000776:	480b      	ldr	r0, [pc, #44]	; (80007a4 <HAL_I2C_MspInit+0xb8>)
 8000778:	f000 ff08 	bl	800158c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_I2C_MspInit+0xb4>)
 800077e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_I2C_MspInit+0xb4>)
 8000782:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000786:	6593      	str	r3, [r2, #88]	; 0x58
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_I2C_MspInit+0xb4>)
 800078a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000794:	bf00      	nop
 8000796:	37b0      	adds	r7, #176	; 0xb0
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40005400 	.word	0x40005400
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ac:	f000 fb0e 	bl	8000dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f80f 	bl	80007d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f7ff feec 	bl	8000590 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007b8:	f000 fa24 	bl	8000c04 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80007bc:	f7ff fe88 	bl	80004d0 <MX_CRC_Init>
  MX_I2C1_Init();
 80007c0:	f7ff ff54 	bl	800066c <MX_I2C1_Init>
  MX_RTC_Init();
 80007c4:	f000 f8a0 	bl	8000908 <MX_RTC_Init>
  MX_DMA_Init();
 80007c8:	f7ff fec4 	bl	8000554 <MX_DMA_Init>
  MX_TIM3_Init();
 80007cc:	f000 f9a6 	bl	8000b1c <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0x28>

080007d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b096      	sub	sp, #88	; 0x58
 80007d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2244      	movs	r2, #68	; 0x44
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 f8c1 	bl	8004968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f8:	f001 f9d6 	bl	8001ba8 <HAL_PWREx_ControlVoltageScaling>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000802:	f000 f87b 	bl	80008fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000806:	230a      	movs	r3, #10
 8000808:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081c:	2302      	movs	r3, #2
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000824:	230a      	movs	r3, #10
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000828:	2307      	movs	r3, #7
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fa0b 	bl	8001c54 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000844:	f000 f85a 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2303      	movs	r3, #3
 800084e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2104      	movs	r1, #4
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fddd 	bl	8002420 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800086c:	f000 f846 	bl	80008fc <Error_Handler>
  }
}
 8000870:	bf00      	nop
 8000872:	3758      	adds	r7, #88	; 0x58
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <HAL_GPIO_EXTI_Callback>:
// When the button's signal goes from a low to a high state
// which is what happens when you push a button
// See: https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection
// for an explanation on edge detection
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == UserCalibrationButton_Pin)
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000888:	d129      	bne.n	80008de <HAL_GPIO_EXTI_Callback+0x66>
	{
		// TODO:  Send data via BLE virtual COM port to bring up or
		// close down the user calibration screen

		uint8_t* cMessage = (uint8_t*)"";
 800088a:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <HAL_GPIO_EXTI_Callback+0x70>)
 800088c:	60fb      	str	r3, [r7, #12]

		// Turn user green LED on/off
		if(iIsUserCalibrationLEDOn == 0)
 800088e:	4b17      	ldr	r3, [pc, #92]	; (80008ec <HAL_GPIO_EXTI_Callback+0x74>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d105      	bne.n	80008a2 <HAL_GPIO_EXTI_Callback+0x2a>
		{
			iIsUserCalibrationLEDOn = 1;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_GPIO_EXTI_Callback+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Request User Calibration Mode\n\0";
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_GPIO_EXTI_Callback+0x78>)
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	e004      	b.n	80008ac <HAL_GPIO_EXTI_Callback+0x34>
		}
		else
		{
			iIsUserCalibrationLEDOn = 0;
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_GPIO_EXTI_Callback+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
			cMessage = (uint8_t*)"Unrequest User Calibration Mode\n\0";
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_GPIO_EXTI_Callback+0x7c>)
 80008aa:	60fb      	str	r3, [r7, #12]
		}

		// Send the message via virtual COM port
		// It uses the UART1 of STLINK's virtual com port and we
		// are transmitting the serial data with this call
		uint16_t iMessageLength = (uint16_t)strlen(cMessage);
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f7ff fc8b 	bl	80001c8 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	817b      	strh	r3, [r7, #10]
		if(HAL_UART_Transmit(&huart2, cMessage, iMessageLength, 100) != HAL_OK)
 80008b6:	897a      	ldrh	r2, [r7, #10]
 80008b8:	2364      	movs	r3, #100	; 0x64
 80008ba:	68f9      	ldr	r1, [r7, #12]
 80008bc:	480e      	ldr	r0, [pc, #56]	; (80008f8 <HAL_GPIO_EXTI_Callback+0x80>)
 80008be:	f003 fb61 	bl	8003f84 <HAL_UART_Transmit>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_GPIO_EXTI_Callback+0x54>
		{
			Error_Handler();
 80008c8:	f000 f818 	bl	80008fc <Error_Handler>
		}

		HAL_GPIO_WritePin(UserCalibrationLED_GPIO_Port, UserCalibrationLED_Pin, iIsUserCalibrationLEDOn);
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <HAL_GPIO_EXTI_Callback+0x74>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	461a      	mov	r2, r3
 80008d4:	2120      	movs	r1, #32
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f001 f801 	bl	80018e0 <HAL_GPIO_WritePin>
	}
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	08004990 	.word	0x08004990
 80008ec:	20000028 	.word	0x20000028
 80008f0:	08004994 	.word	0x08004994
 80008f4:	080049b4 	.word	0x080049b4
 80008f8:	2000009c 	.word	0x2000009c

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800091c:	2300      	movs	r3, #0
 800091e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000920:	4b25      	ldr	r3, [pc, #148]	; (80009b8 <MX_RTC_Init+0xb0>)
 8000922:	4a26      	ldr	r2, [pc, #152]	; (80009bc <MX_RTC_Init+0xb4>)
 8000924:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000926:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <MX_RTC_Init+0xb0>)
 8000928:	2200      	movs	r2, #0
 800092a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800092c:	4b22      	ldr	r3, [pc, #136]	; (80009b8 <MX_RTC_Init+0xb0>)
 800092e:	227f      	movs	r2, #127	; 0x7f
 8000930:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <MX_RTC_Init+0xb0>)
 8000934:	22ff      	movs	r2, #255	; 0xff
 8000936:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <MX_RTC_Init+0xb0>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800093e:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <MX_RTC_Init+0xb0>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <MX_RTC_Init+0xb0>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <MX_RTC_Init+0xb0>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000950:	4819      	ldr	r0, [pc, #100]	; (80009b8 <MX_RTC_Init+0xb0>)
 8000952:	f002 fc27 	bl	80031a4 <HAL_RTC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800095c:	f7ff ffce 	bl	80008fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000960:	2300      	movs	r3, #0
 8000962:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000964:	2300      	movs	r3, #0
 8000966:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000968:	2300      	movs	r3, #0
 800096a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2201      	movs	r2, #1
 8000978:	4619      	mov	r1, r3
 800097a:	480f      	ldr	r0, [pc, #60]	; (80009b8 <MX_RTC_Init+0xb0>)
 800097c:	f002 fc8d 	bl	800329a <HAL_RTC_SetTime>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000986:	f7ff ffb9 	bl	80008fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800098a:	2301      	movs	r3, #1
 800098c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800098e:	2301      	movs	r3, #1
 8000990:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8000992:	2301      	movs	r3, #1
 8000994:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000996:	2300      	movs	r3, #0
 8000998:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	2201      	movs	r2, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_RTC_Init+0xb0>)
 80009a2:	f002 fd17 	bl	80033d4 <HAL_RTC_SetDate>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80009ac:	f7ff ffa6 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	3718      	adds	r7, #24
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000120 	.word	0x20000120
 80009bc:	40002800 	.word	0x40002800

080009c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0a4      	sub	sp, #144	; 0x90
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2288      	movs	r2, #136	; 0x88
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 ffc9 	bl	8004968 <memset>
  if(rtcHandle->Instance==RTC)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_RTC_MspInit+0x5c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d118      	bne.n	8000a12 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 ff1a 	bl	800282c <HAL_RCCEx_PeriphCLKConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80009fe:	f7ff ff7d 	bl	80008fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <HAL_RTC_MspInit+0x60>)
 8000a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <HAL_RTC_MspInit+0x60>)
 8000a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a12:	bf00      	nop
 8000a14:	3790      	adds	r7, #144	; 0x90
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40002800 	.word	0x40002800
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6613      	str	r3, [r2, #96]	; 0x60
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <MemManage_Handler+0x4>

08000a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <BusFault_Handler+0x4>

08000a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <UsageFault_Handler+0x4>

08000a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f9e4 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <DMA1_Channel6_IRQHandler+0x10>)
 8000ac6:	f000 fcb1 	bl	800142c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000190 	.word	0x20000190

08000ad4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <TIM3_IRQHandler+0x10>)
 8000ada:	f002 fe10 	bl	80036fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000144 	.word	0x20000144

08000ae8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UserCalibrationButton_Pin);
 8000aec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000af0:	f000 ff0e 	bl	8001910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_TIM3_Init+0x94>)
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <MX_TIM3_Init+0x98>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_TIM3_Init+0x94>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_TIM3_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_TIM3_Init+0x94>)
 8000b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_TIM3_Init+0x94>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_TIM3_Init+0x94>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <MX_TIM3_Init+0x94>)
 8000b62:	f002 fd75 	bl	8003650 <HAL_TIM_Base_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b6c:	f7ff fec6 	bl	80008fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <MX_TIM3_Init+0x94>)
 8000b7e:	f002 fedd 	bl	800393c <HAL_TIM_ConfigClockSource>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b88:	f7ff feb8 	bl	80008fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_TIM3_Init+0x94>)
 8000b9a:	f003 f8ff 	bl	8003d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f7ff feaa 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000144 	.word	0x20000144
 8000bb4:	40000400 	.word	0x40000400

08000bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	; (8000bfc <HAL_TIM_Base_MspInit+0x44>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d113      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bca:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_TIM_Base_MspInit+0x48>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bce:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <HAL_TIM_Base_MspInit+0x48>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_TIM_Base_MspInit+0x48>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	201d      	movs	r0, #29
 8000be8:	f000 fa47 	bl	800107a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bec:	201d      	movs	r0, #29
 8000bee:	f000 fa60 	bl	80010b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40000400 	.word	0x40000400
 8000c00:	40021000 	.word	0x40021000

08000c04 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_USART2_UART_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c10:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_USART2_UART_Init+0x58>)
 8000c48:	f003 f94e 	bl	8003ee8 <HAL_UART_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c52:	f7ff fe53 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000009c 	.word	0x2000009c
 8000c60:	40004400 	.word	0x40004400

08000c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b0ac      	sub	sp, #176	; 0xb0
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2288      	movs	r2, #136	; 0x88
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f003 fe6f 	bl	8004968 <memset>
  if(uartHandle->Instance==USART2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a36      	ldr	r2, [pc, #216]	; (8000d68 <HAL_UART_MspInit+0x104>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d164      	bne.n	8000d5e <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fdc3 	bl	800282c <HAL_RCCEx_PeriphCLKConfig>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cac:	f7ff fe26 	bl	80008fc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb0:	4b2e      	ldr	r3, [pc, #184]	; (8000d6c <HAL_UART_MspInit+0x108>)
 8000cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb4:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <HAL_UART_MspInit+0x108>)
 8000cb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cba:	6593      	str	r3, [r2, #88]	; 0x58
 8000cbc:	4b2b      	ldr	r3, [pc, #172]	; (8000d6c <HAL_UART_MspInit+0x108>)
 8000cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <HAL_UART_MspInit+0x108>)
 8000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <HAL_UART_MspInit+0x108>)
 8000cce:	f043 0301 	orr.w	r3, r3, #1
 8000cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <HAL_UART_MspInit+0x108>)
 8000cd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce0:	230c      	movs	r3, #12
 8000ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f000 fc40 	bl	800158c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d0e:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_UART_MspInit+0x110>)
 8000d10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d14:	2202      	movs	r2, #2
 8000d16:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d42:	480b      	ldr	r0, [pc, #44]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d44:	f000 faba 	bl	80012bc <HAL_DMA_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000d4e:	f7ff fdd5 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d56:	671a      	str	r2, [r3, #112]	; 0x70
 8000d58:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <HAL_UART_MspInit+0x10c>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d5e:	bf00      	nop
 8000d60:	37b0      	adds	r7, #176	; 0xb0
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40004400 	.word	0x40004400
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	20000190 	.word	0x20000190
 8000d74:	4002006c 	.word	0x4002006c

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff febc 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d82:	490d      	ldr	r1, [pc, #52]	; (8000db8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d84:	4a0d      	ldr	r2, [pc, #52]	; (8000dbc <LoopForever+0xe>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d98:	4c0a      	ldr	r4, [pc, #40]	; (8000dc4 <LoopForever+0x16>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f003 fdbb 	bl	8004920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fcfd 	bl	80007a8 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dbc:	08004a30 	.word	0x08004a30
  ldr r2, =_sbss
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dc4:	200001dc 	.word	0x200001dc

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_Init+0x3c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_Init+0x3c>)
 8000ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f93e 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 f80f 	bl	8000e0c <HAL_InitTick>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	e001      	b.n	8000dfe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dfa:	f7ff fe13 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40022000 	.word	0x40022000

08000e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e14:	2300      	movs	r3, #0
 8000e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e18:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d023      	beq.n	8000e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <HAL_InitTick+0x70>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_InitTick+0x6c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f000 f949 	bl	80010ce <HAL_SYSTICK_Config>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d10f      	bne.n	8000e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d809      	bhi.n	8000e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f913 	bl	800107a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_InitTick+0x74>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	73fb      	strb	r3, [r7, #15]
 8000e60:	e004      	b.n	8000e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	73fb      	strb	r3, [r7, #15]
 8000e66:	e001      	b.n	8000e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200001d8 	.word	0x200001d8

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200001d8 	.word	0x200001d8

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	; (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	; (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	; (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	; 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff29 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800108c:	f7ff ff3e 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 8001090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	6978      	ldr	r0, [r7, #20]
 8001098:	f7ff ff8e 	bl	8000fb8 <NVIC_EncodePriority>
 800109c:	4602      	mov	r2, r0
 800109e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a2:	4611      	mov	r1, r2
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff5d 	bl	8000f64 <__NVIC_SetPriority>
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff31 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ffa2 	bl	8001020 <SysTick_Config>
 80010dc:	4603      	mov	r3, r0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e054      	b.n	80011a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7f5b      	ldrb	r3, [r3, #29]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d105      	bne.n	8001110 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fa02 	bl	8000514 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2202      	movs	r2, #2
 8001114:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d10c      	bne.n	8001138 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a22      	ldr	r2, [pc, #136]	; (80011ac <HAL_CRC_Init+0xc4>)
 8001124:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 0218 	bic.w	r2, r2, #24
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	e00c      	b.n	8001152 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6899      	ldr	r1, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	461a      	mov	r2, r3
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f834 	bl	80011b0 <HAL_CRCEx_Polynomial_Set>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e028      	b.n	80011a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	795b      	ldrb	r3, [r3, #5]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d105      	bne.n	8001166 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f04f 32ff 	mov.w	r2, #4294967295
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	e004      	b.n	8001170 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6912      	ldr	r2, [r2, #16]
 800116e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	430a      	orrs	r2, r1
 8001184:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	430a      	orrs	r2, r1
 800119a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	04c11db7 	.word	0x04c11db7

080011b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80011c0:	231f      	movs	r3, #31
 80011c2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80011c4:	bf00      	nop
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	613a      	str	r2, [r7, #16]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <HAL_CRCEx_Polynomial_Set+0x34>
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d0f0      	beq.n	80011c6 <HAL_CRCEx_Polynomial_Set+0x16>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b18      	cmp	r3, #24
 80011e8:	d846      	bhi.n	8001278 <HAL_CRCEx_Polynomial_Set+0xc8>
 80011ea:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	0800127f 	.word	0x0800127f
 80011f4:	08001279 	.word	0x08001279
 80011f8:	08001279 	.word	0x08001279
 80011fc:	08001279 	.word	0x08001279
 8001200:	08001279 	.word	0x08001279
 8001204:	08001279 	.word	0x08001279
 8001208:	08001279 	.word	0x08001279
 800120c:	08001279 	.word	0x08001279
 8001210:	0800126d 	.word	0x0800126d
 8001214:	08001279 	.word	0x08001279
 8001218:	08001279 	.word	0x08001279
 800121c:	08001279 	.word	0x08001279
 8001220:	08001279 	.word	0x08001279
 8001224:	08001279 	.word	0x08001279
 8001228:	08001279 	.word	0x08001279
 800122c:	08001279 	.word	0x08001279
 8001230:	08001261 	.word	0x08001261
 8001234:	08001279 	.word	0x08001279
 8001238:	08001279 	.word	0x08001279
 800123c:	08001279 	.word	0x08001279
 8001240:	08001279 	.word	0x08001279
 8001244:	08001279 	.word	0x08001279
 8001248:	08001279 	.word	0x08001279
 800124c:	08001279 	.word	0x08001279
 8001250:	08001255 	.word	0x08001255
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	2b06      	cmp	r3, #6
 8001258:	d913      	bls.n	8001282 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800125e:	e010      	b.n	8001282 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b07      	cmp	r3, #7
 8001264:	d90f      	bls.n	8001286 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800126a:	e00c      	b.n	8001286 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	d90b      	bls.n	800128a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001276:	e008      	b.n	800128a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	75fb      	strb	r3, [r7, #23]
      break;
 800127c:	e006      	b.n	800128c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800127e:	bf00      	nop
 8001280:	e004      	b.n	800128c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001282:	bf00      	nop
 8001284:	e002      	b.n	800128c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001286:	bf00      	nop
 8001288:	e000      	b.n	800128c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800128a:	bf00      	nop
  }
  if (status == HAL_OK)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f023 0118 	bic.w	r1, r3, #24
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e098      	b.n	8001400 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b4d      	ldr	r3, [pc, #308]	; (800140c <HAL_DMA_Init+0x150>)
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d80f      	bhi.n	80012fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <HAL_DMA_Init+0x154>)
 80012e2:	4413      	add	r3, r2
 80012e4:	4a4b      	ldr	r2, [pc, #300]	; (8001414 <HAL_DMA_Init+0x158>)
 80012e6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	009a      	lsls	r2, r3, #2
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a48      	ldr	r2, [pc, #288]	; (8001418 <HAL_DMA_Init+0x15c>)
 80012f6:	641a      	str	r2, [r3, #64]	; 0x40
 80012f8:	e00e      	b.n	8001318 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4b46      	ldr	r3, [pc, #280]	; (800141c <HAL_DMA_Init+0x160>)
 8001302:	4413      	add	r3, r2
 8001304:	4a43      	ldr	r2, [pc, #268]	; (8001414 <HAL_DMA_Init+0x158>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	009a      	lsls	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a42      	ldr	r2, [pc, #264]	; (8001420 <HAL_DMA_Init+0x164>)
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800132e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001332:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800133c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001372:	d039      	beq.n	80013e8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a27      	ldr	r2, [pc, #156]	; (8001418 <HAL_DMA_Init+0x15c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d11a      	bne.n	80013b4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <HAL_DMA_Init+0x168>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f003 031c 	and.w	r3, r3, #28
 800138a:	210f      	movs	r1, #15
 800138c:	fa01 f303 	lsl.w	r3, r1, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	4924      	ldr	r1, [pc, #144]	; (8001424 <HAL_DMA_Init+0x168>)
 8001394:	4013      	ands	r3, r2
 8001396:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_DMA_Init+0x168>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6859      	ldr	r1, [r3, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	f003 031c 	and.w	r3, r3, #28
 80013a8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ac:	491d      	ldr	r1, [pc, #116]	; (8001424 <HAL_DMA_Init+0x168>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
 80013b2:	e019      	b.n	80013e8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80013b4:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_DMA_Init+0x16c>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	f003 031c 	and.w	r3, r3, #28
 80013c0:	210f      	movs	r1, #15
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	4917      	ldr	r1, [pc, #92]	; (8001428 <HAL_DMA_Init+0x16c>)
 80013ca:	4013      	ands	r3, r2
 80013cc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_DMA_Init+0x16c>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6859      	ldr	r1, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f003 031c 	and.w	r3, r3, #28
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	4911      	ldr	r1, [pc, #68]	; (8001428 <HAL_DMA_Init+0x16c>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40020407 	.word	0x40020407
 8001410:	bffdfff8 	.word	0xbffdfff8
 8001414:	cccccccd 	.word	0xcccccccd
 8001418:	40020000 	.word	0x40020000
 800141c:	bffdfbf8 	.word	0xbffdfbf8
 8001420:	40020400 	.word	0x40020400
 8001424:	400200a8 	.word	0x400200a8
 8001428:	400204a8 	.word	0x400204a8

0800142c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001448:	f003 031c 	and.w	r3, r3, #28
 800144c:	2204      	movs	r2, #4
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d026      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x7a>
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	2b00      	cmp	r3, #0
 8001460:	d021      	beq.n	80014a6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0204 	bic.w	r2, r2, #4
 800147e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	f003 021c 	and.w	r2, r3, #28
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	2104      	movs	r1, #4
 800148e:	fa01 f202 	lsl.w	r2, r1, r2
 8001492:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	2b00      	cmp	r3, #0
 800149a:	d071      	beq.n	8001580 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80014a4:	e06c      	b.n	8001580 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f003 031c 	and.w	r3, r3, #28
 80014ae:	2202      	movs	r2, #2
 80014b0:	409a      	lsls	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d02e      	beq.n	8001518 <HAL_DMA_IRQHandler+0xec>
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d029      	beq.n	8001518 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0320 	and.w	r3, r3, #32
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d10b      	bne.n	80014ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 020a 	bic.w	r2, r2, #10
 80014e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f003 021c 	and.w	r2, r3, #28
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2102      	movs	r1, #2
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	2b00      	cmp	r3, #0
 800150c:	d038      	beq.n	8001580 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001516:	e033      	b.n	8001580 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151c:	f003 031c 	and.w	r3, r3, #28
 8001520:	2208      	movs	r2, #8
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d02a      	beq.n	8001582 <HAL_DMA_IRQHandler+0x156>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d025      	beq.n	8001582 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 020e 	bic.w	r2, r2, #14
 8001544:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 021c 	and.w	r2, r3, #28
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2101      	movs	r1, #1
 8001554:	fa01 f202 	lsl.w	r2, r1, r2
 8001558:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001580:	bf00      	nop
 8001582:	bf00      	nop
}
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b087      	sub	sp, #28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159a:	e17f      	b.n	800189c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	4013      	ands	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8171 	beq.w	8001896 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d005      	beq.n	80015cc <HAL_GPIO_Init+0x40>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f003 0201 	and.w	r2, r3, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b03      	cmp	r3, #3
 8001638:	d118      	bne.n	800166c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001640:	2201      	movs	r2, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	f003 0201 	and.w	r2, r3, #1
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b03      	cmp	r3, #3
 8001676:	d017      	beq.n	80016a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	6939      	ldr	r1, [r7, #16]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80ac 	beq.w	8001896 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	4b5f      	ldr	r3, [pc, #380]	; (80018bc <HAL_GPIO_Init+0x330>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001742:	4a5e      	ldr	r2, [pc, #376]	; (80018bc <HAL_GPIO_Init+0x330>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6613      	str	r3, [r2, #96]	; 0x60
 800174a:	4b5c      	ldr	r3, [pc, #368]	; (80018bc <HAL_GPIO_Init+0x330>)
 800174c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001756:	4a5a      	ldr	r2, [pc, #360]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001780:	d025      	beq.n	80017ce <HAL_GPIO_Init+0x242>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4f      	ldr	r2, [pc, #316]	; (80018c4 <HAL_GPIO_Init+0x338>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01f      	beq.n	80017ca <HAL_GPIO_Init+0x23e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4e      	ldr	r2, [pc, #312]	; (80018c8 <HAL_GPIO_Init+0x33c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d019      	beq.n	80017c6 <HAL_GPIO_Init+0x23a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4d      	ldr	r2, [pc, #308]	; (80018cc <HAL_GPIO_Init+0x340>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <HAL_GPIO_Init+0x236>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4c      	ldr	r2, [pc, #304]	; (80018d0 <HAL_GPIO_Init+0x344>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00d      	beq.n	80017be <HAL_GPIO_Init+0x232>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	; (80018d4 <HAL_GPIO_Init+0x348>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d007      	beq.n	80017ba <HAL_GPIO_Init+0x22e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4a      	ldr	r2, [pc, #296]	; (80018d8 <HAL_GPIO_Init+0x34c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_Init+0x22a>
 80017b2:	2306      	movs	r3, #6
 80017b4:	e00c      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017b6:	2307      	movs	r3, #7
 80017b8:	e00a      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017be:	2304      	movs	r3, #4
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x244>
 80017ce:	2300      	movs	r3, #0
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e0:	4937      	ldr	r1, [pc, #220]	; (80018c0 <HAL_GPIO_Init+0x334>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_GPIO_Init+0x350>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_GPIO_Init+0x350>)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_GPIO_Init+0x350>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_GPIO_Init+0x350>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_GPIO_Init+0x350>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	43db      	mvns	r3, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4013      	ands	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_GPIO_Init+0x350>)
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_GPIO_Init+0x350>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_GPIO_Init+0x350>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f47f ae78 	bne.w	800159c <HAL_GPIO_Init+0x10>
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	371c      	adds	r7, #28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40010000 	.word	0x40010000
 80018c4:	48000400 	.word	0x48000400
 80018c8:	48000800 	.word	0x48000800
 80018cc:	48000c00 	.word	0x48000c00
 80018d0:	48001000 	.word	0x48001000
 80018d4:	48001400 	.word	0x48001400
 80018d8:	48001800 	.word	0x48001800
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
 80018ec:	4613      	mov	r3, r2
 80018ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f0:	787b      	ldrb	r3, [r7, #1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f6:	887a      	ldrh	r2, [r7, #2]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018fc:	e002      	b.n	8001904 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018fe:	887a      	ldrh	r2, [r7, #2]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	4013      	ands	r3, r2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe ffa2 	bl	8000878 <HAL_GPIO_EXTI_Callback>
  }
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e081      	b.n	8001a56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d106      	bne.n	800196c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7fe fec0 	bl	80006ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2224      	movs	r2, #36	; 0x24
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f022 0201 	bic.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001990:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e006      	b.n	80019c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d104      	bne.n	80019da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69d9      	ldr	r1, [r3, #28]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
 8001a66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d138      	bne.n	8001ae6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e032      	b.n	8001ae8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2224      	movs	r2, #36	; 0x24
 8001a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 0201 	bic.w	r2, r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e000      	b.n	8001ae8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ae6:	2302      	movs	r3, #2
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b20      	cmp	r3, #32
 8001b08:	d139      	bne.n	8001b7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e033      	b.n	8001b80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2224      	movs	r2, #36	; 0x24
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0201 	orr.w	r2, r2, #1
 8001b68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e000      	b.n	8001b80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b7e:	2302      	movs	r3, #2
  }
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb6:	d130      	bne.n	8001c1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc4:	d038      	beq.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bce:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2232      	movs	r2, #50	; 0x32
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	4a1b      	ldr	r2, [pc, #108]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0c9b      	lsrs	r3, r3, #18
 8001be8:	3301      	adds	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bec:	e002      	b.n	8001bf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c00:	d102      	bne.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f2      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d110      	bne.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e00f      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c26:	d007      	beq.n	8001c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c30:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	431bde83 	.word	0x431bde83

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e3d4      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c66:	4ba1      	ldr	r3, [pc, #644]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c70:	4b9e      	ldr	r3, [pc, #632]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 80e4 	beq.w	8001e50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_RCC_OscConfig+0x4a>
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2b0c      	cmp	r3, #12
 8001c92:	f040 808b 	bne.w	8001dac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	f040 8087 	bne.w	8001dac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c9e:	4b93      	ldr	r3, [pc, #588]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x62>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e3ac      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x7c>
 8001cc6:	4b89      	ldr	r3, [pc, #548]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cce:	e005      	b.n	8001cdc <HAL_RCC_OscConfig+0x88>
 8001cd0:	4b86      	ldr	r3, [pc, #536]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd6:	091b      	lsrs	r3, r3, #4
 8001cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d223      	bcs.n	8001d28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fd41 	bl	800276c <RCC_SetFlashLatencyFromMSIRange>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e38d      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf4:	4b7d      	ldr	r3, [pc, #500]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a7c      	ldr	r2, [pc, #496]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b7a      	ldr	r3, [pc, #488]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4977      	ldr	r1, [pc, #476]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d12:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	4972      	ldr	r1, [pc, #456]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
 8001d26:	e025      	b.n	8001d74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d28:	4b70      	ldr	r3, [pc, #448]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6f      	ldr	r2, [pc, #444]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d2e:	f043 0308 	orr.w	r3, r3, #8
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b6d      	ldr	r3, [pc, #436]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	496a      	ldr	r1, [pc, #424]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d46:	4b69      	ldr	r3, [pc, #420]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	4965      	ldr	r1, [pc, #404]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fd01 	bl	800276c <RCC_SetFlashLatencyFromMSIRange>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e34d      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d74:	f000 fc36 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	495a      	ldr	r1, [pc, #360]	; (8001ef0 <HAL_RCC_OscConfig+0x29c>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d90:	4a58      	ldr	r2, [pc, #352]	; (8001ef4 <HAL_RCC_OscConfig+0x2a0>)
 8001d92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d94:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <HAL_RCC_OscConfig+0x2a4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff f837 	bl	8000e0c <HAL_InitTick>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d052      	beq.n	8001e4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	e331      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d032      	beq.n	8001e1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001db4:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a4c      	ldr	r2, [pc, #304]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f874 	bl	8000eac <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc8:	f7ff f870 	bl	8000eac <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e31a      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a40      	ldr	r2, [pc, #256]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	493b      	ldr	r1, [pc, #236]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e04:	4b39      	ldr	r3, [pc, #228]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	4936      	ldr	r1, [pc, #216]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	e01a      	b.n	8001e50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a33      	ldr	r2, [pc, #204]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e26:	f7ff f841 	bl	8000eac <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f83d 	bl	8000eac <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e2e7      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x1da>
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d074      	beq.n	8001f46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d005      	beq.n	8001e6e <HAL_RCC_OscConfig+0x21a>
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	d10e      	bne.n	8001e86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d10b      	bne.n	8001e86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d064      	beq.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d160      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e2c4      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x24a>
 8001e90:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e01d      	b.n	8001eda <HAL_RCC_OscConfig+0x286>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x26e>
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0f      	ldr	r2, [pc, #60]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a0c      	ldr	r2, [pc, #48]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0x286>
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a09      	ldr	r2, [pc, #36]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_RCC_OscConfig+0x298>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7fe ffe3 	bl	8000eac <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ee8:	e011      	b.n	8001f0e <HAL_RCC_OscConfig+0x2ba>
 8001eea:	bf00      	nop
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	080049d8 	.word	0x080049d8
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7fe ffd6 	bl	8000eac <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	; 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e280      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f0e:	4baf      	ldr	r3, [pc, #700]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x2a8>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7fe ffc6 	bl	8000eac <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7fe ffc2 	bl	8000eac <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	; 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e26c      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f36:	4ba5      	ldr	r3, [pc, #660]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2d0>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d060      	beq.n	8002014 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_OscConfig+0x310>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b0c      	cmp	r3, #12
 8001f5c:	d119      	bne.n	8001f92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d116      	bne.n	8001f92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	4b99      	ldr	r3, [pc, #612]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_OscConfig+0x328>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e249      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b93      	ldr	r3, [pc, #588]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	4990      	ldr	r1, [pc, #576]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f90:	e040      	b.n	8002014 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d023      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f9a:	4b8c      	ldr	r3, [pc, #560]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a8b      	ldr	r2, [pc, #556]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa6:	f7fe ff81 	bl	8000eac <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fae:	f7fe ff7d 	bl	8000eac <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e227      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc0:	4b82      	ldr	r3, [pc, #520]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fcc:	4b7f      	ldr	r3, [pc, #508]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	497c      	ldr	r1, [pc, #496]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
 8001fe0:	e018      	b.n	8002014 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe2:	4b7a      	ldr	r3, [pc, #488]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a79      	ldr	r2, [pc, #484]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8001fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fee:	f7fe ff5d 	bl	8000eac <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff6:	f7fe ff59 	bl	8000eac <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e203      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002008:	4b70      	ldr	r3, [pc, #448]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f0      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d03c      	beq.n	800209a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01c      	beq.n	8002062 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002028:	4b68      	ldr	r3, [pc, #416]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800202a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202e:	4a67      	ldr	r2, [pc, #412]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002038:	f7fe ff38 	bl	8000eac <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002040:	f7fe ff34 	bl	8000eac <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e1de      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002052:	4b5e      	ldr	r3, [pc, #376]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCC_OscConfig+0x3ec>
 8002060:	e01b      	b.n	800209a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002062:	4b5a      	ldr	r3, [pc, #360]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002072:	f7fe ff1b 	bl	8000eac <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207a:	f7fe ff17 	bl	8000eac <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e1c1      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800208e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1ef      	bne.n	800207a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80a6 	beq.w	80021f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020ac:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10d      	bne.n	80020d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b44      	ldr	r3, [pc, #272]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	4a43      	ldr	r2, [pc, #268]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	6593      	str	r3, [r2, #88]	; 0x58
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d4:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <HAL_RCC_OscConfig+0x57c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d118      	bne.n	8002112 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x57c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3a      	ldr	r2, [pc, #232]	; (80021d0 <HAL_RCC_OscConfig+0x57c>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ec:	f7fe fede 	bl	8000eac <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe feda 	bl	8000eac <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e184      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x57c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_RCC_OscConfig+0x4d8>
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800212a:	e024      	b.n	8002176 <HAL_RCC_OscConfig+0x522>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b05      	cmp	r3, #5
 8002132:	d110      	bne.n	8002156 <HAL_RCC_OscConfig+0x502>
 8002134:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	4a24      	ldr	r2, [pc, #144]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002144:	4b21      	ldr	r3, [pc, #132]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a20      	ldr	r2, [pc, #128]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002154:	e00f      	b.n	8002176 <HAL_RCC_OscConfig+0x522>
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	4a1b      	ldr	r2, [pc, #108]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002166:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800216e:	f023 0304 	bic.w	r3, r3, #4
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d016      	beq.n	80021ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7fe fe95 	bl	8000eac <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002184:	e00a      	b.n	800219c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002186:	f7fe fe91 	bl	8000eac <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	f241 3288 	movw	r2, #5000	; 0x1388
 8002194:	4293      	cmp	r3, r2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e139      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_OscConfig+0x578>)
 800219e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ed      	beq.n	8002186 <HAL_RCC_OscConfig+0x532>
 80021aa:	e01a      	b.n	80021e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7fe fe7e 	bl	8000eac <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b2:	e00f      	b.n	80021d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe fe7a 	bl	8000eac <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d906      	bls.n	80021d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e122      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
 80021ca:	bf00      	nop
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d4:	4b90      	ldr	r3, [pc, #576]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e8      	bne.n	80021b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e2:	7ffb      	ldrb	r3, [r7, #31]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e8:	4b8b      	ldr	r3, [pc, #556]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80021ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ec:	4a8a      	ldr	r2, [pc, #552]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80021ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8108 	beq.w	800240e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	2b02      	cmp	r3, #2
 8002204:	f040 80d0 	bne.w	80023a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002208:	4b83      	ldr	r3, [pc, #524]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	429a      	cmp	r2, r3
 800221a:	d130      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	3b01      	subs	r3, #1
 8002228:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d127      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002238:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d11f      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002248:	2a07      	cmp	r2, #7
 800224a:	bf14      	ite	ne
 800224c:	2201      	movne	r2, #1
 800224e:	2200      	moveq	r2, #0
 8002250:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002252:	4293      	cmp	r3, r2
 8002254:	d113      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	3b01      	subs	r3, #1
 8002264:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d109      	bne.n	800227e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	3b01      	subs	r3, #1
 8002278:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d06e      	beq.n	800235c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	d069      	beq.n	8002358 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002284:	4b64      	ldr	r3, [pc, #400]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d105      	bne.n	800229c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002290:	4b61      	ldr	r3, [pc, #388]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0b7      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022a0:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a5c      	ldr	r2, [pc, #368]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80022a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022ac:	f7fe fdfe 	bl	8000eac <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b4:	f7fe fdfa 	bl	8000eac <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e0a4      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c6:	4b54      	ldr	r3, [pc, #336]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_RCC_OscConfig+0x7c8>)
 80022d8:	4013      	ands	r3, r2
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022e2:	3a01      	subs	r2, #1
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	4311      	orrs	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022ec:	0212      	lsls	r2, r2, #8
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022f4:	0852      	lsrs	r2, r2, #1
 80022f6:	3a01      	subs	r2, #1
 80022f8:	0552      	lsls	r2, r2, #21
 80022fa:	4311      	orrs	r1, r2
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002300:	0852      	lsrs	r2, r2, #1
 8002302:	3a01      	subs	r2, #1
 8002304:	0652      	lsls	r2, r2, #25
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800230c:	0912      	lsrs	r2, r2, #4
 800230e:	0452      	lsls	r2, r2, #17
 8002310:	430a      	orrs	r2, r1
 8002312:	4941      	ldr	r1, [pc, #260]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002318:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a3e      	ldr	r2, [pc, #248]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002324:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4a3b      	ldr	r2, [pc, #236]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002330:	f7fe fdbc 	bl	8000eac <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe fdb8 	bl	8000eac <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e062      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	4b33      	ldr	r3, [pc, #204]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002356:	e05a      	b.n	800240e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e059      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235c:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d152      	bne.n	800240e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002368:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a2a      	ldr	r2, [pc, #168]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800236e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002372:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800237a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002380:	f7fe fd94 	bl	8000eac <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fd90 	bl	8000eac <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e03a      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800239a:	4b1f      	ldr	r3, [pc, #124]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x734>
 80023a6:	e032      	b.n	800240e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	d02d      	beq.n	800240a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80023c6:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4a13      	ldr	r2, [pc, #76]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023cc:	f023 0303 	bic.w	r3, r3, #3
 80023d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e2:	f7fe fd63 	bl	8000eac <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ea:	f7fe fd5f 	bl	8000eac <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e009      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_RCC_OscConfig+0x7c4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x796>
 8002408:	e001      	b.n	800240e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000
 800241c:	f99d808c 	.word	0xf99d808c

08002420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0c8      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002434:	4b66      	ldr	r3, [pc, #408]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0307 	and.w	r3, r3, #7
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d910      	bls.n	8002464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002442:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 0207 	bic.w	r2, r3, #7
 800244a:	4961      	ldr	r1, [pc, #388]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0b0      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d04c      	beq.n	800250a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b03      	cmp	r3, #3
 8002476:	d107      	bne.n	8002488 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002478:	4b56      	ldr	r3, [pc, #344]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d121      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e09e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d107      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002490:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e092      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d107      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a8:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e086      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b8:	4b46      	ldr	r3, [pc, #280]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e07e      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c8:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 0203 	bic.w	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	493f      	ldr	r1, [pc, #252]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024da:	f7fe fce7 	bl	8000eac <HAL_GetTick>
 80024de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e2:	f7fe fce3 	bl	8000eac <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e066      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 020c 	and.w	r2, r3, #12
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	429a      	cmp	r2, r3
 8002508:	d1eb      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	492c      	ldr	r1, [pc, #176]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d210      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 0207 	bic.w	r2, r3, #7
 800253e:	4924      	ldr	r1, [pc, #144]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_RCC_ClockConfig+0x1b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e036      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4918      	ldr	r1, [pc, #96]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d009      	beq.n	8002596 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002582:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	4910      	ldr	r1, [pc, #64]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002596:	f000 f825 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800259a:	4602      	mov	r2, r0
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_RCC_ClockConfig+0x1b4>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	490c      	ldr	r1, [pc, #48]	; (80025d8 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	5ccb      	ldrb	r3, [r1, r3]
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fc26 	bl	8000e0c <HAL_InitTick>
 80025c0:	4603      	mov	r3, r0
 80025c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80025c4:	7afb      	ldrb	r3, [r7, #11]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40022000 	.word	0x40022000
 80025d4:	40021000 	.word	0x40021000
 80025d8:	080049d8 	.word	0x080049d8
 80025dc:	20000000 	.word	0x20000000
 80025e0:	20000004 	.word	0x20000004

080025e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b3e      	ldr	r3, [pc, #248]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fc:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_GetSysClockFreq+0x34>
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	2b0c      	cmp	r3, #12
 8002610:	d121      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d11e      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002618:	4b34      	ldr	r3, [pc, #208]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d107      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002624:	4b31      	ldr	r3, [pc, #196]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	e005      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002640:	4a2b      	ldr	r2, [pc, #172]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002648:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002654:	e00a      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b04      	cmp	r3, #4
 800265a:	d102      	bne.n	8002662 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800265e:	61bb      	str	r3, [r7, #24]
 8002660:	e004      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b08      	cmp	r3, #8
 8002666:	d101      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800266a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d134      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002672:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0xa6>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d003      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0xac>
 8002688:	e005      	b.n	8002696 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800268a:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800268c:	617b      	str	r3, [r7, #20]
      break;
 800268e:	e005      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002692:	617b      	str	r3, [r7, #20]
      break;
 8002694:	e002      	b.n	800269c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	617b      	str	r3, [r7, #20]
      break;
 800269a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	3301      	adds	r3, #1
 80026a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	fb02 f203 	mul.w	r2, r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <HAL_RCC_GetSysClockFreq+0x108>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	0e5b      	lsrs	r3, r3, #25
 80026c8:	f003 0303 	and.w	r3, r3, #3
 80026cc:	3301      	adds	r3, #1
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026dc:	69bb      	ldr	r3, [r7, #24]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	; 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	080049f0 	.word	0x080049f0
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200

080026fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002700:	4b03      	ldr	r3, [pc, #12]	; (8002710 <HAL_RCC_GetHCLKFreq+0x14>)
 8002702:	681b      	ldr	r3, [r3, #0]
}
 8002704:	4618      	mov	r0, r3
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002718:	f7ff fff0 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCC_GetPCLK1Freq+0x28>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	080049e8 	.word	0x080049e8

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002744:	f7ff ffda 	bl	80026fc <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4904      	ldr	r1, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	080049e8 	.word	0x080049e8

0800276c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002774:	2300      	movs	r3, #0
 8002776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002778:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002784:	f7ff fa02 	bl	8001b8c <HAL_PWREx_GetVoltageRange>
 8002788:	6178      	str	r0, [r7, #20]
 800278a:	e014      	b.n	80027b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	4b25      	ldr	r3, [pc, #148]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002790:	4a24      	ldr	r2, [pc, #144]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002796:	6593      	str	r3, [r2, #88]	; 0x58
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027a4:	f7ff f9f2 	bl	8001b8c <HAL_PWREx_GetVoltageRange>
 80027a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027aa:	4b1e      	ldr	r3, [pc, #120]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	4a1d      	ldr	r2, [pc, #116]	; (8002824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027bc:	d10b      	bne.n	80027d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d919      	bls.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2ba0      	cmp	r3, #160	; 0xa0
 80027c8:	d902      	bls.n	80027d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027ca:	2302      	movs	r3, #2
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	e013      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	e010      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b80      	cmp	r3, #128	; 0x80
 80027da:	d902      	bls.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027dc:	2303      	movs	r3, #3
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	e00a      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d102      	bne.n	80027ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027e8:	2302      	movs	r3, #2
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	e004      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b70      	cmp	r3, #112	; 0x70
 80027f2:	d101      	bne.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027f4:	2301      	movs	r3, #1
 80027f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 0207 	bic.w	r2, r3, #7
 8002800:	4909      	ldr	r1, [pc, #36]	; (8002828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	429a      	cmp	r2, r3
 8002814:	d001      	beq.n	800281a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	40022000 	.word	0x40022000

0800282c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002834:	2300      	movs	r3, #0
 8002836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002838:	2300      	movs	r3, #0
 800283a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002844:	2b00      	cmp	r3, #0
 8002846:	d041      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800284c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002850:	d02a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002852:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002856:	d824      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002858:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800285c:	d008      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800285e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002862:	d81e      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286c:	d010      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800286e:	e018      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002870:	4b86      	ldr	r3, [pc, #536]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a85      	ldr	r2, [pc, #532]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800287c:	e015      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3304      	adds	r3, #4
 8002882:	2100      	movs	r1, #0
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fabb 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 800288a:	4603      	mov	r3, r0
 800288c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800288e:	e00c      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3320      	adds	r3, #32
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fba6 	bl	8002fe8 <RCCEx_PLLSAI2_Config>
 800289c:	4603      	mov	r3, r0
 800289e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028a0:	e003      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	74fb      	strb	r3, [r7, #19]
      break;
 80028a6:	e000      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028aa:	7cfb      	ldrb	r3, [r7, #19]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b0:	4b76      	ldr	r3, [pc, #472]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028be:	4973      	ldr	r1, [pc, #460]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028c6:	e001      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d041      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028e0:	d02a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028e6:	d824      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028ec:	d008      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f2:	d81e      	bhi.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d010      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028fe:	e018      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002900:	4b62      	ldr	r3, [pc, #392]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4a61      	ldr	r2, [pc, #388]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800290c:	e015      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3304      	adds	r3, #4
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f000 fa73 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 800291a:	4603      	mov	r3, r0
 800291c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800291e:	e00c      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3320      	adds	r3, #32
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fb5e 	bl	8002fe8 <RCCEx_PLLSAI2_Config>
 800292c:	4603      	mov	r3, r0
 800292e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002930:	e003      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	74fb      	strb	r3, [r7, #19]
      break;
 8002936:	e000      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800293a:	7cfb      	ldrb	r3, [r7, #19]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10b      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002940:	4b52      	ldr	r3, [pc, #328]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800294e:	494f      	ldr	r1, [pc, #316]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002956:	e001      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80a0 	beq.w	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800297e:	2300      	movs	r3, #0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	4a40      	ldr	r2, [pc, #256]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298e:	6593      	str	r3, [r2, #88]	; 0x58
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800299c:	2301      	movs	r3, #1
 800299e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029a0:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a3a      	ldr	r2, [pc, #232]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ac:	f7fe fa7e 	bl	8000eac <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029b2:	e009      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b4:	f7fe fa7a 	bl	8000eac <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d902      	bls.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	74fb      	strb	r3, [r7, #19]
        break;
 80029c6:	e005      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029c8:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0ef      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029d4:	7cfb      	ldrb	r3, [r7, #19]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d15c      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029da:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01f      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d019      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a04:	4b21      	ldr	r3, [pc, #132]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	4a20      	ldr	r2, [pc, #128]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d016      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a36:	f7fe fa39 	bl	8000eac <HAL_GetTick>
 8002a3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3c:	e00b      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f7fe fa35 	bl	8000eac <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d902      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	74fb      	strb	r3, [r7, #19]
            break;
 8002a54:	e006      	b.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0ec      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a64:	7cfb      	ldrb	r3, [r7, #19]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10c      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7a:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a82:	e009      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
 8002a88:	e006      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a98:	7c7b      	ldrb	r3, [r7, #17]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d105      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9e:	4b9e      	ldr	r3, [pc, #632]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa2:	4a9d      	ldr	r2, [pc, #628]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ab6:	4b98      	ldr	r3, [pc, #608]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abc:	f023 0203 	bic.w	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	4994      	ldr	r1, [pc, #592]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d00a      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ad8:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 020c 	bic.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae6:	498c      	ldr	r1, [pc, #560]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002afa:	4b87      	ldr	r3, [pc, #540]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	4983      	ldr	r1, [pc, #524]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0308 	and.w	r3, r3, #8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b1c:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	497b      	ldr	r1, [pc, #492]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b3e:	4b76      	ldr	r3, [pc, #472]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4c:	4972      	ldr	r1, [pc, #456]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b60:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6e:	496a      	ldr	r1, [pc, #424]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b82:	4b65      	ldr	r3, [pc, #404]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	4961      	ldr	r1, [pc, #388]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ba4:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb2:	4959      	ldr	r1, [pc, #356]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc6:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	4950      	ldr	r1, [pc, #320]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002be8:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	4948      	ldr	r1, [pc, #288]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c18:	493f      	ldr	r1, [pc, #252]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d028      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c3a:	4937      	ldr	r1, [pc, #220]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c56:	60d3      	str	r3, [r2, #12]
 8002c58:	e011      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3304      	adds	r3, #4
 8002c68:	2101      	movs	r1, #1
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f8c8 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002c70:	4603      	mov	r3, r0
 8002c72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d028      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	491f      	ldr	r1, [pc, #124]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a1a      	ldr	r2, [pc, #104]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb4:	60d3      	str	r3, [r2, #12]
 8002cb6:	e011      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f899 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd2:	7cfb      	ldrb	r3, [r7, #19]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d02b      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	4908      	ldr	r1, [pc, #32]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d06:	d109      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	4a02      	ldr	r2, [pc, #8]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d12:	60d3      	str	r3, [r2, #12]
 8002d14:	e014      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 f867 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002d32:	4603      	mov	r3, r0
 8002d34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d3c:	7cfb      	ldrb	r3, [r7, #19]
 8002d3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d02f      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d5a:	4928      	ldr	r1, [pc, #160]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6a:	d10d      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	2102      	movs	r1, #2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 f844 	bl	8002e00 <RCCEx_PLLSAI1_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d014      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
 8002d84:	74bb      	strb	r3, [r7, #18]
 8002d86:	e011      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d90:	d10c      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3320      	adds	r3, #32
 8002d96:	2102      	movs	r1, #2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 f925 	bl	8002fe8 <RCCEx_PLLSAI2_Config>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002da2:	7cfb      	ldrb	r3, [r7, #19]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002db8:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc6:	490d      	ldr	r1, [pc, #52]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dea:	4904      	ldr	r1, [pc, #16]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002df2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000

08002e00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e0e:	4b75      	ldr	r3, [pc, #468]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d018      	beq.n	8002e4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e1a:	4b72      	ldr	r3, [pc, #456]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0203 	and.w	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d10d      	bne.n	8002e46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e32:	4b6c      	ldr	r3, [pc, #432]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	091b      	lsrs	r3, r3, #4
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
       ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d047      	beq.n	8002ed6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
 8002e4a:	e044      	b.n	8002ed6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d018      	beq.n	8002e86 <RCCEx_PLLSAI1_Config+0x86>
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d825      	bhi.n	8002ea4 <RCCEx_PLLSAI1_Config+0xa4>
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d002      	beq.n	8002e62 <RCCEx_PLLSAI1_Config+0x62>
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d009      	beq.n	8002e74 <RCCEx_PLLSAI1_Config+0x74>
 8002e60:	e020      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e62:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d11d      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e72:	e01a      	b.n	8002eaa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e74:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d116      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e84:	e013      	b.n	8002eae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e86:	4b57      	ldr	r3, [pc, #348]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10f      	bne.n	8002eb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e92:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ea2:	e006      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea8:	e004      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e002      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e000      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10d      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eba:	4b4a      	ldr	r3, [pc, #296]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6819      	ldr	r1, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	4944      	ldr	r1, [pc, #272]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d17d      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002edc:	4b41      	ldr	r3, [pc, #260]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a40      	ldr	r2, [pc, #256]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee8:	f7fd ffe0 	bl	8000eac <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eee:	e009      	b.n	8002f04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ef0:	f7fd ffdc 	bl	8000eac <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d902      	bls.n	8002f04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	73fb      	strb	r3, [r7, #15]
        break;
 8002f02:	e005      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f04:	4b37      	ldr	r3, [pc, #220]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ef      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d160      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d111      	bne.n	8002f40 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1c:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6892      	ldr	r2, [r2, #8]
 8002f2c:	0211      	lsls	r1, r2, #8
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68d2      	ldr	r2, [r2, #12]
 8002f32:	0912      	lsrs	r2, r2, #4
 8002f34:	0452      	lsls	r2, r2, #17
 8002f36:	430a      	orrs	r2, r1
 8002f38:	492a      	ldr	r1, [pc, #168]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	610b      	str	r3, [r1, #16]
 8002f3e:	e027      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d112      	bne.n	8002f6c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f46:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6892      	ldr	r2, [r2, #8]
 8002f56:	0211      	lsls	r1, r2, #8
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6912      	ldr	r2, [r2, #16]
 8002f5c:	0852      	lsrs	r2, r2, #1
 8002f5e:	3a01      	subs	r2, #1
 8002f60:	0552      	lsls	r2, r2, #21
 8002f62:	430a      	orrs	r2, r1
 8002f64:	491f      	ldr	r1, [pc, #124]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	610b      	str	r3, [r1, #16]
 8002f6a:	e011      	b.n	8002f90 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f6c:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6892      	ldr	r2, [r2, #8]
 8002f7c:	0211      	lsls	r1, r2, #8
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6952      	ldr	r2, [r2, #20]
 8002f82:	0852      	lsrs	r2, r2, #1
 8002f84:	3a01      	subs	r2, #1
 8002f86:	0652      	lsls	r2, r2, #25
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f90:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7fd ff86 	bl	8000eac <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fa2:	e009      	b.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa4:	f7fd ff82 	bl	8000eac <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d902      	bls.n	8002fb8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	73fb      	strb	r3, [r7, #15]
          break;
 8002fb6:	e005      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ef      	beq.n	8002fa4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fca:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	4904      	ldr	r1, [pc, #16]	; (8002fe4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40021000 	.word	0x40021000

08002fe8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ff6:	4b6a      	ldr	r3, [pc, #424]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003002:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0203 	and.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d10d      	bne.n	800302e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
       ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800301a:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
       ||
 800302a:	429a      	cmp	r2, r3
 800302c:	d047      	beq.n	80030be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	e044      	b.n	80030be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d018      	beq.n	800306e <RCCEx_PLLSAI2_Config+0x86>
 800303c:	2b03      	cmp	r3, #3
 800303e:	d825      	bhi.n	800308c <RCCEx_PLLSAI2_Config+0xa4>
 8003040:	2b01      	cmp	r3, #1
 8003042:	d002      	beq.n	800304a <RCCEx_PLLSAI2_Config+0x62>
 8003044:	2b02      	cmp	r3, #2
 8003046:	d009      	beq.n	800305c <RCCEx_PLLSAI2_Config+0x74>
 8003048:	e020      	b.n	800308c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800304a:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11d      	bne.n	8003092 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305a:	e01a      	b.n	8003092 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d116      	bne.n	8003096 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800306c:	e013      	b.n	8003096 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800306e:	4b4c      	ldr	r3, [pc, #304]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10f      	bne.n	800309a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800307a:	4b49      	ldr	r3, [pc, #292]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d109      	bne.n	800309a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800308a:	e006      	b.n	800309a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
      break;
 8003090:	e004      	b.n	800309c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003092:	bf00      	nop
 8003094:	e002      	b.n	800309c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003096:	bf00      	nop
 8003098:	e000      	b.n	800309c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800309a:	bf00      	nop
    }

    if(status == HAL_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030a2:	4b3f      	ldr	r3, [pc, #252]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	430b      	orrs	r3, r1
 80030b8:	4939      	ldr	r1, [pc, #228]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d167      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030c4:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a35      	ldr	r2, [pc, #212]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d0:	f7fd feec 	bl	8000eac <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030d6:	e009      	b.n	80030ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030d8:	f7fd fee8 	bl	8000eac <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d902      	bls.n	80030ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	73fb      	strb	r3, [r7, #15]
        break;
 80030ea:	e005      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030ec:	4b2c      	ldr	r3, [pc, #176]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1ef      	bne.n	80030d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d14a      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d111      	bne.n	8003128 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003104:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800310c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6892      	ldr	r2, [r2, #8]
 8003114:	0211      	lsls	r1, r2, #8
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68d2      	ldr	r2, [r2, #12]
 800311a:	0912      	lsrs	r2, r2, #4
 800311c:	0452      	lsls	r2, r2, #17
 800311e:	430a      	orrs	r2, r1
 8003120:	491f      	ldr	r1, [pc, #124]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	4313      	orrs	r3, r2
 8003124:	614b      	str	r3, [r1, #20]
 8003126:	e011      	b.n	800314c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003128:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003130:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6892      	ldr	r2, [r2, #8]
 8003138:	0211      	lsls	r1, r2, #8
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6912      	ldr	r2, [r2, #16]
 800313e:	0852      	lsrs	r2, r2, #1
 8003140:	3a01      	subs	r2, #1
 8003142:	0652      	lsls	r2, r2, #25
 8003144:	430a      	orrs	r2, r1
 8003146:	4916      	ldr	r1, [pc, #88]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003148:	4313      	orrs	r3, r2
 800314a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a13      	ldr	r2, [pc, #76]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003156:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fd fea8 	bl	8000eac <HAL_GetTick>
 800315c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800315e:	e009      	b.n	8003174 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003160:	f7fd fea4 	bl	8000eac <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	73fb      	strb	r3, [r7, #15]
          break;
 8003172:	e005      	b.n	8003180 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	4904      	ldr	r1, [pc, #16]	; (80031a0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003190:	4313      	orrs	r3, r2
 8003192:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d06c      	beq.n	8003290 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7fd fbf8 	bl	80009c0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2202      	movs	r2, #2
 80031d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	22ca      	movs	r2, #202	; 0xca
 80031de:	625a      	str	r2, [r3, #36]	; 0x24
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2253      	movs	r2, #83	; 0x53
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f9a0 	bl	800352e <RTC_EnterInitMode>
 80031ee:	4603      	mov	r3, r0
 80031f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d14b      	bne.n	8003290 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800320a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6899      	ldr	r1, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685a      	ldr	r2, [r3, #4]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68d2      	ldr	r2, [r2, #12]
 8003232:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6919      	ldr	r1, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	041a      	lsls	r2, r3, #16
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f9a3 	bl	8003594 <RTC_ExitInitMode>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003252:	7bfb      	ldrb	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d11b      	bne.n	8003290 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0203 	bic.w	r2, r2, #3
 8003266:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	22ff      	movs	r2, #255	; 0xff
 8003286:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800329a:	b590      	push	{r4, r7, lr}
 800329c:	b087      	sub	sp, #28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_RTC_SetTime+0x1a>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e08b      	b.n	80033cc <HAL_RTC_SetTime+0x132>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2202      	movs	r2, #2
 80032c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	22ca      	movs	r2, #202	; 0xca
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2253      	movs	r2, #83	; 0x53
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f92a 	bl	800352e <RTC_EnterInitMode>
 80032da:	4603      	mov	r3, r0
 80032dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d163      	bne.n	80033ac <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d126      	bne.n	8003338 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d102      	bne.n	80032fe <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2200      	movs	r2, #0
 80032fc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f984 	bl	8003610 <RTC_ByteToBcd2>
 8003308:	4603      	mov	r3, r0
 800330a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	785b      	ldrb	r3, [r3, #1]
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f97d 	bl	8003610 <RTC_ByteToBcd2>
 8003316:	4603      	mov	r3, r0
 8003318:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800331a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	789b      	ldrb	r3, [r3, #2]
 8003320:	4618      	mov	r0, r3
 8003322:	f000 f975 	bl	8003610 <RTC_ByteToBcd2>
 8003326:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003328:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	78db      	ldrb	r3, [r3, #3]
 8003330:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e018      	b.n	800336a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d102      	bne.n	800334c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	785b      	ldrb	r3, [r3, #1]
 8003356:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003358:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800335e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	78db      	ldrb	r3, [r3, #3]
 8003364:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003374:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003378:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003388:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	431a      	orrs	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f8f6 	bl	8003594 <RTC_ExitInitMode>
 80033a8:	4603      	mov	r3, r0
 80033aa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80033b4:	7cfb      	ldrb	r3, [r7, #19]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	371c      	adds	r7, #28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd90      	pop	{r4, r7, pc}

080033d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d101      	bne.n	80033ee <HAL_RTC_SetDate+0x1a>
 80033ea:	2302      	movs	r3, #2
 80033ec:	e075      	b.n	80034da <HAL_RTC_SetDate+0x106>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2202      	movs	r2, #2
 80033fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10e      	bne.n	8003422 <HAL_RTC_SetDate+0x4e>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	f003 0310 	and.w	r3, r3, #16
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	785b      	ldrb	r3, [r3, #1]
 8003414:	f023 0310 	bic.w	r3, r3, #16
 8003418:	b2db      	uxtb	r3, r3
 800341a:	330a      	adds	r3, #10
 800341c:	b2da      	uxtb	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d11c      	bne.n	8003462 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	78db      	ldrb	r3, [r3, #3]
 800342c:	4618      	mov	r0, r3
 800342e:	f000 f8ef 	bl	8003610 <RTC_ByteToBcd2>
 8003432:	4603      	mov	r3, r0
 8003434:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	785b      	ldrb	r3, [r3, #1]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 f8e8 	bl	8003610 <RTC_ByteToBcd2>
 8003440:	4603      	mov	r3, r0
 8003442:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003444:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	789b      	ldrb	r3, [r3, #2]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f8e0 	bl	8003610 <RTC_ByteToBcd2>
 8003450:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003452:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	e00e      	b.n	8003480 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	78db      	ldrb	r3, [r3, #3]
 8003466:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800346e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003474:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	22ca      	movs	r2, #202	; 0xca
 8003486:	625a      	str	r2, [r3, #36]	; 0x24
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2253      	movs	r2, #83	; 0x53
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f84c 	bl	800352e <RTC_EnterInitMode>
 8003496:	4603      	mov	r3, r0
 8003498:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10c      	bne.n	80034ba <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80034ae:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f86f 	bl	8003594 <RTC_ExitInitMode>
 80034b6:	4603      	mov	r3, r0
 80034b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	22ff      	movs	r2, #255	; 0xff
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	371c      	adds	r7, #28
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd90      	pop	{r4, r7, pc}

080034e2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034f8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80034fa:	f7fd fcd7 	bl	8000eac <HAL_GetTick>
 80034fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003500:	e009      	b.n	8003516 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003502:	f7fd fcd3 	bl	8000eac <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003510:	d901      	bls.n	8003516 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e007      	b.n	8003526 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0ee      	beq.n	8003502 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d120      	bne.n	800358a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f04f 32ff 	mov.w	r2, #4294967295
 8003550:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003552:	f7fd fcab 	bl	8000eac <HAL_GetTick>
 8003556:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003558:	e00d      	b.n	8003576 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800355a:	f7fd fca7 	bl	8000eac <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003568:	d905      	bls.n	8003576 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2203      	movs	r2, #3
 8003572:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <RTC_EnterInitMode+0x5c>
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d1e7      	bne.n	800355a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800358a:	7bfb      	ldrb	r3, [r7, #15]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800359c:	2300      	movs	r3, #0
 800359e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80035a0:	4b1a      	ldr	r3, [pc, #104]	; (800360c <RTC_ExitInitMode+0x78>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4a19      	ldr	r2, [pc, #100]	; (800360c <RTC_ExitInitMode+0x78>)
 80035a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80035ac:	4b17      	ldr	r3, [pc, #92]	; (800360c <RTC_ExitInitMode+0x78>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10c      	bne.n	80035d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff92 	bl	80034e2 <HAL_RTC_WaitForSynchro>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01e      	beq.n	8003602 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2203      	movs	r2, #3
 80035c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	73fb      	strb	r3, [r7, #15]
 80035d0:	e017      	b.n	8003602 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <RTC_ExitInitMode+0x78>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4a0d      	ldr	r2, [pc, #52]	; (800360c <RTC_ExitInitMode+0x78>)
 80035d8:	f023 0320 	bic.w	r3, r3, #32
 80035dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff ff7f 	bl	80034e2 <HAL_RTC_WaitForSynchro>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2203      	movs	r2, #3
 80035ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <RTC_ExitInitMode+0x78>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4a04      	ldr	r2, [pc, #16]	; (800360c <RTC_ExitInitMode+0x78>)
 80035fc:	f043 0320 	orr.w	r3, r3, #32
 8003600:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40002800 	.word	0x40002800

08003610 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003622:	e005      	b.n	8003630 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800362a:	7afb      	ldrb	r3, [r7, #11]
 800362c:	3b0a      	subs	r3, #10
 800362e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003630:	7afb      	ldrb	r3, [r7, #11]
 8003632:	2b09      	cmp	r3, #9
 8003634:	d8f6      	bhi.n	8003624 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	b2da      	uxtb	r2, r3
 800363e:	7afb      	ldrb	r3, [r7, #11]
 8003640:	4313      	orrs	r3, r2
 8003642:	b2db      	uxtb	r3, r3
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e049      	b.n	80036f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b00      	cmp	r3, #0
 800366c:	d106      	bne.n	800367c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7fd fa9e 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3304      	adds	r3, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4610      	mov	r0, r2
 8003690:	f000 fa50 	bl	8003b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b02      	cmp	r3, #2
 8003712:	d122      	bne.n	800375a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d11b      	bne.n	800375a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f06f 0202 	mvn.w	r2, #2
 800372a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f9d8 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 8003746:	e005      	b.n	8003754 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f9ca 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f9db 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b04      	cmp	r3, #4
 8003766:	d122      	bne.n	80037ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b04      	cmp	r3, #4
 8003774:	d11b      	bne.n	80037ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f06f 0204 	mvn.w	r2, #4
 800377e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2202      	movs	r2, #2
 8003784:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f9ae 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 800379a:	e005      	b.n	80037a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f9a0 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9b1 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d122      	bne.n	8003802 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d11b      	bne.n	8003802 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0208 	mvn.w	r2, #8
 80037d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f984 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 80037ee:	e005      	b.n	80037fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f976 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f987 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b10      	cmp	r3, #16
 800380e:	d122      	bne.n	8003856 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b10      	cmp	r3, #16
 800381c:	d11b      	bne.n	8003856 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f06f 0210 	mvn.w	r2, #16
 8003826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2208      	movs	r2, #8
 800382c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	69db      	ldr	r3, [r3, #28]
 8003834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f95a 	bl	8003af6 <HAL_TIM_IC_CaptureCallback>
 8003842:	e005      	b.n	8003850 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f94c 	bl	8003ae2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f95d 	bl	8003b0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d10e      	bne.n	8003882 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d107      	bne.n	8003882 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f06f 0201 	mvn.w	r2, #1
 800387a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f926 	bl	8003ace <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388c:	2b80      	cmp	r3, #128	; 0x80
 800388e:	d10e      	bne.n	80038ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389a:	2b80      	cmp	r3, #128	; 0x80
 800389c:	d107      	bne.n	80038ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 fb09 	bl	8003ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038bc:	d10e      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c8:	2b80      	cmp	r3, #128	; 0x80
 80038ca:	d107      	bne.n	80038dc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 fafc 	bl	8003ed4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e6:	2b40      	cmp	r3, #64	; 0x40
 80038e8:	d10e      	bne.n	8003908 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d107      	bne.n	8003908 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f90b 	bl	8003b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b20      	cmp	r3, #32
 8003914:	d10e      	bne.n	8003934 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b20      	cmp	r3, #32
 8003922:	d107      	bne.n	8003934 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0220 	mvn.w	r2, #32
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fabc 	bl	8003eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_TIM_ConfigClockSource+0x1c>
 8003954:	2302      	movs	r3, #2
 8003956:	e0b6      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x18a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003976:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800397a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003982:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003994:	d03e      	beq.n	8003a14 <HAL_TIM_ConfigClockSource+0xd8>
 8003996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399a:	f200 8087 	bhi.w	8003aac <HAL_TIM_ConfigClockSource+0x170>
 800399e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a2:	f000 8086 	beq.w	8003ab2 <HAL_TIM_ConfigClockSource+0x176>
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039aa:	d87f      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x170>
 80039ac:	2b70      	cmp	r3, #112	; 0x70
 80039ae:	d01a      	beq.n	80039e6 <HAL_TIM_ConfigClockSource+0xaa>
 80039b0:	2b70      	cmp	r3, #112	; 0x70
 80039b2:	d87b      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x170>
 80039b4:	2b60      	cmp	r3, #96	; 0x60
 80039b6:	d050      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0x11e>
 80039b8:	2b60      	cmp	r3, #96	; 0x60
 80039ba:	d877      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x170>
 80039bc:	2b50      	cmp	r3, #80	; 0x50
 80039be:	d03c      	beq.n	8003a3a <HAL_TIM_ConfigClockSource+0xfe>
 80039c0:	2b50      	cmp	r3, #80	; 0x50
 80039c2:	d873      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x170>
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d058      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0x13e>
 80039c8:	2b40      	cmp	r3, #64	; 0x40
 80039ca:	d86f      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x170>
 80039cc:	2b30      	cmp	r3, #48	; 0x30
 80039ce:	d064      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x15e>
 80039d0:	2b30      	cmp	r3, #48	; 0x30
 80039d2:	d86b      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x170>
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d060      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x15e>
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d867      	bhi.n	8003aac <HAL_TIM_ConfigClockSource+0x170>
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d05c      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x15e>
 80039e0:	2b10      	cmp	r3, #16
 80039e2:	d05a      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x15e>
 80039e4:	e062      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	6899      	ldr	r1, [r3, #8]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f000 f9b1 	bl	8003d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68ba      	ldr	r2, [r7, #8]
 8003a10:	609a      	str	r2, [r3, #8]
      break;
 8003a12:	e04f      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	6899      	ldr	r1, [r3, #8]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f000 f99a 	bl	8003d5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689a      	ldr	r2, [r3, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a36:	609a      	str	r2, [r3, #8]
      break;
 8003a38:	e03c      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	6859      	ldr	r1, [r3, #4]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f000 f90e 	bl	8003c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2150      	movs	r1, #80	; 0x50
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f967 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003a58:	e02c      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6859      	ldr	r1, [r3, #4]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f000 f92d 	bl	8003cc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2160      	movs	r1, #96	; 0x60
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f957 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003a78:	e01c      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6859      	ldr	r1, [r3, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f000 f8ee 	bl	8003c68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2140      	movs	r1, #64	; 0x40
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f947 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003a98:	e00c      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	f000 f93e 	bl	8003d26 <TIM_ITRx_SetConfig>
      break;
 8003aaa:	e003      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab0:	e000      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003ab2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a40      	ldr	r2, [pc, #256]	; (8003c48 <TIM_Base_SetConfig+0x114>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b52:	d00f      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3d      	ldr	r2, [pc, #244]	; (8003c4c <TIM_Base_SetConfig+0x118>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a3c      	ldr	r2, [pc, #240]	; (8003c50 <TIM_Base_SetConfig+0x11c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3b      	ldr	r2, [pc, #236]	; (8003c54 <TIM_Base_SetConfig+0x120>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_Base_SetConfig+0x40>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a3a      	ldr	r2, [pc, #232]	; (8003c58 <TIM_Base_SetConfig+0x124>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d108      	bne.n	8003b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2f      	ldr	r2, [pc, #188]	; (8003c48 <TIM_Base_SetConfig+0x114>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01f      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d01b      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2c      	ldr	r2, [pc, #176]	; (8003c4c <TIM_Base_SetConfig+0x118>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d017      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	; (8003c50 <TIM_Base_SetConfig+0x11c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a2a      	ldr	r2, [pc, #168]	; (8003c54 <TIM_Base_SetConfig+0x120>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00f      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a29      	ldr	r2, [pc, #164]	; (8003c58 <TIM_Base_SetConfig+0x124>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a28      	ldr	r2, [pc, #160]	; (8003c5c <TIM_Base_SetConfig+0x128>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <TIM_Base_SetConfig+0x12c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0x9a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <TIM_Base_SetConfig+0x130>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <TIM_Base_SetConfig+0x114>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d00f      	beq.n	8003c2c <TIM_Base_SetConfig+0xf8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <TIM_Base_SetConfig+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00b      	beq.n	8003c2c <TIM_Base_SetConfig+0xf8>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <TIM_Base_SetConfig+0x128>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d007      	beq.n	8003c2c <TIM_Base_SetConfig+0xf8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a10      	ldr	r2, [pc, #64]	; (8003c60 <TIM_Base_SetConfig+0x12c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_Base_SetConfig+0xf8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <TIM_Base_SetConfig+0x130>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d103      	bne.n	8003c34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	615a      	str	r2, [r3, #20]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40000400 	.word	0x40000400
 8003c50:	40000800 	.word	0x40000800
 8003c54:	40000c00 	.word	0x40000c00
 8003c58:	40013400 	.word	0x40013400
 8003c5c:	40014000 	.word	0x40014000
 8003c60:	40014400 	.word	0x40014400
 8003c64:	40014800 	.word	0x40014800

08003c68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f023 0201 	bic.w	r2, r3, #1
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 030a 	bic.w	r3, r3, #10
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	621a      	str	r2, [r3, #32]
}
 8003cba:	bf00      	nop
 8003cbc:	371c      	adds	r7, #28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b087      	sub	sp, #28
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	60f8      	str	r0, [r7, #12]
 8003cce:	60b9      	str	r1, [r7, #8]
 8003cd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
 8003cd6:	f023 0210 	bic.w	r2, r3, #16
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	031b      	lsls	r3, r3, #12
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	621a      	str	r2, [r3, #32]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f043 0307 	orr.w	r3, r3, #7
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
 8003d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	609a      	str	r2, [r3, #8]
}
 8003d90:	bf00      	nop
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e068      	b.n	8003e86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2e      	ldr	r2, [pc, #184]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2d      	ldr	r2, [pc, #180]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d108      	bne.n	8003dfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01d      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e26:	d018      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a14      	ldr	r2, [pc, #80]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10c      	bne.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	40013400 	.word	0x40013400
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40000c00 	.word	0x40000c00
 8003ea8:	40014000 	.word	0x40014000

08003eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e040      	b.n	8003f7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fc feaa 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	; 0x24
 8003f14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8c0 	bl	80040ac <UART_SetConfig>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e022      	b.n	8003f7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fb3e 	bl	80045c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fbc5 	bl	8004704 <UART_CheckIdleState>
 8003f7a:	4603      	mov	r3, r0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	f040 8082 	bne.w	80040a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_UART_Transmit+0x26>
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e07a      	b.n	80040a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_UART_Transmit+0x38>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e073      	b.n	80040a4 <HAL_UART_Transmit+0x120>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2221      	movs	r2, #33	; 0x21
 8003fd0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fd2:	f7fc ff6b 	bl	8000eac <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff0:	d108      	bne.n	8004004 <HAL_UART_Transmit+0x80>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d104      	bne.n	8004004 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	e003      	b.n	800400c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004014:	e02d      	b.n	8004072 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 fbb8 	bl	8004796 <UART_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e039      	b.n	80040a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10b      	bne.n	800404e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	881a      	ldrh	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004042:	b292      	uxth	r2, r2
 8004044:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	3302      	adds	r3, #2
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	e008      	b.n	8004060 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	781a      	ldrb	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	b292      	uxth	r2, r2
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1cb      	bne.n	8004016 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	2140      	movs	r1, #64	; 0x40
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fb84 	bl	8004796 <UART_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e005      	b.n	80040a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2220      	movs	r2, #32
 800409c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800409e:	2300      	movs	r3, #0
 80040a0:	e000      	b.n	80040a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80040a2:	2302      	movs	r3, #2
  }
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ac:	b5b0      	push	{r4, r5, r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689a      	ldr	r2, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4bad      	ldr	r3, [pc, #692]	; (800438c <UART_SetConfig+0x2e0>)
 80040d8:	4013      	ands	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	69f9      	ldr	r1, [r7, #28]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4aa2      	ldr	r2, [pc, #648]	; (8004390 <UART_SetConfig+0x2e4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	4313      	orrs	r3, r2
 8004112:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	430a      	orrs	r2, r1
 8004126:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a99      	ldr	r2, [pc, #612]	; (8004394 <UART_SetConfig+0x2e8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d121      	bne.n	8004176 <UART_SetConfig+0xca>
 8004132:	4b99      	ldr	r3, [pc, #612]	; (8004398 <UART_SetConfig+0x2ec>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	2b03      	cmp	r3, #3
 800413e:	d817      	bhi.n	8004170 <UART_SetConfig+0xc4>
 8004140:	a201      	add	r2, pc, #4	; (adr r2, 8004148 <UART_SetConfig+0x9c>)
 8004142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004146:	bf00      	nop
 8004148:	08004159 	.word	0x08004159
 800414c:	08004165 	.word	0x08004165
 8004150:	0800415f 	.word	0x0800415f
 8004154:	0800416b 	.word	0x0800416b
 8004158:	2301      	movs	r3, #1
 800415a:	76fb      	strb	r3, [r7, #27]
 800415c:	e0e7      	b.n	800432e <UART_SetConfig+0x282>
 800415e:	2302      	movs	r3, #2
 8004160:	76fb      	strb	r3, [r7, #27]
 8004162:	e0e4      	b.n	800432e <UART_SetConfig+0x282>
 8004164:	2304      	movs	r3, #4
 8004166:	76fb      	strb	r3, [r7, #27]
 8004168:	e0e1      	b.n	800432e <UART_SetConfig+0x282>
 800416a:	2308      	movs	r3, #8
 800416c:	76fb      	strb	r3, [r7, #27]
 800416e:	e0de      	b.n	800432e <UART_SetConfig+0x282>
 8004170:	2310      	movs	r3, #16
 8004172:	76fb      	strb	r3, [r7, #27]
 8004174:	e0db      	b.n	800432e <UART_SetConfig+0x282>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a88      	ldr	r2, [pc, #544]	; (800439c <UART_SetConfig+0x2f0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d132      	bne.n	80041e6 <UART_SetConfig+0x13a>
 8004180:	4b85      	ldr	r3, [pc, #532]	; (8004398 <UART_SetConfig+0x2ec>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	f003 030c 	and.w	r3, r3, #12
 800418a:	2b0c      	cmp	r3, #12
 800418c:	d828      	bhi.n	80041e0 <UART_SetConfig+0x134>
 800418e:	a201      	add	r2, pc, #4	; (adr r2, 8004194 <UART_SetConfig+0xe8>)
 8004190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004194:	080041c9 	.word	0x080041c9
 8004198:	080041e1 	.word	0x080041e1
 800419c:	080041e1 	.word	0x080041e1
 80041a0:	080041e1 	.word	0x080041e1
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041e1 	.word	0x080041e1
 80041ac:	080041e1 	.word	0x080041e1
 80041b0:	080041e1 	.word	0x080041e1
 80041b4:	080041cf 	.word	0x080041cf
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	080041e1 	.word	0x080041e1
 80041c0:	080041e1 	.word	0x080041e1
 80041c4:	080041db 	.word	0x080041db
 80041c8:	2300      	movs	r3, #0
 80041ca:	76fb      	strb	r3, [r7, #27]
 80041cc:	e0af      	b.n	800432e <UART_SetConfig+0x282>
 80041ce:	2302      	movs	r3, #2
 80041d0:	76fb      	strb	r3, [r7, #27]
 80041d2:	e0ac      	b.n	800432e <UART_SetConfig+0x282>
 80041d4:	2304      	movs	r3, #4
 80041d6:	76fb      	strb	r3, [r7, #27]
 80041d8:	e0a9      	b.n	800432e <UART_SetConfig+0x282>
 80041da:	2308      	movs	r3, #8
 80041dc:	76fb      	strb	r3, [r7, #27]
 80041de:	e0a6      	b.n	800432e <UART_SetConfig+0x282>
 80041e0:	2310      	movs	r3, #16
 80041e2:	76fb      	strb	r3, [r7, #27]
 80041e4:	e0a3      	b.n	800432e <UART_SetConfig+0x282>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a6d      	ldr	r2, [pc, #436]	; (80043a0 <UART_SetConfig+0x2f4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d120      	bne.n	8004232 <UART_SetConfig+0x186>
 80041f0:	4b69      	ldr	r3, [pc, #420]	; (8004398 <UART_SetConfig+0x2ec>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041fa:	2b30      	cmp	r3, #48	; 0x30
 80041fc:	d013      	beq.n	8004226 <UART_SetConfig+0x17a>
 80041fe:	2b30      	cmp	r3, #48	; 0x30
 8004200:	d814      	bhi.n	800422c <UART_SetConfig+0x180>
 8004202:	2b20      	cmp	r3, #32
 8004204:	d009      	beq.n	800421a <UART_SetConfig+0x16e>
 8004206:	2b20      	cmp	r3, #32
 8004208:	d810      	bhi.n	800422c <UART_SetConfig+0x180>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <UART_SetConfig+0x168>
 800420e:	2b10      	cmp	r3, #16
 8004210:	d006      	beq.n	8004220 <UART_SetConfig+0x174>
 8004212:	e00b      	b.n	800422c <UART_SetConfig+0x180>
 8004214:	2300      	movs	r3, #0
 8004216:	76fb      	strb	r3, [r7, #27]
 8004218:	e089      	b.n	800432e <UART_SetConfig+0x282>
 800421a:	2302      	movs	r3, #2
 800421c:	76fb      	strb	r3, [r7, #27]
 800421e:	e086      	b.n	800432e <UART_SetConfig+0x282>
 8004220:	2304      	movs	r3, #4
 8004222:	76fb      	strb	r3, [r7, #27]
 8004224:	e083      	b.n	800432e <UART_SetConfig+0x282>
 8004226:	2308      	movs	r3, #8
 8004228:	76fb      	strb	r3, [r7, #27]
 800422a:	e080      	b.n	800432e <UART_SetConfig+0x282>
 800422c:	2310      	movs	r3, #16
 800422e:	76fb      	strb	r3, [r7, #27]
 8004230:	e07d      	b.n	800432e <UART_SetConfig+0x282>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a5b      	ldr	r2, [pc, #364]	; (80043a4 <UART_SetConfig+0x2f8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d120      	bne.n	800427e <UART_SetConfig+0x1d2>
 800423c:	4b56      	ldr	r3, [pc, #344]	; (8004398 <UART_SetConfig+0x2ec>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004246:	2bc0      	cmp	r3, #192	; 0xc0
 8004248:	d013      	beq.n	8004272 <UART_SetConfig+0x1c6>
 800424a:	2bc0      	cmp	r3, #192	; 0xc0
 800424c:	d814      	bhi.n	8004278 <UART_SetConfig+0x1cc>
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d009      	beq.n	8004266 <UART_SetConfig+0x1ba>
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d810      	bhi.n	8004278 <UART_SetConfig+0x1cc>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <UART_SetConfig+0x1b4>
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d006      	beq.n	800426c <UART_SetConfig+0x1c0>
 800425e:	e00b      	b.n	8004278 <UART_SetConfig+0x1cc>
 8004260:	2300      	movs	r3, #0
 8004262:	76fb      	strb	r3, [r7, #27]
 8004264:	e063      	b.n	800432e <UART_SetConfig+0x282>
 8004266:	2302      	movs	r3, #2
 8004268:	76fb      	strb	r3, [r7, #27]
 800426a:	e060      	b.n	800432e <UART_SetConfig+0x282>
 800426c:	2304      	movs	r3, #4
 800426e:	76fb      	strb	r3, [r7, #27]
 8004270:	e05d      	b.n	800432e <UART_SetConfig+0x282>
 8004272:	2308      	movs	r3, #8
 8004274:	76fb      	strb	r3, [r7, #27]
 8004276:	e05a      	b.n	800432e <UART_SetConfig+0x282>
 8004278:	2310      	movs	r3, #16
 800427a:	76fb      	strb	r3, [r7, #27]
 800427c:	e057      	b.n	800432e <UART_SetConfig+0x282>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a49      	ldr	r2, [pc, #292]	; (80043a8 <UART_SetConfig+0x2fc>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d125      	bne.n	80042d4 <UART_SetConfig+0x228>
 8004288:	4b43      	ldr	r3, [pc, #268]	; (8004398 <UART_SetConfig+0x2ec>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004296:	d017      	beq.n	80042c8 <UART_SetConfig+0x21c>
 8004298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800429c:	d817      	bhi.n	80042ce <UART_SetConfig+0x222>
 800429e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a2:	d00b      	beq.n	80042bc <UART_SetConfig+0x210>
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a8:	d811      	bhi.n	80042ce <UART_SetConfig+0x222>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <UART_SetConfig+0x20a>
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b2:	d006      	beq.n	80042c2 <UART_SetConfig+0x216>
 80042b4:	e00b      	b.n	80042ce <UART_SetConfig+0x222>
 80042b6:	2300      	movs	r3, #0
 80042b8:	76fb      	strb	r3, [r7, #27]
 80042ba:	e038      	b.n	800432e <UART_SetConfig+0x282>
 80042bc:	2302      	movs	r3, #2
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	e035      	b.n	800432e <UART_SetConfig+0x282>
 80042c2:	2304      	movs	r3, #4
 80042c4:	76fb      	strb	r3, [r7, #27]
 80042c6:	e032      	b.n	800432e <UART_SetConfig+0x282>
 80042c8:	2308      	movs	r3, #8
 80042ca:	76fb      	strb	r3, [r7, #27]
 80042cc:	e02f      	b.n	800432e <UART_SetConfig+0x282>
 80042ce:	2310      	movs	r3, #16
 80042d0:	76fb      	strb	r3, [r7, #27]
 80042d2:	e02c      	b.n	800432e <UART_SetConfig+0x282>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a2d      	ldr	r2, [pc, #180]	; (8004390 <UART_SetConfig+0x2e4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d125      	bne.n	800432a <UART_SetConfig+0x27e>
 80042de:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <UART_SetConfig+0x2ec>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042ec:	d017      	beq.n	800431e <UART_SetConfig+0x272>
 80042ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042f2:	d817      	bhi.n	8004324 <UART_SetConfig+0x278>
 80042f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f8:	d00b      	beq.n	8004312 <UART_SetConfig+0x266>
 80042fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042fe:	d811      	bhi.n	8004324 <UART_SetConfig+0x278>
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <UART_SetConfig+0x260>
 8004304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004308:	d006      	beq.n	8004318 <UART_SetConfig+0x26c>
 800430a:	e00b      	b.n	8004324 <UART_SetConfig+0x278>
 800430c:	2300      	movs	r3, #0
 800430e:	76fb      	strb	r3, [r7, #27]
 8004310:	e00d      	b.n	800432e <UART_SetConfig+0x282>
 8004312:	2302      	movs	r3, #2
 8004314:	76fb      	strb	r3, [r7, #27]
 8004316:	e00a      	b.n	800432e <UART_SetConfig+0x282>
 8004318:	2304      	movs	r3, #4
 800431a:	76fb      	strb	r3, [r7, #27]
 800431c:	e007      	b.n	800432e <UART_SetConfig+0x282>
 800431e:	2308      	movs	r3, #8
 8004320:	76fb      	strb	r3, [r7, #27]
 8004322:	e004      	b.n	800432e <UART_SetConfig+0x282>
 8004324:	2310      	movs	r3, #16
 8004326:	76fb      	strb	r3, [r7, #27]
 8004328:	e001      	b.n	800432e <UART_SetConfig+0x282>
 800432a:	2310      	movs	r3, #16
 800432c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a17      	ldr	r2, [pc, #92]	; (8004390 <UART_SetConfig+0x2e4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	f040 8087 	bne.w	8004448 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800433a:	7efb      	ldrb	r3, [r7, #27]
 800433c:	2b08      	cmp	r3, #8
 800433e:	d837      	bhi.n	80043b0 <UART_SetConfig+0x304>
 8004340:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0x29c>)
 8004342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004346:	bf00      	nop
 8004348:	0800436d 	.word	0x0800436d
 800434c:	080043b1 	.word	0x080043b1
 8004350:	08004375 	.word	0x08004375
 8004354:	080043b1 	.word	0x080043b1
 8004358:	0800437b 	.word	0x0800437b
 800435c:	080043b1 	.word	0x080043b1
 8004360:	080043b1 	.word	0x080043b1
 8004364:	080043b1 	.word	0x080043b1
 8004368:	08004383 	.word	0x08004383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7fe f9d2 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8004370:	6178      	str	r0, [r7, #20]
        break;
 8004372:	e022      	b.n	80043ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004374:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <UART_SetConfig+0x300>)
 8004376:	617b      	str	r3, [r7, #20]
        break;
 8004378:	e01f      	b.n	80043ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800437a:	f7fe f933 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800437e:	6178      	str	r0, [r7, #20]
        break;
 8004380:	e01b      	b.n	80043ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004386:	617b      	str	r3, [r7, #20]
        break;
 8004388:	e017      	b.n	80043ba <UART_SetConfig+0x30e>
 800438a:	bf00      	nop
 800438c:	efff69f3 	.word	0xefff69f3
 8004390:	40008000 	.word	0x40008000
 8004394:	40013800 	.word	0x40013800
 8004398:	40021000 	.word	0x40021000
 800439c:	40004400 	.word	0x40004400
 80043a0:	40004800 	.word	0x40004800
 80043a4:	40004c00 	.word	0x40004c00
 80043a8:	40005000 	.word	0x40005000
 80043ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	76bb      	strb	r3, [r7, #26]
        break;
 80043b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80f1 	beq.w	80045a4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	4413      	add	r3, r2
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d305      	bcc.n	80043de <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d902      	bls.n	80043e4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	76bb      	strb	r3, [r7, #26]
 80043e2:	e0df      	b.n	80045a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	020b      	lsls	r3, r1, #8
 80043f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043fa:	0202      	lsls	r2, r0, #8
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	6849      	ldr	r1, [r1, #4]
 8004400:	0849      	lsrs	r1, r1, #1
 8004402:	4608      	mov	r0, r1
 8004404:	f04f 0100 	mov.w	r1, #0
 8004408:	1814      	adds	r4, r2, r0
 800440a:	eb43 0501 	adc.w	r5, r3, r1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	461a      	mov	r2, r3
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	4620      	mov	r0, r4
 800441a:	4629      	mov	r1, r5
 800441c:	f7fb fedc 	bl	80001d8 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800442e:	d308      	bcc.n	8004442 <UART_SetConfig+0x396>
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004436:	d204      	bcs.n	8004442 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	60da      	str	r2, [r3, #12]
 8004440:	e0b0      	b.n	80045a4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	76bb      	strb	r3, [r7, #26]
 8004446:	e0ad      	b.n	80045a4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004450:	d15b      	bne.n	800450a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004452:	7efb      	ldrb	r3, [r7, #27]
 8004454:	2b08      	cmp	r3, #8
 8004456:	d828      	bhi.n	80044aa <UART_SetConfig+0x3fe>
 8004458:	a201      	add	r2, pc, #4	; (adr r2, 8004460 <UART_SetConfig+0x3b4>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004485 	.word	0x08004485
 8004464:	0800448d 	.word	0x0800448d
 8004468:	08004495 	.word	0x08004495
 800446c:	080044ab 	.word	0x080044ab
 8004470:	0800449b 	.word	0x0800449b
 8004474:	080044ab 	.word	0x080044ab
 8004478:	080044ab 	.word	0x080044ab
 800447c:	080044ab 	.word	0x080044ab
 8004480:	080044a3 	.word	0x080044a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004484:	f7fe f946 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8004488:	6178      	str	r0, [r7, #20]
        break;
 800448a:	e013      	b.n	80044b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800448c:	f7fe f958 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8004490:	6178      	str	r0, [r7, #20]
        break;
 8004492:	e00f      	b.n	80044b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004494:	4b49      	ldr	r3, [pc, #292]	; (80045bc <UART_SetConfig+0x510>)
 8004496:	617b      	str	r3, [r7, #20]
        break;
 8004498:	e00c      	b.n	80044b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449a:	f7fe f8a3 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 800449e:	6178      	str	r0, [r7, #20]
        break;
 80044a0:	e008      	b.n	80044b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a6:	617b      	str	r3, [r7, #20]
        break;
 80044a8:	e004      	b.n	80044b4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	76bb      	strb	r3, [r7, #26]
        break;
 80044b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d074      	beq.n	80045a4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	005a      	lsls	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	441a      	add	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2b0f      	cmp	r3, #15
 80044d4:	d916      	bls.n	8004504 <UART_SetConfig+0x458>
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	d212      	bcs.n	8004504 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	f023 030f 	bic.w	r3, r3, #15
 80044e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	89fb      	ldrh	r3, [r7, #14]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	89fa      	ldrh	r2, [r7, #14]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	e04f      	b.n	80045a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	76bb      	strb	r3, [r7, #26]
 8004508:	e04c      	b.n	80045a4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800450a:	7efb      	ldrb	r3, [r7, #27]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d828      	bhi.n	8004562 <UART_SetConfig+0x4b6>
 8004510:	a201      	add	r2, pc, #4	; (adr r2, 8004518 <UART_SetConfig+0x46c>)
 8004512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004516:	bf00      	nop
 8004518:	0800453d 	.word	0x0800453d
 800451c:	08004545 	.word	0x08004545
 8004520:	0800454d 	.word	0x0800454d
 8004524:	08004563 	.word	0x08004563
 8004528:	08004553 	.word	0x08004553
 800452c:	08004563 	.word	0x08004563
 8004530:	08004563 	.word	0x08004563
 8004534:	08004563 	.word	0x08004563
 8004538:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800453c:	f7fe f8ea 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8004540:	6178      	str	r0, [r7, #20]
        break;
 8004542:	e013      	b.n	800456c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004544:	f7fe f8fc 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8004548:	6178      	str	r0, [r7, #20]
        break;
 800454a:	e00f      	b.n	800456c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <UART_SetConfig+0x510>)
 800454e:	617b      	str	r3, [r7, #20]
        break;
 8004550:	e00c      	b.n	800456c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7fe f847 	bl	80025e4 <HAL_RCC_GetSysClockFreq>
 8004556:	6178      	str	r0, [r7, #20]
        break;
 8004558:	e008      	b.n	800456c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455e:	617b      	str	r3, [r7, #20]
        break;
 8004560:	e004      	b.n	800456c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	76bb      	strb	r3, [r7, #26]
        break;
 800456a:	bf00      	nop
    }

    if (pclk != 0U)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d018      	beq.n	80045a4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	085a      	lsrs	r2, r3, #1
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	441a      	add	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b0f      	cmp	r3, #15
 800458a:	d909      	bls.n	80045a0 <UART_SetConfig+0x4f4>
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004592:	d205      	bcs.n	80045a0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	b29a      	uxth	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	e001      	b.n	80045a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bdb0      	pop	{r4, r5, r7, pc}
 80045ba:	bf00      	nop
 80045bc:	00f42400 	.word	0x00f42400

080045c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	f003 0308 	and.w	r3, r3, #8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00a      	beq.n	8004650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00a      	beq.n	8004672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00a      	beq.n	8004694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01a      	beq.n	80046d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046be:	d10a      	bne.n	80046d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	605a      	str	r2, [r3, #4]
  }
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af02      	add	r7, sp, #8
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004714:	f7fc fbca 	bl	8000eac <HAL_GetTick>
 8004718:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d10e      	bne.n	8004746 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f82d 	bl	8004796 <UART_WaitOnFlagUntilTimeout>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e023      	b.n	800478e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b04      	cmp	r3, #4
 8004752:	d10e      	bne.n	8004772 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f817 	bl	8004796 <UART_WaitOnFlagUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e00d      	b.n	800478e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b09c      	sub	sp, #112	; 0x70
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	603b      	str	r3, [r7, #0]
 80047a2:	4613      	mov	r3, r2
 80047a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a6:	e0a5      	b.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	f000 80a1 	beq.w	80048f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fc fb7b 	bl	8000eac <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80047c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d13e      	bne.n	8004846 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047dc:	667b      	str	r3, [r7, #100]	; 0x64
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80047ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80047ee:	e841 2300 	strex	r3, r2, [r1]
 80047f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80047f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1e6      	bne.n	80047c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3308      	adds	r3, #8
 8004800:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004804:	e853 3f00 	ldrex	r3, [r3]
 8004808:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800480a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	663b      	str	r3, [r7, #96]	; 0x60
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3308      	adds	r3, #8
 8004818:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800481a:	64ba      	str	r2, [r7, #72]	; 0x48
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800481e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004822:	e841 2300 	strex	r3, r2, [r1]
 8004826:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1e5      	bne.n	80047fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2220      	movs	r2, #32
 8004838:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e067      	b.n	8004916 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d04f      	beq.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800485e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004862:	d147      	bne.n	80048f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800486c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800488c:	637b      	str	r3, [r7, #52]	; 0x34
 800488e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004892:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004894:	e841 2300 	strex	r3, r2, [r1]
 8004898:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1e6      	bne.n	800486e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	613b      	str	r3, [r7, #16]
   return(result);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f023 0301 	bic.w	r3, r3, #1
 80048b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3308      	adds	r3, #8
 80048be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048c0:	623a      	str	r2, [r7, #32]
 80048c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	69f9      	ldr	r1, [r7, #28]
 80048c6:	6a3a      	ldr	r2, [r7, #32]
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e5      	bne.n	80048a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e010      	b.n	8004916 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69da      	ldr	r2, [r3, #28]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	4013      	ands	r3, r2
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	429a      	cmp	r2, r3
 8004902:	bf0c      	ite	eq
 8004904:	2301      	moveq	r3, #1
 8004906:	2300      	movne	r3, #0
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	429a      	cmp	r2, r3
 8004910:	f43f af4a 	beq.w	80047a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3770      	adds	r7, #112	; 0x70
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <__libc_init_array>:
 8004920:	b570      	push	{r4, r5, r6, lr}
 8004922:	4d0d      	ldr	r5, [pc, #52]	; (8004958 <__libc_init_array+0x38>)
 8004924:	4c0d      	ldr	r4, [pc, #52]	; (800495c <__libc_init_array+0x3c>)
 8004926:	1b64      	subs	r4, r4, r5
 8004928:	10a4      	asrs	r4, r4, #2
 800492a:	2600      	movs	r6, #0
 800492c:	42a6      	cmp	r6, r4
 800492e:	d109      	bne.n	8004944 <__libc_init_array+0x24>
 8004930:	4d0b      	ldr	r5, [pc, #44]	; (8004960 <__libc_init_array+0x40>)
 8004932:	4c0c      	ldr	r4, [pc, #48]	; (8004964 <__libc_init_array+0x44>)
 8004934:	f000 f820 	bl	8004978 <_init>
 8004938:	1b64      	subs	r4, r4, r5
 800493a:	10a4      	asrs	r4, r4, #2
 800493c:	2600      	movs	r6, #0
 800493e:	42a6      	cmp	r6, r4
 8004940:	d105      	bne.n	800494e <__libc_init_array+0x2e>
 8004942:	bd70      	pop	{r4, r5, r6, pc}
 8004944:	f855 3b04 	ldr.w	r3, [r5], #4
 8004948:	4798      	blx	r3
 800494a:	3601      	adds	r6, #1
 800494c:	e7ee      	b.n	800492c <__libc_init_array+0xc>
 800494e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004952:	4798      	blx	r3
 8004954:	3601      	adds	r6, #1
 8004956:	e7f2      	b.n	800493e <__libc_init_array+0x1e>
 8004958:	08004a28 	.word	0x08004a28
 800495c:	08004a28 	.word	0x08004a28
 8004960:	08004a28 	.word	0x08004a28
 8004964:	08004a2c 	.word	0x08004a2c

08004968 <memset>:
 8004968:	4402      	add	r2, r0
 800496a:	4603      	mov	r3, r0
 800496c:	4293      	cmp	r3, r2
 800496e:	d100      	bne.n	8004972 <memset+0xa>
 8004970:	4770      	bx	lr
 8004972:	f803 1b01 	strb.w	r1, [r3], #1
 8004976:	e7f9      	b.n	800496c <memset+0x4>

08004978 <_init>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	bf00      	nop
 800497c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800497e:	bc08      	pop	{r3}
 8004980:	469e      	mov	lr, r3
 8004982:	4770      	bx	lr

08004984 <_fini>:
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	bf00      	nop
 8004988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800498a:	bc08      	pop	{r3}
 800498c:	469e      	mov	lr, r3
 800498e:	4770      	bx	lr
